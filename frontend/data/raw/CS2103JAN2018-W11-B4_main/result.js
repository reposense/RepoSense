var resultJson = [{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d StardyTogether - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":toclevels: 3"},{"lineNumber":6,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":7,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":8,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":9,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":10,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":11,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":12,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":13,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":14,"author":{"gitID":"-"},"content":":warning-caption: :warning:"},{"lineNumber":15,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":16,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-W11-B4/main"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"By: `Team W11-B4`      Since: `Feb 2018`      Licence: `MIT`"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"* Stardy Together (ST) is for *NUS Students* who prefer to use a *desktop app* for managing NUS friends\u0027 contacts."},{"lineNumber":23,"author":{"gitID":"-"},"content":"* More importantly, ST is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI)."},{"lineNumber":24,"author":{"gitID":"-"},"content":"* If you can type fast, ST can get your contact management tasks done faster than traditional GUI apps."},{"lineNumber":25,"author":{"gitID":"-"},"content":"* This guide provides a list of features that are available on ST and their usage."},{"lineNumber":26,"author":{"gitID":"-"},"content":"* Interested? Jump to the next section, \u003c\u003cQuick Start\u003e\u003e, to get started. Enjoy!"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":31,"author":{"gitID":"-"},"content":"+"},{"lineNumber":32,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":33,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":34,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":35,"author":{"gitID":"-"},"content":"+"},{"lineNumber":36,"author":{"gitID":"-"},"content":".  Download the latest `StardyTogether.jar` link:{repoURL}/releases[here]."},{"lineNumber":37,"author":{"gitID":"-"},"content":".  Copy the file to the folder you want to use as the home folder for your StardyTogether."},{"lineNumber":38,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. The GUI should appear in a few seconds."},{"lineNumber":39,"author":{"gitID":"-"},"content":"+"},{"lineNumber":40,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":41,"author":{"gitID":"-"},"content":"+"},{"lineNumber":42,"author":{"gitID":"-"},"content":".  Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":43,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":44,"author":{"gitID":"-"},"content":".  Some example commands you can try:"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"* *`list`* : lists all friends and aliases"},{"lineNumber":47,"author":{"gitID":"-"},"content":"* **`add`**`add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 b/01011995 tt/http://modsn.us/oNZLY` : adds a friend named `John Doe` to ST."},{"lineNumber":48,"author":{"gitID":"-"},"content":"* **`delete`**`3` : deletes the 3rd friend shown in the current list"},{"lineNumber":49,"author":{"gitID":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":".  Refer to the next section, \u003c\u003cFeatures\u003e\u003e, for details of each command, or refer to \u003c\u003cCommand Summary\u003e\u003e for the summary of all the commands."},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":54,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":57,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":60,"author":{"gitID":"-"},"content":"* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":61,"author":{"gitID":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":62,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":63,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":64,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Contact Commands"},{"lineNumber":65,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Adding a friend: `add`"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"To add a friend to ST, you can enter the command `add` followed by the various parameters +"},{"lineNumber":68,"author":{"gitID":"-"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS b/BIRTHDAY tt/TIMETABLE [t/TAG]...`"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":71,"author":{"gitID":"-"},"content":"A friend can have any number of tags (including 0)"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"[WARNING]"},{"lineNumber":74,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":75,"author":{"gitID":"-"},"content":"* Birthday must be in DDMMYYYY format"},{"lineNumber":76,"author":{"gitID":"-"},"content":"* Timetable must either be a valid NUSMods shortened link or left empty"},{"lineNumber":77,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":80,"author":{"gitID":"-"},"content":"If timetable is invalid, left empty or there is no internet access, an empty timetable will be created for you"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"For more information on how to get a valid link, refer to \u003c\u003cFAQ\u003e\u003e."},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 b/01011995 tt/http://modsn.us/oNZLY`"},{"lineNumber":87,"author":{"gitID":"-"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 b/28021997 tt/http://modsn.us/ojGeu t/criminal`"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"// tag::list[]"},{"lineNumber":90,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Listing all friends and aliases: `list`"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"To show a list of all your friends and a table of created aliases in ST, you can enter the command `list` +"},{"lineNumber":93,"author":{"gitID":"-"},"content":"Format: `list`"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"image::aliasList.png[width\u003d\"790\"]"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"// end::list[]"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Editing a friend : `edit`"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"To edit a friend\u0027s particulars, you can enter the command `edit` followed by the respective parameters you wish to edit. +"},{"lineNumber":102,"author":{"gitID":"-"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [b/BIRTHDAY] [tt/TIMETABLE] [t/TAG]...`"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"****"},{"lineNumber":105,"author":{"gitID":"-"},"content":"* Edits the friend at the specified `INDEX`. The index refers to the index number shown in the last friend listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":106,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":107,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":108,"author":{"gitID":"-"},"content":"* When editing tags, the existing tags of the friend will be removed i.e adding of tags is not cumulative."},{"lineNumber":109,"author":{"gitID":"-"},"content":"* You can remove all the tags tagged to the friend by typing `t/` without specifying any tags after it."},{"lineNumber":110,"author":{"gitID":"-"},"content":"****"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"* `edit 1 p/91234567 e/johndoe@example.com` +"},{"lineNumber":115,"author":{"gitID":"-"},"content":"Edits the phone number and email address of the 1st friend to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":116,"author":{"gitID":"-"},"content":"* `edit 2 n/Betsy Crower t/` +"},{"lineNumber":117,"author":{"gitID":"-"},"content":"Edits the name of the 2nd friend to be `Betsy Crower` and clears all existing tags."},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Locating friends by name: `find`"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"To find specific friends by their names, you can enter the command `find`, followed by KEYWORD. +"},{"lineNumber":122,"author":{"gitID":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"****"},{"lineNumber":125,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":126,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":127,"author":{"gitID":"-"},"content":"* Only the name is searched."},{"lineNumber":128,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":129,"author":{"gitID":"-"},"content":"* Friends matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":130,"author":{"gitID":"-"},"content":"****"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"* `find John` +"},{"lineNumber":135,"author":{"gitID":"-"},"content":"Returns `john` and `John Doe`"},{"lineNumber":136,"author":{"gitID":"-"},"content":"* `find Betsy Tim John` +"},{"lineNumber":137,"author":{"gitID":"-"},"content":"Returns any friend having names `Betsy`, `Tim`, or `John`"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Deleting a friend : `delete`"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"To remove a specified friend from ST :cry: , you can enter the command `delete` followed by his INDEX.+"},{"lineNumber":142,"author":{"gitID":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"****"},{"lineNumber":145,"author":{"gitID":"-"},"content":"* Deletes the friend at the specified `INDEX`."},{"lineNumber":146,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":147,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":148,"author":{"gitID":"-"},"content":"****"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":153,"author":{"gitID":"-"},"content":"`delete 2` +"},{"lineNumber":154,"author":{"gitID":"-"},"content":"Deletes the 2nd friend in ST."},{"lineNumber":155,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":156,"author":{"gitID":"-"},"content":"`delete 1` +"},{"lineNumber":157,"author":{"gitID":"-"},"content":"Deletes the 1st friend in the results of the `find` command."},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Selecting a friend : `select`"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"To select a friend, you can identify his/her index number used in the last friend listing and enter the command `select` followed by his/her index+"},{"lineNumber":162,"author":{"gitID":"-"},"content":"Format: `select INDEX`"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"****"},{"lineNumber":165,"author":{"gitID":"-"},"content":"* Selects the friend and opens the detail card of the friend at the specified `INDEX`."},{"lineNumber":166,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":167,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":168,"author":{"gitID":"-"},"content":"****"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":173,"author":{"gitID":"-"},"content":"`select 2` +"},{"lineNumber":174,"author":{"gitID":"-"},"content":"Selects the 2nd friend in ST."},{"lineNumber":175,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":176,"author":{"gitID":"-"},"content":"`select 1` +"},{"lineNumber":177,"author":{"gitID":"-"},"content":"Selects the 1st friend in the results of the `find` command."},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"// tag::birthdays[]"},{"lineNumber":180,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Viewing a collated birthday list/notification: `birthdays` _(since v1.3)_"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"To get a list that contains all the birthdays of all your friends (ordered by date) +"},{"lineNumber":183,"author":{"gitID":"-"},"content":"Or to know whose birthday is it today, you can enter the following commands +"},{"lineNumber":184,"author":{"gitID":"-"},"content":"Format: `birthdays [ADDITIONAL_PARAMETER]`"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"The following parameters can be inputted into the [ADDITIONAL_PARAMETER] field +"},{"lineNumber":187,"author":{"gitID":"-"},"content":"****"},{"lineNumber":188,"author":{"gitID":"-"},"content":"* `todays`: Shows a notification of the birthdays occurring today +"},{"lineNumber":189,"author":{"gitID":"-"},"content":"****"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"* `birthdays` +"},{"lineNumber":194,"author":{"gitID":"-"},"content":"Displays a list of all your friends\u0027 birthdays +"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"image::birthdaysList.PNG[width\u003d\"790\"]"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"* `birthdays today` +"},{"lineNumber":199,"author":{"gitID":"-"},"content":"Displays a window with the birthdays occuring today +"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"image::birthdaysToday.png[width\u003d\"790\"]"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"// end::birthdays[]"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d NUS Commands"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"// tag::union[]"},{"lineNumber":208,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Viewing common time slots in timetable: `union` _(since v1.5rc)_"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"To know your free slots together with your friends, you can use `union` to display the common free time of multiple friends in ST. (Minimum: 2) +"},{"lineNumber":211,"author":{"gitID":"-"},"content":"Format: `union ODD/EVEN INDEX INDEX [INDEX]...`"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":214,"author":{"gitID":"-"},"content":"ODD/EVEN is case-insensitive"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":217,"author":{"gitID":"-"},"content":"Only indexes of the current filtered list are valid"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"* `union Odd 1 2 3` +"},{"lineNumber":222,"author":{"gitID":"-"},"content":"Displays the combined odd timetable for friends at Index 1, 2 and 3. +"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"image::timetableUnion.PNG[width\u003d\"790\"]"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"* `union Even 1 2` +"},{"lineNumber":227,"author":{"gitID":"-"},"content":"Displays the combined even timetable for friends at Index 1 and 2."},{"lineNumber":228,"author":{"gitID":"-"},"content":"// end::union[]"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"// tag::vacant[]"},{"lineNumber":231,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Vacant study rooms finder : `vacant` _(since v1.3)_"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"To get a list of study rooms in the specified building and their vacancy (in blocks of 1 hours), you can enter `vacant` follwed by the BUILDING code. +"},{"lineNumber":234,"author":{"gitID":"-"},"content":"Format: `vacant BUILDING`"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"image::vacant.png[width\u003d\"790\"]"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"[WARNING]"},{"lineNumber":239,"author":{"gitID":"-"},"content":"The building must be in NUS venue format, e.g. `COM1`, `S17`, `E2`"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"* `vacant COM1` +"},{"lineNumber":244,"author":{"gitID":"-"},"content":"Finds the vacancy status of study rooms in COM1 building."},{"lineNumber":245,"author":{"gitID":"-"},"content":"// end::vacant[]"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"// tag::maps[]"},{"lineNumber":248,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Google maps display : `map` _(since v1.4)_"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"To find locations or a path from one place to another, you can enter the command `map` along with the locations to launch Google Maps with the specified location(s). +"},{"lineNumber":251,"author":{"gitID":"-"},"content":"Format: `map LOCATION` or `map LOCATION/LOCATION...` or `map current location`"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"image::map.png[width\u003d\"790\"]"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"****"},{"lineNumber":256,"author":{"gitID":"-"},"content":"* You are advised to keep the number of consecutive `[LOCATION]` to 4 locations."},{"lineNumber":257,"author":{"gitID":"-"},"content":"* All locations specified should not contain `/`. e.g. `Changi/Airport` as a location will not give the same map display as `Changi Aiport`."},{"lineNumber":258,"author":{"gitID":"-"},"content":"* NUS building name is case insensitive e.g. `COM1` or `com1` gives the same output"},{"lineNumber":259,"author":{"gitID":"-"},"content":"* If only one location is provided, the location will be displayed on the map."},{"lineNumber":260,"author":{"gitID":"-"},"content":"* If more than one location is provided, directions to each location, starting from the first one, will be displayed."},{"lineNumber":261,"author":{"gitID":"-"},"content":"* Typing `map LOCATION_START to LOCATION_DESTINATION` can work as well for two locations input, only if neither locations specified are NUS buildings."},{"lineNumber":262,"author":{"gitID":"-"},"content":"****"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"* `map current location` +"},{"lineNumber":267,"author":{"gitID":"-"},"content":"Displays your current location on the map."},{"lineNumber":268,"author":{"gitID":"-"},"content":"* `map BIZ1` +"},{"lineNumber":269,"author":{"gitID":"-"},"content":"Displays the location of BIZ1 (which is an NUS building name)."},{"lineNumber":270,"author":{"gitID":"-"},"content":"* `map Tampines Mall/COM1` +"},{"lineNumber":271,"author":{"gitID":"-"},"content":"Displays the directions from `Tampines Mall` to `COM1`."},{"lineNumber":272,"author":{"gitID":"-"},"content":"* `map Tampines Mall/COM1/Airport Blvd` +"},{"lineNumber":273,"author":{"gitID":"-"},"content":"Displays the directions from `Tampines Mall` to `COM1` to `Airport Blvd`."},{"lineNumber":274,"author":{"gitID":"-"},"content":"// end::maps[]"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Utility Commands"},{"lineNumber":277,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":278,"author":{"gitID":"-"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"If you find yourself lost on what to do in ST, you can enter the command `help`!"},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"Format: `help`"},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"-"},"content":"// tag::alias[]"},{"lineNumber":284,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Adding a command alias: `alias` _(since v1.1)_"},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"To create customized aliases for any valid command, you can enter the command `alias` followed by your desired command and your very own alias. +"},{"lineNumber":287,"author":{"gitID":"-"},"content":"Format: `alias [COMMAND] [ALIAS]`"},{"lineNumber":288,"author":{"gitID":"-"},"content":""},{"lineNumber":289,"author":{"gitID":"-"},"content":"****"},{"lineNumber":290,"author":{"gitID":"-"},"content":"* `[ALIAS]` should be alpha-numeric and without spaces."},{"lineNumber":291,"author":{"gitID":"-"},"content":"* The recommended number of characters for `[ALIAS]` is 6 characters or less."},{"lineNumber":292,"author":{"gitID":"-"},"content":"****"},{"lineNumber":293,"author":{"gitID":"-"},"content":""},{"lineNumber":294,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"-"},"content":"* `alias find f`"},{"lineNumber":297,"author":{"gitID":"-"},"content":"* `alias alias al`"},{"lineNumber":298,"author":{"gitID":"-"},"content":""},{"lineNumber":299,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Removing a currently existing alias: `unalias` _(since v1.3)_"},{"lineNumber":300,"author":{"gitID":"-"},"content":""},{"lineNumber":301,"author":{"gitID":"-"},"content":"To remove a previously created alias, you can enter the command `unalias` followed by the alias you wish to remove. +"},{"lineNumber":302,"author":{"gitID":"-"},"content":"Format: `unalias [CURRENT_ALIAS]`"},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":305,"author":{"gitID":"-"},"content":""},{"lineNumber":306,"author":{"gitID":"-"},"content":"* `unalias f`"},{"lineNumber":307,"author":{"gitID":"-"},"content":"// end::alias[]"},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Listing entered commands : `history`"},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"To list all the commands that you have entered in reverse chronological order, you can enter `history`. +"},{"lineNumber":312,"author":{"gitID":"-"},"content":"This will be particularly useful if you wish to `undo` or `redo` commands."},{"lineNumber":313,"author":{"gitID":"-"},"content":"Format: `history`"},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":316,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":317,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":318,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":319,"author":{"gitID":"-"},"content":""},{"lineNumber":320,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":321,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"To revert a command you executed previously (in case you accidentally changed something), you can enter the command `undo`."},{"lineNumber":324,"author":{"gitID":"-"},"content":"This will restore the ST instance to the state before the previous _undoable_ command was executed. +"},{"lineNumber":325,"author":{"gitID":"-"},"content":"Format: `undo`"},{"lineNumber":326,"author":{"gitID":"-"},"content":""},{"lineNumber":327,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":328,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":329,"author":{"gitID":"-"},"content":"Undoable commands: those commands that modify the ST\u0027s content (`add`, `alias`, `unalias`, `delete`, `edit` and `clear`)."},{"lineNumber":330,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":331,"author":{"gitID":"-"},"content":""},{"lineNumber":332,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":333,"author":{"gitID":"-"},"content":""},{"lineNumber":334,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":335,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":336,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":337,"author":{"gitID":"-"},"content":""},{"lineNumber":338,"author":{"gitID":"-"},"content":"* `select 1` +"},{"lineNumber":339,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":340,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":341,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":342,"author":{"gitID":"-"},"content":""},{"lineNumber":343,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":344,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":345,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":346,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":347,"author":{"gitID":"-"},"content":""},{"lineNumber":348,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Redoing the previously undone command : `redo`"},{"lineNumber":349,"author":{"gitID":"-"},"content":""},{"lineNumber":350,"author":{"gitID":"-"},"content":"To reverse the most recent `undo` command, you can enter the command `redo`. +"},{"lineNumber":351,"author":{"gitID":"-"},"content":"Format: `redo`"},{"lineNumber":352,"author":{"gitID":"-"},"content":""},{"lineNumber":353,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":354,"author":{"gitID":"-"},"content":""},{"lineNumber":355,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":356,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":357,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":358,"author":{"gitID":"-"},"content":""},{"lineNumber":359,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":360,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":361,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":362,"author":{"gitID":"-"},"content":""},{"lineNumber":363,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":364,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":365,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":366,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":367,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":368,"author":{"gitID":"-"},"content":"`redo` (reapplies the `clear` command) +"},{"lineNumber":369,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":370,"author":{"gitID":"-"},"content":""},{"lineNumber":371,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Clearing all entries : `clear`"},{"lineNumber":372,"author":{"gitID":"-"},"content":""},{"lineNumber":373,"author":{"gitID":"-"},"content":"To clear all entries of your friends from ST :sob: , you can enter the command `clear`. +"},{"lineNumber":374,"author":{"gitID":"-"},"content":"Format: `clear`"},{"lineNumber":375,"author":{"gitID":"-"},"content":""},{"lineNumber":376,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":377,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Encrypting data files : `encrypt` _(since v1.2)_"},{"lineNumber":378,"author":{"gitID":"-"},"content":""},{"lineNumber":379,"author":{"gitID":"-"},"content":"To encrypt ST and protect your data, you can enter the command `encrypt` followed by your password. +"},{"lineNumber":380,"author":{"gitID":"-"},"content":"Format: `encrypt PASSWORD`"},{"lineNumber":381,"author":{"gitID":"-"},"content":""},{"lineNumber":382,"author":{"gitID":"-"},"content":"[WARNING]"},{"lineNumber":383,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":384,"author":{"gitID":"-"},"content":"* Passwords are case-sensitive."},{"lineNumber":385,"author":{"gitID":"-"},"content":"* The password string can only contain characters in the UTF-8 format."},{"lineNumber":386,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":387,"author":{"gitID":"-"},"content":""},{"lineNumber":388,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":389,"author":{"gitID":"-"},"content":""},{"lineNumber":390,"author":{"gitID":"-"},"content":"* `encrypt test` +"},{"lineNumber":391,"author":{"gitID":"-"},"content":"Encrypts `addressbook.xml` with \"test\" as the password."},{"lineNumber":392,"author":{"gitID":"-"},"content":""},{"lineNumber":393,"author":{"gitID":"-"},"content":"Subsequently, when you are re-opening the app, you will be prompted to enter your password, as shown in the picture below."},{"lineNumber":394,"author":{"gitID":"-"},"content":""},{"lineNumber":395,"author":{"gitID":"-"},"content":"image::passwordBox.png[width\u003d\"790\"]"},{"lineNumber":396,"author":{"gitID":"-"},"content":""},{"lineNumber":397,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Removal of password: `decrypt` (since v1.3)"},{"lineNumber":398,"author":{"gitID":"-"},"content":""},{"lineNumber":399,"author":{"gitID":"-"},"content":"To remove the password protection of ST and decrypt `addressbook.xml`, you can enter the command `decrypt`. +"},{"lineNumber":400,"author":{"gitID":"-"},"content":"Format: `decrypt`"},{"lineNumber":401,"author":{"gitID":"-"},"content":""},{"lineNumber":402,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":403,"author":{"gitID":"-"},"content":""},{"lineNumber":404,"author":{"gitID":"Caijun7"},"content":"// tag::datatransfer[]"},{"lineNumber":405,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Importing data : `import` _(since v1.1)_"},{"lineNumber":406,"author":{"gitID":"-"},"content":""},{"lineNumber":407,"author":{"gitID":"-"},"content":"To import your friend\u0027s ST to your own ST, you can enter the command `import` followed by the various parameters."},{"lineNumber":408,"author":{"gitID":"-"},"content":"An encrypted or unencrypted ST instance from filepath to the existing ST application. Friends, Tags, and Aliases that are not in your ST will be added. +"},{"lineNumber":409,"author":{"gitID":"-"},"content":"Format: `import FILEPATH PASSWORD`"},{"lineNumber":410,"author":{"gitID":"-"},"content":""},{"lineNumber":411,"author":{"gitID":"-"},"content":"****"},{"lineNumber":412,"author":{"gitID":"-"},"content":"* Imports an instance of ST from the specified `FILEPATH`."},{"lineNumber":413,"author":{"gitID":"-"},"content":"* Decrypt that instance using the `PASSWORD` provided."},{"lineNumber":414,"author":{"gitID":"-"},"content":"* The filepath refers to the filepath where the instance file is stored."},{"lineNumber":415,"author":{"gitID":"-"},"content":"****"},{"lineNumber":416,"author":{"gitID":"-"},"content":""},{"lineNumber":417,"author":{"gitID":"-"},"content":"[WARNING]"},{"lineNumber":418,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":419,"author":{"gitID":"-"},"content":"* If no `PASSWORD` is provided, the instance will be read without decryption."},{"lineNumber":420,"author":{"gitID":"-"},"content":"* The instance file *must be in XML file format* after decryption."},{"lineNumber":421,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":422,"author":{"gitID":"-"},"content":""},{"lineNumber":423,"author":{"gitID":"-"},"content":"Example:"},{"lineNumber":424,"author":{"gitID":"-"},"content":""},{"lineNumber":425,"author":{"gitID":"-"},"content":"* `import data/addressBook.xml testpassword` +"},{"lineNumber":426,"author":{"gitID":"-"},"content":"Imports `addressBook.xml` file at data folder using \"testpassword\" as the password."},{"lineNumber":427,"author":{"gitID":"-"},"content":""},{"lineNumber":428,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Exporting data : `export` _(since v1.4)_"},{"lineNumber":429,"author":{"gitID":"-"},"content":""},{"lineNumber":430,"author":{"gitID":"-"},"content":"To export your ST for your friends\u0027 ST to import, you can enter `export` with the various parameters."},{"lineNumber":431,"author":{"gitID":"-"},"content":"The current view of the existing ST application with or without password encryption to the specified filepath. +"},{"lineNumber":432,"author":{"gitID":"-"},"content":"Format: `export FILEPATH PASSWORD`"},{"lineNumber":433,"author":{"gitID":"-"},"content":""},{"lineNumber":434,"author":{"gitID":"-"},"content":"****"},{"lineNumber":435,"author":{"gitID":"-"},"content":"* Exports an instance of ST to the specified `FILEPATH`."},{"lineNumber":436,"author":{"gitID":"-"},"content":"* Encrypt that instance using the `PASSWORD` provided."},{"lineNumber":437,"author":{"gitID":"-"},"content":"* If no `PASSWORD` is provided, the instance will be exported without encryption."},{"lineNumber":438,"author":{"gitID":"-"},"content":"* The filepath refers to the filepath where the instance file will be stored."},{"lineNumber":439,"author":{"gitID":"-"},"content":"****"},{"lineNumber":440,"author":{"gitID":"-"},"content":""},{"lineNumber":441,"author":{"gitID":"Caijun7"},"content":"[TIP]"},{"lineNumber":442,"author":{"gitID":"Caijun7"},"content":"Execute `find` command before `export` to select the students\u0027 contact details you want to export"},{"lineNumber":443,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":444,"author":{"gitID":"-"},"content":"Example:"},{"lineNumber":445,"author":{"gitID":"-"},"content":""},{"lineNumber":446,"author":{"gitID":"Caijun7"},"content":"* `export data/addressBookBackUp.xml testpassword` +"},{"lineNumber":447,"author":{"gitID":"-"},"content":"Exports the current list of ST application to the `addressBook.xml` file at data folder using \"testpassword\" as the password for encryption. +"},{"lineNumber":448,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":449,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Uploading data : `upload` _(since v1.5rc)_"},{"lineNumber":450,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":451,"author":{"gitID":"-"},"content":"To upload your ST to Google Drive, you can enter the command `upload` with the various parameters."},{"lineNumber":452,"author":{"gitID":"-"},"content":"The current view of the existing ST application with or without password encryption to the specified filename in Google Drive."},{"lineNumber":453,"author":{"gitID":"Caijun7"},"content":"Format: `upload FILENAME PASSWORD`"},{"lineNumber":454,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":455,"author":{"gitID":"Caijun7"},"content":"****"},{"lineNumber":456,"author":{"gitID":"Caijun7"},"content":"* Application will redirect you to a browser url to request for access to Google Drive"},{"lineNumber":457,"author":{"gitID":"-"},"content":"* Uploads an instance of ST with the specified `FILENAME`."},{"lineNumber":458,"author":{"gitID":"-"},"content":"* Encrypt that instance using the `PASSWORD` provided."},{"lineNumber":459,"author":{"gitID":"-"},"content":"* If no `PASSWORD` is provided, the instance will be exported without encryption."},{"lineNumber":460,"author":{"gitID":"-"},"content":"* The filepath refers to the filepath where the instance file will be stored."},{"lineNumber":461,"author":{"gitID":"-"},"content":"****"},{"lineNumber":462,"author":{"gitID":"-"},"content":""},{"lineNumber":463,"author":{"gitID":"Caijun7"},"content":"[NOTE]"},{"lineNumber":464,"author":{"gitID":"Caijun7"},"content":"Application will be blocked from executing another command while waiting for authorization response +"},{"lineNumber":465,"author":{"gitID":"Caijun7"},"content":"Authorization request will timed out after 20 seconds"},{"lineNumber":466,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":467,"author":{"gitID":"Caijun7"},"content":"Example:"},{"lineNumber":468,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":469,"author":{"gitID":"Caijun7"},"content":"* `upload addressBook.xml testpassword` +"},{"lineNumber":470,"author":{"gitID":"-"},"content":"Uploads the current list of ST application to the `addressBook.xml` file in Google Drive using \"testpassword\" as the password for encryption."},{"lineNumber":471,"author":{"gitID":"Caijun7"},"content":"// end::datatransfer[]"},{"lineNumber":472,"author":{"gitID":"-"},"content":""},{"lineNumber":473,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":474,"author":{"gitID":"-"},"content":""},{"lineNumber":475,"author":{"gitID":"-"},"content":"To exit the program, you can enter the command `exit` +"},{"lineNumber":476,"author":{"gitID":"-"},"content":""},{"lineNumber":477,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":478,"author":{"gitID":"-"},"content":"Or you can simply press the \u0027X\u0027 located at the top right hand corner"},{"lineNumber":479,"author":{"gitID":"-"},"content":""},{"lineNumber":480,"author":{"gitID":"-"},"content":"Format: `exit`"},{"lineNumber":481,"author":{"gitID":"-"},"content":""},{"lineNumber":482,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Saving the data"},{"lineNumber":483,"author":{"gitID":"-"},"content":""},{"lineNumber":484,"author":{"gitID":"-"},"content":"ST data are saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":485,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":486,"author":{"gitID":"-"},"content":""},{"lineNumber":487,"author":{"gitID":"-"},"content":"\u003d\u003d Upcoming Features"},{"lineNumber":488,"author":{"gitID":"-"},"content":"We have a few exciting ideas to further improve ST for you!"},{"lineNumber":489,"author":{"gitID":"-"},"content":""},{"lineNumber":490,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use current location to find vacant rooms _(coming in v2.0)_"},{"lineNumber":491,"author":{"gitID":"-"},"content":""},{"lineNumber":492,"author":{"gitID":"Caijun7"},"content":"You will be able to find vacant rooms in nearest building just by providing your current location. +"},{"lineNumber":493,"author":{"gitID":"Caijun7"},"content":"Format: `vacant current location`"},{"lineNumber":494,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":495,"author":{"gitID":"Caijun7"},"content":"Examples:"},{"lineNumber":496,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":497,"author":{"gitID":"Caijun7"},"content":"* `vacant current location` +"},{"lineNumber":498,"author":{"gitID":"Caijun7"},"content":"Displays the list of rooms schedule for the day in the nearest building"},{"lineNumber":499,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":500,"author":{"gitID":"-"},"content":"// tag::module[]"},{"lineNumber":501,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Modules Tag _(coming in v2.0)_"},{"lineNumber":502,"author":{"gitID":"-"},"content":""},{"lineNumber":503,"author":{"gitID":"-"},"content":"Each friend will be able to have their own list of modules they have taken. +"},{"lineNumber":504,"author":{"gitID":"-"},"content":"To find out which friends have not taken a module (so as to plan with them to take), you can enter the command `module` followed by the module code"},{"lineNumber":505,"author":{"gitID":"-"},"content":"Format: `module MODULE_CODE`"},{"lineNumber":506,"author":{"gitID":"-"},"content":""},{"lineNumber":507,"author":{"gitID":"-"},"content":"****"},{"lineNumber":508,"author":{"gitID":"-"},"content":"* Searches ST\u0027s friends for the same module code"},{"lineNumber":509,"author":{"gitID":"-"},"content":"* Parses the information and displays it as a list"},{"lineNumber":510,"author":{"gitID":"-"},"content":"****"},{"lineNumber":511,"author":{"gitID":"-"},"content":""},{"lineNumber":512,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":513,"author":{"gitID":"-"},"content":"Module code follows the traditional case-sensitive naming conventions used by NUS (Example: CS2103T or CS2101)"},{"lineNumber":514,"author":{"gitID":"-"},"content":""},{"lineNumber":515,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":516,"author":{"gitID":"-"},"content":""},{"lineNumber":517,"author":{"gitID":"-"},"content":"* `module CS2103` +"},{"lineNumber":518,"author":{"gitID":"-"},"content":"Displays the list of friends who have not taken the module CS2103"},{"lineNumber":519,"author":{"gitID":"-"},"content":""},{"lineNumber":520,"author":{"gitID":"-"},"content":"// end::module[]"},{"lineNumber":521,"author":{"gitID":"-"},"content":""},{"lineNumber":522,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":523,"author":{"gitID":"-"},"content":""},{"lineNumber":524,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":525,"author":{"gitID":"-"},"content":"*A*:"},{"lineNumber":526,"author":{"gitID":"-"},"content":"*Method 1*: Replaces the other computer\u0027s data completely"},{"lineNumber":527,"author":{"gitID":"-"},"content":"****"},{"lineNumber":528,"author":{"gitID":"-"},"content":".  In the folder that `StardyTogether.jar` is in, find the `data` folder"},{"lineNumber":529,"author":{"gitID":"-"},"content":".  Copy the `addressbook.xml` storage file inside"},{"lineNumber":530,"author":{"gitID":"-"},"content":".  Transfer that file to the other computer"},{"lineNumber":531,"author":{"gitID":"-"},"content":".  Place it in the `data` folder of `StardyTogether.jar`, on the other computer"},{"lineNumber":532,"author":{"gitID":"-"},"content":"****"},{"lineNumber":533,"author":{"gitID":"-"},"content":"*Method 2*: Merges the contacts of both computers"},{"lineNumber":534,"author":{"gitID":"-"},"content":"****"},{"lineNumber":535,"author":{"gitID":"-"},"content":".  In the folder that `StardyTogether.jar` is in, find the `data` folder"},{"lineNumber":536,"author":{"gitID":"-"},"content":".  Copy the `addressbook.xml` storage file inside"},{"lineNumber":537,"author":{"gitID":"-"},"content":".  Transfer that file to the other computer"},{"lineNumber":538,"author":{"gitID":"-"},"content":".  Rename that file to avoid overwriting the existing `addressbook.xml`"},{"lineNumber":539,"author":{"gitID":"-"},"content":".  Place it in the `data` folder of `StardyTogether.jar`, on the other computer"},{"lineNumber":540,"author":{"gitID":"-"},"content":".  Type `import [fileName]` into the command box, where [fileName] is the new name from Step 4"},{"lineNumber":541,"author":{"gitID":"-"},"content":".  Press Enter"},{"lineNumber":542,"author":{"gitID":"-"},"content":"****"},{"lineNumber":543,"author":{"gitID":"-"},"content":""},{"lineNumber":544,"author":{"gitID":"-"},"content":"*Q*: How do I import my timetable from NUSMods? +"},{"lineNumber":545,"author":{"gitID":"-"},"content":"*A*: When adding or editing a friend, you can input his/her NUSMods shortened link in the tt/TIMETABLE field"},{"lineNumber":546,"author":{"gitID":"-"},"content":"****"},{"lineNumber":547,"author":{"gitID":"-"},"content":".   Go to NUSMods"},{"lineNumber":548,"author":{"gitID":"-"},"content":".   Click `Share/Sync` at the bottom right hand corner"},{"lineNumber":549,"author":{"gitID":"-"},"content":"+"},{"lineNumber":550,"author":{"gitID":"-"},"content":"image::NUSMods_Screenshot_First.PNG[width\u003d\"790\"]"},{"lineNumber":551,"author":{"gitID":"-"},"content":"+"},{"lineNumber":552,"author":{"gitID":"-"},"content":".   Copy the link in the window that appeared"},{"lineNumber":553,"author":{"gitID":"-"},"content":"+"},{"lineNumber":554,"author":{"gitID":"-"},"content":"image::NUSMods_Screenshot_Second.PNG[width\u003d\"790\"]"},{"lineNumber":555,"author":{"gitID":"-"},"content":"+"},{"lineNumber":556,"author":{"gitID":"-"},"content":".   Paste it in ST at the tt/TIMETABLE field"},{"lineNumber":557,"author":{"gitID":"-"},"content":"****"},{"lineNumber":558,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":559,"author":{"gitID":"Caijun7"},"content":"*Q*: How do I upload StardyTogether file to Google Drive? +"},{"lineNumber":560,"author":{"gitID":"Caijun7"},"content":"*A*: Input upload command and accept the authorization request"},{"lineNumber":561,"author":{"gitID":"Caijun7"},"content":"****"},{"lineNumber":562,"author":{"gitID":"Caijun7"},"content":".   Input upload command, example `upload stardyTogether.xml`"},{"lineNumber":563,"author":{"gitID":"Caijun7"},"content":".   The redirect url will open in default browser like this:"},{"lineNumber":564,"author":{"gitID":"Caijun7"},"content":"+"},{"lineNumber":565,"author":{"gitID":"Caijun7"},"content":"image::Redirect_First.PNG[width\u003d\"790\"]"},{"lineNumber":566,"author":{"gitID":"Caijun7"},"content":".   Click your Gmail or login your Gmail account and click accept:"},{"lineNumber":567,"author":{"gitID":"Caijun7"},"content":"+"},{"lineNumber":568,"author":{"gitID":"Caijun7"},"content":"image::Redirect_Second.PNG[width\u003d\"790\"]"},{"lineNumber":569,"author":{"gitID":"Caijun7"},"content":".   File should be uploaded to your Google Drive"},{"lineNumber":570,"author":{"gitID":"Caijun7"},"content":"+"},{"lineNumber":571,"author":{"gitID":"Caijun7"},"content":"image::Redirect_Third.PNG[width\u003d\"790\"]"},{"lineNumber":572,"author":{"gitID":"Caijun7"},"content":"****"},{"lineNumber":573,"author":{"gitID":"-"},"content":""},{"lineNumber":574,"author":{"gitID":"-"},"content":""},{"lineNumber":575,"author":{"gitID":"-"},"content":"\u003d\u003d Troubleshooting"},{"lineNumber":576,"author":{"gitID":"-"},"content":"[width\u003d\"790\",cols\u003d\"\u003c15%,75%\",options\u003d\"header\",]"},{"lineNumber":577,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":578,"author":{"gitID":"-"},"content":"|Problem |How to solve"},{"lineNumber":579,"author":{"gitID":"-"},"content":"|The timetable I entered is empty!|Do check the validity of your NUSMods link by inputting it in your internet browser, and your internet connection."},{"lineNumber":580,"author":{"gitID":"-"},"content":"|I am having trouble accessing the Google Drive functions!|"},{"lineNumber":581,"author":{"gitID":"-"},"content":"1)  Go to your user directory (Example: C:/users/USER) +"},{"lineNumber":582,"author":{"gitID":"-"},"content":"2)  Delete .googlecredentials folder (if it doesn\u0027t appear, show hidden files in Settings)"},{"lineNumber":583,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":584,"author":{"gitID":"-"},"content":""},{"lineNumber":585,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":586,"author":{"gitID":"-"},"content":"[width\u003d\"790\",cols\u003d\"\u003c15%,\u003c23%, 45%\",options\u003d\"header\",]"},{"lineNumber":587,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":588,"author":{"gitID":"-"},"content":"|Command |Usage |Example"},{"lineNumber":589,"author":{"gitID":"-"},"content":"|Add| add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS b/BIRTHDAY [t/TAG]...`| `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 b/010195 t/friend t/colleague"},{"lineNumber":590,"author":{"gitID":"-"},"content":"|Alias| alias COMMAND ALIAS|alias history hist"},{"lineNumber":591,"author":{"gitID":"-"},"content":"|Birthday List|birthdays [todays]| birthdays todays"},{"lineNumber":592,"author":{"gitID":"-"},"content":"|Clear| clear|"},{"lineNumber":593,"author":{"gitID":"-"},"content":"|Delete| delete INDEX | delete 3"},{"lineNumber":594,"author":{"gitID":"-"},"content":"|Edit|edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [b/BIRTHDAY] [t/TAG]... |edit 2 n/James Lee e/jameslee@example.com"},{"lineNumber":595,"author":{"gitID":"Caijun7"},"content":"|Export|Export FILEPATH PASSWORD| export data/addressBookBackUp.xml testpassword"},{"lineNumber":596,"author":{"gitID":"-"},"content":"|Find|find KEYWORD [MORE_KEYWORDS]|find James Jake"},{"lineNumber":597,"author":{"gitID":"-"},"content":"|Help|help|"},{"lineNumber":598,"author":{"gitID":"-"},"content":"|History|history|"},{"lineNumber":599,"author":{"gitID":"-"},"content":"|Import|import FILEPATH PASSWORD|import data/addressBook.xml testpassword"},{"lineNumber":600,"author":{"gitID":"-"},"content":"|List|list|"},{"lineNumber":601,"author":{"gitID":"-"},"content":"|Map|map LOCATION|map COM2"},{"lineNumber":602,"author":{"gitID":"-"},"content":"|Encrypt|encrypt PASSWORD|encrypt test"},{"lineNumber":603,"author":{"gitID":"-"},"content":"|Decrypt|decrypt|"},{"lineNumber":604,"author":{"gitID":"-"},"content":"|Redo|redo|"},{"lineNumber":605,"author":{"gitID":"-"},"content":"|Select|select INDEX|select 2"},{"lineNumber":606,"author":{"gitID":"-"},"content":"|Unalias|unalias CURRENT_ALIAS|unalias hist"},{"lineNumber":607,"author":{"gitID":"-"},"content":"|Undo|undo|"},{"lineNumber":608,"author":{"gitID":"-"},"content":"|Union|union EVEN/ODD INDEX INDEX [INDEX]|union Odd 1 2 3"},{"lineNumber":609,"author":{"gitID":"Caijun7"},"content":"|Upload|upload FILENAME PASSWORD|upload addressBook.xml testpassword"},{"lineNumber":610,"author":{"gitID":"-"},"content":"|Vacant|vacant BUILDING|vacant COM1"},{"lineNumber":611,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"}],"authorContributionMap":{"Caijun7":44,"-":567}},{"path":"unused/TimeTableCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"Caijun7"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.TimeTableEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.timetable.Timetable;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"content":"//@@author yeggasd-unused"},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Retrieves the timetable of a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class TimeTableCommand extends Command {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"timetable\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds timetable of a person identified  \\n\""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) ODD/EVEN\\n\""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 Odd\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"%1$s Week Timetable of selected Person: %2$s\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final String oddEven;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Person personToShow;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Creates a Timetable to retrieve the timetable of the given index"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public TimeTableCommand(Index targetIndex, String oddEven) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        requireNonNull(targetIndex);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        requireNonNull(oddEven);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.oddEven \u003d oddEven;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        preprocess();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        Timetable timeTable \u003d personToShow.getTimetable();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        int oddEvenIndex \u003d StringUtil.getOddEven(oddEven);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        ArrayList\u003cArrayList\u003cString\u003e\u003e personTimeTable \u003d timeTable.getTimetable().get(oddEvenIndex);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        ObservableList\u003cArrayList\u003cString\u003e\u003e timeTableList \u003d FXCollections.observableArrayList(personTimeTable);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new TimeTableEvent(timeTableList));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, StringUtil.capitalize(oddEven),"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                personToShow.getName()));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Preprocess the required data for execution."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * @throws CommandException when index out of bound"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    protected void preprocess() throws CommandException {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        personToShow \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                || (other instanceof TimeTableCommand // instanceof handles nulls"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((TimeTableCommand) other).targetIndex) // state check"},{"lineNumber":78,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.oddEven.equalsIgnoreCase(((TimeTableCommand) other).oddEven)"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(this.personToShow, ((TimeTableCommand) other).personToShow));"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return targetIndex.toString() + \" \" + oddEven + \" \" + personToShow;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"Caijun7":1,"-":85}},{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"StardyTogether was developed by team W11-B4. +"},{"lineNumber":7,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Joanne Ong"},{"lineNumber":12,"author":{"gitID":"-"},"content":"image::joanne.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":13,"author":{"gitID":"-"},"content":"{empty}[https://github.com/joanneong[github]] +"},{"lineNumber":14,"author":{"gitID":"-"},"content":"Role: Project Advisor"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Ong Jing Yin"},{"lineNumber":19,"author":{"gitID":"-"},"content":"image::jingyinno.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":"{empty}[http://github.com/jingyinno[github]]"},{"lineNumber":21,"author":{"gitID":"Caijun7"},"content":"{empty}[https://cs2103jan2018-w11-b4.github.io/main/team/jingyinno.html[portfolio]]"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"Role: Team Lead +"},{"lineNumber":24,"author":{"gitID":"-"},"content":"Responsibilities: Logic"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"Caijun7"},"content":"\u003d\u003d\u003d Loh Cai Jun"},{"lineNumber":29,"author":{"gitID":"-"},"content":"image::caijun7.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":30,"author":{"gitID":"Caijun7"},"content":"{empty}[http://github.com/caijun7[github]]"},{"lineNumber":31,"author":{"gitID":"Caijun7"},"content":"{empty}[https://cs2103jan2018-w11-b4.github.io/main/team/Caijun7.html[portfolio]]"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":34,"author":{"gitID":"-"},"content":"Responsibilities: Model"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Wayne Neo Wei Zhe"},{"lineNumber":39,"author":{"gitID":"-"},"content":"image::azureair.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":40,"author":{"gitID":"-"},"content":"{empty}[http://github.com/azuraair[github]]"},{"lineNumber":41,"author":{"gitID":"-"},"content":"{empty}[https://cs2103jan2018-w11-b4.github.io/main/team/azuraair.html[portfolio]]"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":44,"author":{"gitID":"-"},"content":"Responsibilities: Storage"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Lee Yong Ler"},{"lineNumber":49,"author":{"gitID":"-"},"content":"image::yeggasd.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":50,"author":{"gitID":"Caijun7"},"content":"{empty}[http://github.com/yeggasd[github]]"},{"lineNumber":51,"author":{"gitID":"Caijun7"},"content":"{empty}[https://cs2103jan2018-w11-b4.github.io/main/team/yeggasd.html[portfolio]]"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":54,"author":{"gitID":"-"},"content":"Responsibilities: UI"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"}],"authorContributionMap":{"Caijun7":7,"-":49}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"Caijun7"},"content":"\u003d StardyTogether"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"https://travis-ci.org/CS2103JAN2018-W11-B4/main[image:https://travis-ci.org/CS2103JAN2018-W11-B4/main.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":5,"author":{"gitID":"-"},"content":"https://ci.appveyor.com/project/yeggasd/main[image:https://ci.appveyor.com/api/projects/status/kc7eo8888cc960u0?svg\u003dtrue[Build status]]"},{"lineNumber":6,"author":{"gitID":"-"},"content":"https://coveralls.io/github/CS2103JAN2018-W11-B4/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-W11-B4/main/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":7,"author":{"gitID":"-"},"content":"https://app.codacy.com/app/yeggasd/main[image:https://api.codacy.com/project/badge/Grade/81c0e706007944e881b2290412d87325[Codacy Badge]]"},{"lineNumber":8,"author":{"gitID":"-"},"content":"https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":15,"author":{"gitID":"-"},"content":"image::images/Ui.png[width\u003d\"600\"]"},{"lineNumber":16,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"Caijun7"},"content":"* This is a desktop Address Book application for students studying in NUS (National University of Singapore)."},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":"* Manage the contacts of your friends in University, keep track of your friends\u0027 Birthdays, find the location of your lecture venues!"},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":"* Share useful information with your friends who are taking the same modules and find a common studying time!"},{"lineNumber":21,"author":{"gitID":"Caijun7"},"content":"* StardyTogether has a GUI (Graphic User Interface) but most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":26,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":27,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":28,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":33,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":34,"author":{"gitID":"-"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4]"},{"lineNumber":35,"author":{"gitID":"Caijun7"},"content":"* Source code is from AddressBook-Level4 project created by SE-EDU initiative at https://github.com/se-edu/"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"Caijun7":6,"-":31}},{"path":"docs/team/Caijun7.adoc","lines":[{"lineNumber":1,"author":{"gitID":"Caijun7"},"content":"\u003d Loh Cai Jun - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"-"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"-"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"\u003d\u003d PROJECT: StardyTogether"},{"lineNumber":6,"author":{"gitID":"-"},"content":"StardyTogether is a desktop contacts and venues manager application specially for NUS students to help them find free time and rooms to study together with their friends."},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"Most of the user interactions are via CLI, while there exists a GUI created with JavaFX. It is written in Java and has"},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":"about 10k LoC."},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"The source code is based on the  https://github.com/se-edu/addressbook-level4[AddressBook-Level4] project created by SE-EDU initiative."},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":"*Code contributed*: [https://github.com/CS2103JAN2018-W11-B4/main/blob/master/collated/functional/Caijun7.md[Functional code]],"},{"lineNumber":14,"author":{"gitID":"Caijun7"},"content":"[https://github.com/CS2103JAN2018-W11-B4/main/blob/master/collated/functional/Caijun7-reused.md[Functional code (reused)]],"},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":"[https://github.com/CS2103JAN2018-W11-B4/main/blob/master/collated/test/Caijun7.md[Test code]],"},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":"[https://github.com/CS2103JAN2018-W11-B4/main/blob/master/collated/test/Caijun7-reused.md[Test code (reused)]] +"},{"lineNumber":17,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":18,"author":{"gitID":"Caijun7"},"content":"\u003d\u003d Feature Contributions"},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":"* *Major enhancement*: Data transferring which includes import, export, and upload feature"},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":"** What it does: Allows students to transfer StardyTogether file easily which includes importing all of the persons, tags, and aliases of StardyTogether file, exporting the selected persons in StardyTogether to a specified filepath, and upload the selected persons in StardyTogether to Google Drive."},{"lineNumber":21,"author":{"gitID":"Caijun7"},"content":"** Justification: Students can transfer data between one another easily. Students can store backup in Google Drive and transfer between computers easily."},{"lineNumber":22,"author":{"gitID":"Caijun7"},"content":"** Credits: Uploading feature uses https://developers.google.com/drive/[Google Drive API]"},{"lineNumber":23,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":24,"author":{"gitID":"Caijun7"},"content":"* *Minor enhancement*: Vacant Room Finder model and storage component"},{"lineNumber":25,"author":{"gitID":"Caijun7"},"content":"** What it does: Shows the list of all rooms\u0027 weekday schedule in the building that the student is searching for the day."},{"lineNumber":26,"author":{"gitID":"Caijun7"},"content":"** Justification: This allows students to easily find empty rooms for them to study in with their friends. This feature displays the schedule of the rooms for the whole day so that students can find the room that is vacant for the longest time."},{"lineNumber":27,"author":{"gitID":"Caijun7"},"content":"** Credits: Venue information from https://nusmods.com/api/2017-2018/2/venueInformation.json[NUSMods] are used"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"* *Other contributions*:"},{"lineNumber":30,"author":{"gitID":"-"},"content":"*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":31,"author":{"gitID":"-"},"content":"** Community:"},{"lineNumber":32,"author":{"gitID":"Caijun7"},"content":"*** PRs reviewed (with non-trivial review comments): Pull Requests https://github.com/CS2103JAN2018-W11-B4/main/pull/74[#74], https://github.com/CS2103JAN2018-W11-B4/main/pull/138[#138]"},{"lineNumber":33,"author":{"gitID":"Caijun7"},"content":"*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com/CS2103JAN2018-F09-B3/main/issues/177[1], https://github.com/CS2103JAN2018-F09-B3/main/issues/139[2], https://github.com/CS2103JAN2018-F09-B3/main/issues/159[3])"},{"lineNumber":34,"author":{"gitID":"Caijun7"},"content":"** Tools:"},{"lineNumber":35,"author":{"gitID":"Caijun7"},"content":"*** Uses a third party library (Google Drive API) for uploading feature (Pull Request https://github.com/CS2103JAN2018-W11-B4/main/pull/208[#208])"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":40,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":41,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"Caijun7"},"content":"include::../UserGuide.adoc[tag\u003ddatatransfer]"},{"lineNumber":44,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":45,"author":{"gitID":"Caijun7"},"content":"include::../UserGuide.adoc[tag\u003dvacant]"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":50,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":51,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"Caijun7"},"content":"include::../DeveloperGuide.adoc[tag\u003ddatatransfer]"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003dvacantroomfinder]"}],"authorContributionMap":{"Caijun7":25,"-":30}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d StardyTogether - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-W11-B4/main/tree/master"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"By: `Team W11-B4`      Since: `Feb 2018`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":18,"author":{"gitID":"-"},"content":"StardyTogether is a command line application which provides students a way to manage their contacts."},{"lineNumber":19,"author":{"gitID":"-"},"content":"It is customized for students in the National University of Singapore (NUS) which allows them to find vacant rooms within NUS and also to track their timetable."},{"lineNumber":20,"author":{"gitID":"-"},"content":"This documentation provides information that will not only help you get started as a StardyTogether contributor, but that you\u0027ll find useful to refer to even if you are already an experienced contributor."},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":27,"author":{"gitID":"-"},"content":"+"},{"lineNumber":28,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":29,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":30,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":31,"author":{"gitID":"-"},"content":"+"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":34,"author":{"gitID":"-"},"content":"+"},{"lineNumber":35,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":36,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":37,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":43,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":44,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":45,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":46,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":47,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":48,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":49,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":50,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":51,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":52,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":57,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":66,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":67,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":70,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `CS2103JAN2018-W11-B4/main` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `CS2103JAN2018-W11-B4/main`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":85,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":90,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":97,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":102,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":105,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":110,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":115,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":120,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":125,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":126,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":127,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":132,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":137,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":140,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":145,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":148,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":153,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":156,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":161,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":164,"author":{"gitID":"-"},"content":"image::UiComponentUpdated.png[width\u003d\"800\"]"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":175,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":176,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":179,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":182,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":183,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":186,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":189,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":192,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":193,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."},{"lineNumber":194,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":199,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":202,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":205,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":212,"author":{"gitID":"-"},"content":"* stores the Address Book data."},{"lineNumber":213,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":214,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":217,"author":{"gitID":"-"},"content":"Note that although it is stated that contacts are friends in the User Guide (for better presentation), they are actually represented as `Person` class in code."},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":220,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":223,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":230,"author":{"gitID":"-"},"content":"* can save the Address Book data in xml format and read it back."},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":233,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":242,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":243,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"Caijun7"},"content":".Logic Command Class Diagram"},{"lineNumber":250,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":255,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":256,"author":{"gitID":"-"},"content":"----"},{"lineNumber":257,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":259,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":261,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":262,"author":{"gitID":"-"},"content":"}"},{"lineNumber":263,"author":{"gitID":"-"},"content":"----"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":266,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":267,"author":{"gitID":"-"},"content":"----"},{"lineNumber":268,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":275,"author":{"gitID":"-"},"content":"}"},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":278,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":279,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":281,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":282,"author":{"gitID":"-"},"content":"}"},{"lineNumber":283,"author":{"gitID":"-"},"content":"----"},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":286,"author":{"gitID":"-"},"content":""},{"lineNumber":287,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":288,"author":{"gitID":"-"},"content":""},{"lineNumber":289,"author":{"gitID":"Caijun7"},"content":".Undo and Redo Starting Stack"},{"lineNumber":290,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":291,"author":{"gitID":"-"},"content":""},{"lineNumber":292,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."},{"lineNumber":293,"author":{"gitID":"-"},"content":""},{"lineNumber":294,"author":{"gitID":"Caijun7"},"content":".Undo and Redo Stack after executing one Command"},{"lineNumber":295,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":296,"author":{"gitID":"-"},"content":""},{"lineNumber":297,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":298,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"Caijun7"},"content":".Undo and Redo stack before and after Undo command execution"},{"lineNumber":305,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":308,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":309,"author":{"gitID":"-"},"content":""},{"lineNumber":310,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":311,"author":{"gitID":"-"},"content":""},{"lineNumber":312,"author":{"gitID":"Caijun7"},"content":".Undo Sequence Diagram"},{"lineNumber":313,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."},{"lineNumber":316,"author":{"gitID":"-"},"content":""},{"lineNumber":317,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":318,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":319,"author":{"gitID":"-"},"content":""},{"lineNumber":320,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":321,"author":{"gitID":"-"},"content":""},{"lineNumber":322,"author":{"gitID":"Caijun7"},"content":".Undo and Redo stack before and after Clear command execution"},{"lineNumber":323,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":324,"author":{"gitID":"-"},"content":""},{"lineNumber":325,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":326,"author":{"gitID":"-"},"content":""},{"lineNumber":327,"author":{"gitID":"Caijun7"},"content":".Undo and Redo stack before and after List command execution"},{"lineNumber":328,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":329,"author":{"gitID":"-"},"content":""},{"lineNumber":330,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":331,"author":{"gitID":"-"},"content":""},{"lineNumber":332,"author":{"gitID":"Caijun7"},"content":".Undo and Redo Activity Diagram"},{"lineNumber":333,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":334,"author":{"gitID":"-"},"content":""},{"lineNumber":335,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":336,"author":{"gitID":"-"},"content":""},{"lineNumber":337,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":338,"author":{"gitID":"-"},"content":""},{"lineNumber":339,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":340,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":341,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":342,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":343,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":344,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":345,"author":{"gitID":"-"},"content":""},{"lineNumber":346,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":347,"author":{"gitID":"-"},"content":""},{"lineNumber":348,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":349,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":350,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":351,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":352,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":353,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":354,"author":{"gitID":"-"},"content":""},{"lineNumber":355,"author":{"gitID":"-"},"content":""},{"lineNumber":356,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":357,"author":{"gitID":"-"},"content":""},{"lineNumber":358,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the address book (`add`, `clear`, `edit`)."},{"lineNumber":359,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":360,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":361,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":362,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":363,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."},{"lineNumber":364,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":365,"author":{"gitID":"-"},"content":""},{"lineNumber":366,"author":{"gitID":"-"},"content":""},{"lineNumber":367,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":368,"author":{"gitID":"-"},"content":""},{"lineNumber":369,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":370,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":371,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":372,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":373,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":374,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":375,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":376,"author":{"gitID":"-"},"content":""},{"lineNumber":377,"author":{"gitID":"-"},"content":"// tag::customizedalias[]"},{"lineNumber":378,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Customized Alias feature"},{"lineNumber":379,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":380,"author":{"gitID":"-"},"content":"The alias mechanism is maintained in a HashMap which resides in `UniqueAliasList` in the Model component. It supports the undoable command."},{"lineNumber":381,"author":{"gitID":"-"},"content":"The alias as specified by the user is used as the key in the HashMap, with its respective command as the value."},{"lineNumber":382,"author":{"gitID":"-"},"content":"Whenever a user enters a command, the application will be able to check if the command is a previously-set alias efficiently by using the API provided by the `UniqueAliasList`."},{"lineNumber":383,"author":{"gitID":"-"},"content":"If the input command word is an existing alias, it will be replaced with its respective command as shown below."},{"lineNumber":384,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":385,"author":{"gitID":"-"},"content":"----"},{"lineNumber":386,"author":{"gitID":"-"},"content":"public String getCommandFromAlias(String aliasKey) {"},{"lineNumber":387,"author":{"gitID":"-"},"content":"    if (aliases.contains(aliasKey)) {"},{"lineNumber":388,"author":{"gitID":"-"},"content":"        return aliases.getCommandFromAlias(aliasKey);"},{"lineNumber":389,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":390,"author":{"gitID":"-"},"content":"    return aliasKey;"},{"lineNumber":391,"author":{"gitID":"-"},"content":"}"},{"lineNumber":392,"author":{"gitID":"-"},"content":"----"},{"lineNumber":393,"author":{"gitID":"-"},"content":""},{"lineNumber":394,"author":{"gitID":"-"},"content":"When the user creates a new alias for a command, the `AliasCommand` checks that the command is a valid command, and the alias is not an existing application command word."},{"lineNumber":395,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the `AliasCommand` works:"},{"lineNumber":396,"author":{"gitID":"-"},"content":""},{"lineNumber":397,"author":{"gitID":"Caijun7"},"content":".Alias Command Sequence Diagram for Logic Component"},{"lineNumber":398,"author":{"gitID":"-"},"content":"image::LogicComponentAliasSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":399,"author":{"gitID":"-"},"content":""},{"lineNumber":400,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":401,"author":{"gitID":"-"},"content":""},{"lineNumber":402,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How alias list is maintained"},{"lineNumber":403,"author":{"gitID":"Caijun7"},"content":".Model Component"},{"lineNumber":404,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":405,"author":{"gitID":"-"},"content":""},{"lineNumber":406,"author":{"gitID":"-"},"content":"The alias list is maintained in a UniqueAliasList which is stored in the Model component."},{"lineNumber":407,"author":{"gitID":"-"},"content":""},{"lineNumber":408,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Create an `UniqueAliasList` in the `alias` model"},{"lineNumber":409,"author":{"gitID":"-"},"content":"** Pros: Reduce coupling between `Alias` and other commands. This design follows the Open Closed Principle where a command is open to extension and closed to modification."},{"lineNumber":410,"author":{"gitID":"-"},"content":"** Cons: More difficult to implement as need to design an instance of a `UniqueAliasList`."},{"lineNumber":411,"author":{"gitID":"-"},"content":"* **Alternative 2:** Create a HashMap of `Alias` in each command class"},{"lineNumber":412,"author":{"gitID":"-"},"content":"** Pros: Faster to implement as each command class only needs to include a HashMap that stores all the aliases tagged to the command."},{"lineNumber":413,"author":{"gitID":"-"},"content":"** Cons: High coupling between `Alias` and other commands and the HashMaps of every command needs to be iterated through to find to find the aliased command."},{"lineNumber":414,"author":{"gitID":"-"},"content":""},{"lineNumber":415,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How alias is stored"},{"lineNumber":416,"author":{"gitID":"-"},"content":"The following class diagram shows how the aliases are stored:"},{"lineNumber":417,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":418,"author":{"gitID":"Caijun7"},"content":".Storage Component"},{"lineNumber":419,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":420,"author":{"gitID":"-"},"content":""},{"lineNumber":421,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Store as `XmlAdaptedAlias` and save to `addressbook.xml`"},{"lineNumber":422,"author":{"gitID":"-"},"content":"** Pros: Reduces files where data need to be stored, as all the user saved data is in one file."},{"lineNumber":423,"author":{"gitID":"-"},"content":"** Cons: Need to design a section in `addressbook.xml` for saving alias data with the other data like person data."},{"lineNumber":424,"author":{"gitID":"-"},"content":"* **Alternative 2:** Store in `UserPrefsStorage`"},{"lineNumber":425,"author":{"gitID":"-"},"content":"** Pros: Easier to implement."},{"lineNumber":426,"author":{"gitID":"-"},"content":"** Cons: Affects Import command, to import `UserPrefsStorage` as well, than just importing `addressbook.xml`"},{"lineNumber":427,"author":{"gitID":"-"},"content":""},{"lineNumber":428,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Displaying stored aliases"},{"lineNumber":429,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use the original `list` command to display aliases"},{"lineNumber":430,"author":{"gitID":"-"},"content":"** Pros: Utilizes unused `infoPanel` space in the UI."},{"lineNumber":431,"author":{"gitID":"-"},"content":"** Cons: Need to integrate with the `ListCommand`."},{"lineNumber":432,"author":{"gitID":"-"},"content":"* **Alternative 2:** Modifying `AliasCommand` to support `alias list` command"},{"lineNumber":433,"author":{"gitID":"-"},"content":"** Pros: Easier to implement as only modification of the command is required."},{"lineNumber":434,"author":{"gitID":"-"},"content":"** Cons: `alias list` should not be an undoable command, and conflicts with the `AliasCommand`."},{"lineNumber":435,"author":{"gitID":"-"},"content":""},{"lineNumber":436,"author":{"gitID":"-"},"content":"// end::customizedalias[]"},{"lineNumber":437,"author":{"gitID":"-"},"content":""},{"lineNumber":438,"author":{"gitID":"-"},"content":"// tag::mapconsiderations[]"},{"lineNumber":439,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Google Maps feature"},{"lineNumber":440,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":441,"author":{"gitID":"-"},"content":""},{"lineNumber":442,"author":{"gitID":"-"},"content":"We are using the Google Maps Browser and passing the location(s) specified by the user into the URL, and then connecting to the internet to retrieve the Google Maps with the respective location(s)."},{"lineNumber":443,"author":{"gitID":"-"},"content":"We have implemented two functionalities for the Google Maps: Address locator and locations navigator."},{"lineNumber":444,"author":{"gitID":"-"},"content":""},{"lineNumber":445,"author":{"gitID":"-"},"content":"* For one location specified, the \"https://www.google.com/maps/search/\" URL prefix is used."},{"lineNumber":446,"author":{"gitID":"-"},"content":"* For more than one locations specified, the \"https://www.google.com/maps/dir/\" URL prefix is used."},{"lineNumber":447,"author":{"gitID":"-"},"content":""},{"lineNumber":448,"author":{"gitID":"-"},"content":"When a location specified by the user is an NUS building e.g. `S1`, our application compares the input with the list of NUS buildings to check from, and recognizes it as an NUS building."},{"lineNumber":449,"author":{"gitID":"-"},"content":"The location is replaced with its respective postal code and passed to form the Google Maps URL."},{"lineNumber":450,"author":{"gitID":"-"},"content":""},{"lineNumber":451,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":452,"author":{"gitID":"-"},"content":""},{"lineNumber":453,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Google Maps implementation"},{"lineNumber":454,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use Google Maps in browser"},{"lineNumber":455,"author":{"gitID":"-"},"content":"** Pros: Does not require a re-setup of project to link with the Google API."},{"lineNumber":456,"author":{"gitID":"-"},"content":"** Cons: Browser mode (Google Lite Maps) does not support some advanced Google Maps features."},{"lineNumber":457,"author":{"gitID":"-"},"content":"(But these additional features are not used in this project and thus having the browser implementation fulfils the intended functionality)"},{"lineNumber":458,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use Google Maps API"},{"lineNumber":459,"author":{"gitID":"-"},"content":"** Pros: Google Maps in the application will have the complete set of features."},{"lineNumber":460,"author":{"gitID":"-"},"content":"** Cons: May cause a longer loading time for the application and Google Maps browser."},{"lineNumber":461,"author":{"gitID":"-"},"content":""},{"lineNumber":462,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Saving NUS buildings\u0027 addresses"},{"lineNumber":463,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saving the postal codes of NUS buildings in the Building class"},{"lineNumber":464,"author":{"gitID":"-"},"content":"** Pros: Easy to implement. Since there is only one set of fixed NUS buildings and postal codes, both can be stored as lists in the same class."},{"lineNumber":465,"author":{"gitID":"-"},"content":"** Cons: Need to have a method that finds the correct postal code for a building from the lists."},{"lineNumber":466,"author":{"gitID":"-"},"content":"* **Alternative 2:** Creating a new class to store postal codes/addresses of NUS buildings"},{"lineNumber":467,"author":{"gitID":"-"},"content":"** Pros: The code looks neater. Every building will have an `Address` class to store their postal codes/addresses."},{"lineNumber":468,"author":{"gitID":"-"},"content":"** Cons: Need to maintain a `Building` list, where each `Building` contains the `Address` class."},{"lineNumber":469,"author":{"gitID":"-"},"content":"// end::mapconsiderations[]"},{"lineNumber":470,"author":{"gitID":"-"},"content":""},{"lineNumber":471,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":472,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d  Data Encryption"},{"lineNumber":473,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":474,"author":{"gitID":"-"},"content":""},{"lineNumber":475,"author":{"gitID":"-"},"content":"We are using `javax.crypto.cipher` and `java.security.key` package provided by java for the encryption of the data. The `SecurityUtil` class is used to provide the `SHA-1` hashing and `AES` encryption/decryption required."},{"lineNumber":476,"author":{"gitID":"-"},"content":""},{"lineNumber":477,"author":{"gitID":"-"},"content":"Using a given password, it is first hashed using `SHA-1` to be used as the `AES` key."},{"lineNumber":478,"author":{"gitID":"-"},"content":"The first 128 bits of the digest created by the `SHA-1` hash is extracted."},{"lineNumber":479,"author":{"gitID":"-"},"content":"This is required as `AES` requires its key to be 128 bits long."},{"lineNumber":480,"author":{"gitID":"-"},"content":""},{"lineNumber":481,"author":{"gitID":"-"},"content":"* The encryption can be done simply by using `SecurityUtil.encrypt()` which will encrypt the addressbook.xml."},{"lineNumber":482,"author":{"gitID":"-"},"content":"* The decryption can be done simply by using `SecurityUtil.decrypt()` which will decrypt the addressbook.xml."},{"lineNumber":483,"author":{"gitID":"-"},"content":"* Currently, decryption/encryption is done in `XmlAddressBookStorage` class before/after `readAddressBook` and `saveAddressBook`."},{"lineNumber":484,"author":{"gitID":"-"},"content":""},{"lineNumber":485,"author":{"gitID":"-"},"content":"No encryption is done if the user do not set a password."},{"lineNumber":486,"author":{"gitID":"-"},"content":"Users can change their password using the command `encrypt` and decrypt it permanently using the command `decrypt`."},{"lineNumber":487,"author":{"gitID":"-"},"content":""},{"lineNumber":488,"author":{"gitID":"-"},"content":"When an \u0027encrypt\u0027 command is issued, the argument is parsed and hashed. Is is then passed to the Model."},{"lineNumber":489,"author":{"gitID":"-"},"content":""},{"lineNumber":490,"author":{"gitID":"-"},"content":".Password Sequence Diagram for Logic Component"},{"lineNumber":491,"author":{"gitID":"-"},"content":"image::PasswordSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":492,"author":{"gitID":"-"},"content":""},{"lineNumber":493,"author":{"gitID":"-"},"content":"The `ModelManager` then updates the password in the `AddressBook` as shown below:"},{"lineNumber":494,"author":{"gitID":"-"},"content":""},{"lineNumber":495,"author":{"gitID":"Caijun7"},"content":".Password Sequence Diagram for Model Component"},{"lineNumber":496,"author":{"gitID":"-"},"content":"image::PasswordSdForModel.png[width\u003d\"800\"]"},{"lineNumber":497,"author":{"gitID":"-"},"content":""},{"lineNumber":498,"author":{"gitID":"-"},"content":"The 128 bit password used to encrypt `addressbook.xml` is saved in the address book as `XmlAdaptedPassword` to ensure that the password is not lost after every reset of the application."},{"lineNumber":499,"author":{"gitID":"-"},"content":"This is secure as even if a malicious user were to somehow get a copy of the 128 bit password, they would still need to use a computationally unfeasible \u003c\u003csecond-pre-image-attack, second pre-image attack\u003e\u003e."},{"lineNumber":500,"author":{"gitID":"-"},"content":"This is because users are unable to input hashed password directly."},{"lineNumber":501,"author":{"gitID":"-"},"content":""},{"lineNumber":502,"author":{"gitID":"-"},"content":"When the user first starts the application, `ModelManager` would try to load the data from `addressbook.xml` without using any password."},{"lineNumber":503,"author":{"gitID":"-"},"content":"If `addressbook.xml` is encrypted, this would cause the following code to trigger which would morph the `ui` to `PasswordUiManager` instead of `UiManager`."},{"lineNumber":504,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":505,"author":{"gitID":"-"},"content":"----"},{"lineNumber":506,"author":{"gitID":"-"},"content":"private void checkPasswordChanged() {"},{"lineNumber":507,"author":{"gitID":"-"},"content":"    if (passwordChanged) {"},{"lineNumber":508,"author":{"gitID":"-"},"content":"        ui \u003d new PasswordUiManager(storage, model, ui);"},{"lineNumber":509,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":510,"author":{"gitID":"-"},"content":"}"},{"lineNumber":511,"author":{"gitID":"-"},"content":"----"},{"lineNumber":512,"author":{"gitID":"-"},"content":"This change would cause the `PasswordWindow` to display instead of the `MainWindow`, requesting for a password input by the user."},{"lineNumber":513,"author":{"gitID":"-"},"content":""},{"lineNumber":514,"author":{"gitID":"-"},"content":".Password Box UI"},{"lineNumber":515,"author":{"gitID":"-"},"content":"image::passwordBox.png[width\u003d\"800\"]"},{"lineNumber":516,"author":{"gitID":"-"},"content":""},{"lineNumber":517,"author":{"gitID":"-"},"content":"If the password the user input is unable to decrypt `addressbook.xml`, a `WrongPasswordEvent` is raised which will cause the `PasswordUiManager` to display the following dialog to the user:"},{"lineNumber":518,"author":{"gitID":"-"},"content":""},{"lineNumber":519,"author":{"gitID":"-"},"content":".Wrong Password Dialog UI"},{"lineNumber":520,"author":{"gitID":"-"},"content":"image::wrongPasswordDialog.PNG[width\u003d\"800\"]"},{"lineNumber":521,"author":{"gitID":"-"},"content":""},{"lineNumber":522,"author":{"gitID":"-"},"content":"If the password the user input successfully decrypts `addressbook.xml`, a `CorrectPasswordEvent` is raised. This event is handled by the `PasswordUiManager` which will start the `UiManager`."},{"lineNumber":523,"author":{"gitID":"-"},"content":"The application would behave as if it is not encrypted from here on."},{"lineNumber":524,"author":{"gitID":"-"},"content":""},{"lineNumber":525,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":526,"author":{"gitID":"-"},"content":""},{"lineNumber":527,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How to generate the AES key"},{"lineNumber":528,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Generating the key from a password"},{"lineNumber":529,"author":{"gitID":"-"},"content":"** Pros: Users are able to key in their own passwords"},{"lineNumber":530,"author":{"gitID":"-"},"content":"** Cons: Users have to input password for their data to be encrypted."},{"lineNumber":531,"author":{"gitID":"-"},"content":"* **Alternative 2:** Generating the key within the code into a file for user to share."},{"lineNumber":532,"author":{"gitID":"-"},"content":"** Pros: It would be guaranteed to be more secure than using our own generated key."},{"lineNumber":533,"author":{"gitID":"-"},"content":"    This is because keys generated by `java.crypto.KeyGenerator` have their algorithms reviewed by many experts in the area."},{"lineNumber":534,"author":{"gitID":"-"},"content":"** Cons: This would require a file to be carried by the user to decrypt their address book which makes it very inconvenient for the user."},{"lineNumber":535,"author":{"gitID":"-"},"content":""},{"lineNumber":536,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Where to encrypt and decrypt file"},{"lineNumber":537,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Encryption and Decryption done in `XmlAddressBookStorage` class"},{"lineNumber":538,"author":{"gitID":"-"},"content":"** Pros: Easy and clear to understand implementation where file is encrypted and decrypted before and after `readAddressBook` and `saveAddressBook`."},{"lineNumber":539,"author":{"gitID":"-"},"content":"** Cons: `addressbook.xml` is in plain text longer than is required."},{"lineNumber":540,"author":{"gitID":"-"},"content":""},{"lineNumber":541,"author":{"gitID":"-"},"content":"* **Alternative 2:**  Encryption and Decryption done where needed in `XmlUtil` and `XmlFileStorage`"},{"lineNumber":542,"author":{"gitID":"-"},"content":"** Pros: `addressbook.xml` is exposed minimally."},{"lineNumber":543,"author":{"gitID":"-"},"content":"** Cons: Increase coupling of more classes and makes the implementation harder to understand."},{"lineNumber":544,"author":{"gitID":"-"},"content":""},{"lineNumber":545,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Where to save the password"},{"lineNumber":546,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Save in `addressbook.xml`"},{"lineNumber":547,"author":{"gitID":"-"},"content":"** Pros: The password is not lost after every reload of the application."},{"lineNumber":548,"author":{"gitID":"-"},"content":"** Cons: Plaintext of `addressbook.xml` contains the 128 bit `AES` key used."},{"lineNumber":549,"author":{"gitID":"-"},"content":"However, this is still secure as even if a malicious user were to somehow get a copy of the 128 bit password,"},{"lineNumber":550,"author":{"gitID":"-"},"content":"they would still need to use a computationally unfeasible \u003c\u003csecond-pre-image-attack, second pre-image attack\u003e\u003e."},{"lineNumber":551,"author":{"gitID":"-"},"content":""},{"lineNumber":552,"author":{"gitID":"-"},"content":"* **Alternative 2:** Password not saved"},{"lineNumber":553,"author":{"gitID":"-"},"content":"** Pros: No chance of password being compromised."},{"lineNumber":554,"author":{"gitID":"-"},"content":"** Cons: Password reset after each reload of application."},{"lineNumber":555,"author":{"gitID":"-"},"content":""},{"lineNumber":556,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Default Password"},{"lineNumber":557,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** `addressbook.xml` not encrypted by default"},{"lineNumber":558,"author":{"gitID":"-"},"content":"** Pros: Users are able to choose whether they want their data to be encrypted or not as encryption and decryption"},{"lineNumber":559,"author":{"gitID":"-"},"content":"requires computation which may make the application slower than desired."},{"lineNumber":560,"author":{"gitID":"-"},"content":"** Cons: Unfamiliar users may not be aware of the option of encrypting their data making it less secure."},{"lineNumber":561,"author":{"gitID":"-"},"content":"* **Alternative 2:** Default Password provided to encrypt `addressbook.xml`"},{"lineNumber":562,"author":{"gitID":"-"},"content":"** Pros: Data is always encrypted."},{"lineNumber":563,"author":{"gitID":"-"},"content":"** Cons: A default password is, most of the time, as effective as no password and it also slows down the application more than necessary."},{"lineNumber":564,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":565,"author":{"gitID":"-"},"content":""},{"lineNumber":566,"author":{"gitID":"Caijun7"},"content":"// tag::datatransfer[]"},{"lineNumber":567,"author":{"gitID":"Caijun7"},"content":"\u003d\u003d\u003d Import StardyTogether file feature"},{"lineNumber":568,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":569,"author":{"gitID":"-"},"content":""},{"lineNumber":570,"author":{"gitID":"Caijun7"},"content":"The import StardyTogether mechanism is facilitated by `XmlSerializableAddressBook`, which resides inside `Storage`. It allows the imported XML file to be converted into StardyTogether format."},{"lineNumber":571,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":572,"author":{"gitID":"Caijun7"},"content":"The imported StardyTogether must be a XML file that follows `XmlAdaptedPerson`, `XmlAdaptedTag`, and `XmlAdaptedAlias` format."},{"lineNumber":573,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":574,"author":{"gitID":"Caijun7"},"content":"`Person`,`Tag`, and `Alias` from imported StardyTogether file that are not a duplicate of existing `Person`, `Tag`, and `Alias` in the user\u0027s StardyTogether will be added."},{"lineNumber":575,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":576,"author":{"gitID":"Caijun7"},"content":"The following sequence diagram shows how the import operation works:"},{"lineNumber":577,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":578,"author":{"gitID":"Caijun7"},"content":".Import Command Sequence Diagram for Model and Storage Component"},{"lineNumber":579,"author":{"gitID":"Caijun7"},"content":"image::ModelStorageComponentImportSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":580,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":581,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":582,"author":{"gitID":"-"},"content":""},{"lineNumber":583,"author":{"gitID":"Caijun7"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Imported StardyTogether file format"},{"lineNumber":584,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":585,"author":{"gitID":"Caijun7"},"content":"* **Alternative 1 (current choice):** Uses the same XML file format as `XmlSerializableAddressBook`"},{"lineNumber":586,"author":{"gitID":"Caijun7"},"content":"** Pros: Same file format as saved StardyTogether, users can transfer StardyTogether easily without the need to indicate file format."},{"lineNumber":587,"author":{"gitID":"Caijun7"},"content":"** Cons: Imported StardyTogether must be in XML file format that follows `XmlAdaptedPerson`, `XmlAdaptedTag`, and `XmlAdaptedAlias` format."},{"lineNumber":588,"author":{"gitID":"Caijun7"},"content":"* **Alternative 2:** Uses CSV file format"},{"lineNumber":589,"author":{"gitID":"Caijun7"},"content":"** Pros: CSV file format is widely used and is able to transfer between different applications (eg. Microsoft Excel)."},{"lineNumber":590,"author":{"gitID":"Caijun7"},"content":"** Cons: Different file format as saved StardyTogether, implementation of converting file type from XML to CSV is needed."},{"lineNumber":591,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":592,"author":{"gitID":"Caijun7"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How import command executes"},{"lineNumber":593,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":594,"author":{"gitID":"Caijun7"},"content":"* **Alternative 1 (current choice):** Adds all `Person`,`Tag`, and `Alias` from imported StardyTogether that are not a duplicate of existing `Person`, `Tag`, and `Alias` to the user\u0027s StardyTogether."},{"lineNumber":595,"author":{"gitID":"Caijun7"},"content":"** Pros: User does not need to indicate which `Person`, `Tag` or `Alias` to be imported. Since user can select which `Person` to be exported using `export` command, we assume user has already made his selection."},{"lineNumber":596,"author":{"gitID":"Caijun7"},"content":"** Cons: User is not able to select which `Person`, `Tag` or `Alias` to be imported."},{"lineNumber":597,"author":{"gitID":"Caijun7"},"content":"* **Alternative 2:** Adds selected `Person`,`Tag`, and `Alias` from imported StardyTogether that are not a duplicate of existing `Person`, `Tag`, and `Alias` to the user\u0027s StardyTogether."},{"lineNumber":598,"author":{"gitID":"Caijun7"},"content":"** Pros: User is able to select which `Person`, `Tag` or `Alias` to be imported."},{"lineNumber":599,"author":{"gitID":"Caijun7"},"content":"** Cons: User needs to indicate which `Person`, `Tag` or `Alias` to be imported, which may lead to human errors."},{"lineNumber":600,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":601,"author":{"gitID":"Caijun7"},"content":"\u003d\u003d\u003d Export StardyTogether file feature"},{"lineNumber":602,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":603,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":604,"author":{"gitID":"Caijun7"},"content":"The export StardyTogether mechanism is facilitated by `XmlFileStorage`, which resides inside `Storage`. It allows the StardyTogether\u0027s `AddressBook` to be converted into a XML file format."},{"lineNumber":605,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":606,"author":{"gitID":"Caijun7"},"content":"The exported StardyTogether file contains all `Person` in `filteredPersons`, which resides inside `ModelManager`, all `Tag`, and all `Alias` in StardyTogether."},{"lineNumber":607,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":608,"author":{"gitID":"Caijun7"},"content":"The following sequence diagram shows how the export operation works:"},{"lineNumber":609,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":610,"author":{"gitID":"Caijun7"},"content":".Export Command Sequence Diagram for Model and Storage Component"},{"lineNumber":611,"author":{"gitID":"Caijun7"},"content":"image::ModelStorageComponentExportSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":612,"author":{"gitID":"-"},"content":""},{"lineNumber":613,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":614,"author":{"gitID":"-"},"content":""},{"lineNumber":615,"author":{"gitID":"Caijun7"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Exported StardyTogether file format"},{"lineNumber":616,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":617,"author":{"gitID":"Caijun7"},"content":"* **Alternative 1 (current choice):** Uses the same XML file format as `XmlFileStorage`"},{"lineNumber":618,"author":{"gitID":"Caijun7"},"content":"** Pros: Same file format as saved StardyTogether, users can transfer StardyTogether easily without the need to indicate file format."},{"lineNumber":619,"author":{"gitID":"Caijun7"},"content":"** Cons: Can only be transferred and used by StardyTogether application."},{"lineNumber":620,"author":{"gitID":"Caijun7"},"content":"* **Alternative 2:** Uses CSV file format"},{"lineNumber":621,"author":{"gitID":"Caijun7"},"content":"** Pros: CSV file format is widely used and is able to transfer between different applications (eg. Microsoft Excel)."},{"lineNumber":622,"author":{"gitID":"Caijun7"},"content":"** Cons: Different file format as saved StardyTogether, implementation of converting file type from XML to CSV is needed."},{"lineNumber":623,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":624,"author":{"gitID":"Caijun7"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How export command executes"},{"lineNumber":625,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":626,"author":{"gitID":"Caijun7"},"content":"* **Alternative 1 (current choice):** Exports all `Person` in `filteredPersons`, `Tag`, and `Alias` from StardyTogether."},{"lineNumber":627,"author":{"gitID":"Caijun7"},"content":"** Pros: User is able to select which `Person` to be exported by using `find` command, user is not able to indicate which `Tag` or `Alias` to be exported. User can exports all `Person` by using `list` command too."},{"lineNumber":628,"author":{"gitID":"Caijun7"},"content":"** Cons: User is not able to select which `Tag` or `Alias` to be exported."},{"lineNumber":629,"author":{"gitID":"Caijun7"},"content":"* **Alternative 2:** Exports all `Person`,`Tag`, and `Alias` from StardyTogether."},{"lineNumber":630,"author":{"gitID":"Caijun7"},"content":"** Pros: User does not need to indicate which `Person`, `Tag` or `Alias` to be exported."},{"lineNumber":631,"author":{"gitID":"Caijun7"},"content":"** Cons: User is not able to select which `Person`, `Tag` or `Alias` to be exported. This is similar to copying and pasting the saved StardyTogether file using file explorer."},{"lineNumber":632,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":633,"author":{"gitID":"Caijun7"},"content":"\u003d\u003d\u003d Upload StardyTogether file feature"},{"lineNumber":634,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":635,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":636,"author":{"gitID":"Caijun7"},"content":"The upload feature involves three steps, requesting for authorization, exporting, and uploading."},{"lineNumber":637,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":638,"author":{"gitID":"Caijun7"},"content":"1. Redirecting user to a Google URL to request for authorization to his/her Google Drive. User must grant StardyTogether access to his/her Google Drive to continue. If user already granted access, this step will be skipped."},{"lineNumber":639,"author":{"gitID":"Caijun7"},"content":"2. Exporting all `Person` in `filteredPersons`, which resides inside `ModelManager`, all `Tag`, and all `Alias` of the StardyTogether to `googledrive` folder in user\u0027s computer."},{"lineNumber":640,"author":{"gitID":"Caijun7"},"content":"3. Uploading the exported StardyTogether file to user\u0027s Google Drive."},{"lineNumber":641,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":642,"author":{"gitID":"Caijun7"},"content":"Please refer to \u003c\u003cExport StardyTogether file feature,Export StardyTogether file feature\u003e\u003e for implementation on export mechanism."},{"lineNumber":643,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":644,"author":{"gitID":"Caijun7"},"content":"The upload StardyTogether mechanism is facilitated by using https://developers.google.com/drive/[Google Drive API] in `GoogleDriveStorage`, which resides inside `Storage`. It allows the stored StardyTogether file in user\u0027s computer to be uploaded into user\u0027s Google Drive."},{"lineNumber":645,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":646,"author":{"gitID":"Caijun7"},"content":"The uploaded StardyTogether file is the same as exported StardyTogether file stored."},{"lineNumber":647,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":648,"author":{"gitID":"Caijun7"},"content":"The following sequence diagram shows how the upload operation works:"},{"lineNumber":649,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":650,"author":{"gitID":"Caijun7"},"content":".Upload Command Sequence Diagram for Model and Storage Component"},{"lineNumber":651,"author":{"gitID":"Caijun7"},"content":"image::ModelStorageComponentUploadSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":652,"author":{"gitID":"-"},"content":""},{"lineNumber":653,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":654,"author":{"gitID":"-"},"content":""},{"lineNumber":655,"author":{"gitID":"Caijun7"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Uploaded StardyTogether file format"},{"lineNumber":656,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":657,"author":{"gitID":"Caijun7"},"content":"* **Alternative 1 (current choice):** Uses the same XML file format as `XmlFileStorage`"},{"lineNumber":658,"author":{"gitID":"Caijun7"},"content":"** Pros: Same file format as saved StardyTogether, users can transfer StardyTogether easily without the need to indicate file format."},{"lineNumber":659,"author":{"gitID":"Caijun7"},"content":"** Cons: Can only be transferred and used by StardyTogether application."},{"lineNumber":660,"author":{"gitID":"Caijun7"},"content":"* **Alternative 2:** Uses CSV file format"},{"lineNumber":661,"author":{"gitID":"Caijun7"},"content":"** Pros: CSV file format is widely used and is able to transfer between different applications (eg. Microsoft Excel)."},{"lineNumber":662,"author":{"gitID":"Caijun7"},"content":"** Cons: Different file format as saved StardyTogether, implementation of converting file type from XML to CSV is needed."},{"lineNumber":663,"author":{"gitID":"Caijun7"},"content":"// end::datatransfer[]"},{"lineNumber":664,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":665,"author":{"gitID":"-"},"content":"// tag::birthdays[]"},{"lineNumber":666,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Birthdays feature"},{"lineNumber":667,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":668,"author":{"gitID":"-"},"content":"`Birthdays` Command uses the existing `Events` system and sends an event according to the \u003c\u003cparameter, parameters\u003e\u003e provided."},{"lineNumber":669,"author":{"gitID":"-"},"content":""},{"lineNumber":670,"author":{"gitID":"-"},"content":".Birthdays Command Sequence Diagram for Logic Component +"},{"lineNumber":671,"author":{"gitID":"-"},"content":"image::LogicComponentBirthdaysSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":672,"author":{"gitID":"-"},"content":""},{"lineNumber":673,"author":{"gitID":"-"},"content":"The `BirthdayList` UI component will then receive the event and handle the display of the data +"},{"lineNumber":674,"author":{"gitID":"-"},"content":""},{"lineNumber":675,"author":{"gitID":"-"},"content":".Birthdays Command Sequence Diagram for UI Component +"},{"lineNumber":676,"author":{"gitID":"-"},"content":"image::UiComponentBirthdayListSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":677,"author":{"gitID":"-"},"content":""},{"lineNumber":678,"author":{"gitID":"-"},"content":"For \"birthdays today\" notification, the app will create an alert dialog instead."},{"lineNumber":679,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":680,"author":{"gitID":"-"},"content":"----"},{"lineNumber":681,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":682,"author":{"gitID":"-"},"content":"    private void handleBirthdayNotificationEvent(BirthdayNotificationEvent event) {"},{"lineNumber":683,"author":{"gitID":"-"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"},{"lineNumber":684,"author":{"gitID":"-"},"content":""},{"lineNumber":685,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":686,"author":{"gitID":"-"},"content":"        Alert alert \u003d new Alert(Alert.AlertType.INFORMATION);"},{"lineNumber":687,"author":{"gitID":"-"},"content":"        // ... setting up of Alert ..."},{"lineNumber":688,"author":{"gitID":"-"},"content":"        alert.showAndWait();"},{"lineNumber":689,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":690,"author":{"gitID":"-"},"content":"----"},{"lineNumber":691,"author":{"gitID":"-"},"content":""},{"lineNumber":692,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":693,"author":{"gitID":"-"},"content":""},{"lineNumber":694,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How the `BirthdayList` UI component obtains and parses its data"},{"lineNumber":695,"author":{"gitID":"-"},"content":""},{"lineNumber":696,"author":{"gitID":"-"},"content":"* **Alternative 1**: Let UI component handle the parsing of UniquePersonList obtained from Event"},{"lineNumber":697,"author":{"gitID":"-"},"content":"** Pros: Isolated and independent within `BirthdayList` UI component. Less overhead."},{"lineNumber":698,"author":{"gitID":"-"},"content":"** Cons: Not intuitive to new developers as parsing of data is not expected in UI."},{"lineNumber":699,"author":{"gitID":"-"},"content":"* **Alternative 2 (current choice)**: Let `Birthdays` do the parsing of UniquePersonList obtained from Model"},{"lineNumber":700,"author":{"gitID":"-"},"content":"** Pros: More modularity."},{"lineNumber":701,"author":{"gitID":"-"},"content":"** Cons: Not apparent in usage by User. Functionality remains the same but Birthdays command becomes more cluttered."},{"lineNumber":702,"author":{"gitID":"-"},"content":""},{"lineNumber":703,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How User can open Birthday List"},{"lineNumber":704,"author":{"gitID":"-"},"content":""},{"lineNumber":705,"author":{"gitID":"-"},"content":"* **Alternative 1**: Manual command \"birthdays\" or \"birthdays today\""},{"lineNumber":706,"author":{"gitID":"-"},"content":"** Pros: User can control when to view the birthdays."},{"lineNumber":707,"author":{"gitID":"-"},"content":"** Cons: Not very user-friendly. Additional \u003c\u003cparameter, parameter\u003e\u003e cannot be shortened."},{"lineNumber":708,"author":{"gitID":"-"},"content":"* ** Alternative 2 (current choice)**: Notification at the start of app if a birthday is occurring today"},{"lineNumber":709,"author":{"gitID":"-"},"content":"** Pros: User can be reminded immediately and need not type the command."},{"lineNumber":710,"author":{"gitID":"-"},"content":"** Cons: Currently, StardyTogether does not have settings to switch on/off the feature. User may find it irritating."},{"lineNumber":711,"author":{"gitID":"-"},"content":""},{"lineNumber":712,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How User inputs the Birthday \u003c\u003cparameter, parameter\u003e\u003e in `Person` class"},{"lineNumber":713,"author":{"gitID":"-"},"content":"* ** Alternative 1 (Current choice)**: Fixed format as DDMMYYYY"},{"lineNumber":714,"author":{"gitID":"-"},"content":"** Pros: Less room for errors."},{"lineNumber":715,"author":{"gitID":"-"},"content":"** Cons: User may not like the DDMMYYYY format."},{"lineNumber":716,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use Natural Language Processing"},{"lineNumber":717,"author":{"gitID":"-"},"content":"** Pros: Users can enter their birthday in their preferred format."},{"lineNumber":718,"author":{"gitID":"-"},"content":"** Cons: External API will be used. May introduce unforeseen bugs."},{"lineNumber":719,"author":{"gitID":"-"},"content":"// end::birthdays[]"},{"lineNumber":720,"author":{"gitID":"-"},"content":""},{"lineNumber":721,"author":{"gitID":"-"},"content":"// tag::vacantroomfinder[]"},{"lineNumber":722,"author":{"gitID":"Caijun7"},"content":"\u003d\u003d\u003d Vacant Room Finder feature"},{"lineNumber":723,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":724,"author":{"gitID":"Caijun7"},"content":"We are using Venue Information JSON file from https://nusmods.com/api/2017-2018/2/venueInformation.json[NUSMods] to retrieve the weekly timetable of the venues. To increase the performance of retrieving the timetable of the venue, we decided to download Venue Information JSON file and have an offline copy stored in our StardyTogether application."},{"lineNumber":725,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":726,"author":{"gitID":"Caijun7"},"content":"We have added the list of NUS buildings and the list of rooms in each building into the offline copy."},{"lineNumber":727,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":728,"author":{"gitID":"Caijun7"},"content":"We use `ReadOnlyJsonVenueInformation`, which resides inside `Storage` to read and store the room timetable data inside `nusVenues` in `Room` class, and also store NUS Buildings and their respective rooms inside `nusBuildingsAndRooms` in `Building` class."},{"lineNumber":729,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":730,"author":{"gitID":"Caijun7"},"content":"To avoid reading the data from Venue Information JSON file whenever the `vacant` command is executed, we only read the data once when the `MainApp` starts."},{"lineNumber":731,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":732,"author":{"gitID":"Caijun7"},"content":"`ModelManager` will checks if the building is in the list of NUS Buildings, and will throw `BuildingNotFoundException` if the building is not in the list of NUS Buildings."},{"lineNumber":733,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":734,"author":{"gitID":"Caijun7"},"content":"We have created `Building`, `Room`, `Week`, and `WeekDay` in `Model` to read and store all weekday schedule of all NUS Rooms."},{"lineNumber":735,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":736,"author":{"gitID":"Caijun7"},"content":"The following architecture diagram shows the model component:"},{"lineNumber":737,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":738,"author":{"gitID":"Caijun7"},"content":".Model Component"},{"lineNumber":739,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":740,"author":{"gitID":"-"},"content":""},{"lineNumber":741,"author":{"gitID":"Caijun7"},"content":"The following sequence diagram shows how the logic component of Vacant Room Finder works:"},{"lineNumber":742,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":743,"author":{"gitID":"Caijun7"},"content":".Vacant Command Sequence Diagram for Model Component"},{"lineNumber":744,"author":{"gitID":"Caijun7"},"content":"image::ModelComponentVacantSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":745,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":746,"author":{"gitID":"Caijun7"},"content":"As shown in diagram above, all Rooms weekday schedule will be return in an `ArrayList\u003cArrayList\u003cString\u003e\u003e` data structure. This result will be shown to the UI on the `InfoPanel`"},{"lineNumber":747,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":748,"author":{"gitID":"Caijun7"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Shows list of vacant rooms"},{"lineNumber":749,"author":{"gitID":"Caijun7"},"content":"* **Alternative 1 (current choice):** Displays a list of rooms and the weekday schedule from 0800 to 2100"},{"lineNumber":750,"author":{"gitID":"Caijun7"},"content":"** Pros: User is able to see which rooms are vacant throughout the day"},{"lineNumber":751,"author":{"gitID":"Caijun7"},"content":"** Cons: User has to manually find which rooms are vacant at the current time"},{"lineNumber":752,"author":{"gitID":"Caijun7"},"content":"* **Alternative 2:** Displays a list of vacant rooms at the current time"},{"lineNumber":753,"author":{"gitID":"Caijun7"},"content":"** Pros: User is able to see which rooms are vacant at current time immediately"},{"lineNumber":754,"author":{"gitID":"Caijun7"},"content":"** Cons: User is not able to see the room schedule for the whole day"},{"lineNumber":755,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":756,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Design of converting JSON to objects"},{"lineNumber":757,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Create a Building, Room, Week and Weekday class"},{"lineNumber":758,"author":{"gitID":"-"},"content":"** Pros: Follows the Single Responsibility Principle where each class should have responsibility over a single part of the functionality provided by the software"},{"lineNumber":759,"author":{"gitID":"-"},"content":"** Cons: More difficult to implement as the design of the flow of work between classes has to be thought out"},{"lineNumber":760,"author":{"gitID":"-"},"content":"* **Alternative 2:** Create a static list of rooms in the Building class which has a room schedule for the day"},{"lineNumber":761,"author":{"gitID":"-"},"content":"** Pros: Code is shorter"},{"lineNumber":762,"author":{"gitID":"-"},"content":"** Cons: The Room and Building class will have schedule-related code which makes the classes messy."},{"lineNumber":763,"author":{"gitID":"Caijun7"},"content":"// end::vacantroomfinder[]"},{"lineNumber":764,"author":{"gitID":"-"},"content":""},{"lineNumber":765,"author":{"gitID":"-"},"content":"// tag::timetable[]"},{"lineNumber":766,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Timetable feature"},{"lineNumber":767,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":768,"author":{"gitID":"-"},"content":"When adding a `Person` using the \"Add\" Command, users can enter their NUSMods shortened link into the \"tt/\" field."},{"lineNumber":769,"author":{"gitID":"-"},"content":"NUSMods URLs currently come in the format of `.../timetable/SEM_NUM/share?MODULE_CODE\u003dLESSON_CODE`"},{"lineNumber":770,"author":{"gitID":"-"},"content":"Using `TimetableParserUtil:parseShortUrl`, we obtain the full url from the shortened link."},{"lineNumber":771,"author":{"gitID":"-"},"content":"Then, we parse the information accordingly and obtain lesson data from {empty}[https://api.nusmods.com/[NUSMods API]] to represent them in `Lesson`"},{"lineNumber":772,"author":{"gitID":"-"},"content":"The information is then sorted and added as a list of `Lesson` taken by the user to the Timetable."},{"lineNumber":773,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":774,"author":{"gitID":"-"},"content":"----"},{"lineNumber":775,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":776,"author":{"gitID":"-"},"content":"            // Grab lesson info from API and store as a map"},{"lineNumber":777,"author":{"gitID":"-"},"content":"            URL url \u003d new URL(link);"},{"lineNumber":778,"author":{"gitID":"-"},"content":"            @SuppressWarnings(\"unchecked\")"},{"lineNumber":779,"author":{"gitID":"-"},"content":"            Map\u003cString, Object\u003e mappedJson \u003d mapper.readValue(url, HashMap.class);"},{"lineNumber":780,"author":{"gitID":"-"},"content":"            @SuppressWarnings(\"unchecked\")"},{"lineNumber":781,"author":{"gitID":"-"},"content":"            ArrayList\u003cHashMap\u003cString, String\u003e\u003e lessonInfo \u003d (ArrayList\u003cHashMap\u003cString, String\u003e\u003e)"},{"lineNumber":782,"author":{"gitID":"-"},"content":"                    mappedJson.get(\"Timetable\");"},{"lineNumber":783,"author":{"gitID":"-"},"content":""},{"lineNumber":784,"author":{"gitID":"-"},"content":"            // Parse the information from API and creates an Arraylist of all possible lessons"},{"lineNumber":785,"author":{"gitID":"-"},"content":"            ArrayList\u003cLesson\u003e lessons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":786,"author":{"gitID":"-"},"content":"            for (HashMap\u003cString, String\u003e lesson : lessonInfo) {"},{"lineNumber":787,"author":{"gitID":"-"},"content":"                Lesson lessonToAdd \u003d new Lesson(moduleCode, lesson.get(\"ClassNo\"), lesson.get(\"LessonType\"),"},{"lineNumber":788,"author":{"gitID":"-"},"content":"                        lesson.get(\"WeekText\"), lesson.get(\"DayText\"), lesson.get(\"StartTime\"), lesson.get(\"EndTime\"));"},{"lineNumber":789,"author":{"gitID":"-"},"content":"                lessons.add(lessonToAdd);"},{"lineNumber":790,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":791,"author":{"gitID":"-"},"content":""},{"lineNumber":792,"author":{"gitID":"-"},"content":"            return lessons;"},{"lineNumber":793,"author":{"gitID":"-"},"content":"        } catch (IOException exception) {"},{"lineNumber":794,"author":{"gitID":"-"},"content":"            throw new ParseException(\"Cannot retrieve module information\");"},{"lineNumber":795,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":796,"author":{"gitID":"-"},"content":"----"},{"lineNumber":797,"author":{"gitID":"-"},"content":""},{"lineNumber":798,"author":{"gitID":"-"},"content":"The main contents of the timetable is stored as `TimetableData` and is accessed through `Timetable`."},{"lineNumber":799,"author":{"gitID":"-"},"content":"`TimetableData` consists of 2 `TimetableWeek`, which each consist of 5 `TimetableDay`, which each consist of 24"},{"lineNumber":800,"author":{"gitID":"-"},"content":"`TimetableSlot` (following the 24h clock)"},{"lineNumber":801,"author":{"gitID":"-"},"content":""},{"lineNumber":802,"author":{"gitID":"Caijun7"},"content":".Timetable Component"},{"lineNumber":803,"author":{"gitID":"-"},"content":"image::TimetableComponentClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":804,"author":{"gitID":"-"},"content":""},{"lineNumber":805,"author":{"gitID":"-"},"content":"In the event the url provided is invalid or empty, a empty `Timetable` will be created."},{"lineNumber":806,"author":{"gitID":"-"},"content":"Do take note that there are dummy urls for the purpose of testing. While normal users should not be able to know of their existence,"},{"lineNumber":807,"author":{"gitID":"-"},"content":"entering a dummy link will result in a preset timetable being built."},{"lineNumber":808,"author":{"gitID":"-"},"content":""},{"lineNumber":809,"author":{"gitID":"-"},"content":"When the user uses the `TimetableUnionCommand`, the indexes selected will be parsed and a union of the timetables selected will be created."},{"lineNumber":810,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":811,"author":{"gitID":"-"},"content":"----"},{"lineNumber":812,"author":{"gitID":"-"},"content":"    public static ArrayList\u003cString\u003e unionTimetableDay(ArrayList\u003cTimetableDay\u003e timetables) {"},{"lineNumber":813,"author":{"gitID":"-"},"content":"        ArrayList\u003cString\u003e commonTimetable \u003d new ArrayList\u003c\u003e();"},{"lineNumber":814,"author":{"gitID":"-"},"content":"        boolean checker;"},{"lineNumber":815,"author":{"gitID":"-"},"content":""},{"lineNumber":816,"author":{"gitID":"-"},"content":"        for (int i \u003d 8; i \u003c 22; i++) {"},{"lineNumber":817,"author":{"gitID":"-"},"content":"            checker \u003d false;"},{"lineNumber":818,"author":{"gitID":"-"},"content":"            for (TimetableDay timetable : timetables) {"},{"lineNumber":819,"author":{"gitID":"-"},"content":"                TimetableSlot t \u003d timetable.timetableSlots[i];"},{"lineNumber":820,"author":{"gitID":"-"},"content":"                if (!t.toString().equals(EMPTY_SLOT_STRING)) {"},{"lineNumber":821,"author":{"gitID":"-"},"content":"                    checker \u003d true;"},{"lineNumber":822,"author":{"gitID":"-"},"content":"                    break;"},{"lineNumber":823,"author":{"gitID":"-"},"content":"                }"},{"lineNumber":824,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":825,"author":{"gitID":"-"},"content":""},{"lineNumber":826,"author":{"gitID":"-"},"content":"            if (checker) {"},{"lineNumber":827,"author":{"gitID":"-"},"content":"                commonTimetable.add(TITLE_OCCUPIED);"},{"lineNumber":828,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":829,"author":{"gitID":"-"},"content":"                commonTimetable.add(EMPTY_SLOT_STRING);"},{"lineNumber":830,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":831,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":832,"author":{"gitID":"-"},"content":"        return commonTimetable;"},{"lineNumber":833,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":834,"author":{"gitID":"-"},"content":"----"},{"lineNumber":835,"author":{"gitID":"-"},"content":""},{"lineNumber":836,"author":{"gitID":"-"},"content":"Afterwards, it will raise the `TimeTableEvent` which will be caught and handled by the `InfoPanel`."},{"lineNumber":837,"author":{"gitID":"-"},"content":"The `InfoPanel` will swap between `UserDetailsPanel`, `BirthdayList`, `VenueTable` and `TimetableUnionPanel` so that the UI would not be too cluttered."},{"lineNumber":838,"author":{"gitID":"-"},"content":""},{"lineNumber":839,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":840,"author":{"gitID":"-"},"content":""},{"lineNumber":841,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: The use of NUSMods Shortened URLs"},{"lineNumber":842,"author":{"gitID":"-"},"content":""},{"lineNumber":843,"author":{"gitID":"-"},"content":"* **Alternative 1** (current choice): Use NUSMods shortened urls to \u0027import\u0027 the user\u0027s timetable over to StardyTogether"},{"lineNumber":844,"author":{"gitID":"-"},"content":"** Pros: User-friendly if user already uses NUSMods and knows how to get the shortened link"},{"lineNumber":845,"author":{"gitID":"-"},"content":"** Cons: Not helpful to a user who does not use NUSMods. If NUSMods API changes, StardyTogether needs to be updated"},{"lineNumber":846,"author":{"gitID":"-"},"content":"* **Alternative 2**: Allow the use of more universal formats such as .ics files"},{"lineNumber":847,"author":{"gitID":"-"},"content":"** Pros: More flexibility for the user"},{"lineNumber":848,"author":{"gitID":"-"},"content":"** Cons: Hard to implement and parse the input"},{"lineNumber":849,"author":{"gitID":"-"},"content":""},{"lineNumber":850,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Behaviour of the app when data from API is not retrieved successfully"},{"lineNumber":851,"author":{"gitID":"-"},"content":""},{"lineNumber":852,"author":{"gitID":"-"},"content":"* **Alternative 1** (current choice): A empty timetable is created for them."},{"lineNumber":853,"author":{"gitID":"-"},"content":"** Pros: Prevents unexpected errors"},{"lineNumber":854,"author":{"gitID":"-"},"content":"** Cons: Not very intuitive unless user sees the thrown exception"},{"lineNumber":855,"author":{"gitID":"-"},"content":"* ** Alternative 2**: Prevent the adding of a Person without a valid timetable"},{"lineNumber":856,"author":{"gitID":"-"},"content":"** Pros: Warns the user that the timetable is not inputted properly"},{"lineNumber":857,"author":{"gitID":"-"},"content":"** Cons: Not very user-friendly if user just does not have a valid timetable"},{"lineNumber":858,"author":{"gitID":"-"},"content":""},{"lineNumber":859,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Adding of lessons to Timetable"},{"lineNumber":860,"author":{"gitID":"-"},"content":""},{"lineNumber":861,"author":{"gitID":"-"},"content":"* **Alternative 1** (current choice): Users do the adding on NUSMods and re-import the timetable link"},{"lineNumber":862,"author":{"gitID":"-"},"content":"** Pros: No need to implement a separate function to add lessons and a separate `Module` class"},{"lineNumber":863,"author":{"gitID":"-"},"content":"** Cons: May be troublesome for the user"},{"lineNumber":864,"author":{"gitID":"-"},"content":"* **Alternative 2**: Implement a function to add lessons and `Module` class"},{"lineNumber":865,"author":{"gitID":"-"},"content":"** Pros: User need not to manually edit the timetable \u003c\u003cparameter, parameter\u003e\u003e"},{"lineNumber":866,"author":{"gitID":"-"},"content":"** Cons: Hard to implement. Lessons and modules will not have any usage outside `Timetable`"},{"lineNumber":867,"author":{"gitID":"-"},"content":""},{"lineNumber":868,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Testing of Timetable"},{"lineNumber":869,"author":{"gitID":"-"},"content":""},{"lineNumber":870,"author":{"gitID":"-"},"content":"* **Alternative 1** (current choice): Dummy links (which will never be generated by NUSMods) are used,"},{"lineNumber":871,"author":{"gitID":"-"},"content":" Timetable will parse those differently"},{"lineNumber":872,"author":{"gitID":"-"},"content":"** Pros: Allows for easy creation of dummy timetables"},{"lineNumber":873,"author":{"gitID":"-"},"content":"** Cons: Although unlikely, user may be able to enter the dummy link as his own timetable (unintended behaviour)"},{"lineNumber":874,"author":{"gitID":"-"},"content":"* ** Alternative 2**: Changing value to be non-final, settable with a method"},{"lineNumber":875,"author":{"gitID":"-"},"content":"** Pros: Easy to implement"},{"lineNumber":876,"author":{"gitID":"-"},"content":"** Cons: Violates coding conventions, allows possible unauthorized access to Timetable"},{"lineNumber":877,"author":{"gitID":"-"},"content":""},{"lineNumber":878,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Displaying of Timetable in UI"},{"lineNumber":879,"author":{"gitID":"-"},"content":"* **Alternative 1 (Current choice):** Change between the different panels"},{"lineNumber":880,"author":{"gitID":"-"},"content":"** Pros: UI would not be too cluttered."},{"lineNumber":881,"author":{"gitID":"-"},"content":"** Cons: User cannot simultaneously use the different panels."},{"lineNumber":882,"author":{"gitID":"-"},"content":"* **Alternative 2:** Have a dedicated spot in the UI for `TimeTablePanel`"},{"lineNumber":883,"author":{"gitID":"-"},"content":"** Pros: Easy to refer for users."},{"lineNumber":884,"author":{"gitID":"-"},"content":"** Cons: UI would be confusing and cluttered."},{"lineNumber":885,"author":{"gitID":"-"},"content":""},{"lineNumber":886,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Size of Timetable size"},{"lineNumber":887,"author":{"gitID":"-"},"content":"* **Alternative 1 (Current choice):** Automatically resize according to the size of the Application"},{"lineNumber":888,"author":{"gitID":"-"},"content":"** Pros: Size is adaptable to the size of the Application."},{"lineNumber":889,"author":{"gitID":"-"},"content":"** Cons: Variable size may make it confusing for users."},{"lineNumber":890,"author":{"gitID":"-"},"content":"* **Alternative 2:** Fixed Size"},{"lineNumber":891,"author":{"gitID":"-"},"content":"** Pros: Easy and predictable size and location of timings."},{"lineNumber":892,"author":{"gitID":"-"},"content":"** Cons: Since display may different from computer to computer, it would be inflexible to use a one size fit all approach."},{"lineNumber":893,"author":{"gitID":"-"},"content":""},{"lineNumber":894,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Color of Modules in Timetable"},{"lineNumber":895,"author":{"gitID":"-"},"content":"* **Alternative 1 (Current choice):** Automatically randomized based on the `hashcode()` of the module name"},{"lineNumber":896,"author":{"gitID":"-"},"content":"** Pros: Colors are fixed and more or less randomized."},{"lineNumber":897,"author":{"gitID":"-"},"content":"** Cons: Colors may be same for different modules in the same timetable and Colors are not customizable."},{"lineNumber":898,"author":{"gitID":"-"},"content":"* **Alternative 2:** Pre-defined colors for the different modules"},{"lineNumber":899,"author":{"gitID":"-"},"content":"** Pros: No overlap in color and different color for each module"},{"lineNumber":900,"author":{"gitID":"-"},"content":"** Cons: Since there are many different modules in NUS, it would be very time-consuming and almost impossible to be implemented."},{"lineNumber":901,"author":{"gitID":"-"},"content":"* **Alternative 3:** User customize colors"},{"lineNumber":902,"author":{"gitID":"-"},"content":"** Pros: Customized Application for users."},{"lineNumber":903,"author":{"gitID":"-"},"content":"** Cons: Implementation of this system would be complex and time-consuming, it would be implemented in later versions."},{"lineNumber":904,"author":{"gitID":"-"},"content":"Current implementation is the best in terms of variability and ease of implementation."},{"lineNumber":905,"author":{"gitID":"-"},"content":"// end::timetable[]"},{"lineNumber":906,"author":{"gitID":"-"},"content":""},{"lineNumber":907,"author":{"gitID":"-"},"content":"// tag::autocomplete[]"},{"lineNumber":908,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Auto Complete or Correct feature"},{"lineNumber":909,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Proposed Implementation"},{"lineNumber":910,"author":{"gitID":"-"},"content":"Currently, some commands such as `add` and `edit` requires many different fills to be filled in for it to work."},{"lineNumber":911,"author":{"gitID":"-"},"content":"This makes it extremely tedious as users have to remember what fills are there to be included."},{"lineNumber":912,"author":{"gitID":"-"},"content":"Spelling mistakes are also very costly as users would need to retype the command."},{"lineNumber":913,"author":{"gitID":"-"},"content":""},{"lineNumber":914,"author":{"gitID":"-"},"content":"When the user press the `Tab` key, commands ,and \u003c\u003cparameter, parameters\u003e\u003e carets will auto complete or auto correct."},{"lineNumber":915,"author":{"gitID":"-"},"content":"Pressing `Tab` again would give the next suggested input."},{"lineNumber":916,"author":{"gitID":"-"},"content":""},{"lineNumber":917,"author":{"gitID":"-"},"content":"The Auto Correct can be implemented in `CommandBox` as all user inputs can be easily accessed in it."},{"lineNumber":918,"author":{"gitID":"-"},"content":"Editing the text already entered can also be done easily in `CommandBox`."},{"lineNumber":919,"author":{"gitID":"-"},"content":""},{"lineNumber":920,"author":{"gitID":"-"},"content":"Since all commands are in the form of `String`, we can use a `TreeSet` of the current input\u0027s character to find the closest matching command"},{"lineNumber":921,"author":{"gitID":"-"},"content":"and traverse the `TreeSet` to get other suggestions."},{"lineNumber":922,"author":{"gitID":"-"},"content":""},{"lineNumber":923,"author":{"gitID":"-"},"content":"To prevent a situation of the need to differentiate between a auto completion of the next \u003c\u003cparameter, parameter\u003e\u003e or getting the next suggestion of the current command or \u003c\u003cparameter, parameter\u003e\u003e,"},{"lineNumber":924,"author":{"gitID":"-"},"content":"next suggestion is always chosen before a space is entered and auto completion only happen for non-empty strings."},{"lineNumber":925,"author":{"gitID":"-"},"content":""},{"lineNumber":926,"author":{"gitID":"-"},"content":"Suppose that the user wants to type the `encrypt` command, he can press `Tab` to auto complete."},{"lineNumber":927,"author":{"gitID":"-"},"content":""},{"lineNumber":928,"author":{"gitID":"-"},"content":".Auto Completion of Command"},{"lineNumber":929,"author":{"gitID":"-"},"content":"image::commandautocomplete.png[width\u003d\"800\"]"},{"lineNumber":930,"author":{"gitID":"-"},"content":""},{"lineNumber":931,"author":{"gitID":"-"},"content":"If he were to have a spelling error typing `encrytp` instead, the `Tab` key would instead correct it to `encrypt`"},{"lineNumber":932,"author":{"gitID":"-"},"content":""},{"lineNumber":933,"author":{"gitID":"-"},"content":".Auto Correction of Command"},{"lineNumber":934,"author":{"gitID":"-"},"content":"image::commandautocorrect.png[width\u003d\"800\"]"},{"lineNumber":935,"author":{"gitID":"-"},"content":""},{"lineNumber":936,"author":{"gitID":"-"},"content":"Now suppose he is trying to add a friend, once he types `p/123` and press `Tab` after the space, `e/` caret will be auto completed for him."},{"lineNumber":937,"author":{"gitID":"-"},"content":""},{"lineNumber":938,"author":{"gitID":"-"},"content":".Auto Completion of Parameter"},{"lineNumber":939,"author":{"gitID":"-"},"content":"image::parameterautocomplete.png[width\u003d\"800\"]"},{"lineNumber":940,"author":{"gitID":"-"},"content":""},{"lineNumber":941,"author":{"gitID":"-"},"content":""},{"lineNumber":942,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":943,"author":{"gitID":"-"},"content":""},{"lineNumber":944,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: What is done after user presses `Tab` key"},{"lineNumber":945,"author":{"gitID":"-"},"content":"* **Alternative 1 (Suggested):** Automatically completes for the user."},{"lineNumber":946,"author":{"gitID":"-"},"content":"** Pros: Easy and improves efficiency of typing. Familiar for users who uses CLI frequently."},{"lineNumber":947,"author":{"gitID":"-"},"content":"** Cons: Can be confusing as can be auto complete or next suggested input."},{"lineNumber":948,"author":{"gitID":"-"},"content":"* **Alternative 2:** Suggest to user what is expected"},{"lineNumber":949,"author":{"gitID":"-"},"content":"** Pros: Does not change the user\u0027s current input making it less confusing."},{"lineNumber":950,"author":{"gitID":"-"},"content":"** Cons: Does not really improve the user experience by much."},{"lineNumber":951,"author":{"gitID":"-"},"content":""},{"lineNumber":952,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Where to implement it"},{"lineNumber":953,"author":{"gitID":"-"},"content":"* **Alternative 1 (Suggested):** In `CommandBox`."},{"lineNumber":954,"author":{"gitID":"-"},"content":"** Pros: `CommandBox` has access to the text showing what is already keyed in, making it easy to implement there."},{"lineNumber":955,"author":{"gitID":"-"},"content":"** Cons: `CommandBox` has to do an extra task of determining suggested commands and input, increasing coupling as it would need access to the parser or list of commands."},{"lineNumber":956,"author":{"gitID":"-"},"content":"* **Alternative 2:** In `Parser`"},{"lineNumber":957,"author":{"gitID":"-"},"content":"** Pros: Does not increase the coupling of `CommandBox`."},{"lineNumber":958,"author":{"gitID":"-"},"content":"** Cons: Makes changing the current input display a difficult task which may require access to the `CommandBox`."},{"lineNumber":959,"author":{"gitID":"-"},"content":""},{"lineNumber":960,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: What to auto correct or complete"},{"lineNumber":961,"author":{"gitID":"-"},"content":"* **Alternative 1 (Suggested):** Commands and \u003c\u003cparameter, Parameters\u003e\u003e."},{"lineNumber":962,"author":{"gitID":"-"},"content":"** Pros: Makes it easy for users as everything can be auto completed or corrected."},{"lineNumber":963,"author":{"gitID":"-"},"content":"** Cons: Makes it more confusing as sometimes it completes commands while other times it completes the \u003c\u003cparameter, parameters\u003e\u003e."},{"lineNumber":964,"author":{"gitID":"-"},"content":"Also makes the implementation complicated as a clear distinction of Command and \u003c\u003cparameter, Parameters\u003e\u003e have to be made for completion and correction."},{"lineNumber":965,"author":{"gitID":"-"},"content":"* **Alternative 2:** Only Commands or \u003c\u003cparameter, Parameters\u003e\u003e"},{"lineNumber":966,"author":{"gitID":"-"},"content":"** Pros: Easier to understand."},{"lineNumber":967,"author":{"gitID":"-"},"content":"** Cons: Not as efficient for the user."},{"lineNumber":968,"author":{"gitID":"-"},"content":""},{"lineNumber":969,"author":{"gitID":"-"},"content":"// end::autocomplete[]"},{"lineNumber":970,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":971,"author":{"gitID":"-"},"content":""},{"lineNumber":972,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":973,"author":{"gitID":"-"},"content":""},{"lineNumber":974,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":975,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":976,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":977,"author":{"gitID":"-"},"content":""},{"lineNumber":978,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":979,"author":{"gitID":"-"},"content":""},{"lineNumber":980,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":981,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":982,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":983,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":984,"author":{"gitID":"-"},"content":""},{"lineNumber":985,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":986,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":987,"author":{"gitID":"-"},"content":""},{"lineNumber":988,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":989,"author":{"gitID":"-"},"content":""},{"lineNumber":990,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":991,"author":{"gitID":"-"},"content":""},{"lineNumber":992,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":993,"author":{"gitID":"-"},"content":""},{"lineNumber":994,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":995,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":996,"author":{"gitID":"-"},"content":""},{"lineNumber":997,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":998,"author":{"gitID":"-"},"content":""},{"lineNumber":999,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":1000,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":1001,"author":{"gitID":"-"},"content":""},{"lineNumber":1002,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":1003,"author":{"gitID":"-"},"content":""},{"lineNumber":1004,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":1005,"author":{"gitID":"-"},"content":""},{"lineNumber":1006,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":1007,"author":{"gitID":"-"},"content":""},{"lineNumber":1008,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":1009,"author":{"gitID":"-"},"content":""},{"lineNumber":1010,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":1011,"author":{"gitID":"-"},"content":""},{"lineNumber":1012,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":1013,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":1014,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":1015,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":1016,"author":{"gitID":"-"},"content":""},{"lineNumber":1017,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":1018,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":1019,"author":{"gitID":"-"},"content":""},{"lineNumber":1020,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":1021,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":1022,"author":{"gitID":"-"},"content":""},{"lineNumber":1023,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":1024,"author":{"gitID":"-"},"content":""},{"lineNumber":1025,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":1026,"author":{"gitID":"-"},"content":""},{"lineNumber":1027,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1028,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":1029,"author":{"gitID":"-"},"content":""},{"lineNumber":1030,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":1031,"author":{"gitID":"-"},"content":""},{"lineNumber":1032,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":1033,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":1034,"author":{"gitID":"-"},"content":""},{"lineNumber":1035,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":1036,"author":{"gitID":"-"},"content":""},{"lineNumber":1037,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":1038,"author":{"gitID":"-"},"content":""},{"lineNumber":1039,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1040,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":1041,"author":{"gitID":"-"},"content":""},{"lineNumber":1042,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":1043,"author":{"gitID":"-"},"content":""},{"lineNumber":1044,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":1045,"author":{"gitID":"-"},"content":""},{"lineNumber":1046,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":1047,"author":{"gitID":"-"},"content":""},{"lineNumber":1048,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":1049,"author":{"gitID":"-"},"content":""},{"lineNumber":1050,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":1051,"author":{"gitID":"-"},"content":""},{"lineNumber":1052,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":1053,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":1054,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":1055,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":1056,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":1057,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":1058,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":1059,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":1060,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":1061,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":1062,"author":{"gitID":"-"},"content":""},{"lineNumber":1063,"author":{"gitID":"-"},"content":""},{"lineNumber":1064,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":1065,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":1066,"author":{"gitID":"-"},"content":""},{"lineNumber":1067,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":1068,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":1069,"author":{"gitID":"-"},"content":""},{"lineNumber":1070,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":1071,"author":{"gitID":"-"},"content":""},{"lineNumber":1072,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":1073,"author":{"gitID":"-"},"content":""},{"lineNumber":1074,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":1075,"author":{"gitID":"-"},"content":""},{"lineNumber":1076,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":1077,"author":{"gitID":"-"},"content":""},{"lineNumber":1078,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":1079,"author":{"gitID":"-"},"content":""},{"lineNumber":1080,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":1081,"author":{"gitID":"-"},"content":""},{"lineNumber":1082,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":1083,"author":{"gitID":"-"},"content":""},{"lineNumber":1084,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":1085,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":1086,"author":{"gitID":"-"},"content":""},{"lineNumber":1087,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":1088,"author":{"gitID":"-"},"content":""},{"lineNumber":1089,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":1090,"author":{"gitID":"-"},"content":""},{"lineNumber":1091,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":1092,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":1093,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":1094,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":1095,"author":{"gitID":"-"},"content":""},{"lineNumber":1096,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":1097,"author":{"gitID":"-"},"content":""},{"lineNumber":1098,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":1099,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":1100,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":1101,"author":{"gitID":"-"},"content":""},{"lineNumber":1102,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":1103,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1104,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":1105,"author":{"gitID":"-"},"content":""},{"lineNumber":1106,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":1107,"author":{"gitID":"-"},"content":""},{"lineNumber":1108,"author":{"gitID":"-"},"content":"* has a need to manage a significant number of contacts"},{"lineNumber":1109,"author":{"gitID":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":1110,"author":{"gitID":"-"},"content":"* can type fast"},{"lineNumber":1111,"author":{"gitID":"-"},"content":"* prefers typing over mouse input"},{"lineNumber":1112,"author":{"gitID":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":1113,"author":{"gitID":"Caijun7"},"content":"* is a student in National University of Singapore"},{"lineNumber":1114,"author":{"gitID":"Caijun7"},"content":"* has many friends in the same course"},{"lineNumber":1115,"author":{"gitID":"-"},"content":""},{"lineNumber":1116,"author":{"gitID":"Caijun7"},"content":"*Value proposition*: share useful information with their friends who are taking the same modules and find a common studying time"},{"lineNumber":1117,"author":{"gitID":"-"},"content":""},{"lineNumber":1118,"author":{"gitID":"-"},"content":"*Feature Contribution*"},{"lineNumber":1119,"author":{"gitID":"-"},"content":"[width\u003d\"100%\",cols\u003d\"45%,\u003c33%,\u003c33%\",options\u003d\"header\",]"},{"lineNumber":1120,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1121,"author":{"gitID":"-"},"content":"|Name |Minor Enhancement |Major Enhancement"},{"lineNumber":1122,"author":{"gitID":"-"},"content":"|Lee Yong Ler | Adding of `TimeTable` class and into the `Person` class. This allows user to enter their time table into the address book, making it easy for them to know their time table.|Data encryption system to allow the `addressbook.xml` to be encrypted when not in use. A `password` command will also be added for user to key in their own password. This ensure that the privacy of users are respected and information in the address book is confidential. NUS students would be able to store sensitive information like time table without fear of them leaking."},{"lineNumber":1123,"author":{"gitID":"Caijun7"},"content":"|Loh Cai Jun | Implementing Model and Storage component of Vacant study rooms finder feature to help user to find vacant study rooms nearby. | Importing, exporting, and uploading StardyTogether file feature to allow user to transfer selected data to other users, transfer to different computers, store and restore backup of StardyTogether easily."},{"lineNumber":1124,"author":{"gitID":"-"},"content":"|Ong Jing Yin | Implementing the Logic and UI component of the Vacant Room Finder feature. Users can view the vacancy status of all the rooms in the building they have requested for. Implementing the Google Maps Feature to nagivate locations within and outside of NUS easily.|Creating the Customized Alias Feature which allows users to set their own short cuts or intuitive naming for all existing commands to enhance the personalization and user-friendliness of our application."},{"lineNumber":1125,"author":{"gitID":"-"},"content":"|Wayne Neo| In charge of Model and Logic for Timetable. User can enter their timetable and compare their timetables to find common slots for easy \u0027stardying\u0027 together| Birthdays system helps User to keep track of their friend\u0027s birthdays and remind them promptly if its their birthday today"},{"lineNumber":1126,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1127,"author":{"gitID":"-"},"content":""},{"lineNumber":1128,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1129,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":1130,"author":{"gitID":"-"},"content":""},{"lineNumber":1131,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":1132,"author":{"gitID":"-"},"content":""},{"lineNumber":1133,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":1134,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1135,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":1136,"author":{"gitID":"-"},"content":"|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"},{"lineNumber":1137,"author":{"gitID":"-"},"content":""},{"lineNumber":1138,"author":{"gitID":"-"},"content":"|`* * *` |student with friends |search friends who have taken or are taking similar modules |know who I can group with or approach for help"},{"lineNumber":1139,"author":{"gitID":"-"},"content":""},{"lineNumber":1140,"author":{"gitID":"-"},"content":"|`* * *` |student |keep track of my timetable |go to classes punctually"},{"lineNumber":1141,"author":{"gitID":"-"},"content":""},{"lineNumber":1142,"author":{"gitID":"-"},"content":"|`* * *` |student with friends |find my friend’s timetables |find common studying time with them"},{"lineNumber":1143,"author":{"gitID":"-"},"content":""},{"lineNumber":1144,"author":{"gitID":"-"},"content":"|`* * *` |student with friends |list my friends\u0027 birthdays |plan ahead in time for their birthdays"},{"lineNumber":1145,"author":{"gitID":"-"},"content":""},{"lineNumber":1146,"author":{"gitID":"-"},"content":"|`* * *` |student with friends |be notified of birthdays today |wish them happy birthday"},{"lineNumber":1147,"author":{"gitID":"-"},"content":""},{"lineNumber":1148,"author":{"gitID":"Caijun7"},"content":"|`* * *` |student with friends |export contacts taking similar module to another friend |let my friend know who is taking similar modules"},{"lineNumber":1149,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":1150,"author":{"gitID":"-"},"content":"|`* * *` |busy student |have short forms of commands |type more quickly"},{"lineNumber":1151,"author":{"gitID":"-"},"content":""},{"lineNumber":1152,"author":{"gitID":"-"},"content":"|`* * *` |busy student |have my customized short forms of commands |type even quicker and in my own style"},{"lineNumber":1153,"author":{"gitID":"-"},"content":""},{"lineNumber":1154,"author":{"gitID":"-"},"content":"|`* * *` |busy student |be able to remove my customized short forms |reuse keys"},{"lineNumber":1155,"author":{"gitID":"-"},"content":""},{"lineNumber":1156,"author":{"gitID":"-"},"content":"|`* * *` |busy student |be able to view all my customized short forms |refer to them should I forget the short forms I had previously set"},{"lineNumber":1157,"author":{"gitID":"-"},"content":""},{"lineNumber":1158,"author":{"gitID":"-"},"content":"|`* * *` |user |add a new person |"},{"lineNumber":1159,"author":{"gitID":"-"},"content":""},{"lineNumber":1160,"author":{"gitID":"-"},"content":"|`* * *` |user |delete a person |remove entries that I no longer need"},{"lineNumber":1161,"author":{"gitID":"-"},"content":""},{"lineNumber":1162,"author":{"gitID":"-"},"content":"|`* * *` |user |find a person by name |locate details of persons without having to go through the entire list"},{"lineNumber":1163,"author":{"gitID":"-"},"content":""},{"lineNumber":1164,"author":{"gitID":"-"},"content":"|`* * *` |user who is concerned about privacy |have my data encrypted |ensure that no one can access my data without my permission"},{"lineNumber":1165,"author":{"gitID":"-"},"content":""},{"lineNumber":1166,"author":{"gitID":"-"},"content":"|`* * *` |user who is concerned about privacy |change the password used |security is not compromised"},{"lineNumber":1167,"author":{"gitID":"-"},"content":""},{"lineNumber":1168,"author":{"gitID":"-"},"content":"|`* * *` |student who studies in school |be able to find rooms that I can study in |save time finding rooms"},{"lineNumber":1169,"author":{"gitID":"-"},"content":""},{"lineNumber":1170,"author":{"gitID":"-"},"content":"|`* * *` |student who studies in school |be able to know the locations of NUS buildings |save time locating the place"},{"lineNumber":1171,"author":{"gitID":"-"},"content":""},{"lineNumber":1172,"author":{"gitID":"-"},"content":"|`* * *` |student |be able to nagivate locations within and outside of NUS easily |find my way around quickly"},{"lineNumber":1173,"author":{"gitID":"-"},"content":""},{"lineNumber":1174,"author":{"gitID":"-"},"content":"|`* * *`|user| be able to transfer data between computers |  share my data with others and change computers seamlessly"},{"lineNumber":1175,"author":{"gitID":"-"},"content":""},{"lineNumber":1176,"author":{"gitID":"Caijun7"},"content":"|`* * *`|user| be able to upload to Google Drive easily |  store and restore backups and transfer data between computers without the use of hard drive"},{"lineNumber":1177,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":1178,"author":{"gitID":"-"},"content":"|`* * *`|user who is concerned about privacy| be able to transfer encrypted data |share my data in its encrypted form"},{"lineNumber":1179,"author":{"gitID":"-"},"content":""},{"lineNumber":1180,"author":{"gitID":"-"},"content":"|`* * *`|user with many friends| track the birthdays of my friends | not miss a friend\u0027s birthday"},{"lineNumber":1181,"author":{"gitID":"-"},"content":""},{"lineNumber":1182,"author":{"gitID":"-"},"content":"|`* * *`|user with many friends| see all my friend\u0027s birthday in a list | know who\u0027s birthday is upcoming"},{"lineNumber":1183,"author":{"gitID":"-"},"content":""},{"lineNumber":1184,"author":{"gitID":"-"},"content":"|`* *` |user who is lazy |be able to leave my address book unencrypted | read it without opening the application"},{"lineNumber":1185,"author":{"gitID":"-"},"content":""},{"lineNumber":1186,"author":{"gitID":"-"},"content":"|`* *`|power user| be able to auto complete commands| I can use the application faster"},{"lineNumber":1187,"author":{"gitID":"-"},"content":""},{"lineNumber":1188,"author":{"gitID":"-"},"content":"|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"},{"lineNumber":1189,"author":{"gitID":"-"},"content":""},{"lineNumber":1190,"author":{"gitID":"-"},"content":"|`*` |user with many persons in the address book |sort persons by name |locate a person easily"},{"lineNumber":1191,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1192,"author":{"gitID":"-"},"content":""},{"lineNumber":1193,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1194,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1195,"author":{"gitID":"-"},"content":""},{"lineNumber":1196,"author":{"gitID":"Caijun7"},"content":"(For all use cases below, the *System* is the `StardyTogether` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":1197,"author":{"gitID":"-"},"content":""},{"lineNumber":1198,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1199,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Delete person"},{"lineNumber":1200,"author":{"gitID":"-"},"content":""},{"lineNumber":1201,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1202,"author":{"gitID":"-"},"content":""},{"lineNumber":1203,"author":{"gitID":"-"},"content":"1.  User requests to list persons"},{"lineNumber":1204,"author":{"gitID":"Caijun7"},"content":"2.  StardyTogether shows a list of persons"},{"lineNumber":1205,"author":{"gitID":"-"},"content":"3.  User requests to delete a specific person in the list"},{"lineNumber":1206,"author":{"gitID":"Caijun7"},"content":"4.  StardyTogether deletes the person"},{"lineNumber":1207,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1208,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1209,"author":{"gitID":"-"},"content":""},{"lineNumber":1210,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1211,"author":{"gitID":"-"},"content":""},{"lineNumber":1212,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1213,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1214,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1215,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1216,"author":{"gitID":"-"},"content":""},{"lineNumber":1217,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1218,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1219,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1220,"author":{"gitID":"Caijun7"},"content":"** 3a1. StardyTogether shows an error message."},{"lineNumber":1221,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1222,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1223,"author":{"gitID":"-"},"content":""},{"lineNumber":1224,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1225,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Find venue"},{"lineNumber":1226,"author":{"gitID":"-"},"content":""},{"lineNumber":1227,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1228,"author":{"gitID":"-"},"content":""},{"lineNumber":1229,"author":{"gitID":"-"},"content":"1.  User requests to find an available venue"},{"lineNumber":1230,"author":{"gitID":"-"},"content":"2.  StardyTogether prompts user to input a building"},{"lineNumber":1231,"author":{"gitID":"-"},"content":"3.  User requests building name"},{"lineNumber":1232,"author":{"gitID":"-"},"content":"4.  StardyTogether prints out a list of rooms with their vacancy status"},{"lineNumber":1233,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1234,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1235,"author":{"gitID":"-"},"content":""},{"lineNumber":1236,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1237,"author":{"gitID":"-"},"content":""},{"lineNumber":1238,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1239,"author":{"gitID":"-"},"content":"* 2a. No location is available"},{"lineNumber":1240,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1241,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1242,"author":{"gitID":"Caijun7"},"content":"** 2a1. StardyTogether displays the empty result"},{"lineNumber":1243,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1244,"author":{"gitID":"-"},"content":"Use case resumes at step 2"},{"lineNumber":1245,"author":{"gitID":"-"},"content":""},{"lineNumber":1246,"author":{"gitID":"-"},"content":"* 3a. The given location is invalid."},{"lineNumber":1247,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1248,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1249,"author":{"gitID":"-"},"content":"** 3a1. StardyTogether displays an error message."},{"lineNumber":1250,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1251,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1252,"author":{"gitID":"-"},"content":""},{"lineNumber":1253,"author":{"gitID":"Caijun7"},"content":"* 4a. StardyTogether cannot retrieve the information online"},{"lineNumber":1254,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1255,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1256,"author":{"gitID":"-"},"content":"** 4a1. StardyTogether displays an error message"},{"lineNumber":1257,"author":{"gitID":"Caijun7"},"content":"** 4a2. StardyTogether attempts to reconnect"},{"lineNumber":1258,"author":{"gitID":"Caijun7"},"content":"** 4a3. If problem persists, StardyTogether directs User to troubleshooting"},{"lineNumber":1259,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1260,"author":{"gitID":"-"},"content":"Use case ends"},{"lineNumber":1261,"author":{"gitID":"-"},"content":""},{"lineNumber":1262,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1263,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Add alias"},{"lineNumber":1264,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1265,"author":{"gitID":"-"},"content":""},{"lineNumber":1266,"author":{"gitID":"-"},"content":"1.  User requests to create an alias for a command"},{"lineNumber":1267,"author":{"gitID":"-"},"content":"2.  StardyTogether prompts user to input a building"},{"lineNumber":1268,"author":{"gitID":"-"},"content":"3.  User requests command and alias"},{"lineNumber":1269,"author":{"gitID":"-"},"content":"4.  StardyTogether adds the command and alias pairing successfully"},{"lineNumber":1270,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1271,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1272,"author":{"gitID":"-"},"content":""},{"lineNumber":1273,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1274,"author":{"gitID":"-"},"content":""},{"lineNumber":1275,"author":{"gitID":"-"},"content":"* 3a. Incorrect number of arguments specified."},{"lineNumber":1276,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1277,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1278,"author":{"gitID":"-"},"content":"** 3a1. StardyTogether displays an error message."},{"lineNumber":1279,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1280,"author":{"gitID":"-"},"content":"Use case resumes at step 3."},{"lineNumber":1281,"author":{"gitID":"-"},"content":""},{"lineNumber":1282,"author":{"gitID":"-"},"content":"* 4a. Invalid command or alias specified."},{"lineNumber":1283,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1284,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1285,"author":{"gitID":"-"},"content":"** 4a1. StardyTogether displays an error message"},{"lineNumber":1286,"author":{"gitID":"-"},"content":"** 4a2. User re-enters command and alias"},{"lineNumber":1287,"author":{"gitID":"-"},"content":"Steps 4a1-4a2 are repeated until the command and alias entered are valid."},{"lineNumber":1288,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1289,"author":{"gitID":"-"},"content":"Use case ends"},{"lineNumber":1290,"author":{"gitID":"-"},"content":""},{"lineNumber":1291,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1292,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1293,"author":{"gitID":"-"},"content":""},{"lineNumber":1294,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1295,"author":{"gitID":"-"},"content":".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1296,"author":{"gitID":"-"},"content":".  Should have internet connection."},{"lineNumber":1297,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1298,"author":{"gitID":"-"},"content":".  Address book must be able to be picked up with 2 hours of usage."},{"lineNumber":1299,"author":{"gitID":"-"},"content":".  Color Scheme must be pleasing to the eyes."},{"lineNumber":1300,"author":{"gitID":"-"},"content":".  User guide must be clear and concise."},{"lineNumber":1301,"author":{"gitID":"-"},"content":".  Basic features must be intuitive to use."},{"lineNumber":1302,"author":{"gitID":"Caijun7"},"content":".  Should respond to user within 3 seconds."},{"lineNumber":1303,"author":{"gitID":"Caijun7"},"content":".  Should work in both 32-bit and 64-bit environments."},{"lineNumber":1304,"author":{"gitID":"Caijun7"},"content":".  Should be usable by a new user who has not used command line interface before."},{"lineNumber":1305,"author":{"gitID":"-"},"content":""},{"lineNumber":1306,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1307,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1308,"author":{"gitID":"-"},"content":""},{"lineNumber":1309,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1310,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1311,"author":{"gitID":"-"},"content":""},{"lineNumber":1312,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":1313,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":1314,"author":{"gitID":"-"},"content":""},{"lineNumber":1315,"author":{"gitID":"-"},"content":"[[parameter]] Parameter::"},{"lineNumber":1316,"author":{"gitID":"-"},"content":"Argument or Information passed to commands for details."},{"lineNumber":1317,"author":{"gitID":"-"},"content":""},{"lineNumber":1318,"author":{"gitID":"-"},"content":"[[second-pre-image-attack]] Second Pre-Image attack::"},{"lineNumber":1319,"author":{"gitID":"-"},"content":"An attack to get the same hash using the same or different String"},{"lineNumber":1320,"author":{"gitID":"-"},"content":""},{"lineNumber":1321,"author":{"gitID":"-"},"content":""},{"lineNumber":1322,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1323,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1324,"author":{"gitID":"-"},"content":""},{"lineNumber":1325,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1326,"author":{"gitID":"-"},"content":""},{"lineNumber":1327,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1328,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1329,"author":{"gitID":"-"},"content":""},{"lineNumber":1330,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1331,"author":{"gitID":"-"},"content":""},{"lineNumber":1332,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1333,"author":{"gitID":"-"},"content":""},{"lineNumber":1334,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1335,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1336,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1337,"author":{"gitID":"-"},"content":""},{"lineNumber":1338,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1339,"author":{"gitID":"-"},"content":""},{"lineNumber":1340,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1341,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1342,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1343,"author":{"gitID":"-"},"content":""},{"lineNumber":1344,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a person"},{"lineNumber":1345,"author":{"gitID":"-"},"content":""},{"lineNumber":1346,"author":{"gitID":"-"},"content":". Adding a person with the new parameters Birthday and Timetable"},{"lineNumber":1347,"author":{"gitID":"-"},"content":""},{"lineNumber":1348,"author":{"gitID":"-"},"content":".. Prerequisites: Valid NUSMods link"},{"lineNumber":1349,"author":{"gitID":"-"},"content":".. Test case: `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 b/01011995 tt/http://modsn.us/oNZLY` +"},{"lineNumber":1350,"author":{"gitID":"-"},"content":".. Expected: Successfully added"},{"lineNumber":1351,"author":{"gitID":"-"},"content":".. Test case: `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 b/01011995 tt/http://modsn.us/ojGeu` +"},{"lineNumber":1352,"author":{"gitID":"-"},"content":".. Expected: Not added. As timetable is not considered unique"},{"lineNumber":1353,"author":{"gitID":"-"},"content":".. Test case: `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 b/01011995 tt/`"},{"lineNumber":1354,"author":{"gitID":"-"},"content":".. Expected: Successfully added with a empty timetable"},{"lineNumber":1355,"author":{"gitID":"-"},"content":".. Test case: `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 b/32011995 tt/`"},{"lineNumber":1356,"author":{"gitID":"-"},"content":".. Expected: Not added. Invalid birthday day."},{"lineNumber":1357,"author":{"gitID":"-"},"content":""},{"lineNumber":1358,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person"},{"lineNumber":1359,"author":{"gitID":"-"},"content":""},{"lineNumber":1360,"author":{"gitID":"-"},"content":". Deleting a person while all persons are listed"},{"lineNumber":1361,"author":{"gitID":"-"},"content":""},{"lineNumber":1362,"author":{"gitID":"-"},"content":".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":1363,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1364,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1365,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1366,"author":{"gitID":"-"},"content":"   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1367,"author":{"gitID":"Caijun7"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) +"},{"lineNumber":1368,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1369,"author":{"gitID":"-"},"content":""},{"lineNumber":1370,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1371,"author":{"gitID":"-"},"content":""},{"lineNumber":1372,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1373,"author":{"gitID":"-"},"content":""},{"lineNumber":1374,"author":{"gitID":"-"},"content":".. Test case: Delete `addressbook.xml` +"},{"lineNumber":1375,"author":{"gitID":"-"},"content":"   Expected: Application opens with an address book with dummy data."},{"lineNumber":1376,"author":{"gitID":"-"},"content":".. Test case: Corrupt `addressbook.xml` by editing it +"},{"lineNumber":1377,"author":{"gitID":"Caijun7"},"content":"   Expected: Application opens with an address book with empty data."},{"lineNumber":1378,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":1379,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Birthdays function"},{"lineNumber":1380,"author":{"gitID":"-"},"content":""},{"lineNumber":1381,"author":{"gitID":"-"},"content":". Using the `birthdays` and `birthdays today` function"},{"lineNumber":1382,"author":{"gitID":"-"},"content":""},{"lineNumber":1383,"author":{"gitID":"-"},"content":".. Prerequisites: Multiple persons in ST"},{"lineNumber":1384,"author":{"gitID":"-"},"content":".. Test case: `birthdays` +"},{"lineNumber":1385,"author":{"gitID":"-"},"content":".. Expected: Birthday list appears at the main window, containing the birthdays of your persons ordered by day and month"},{"lineNumber":1386,"author":{"gitID":"-"},"content":".. Prerequisites: Sufficiently large amount of persons in ST to exceed the window size of ST"},{"lineNumber":1387,"author":{"gitID":"-"},"content":".. Test case: `birthdays` +"},{"lineNumber":1388,"author":{"gitID":"-"},"content":".. Expected: Birthday list is scrollable, showing the full birthday list"},{"lineNumber":1389,"author":{"gitID":"-"},"content":".. Prerequisites: Empty ST"},{"lineNumber":1390,"author":{"gitID":"-"},"content":".. Test case: `birthdays` +"},{"lineNumber":1391,"author":{"gitID":"-"},"content":".. Expected: Empty white list"},{"lineNumber":1392,"author":{"gitID":"-"},"content":".. Prerequisites: One person with a birthday today"},{"lineNumber":1393,"author":{"gitID":"-"},"content":".. Test case: `birthdays today` +"},{"lineNumber":1394,"author":{"gitID":"-"},"content":".. Expected: Only that person appears in the notification window"},{"lineNumber":1395,"author":{"gitID":"-"},"content":".. Prerequisites: Zero persons with birthdays today"},{"lineNumber":1396,"author":{"gitID":"-"},"content":".. Test case: `birthdays today` +"},{"lineNumber":1397,"author":{"gitID":"-"},"content":".. Expected: The notification window shows \"No one is celebrating their birthdays today\""},{"lineNumber":1398,"author":{"gitID":"-"},"content":""},{"lineNumber":1399,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d TimetableUnion function"},{"lineNumber":1400,"author":{"gitID":"-"},"content":""},{"lineNumber":1401,"author":{"gitID":"-"},"content":". Using the `timetableUnion` function when all persons are listed."},{"lineNumber":1402,"author":{"gitID":"-"},"content":""},{"lineNumber":1403,"author":{"gitID":"-"},"content":".. Prerequisites: List all persons using the `list` command. Multiple persons in the list. Indexes are valid"},{"lineNumber":1404,"author":{"gitID":"-"},"content":".. Test case: `union Odd 1 2` +"},{"lineNumber":1405,"author":{"gitID":"-"},"content":".. Expected: The union of the odd timetables of Person at Index 1 and 2 appears at the main window"},{"lineNumber":1406,"author":{"gitID":"-"},"content":".. Test case: `union Odd 1 2 4` +"},{"lineNumber":1407,"author":{"gitID":"-"},"content":".. Expected: The union of the odd timetables of Person at Index 1, 2 and 4 appears at the main window"},{"lineNumber":1408,"author":{"gitID":"-"},"content":".. Test case: `union Odd 0 2 4` +"},{"lineNumber":1409,"author":{"gitID":"-"},"content":".. Expected: Invalid index. Error details will be shown in the result display"},{"lineNumber":1410,"author":{"gitID":"-"},"content":".. Test case: `union Odd 1 2     4` +"},{"lineNumber":1411,"author":{"gitID":"-"},"content":".. Expected: Too many whitespaces between indexes. Error details will be shown in the result display"},{"lineNumber":1412,"author":{"gitID":"-"},"content":""},{"lineNumber":1413,"author":{"gitID":"Caijun7"},"content":"\u003d\u003d\u003d Importing a file"},{"lineNumber":1414,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":1415,"author":{"gitID":"Caijun7"},"content":". Importing a file from filepath"},{"lineNumber":1416,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":1417,"author":{"gitID":"Caijun7"},"content":".. Prerequisites: a valid filepath with valid format"},{"lineNumber":1418,"author":{"gitID":"Caijun7"},"content":".. Test case: `import VALID_FILE_PATH` +"},{"lineNumber":1419,"author":{"gitID":"Caijun7"},"content":"   Expected: All students, tags, and aliases from the imported file are added to StardyTogether."},{"lineNumber":1420,"author":{"gitID":"Caijun7"},"content":".. Test case: `undo` +"},{"lineNumber":1421,"author":{"gitID":"Caijun7"},"content":"   Expected: undo the changes."},{"lineNumber":1422,"author":{"gitID":"Caijun7"},"content":".. Test case: `import INVALID_FILE_PATH` +"},{"lineNumber":1423,"author":{"gitID":"Caijun7"},"content":"   Expected: Invalid filepath error message will be shown"},{"lineNumber":1424,"author":{"gitID":"Caijun7"},"content":".. Other incorrect import commands to try: `import`, `import filepath wrongPassword` (where wrongPassword is wrong), `import INVALID_FILE_FORMAT` (where file is in invalid format) +"},{"lineNumber":1425,"author":{"gitID":"Caijun7"},"content":"   Expected: Invalid command error message will be shown"},{"lineNumber":1426,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":1427,"author":{"gitID":"Caijun7"},"content":"\u003d\u003d\u003d Exporting a file"},{"lineNumber":1428,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":1429,"author":{"gitID":"Caijun7"},"content":". Exporting a file to filepath"},{"lineNumber":1430,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":1431,"author":{"gitID":"Caijun7"},"content":".. Prerequisites: a valid filepath"},{"lineNumber":1432,"author":{"gitID":"Caijun7"},"content":".. Test case: `list` then `export VALID_FILE_PATH` +"},{"lineNumber":1433,"author":{"gitID":"Caijun7"},"content":"   Expected: All persons, tags, and alias from StardyTogether are exported to filepath."},{"lineNumber":1434,"author":{"gitID":"Caijun7"},"content":".. Test case: `find alex` then `export VALID_FILE_PATH` +"},{"lineNumber":1435,"author":{"gitID":"Caijun7"},"content":"   Expected: All persons with `Alex` in his/her name, tags, and aliases from StardyTogether are exported to filepath."},{"lineNumber":1436,"author":{"gitID":"Caijun7"},"content":".. Test case: `find nonExistentName` then `upload VALID_FILE_PATH` +"},{"lineNumber":1437,"author":{"gitID":"Caijun7"},"content":"   Expected: All tags, and aliases from StardyTogether are exported to filepath. No persons are exported."},{"lineNumber":1438,"author":{"gitID":"Caijun7"},"content":".. Test case: `export INVALID_FILE_PATH` +"},{"lineNumber":1439,"author":{"gitID":"Caijun7"},"content":"   Expected: error message will be shown"},{"lineNumber":1440,"author":{"gitID":"Caijun7"},"content":".. Other incorrect export commands to try: `export`, `export filepath password  ` (notice the spaces) +"},{"lineNumber":1441,"author":{"gitID":"Caijun7"},"content":"   Expected: Invalid command error message will be shown"},{"lineNumber":1442,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":1443,"author":{"gitID":"Caijun7"},"content":"\u003d\u003d\u003d Uploading a file"},{"lineNumber":1444,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":1445,"author":{"gitID":"Caijun7"},"content":". Uploading a file to Google Drive"},{"lineNumber":1446,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":1447,"author":{"gitID":"Caijun7"},"content":".. Prerequisites: user granted StardyTogether access to Google Drive"},{"lineNumber":1448,"author":{"gitID":"Caijun7"},"content":".. Test case: `list` then `upload VALID_FILE_NAME` +"},{"lineNumber":1449,"author":{"gitID":"Caijun7"},"content":"   Expected: All persons, tags, and alias from StardyTogether are uploaded to Google Drive."},{"lineNumber":1450,"author":{"gitID":"Caijun7"},"content":".. Test case: `find alex` then `upload VALID_FILE_NAME` +"},{"lineNumber":1451,"author":{"gitID":"Caijun7"},"content":"   Expected: All persons with `Alex` in his/her name, tags, and aliases from StardyTogether are uploaded to Google Drive."},{"lineNumber":1452,"author":{"gitID":"Caijun7"},"content":".. Test case: `find nonExistentName` then `upload VALID_FILE_NAME` +"},{"lineNumber":1453,"author":{"gitID":"Caijun7"},"content":"   Expected: All tags, and aliases from StardyTogether are uploaded to Google Drive. No persons are uploaded."},{"lineNumber":1454,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":1455,"author":{"gitID":"Caijun7"},"content":".. Prerequisites: user does not grant StardyTogether access to Google Drive"},{"lineNumber":1456,"author":{"gitID":"Caijun7"},"content":".. Test case: `upload VALID_FILE_NAME` +"},{"lineNumber":1457,"author":{"gitID":"Caijun7"},"content":"   Expected: No authorization error message will be shown"},{"lineNumber":1458,"author":{"gitID":"Caijun7"},"content":".. Prerequisites: user does not respond to authorization request"},{"lineNumber":1459,"author":{"gitID":"Caijun7"},"content":".. Test case: `upload VALID_FILE_NAME` +"},{"lineNumber":1460,"author":{"gitID":"Caijun7"},"content":"   Expected: Authorization request timed out error message will be shown"},{"lineNumber":1461,"author":{"gitID":"Caijun7"},"content":".. Other incorrect upload commands to try: `upload`, `upload filename   password  ` (notice the spaces) +"},{"lineNumber":1462,"author":{"gitID":"Caijun7"},"content":"   Expected: Invalid command error message will be shown"},{"lineNumber":1463,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":1464,"author":{"gitID":"Caijun7"},"content":"\u003d\u003d\u003d Finding vacant rooms"},{"lineNumber":1465,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":1466,"author":{"gitID":"Caijun7"},"content":". Finding vacant rooms"},{"lineNumber":1467,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":1468,"author":{"gitID":"Caijun7"},"content":".. Test case: `vacant COM1` +"},{"lineNumber":1469,"author":{"gitID":"Caijun7"},"content":"   Expected: All rooms schedule of COM1 are displayed on UI."},{"lineNumber":1470,"author":{"gitID":"Caijun7"},"content":".. Test case: `vacant nonExistentBuilding` +"},{"lineNumber":1471,"author":{"gitID":"Caijun7"},"content":"   Expected: Building not found, list of buildings are displayed on UI."},{"lineNumber":1472,"author":{"gitID":"Caijun7"},"content":".. Other incorrect vacant commands to try: `vacant`, `vacant COM1 COM2` +"},{"lineNumber":1473,"author":{"gitID":"Caijun7"},"content":"   Expected: Invalid command error message will be shown"},{"lineNumber":1474,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":1475,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Encrypting and Decrypting"},{"lineNumber":1476,"author":{"gitID":"-"},"content":""},{"lineNumber":1477,"author":{"gitID":"-"},"content":". Encrypting data"},{"lineNumber":1478,"author":{"gitID":"-"},"content":""},{"lineNumber":1479,"author":{"gitID":"-"},"content":".. Test case: Set password using `encrypt` command +"},{"lineNumber":1480,"author":{"gitID":"-"},"content":"   Expected: `addressbook.xml` is no longer in plaintext. +"},{"lineNumber":1481,"author":{"gitID":"-"},"content":".. Test case: Set password using `encrypt` command and reopen StardyTogether +"},{"lineNumber":1482,"author":{"gitID":"-"},"content":"   Expected: Application prompt you to input password, opens with correct password keyed in and"},{"lineNumber":1483,"author":{"gitID":"-"},"content":"   error dialog with incorrect password."},{"lineNumber":1484,"author":{"gitID":"-"},"content":""},{"lineNumber":1485,"author":{"gitID":"-"},"content":". Decrypting data"},{"lineNumber":1486,"author":{"gitID":"-"},"content":""},{"lineNumber":1487,"author":{"gitID":"-"},"content":".. Test case: Set password using `encrypt` command, then decrypt using `decrypt` command and reopen StardyTogether+"},{"lineNumber":1488,"author":{"gitID":"-"},"content":"   Expected: Application opens with all data."},{"lineNumber":1489,"author":{"gitID":"-"},"content":""},{"lineNumber":1490,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Selecting a person"},{"lineNumber":1491,"author":{"gitID":"-"},"content":""},{"lineNumber":1492,"author":{"gitID":"-"},"content":". Selecting person"},{"lineNumber":1493,"author":{"gitID":"-"},"content":""},{"lineNumber":1494,"author":{"gitID":"-"},"content":".. Prerequisites: Add a new person."},{"lineNumber":1495,"author":{"gitID":"-"},"content":".. Test case: Click on the person +"},{"lineNumber":1496,"author":{"gitID":"-"},"content":"   Expected: Card with Details of the person shows up with his/her even week Timetable"},{"lineNumber":1497,"author":{"gitID":"-"},"content":".. Test case: `select INDEX even` where `INDEX` is the index of the person in the list+"},{"lineNumber":1498,"author":{"gitID":"-"},"content":"   Expected: Card with Details of the person shows up with his/her even week Timetable"},{"lineNumber":1499,"author":{"gitID":"-"},"content":".. Test case: `select INDEX odd` where `INDEX` is the index of the person in the list+"},{"lineNumber":1500,"author":{"gitID":"-"},"content":"   Expected: Card with Details of the person shows up with his/her odd week Timetable"},{"lineNumber":1501,"author":{"gitID":"-"},"content":""},{"lineNumber":1502,"author":{"gitID":"Caijun7"},"content":"\u003d\u003d\u003d Adding an alias"},{"lineNumber":1503,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":1504,"author":{"gitID":"Caijun7"},"content":". Adding an alias to valid command"},{"lineNumber":1505,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":1506,"author":{"gitID":"Caijun7"},"content":".. Test case: `alias add a` +"},{"lineNumber":1507,"author":{"gitID":"Caijun7"},"content":"   Expected: Entering `list` would display `a` under `add` column."},{"lineNumber":1508,"author":{"gitID":"Caijun7"},"content":".. Test case: `undo` +"},{"lineNumber":1509,"author":{"gitID":"Caijun7"},"content":"   Expected: Entering `list` would display `a` removed from `add` column."},{"lineNumber":1510,"author":{"gitID":"Caijun7"},"content":".. Other incorrect alias commands to try: `alias`, `alias *`, `alias abc`, `alias add! abc`, `alias wrong w` +"},{"lineNumber":1511,"author":{"gitID":"Caijun7"},"content":"   Expected: Displays error messages"},{"lineNumber":1512,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":1513,"author":{"gitID":"Caijun7"},"content":"\u003d\u003d\u003d Removing an alias"},{"lineNumber":1514,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":1515,"author":{"gitID":"Caijun7"},"content":". Removing an existing alias"},{"lineNumber":1516,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":1517,"author":{"gitID":"Caijun7"},"content":".. Prerequisites: Add an alias with alias name a, `alias add a`."},{"lineNumber":1518,"author":{"gitID":"Caijun7"},"content":".. Test case: `unalias a` +"},{"lineNumber":1519,"author":{"gitID":"Caijun7"},"content":"   Expected: Entering `list` would display `a` removed from `add` column."},{"lineNumber":1520,"author":{"gitID":"Caijun7"},"content":".. Other incorrect unalias commands to try: `unalias`, `unalias *`, `unalias abc`, `unalias abc abc` +"},{"lineNumber":1521,"author":{"gitID":"Caijun7"},"content":"   Expected: Displays error messages"},{"lineNumber":1522,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":1523,"author":{"gitID":"Caijun7"},"content":"\u003d\u003d\u003d Locating places on Google Maps"},{"lineNumber":1524,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":1525,"author":{"gitID":"Caijun7"},"content":". Locating a place or finding directions from one place to another"},{"lineNumber":1526,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":1527,"author":{"gitID":"Caijun7"},"content":".. Test case: `map COM1` +"},{"lineNumber":1528,"author":{"gitID":"Caijun7"},"content":"   Expected: Displays the location of NUS COM1 on Google Maps."},{"lineNumber":1529,"author":{"gitID":"Caijun7"},"content":".. Test case: `map Tampines Mall/COM2` +"},{"lineNumber":1530,"author":{"gitID":"Caijun7"},"content":"   Expected: Shows the directions from Tampines Mall to COM2 on Google Maps."},{"lineNumber":1531,"author":{"gitID":"Caijun7"},"content":".. Other incorrect map commands to try: `map` +"},{"lineNumber":1532,"author":{"gitID":"Caijun7"},"content":"   Expected: Displays error messages"}],"authorContributionMap":{"Caijun7":248,"-":1284}},{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalOddEven.EVEN;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import guitests.guihandles.AliasListHandle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import guitests.guihandles.BirthdayListHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import guitests.guihandles.GoogleMapsDisplayHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.ui.GoogleMapsDisplay;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.GuiTestAssert;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":50,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":51,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":52,"author":{"gitID":"-"},"content":" */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return TypicalPersons.getTypicalAddressBook();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public BirthdayListHandle getBirthdayList() {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getBirthdayList();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"jingyinno"},"content":"    //@@author jingyinno"},{"lineNumber":128,"author":{"gitID":"jingyinno"},"content":"    public GoogleMapsDisplayHandle getGoogleMapsDisplay() {"},{"lineNumber":129,"author":{"gitID":"jingyinno"},"content":"        return mainWindowHandle.getMapPanel();"},{"lineNumber":130,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":132,"author":{"gitID":"jingyinno"},"content":"    public AliasListHandle getAliasList() {"},{"lineNumber":133,"author":{"gitID":"jingyinno"},"content":"        return mainWindowHandle.getAliasList();"},{"lineNumber":134,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":136,"author":{"gitID":"jingyinno"},"content":"    //@@author"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":146,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getGoogleMapsDisplay());"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":155,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":163,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":170,"author":{"gitID":"-"},"content":"     * Selects the person at {@code index} of the displayed list."},{"lineNumber":171,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + EVEN);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * Deletes all persons and aliases in the address book."},{"lineNumber":179,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    protected void deleteAllPersonsAndAliases() {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertEquals(0, getModel().getAddressBook().getPersonList().size());"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":189,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":191,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"jingyinno"},"content":"    //@@author jingyinno"},{"lineNumber":200,"author":{"gitID":"jingyinno"},"content":"    protected void assertTableDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":201,"author":{"gitID":"jingyinno"},"content":"                                               Alias[][] table) {"},{"lineNumber":202,"author":{"gitID":"jingyinno"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":203,"author":{"gitID":"jingyinno"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":204,"author":{"gitID":"jingyinno"},"content":"        GuiTestAssert.assertTableContent(getAliasList().getTables(), table);"},{"lineNumber":205,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":207,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":208,"author":{"gitID":"jingyinno"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"},{"lineNumber":209,"author":{"gitID":"jingyinno"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":210,"author":{"gitID":"jingyinno"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":211,"author":{"gitID":"jingyinno"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":212,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":213,"author":{"gitID":"jingyinno"},"content":"    protected void assertMapDisplayChanged(boolean isOneLocation, String query) {"},{"lineNumber":214,"author":{"gitID":"jingyinno"},"content":"        URL expectedUrl;"},{"lineNumber":215,"author":{"gitID":"jingyinno"},"content":"        try {"},{"lineNumber":216,"author":{"gitID":"jingyinno"},"content":"            if (isOneLocation) {"},{"lineNumber":217,"author":{"gitID":"jingyinno"},"content":"                expectedUrl \u003d new URL(GoogleMapsDisplay.MAP_SEARCH_URL_PREFIX + query);"},{"lineNumber":218,"author":{"gitID":"jingyinno"},"content":"            } else {"},{"lineNumber":219,"author":{"gitID":"jingyinno"},"content":"                expectedUrl \u003d new URL(GoogleMapsDisplay.MAP_DIRECTIONS_URL_PREFIX + query);"},{"lineNumber":220,"author":{"gitID":"jingyinno"},"content":"            }"},{"lineNumber":221,"author":{"gitID":"jingyinno"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":222,"author":{"gitID":"jingyinno"},"content":"            throw new AssertionError(\"URL expected to be valid.\");"},{"lineNumber":223,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":224,"author":{"gitID":"jingyinno"},"content":"        assertEquals(expectedUrl, getGoogleMapsDisplay().getLoadedUrl());"},{"lineNumber":225,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":227,"author":{"gitID":"jingyinno"},"content":"    //@@author"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":232,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        getGoogleMapsDisplay().rememberUrl();"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * of the previously selected person."},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":253,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":254,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."},{"lineNumber":262,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":267,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":270,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":271,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":272,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":277,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":278,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":279,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":281,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":284,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":285,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":286,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":288,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":289,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":290,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":291,"author":{"gitID":"-"},"content":""},{"lineNumber":292,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":293,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":294,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":295,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":296,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":297,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":298,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":299,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":300,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":301,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":302,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":305,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":306,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":307,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":308,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":309,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":310,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":311,"author":{"gitID":"-"},"content":"            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":312,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":313,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":314,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":315,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":316,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":317,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":320,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":321,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":322,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":323,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":324,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":325,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jingyinno":39,"-":286}},{"path":"src/test/java/systemtests/TimetableUnionCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.TimetableUnionCommand.MESSAGE_SELECT_PERSON_SUCCESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.TimetableUnionCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"AzuraAiR"},"content":"//@@author AzuraAiR"},{"lineNumber":15,"author":{"gitID":"AzuraAiR"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"AzuraAiR"},"content":" * A system test class for the TimetableUnion table view, which contains interaction with other UI components."},{"lineNumber":17,"author":{"gitID":"AzuraAiR"},"content":" */"},{"lineNumber":18,"author":{"gitID":"AzuraAiR"},"content":"public class TimetableUnionCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":19,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":20,"author":{"gitID":"AzuraAiR"},"content":"    private static final String ODD_IDENTIFIER \u003d \"Odd\";"},{"lineNumber":21,"author":{"gitID":"AzuraAiR"},"content":"    private static final String EVEN_IDENTIFIER \u003d \"Even\";"},{"lineNumber":22,"author":{"gitID":"AzuraAiR"},"content":"    private static final String[] TYPICAL_PERSONS_NAME_STUB \u003d"},{"lineNumber":23,"author":{"gitID":"AzuraAiR"},"content":"        {\"Alice Pauline\", \"Benson Meier\", \"Carl Kurz\", \"Daniel Meier\", \"Elle Meyer\", \"Fiona Kunz\", \"George Best\"};"},{"lineNumber":24,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":25,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"AzuraAiR"},"content":"    public void timetableUnion() {"},{"lineNumber":27,"author":{"gitID":"AzuraAiR"},"content":"        /* ----------------------------------- Perform valid vacant operations  ----------------------------------- */"},{"lineNumber":28,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":29,"author":{"gitID":"AzuraAiR"},"content":"        /* Case: union odd timetables of person of index 1 and 2 -\u003e success*/"},{"lineNumber":30,"author":{"gitID":"AzuraAiR"},"content":"        String command \u003d TimetableUnionCommand.COMMAND_WORD + \" Odd\" + \" 1 2\";"},{"lineNumber":31,"author":{"gitID":"AzuraAiR"},"content":"        assertCommandSuccess(command, ODD_IDENTIFIER, buildPersonResultStub(2));"},{"lineNumber":32,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":33,"author":{"gitID":"AzuraAiR"},"content":"        /* Case: union odd timetables of person of index 1-7 -\u003e success*/"},{"lineNumber":34,"author":{"gitID":"AzuraAiR"},"content":"        command \u003d TimetableUnionCommand.COMMAND_WORD + \" Odd\" + \" 1 2 3 4 5 6 7\";"},{"lineNumber":35,"author":{"gitID":"AzuraAiR"},"content":"        assertCommandSuccess(command, ODD_IDENTIFIER, buildPersonResultStub(7));"},{"lineNumber":36,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":37,"author":{"gitID":"AzuraAiR"},"content":"        /* Case: union even timetables of person of index 1 and 2 -\u003e success*/"},{"lineNumber":38,"author":{"gitID":"AzuraAiR"},"content":"        command \u003d TimetableUnionCommand.COMMAND_WORD + \" Even\" + \" 1 2\";"},{"lineNumber":39,"author":{"gitID":"AzuraAiR"},"content":"        assertCommandSuccess(command, EVEN_IDENTIFIER, buildPersonResultStub(2));"},{"lineNumber":40,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":41,"author":{"gitID":"AzuraAiR"},"content":"        /* Case: union odd timetables of person of index 1-7 -\u003e success*/"},{"lineNumber":42,"author":{"gitID":"AzuraAiR"},"content":"        command \u003d TimetableUnionCommand.COMMAND_WORD + \" Even\" + \" 1 2 3 4 5 6 7\";"},{"lineNumber":43,"author":{"gitID":"AzuraAiR"},"content":"        assertCommandSuccess(command, EVEN_IDENTIFIER, buildPersonResultStub(7));"},{"lineNumber":44,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":45,"author":{"gitID":"AzuraAiR"},"content":"        /* Case: undo previous command -\u003e rejected */"},{"lineNumber":46,"author":{"gitID":"AzuraAiR"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":47,"author":{"gitID":"AzuraAiR"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":48,"author":{"gitID":"AzuraAiR"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":49,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":50,"author":{"gitID":"AzuraAiR"},"content":"        /* Case: redo previous command -\u003e rejected */"},{"lineNumber":51,"author":{"gitID":"AzuraAiR"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":52,"author":{"gitID":"AzuraAiR"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":53,"author":{"gitID":"AzuraAiR"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":54,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":55,"author":{"gitID":"AzuraAiR"},"content":"        /* ----------------------------------- Perform invalid vacant operations ----------------------------------- */"},{"lineNumber":56,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":57,"author":{"gitID":"AzuraAiR"},"content":"        /* Case: Invalid index -\u003e failure*/"},{"lineNumber":58,"author":{"gitID":"AzuraAiR"},"content":"        command \u003d TimetableUnionCommand.COMMAND_WORD + \" Odd\" + \" 1 8\";"},{"lineNumber":59,"author":{"gitID":"AzuraAiR"},"content":"        assertCommandFailure(command, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":60,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":61,"author":{"gitID":"AzuraAiR"},"content":"        /* Case: Invalid additional parameter -\u003e failure*/"},{"lineNumber":62,"author":{"gitID":"AzuraAiR"},"content":"        command \u003d TimetableUnionCommand.COMMAND_WORD + \" Every\" + \" 1 2\";"},{"lineNumber":63,"author":{"gitID":"AzuraAiR"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, \"\")"},{"lineNumber":64,"author":{"gitID":"AzuraAiR"},"content":"                + TimetableUnionCommand.MESSAGE_USAGE);"},{"lineNumber":65,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":66,"author":{"gitID":"AzuraAiR"},"content":"        /* Case: Too manu spaces -\u003e failure*/"},{"lineNumber":67,"author":{"gitID":"AzuraAiR"},"content":"        command \u003d TimetableUnionCommand.COMMAND_WORD + \" Odd\" + \" 1 2     3\";"},{"lineNumber":68,"author":{"gitID":"AzuraAiR"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, \"\")"},{"lineNumber":69,"author":{"gitID":"AzuraAiR"},"content":"                + TimetableUnionCommand.MESSAGE_USAGE);"},{"lineNumber":70,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":72,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"AzuraAiR"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":74,"author":{"gitID":"AzuraAiR"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":75,"author":{"gitID":"AzuraAiR"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":76,"author":{"gitID":"AzuraAiR"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":77,"author":{"gitID":"AzuraAiR"},"content":"     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"},{"lineNumber":78,"author":{"gitID":"AzuraAiR"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":79,"author":{"gitID":"AzuraAiR"},"content":"     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"},{"lineNumber":80,"author":{"gitID":"AzuraAiR"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":81,"author":{"gitID":"AzuraAiR"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":82,"author":{"gitID":"AzuraAiR"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":83,"author":{"gitID":"AzuraAiR"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":84,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"AzuraAiR"},"content":"    private void assertCommandSuccess(String command, String oddEven, String persons) {"},{"lineNumber":86,"author":{"gitID":"AzuraAiR"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":87,"author":{"gitID":"AzuraAiR"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_SELECT_PERSON_SUCCESS, oddEven, persons);"},{"lineNumber":88,"author":{"gitID":"AzuraAiR"},"content":"        executeCommand(command);"},{"lineNumber":89,"author":{"gitID":"AzuraAiR"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":90,"author":{"gitID":"AzuraAiR"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":91,"author":{"gitID":"AzuraAiR"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":92,"author":{"gitID":"AzuraAiR"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":93,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":95,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"AzuraAiR"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":97,"author":{"gitID":"AzuraAiR"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":98,"author":{"gitID":"AzuraAiR"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":99,"author":{"gitID":"AzuraAiR"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":100,"author":{"gitID":"AzuraAiR"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":101,"author":{"gitID":"AzuraAiR"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":102,"author":{"gitID":"AzuraAiR"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":103,"author":{"gitID":"AzuraAiR"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"AzuraAiR"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":105,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"AzuraAiR"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":107,"author":{"gitID":"AzuraAiR"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":108,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":109,"author":{"gitID":"AzuraAiR"},"content":"        executeCommand(command);"},{"lineNumber":110,"author":{"gitID":"AzuraAiR"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":111,"author":{"gitID":"AzuraAiR"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":112,"author":{"gitID":"AzuraAiR"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":113,"author":{"gitID":"AzuraAiR"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":114,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":116,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"AzuraAiR"},"content":"     * Builds the expected result message of the persons printed"},{"lineNumber":118,"author":{"gitID":"AzuraAiR"},"content":"     * @param index number of persons"},{"lineNumber":119,"author":{"gitID":"AzuraAiR"},"content":"     * @return the expected result message"},{"lineNumber":120,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"AzuraAiR"},"content":"    private String buildPersonResultStub(int index) {"},{"lineNumber":122,"author":{"gitID":"AzuraAiR"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":123,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":124,"author":{"gitID":"AzuraAiR"},"content":"        for (int i \u003d 0; i \u003c index; i++) {"},{"lineNumber":125,"author":{"gitID":"AzuraAiR"},"content":"            sb.append(TYPICAL_PERSONS_NAME_STUB[i]);"},{"lineNumber":126,"author":{"gitID":"AzuraAiR"},"content":"            if (i !\u003d index - 1) {"},{"lineNumber":127,"author":{"gitID":"AzuraAiR"},"content":"                sb.append(\", \");"},{"lineNumber":128,"author":{"gitID":"AzuraAiR"},"content":"            } else {"},{"lineNumber":129,"author":{"gitID":"AzuraAiR"},"content":"                sb.append(\"\\n\");"},{"lineNumber":130,"author":{"gitID":"AzuraAiR"},"content":"            }"},{"lineNumber":131,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":133,"author":{"gitID":"AzuraAiR"},"content":"        return sb.toString();"},{"lineNumber":134,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"AzuraAiR"},"content":"}"}],"authorContributionMap":{"AzuraAiR":122,"-":13}},{"path":"src/test/java/systemtests/ExportCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EXPORT_FILEPATH;"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.logic.commands.CommandTestUtil.MIXED_CASE_EXPORT_COMMAND_WORD;"},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TEST_PASSWORD;"},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPORT_FILEPATH;"},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.logic.commands.ExportCommand.MESSAGE_FILE_UNABLE_TO_SAVE;"},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.logic.commands.ExportCommand.MESSAGE_SUCCESS;"},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":12,"author":{"gitID":"Caijun7"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":14,"author":{"gitID":"Caijun7"},"content":"import seedu.address.logic.commands.ExportCommand;"},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":17,"author":{"gitID":"Caijun7"},"content":"//@@author Caijun7"},{"lineNumber":18,"author":{"gitID":"Caijun7"},"content":"public class ExportCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":"    public void export() {"},{"lineNumber":21,"author":{"gitID":"Caijun7"},"content":"        /* ----------------------------------- Perform valid export operations  ----------------------------------- */"},{"lineNumber":22,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":23,"author":{"gitID":"Caijun7"},"content":"        /* Case: export to valid filepath, command with no leading and trailing spaces -\u003e retrieved */"},{"lineNumber":24,"author":{"gitID":"Caijun7"},"content":"        String command \u003d ExportCommand.COMMAND_WORD + \" \" + VALID_EXPORT_FILEPATH;"},{"lineNumber":25,"author":{"gitID":"Caijun7"},"content":"        assertCommandSuccess(command);"},{"lineNumber":26,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":27,"author":{"gitID":"Caijun7"},"content":"        /* Case: export to valid filepath encrypted with test password, command with no leading and trailing spaces"},{"lineNumber":28,"author":{"gitID":"Caijun7"},"content":"         * -\u003e retrieved"},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":"         */"},{"lineNumber":30,"author":{"gitID":"Caijun7"},"content":"        command \u003d ExportCommand.COMMAND_WORD + \" \" + VALID_EXPORT_FILEPATH + \" \" + TEST_PASSWORD;"},{"lineNumber":31,"author":{"gitID":"Caijun7"},"content":"        assertCommandSuccess(command);"},{"lineNumber":32,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":33,"author":{"gitID":"Caijun7"},"content":"        /* Case: export to valid filepath, command with leading spaces and trailing spaces -\u003e retrieved*/"},{"lineNumber":34,"author":{"gitID":"Caijun7"},"content":"        command \u003d \"   \" + ExportCommand.COMMAND_WORD + \"   \" + VALID_EXPORT_FILEPATH + \"   \";"},{"lineNumber":35,"author":{"gitID":"Caijun7"},"content":"        assertCommandSuccess(command);"},{"lineNumber":36,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":37,"author":{"gitID":"Caijun7"},"content":"        /* ----------------------------------- Perform invalid export operations ----------------------------------- */"},{"lineNumber":38,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":39,"author":{"gitID":"Caijun7"},"content":"        /* Case: no parameters -\u003e rejected */"},{"lineNumber":40,"author":{"gitID":"Caijun7"},"content":"        assertCommandFailure(ExportCommand.COMMAND_WORD + \" \","},{"lineNumber":41,"author":{"gitID":"Caijun7"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"},{"lineNumber":42,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":43,"author":{"gitID":"Caijun7"},"content":"        /* Case: invalid number of parameters -\u003e rejected */"},{"lineNumber":44,"author":{"gitID":"Caijun7"},"content":"        assertCommandFailure(ExportCommand.COMMAND_WORD + \" \" + VALID_EXPORT_FILEPATH + \" \" + TEST_PASSWORD + \" \""},{"lineNumber":45,"author":{"gitID":"Caijun7"},"content":"                + VALID_EXPORT_FILEPATH, String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"},{"lineNumber":46,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":47,"author":{"gitID":"Caijun7"},"content":"        /* Case: export to valid filepath encrypted with test password, command with leading spaces and trailing spaces"},{"lineNumber":48,"author":{"gitID":"Caijun7"},"content":"         * -\u003e rejected"},{"lineNumber":49,"author":{"gitID":"Caijun7"},"content":"         */"},{"lineNumber":50,"author":{"gitID":"Caijun7"},"content":"        assertCommandFailure(\"   \" + ExportCommand.COMMAND_WORD + \"   \" + VALID_EXPORT_FILEPATH + \"   \" + TEST_PASSWORD"},{"lineNumber":51,"author":{"gitID":"Caijun7"},"content":"                + \" \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"},{"lineNumber":52,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":53,"author":{"gitID":"Caijun7"},"content":"        /* Case: invalid filepath -\u003e rejected */"},{"lineNumber":54,"author":{"gitID":"Caijun7"},"content":"        assertCommandFailure(ExportCommand.COMMAND_WORD + \" \" + INVALID_EXPORT_FILEPATH,"},{"lineNumber":55,"author":{"gitID":"Caijun7"},"content":"                String.format(MESSAGE_FILE_UNABLE_TO_SAVE));"},{"lineNumber":56,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":57,"author":{"gitID":"Caijun7"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":58,"author":{"gitID":"Caijun7"},"content":"        assertCommandFailure(MIXED_CASE_EXPORT_COMMAND_WORD + \" \" + VALID_EXPORT_FILEPATH, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":59,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":61,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"Caijun7"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":63,"author":{"gitID":"Caijun7"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":64,"author":{"gitID":"Caijun7"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":65,"author":{"gitID":"Caijun7"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":66,"author":{"gitID":"Caijun7"},"content":"     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"},{"lineNumber":67,"author":{"gitID":"Caijun7"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":68,"author":{"gitID":"Caijun7"},"content":"     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"},{"lineNumber":69,"author":{"gitID":"Caijun7"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":70,"author":{"gitID":"Caijun7"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":71,"author":{"gitID":"Caijun7"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":72,"author":{"gitID":"Caijun7"},"content":"     *"},{"lineNumber":73,"author":{"gitID":"Caijun7"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":74,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"Caijun7"},"content":"    private void assertCommandSuccess(String command) {"},{"lineNumber":76,"author":{"gitID":"Caijun7"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":77,"author":{"gitID":"Caijun7"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_SUCCESS);"},{"lineNumber":78,"author":{"gitID":"Caijun7"},"content":"        executeCommand(command);"},{"lineNumber":79,"author":{"gitID":"Caijun7"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":80,"author":{"gitID":"Caijun7"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":81,"author":{"gitID":"Caijun7"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":82,"author":{"gitID":"Caijun7"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":83,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":85,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"Caijun7"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"Caijun7"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"Caijun7"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":89,"author":{"gitID":"Caijun7"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":90,"author":{"gitID":"Caijun7"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":91,"author":{"gitID":"Caijun7"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":92,"author":{"gitID":"Caijun7"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":93,"author":{"gitID":"Caijun7"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":94,"author":{"gitID":"Caijun7"},"content":"     *"},{"lineNumber":95,"author":{"gitID":"Caijun7"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":96,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"Caijun7"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":98,"author":{"gitID":"Caijun7"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":99,"author":{"gitID":"Caijun7"},"content":"        executeCommand(command);"},{"lineNumber":100,"author":{"gitID":"Caijun7"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":101,"author":{"gitID":"Caijun7"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":102,"author":{"gitID":"Caijun7"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":103,"author":{"gitID":"Caijun7"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":104,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":101,"-":4}},{"path":"src/test/java/systemtests/VacantCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_BUILDING_1;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_BUILDING_2;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_BUILDING_3;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.MIXED_CASE_VACANT_COMMAND_WORD;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BUILDING_1;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.VacantCommand.MESSAGE_INVALID_BUILDING;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.VacantCommand.MESSAGE_SUCCESS;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.model.building.Building.MESSAGE_BUILDING_CONSTRAINTS;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.VacantCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"jingyinno"},"content":"//@@author jingyinno"},{"lineNumber":22,"author":{"gitID":"jingyinno"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"jingyinno"},"content":" * A system test class for the Venue Table table view, which contains interaction with other UI components."},{"lineNumber":24,"author":{"gitID":"jingyinno"},"content":" */"},{"lineNumber":25,"author":{"gitID":"jingyinno"},"content":"public class VacantCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":26,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"jingyinno"},"content":"    public void vacant() {"},{"lineNumber":28,"author":{"gitID":"jingyinno"},"content":"        /* ----------------------------------- Perform valid vacant operations  ----------------------------------- */"},{"lineNumber":29,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":30,"author":{"gitID":"jingyinno"},"content":"        /* Case: find building COM2, command with no leading and trailing spaces -\u003e retrieved */"},{"lineNumber":31,"author":{"gitID":"jingyinno"},"content":"        String command \u003d VacantCommand.COMMAND_WORD + \" \" + VALID_BUILDING_1;"},{"lineNumber":32,"author":{"gitID":"jingyinno"},"content":"        assertCommandSuccess(command);"},{"lineNumber":33,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":34,"author":{"gitID":"jingyinno"},"content":"        /* Case: find building COM2, command with leading spaces and trailing spaces"},{"lineNumber":35,"author":{"gitID":"jingyinno"},"content":"         * -\u003e retrieved"},{"lineNumber":36,"author":{"gitID":"jingyinno"},"content":"         */"},{"lineNumber":37,"author":{"gitID":"jingyinno"},"content":"        command \u003d \"   \" + VacantCommand.COMMAND_WORD + \"   \" + VALID_BUILDING_1 + \"   \";"},{"lineNumber":38,"author":{"gitID":"jingyinno"},"content":"        assertCommandSuccess(command);"},{"lineNumber":39,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":40,"author":{"gitID":"jingyinno"},"content":"        /* Case: undo previous command -\u003e rejected */"},{"lineNumber":41,"author":{"gitID":"jingyinno"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":42,"author":{"gitID":"jingyinno"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":43,"author":{"gitID":"jingyinno"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":44,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":45,"author":{"gitID":"jingyinno"},"content":"        /* Case: redo previous command -\u003e rejected */"},{"lineNumber":46,"author":{"gitID":"jingyinno"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":47,"author":{"gitID":"jingyinno"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":48,"author":{"gitID":"jingyinno"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":49,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":50,"author":{"gitID":"jingyinno"},"content":"        /* ----------------------------------- Perform invalid vacant operations ----------------------------------- */"},{"lineNumber":51,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":52,"author":{"gitID":"jingyinno"},"content":"        /* Case: no parameters -\u003e rejected */"},{"lineNumber":53,"author":{"gitID":"jingyinno"},"content":"        assertCommandFailure(VacantCommand.COMMAND_WORD + \" \","},{"lineNumber":54,"author":{"gitID":"jingyinno"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, VacantCommand.MESSAGE_USAGE));"},{"lineNumber":55,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":56,"author":{"gitID":"jingyinno"},"content":"        /* Case: invalid number of parameters -\u003e rejected */"},{"lineNumber":57,"author":{"gitID":"jingyinno"},"content":"        assertCommandFailure(VacantCommand.COMMAND_WORD + \" \" + INVALID_BUILDING_2,"},{"lineNumber":58,"author":{"gitID":"jingyinno"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, VacantCommand.MESSAGE_USAGE));"},{"lineNumber":59,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":60,"author":{"gitID":"jingyinno"},"content":"        /* Case: invalid building regex -\u003e rejected */"},{"lineNumber":61,"author":{"gitID":"jingyinno"},"content":"        assertCommandFailure(VacantCommand.COMMAND_WORD + \" \" + INVALID_BUILDING_1,"},{"lineNumber":62,"author":{"gitID":"jingyinno"},"content":"                String.format(MESSAGE_BUILDING_CONSTRAINTS));"},{"lineNumber":63,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":64,"author":{"gitID":"jingyinno"},"content":"        /* Case: invalid building name -\u003e rejected */"},{"lineNumber":65,"author":{"gitID":"jingyinno"},"content":"        assertCommandFailure(VacantCommand.COMMAND_WORD + \" \" + INVALID_BUILDING_3,"},{"lineNumber":66,"author":{"gitID":"jingyinno"},"content":"                String.format(MESSAGE_INVALID_BUILDING));"},{"lineNumber":67,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":68,"author":{"gitID":"jingyinno"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":69,"author":{"gitID":"jingyinno"},"content":"        assertCommandFailure(MIXED_CASE_VACANT_COMMAND_WORD + \" \" + VALID_BUILDING_1, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":70,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":72,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"jingyinno"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":74,"author":{"gitID":"jingyinno"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":75,"author":{"gitID":"jingyinno"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":76,"author":{"gitID":"jingyinno"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":77,"author":{"gitID":"jingyinno"},"content":"     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"},{"lineNumber":78,"author":{"gitID":"jingyinno"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":79,"author":{"gitID":"jingyinno"},"content":"     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"},{"lineNumber":80,"author":{"gitID":"jingyinno"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":81,"author":{"gitID":"jingyinno"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":82,"author":{"gitID":"jingyinno"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":83,"author":{"gitID":"jingyinno"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":84,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"jingyinno"},"content":"    private void assertCommandSuccess(String command) {"},{"lineNumber":86,"author":{"gitID":"jingyinno"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":87,"author":{"gitID":"jingyinno"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_SUCCESS);"},{"lineNumber":88,"author":{"gitID":"jingyinno"},"content":"        executeCommand(command);"},{"lineNumber":89,"author":{"gitID":"jingyinno"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":90,"author":{"gitID":"jingyinno"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":91,"author":{"gitID":"jingyinno"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":92,"author":{"gitID":"jingyinno"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":93,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":95,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"jingyinno"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":97,"author":{"gitID":"jingyinno"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":98,"author":{"gitID":"jingyinno"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":99,"author":{"gitID":"jingyinno"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":100,"author":{"gitID":"jingyinno"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":101,"author":{"gitID":"jingyinno"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":102,"author":{"gitID":"jingyinno"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":103,"author":{"gitID":"jingyinno"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"jingyinno"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":105,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"jingyinno"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":107,"author":{"gitID":"jingyinno"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":108,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":109,"author":{"gitID":"jingyinno"},"content":"        executeCommand(command);"},{"lineNumber":110,"author":{"gitID":"jingyinno"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":111,"author":{"gitID":"jingyinno"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":112,"author":{"gitID":"jingyinno"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":113,"author":{"gitID":"jingyinno"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":114,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"jingyinno"},"content":"}"}],"authorContributionMap":{"jingyinno":95,"-":20}},{"path":"src/test/java/systemtests/UploadCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_UPLOAD_FILEPATH;"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.logic.commands.CommandTestUtil.MIXED_CASE_UPLOAD_COMMAND_WORD;"},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TEST_PASSWORD;"},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_UPLOAD_FILEPATH;"},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.logic.commands.UploadCommand.MESSAGE_FILE_UNABLE_TO_SAVE;"},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.logic.commands.UploadCommand.MESSAGE_REQUEST_TIMEOUT;"},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.logic.commands.UploadCommand.MESSAGE_SUCCESS;"},{"lineNumber":12,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":"import org.junit.AfterClass;"},{"lineNumber":14,"author":{"gitID":"Caijun7"},"content":"import org.junit.BeforeClass;"},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":17,"author":{"gitID":"Caijun7"},"content":"import seedu.address.logic.commands.UploadCommand;"},{"lineNumber":18,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":"import seedu.address.storage.GoogleDriveStorage;"},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":21,"author":{"gitID":"Caijun7"},"content":"//@@author Caijun7"},{"lineNumber":22,"author":{"gitID":"Caijun7"},"content":"public class UploadCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":23,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":24,"author":{"gitID":"Caijun7"},"content":"    @BeforeClass"},{"lineNumber":25,"author":{"gitID":"Caijun7"},"content":"    public static void setTestEnvironment() {"},{"lineNumber":26,"author":{"gitID":"Caijun7"},"content":"        GoogleDriveStorage.setTestEnvironment();"},{"lineNumber":27,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"Caijun7"},"content":"    public void upload() {"},{"lineNumber":31,"author":{"gitID":"Caijun7"},"content":"        /* ----------------------------------- Perform valid upload operations  ----------------------------------- */"},{"lineNumber":32,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":33,"author":{"gitID":"Caijun7"},"content":"        /* Case: upload to valid filepath, command with no leading and trailing spaces -\u003e retrieved */"},{"lineNumber":34,"author":{"gitID":"Caijun7"},"content":"        String command \u003d UploadCommand.COMMAND_WORD + \" \" + VALID_UPLOAD_FILEPATH;"},{"lineNumber":35,"author":{"gitID":"Caijun7"},"content":"        assertCommandSuccess(command);"},{"lineNumber":36,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":37,"author":{"gitID":"Caijun7"},"content":"        /* Case: upload to valid filepath encrypted with test password, command with no leading and trailing spaces"},{"lineNumber":38,"author":{"gitID":"Caijun7"},"content":"         * -\u003e retrieved"},{"lineNumber":39,"author":{"gitID":"Caijun7"},"content":"         */"},{"lineNumber":40,"author":{"gitID":"Caijun7"},"content":"        command \u003d UploadCommand.COMMAND_WORD + \" \" + VALID_UPLOAD_FILEPATH + \" \" + TEST_PASSWORD;"},{"lineNumber":41,"author":{"gitID":"Caijun7"},"content":"        assertCommandSuccess(command);"},{"lineNumber":42,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":43,"author":{"gitID":"Caijun7"},"content":"        /* Case: upload to valid filepath, command with leading spaces and trailing spaces -\u003e retrieved*/"},{"lineNumber":44,"author":{"gitID":"Caijun7"},"content":"        command \u003d \"   \" + UploadCommand.COMMAND_WORD + \"   \" + VALID_UPLOAD_FILEPATH + \"   \";"},{"lineNumber":45,"author":{"gitID":"Caijun7"},"content":"        assertCommandSuccess(command);"},{"lineNumber":46,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":47,"author":{"gitID":"Caijun7"},"content":"        /* ----------------------------------- Perform invalid upload operations ----------------------------------- */"},{"lineNumber":48,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":49,"author":{"gitID":"Caijun7"},"content":"        /* Case: no parameters -\u003e rejected */"},{"lineNumber":50,"author":{"gitID":"Caijun7"},"content":"        assertCommandFailure(UploadCommand.COMMAND_WORD + \" \","},{"lineNumber":51,"author":{"gitID":"Caijun7"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, UploadCommand.MESSAGE_USAGE));"},{"lineNumber":52,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":53,"author":{"gitID":"Caijun7"},"content":"        /* Case: invalid number of parameters -\u003e rejected */"},{"lineNumber":54,"author":{"gitID":"Caijun7"},"content":"        assertCommandFailure(UploadCommand.COMMAND_WORD + \" \" + VALID_UPLOAD_FILEPATH + \" \" + TEST_PASSWORD + \" \""},{"lineNumber":55,"author":{"gitID":"Caijun7"},"content":"                + VALID_UPLOAD_FILEPATH, String.format(MESSAGE_INVALID_COMMAND_FORMAT, UploadCommand.MESSAGE_USAGE));"},{"lineNumber":56,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":57,"author":{"gitID":"Caijun7"},"content":"        /* Case: upload to valid filepath encrypted with test password, command with leading spaces and trailing spaces"},{"lineNumber":58,"author":{"gitID":"Caijun7"},"content":"         * -\u003e rejected"},{"lineNumber":59,"author":{"gitID":"Caijun7"},"content":"         */"},{"lineNumber":60,"author":{"gitID":"Caijun7"},"content":"        assertCommandFailure(\"   \" + UploadCommand.COMMAND_WORD + \"   \" + VALID_UPLOAD_FILEPATH + \"   \" + TEST_PASSWORD"},{"lineNumber":61,"author":{"gitID":"Caijun7"},"content":"                + \" \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, UploadCommand.MESSAGE_USAGE));"},{"lineNumber":62,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":63,"author":{"gitID":"Caijun7"},"content":"        /* Case: invalid filepath -\u003e rejected */"},{"lineNumber":64,"author":{"gitID":"Caijun7"},"content":"        assertCommandFailure(UploadCommand.COMMAND_WORD + \" \" + INVALID_UPLOAD_FILEPATH,"},{"lineNumber":65,"author":{"gitID":"Caijun7"},"content":"                String.format(MESSAGE_FILE_UNABLE_TO_SAVE));"},{"lineNumber":66,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":67,"author":{"gitID":"Caijun7"},"content":"        GoogleDriveStorage.resetTestEnvironment();"},{"lineNumber":68,"author":{"gitID":"Caijun7"},"content":"        /* Case: no user response -\u003e rejected */"},{"lineNumber":69,"author":{"gitID":"Caijun7"},"content":"        assertCommandFailure(UploadCommand.COMMAND_WORD + \" \" + INVALID_UPLOAD_FILEPATH,"},{"lineNumber":70,"author":{"gitID":"Caijun7"},"content":"                String.format(MESSAGE_REQUEST_TIMEOUT));"},{"lineNumber":71,"author":{"gitID":"Caijun7"},"content":"        GoogleDriveStorage.setTestEnvironment();"},{"lineNumber":72,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":73,"author":{"gitID":"Caijun7"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":74,"author":{"gitID":"Caijun7"},"content":"        assertCommandFailure(MIXED_CASE_UPLOAD_COMMAND_WORD + \" \" + VALID_UPLOAD_FILEPATH, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":75,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":77,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"Caijun7"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":79,"author":{"gitID":"Caijun7"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":80,"author":{"gitID":"Caijun7"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":81,"author":{"gitID":"Caijun7"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":82,"author":{"gitID":"Caijun7"},"content":"     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"},{"lineNumber":83,"author":{"gitID":"Caijun7"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":84,"author":{"gitID":"Caijun7"},"content":"     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"},{"lineNumber":85,"author":{"gitID":"Caijun7"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":86,"author":{"gitID":"Caijun7"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":87,"author":{"gitID":"Caijun7"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"Caijun7"},"content":"     *"},{"lineNumber":89,"author":{"gitID":"Caijun7"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":90,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"Caijun7"},"content":"    private void assertCommandSuccess(String command) {"},{"lineNumber":92,"author":{"gitID":"Caijun7"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":93,"author":{"gitID":"Caijun7"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_SUCCESS);"},{"lineNumber":94,"author":{"gitID":"Caijun7"},"content":"        executeCommand(command);"},{"lineNumber":95,"author":{"gitID":"Caijun7"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":96,"author":{"gitID":"Caijun7"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":97,"author":{"gitID":"Caijun7"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":98,"author":{"gitID":"Caijun7"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":99,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":101,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"Caijun7"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"Caijun7"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"Caijun7"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":105,"author":{"gitID":"Caijun7"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"Caijun7"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"Caijun7"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"Caijun7"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":109,"author":{"gitID":"Caijun7"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":110,"author":{"gitID":"Caijun7"},"content":"     *"},{"lineNumber":111,"author":{"gitID":"Caijun7"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":112,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"Caijun7"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":114,"author":{"gitID":"Caijun7"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":115,"author":{"gitID":"Caijun7"},"content":"        executeCommand(command);"},{"lineNumber":116,"author":{"gitID":"Caijun7"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":117,"author":{"gitID":"Caijun7"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":118,"author":{"gitID":"Caijun7"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":119,"author":{"gitID":"Caijun7"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":120,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":122,"author":{"gitID":"Caijun7"},"content":"    @AfterClass"},{"lineNumber":123,"author":{"gitID":"Caijun7"},"content":"    public static void resetTestEnvironment() {"},{"lineNumber":124,"author":{"gitID":"Caijun7"},"content":"        GoogleDriveStorage.resetTestEnvironment();"},{"lineNumber":125,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":122,"-":4}},{"path":"src/test/java/systemtests/PasswordCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.MIXED_CASE_PASSWORD_COMMAND_WORD;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PASSWORD;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.PasswordCommand.INVALID_PASSWORD;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.PasswordCommand.MESSAGE_SUCCESS;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.PasswordCommand.MESSAGE_USAGE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.SecurityUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.PasswordCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"yeggasd"},"content":"//@@author yeggasd"},{"lineNumber":20,"author":{"gitID":"yeggasd"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"yeggasd"},"content":" * A system test class for the Password Command, which contains interaction with other UI components."},{"lineNumber":22,"author":{"gitID":"yeggasd"},"content":" */"},{"lineNumber":23,"author":{"gitID":"yeggasd"},"content":"public class PasswordCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":24,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"yeggasd"},"content":"    public void password() {"},{"lineNumber":26,"author":{"gitID":"yeggasd"},"content":"        /* ----------------------------------- Perform valid password operations  ----------------------------------- */"},{"lineNumber":27,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":28,"author":{"gitID":"yeggasd"},"content":"        /* Case: set password with no leading or trailing password -\u003e password set */"},{"lineNumber":29,"author":{"gitID":"yeggasd"},"content":"        String command \u003d PasswordCommand.COMMAND_WORD + \" \" + VALID_PASSWORD;"},{"lineNumber":30,"author":{"gitID":"yeggasd"},"content":"        assertCommandSuccess(command, VALID_PASSWORD);"},{"lineNumber":31,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":32,"author":{"gitID":"yeggasd"},"content":"        /* Case: set password with no leading or trailing password -\u003e password set */"},{"lineNumber":33,"author":{"gitID":"yeggasd"},"content":"        command \u003d \"   \" + PasswordCommand.COMMAND_WORD + \"   \" + VALID_PASSWORD + \"   \";"},{"lineNumber":34,"author":{"gitID":"yeggasd"},"content":"        assertCommandSuccess(command, VALID_PASSWORD);"},{"lineNumber":35,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":36,"author":{"gitID":"yeggasd"},"content":"        /* Case: two parameters -\u003e  password set as the whole string */"},{"lineNumber":37,"author":{"gitID":"yeggasd"},"content":"        command \u003d \"   \" + PasswordCommand.COMMAND_WORD + \"  \" + VALID_PASSWORD + \"  \" + VALID_PASSWORD;"},{"lineNumber":38,"author":{"gitID":"yeggasd"},"content":"        assertCommandSuccess(command, VALID_PASSWORD + \"  \" + VALID_PASSWORD);"},{"lineNumber":39,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":40,"author":{"gitID":"yeggasd"},"content":"        /* Case: undo previous command -\u003e rejected */"},{"lineNumber":41,"author":{"gitID":"yeggasd"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":42,"author":{"gitID":"yeggasd"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":43,"author":{"gitID":"yeggasd"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":44,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":45,"author":{"gitID":"yeggasd"},"content":"        /* Case: redo previous command -\u003e rejected */"},{"lineNumber":46,"author":{"gitID":"yeggasd"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":47,"author":{"gitID":"yeggasd"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":48,"author":{"gitID":"yeggasd"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":49,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":50,"author":{"gitID":"yeggasd"},"content":"        /* ----------------------------------- Perform invalid password operations ---------------------------------- */"},{"lineNumber":51,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":52,"author":{"gitID":"yeggasd"},"content":"        /* Case: no parameters -\u003e rejected */"},{"lineNumber":53,"author":{"gitID":"yeggasd"},"content":"        assertCommandFailure(PasswordCommand.COMMAND_WORD + \" \","},{"lineNumber":54,"author":{"gitID":"yeggasd"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, INVALID_PASSWORD, MESSAGE_USAGE));"},{"lineNumber":55,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":56,"author":{"gitID":"yeggasd"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":57,"author":{"gitID":"yeggasd"},"content":"        assertCommandFailure(MIXED_CASE_PASSWORD_COMMAND_WORD + \" \" + VALID_PASSWORD, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":58,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":60,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"yeggasd"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":62,"author":{"gitID":"yeggasd"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":63,"author":{"gitID":"yeggasd"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":64,"author":{"gitID":"yeggasd"},"content":"     * 3. Result display box displays the success message of executing {@code PasswordCommand}.\u003cbr\u003e"},{"lineNumber":65,"author":{"gitID":"yeggasd"},"content":"     * 4. {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":66,"author":{"gitID":"yeggasd"},"content":"     * 5. {@code Model} and {@code Storage} is updated with password and encrypted accordingly.\u003cbr\u003e"},{"lineNumber":67,"author":{"gitID":"yeggasd"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":68,"author":{"gitID":"yeggasd"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":69,"author":{"gitID":"yeggasd"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":70,"author":{"gitID":"yeggasd"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":71,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"yeggasd"},"content":"    private void assertCommandSuccess(String command, String password) {"},{"lineNumber":73,"author":{"gitID":"yeggasd"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":74,"author":{"gitID":"yeggasd"},"content":"        byte[] hashedPassword \u003d SecurityUtil.hashPassword(password);"},{"lineNumber":75,"author":{"gitID":"yeggasd"},"content":"        expectedModel.updatePassword(hashedPassword);"},{"lineNumber":76,"author":{"gitID":"yeggasd"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_SUCCESS);"},{"lineNumber":77,"author":{"gitID":"yeggasd"},"content":"        executeCommand(command);"},{"lineNumber":78,"author":{"gitID":"yeggasd"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":79,"author":{"gitID":"yeggasd"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":80,"author":{"gitID":"yeggasd"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":81,"author":{"gitID":"yeggasd"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":82,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":84,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"yeggasd"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":86,"author":{"gitID":"yeggasd"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"yeggasd"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"yeggasd"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":89,"author":{"gitID":"yeggasd"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":90,"author":{"gitID":"yeggasd"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":91,"author":{"gitID":"yeggasd"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":92,"author":{"gitID":"yeggasd"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":93,"author":{"gitID":"yeggasd"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":94,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"yeggasd"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":96,"author":{"gitID":"yeggasd"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":97,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":98,"author":{"gitID":"yeggasd"},"content":"        executeCommand(command);"},{"lineNumber":99,"author":{"gitID":"yeggasd"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":100,"author":{"gitID":"yeggasd"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":101,"author":{"gitID":"yeggasd"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":102,"author":{"gitID":"yeggasd"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":103,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"yeggasd"},"content":"}"}],"authorContributionMap":{"yeggasd":86,"-":18}},{"path":"src/test/java/systemtests/BirthdaysCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TIMETABLE_DESC_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import guitests.guihandles.BirthdayNotificationHandle;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.BirthdaysCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"AzuraAiR"},"content":"//@@author AzuraAiR"},{"lineNumber":26,"author":{"gitID":"AzuraAiR"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"AzuraAiR"},"content":" * A system test class for the birthdays list and todays notification,"},{"lineNumber":28,"author":{"gitID":"AzuraAiR"},"content":" * which contains interaction with other UI components."},{"lineNumber":29,"author":{"gitID":"AzuraAiR"},"content":" */"},{"lineNumber":30,"author":{"gitID":"AzuraAiR"},"content":"public class BirthdaysCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":31,"author":{"gitID":"AzuraAiR"},"content":"    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""},{"lineNumber":32,"author":{"gitID":"AzuraAiR"},"content":"            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""},{"lineNumber":33,"author":{"gitID":"AzuraAiR"},"content":"            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""},{"lineNumber":34,"author":{"gitID":"AzuraAiR"},"content":"            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"},{"lineNumber":35,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":36,"author":{"gitID":"AzuraAiR"},"content":"    // Stub from Typical Persons"},{"lineNumber":37,"author":{"gitID":"AzuraAiR"},"content":"    private static final String expectedResult \u003d \"1/1/1995 Alice Pauline\\n\""},{"lineNumber":38,"author":{"gitID":"AzuraAiR"},"content":"            + \"2/1/1989 Benson Meier\\n\""},{"lineNumber":39,"author":{"gitID":"AzuraAiR"},"content":"            + \"3/1/1991 Carl Kurz\\n\""},{"lineNumber":40,"author":{"gitID":"AzuraAiR"},"content":"            + \"6/1/1994 Fiona Kunz\\n\""},{"lineNumber":41,"author":{"gitID":"AzuraAiR"},"content":"            + \"4/2/1991 Daniel Meier\\n\""},{"lineNumber":42,"author":{"gitID":"AzuraAiR"},"content":"            + \"5/3/1991 Elle Meyer\\n\""},{"lineNumber":43,"author":{"gitID":"AzuraAiR"},"content":"            + \"7/10/1995 George Best\\n\";"},{"lineNumber":44,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":45,"author":{"gitID":"AzuraAiR"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":46,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":47,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"AzuraAiR"},"content":"    public void openBirthdayList() {"},{"lineNumber":49,"author":{"gitID":"AzuraAiR"},"content":"        /* Case: open birthday list -\u003e success */"},{"lineNumber":50,"author":{"gitID":"AzuraAiR"},"content":"        executeCommand(BirthdaysCommand.COMMAND_WORD);"},{"lineNumber":51,"author":{"gitID":"AzuraAiR"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":52,"author":{"gitID":"AzuraAiR"},"content":"        assertEquals(expectedResult, getBirthdayList().getText());"},{"lineNumber":53,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":54,"author":{"gitID":"AzuraAiR"},"content":"        /* Case: undo previous command -\u003e rejected */"},{"lineNumber":55,"author":{"gitID":"AzuraAiR"},"content":"        String command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":56,"author":{"gitID":"AzuraAiR"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":57,"author":{"gitID":"AzuraAiR"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":58,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":59,"author":{"gitID":"AzuraAiR"},"content":"        /* Case: redo previous command -\u003e rejected */"},{"lineNumber":60,"author":{"gitID":"AzuraAiR"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":61,"author":{"gitID":"AzuraAiR"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":62,"author":{"gitID":"AzuraAiR"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":63,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":64,"author":{"gitID":"AzuraAiR"},"content":"        /* Case: empty birthday list -\u003e success */"},{"lineNumber":65,"author":{"gitID":"AzuraAiR"},"content":"        deleteAllPersonsAndAliases();"},{"lineNumber":66,"author":{"gitID":"AzuraAiR"},"content":"        executeCommand(BirthdaysCommand.COMMAND_WORD);"},{"lineNumber":67,"author":{"gitID":"AzuraAiR"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":68,"author":{"gitID":"AzuraAiR"},"content":"        assertEquals(\"\", getBirthdayList().getText());"},{"lineNumber":69,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":71,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":72,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"AzuraAiR"},"content":"    public void assertBirthdayNotificationWithOnePersonToday() {"},{"lineNumber":74,"author":{"gitID":"AzuraAiR"},"content":"        // Simulation of commands to create only one person whose birthday is today"},{"lineNumber":75,"author":{"gitID":"AzuraAiR"},"content":"        deleteAllPersonsAndAliases();"},{"lineNumber":76,"author":{"gitID":"AzuraAiR"},"content":"        executeCommand(\"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":77,"author":{"gitID":"AzuraAiR"},"content":"                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   b/\""},{"lineNumber":78,"author":{"gitID":"AzuraAiR"},"content":"                + buildBirthday(true) + \" \" + TIMETABLE_DESC_AMY + TAG_DESC_FRIEND + \" \");"},{"lineNumber":79,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":80,"author":{"gitID":"AzuraAiR"},"content":"        // use command"},{"lineNumber":81,"author":{"gitID":"AzuraAiR"},"content":"        executeCommand(BirthdaysCommand.COMMAND_WORD + \" \" + BirthdaysCommand.ADDITIONAL_COMMAND_PARAMETER);"},{"lineNumber":82,"author":{"gitID":"AzuraAiR"},"content":"        guiRobot.waitForEvent(() -\u003e guiRobot.isWindowShown(\"Birthdays Today\"));"},{"lineNumber":83,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":84,"author":{"gitID":"AzuraAiR"},"content":"        BirthdayNotificationHandle alertDialog \u003d new BirthdayNotificationHandle(guiRobot"},{"lineNumber":85,"author":{"gitID":"AzuraAiR"},"content":"                .getStage(\"Birthdays Today\"));"},{"lineNumber":86,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":87,"author":{"gitID":"AzuraAiR"},"content":"        assertEquals(buildExpectedBirthday(), alertDialog.getContentText());"},{"lineNumber":88,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":90,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"AzuraAiR"},"content":"    public void assertBirthdayNotificationWithZeroPersonToday() {"},{"lineNumber":92,"author":{"gitID":"AzuraAiR"},"content":"        // Simulation of commands to create only one person whose birthday is today"},{"lineNumber":93,"author":{"gitID":"AzuraAiR"},"content":"        deleteAllPersonsAndAliases();"},{"lineNumber":94,"author":{"gitID":"AzuraAiR"},"content":"        executeCommand(\"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":95,"author":{"gitID":"AzuraAiR"},"content":"                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   b/\""},{"lineNumber":96,"author":{"gitID":"AzuraAiR"},"content":"                + buildBirthday(false) + \" \" + TIMETABLE_DESC_AMY + \" \" + TAG_DESC_FRIEND + \" \");"},{"lineNumber":97,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":98,"author":{"gitID":"AzuraAiR"},"content":"        // use command"},{"lineNumber":99,"author":{"gitID":"AzuraAiR"},"content":"        executeCommand(BirthdaysCommand.COMMAND_WORD + \" \" + BirthdaysCommand.ADDITIONAL_COMMAND_PARAMETER);"},{"lineNumber":100,"author":{"gitID":"AzuraAiR"},"content":"        guiRobot.waitForEvent(() -\u003e guiRobot.isWindowShown(\"Birthdays Today\"));"},{"lineNumber":101,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":102,"author":{"gitID":"AzuraAiR"},"content":"        BirthdayNotificationHandle alertDialog \u003d new BirthdayNotificationHandle(guiRobot"},{"lineNumber":103,"author":{"gitID":"AzuraAiR"},"content":"                .getStage(\"Birthdays Today\"));"},{"lineNumber":104,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":105,"author":{"gitID":"AzuraAiR"},"content":"        assertEquals(BirthdaysCommand.MESSAGE_NO_BIRTHDAY_TODAY, alertDialog.getContentText());"},{"lineNumber":106,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":108,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"AzuraAiR"},"content":"     * Builds a birthday desc for the add command"},{"lineNumber":110,"author":{"gitID":"AzuraAiR"},"content":"     * @param isTodayABirthday if the person is having a person today, her birthday will be set to today"},{"lineNumber":111,"author":{"gitID":"AzuraAiR"},"content":"     *                         Otherwise, it will be set +/- 1 day"},{"lineNumber":112,"author":{"gitID":"AzuraAiR"},"content":"     * @return String for \" b/\" portion of AddCommand"},{"lineNumber":113,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"AzuraAiR"},"content":"    private String buildBirthday(boolean isTodayABirthday) {"},{"lineNumber":115,"author":{"gitID":"AzuraAiR"},"content":"        LocalDate currentDate \u003d LocalDate.now();"},{"lineNumber":116,"author":{"gitID":"AzuraAiR"},"content":"        int currentDay;"},{"lineNumber":117,"author":{"gitID":"AzuraAiR"},"content":"        int currentMonth  \u003d currentDate.getMonthValue();"},{"lineNumber":118,"author":{"gitID":"AzuraAiR"},"content":"        StringBuilder string \u003d new StringBuilder();"},{"lineNumber":119,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":120,"author":{"gitID":"AzuraAiR"},"content":"        if (isTodayABirthday) {"},{"lineNumber":121,"author":{"gitID":"AzuraAiR"},"content":"            currentDay \u003d currentDate.getDayOfMonth();"},{"lineNumber":122,"author":{"gitID":"AzuraAiR"},"content":"        } else {"},{"lineNumber":123,"author":{"gitID":"AzuraAiR"},"content":"            if (currentDate.getDayOfMonth() \u003d\u003d 1 || currentDate.getDayOfMonth() \u003c 28) {"},{"lineNumber":124,"author":{"gitID":"AzuraAiR"},"content":"                currentDay \u003d currentDate.getDayOfMonth() + 1;"},{"lineNumber":125,"author":{"gitID":"AzuraAiR"},"content":"            } else {"},{"lineNumber":126,"author":{"gitID":"AzuraAiR"},"content":"                currentDay \u003d currentDate.getDayOfMonth() - 1;"},{"lineNumber":127,"author":{"gitID":"AzuraAiR"},"content":"            }"},{"lineNumber":128,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":130,"author":{"gitID":"AzuraAiR"},"content":"        // Creation of birthday to fit today"},{"lineNumber":131,"author":{"gitID":"AzuraAiR"},"content":"        if (currentDay \u003c\u003d 9) {"},{"lineNumber":132,"author":{"gitID":"AzuraAiR"},"content":"            string.append(0);"},{"lineNumber":133,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"AzuraAiR"},"content":"        string.append(currentDay);"},{"lineNumber":135,"author":{"gitID":"AzuraAiR"},"content":"        if (currentMonth \u003c\u003d 9) {"},{"lineNumber":136,"author":{"gitID":"AzuraAiR"},"content":"            string.append(0);"},{"lineNumber":137,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"AzuraAiR"},"content":"        string.append(currentMonth);"},{"lineNumber":139,"author":{"gitID":"AzuraAiR"},"content":"        string.append(\"1995\");"},{"lineNumber":140,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":141,"author":{"gitID":"AzuraAiR"},"content":"        return string.toString();"},{"lineNumber":142,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":144,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"AzuraAiR"},"content":"     * Creates the stub for the testing of Birthdays"},{"lineNumber":146,"author":{"gitID":"AzuraAiR"},"content":"     * @return Amy with her current age"},{"lineNumber":147,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"AzuraAiR"},"content":"    private String buildExpectedBirthday() {"},{"lineNumber":149,"author":{"gitID":"AzuraAiR"},"content":"        LocalDate currentDate \u003d LocalDate.now();"},{"lineNumber":150,"author":{"gitID":"AzuraAiR"},"content":"        int currentYear \u003d currentDate.getYear();"},{"lineNumber":151,"author":{"gitID":"AzuraAiR"},"content":"        StringBuilder string \u003d new StringBuilder();"},{"lineNumber":152,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":153,"author":{"gitID":"AzuraAiR"},"content":"        int age \u003d currentYear - 1995;"},{"lineNumber":154,"author":{"gitID":"AzuraAiR"},"content":"        string.append(VALID_NAME_AMY);"},{"lineNumber":155,"author":{"gitID":"AzuraAiR"},"content":"        string.append(\" (\");"},{"lineNumber":156,"author":{"gitID":"AzuraAiR"},"content":"        string.append(age);"},{"lineNumber":157,"author":{"gitID":"AzuraAiR"},"content":"        if (age !\u003d 1) {"},{"lineNumber":158,"author":{"gitID":"AzuraAiR"},"content":"            string.append(\" years old)\");"},{"lineNumber":159,"author":{"gitID":"AzuraAiR"},"content":"        } else if (age \u003e 0) {"},{"lineNumber":160,"author":{"gitID":"AzuraAiR"},"content":"            string.append(\" years old)\");"},{"lineNumber":161,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"AzuraAiR"},"content":"        string.append(\"\\n\");"},{"lineNumber":163,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":164,"author":{"gitID":"AzuraAiR"},"content":"        return string.toString();"},{"lineNumber":165,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":167,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":168,"author":{"gitID":"AzuraAiR"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":169,"author":{"gitID":"AzuraAiR"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":170,"author":{"gitID":"AzuraAiR"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":171,"author":{"gitID":"AzuraAiR"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":172,"author":{"gitID":"AzuraAiR"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":173,"author":{"gitID":"AzuraAiR"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":174,"author":{"gitID":"AzuraAiR"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":175,"author":{"gitID":"AzuraAiR"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":176,"author":{"gitID":"AzuraAiR"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":177,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":178,"author":{"gitID":"AzuraAiR"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":179,"author":{"gitID":"AzuraAiR"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":180,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":181,"author":{"gitID":"AzuraAiR"},"content":"        executeCommand(command);"},{"lineNumber":182,"author":{"gitID":"AzuraAiR"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":183,"author":{"gitID":"AzuraAiR"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":184,"author":{"gitID":"AzuraAiR"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":185,"author":{"gitID":"AzuraAiR"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":186,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":188,"author":{"gitID":"AzuraAiR"},"content":"}"}],"authorContributionMap":{"AzuraAiR":164,"-":24}},{"path":"src/test/java/systemtests/ModelHelper.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Contains helper methods to set up {@code Model} for testing."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class ModelHelper {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final Predicate\u003cPerson\u003e PREDICATE_MATCHING_NO_PERSONS \u003d unused -\u003e false;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static void setFilteredList(Model model, List\u003cPerson\u003e toDisplay) {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        Optional\u003cPredicate\u003cPerson\u003e\u003e predicate \u003d"},{"lineNumber":23,"author":{"gitID":"-"},"content":"                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(predicate.orElse(PREDICATE_MATCHING_NO_PERSONS));"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @see ModelHelper#setFilteredList(Model, List)"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static void setFilteredList(Model model, Person... toDisplay) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        setFilteredList(model, Arrays.asList(toDisplay));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"jingyinno"},"content":"    //@@author jingyinno"},{"lineNumber":35,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"jingyinno"},"content":"     * Updates {@code model}\u0027s aliases list to display only {@code aliases}."},{"lineNumber":37,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"jingyinno"},"content":"    public static void setAliases(Model model, HashMap\u003cString, String\u003e aliases) {"},{"lineNumber":39,"author":{"gitID":"jingyinno"},"content":"        model.updateAliasesMapping(aliases);"},{"lineNumber":40,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"jingyinno"},"content":"    //@@author"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Returns a predicate that evaluates to true if this {@code Person} equals to {@code other}."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private static Predicate\u003cPerson\u003e getPredicateMatching(Person other) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return person -\u003e person.equals(other);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jingyinno":8,"-":41}},{"path":"src/test/java/systemtests/RemovePasswordCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.MIXED_CASE_REMOVEPASSWORD_COMMAND_WORD;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PASSWORD;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PASSWORD_HASH;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.RemovePasswordCommand.MESSAGE_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.PasswordCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RemovePasswordCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"yeggasd"},"content":"//@@author yeggasd"},{"lineNumber":18,"author":{"gitID":"yeggasd"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"yeggasd"},"content":" * A system test class for the RemovePassword Command, which contains interaction with other UI components."},{"lineNumber":20,"author":{"gitID":"yeggasd"},"content":" */"},{"lineNumber":21,"author":{"gitID":"yeggasd"},"content":"public class RemovePasswordCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":22,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"yeggasd"},"content":"    public void removePassword() {"},{"lineNumber":24,"author":{"gitID":"yeggasd"},"content":"        /* ----------------------------------- Perform valid password operations  ----------------------------------- */"},{"lineNumber":25,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":26,"author":{"gitID":"yeggasd"},"content":"        /* Case: set password and remove with no leading or trailing space in command -\u003e no password change */"},{"lineNumber":27,"author":{"gitID":"yeggasd"},"content":"        String passwordCommand \u003d PasswordCommand.COMMAND_WORD + \" \" + VALID_PASSWORD;"},{"lineNumber":28,"author":{"gitID":"yeggasd"},"content":"        String removeCommand \u003d RemovePasswordCommand.COMMAND_WORD;"},{"lineNumber":29,"author":{"gitID":"yeggasd"},"content":"        assertCommandSuccess(passwordCommand, removeCommand);"},{"lineNumber":30,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":31,"author":{"gitID":"yeggasd"},"content":"        /* Case: set password and remove with trailing space in command -\u003e no password change */"},{"lineNumber":32,"author":{"gitID":"yeggasd"},"content":"        passwordCommand \u003d PasswordCommand.COMMAND_WORD + \" \" + VALID_PASSWORD;"},{"lineNumber":33,"author":{"gitID":"yeggasd"},"content":"        removeCommand \u003d RemovePasswordCommand.COMMAND_WORD + \" \";"},{"lineNumber":34,"author":{"gitID":"yeggasd"},"content":"        assertCommandSuccess(passwordCommand, removeCommand);"},{"lineNumber":35,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":36,"author":{"gitID":"yeggasd"},"content":"        /* Case: set password twice and remove -\u003e no password change */"},{"lineNumber":37,"author":{"gitID":"yeggasd"},"content":"        passwordCommand \u003d PasswordCommand.COMMAND_WORD + \" \" + VALID_PASSWORD;"},{"lineNumber":38,"author":{"gitID":"yeggasd"},"content":"        removeCommand \u003d RemovePasswordCommand.COMMAND_WORD;"},{"lineNumber":39,"author":{"gitID":"yeggasd"},"content":"        getModel().updatePassword(VALID_PASSWORD_HASH);"},{"lineNumber":40,"author":{"gitID":"yeggasd"},"content":"        executeCommand(passwordCommand);"},{"lineNumber":41,"author":{"gitID":"yeggasd"},"content":"        assertCommandSuccess(passwordCommand, removeCommand);"},{"lineNumber":42,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":43,"author":{"gitID":"yeggasd"},"content":"        /* Case: undo previous command -\u003e rejected */"},{"lineNumber":44,"author":{"gitID":"yeggasd"},"content":"        String command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":45,"author":{"gitID":"yeggasd"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":46,"author":{"gitID":"yeggasd"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":47,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":48,"author":{"gitID":"yeggasd"},"content":"        /* Case: redo previous command -\u003e rejected */"},{"lineNumber":49,"author":{"gitID":"yeggasd"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":50,"author":{"gitID":"yeggasd"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":51,"author":{"gitID":"yeggasd"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":52,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":53,"author":{"gitID":"yeggasd"},"content":"        /* ----------------------------------- Perform invalid password operations ---------------------------------- */"},{"lineNumber":54,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":55,"author":{"gitID":"yeggasd"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":56,"author":{"gitID":"yeggasd"},"content":"        assertCommandFailure(MIXED_CASE_REMOVEPASSWORD_COMMAND_WORD + \" \" + VALID_PASSWORD, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":57,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":59,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"yeggasd"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":61,"author":{"gitID":"yeggasd"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":62,"author":{"gitID":"yeggasd"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":63,"author":{"gitID":"yeggasd"},"content":"     * 3. Result display box displays the success message of executing {@RemovePasswordCommand}.\u003cbr\u003e"},{"lineNumber":64,"author":{"gitID":"yeggasd"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":65,"author":{"gitID":"yeggasd"},"content":"     * 4. {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":66,"author":{"gitID":"yeggasd"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":67,"author":{"gitID":"yeggasd"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":68,"author":{"gitID":"yeggasd"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":69,"author":{"gitID":"yeggasd"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":70,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"yeggasd"},"content":"    private void assertCommandSuccess(String passwordCommand, String removeCommand) {"},{"lineNumber":72,"author":{"gitID":"yeggasd"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":73,"author":{"gitID":"yeggasd"},"content":"        expectedModel.updatePassword(VALID_PASSWORD_HASH);"},{"lineNumber":74,"author":{"gitID":"yeggasd"},"content":"        expectedModel.updatePassword(null);"},{"lineNumber":75,"author":{"gitID":"yeggasd"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_SUCCESS);"},{"lineNumber":76,"author":{"gitID":"yeggasd"},"content":"        executeCommand(passwordCommand);"},{"lineNumber":77,"author":{"gitID":"yeggasd"},"content":"        executeCommand(removeCommand);"},{"lineNumber":78,"author":{"gitID":"yeggasd"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":79,"author":{"gitID":"yeggasd"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":80,"author":{"gitID":"yeggasd"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":81,"author":{"gitID":"yeggasd"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":82,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":84,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"yeggasd"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":86,"author":{"gitID":"yeggasd"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"yeggasd"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"yeggasd"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":89,"author":{"gitID":"yeggasd"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":90,"author":{"gitID":"yeggasd"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":91,"author":{"gitID":"yeggasd"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":92,"author":{"gitID":"yeggasd"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":93,"author":{"gitID":"yeggasd"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":94,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"yeggasd"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":96,"author":{"gitID":"yeggasd"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":97,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":98,"author":{"gitID":"yeggasd"},"content":"        executeCommand(command);"},{"lineNumber":99,"author":{"gitID":"yeggasd"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":100,"author":{"gitID":"yeggasd"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":101,"author":{"gitID":"yeggasd"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":102,"author":{"gitID":"yeggasd"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":103,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"yeggasd"},"content":"}"}],"authorContributionMap":{"yeggasd":88,"-":16}},{"path":"src/test/java/systemtests/AliasCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ALIAS_DESC_HISTORY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ALIAS_DESC_MAP1;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ALIAS_DESC_MAP2;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ALIAS_DESC_NUMBER;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ALIAS_SYNTAX_DESC;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ALIAS_WORD_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_COMMAND_SYNTAX_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_COMMAND_WORD_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalAliases.HISTORY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalAliases.MAP_1;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalAliases.MAP_2;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalAliases.UPLOAD;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AliasCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.exceptions.DuplicateAliasException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AliasUtil;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"jingyinno"},"content":"//@@author jingyinno"},{"lineNumber":28,"author":{"gitID":"jingyinno"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"jingyinno"},"content":" * A system test class for Alias command which consists of model, storage and interaction with other UI components."},{"lineNumber":30,"author":{"gitID":"jingyinno"},"content":" */"},{"lineNumber":31,"author":{"gitID":"jingyinno"},"content":"public class AliasCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":32,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":33,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"jingyinno"},"content":"    public void alias() throws Exception {"},{"lineNumber":35,"author":{"gitID":"jingyinno"},"content":"        Model model \u003d getModel();"},{"lineNumber":36,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":37,"author":{"gitID":"jingyinno"},"content":"        /* ------------------------ Perform add operations on the alias list ----------------------------- */"},{"lineNumber":38,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":39,"author":{"gitID":"jingyinno"},"content":"        /* Case: add an alias to a non-empty address book, command with leading spaces and trailing spaces -\u003e added */"},{"lineNumber":40,"author":{"gitID":"jingyinno"},"content":"        Alias toAddMap1 \u003d MAP_1;"},{"lineNumber":41,"author":{"gitID":"jingyinno"},"content":"        String command \u003d \"   \" + AliasCommand.COMMAND_WORD + \"  \" + ALIAS_DESC_MAP1;"},{"lineNumber":42,"author":{"gitID":"jingyinno"},"content":"        Alias[][] expectedAliases \u003d new Alias[][] {{toAddMap1}};"},{"lineNumber":43,"author":{"gitID":"jingyinno"},"content":"        assertCommandSuccess(command, toAddMap1, expectedAliases);"},{"lineNumber":44,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":45,"author":{"gitID":"jingyinno"},"content":"        /* Case: undo adding MAP_1 to the list -\u003e MAP_1 deleted */"},{"lineNumber":46,"author":{"gitID":"jingyinno"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":47,"author":{"gitID":"jingyinno"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":48,"author":{"gitID":"jingyinno"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":49,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":50,"author":{"gitID":"jingyinno"},"content":"        /* Case: redo adding MAP_1 to the list -\u003e MAP_1 added again */"},{"lineNumber":51,"author":{"gitID":"jingyinno"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":52,"author":{"gitID":"jingyinno"},"content":"        model.addAlias(toAddMap1);"},{"lineNumber":53,"author":{"gitID":"jingyinno"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":54,"author":{"gitID":"jingyinno"},"content":"        expectedAliases \u003d new Alias[][] {{toAddMap1}};"},{"lineNumber":55,"author":{"gitID":"jingyinno"},"content":"        assertCommandSuccess(command, model, expectedResultMessage, expectedAliases);"},{"lineNumber":56,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":57,"author":{"gitID":"jingyinno"},"content":"        /* Case: add an alias of a different command -\u003e added */"},{"lineNumber":58,"author":{"gitID":"jingyinno"},"content":"        Alias toAddHistory \u003d HISTORY;"},{"lineNumber":59,"author":{"gitID":"jingyinno"},"content":"        command \u003d \"   \" + AliasCommand.COMMAND_WORD + \"  \" + ALIAS_DESC_HISTORY;"},{"lineNumber":60,"author":{"gitID":"jingyinno"},"content":"        expectedAliases \u003d new Alias[][] {{toAddMap1, toAddHistory}};"},{"lineNumber":61,"author":{"gitID":"jingyinno"},"content":"        assertCommandSuccess(command, toAddHistory, expectedAliases);"},{"lineNumber":62,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":63,"author":{"gitID":"jingyinno"},"content":"        /* Case: add another alias of MapCommand -\u003e added */"},{"lineNumber":64,"author":{"gitID":"jingyinno"},"content":"        Alias toAddMap2 \u003d MAP_2;"},{"lineNumber":65,"author":{"gitID":"jingyinno"},"content":"        command \u003d \"   \" + AliasCommand.COMMAND_WORD + \"  \" + ALIAS_DESC_MAP2;"},{"lineNumber":66,"author":{"gitID":"jingyinno"},"content":"        expectedAliases \u003d new Alias[][] {{toAddMap1, toAddHistory}, {toAddMap2}};"},{"lineNumber":67,"author":{"gitID":"jingyinno"},"content":"        assertCommandSuccess(command, toAddMap2, expectedAliases);"},{"lineNumber":68,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":69,"author":{"gitID":"jingyinno"},"content":"        /* Case: add a number as alias for UploadCommand -\u003e added */"},{"lineNumber":70,"author":{"gitID":"jingyinno"},"content":"        Alias toAddNumber \u003d UPLOAD;"},{"lineNumber":71,"author":{"gitID":"jingyinno"},"content":"        command \u003d \"   \" + AliasCommand.COMMAND_WORD + \"  \" + ALIAS_DESC_NUMBER;"},{"lineNumber":72,"author":{"gitID":"jingyinno"},"content":"        expectedAliases \u003d new Alias[][] {{toAddMap1, toAddHistory, toAddNumber}, {toAddMap2}};"},{"lineNumber":73,"author":{"gitID":"jingyinno"},"content":"        assertCommandSuccess(command, toAddNumber, expectedAliases);"},{"lineNumber":74,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":75,"author":{"gitID":"jingyinno"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":76,"author":{"gitID":"jingyinno"},"content":"        deleteAllPersonsAndAliases();"},{"lineNumber":77,"author":{"gitID":"jingyinno"},"content":"        expectedAliases \u003d new Alias[][] {{toAddHistory}};"},{"lineNumber":78,"author":{"gitID":"jingyinno"},"content":"        assertCommandSuccess(toAddHistory, expectedAliases);"},{"lineNumber":79,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":80,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":81,"author":{"gitID":"jingyinno"},"content":"        /* --------------------------------- Perform invalid alias operations ------------------------------------- */"},{"lineNumber":82,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":83,"author":{"gitID":"jingyinno"},"content":"        /* Case: add a duplicate alias -\u003e rejected */"},{"lineNumber":84,"author":{"gitID":"jingyinno"},"content":"        command \u003d \"   \" + AliasCommand.COMMAND_WORD + \"  \" + ALIAS_DESC_HISTORY;"},{"lineNumber":85,"author":{"gitID":"jingyinno"},"content":"        assertCommandFailure(command, AliasCommand.MESSAGE_DUPLICATE_ALIAS);"},{"lineNumber":86,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":87,"author":{"gitID":"jingyinno"},"content":"        /* Case: add a nonexistent command -\u003e rejected */"},{"lineNumber":88,"author":{"gitID":"jingyinno"},"content":"        String message \u003d String.format(AliasCommand.MESSAGE_INVALID_COMMAND,"},{"lineNumber":89,"author":{"gitID":"jingyinno"},"content":"                AliasCommand.MESSAGE_INVALID_COMMAND_DESCRIPTION);"},{"lineNumber":90,"author":{"gitID":"jingyinno"},"content":"        command \u003d \"   \" + AliasCommand.COMMAND_WORD + \"  \" + INVALID_COMMAND_WORD_DESC;"},{"lineNumber":91,"author":{"gitID":"jingyinno"},"content":"        assertCommandFailure(command, message);"},{"lineNumber":92,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":93,"author":{"gitID":"jingyinno"},"content":"        /* Case: add an alias which is a command word -\u003e rejected */"},{"lineNumber":94,"author":{"gitID":"jingyinno"},"content":"        message \u003d String.format(AliasCommand.MESSAGE_INVALID_ALIAS,"},{"lineNumber":95,"author":{"gitID":"jingyinno"},"content":"                AliasCommand.MESSAGE_INVALID_ALIAS_DESCRIPTION);"},{"lineNumber":96,"author":{"gitID":"jingyinno"},"content":"        command \u003d \"   \" + AliasCommand.COMMAND_WORD + \"  \" + INVALID_ALIAS_WORD_DESC;"},{"lineNumber":97,"author":{"gitID":"jingyinno"},"content":"        assertCommandFailure(command, message);"},{"lineNumber":98,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":99,"author":{"gitID":"jingyinno"},"content":"        /* Case: add a command with symbols -\u003e rejected */"},{"lineNumber":100,"author":{"gitID":"jingyinno"},"content":"        command \u003d \"   \" + AliasCommand.COMMAND_WORD + \"  \" + INVALID_COMMAND_SYNTAX_DESC;"},{"lineNumber":101,"author":{"gitID":"jingyinno"},"content":"        assertCommandFailure(command, Alias.MESSAGE_ALIAS_CONSTRAINTS);"},{"lineNumber":102,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":103,"author":{"gitID":"jingyinno"},"content":"        /* Case: add an alias with symbols -\u003e rejected */"},{"lineNumber":104,"author":{"gitID":"jingyinno"},"content":"        command \u003d \"   \" + AliasCommand.COMMAND_WORD + \"  \" + INVALID_ALIAS_SYNTAX_DESC;"},{"lineNumber":105,"author":{"gitID":"jingyinno"},"content":"        assertCommandFailure(command, Alias.MESSAGE_ALIAS_CONSTRAINTS);"},{"lineNumber":106,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":108,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"jingyinno"},"content":"     * Executes the {@code AliasCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":110,"author":{"gitID":"jingyinno"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitID":"jingyinno"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":112,"author":{"gitID":"jingyinno"},"content":"     * 3. Result display box displays the success message of executing {@code AliasCommand} with the details of"},{"lineNumber":113,"author":{"gitID":"jingyinno"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":114,"author":{"gitID":"jingyinno"},"content":"     * 4. {@code Model}, {@code Storage} and {@code AliasListPanel} equal to the corresponding components in"},{"lineNumber":115,"author":{"gitID":"jingyinno"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":116,"author":{"gitID":"jingyinno"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":117,"author":{"gitID":"jingyinno"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":118,"author":{"gitID":"jingyinno"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":119,"author":{"gitID":"jingyinno"},"content":"     * 7. Info panel\u0027s AliasList changes \u003cbr\u003e"},{"lineNumber":120,"author":{"gitID":"jingyinno"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":121,"author":{"gitID":"jingyinno"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":122,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"jingyinno"},"content":"    private void assertCommandSuccess(Alias toAdd, Alias[][] expectedTable) {"},{"lineNumber":124,"author":{"gitID":"jingyinno"},"content":"        assertCommandSuccess(AliasUtil.getAliasCommand(toAdd), toAdd, expectedTable);"},{"lineNumber":125,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":127,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"jingyinno"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Alias)}. Executes {@code command}"},{"lineNumber":129,"author":{"gitID":"jingyinno"},"content":"     * instead."},{"lineNumber":130,"author":{"gitID":"jingyinno"},"content":"     * @see AliasCommandSystemTest#assertCommandSuccess(Alias, Alias[][])"},{"lineNumber":131,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"jingyinno"},"content":"    private void assertCommandSuccess(String command, Alias toAdd, Alias[][] expectedTable) {"},{"lineNumber":133,"author":{"gitID":"jingyinno"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":134,"author":{"gitID":"jingyinno"},"content":"        try {"},{"lineNumber":135,"author":{"gitID":"jingyinno"},"content":"            expectedModel.addAlias(toAdd);"},{"lineNumber":136,"author":{"gitID":"jingyinno"},"content":"        } catch (DuplicateAliasException dpe) {"},{"lineNumber":137,"author":{"gitID":"jingyinno"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":138,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"jingyinno"},"content":"        String expectedResultMessage \u003d String.format(AliasCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":140,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":141,"author":{"gitID":"jingyinno"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedTable);"},{"lineNumber":142,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":144,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"jingyinno"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Alias)} except asserts that"},{"lineNumber":146,"author":{"gitID":"jingyinno"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":147,"author":{"gitID":"jingyinno"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":148,"author":{"gitID":"jingyinno"},"content":"     * 2. {@code Model}, {@code Storage} and {@code AliasListPanel} equal to the corresponding components in"},{"lineNumber":149,"author":{"gitID":"jingyinno"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"jingyinno"},"content":"     * @see AliasCommandSystemTest#assertCommandSuccess(String, Alias, Alias[][])"},{"lineNumber":151,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":152,"author":{"gitID":"jingyinno"},"content":"    private void assertCommandSuccess(String command, Model expectedModel,"},{"lineNumber":153,"author":{"gitID":"jingyinno"},"content":"                                      String expectedResultMessage, Alias[][] expectedTable) {"},{"lineNumber":154,"author":{"gitID":"jingyinno"},"content":"        executeCommand(command);"},{"lineNumber":155,"author":{"gitID":"jingyinno"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":156,"author":{"gitID":"jingyinno"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":157,"author":{"gitID":"jingyinno"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":158,"author":{"gitID":"jingyinno"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":159,"author":{"gitID":"jingyinno"},"content":"        assertAliasTable(expectedTable);"},{"lineNumber":160,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":162,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"jingyinno"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Alias)} except asserts that"},{"lineNumber":164,"author":{"gitID":"jingyinno"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":165,"author":{"gitID":"jingyinno"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":166,"author":{"gitID":"jingyinno"},"content":"     * 2. {@code Model}, {@code Storage} and {@code AliasListPanel} equal to the corresponding components in"},{"lineNumber":167,"author":{"gitID":"jingyinno"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":168,"author":{"gitID":"jingyinno"},"content":"     * @see AliasCommandSystemTest#assertCommandSuccess(String, Alias, Alias[][])"},{"lineNumber":169,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":170,"author":{"gitID":"jingyinno"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":171,"author":{"gitID":"jingyinno"},"content":"        executeCommand(command);"},{"lineNumber":172,"author":{"gitID":"jingyinno"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":173,"author":{"gitID":"jingyinno"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":174,"author":{"gitID":"jingyinno"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":175,"author":{"gitID":"jingyinno"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":176,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":178,"author":{"gitID":"jingyinno"},"content":"    private void assertAliasTable(Alias[][] expectedTable) {"},{"lineNumber":179,"author":{"gitID":"jingyinno"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":180,"author":{"gitID":"jingyinno"},"content":"        assertTableDisplaysExpected(\"\", ListCommand.MESSAGE_SUCCESS, expectedTable);"},{"lineNumber":181,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":183,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":184,"author":{"gitID":"jingyinno"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":185,"author":{"gitID":"jingyinno"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":186,"author":{"gitID":"jingyinno"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":187,"author":{"gitID":"jingyinno"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":188,"author":{"gitID":"jingyinno"},"content":"     * 4. {@code Model}, {@code Storage} and {@code AliasListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":189,"author":{"gitID":"jingyinno"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":190,"author":{"gitID":"jingyinno"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":191,"author":{"gitID":"jingyinno"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":192,"author":{"gitID":"jingyinno"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":193,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":194,"author":{"gitID":"jingyinno"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":195,"author":{"gitID":"jingyinno"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":196,"author":{"gitID":"jingyinno"},"content":"        executeCommand(command);"},{"lineNumber":197,"author":{"gitID":"jingyinno"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":198,"author":{"gitID":"jingyinno"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":199,"author":{"gitID":"jingyinno"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":200,"author":{"gitID":"jingyinno"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":201,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"jingyinno"},"content":"}"}],"authorContributionMap":{"jingyinno":176,"-":26}},{"path":"src/test/java/systemtests/MapCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_ADDRESS_1;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_ADDRESS_2;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_BUILDING_LOWERCASE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_BUILDING_UPPERCASE_1;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_BUILDING_UPPERCASE_2;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_POSTAL_1;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_POSTAL_2;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_THREE_LOCATIONS;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TWO_LOCATIONS_1;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TWO_LOCATIONS_2;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TWO_LOCATIONS_3;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TWO_LOCATIONS_ADDRESS;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TWO_LOCATIONS_BUILDING;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TWO_LOCATIONS_POSTAL;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.MapCommand.MESSAGE_SUCCESS;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.model.building.Building.retrieveNusBuildingIfExist;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.MapCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"jingyinno"},"content":"//@@author jingyinno"},{"lineNumber":29,"author":{"gitID":"jingyinno"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"jingyinno"},"content":" * A system test class for the Google Maps Display panel, which contains interaction with other UI components."},{"lineNumber":31,"author":{"gitID":"jingyinno"},"content":" */"},{"lineNumber":32,"author":{"gitID":"jingyinno"},"content":"public class MapCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":33,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":34,"author":{"gitID":"jingyinno"},"content":"    private static final boolean isOneLocation \u003d true;"},{"lineNumber":35,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":36,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"jingyinno"},"content":"    public void map() {"},{"lineNumber":38,"author":{"gitID":"jingyinno"},"content":"        String bufferOneLocation \u003d MapCommand.COMMAND_WORD + \" \" + VALID_LOCATION_BUILDING_LOWERCASE;"},{"lineNumber":39,"author":{"gitID":"jingyinno"},"content":"        executeCommand(bufferOneLocation);"},{"lineNumber":40,"author":{"gitID":"jingyinno"},"content":"        String bufferTwoLocations \u003d MapCommand.COMMAND_WORD + \" \" + VALID_TWO_LOCATIONS_1;"},{"lineNumber":41,"author":{"gitID":"jingyinno"},"content":"        executeCommand(bufferTwoLocations);"},{"lineNumber":42,"author":{"gitID":"jingyinno"},"content":"        /* ----------------------------------- Perform valid map operations ----------------------------------- */"},{"lineNumber":43,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":44,"author":{"gitID":"jingyinno"},"content":"        /* Case: NUS building specified, command with no leading and trailing spaces"},{"lineNumber":45,"author":{"gitID":"jingyinno"},"content":"        * -\u003e retrieved"},{"lineNumber":46,"author":{"gitID":"jingyinno"},"content":"        */"},{"lineNumber":47,"author":{"gitID":"jingyinno"},"content":"        String expectedQuery \u003d retrieveNusBuildingIfExist(VALID_LOCATION_BUILDING_LOWERCASE);"},{"lineNumber":48,"author":{"gitID":"jingyinno"},"content":"        String command \u003d MapCommand.COMMAND_WORD + \" \" + VALID_LOCATION_BUILDING_LOWERCASE;"},{"lineNumber":49,"author":{"gitID":"jingyinno"},"content":"        assertCommandSuccess(command, expectedQuery, isOneLocation);"},{"lineNumber":50,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":51,"author":{"gitID":"jingyinno"},"content":"        /* Case: NUS building specified, command with leading spaces and trailing spaces"},{"lineNumber":52,"author":{"gitID":"jingyinno"},"content":"         * -\u003e retrieved"},{"lineNumber":53,"author":{"gitID":"jingyinno"},"content":"         */"},{"lineNumber":54,"author":{"gitID":"jingyinno"},"content":"        expectedQuery \u003d retrieveNusBuildingIfExist(VALID_LOCATION_BUILDING_UPPERCASE_2);"},{"lineNumber":55,"author":{"gitID":"jingyinno"},"content":"        command \u003d \"   \" + MapCommand.COMMAND_WORD + \"  \" + VALID_LOCATION_BUILDING_UPPERCASE_2 + \"   \";"},{"lineNumber":56,"author":{"gitID":"jingyinno"},"content":"        assertCommandSuccess(command, expectedQuery, isOneLocation);"},{"lineNumber":57,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":58,"author":{"gitID":"jingyinno"},"content":"        /* Case: Postal code specified, command with leading spaces and trailing spaces"},{"lineNumber":59,"author":{"gitID":"jingyinno"},"content":"         * -\u003e retrieved"},{"lineNumber":60,"author":{"gitID":"jingyinno"},"content":"         */"},{"lineNumber":61,"author":{"gitID":"jingyinno"},"content":"        expectedQuery \u003d retrieveNusBuildingIfExist(VALID_LOCATION_POSTAL_1);"},{"lineNumber":62,"author":{"gitID":"jingyinno"},"content":"        command \u003d \"   \" + MapCommand.COMMAND_WORD + \"  \" + VALID_LOCATION_POSTAL_1 + \"   \";"},{"lineNumber":63,"author":{"gitID":"jingyinno"},"content":"        assertCommandSuccess(command, expectedQuery, isOneLocation);"},{"lineNumber":64,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":65,"author":{"gitID":"jingyinno"},"content":"        /* Case: Address specified, command with leading spaces and trailing spaces"},{"lineNumber":66,"author":{"gitID":"jingyinno"},"content":"         * -\u003e retrieved"},{"lineNumber":67,"author":{"gitID":"jingyinno"},"content":"         */"},{"lineNumber":68,"author":{"gitID":"jingyinno"},"content":"        expectedQuery \u003d retrieveNusBuildingIfExist(VALID_LOCATION_ADDRESS_2).replaceAll(\" \", \"%20\");"},{"lineNumber":69,"author":{"gitID":"jingyinno"},"content":"        command \u003d \"   \" + MapCommand.COMMAND_WORD + \"  \" + VALID_LOCATION_ADDRESS_2 + \"   \";"},{"lineNumber":70,"author":{"gitID":"jingyinno"},"content":"        assertCommandSuccess(command, expectedQuery, isOneLocation);"},{"lineNumber":71,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":72,"author":{"gitID":"jingyinno"},"content":"        /* Case: Two NUS buildings specified, command with leading spaces and trailing spaces"},{"lineNumber":73,"author":{"gitID":"jingyinno"},"content":"         * -\u003e retrieved"},{"lineNumber":74,"author":{"gitID":"jingyinno"},"content":"         */"},{"lineNumber":75,"author":{"gitID":"jingyinno"},"content":"        String expectedFirstBuilding \u003d retrieveNusBuildingIfExist(VALID_LOCATION_BUILDING_UPPERCASE_1);"},{"lineNumber":76,"author":{"gitID":"jingyinno"},"content":"        String expectedSecondBuilding \u003d retrieveNusBuildingIfExist(VALID_LOCATION_BUILDING_UPPERCASE_2);"},{"lineNumber":77,"author":{"gitID":"jingyinno"},"content":"        expectedQuery \u003d expectedFirstBuilding + \"/\" + expectedSecondBuilding;"},{"lineNumber":78,"author":{"gitID":"jingyinno"},"content":"        command \u003d \"   \" + MapCommand.COMMAND_WORD + \"  \" + VALID_TWO_LOCATIONS_BUILDING + \"   \";"},{"lineNumber":79,"author":{"gitID":"jingyinno"},"content":"        assertCommandSuccess(command, expectedQuery, !isOneLocation);"},{"lineNumber":80,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":81,"author":{"gitID":"jingyinno"},"content":"        /* Case: Two postal codes specified, command with leading spaces and trailing spaces"},{"lineNumber":82,"author":{"gitID":"jingyinno"},"content":"         * -\u003e retrieved"},{"lineNumber":83,"author":{"gitID":"jingyinno"},"content":"         */"},{"lineNumber":84,"author":{"gitID":"jingyinno"},"content":"        String expectedFirstPostal \u003d retrieveNusBuildingIfExist(VALID_LOCATION_POSTAL_1);"},{"lineNumber":85,"author":{"gitID":"jingyinno"},"content":"        String expectedSecondPostal \u003d retrieveNusBuildingIfExist(VALID_LOCATION_POSTAL_2);"},{"lineNumber":86,"author":{"gitID":"jingyinno"},"content":"        expectedQuery \u003d expectedFirstPostal + \"/\" + expectedSecondPostal;"},{"lineNumber":87,"author":{"gitID":"jingyinno"},"content":"        command \u003d \"   \" + MapCommand.COMMAND_WORD + \"  \" + VALID_TWO_LOCATIONS_POSTAL + \"   \";"},{"lineNumber":88,"author":{"gitID":"jingyinno"},"content":"        assertCommandSuccess(command, expectedQuery, !isOneLocation);"},{"lineNumber":89,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":90,"author":{"gitID":"jingyinno"},"content":"        /* Case: Two addresses specified, command with leading spaces and trailing spaces"},{"lineNumber":91,"author":{"gitID":"jingyinno"},"content":"         * -\u003e retrieved"},{"lineNumber":92,"author":{"gitID":"jingyinno"},"content":"         */"},{"lineNumber":93,"author":{"gitID":"jingyinno"},"content":"        String expectedFirstAddress \u003d retrieveNusBuildingIfExist(VALID_LOCATION_ADDRESS_1).replaceAll(\" \", \"%20\");"},{"lineNumber":94,"author":{"gitID":"jingyinno"},"content":"        String expectedSecondAddress \u003d retrieveNusBuildingIfExist(VALID_LOCATION_ADDRESS_2).replaceAll(\" \", \"%20\");"},{"lineNumber":95,"author":{"gitID":"jingyinno"},"content":"        expectedQuery \u003d expectedFirstAddress + \"/\" + expectedSecondAddress;"},{"lineNumber":96,"author":{"gitID":"jingyinno"},"content":"        command \u003d \"   \" + MapCommand.COMMAND_WORD + \"  \" + VALID_TWO_LOCATIONS_ADDRESS + \"   \";"},{"lineNumber":97,"author":{"gitID":"jingyinno"},"content":"        assertCommandSuccess(command, expectedQuery, !isOneLocation);"},{"lineNumber":98,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":99,"author":{"gitID":"jingyinno"},"content":"        /* Case: NUS building and postal code specified, command with leading spaces and trailing spaces"},{"lineNumber":100,"author":{"gitID":"jingyinno"},"content":"         * -\u003e retrieved"},{"lineNumber":101,"author":{"gitID":"jingyinno"},"content":"         */"},{"lineNumber":102,"author":{"gitID":"jingyinno"},"content":"        String expectedBuilding \u003d retrieveNusBuildingIfExist(VALID_LOCATION_BUILDING_UPPERCASE_1);"},{"lineNumber":103,"author":{"gitID":"jingyinno"},"content":"        String expectedPostal \u003d retrieveNusBuildingIfExist(VALID_LOCATION_POSTAL_1);"},{"lineNumber":104,"author":{"gitID":"jingyinno"},"content":"        expectedQuery \u003d expectedBuilding + \"/\" + expectedPostal;"},{"lineNumber":105,"author":{"gitID":"jingyinno"},"content":"        command \u003d \"   \" + MapCommand.COMMAND_WORD + \"  \" + VALID_TWO_LOCATIONS_1 + \"   \";"},{"lineNumber":106,"author":{"gitID":"jingyinno"},"content":"        assertCommandSuccess(command, expectedQuery, !isOneLocation);"},{"lineNumber":107,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":108,"author":{"gitID":"jingyinno"},"content":"        /* Case: NUS building and address specified, command with leading spaces and trailing spaces"},{"lineNumber":109,"author":{"gitID":"jingyinno"},"content":"         * -\u003e retrieved"},{"lineNumber":110,"author":{"gitID":"jingyinno"},"content":"         */"},{"lineNumber":111,"author":{"gitID":"jingyinno"},"content":"        expectedBuilding \u003d retrieveNusBuildingIfExist(VALID_LOCATION_BUILDING_UPPERCASE_1);"},{"lineNumber":112,"author":{"gitID":"jingyinno"},"content":"        String expectedAddress \u003d retrieveNusBuildingIfExist(VALID_LOCATION_ADDRESS_1).replaceAll(\" \", \"%20\");"},{"lineNumber":113,"author":{"gitID":"jingyinno"},"content":"        expectedQuery \u003d expectedBuilding + \"/\" + expectedAddress;"},{"lineNumber":114,"author":{"gitID":"jingyinno"},"content":"        command \u003d \"   \" + MapCommand.COMMAND_WORD + \"  \" + VALID_TWO_LOCATIONS_2 + \"   \";"},{"lineNumber":115,"author":{"gitID":"jingyinno"},"content":"        assertCommandSuccess(command, expectedQuery, !isOneLocation);"},{"lineNumber":116,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":117,"author":{"gitID":"jingyinno"},"content":"        /* Case: postal and address specified, command with leading spaces and trailing spaces"},{"lineNumber":118,"author":{"gitID":"jingyinno"},"content":"         * -\u003e retrieved"},{"lineNumber":119,"author":{"gitID":"jingyinno"},"content":"         */"},{"lineNumber":120,"author":{"gitID":"jingyinno"},"content":"        expectedPostal \u003d retrieveNusBuildingIfExist(VALID_LOCATION_POSTAL_1);"},{"lineNumber":121,"author":{"gitID":"jingyinno"},"content":"        expectedAddress \u003d retrieveNusBuildingIfExist(VALID_LOCATION_ADDRESS_1).replaceAll(\" \", \"%20\");"},{"lineNumber":122,"author":{"gitID":"jingyinno"},"content":"        expectedQuery \u003d expectedPostal + \"/\" + expectedAddress;"},{"lineNumber":123,"author":{"gitID":"jingyinno"},"content":"        command \u003d \"   \" + MapCommand.COMMAND_WORD + \"  \" + VALID_TWO_LOCATIONS_3 + \"   \";"},{"lineNumber":124,"author":{"gitID":"jingyinno"},"content":"        assertCommandSuccess(command, expectedQuery, !isOneLocation);"},{"lineNumber":125,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":126,"author":{"gitID":"jingyinno"},"content":"        /* Case: Three locations specified, command with leading spaces and trailing spaces"},{"lineNumber":127,"author":{"gitID":"jingyinno"},"content":"         * -\u003e retrieved"},{"lineNumber":128,"author":{"gitID":"jingyinno"},"content":"         */"},{"lineNumber":129,"author":{"gitID":"jingyinno"},"content":"        expectedBuilding \u003d retrieveNusBuildingIfExist(VALID_LOCATION_BUILDING_LOWERCASE);"},{"lineNumber":130,"author":{"gitID":"jingyinno"},"content":"        expectedPostal \u003d retrieveNusBuildingIfExist(VALID_LOCATION_POSTAL_2);"},{"lineNumber":131,"author":{"gitID":"jingyinno"},"content":"        expectedAddress \u003d retrieveNusBuildingIfExist(VALID_LOCATION_ADDRESS_1).replaceAll(\" \", \"%20\");"},{"lineNumber":132,"author":{"gitID":"jingyinno"},"content":"        expectedQuery \u003d expectedAddress + \"/\" + expectedBuilding + \"/\" + expectedPostal;"},{"lineNumber":133,"author":{"gitID":"jingyinno"},"content":"        command \u003d \"   \" + MapCommand.COMMAND_WORD + \"  \" + VALID_THREE_LOCATIONS + \"   \";"},{"lineNumber":134,"author":{"gitID":"jingyinno"},"content":"        assertCommandSuccess(command, expectedQuery, !isOneLocation);"},{"lineNumber":135,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":136,"author":{"gitID":"jingyinno"},"content":"        /* Case: undo previous command -\u003e rejected */"},{"lineNumber":137,"author":{"gitID":"jingyinno"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":138,"author":{"gitID":"jingyinno"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":139,"author":{"gitID":"jingyinno"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":140,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":141,"author":{"gitID":"jingyinno"},"content":"        /* Case: redo previous command -\u003e rejected */"},{"lineNumber":142,"author":{"gitID":"jingyinno"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":143,"author":{"gitID":"jingyinno"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":144,"author":{"gitID":"jingyinno"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":145,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":146,"author":{"gitID":"jingyinno"},"content":"        /* ----------------------------------- Perform invalid map operations ----------------------------------- */"},{"lineNumber":147,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":148,"author":{"gitID":"jingyinno"},"content":"        /* Case: no parameters -\u003e rejected */"},{"lineNumber":149,"author":{"gitID":"jingyinno"},"content":"        assertCommandFailure(MapCommand.COMMAND_WORD + \" \","},{"lineNumber":150,"author":{"gitID":"jingyinno"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MapCommand.MESSAGE_USAGE));"},{"lineNumber":151,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":153,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":154,"author":{"gitID":"jingyinno"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":155,"author":{"gitID":"jingyinno"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":156,"author":{"gitID":"jingyinno"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":157,"author":{"gitID":"jingyinno"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":158,"author":{"gitID":"jingyinno"},"content":"     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"},{"lineNumber":159,"author":{"gitID":"jingyinno"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":160,"author":{"gitID":"jingyinno"},"content":"     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"},{"lineNumber":161,"author":{"gitID":"jingyinno"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":162,"author":{"gitID":"jingyinno"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":163,"author":{"gitID":"jingyinno"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":164,"author":{"gitID":"jingyinno"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":165,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"jingyinno"},"content":"    private void assertCommandSuccess(String command, String query, boolean isOneLocation) {"},{"lineNumber":167,"author":{"gitID":"jingyinno"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":168,"author":{"gitID":"jingyinno"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_SUCCESS);"},{"lineNumber":169,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":170,"author":{"gitID":"jingyinno"},"content":"        executeCommand(command);"},{"lineNumber":171,"author":{"gitID":"jingyinno"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":172,"author":{"gitID":"jingyinno"},"content":"        assertMapDisplayChanged(isOneLocation, query);"},{"lineNumber":173,"author":{"gitID":"jingyinno"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":174,"author":{"gitID":"jingyinno"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":175,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":177,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"jingyinno"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":179,"author":{"gitID":"jingyinno"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":180,"author":{"gitID":"jingyinno"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":181,"author":{"gitID":"jingyinno"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":182,"author":{"gitID":"jingyinno"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":183,"author":{"gitID":"jingyinno"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":184,"author":{"gitID":"jingyinno"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":185,"author":{"gitID":"jingyinno"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":186,"author":{"gitID":"jingyinno"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":187,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":188,"author":{"gitID":"jingyinno"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":189,"author":{"gitID":"jingyinno"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":190,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":191,"author":{"gitID":"jingyinno"},"content":"        executeCommand(command);"},{"lineNumber":192,"author":{"gitID":"jingyinno"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":193,"author":{"gitID":"jingyinno"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":194,"author":{"gitID":"jingyinno"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":195,"author":{"gitID":"jingyinno"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":196,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"jingyinno"},"content":"}"}],"authorContributionMap":{"jingyinno":170,"-":27}},{"path":"src/test/java/systemtests/UnaliasCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_UNALIAS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_UNALIAS_DESC;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALIAS_ADD;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALIAS_MAP2;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALIAS_NUMBER;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalAliases.ADD;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalAliases.MAP_2;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalAliases.UPLOAD;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UnaliasCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.exceptions.AliasNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.exceptions.DuplicateAliasException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AliasUtil;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalAliases;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"jingyinno"},"content":"//@@author jingyinno"},{"lineNumber":28,"author":{"gitID":"jingyinno"},"content":"public class UnaliasCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":29,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":30,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"jingyinno"},"content":"    public void unalias() throws Exception {"},{"lineNumber":32,"author":{"gitID":"jingyinno"},"content":"        Model model \u003d getModel();"},{"lineNumber":33,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":34,"author":{"gitID":"jingyinno"},"content":"        /* ------------------------ Perform remove operations from the alias list ----------------------------- */"},{"lineNumber":35,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":36,"author":{"gitID":"jingyinno"},"content":"        /* Case: remove an alias from a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":37,"author":{"gitID":"jingyinno"},"content":"        * -\u003e removed"},{"lineNumber":38,"author":{"gitID":"jingyinno"},"content":"        * */"},{"lineNumber":39,"author":{"gitID":"jingyinno"},"content":"        String toDeleteAdd \u003d VALID_ALIAS_ADD;"},{"lineNumber":40,"author":{"gitID":"jingyinno"},"content":"        generateAliases(model);"},{"lineNumber":41,"author":{"gitID":"jingyinno"},"content":"        String command \u003d \"   \" + UnaliasCommand.COMMAND_WORD + \"  \" + VALID_ALIAS_ADD + \"   \";"},{"lineNumber":42,"author":{"gitID":"jingyinno"},"content":"        Alias[] expectedAliasArray \u003d getRemainingAliases(new Alias[] {ADD});"},{"lineNumber":43,"author":{"gitID":"jingyinno"},"content":"        Alias[][] expectedAliases \u003d new Alias[][] {expectedAliasArray};"},{"lineNumber":44,"author":{"gitID":"jingyinno"},"content":"        assertCommandSuccess(command, toDeleteAdd, expectedAliases);"},{"lineNumber":45,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":46,"author":{"gitID":"jingyinno"},"content":"        /* Case: undo removing ADD from the list -\u003e ADD added */"},{"lineNumber":47,"author":{"gitID":"jingyinno"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":48,"author":{"gitID":"jingyinno"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":49,"author":{"gitID":"jingyinno"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":50,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":51,"author":{"gitID":"jingyinno"},"content":"        /* Case: redo removing ADD from the list -\u003e ADD removed again */"},{"lineNumber":52,"author":{"gitID":"jingyinno"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":53,"author":{"gitID":"jingyinno"},"content":"        model.removeAlias(VALID_ALIAS_ADD);"},{"lineNumber":54,"author":{"gitID":"jingyinno"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":55,"author":{"gitID":"jingyinno"},"content":"        expectedAliases \u003d new Alias[][] {expectedAliasArray};"},{"lineNumber":56,"author":{"gitID":"jingyinno"},"content":"        assertCommandSuccess(command, model, expectedResultMessage, expectedAliases);"},{"lineNumber":57,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":58,"author":{"gitID":"jingyinno"},"content":"        /* Case: remove another alias from a non-empty address book, command with leading and trailing spaces"},{"lineNumber":59,"author":{"gitID":"jingyinno"},"content":"         * -\u003e removed"},{"lineNumber":60,"author":{"gitID":"jingyinno"},"content":"         * */"},{"lineNumber":61,"author":{"gitID":"jingyinno"},"content":"        String toDeleteMap \u003d VALID_ALIAS_MAP2;"},{"lineNumber":62,"author":{"gitID":"jingyinno"},"content":"        command \u003d \"   \" + UnaliasCommand.COMMAND_WORD + \"  \" + VALID_ALIAS_MAP2 + \"  \";"},{"lineNumber":63,"author":{"gitID":"jingyinno"},"content":"        expectedAliasArray \u003d getRemainingAliases(new Alias[] {MAP_2, ADD});"},{"lineNumber":64,"author":{"gitID":"jingyinno"},"content":"        expectedAliases \u003d new Alias[][] {expectedAliasArray};"},{"lineNumber":65,"author":{"gitID":"jingyinno"},"content":"        assertCommandSuccess(command, toDeleteMap, expectedAliases);"},{"lineNumber":66,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":67,"author":{"gitID":"jingyinno"},"content":"        /* Case: remove another alias from a non-empty address book, command with leading and trailing spaces"},{"lineNumber":68,"author":{"gitID":"jingyinno"},"content":"         * -\u003e removed"},{"lineNumber":69,"author":{"gitID":"jingyinno"},"content":"         * */"},{"lineNumber":70,"author":{"gitID":"jingyinno"},"content":"        String toDeleteUpload \u003d VALID_ALIAS_NUMBER;"},{"lineNumber":71,"author":{"gitID":"jingyinno"},"content":"        command \u003d \"   \" + UnaliasCommand.COMMAND_WORD + \"  \" + VALID_ALIAS_NUMBER + \"  \";"},{"lineNumber":72,"author":{"gitID":"jingyinno"},"content":"        expectedAliasArray \u003d getRemainingAliases(new Alias[] {MAP_2, ADD, UPLOAD});"},{"lineNumber":73,"author":{"gitID":"jingyinno"},"content":"        expectedAliases \u003d new Alias[][] {expectedAliasArray};"},{"lineNumber":74,"author":{"gitID":"jingyinno"},"content":"        assertCommandSuccess(command, toDeleteUpload, expectedAliases);"},{"lineNumber":75,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":76,"author":{"gitID":"jingyinno"},"content":"        /* --------------------------------- Perform invalid unalias operations ------------------------------------- */"},{"lineNumber":77,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":78,"author":{"gitID":"jingyinno"},"content":"        /* Case: remove nonexistent alias from a non-empty address book, command with leading and trailing spaces"},{"lineNumber":79,"author":{"gitID":"jingyinno"},"content":"         * -\u003e rejected"},{"lineNumber":80,"author":{"gitID":"jingyinno"},"content":"         * */"},{"lineNumber":81,"author":{"gitID":"jingyinno"},"content":"        command \u003d \"   \" + UnaliasCommand.COMMAND_WORD + \"  \" + INVALID_UNALIAS + \"  \";"},{"lineNumber":82,"author":{"gitID":"jingyinno"},"content":"        assertCommandFailure(command, UnaliasCommand.MESSAGE_UNKNOWN_UNALIAS);"},{"lineNumber":83,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":84,"author":{"gitID":"jingyinno"},"content":"        /* Case: remove alias with symbols from a non-empty address book, command with leading and trailing spaces"},{"lineNumber":85,"author":{"gitID":"jingyinno"},"content":"         * -\u003e rejected"},{"lineNumber":86,"author":{"gitID":"jingyinno"},"content":"         * */"},{"lineNumber":87,"author":{"gitID":"jingyinno"},"content":"        command \u003d \"   \" + UnaliasCommand.COMMAND_WORD + \"  \" + INVALID_UNALIAS_DESC + \"  \";"},{"lineNumber":88,"author":{"gitID":"jingyinno"},"content":"        assertCommandFailure(command, Alias.MESSAGE_ALIAS_CONSTRAINTS);"},{"lineNumber":89,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":91,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"jingyinno"},"content":"     * Executes the {@code UnaliasCommand} that removes {@code toDelete} from the model and asserts that the,\u003cbr\u003e"},{"lineNumber":93,"author":{"gitID":"jingyinno"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":94,"author":{"gitID":"jingyinno"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":95,"author":{"gitID":"jingyinno"},"content":"     * 3. Result display box displays the success message of executing {@code unaliasCommand} \u003cbr\u003e"},{"lineNumber":96,"author":{"gitID":"jingyinno"},"content":"     * 4. {@code Model}, {@code Storage} and {@code AliasListPanel} equal to the corresponding components in"},{"lineNumber":97,"author":{"gitID":"jingyinno"},"content":"     * the current model without {@code toDelete}.\u003cbr\u003e"},{"lineNumber":98,"author":{"gitID":"jingyinno"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":99,"author":{"gitID":"jingyinno"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":100,"author":{"gitID":"jingyinno"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":101,"author":{"gitID":"jingyinno"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":102,"author":{"gitID":"jingyinno"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":103,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"jingyinno"},"content":"    private void assertCommandSuccess(String command, String toDelete, Alias[][] expectedTable) {"},{"lineNumber":105,"author":{"gitID":"jingyinno"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":106,"author":{"gitID":"jingyinno"},"content":"        try {"},{"lineNumber":107,"author":{"gitID":"jingyinno"},"content":"            expectedModel.removeAlias(toDelete);"},{"lineNumber":108,"author":{"gitID":"jingyinno"},"content":"        } catch (AliasNotFoundException e) {"},{"lineNumber":109,"author":{"gitID":"jingyinno"},"content":"            throw new AssertionError(\"toDelete does not exists in the model.\");"},{"lineNumber":110,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"jingyinno"},"content":"        String expectedResultMessage \u003d UnaliasCommand.MESSAGE_SUCCESS;"},{"lineNumber":112,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":113,"author":{"gitID":"jingyinno"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedTable);"},{"lineNumber":114,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":116,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"jingyinno"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Alias)} except asserts that"},{"lineNumber":118,"author":{"gitID":"jingyinno"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":119,"author":{"gitID":"jingyinno"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":120,"author":{"gitID":"jingyinno"},"content":"     * 2. {@code Model}, {@code Storage} and {@code AliasListPanel} equal to the corresponding components in"},{"lineNumber":121,"author":{"gitID":"jingyinno"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":122,"author":{"gitID":"jingyinno"},"content":"     * @see UnaliasCommandSystemTest#assertCommandSuccess(String, String, Alias[][])"},{"lineNumber":123,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"jingyinno"},"content":"    private void assertCommandSuccess(String command, Model expectedModel,"},{"lineNumber":125,"author":{"gitID":"jingyinno"},"content":"                                      String expectedResultMessage, Alias[][] expectedTable) {"},{"lineNumber":126,"author":{"gitID":"jingyinno"},"content":"        executeCommand(command);"},{"lineNumber":127,"author":{"gitID":"jingyinno"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":128,"author":{"gitID":"jingyinno"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":129,"author":{"gitID":"jingyinno"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":130,"author":{"gitID":"jingyinno"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":131,"author":{"gitID":"jingyinno"},"content":"        assertAliasTable(expectedTable);"},{"lineNumber":132,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":134,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"jingyinno"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Alias)} except asserts that"},{"lineNumber":136,"author":{"gitID":"jingyinno"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":137,"author":{"gitID":"jingyinno"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"jingyinno"},"content":"     * 2. {@code Model}, {@code Storage} and {@code AliasListPanel} equal to the corresponding components in"},{"lineNumber":139,"author":{"gitID":"jingyinno"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":140,"author":{"gitID":"jingyinno"},"content":"     * @see UnaliasCommandSystemTest#assertCommandSuccess(String, String, Alias[][])"},{"lineNumber":141,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"jingyinno"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":143,"author":{"gitID":"jingyinno"},"content":"        executeCommand(command);"},{"lineNumber":144,"author":{"gitID":"jingyinno"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":145,"author":{"gitID":"jingyinno"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":146,"author":{"gitID":"jingyinno"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":147,"author":{"gitID":"jingyinno"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":148,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":150,"author":{"gitID":"jingyinno"},"content":"    private void assertAliasTable(Alias[][] expectedTable) {"},{"lineNumber":151,"author":{"gitID":"jingyinno"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":152,"author":{"gitID":"jingyinno"},"content":"        assertTableDisplaysExpected(\"\", ListCommand.MESSAGE_SUCCESS, expectedTable);"},{"lineNumber":153,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":155,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"jingyinno"},"content":"     * To add new alias into {@code model} with typicalAliases"},{"lineNumber":157,"author":{"gitID":"jingyinno"},"content":"     * @param model the current model of the testing stage"},{"lineNumber":158,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"jingyinno"},"content":"    private void generateAliases(Model model) {"},{"lineNumber":160,"author":{"gitID":"jingyinno"},"content":"        List\u003cAlias\u003e aliases \u003d TypicalAliases.getTypicalAliases();"},{"lineNumber":161,"author":{"gitID":"jingyinno"},"content":"        for (Alias alias : aliases) {"},{"lineNumber":162,"author":{"gitID":"jingyinno"},"content":"            try {"},{"lineNumber":163,"author":{"gitID":"jingyinno"},"content":"                model.addAlias(alias);"},{"lineNumber":164,"author":{"gitID":"jingyinno"},"content":"            } catch (DuplicateAliasException dpe) {"},{"lineNumber":165,"author":{"gitID":"jingyinno"},"content":"                throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":166,"author":{"gitID":"jingyinno"},"content":"            }"},{"lineNumber":167,"author":{"gitID":"jingyinno"},"content":"            executeCommand(AliasUtil.getAliasCommand(alias));"},{"lineNumber":168,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":171,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":172,"author":{"gitID":"jingyinno"},"content":"     * To generate a new expected aliases list with typicalAliases excluding {@code aliases}"},{"lineNumber":173,"author":{"gitID":"jingyinno"},"content":"     * @param aliases the aliases to be excluded from typicalAlias list"},{"lineNumber":174,"author":{"gitID":"jingyinno"},"content":"     * @return the expected aliases excuding {@code aliases}"},{"lineNumber":175,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"jingyinno"},"content":"    private Alias[] getRemainingAliases(Alias[] aliases) {"},{"lineNumber":177,"author":{"gitID":"jingyinno"},"content":"        List\u003cAlias\u003e expectedAliases \u003d TypicalAliases.getTypicalAliases();"},{"lineNumber":178,"author":{"gitID":"jingyinno"},"content":"        for (Alias alias : aliases) {"},{"lineNumber":179,"author":{"gitID":"jingyinno"},"content":"            expectedAliases.remove(alias);"},{"lineNumber":180,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"jingyinno"},"content":"        return expectedAliases.toArray(new Alias[expectedAliases.size()]);"},{"lineNumber":182,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":184,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":185,"author":{"gitID":"jingyinno"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":186,"author":{"gitID":"jingyinno"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":187,"author":{"gitID":"jingyinno"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":188,"author":{"gitID":"jingyinno"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":189,"author":{"gitID":"jingyinno"},"content":"     * 4. {@code Model}, {@code Storage} and {@code AliasListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":190,"author":{"gitID":"jingyinno"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":191,"author":{"gitID":"jingyinno"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":192,"author":{"gitID":"jingyinno"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":193,"author":{"gitID":"jingyinno"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":194,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":195,"author":{"gitID":"jingyinno"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":196,"author":{"gitID":"jingyinno"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":197,"author":{"gitID":"jingyinno"},"content":"        executeCommand(command);"},{"lineNumber":198,"author":{"gitID":"jingyinno"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":199,"author":{"gitID":"jingyinno"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":200,"author":{"gitID":"jingyinno"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":201,"author":{"gitID":"jingyinno"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":202,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"jingyinno"},"content":"}"}],"authorContributionMap":{"jingyinno":177,"-":26}},{"path":"src/test/java/seedu/address/ui/GoogleMapsDisplayTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_ADDRESS_1;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.GoogleMapsDisplay.DEFAULT_PAGE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import guitests.guihandles.GoogleMapsDisplayHandle;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.GoogleMapsEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"jingyinno"},"content":"//@@author jingyinno"},{"lineNumber":22,"author":{"gitID":"jingyinno"},"content":"public class GoogleMapsDisplayTest extends GuiUnitTest {"},{"lineNumber":23,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":24,"author":{"gitID":"jingyinno"},"content":"    private GoogleMapsDisplay googleMapsDisplay;"},{"lineNumber":25,"author":{"gitID":"jingyinno"},"content":"    private GoogleMapsDisplayHandle googleMapsDisplayHandle;"},{"lineNumber":26,"author":{"gitID":"jingyinno"},"content":"    private GoogleMapsEvent googleMapsChangedStub;"},{"lineNumber":27,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":28,"author":{"gitID":"jingyinno"},"content":"    @Before"},{"lineNumber":29,"author":{"gitID":"jingyinno"},"content":"    public void setUp() throws IOException {"},{"lineNumber":30,"author":{"gitID":"jingyinno"},"content":"        guiRobot.interact(() -\u003e googleMapsDisplay \u003d new GoogleMapsDisplay());"},{"lineNumber":31,"author":{"gitID":"jingyinno"},"content":"        uiPartRule.setUiPart(googleMapsDisplay);"},{"lineNumber":32,"author":{"gitID":"jingyinno"},"content":"        googleMapsChangedStub \u003d new GoogleMapsEvent(VALID_LOCATION_ADDRESS_1, true);"},{"lineNumber":33,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":34,"author":{"gitID":"jingyinno"},"content":"        googleMapsDisplayHandle \u003d new GoogleMapsDisplayHandle(googleMapsDisplay.getRoot());"},{"lineNumber":35,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":37,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"jingyinno"},"content":"    public void display() throws Exception {"},{"lineNumber":39,"author":{"gitID":"jingyinno"},"content":"        // default web page"},{"lineNumber":40,"author":{"gitID":"jingyinno"},"content":"        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":41,"author":{"gitID":"jingyinno"},"content":"        assertEquals(expectedDefaultPageUrl, googleMapsDisplayHandle.getLoadedUrl());"},{"lineNumber":42,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":43,"author":{"gitID":"jingyinno"},"content":"        postNow(googleMapsChangedStub);"},{"lineNumber":44,"author":{"gitID":"jingyinno"},"content":"        URL expectedMapsUrl \u003d new URL(GoogleMapsDisplay.MAP_SEARCH_URL_PREFIX"},{"lineNumber":45,"author":{"gitID":"jingyinno"},"content":"                + VALID_LOCATION_ADDRESS_1.replaceAll(\" \", \"%20\"));"},{"lineNumber":46,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":47,"author":{"gitID":"jingyinno"},"content":"        waitUntilBrowserLoaded(googleMapsDisplayHandle);"},{"lineNumber":48,"author":{"gitID":"jingyinno"},"content":"        assertNotEquals(expectedMapsUrl, googleMapsDisplayHandle.getLoadedUrl());"},{"lineNumber":49,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"jingyinno"},"content":"}"}],"authorContributionMap":{"jingyinno":30,"-":20}},{"path":"src/test/java/systemtests/ImportCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ENCRYPTED_IMPORT_FILEPATH;"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_FILE_FORMAT;"},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_IMPORT_FILEPATH;"},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.logic.commands.CommandTestUtil.MIXED_CASE_IMPORT_COMMAND_WORD;"},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TEST_PASSWORD;"},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_IMPORT_FILEPATH;"},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.logic.commands.CommandTestUtil.WRONG_PASSWORD;"},{"lineNumber":12,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.logic.commands.ImportCommand.MESSAGE_DATA_CONVERSION_ERROR;"},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.logic.commands.ImportCommand.MESSAGE_FILE_NOT_FOUND;"},{"lineNumber":14,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.logic.commands.ImportCommand.MESSAGE_PASSWORD_WRONG;"},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.logic.commands.ImportCommand.MESSAGE_SUCCESS;"},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.SecurityUtil;"},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":"import seedu.address.logic.commands.ImportCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"Caijun7"},"content":"//@@author Caijun7"},{"lineNumber":26,"author":{"gitID":"Caijun7"},"content":"public class ImportCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":27,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"Caijun7"},"content":"    public void importCommand() throws Exception {"},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":"        Model model \u003d getModel();"},{"lineNumber":30,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":31,"author":{"gitID":"Caijun7"},"content":"        /* ----------------------------------- Perform valid import operations  ----------------------------------- */"},{"lineNumber":32,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":33,"author":{"gitID":"Caijun7"},"content":"        /* Case: import from valid filepath, command with no leading and trailing spaces -\u003e retrieved */"},{"lineNumber":34,"author":{"gitID":"Caijun7"},"content":"        String command \u003d ImportCommand.COMMAND_WORD + \" \" + VALID_IMPORT_FILEPATH;"},{"lineNumber":35,"author":{"gitID":"Caijun7"},"content":"        assertCommandSuccess(command);"},{"lineNumber":36,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":37,"author":{"gitID":"Caijun7"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":38,"author":{"gitID":"Caijun7"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":39,"author":{"gitID":"Caijun7"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":40,"author":{"gitID":"Caijun7"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":41,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":42,"author":{"gitID":"Caijun7"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":43,"author":{"gitID":"Caijun7"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":44,"author":{"gitID":"Caijun7"},"content":"        model.importAddressBook(VALID_IMPORT_FILEPATH, SecurityUtil.hashPassword(\"\"));"},{"lineNumber":45,"author":{"gitID":"Caijun7"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":46,"author":{"gitID":"Caijun7"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":47,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":48,"author":{"gitID":"Caijun7"},"content":"        /* Case: import from valid filepath and decrypted with test password, command with no leading and"},{"lineNumber":49,"author":{"gitID":"Caijun7"},"content":"         * trailing spaces -\u003e retrieved"},{"lineNumber":50,"author":{"gitID":"Caijun7"},"content":"         */"},{"lineNumber":51,"author":{"gitID":"Caijun7"},"content":"        command \u003d ImportCommand.COMMAND_WORD + \" \" + ENCRYPTED_IMPORT_FILEPATH + \" \" + TEST_PASSWORD;"},{"lineNumber":52,"author":{"gitID":"Caijun7"},"content":"        assertCommandSuccess(command);"},{"lineNumber":53,"author":{"gitID":"Caijun7"},"content":"        SecurityUtil.encrypt(ENCRYPTED_IMPORT_FILEPATH, TEST_PASSWORD);"},{"lineNumber":54,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":55,"author":{"gitID":"Caijun7"},"content":"        /* Case: import from valid filepath, command with leading spaces and trailing spaces -\u003e retrieved*/"},{"lineNumber":56,"author":{"gitID":"Caijun7"},"content":"        command \u003d \"   \" + ImportCommand.COMMAND_WORD + \"   \" + VALID_IMPORT_FILEPATH + \"   \";"},{"lineNumber":57,"author":{"gitID":"Caijun7"},"content":"        assertCommandSuccess(command);"},{"lineNumber":58,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":59,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":60,"author":{"gitID":"Caijun7"},"content":"        /* Case: import to valid filepath encrypted with test password, command with leading spaces and trailing spaces"},{"lineNumber":61,"author":{"gitID":"Caijun7"},"content":"         * -\u003e retrieved"},{"lineNumber":62,"author":{"gitID":"Caijun7"},"content":"         */"},{"lineNumber":63,"author":{"gitID":"Caijun7"},"content":"        command \u003d \"   \" + ImportCommand.COMMAND_WORD + \"   \" + ENCRYPTED_IMPORT_FILEPATH + \"   \""},{"lineNumber":64,"author":{"gitID":"Caijun7"},"content":"                + TEST_PASSWORD + \"  \";"},{"lineNumber":65,"author":{"gitID":"Caijun7"},"content":"        assertCommandSuccess(command);"},{"lineNumber":66,"author":{"gitID":"Caijun7"},"content":"        SecurityUtil.encrypt(ENCRYPTED_IMPORT_FILEPATH, TEST_PASSWORD);"},{"lineNumber":67,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":68,"author":{"gitID":"Caijun7"},"content":"        /* ----------------------------------- Perform invalid import operations ----------------------------------- */"},{"lineNumber":69,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":70,"author":{"gitID":"Caijun7"},"content":"        /* Case: no parameters -\u003e rejected */"},{"lineNumber":71,"author":{"gitID":"Caijun7"},"content":"        assertCommandFailure(ImportCommand.COMMAND_WORD + \" \","},{"lineNumber":72,"author":{"gitID":"Caijun7"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"},{"lineNumber":73,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":74,"author":{"gitID":"Caijun7"},"content":"        /* Case: invalid number of parameters -\u003e rejected */"},{"lineNumber":75,"author":{"gitID":"Caijun7"},"content":"        assertCommandFailure(ImportCommand.COMMAND_WORD + \" \" + VALID_IMPORT_FILEPATH + \" \" + TEST_PASSWORD + \" \""},{"lineNumber":76,"author":{"gitID":"Caijun7"},"content":"                + VALID_IMPORT_FILEPATH, String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"},{"lineNumber":77,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":78,"author":{"gitID":"Caijun7"},"content":"        /* Case: invalid filepath -\u003e rejected */"},{"lineNumber":79,"author":{"gitID":"Caijun7"},"content":"        assertCommandFailure(ImportCommand.COMMAND_WORD + \" \" + INVALID_IMPORT_FILEPATH,"},{"lineNumber":80,"author":{"gitID":"Caijun7"},"content":"                String.format(MESSAGE_FILE_NOT_FOUND));"},{"lineNumber":81,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":82,"author":{"gitID":"Caijun7"},"content":"        /* Case: wrong password -\u003e rejected */"},{"lineNumber":83,"author":{"gitID":"Caijun7"},"content":"        assertCommandFailure(ImportCommand.COMMAND_WORD + \" \" + ENCRYPTED_IMPORT_FILEPATH + \" \" + WRONG_PASSWORD,"},{"lineNumber":84,"author":{"gitID":"Caijun7"},"content":"                String.format(MESSAGE_PASSWORD_WRONG));"},{"lineNumber":85,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":86,"author":{"gitID":"Caijun7"},"content":"        /* Case: invalid file format -\u003e rejected */"},{"lineNumber":87,"author":{"gitID":"Caijun7"},"content":"        assertCommandFailure(ImportCommand.COMMAND_WORD + \" \" + INVALID_FILE_FORMAT,"},{"lineNumber":88,"author":{"gitID":"Caijun7"},"content":"                String.format(MESSAGE_DATA_CONVERSION_ERROR));"},{"lineNumber":89,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":90,"author":{"gitID":"Caijun7"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":91,"author":{"gitID":"Caijun7"},"content":"        assertCommandFailure(MIXED_CASE_IMPORT_COMMAND_WORD + \" \" + VALID_IMPORT_FILEPATH, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":92,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":94,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"Caijun7"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":96,"author":{"gitID":"Caijun7"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":97,"author":{"gitID":"Caijun7"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":98,"author":{"gitID":"Caijun7"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":99,"author":{"gitID":"Caijun7"},"content":"     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"},{"lineNumber":100,"author":{"gitID":"Caijun7"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":101,"author":{"gitID":"Caijun7"},"content":"     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"},{"lineNumber":102,"author":{"gitID":"Caijun7"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"Caijun7"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":104,"author":{"gitID":"Caijun7"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":105,"author":{"gitID":"Caijun7"},"content":"     *"},{"lineNumber":106,"author":{"gitID":"Caijun7"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":107,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"Caijun7"},"content":"    private void assertCommandSuccess(String command) {"},{"lineNumber":109,"author":{"gitID":"Caijun7"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":110,"author":{"gitID":"Caijun7"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_SUCCESS);"},{"lineNumber":111,"author":{"gitID":"Caijun7"},"content":"        executeCommand(command);"},{"lineNumber":112,"author":{"gitID":"Caijun7"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":113,"author":{"gitID":"Caijun7"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":114,"author":{"gitID":"Caijun7"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":115,"author":{"gitID":"Caijun7"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":116,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":118,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"Caijun7"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"},{"lineNumber":120,"author":{"gitID":"Caijun7"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":121,"author":{"gitID":"Caijun7"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":122,"author":{"gitID":"Caijun7"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":123,"author":{"gitID":"Caijun7"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":124,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"Caijun7"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":126,"author":{"gitID":"Caijun7"},"content":"        executeCommand(command);"},{"lineNumber":127,"author":{"gitID":"Caijun7"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":128,"author":{"gitID":"Caijun7"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":129,"author":{"gitID":"Caijun7"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":130,"author":{"gitID":"Caijun7"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":131,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":133,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"Caijun7"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":135,"author":{"gitID":"Caijun7"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":136,"author":{"gitID":"Caijun7"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":137,"author":{"gitID":"Caijun7"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"Caijun7"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":139,"author":{"gitID":"Caijun7"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":140,"author":{"gitID":"Caijun7"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":141,"author":{"gitID":"Caijun7"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":142,"author":{"gitID":"Caijun7"},"content":"     *"},{"lineNumber":143,"author":{"gitID":"Caijun7"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":144,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"Caijun7"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":146,"author":{"gitID":"Caijun7"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":147,"author":{"gitID":"Caijun7"},"content":"        executeCommand(command);"},{"lineNumber":148,"author":{"gitID":"Caijun7"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":149,"author":{"gitID":"Caijun7"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":150,"author":{"gitID":"Caijun7"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":151,"author":{"gitID":"Caijun7"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":152,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":142,"-":11}},{"path":"src/test/java/seedu/address/ui/PasswordBoxTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.guihandles.PasswordBoxHandle;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PasswordCorrectEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Password;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":"import seedu.address.storage.ReadOnlyJsonVenueInformation;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":23,"author":{"gitID":"Caijun7"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"yeggasd"},"content":"//@@author yeggasd"},{"lineNumber":28,"author":{"gitID":"yeggasd"},"content":"public class PasswordBoxTest extends GuiUnitTest {"},{"lineNumber":29,"author":{"gitID":"yeggasd"},"content":"    private static final String CORRECT_PASSWORD \u003d \"test\";"},{"lineNumber":30,"author":{"gitID":"yeggasd"},"content":"    private static final String WRONG_PASSWORD \u003d \"wrong\";"},{"lineNumber":31,"author":{"gitID":"yeggasd"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/PasswordBoxTest/\");"},{"lineNumber":32,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":33,"author":{"gitID":"yeggasd"},"content":"    @Rule"},{"lineNumber":34,"author":{"gitID":"yeggasd"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":35,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":36,"author":{"gitID":"yeggasd"},"content":"    private ArrayList\u003cString\u003e defaultStyleOfPasswordBox;"},{"lineNumber":37,"author":{"gitID":"yeggasd"},"content":"    private ArrayList\u003cString\u003e errorStyleOfPasswordBox;"},{"lineNumber":38,"author":{"gitID":"yeggasd"},"content":"    private PasswordBoxHandle passwordBoxHandle;"},{"lineNumber":39,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":40,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":41,"author":{"gitID":"yeggasd"},"content":"    @Before"},{"lineNumber":42,"author":{"gitID":"yeggasd"},"content":"    public void setUp() throws Exception {"},{"lineNumber":43,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":44,"author":{"gitID":"yeggasd"},"content":"        Storage storageManager \u003d setUpStorage();"},{"lineNumber":45,"author":{"gitID":"yeggasd"},"content":"        Model model \u003d new ModelManager(storageManager.readAddressBook(new Password(CORRECT_PASSWORD)).get());"},{"lineNumber":46,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":47,"author":{"gitID":"yeggasd"},"content":"        PasswordBox passwordBox \u003d new PasswordBox(storageManager, model);"},{"lineNumber":48,"author":{"gitID":"yeggasd"},"content":"        passwordBoxHandle \u003d new PasswordBoxHandle(getChildNode(passwordBox.getRoot(),"},{"lineNumber":49,"author":{"gitID":"yeggasd"},"content":"                PasswordBoxHandle.PASSWORD_INPUT_FIELD_ID));"},{"lineNumber":50,"author":{"gitID":"yeggasd"},"content":"        uiPartRule.setUiPart(passwordBox);"},{"lineNumber":51,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":52,"author":{"gitID":"yeggasd"},"content":"        defaultStyleOfPasswordBox \u003d new ArrayList\u003c\u003e(passwordBoxHandle.getStyleClass());"},{"lineNumber":53,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":54,"author":{"gitID":"yeggasd"},"content":"        errorStyleOfPasswordBox \u003d new ArrayList\u003c\u003e(defaultStyleOfPasswordBox);"},{"lineNumber":55,"author":{"gitID":"yeggasd"},"content":"        errorStyleOfPasswordBox.add(PasswordBox.ERROR_STYLE_CLASS);"},{"lineNumber":56,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":58,"author":{"gitID":"yeggasd"},"content":"    private String getTestFilePath(String fileName) {"},{"lineNumber":59,"author":{"gitID":"yeggasd"},"content":"        return TEST_DATA_FOLDER + fileName;"},{"lineNumber":60,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"yeggasd"},"content":"    private Storage setUpStorage() {"},{"lineNumber":62,"author":{"gitID":"yeggasd"},"content":"        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTestFilePath("},{"lineNumber":63,"author":{"gitID":"yeggasd"},"content":"                                                                            \"encryptedAddressBook.xml\"));"},{"lineNumber":64,"author":{"gitID":"yeggasd"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTestFilePath(\"prefs\"));"},{"lineNumber":65,"author":{"gitID":"yeggasd"},"content":"        ReadOnlyJsonVenueInformation venueInformationStorage \u003d new ReadOnlyJsonVenueInformation(\"vi\");"},{"lineNumber":66,"author":{"gitID":"yeggasd"},"content":"        return new StorageManager(addressBookStorage, userPrefsStorage, venueInformationStorage);"},{"lineNumber":67,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":69,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"yeggasd"},"content":"    public void passwordBox_startingWithWrongPassword() {"},{"lineNumber":71,"author":{"gitID":"yeggasd"},"content":"        assertBehaviorForWrongPassword();"},{"lineNumber":72,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":74,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"yeggasd"},"content":"    public void passwordBox_startingWithCorrectPassword() {"},{"lineNumber":76,"author":{"gitID":"yeggasd"},"content":"        assertBehaviorForCorrectPassword();"},{"lineNumber":77,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":79,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"yeggasd"},"content":"    public void passwordBox_handleKeyPress() {"},{"lineNumber":81,"author":{"gitID":"yeggasd"},"content":"        passwordBoxHandle.run(WRONG_PASSWORD);"},{"lineNumber":82,"author":{"gitID":"yeggasd"},"content":"        assertEquals(errorStyleOfPasswordBox, passwordBoxHandle.getStyleClass());"},{"lineNumber":83,"author":{"gitID":"yeggasd"},"content":"        guiRobot.push(KeyCode.ESCAPE);"},{"lineNumber":84,"author":{"gitID":"yeggasd"},"content":"        assertEquals(errorStyleOfPasswordBox, passwordBoxHandle.getStyleClass());"},{"lineNumber":85,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":86,"author":{"gitID":"yeggasd"},"content":"        guiRobot.push(KeyCode.A);"},{"lineNumber":87,"author":{"gitID":"yeggasd"},"content":"        assertEquals(defaultStyleOfPasswordBox, passwordBoxHandle.getStyleClass());"},{"lineNumber":88,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":90,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"yeggasd"},"content":"     * Use a wrong password, then verifies that \u003cbr\u003e"},{"lineNumber":92,"author":{"gitID":"yeggasd"},"content":"     *      - the text remains resets \u003cbr\u003e"},{"lineNumber":93,"author":{"gitID":"yeggasd"},"content":"     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."},{"lineNumber":94,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"yeggasd"},"content":"    private void assertBehaviorForWrongPassword() {"},{"lineNumber":96,"author":{"gitID":"yeggasd"},"content":"        passwordBoxHandle.run(WRONG_PASSWORD);"},{"lineNumber":97,"author":{"gitID":"yeggasd"},"content":"        assertEquals(\"\", passwordBoxHandle.getInput());"},{"lineNumber":98,"author":{"gitID":"yeggasd"},"content":"        assertEquals(errorStyleOfPasswordBox, passwordBoxHandle.getStyleClass());"},{"lineNumber":99,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":101,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"yeggasd"},"content":"     * Enters the correct password, then verifies that \u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"yeggasd"},"content":"     *      - the text is cleared \u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"yeggasd"},"content":"     *      - the event {@code PasswordCorrectEvent} is raised."},{"lineNumber":105,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"yeggasd"},"content":"    private void assertBehaviorForCorrectPassword() {"},{"lineNumber":107,"author":{"gitID":"yeggasd"},"content":"        passwordBoxHandle.run(CORRECT_PASSWORD);"},{"lineNumber":108,"author":{"gitID":"yeggasd"},"content":"        assertEquals(\"\", passwordBoxHandle.getInput());"},{"lineNumber":109,"author":{"gitID":"yeggasd"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof PasswordCorrectEvent);"},{"lineNumber":110,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"yeggasd"},"content":"}"}],"authorContributionMap":{"yeggasd":85,"Caijun7":2,"-":24}},{"path":"src/test/java/seedu/address/ui/AliasListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.AliasListHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.AliasListEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.GuiTestAssert;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"jingyinno"},"content":"//@@author jingyinno"},{"lineNumber":19,"author":{"gitID":"jingyinno"},"content":"public class AliasListTest extends GuiUnitTest {"},{"lineNumber":20,"author":{"gitID":"jingyinno"},"content":"    private AliasList aliasList;"},{"lineNumber":21,"author":{"gitID":"jingyinno"},"content":"    private AliasListHandle aliasListHandle;"},{"lineNumber":22,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":23,"author":{"gitID":"jingyinno"},"content":"    @Before"},{"lineNumber":24,"author":{"gitID":"jingyinno"},"content":"    public void setUp() {"},{"lineNumber":25,"author":{"gitID":"jingyinno"},"content":"        aliasList \u003d new AliasList();"},{"lineNumber":26,"author":{"gitID":"jingyinno"},"content":"        uiPartRule.setUiPart(aliasList);"},{"lineNumber":27,"author":{"gitID":"jingyinno"},"content":"        aliasListHandle \u003d new AliasListHandle(getChildNode(aliasList.getRoot(), aliasListHandle.ALIAS_LIST_ID));"},{"lineNumber":28,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":30,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"jingyinno"},"content":"    public void checkTable() {"},{"lineNumber":32,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":33,"author":{"gitID":"jingyinno"},"content":"        /* Case: add two aliases in the first row and one alias in the second row */"},{"lineNumber":34,"author":{"gitID":"jingyinno"},"content":"        String[][] expected \u003d new String[][] {{\"add1\", \"alias1\"}, {\"add2\"}};"},{"lineNumber":35,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":36,"author":{"gitID":"jingyinno"},"content":"        // Init alias list and post event"},{"lineNumber":37,"author":{"gitID":"jingyinno"},"content":"        ArrayList\u003cArrayList\u003cString\u003e\u003e expectedList \u003d GuiTestAssert.populateExpectedAliases(expected);"},{"lineNumber":38,"author":{"gitID":"jingyinno"},"content":"        ObservableList\u003cArrayList\u003cString\u003e\u003e obsExpected \u003d FXCollections.observableArrayList(expectedList);"},{"lineNumber":39,"author":{"gitID":"jingyinno"},"content":"        AliasListEvent aliasListEventStub \u003d new AliasListEvent(obsExpected);"},{"lineNumber":40,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":41,"author":{"gitID":"jingyinno"},"content":"        aliasList.init(obsExpected);"},{"lineNumber":42,"author":{"gitID":"jingyinno"},"content":"        aliasList.setStyle();"},{"lineNumber":43,"author":{"gitID":"jingyinno"},"content":"        postNow(aliasListEventStub);"},{"lineNumber":44,"author":{"gitID":"jingyinno"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":45,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":46,"author":{"gitID":"jingyinno"},"content":"        // Assert content of the table"},{"lineNumber":47,"author":{"gitID":"jingyinno"},"content":"        GuiTestAssert.assertTableContent(aliasListHandle.getTables(), expected);"},{"lineNumber":48,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":49,"author":{"gitID":"jingyinno"},"content":"        /* Case: add one alias in the first row */"},{"lineNumber":50,"author":{"gitID":"jingyinno"},"content":"        expected \u003d new String[][] {{\"add1\"}};"},{"lineNumber":51,"author":{"gitID":"jingyinno"},"content":"        expectedList \u003d GuiTestAssert.populateExpectedAliases(expected);"},{"lineNumber":52,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":53,"author":{"gitID":"jingyinno"},"content":"        // Init alias list and post event"},{"lineNumber":54,"author":{"gitID":"jingyinno"},"content":"        obsExpected \u003d FXCollections.observableArrayList(expectedList);"},{"lineNumber":55,"author":{"gitID":"jingyinno"},"content":"        aliasListEventStub \u003d new AliasListEvent(obsExpected);"},{"lineNumber":56,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":57,"author":{"gitID":"jingyinno"},"content":"        aliasList.init(obsExpected);"},{"lineNumber":58,"author":{"gitID":"jingyinno"},"content":"        postNow(aliasListEventStub);"},{"lineNumber":59,"author":{"gitID":"jingyinno"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":60,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":61,"author":{"gitID":"jingyinno"},"content":"        // Assert content of the table"},{"lineNumber":62,"author":{"gitID":"jingyinno"},"content":"        GuiTestAssert.assertTableContent(aliasListHandle.getTables(), expected);"},{"lineNumber":63,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":64,"author":{"gitID":"jingyinno"},"content":"        /* Case: add three aliases in the first row */"},{"lineNumber":65,"author":{"gitID":"jingyinno"},"content":"        expected \u003d new String[][] {{\"add1\", \"alias1\", \"birthday1\"}};"},{"lineNumber":66,"author":{"gitID":"jingyinno"},"content":"        expectedList \u003d GuiTestAssert.populateExpectedAliases(expected);"},{"lineNumber":67,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":68,"author":{"gitID":"jingyinno"},"content":"        // Init alias list and post event"},{"lineNumber":69,"author":{"gitID":"jingyinno"},"content":"        obsExpected \u003d FXCollections.observableArrayList(expectedList);"},{"lineNumber":70,"author":{"gitID":"jingyinno"},"content":"        aliasListEventStub \u003d new AliasListEvent(obsExpected);"},{"lineNumber":71,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":72,"author":{"gitID":"jingyinno"},"content":"        aliasList.init(obsExpected);"},{"lineNumber":73,"author":{"gitID":"jingyinno"},"content":"        postNow(aliasListEventStub);"},{"lineNumber":74,"author":{"gitID":"jingyinno"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":75,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":76,"author":{"gitID":"jingyinno"},"content":"        // Assert content of the table"},{"lineNumber":77,"author":{"gitID":"jingyinno"},"content":"        GuiTestAssert.assertTableContent(aliasListHandle.getTables(), expected);"},{"lineNumber":78,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"jingyinno"},"content":"}"}],"authorContributionMap":{"jingyinno":62,"-":17}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonDetailsCardHandle;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.scene.control.TableColumn;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AliasCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.ui.PersonCard;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String LABEL_DEFAULT_STYLE \u003d \"label\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        expectedCard.getTags().forEach(tag -\u003e"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                assertEquals(expectedCard.getTagStyleClasses(tag), actualCard.getTagStyleClasses(tag)));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                actualCard.getTags());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"yeggasd"},"content":"    //@@author yeggasd"},{"lineNumber":57,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"yeggasd"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":59,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"yeggasd"},"content":"    public static void assertCardDetailsDisplaysPerson(Person expectedPerson, PersonDetailsCardHandle actualCard) {"},{"lineNumber":61,"author":{"gitID":"yeggasd"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":62,"author":{"gitID":"yeggasd"},"content":"        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"},{"lineNumber":63,"author":{"gitID":"yeggasd"},"content":"        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"},{"lineNumber":64,"author":{"gitID":"yeggasd"},"content":"        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"},{"lineNumber":65,"author":{"gitID":"yeggasd"},"content":"        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"},{"lineNumber":66,"author":{"gitID":"yeggasd"},"content":"                actualCard.getTags());"},{"lineNumber":67,"author":{"gitID":"yeggasd"},"content":"        assertTrue(actualCard.getTimeTable() !\u003d null);"},{"lineNumber":68,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"yeggasd"},"content":"    //@@author"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c persons.length; i++) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"yeggasd"},"content":"    //@@author yeggasd"},{"lineNumber":105,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"yeggasd"},"content":"     * Asserts that the tags in {@code actualCard} matches all the tags in {@code expectedPerson} with the correct"},{"lineNumber":107,"author":{"gitID":"yeggasd"},"content":"     * color."},{"lineNumber":108,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"yeggasd"},"content":"    private static void assertTagsEqual(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":110,"author":{"gitID":"yeggasd"},"content":"        List\u003cString\u003e expectedTags \u003d expectedPerson.getTags().stream()"},{"lineNumber":111,"author":{"gitID":"yeggasd"},"content":"                .map(tag -\u003e tag.tagName).collect(Collectors.toList());"},{"lineNumber":112,"author":{"gitID":"yeggasd"},"content":"        assertEquals(expectedTags, actualCard.getTags());"},{"lineNumber":113,"author":{"gitID":"yeggasd"},"content":"        expectedTags.forEach(tag -\u003e"},{"lineNumber":114,"author":{"gitID":"yeggasd"},"content":"                assertEquals(Arrays.asList(LABEL_DEFAULT_STYLE, PersonCard.getColorStyleFor(tag)),"},{"lineNumber":115,"author":{"gitID":"yeggasd"},"content":"                        actualCard.getTagStyleClasses(tag)));"},{"lineNumber":116,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"yeggasd"},"content":"    //@@author"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"jingyinno"},"content":"    //@@author jingyinno"},{"lineNumber":120,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"jingyinno"},"content":"     * Asserts that the content in {@code aliasListTable} matches all the string in {@code expected}"},{"lineNumber":122,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"jingyinno"},"content":"    public static void assertTableContent(ObservableList\u003cTableColumn\u003e aliasListTable, String[][] expected) {"},{"lineNumber":124,"author":{"gitID":"jingyinno"},"content":"        ArrayList\u003cArrayList\u003cString\u003e\u003e expectedList \u003d populateExpectedAliases(expected);"},{"lineNumber":125,"author":{"gitID":"jingyinno"},"content":"        for (int i \u003d 0; i \u003c expectedList.size(); i++) {"},{"lineNumber":126,"author":{"gitID":"jingyinno"},"content":"            for (int j \u003d 0; j \u003c expectedList.get(i).size(); j++) {"},{"lineNumber":127,"author":{"gitID":"jingyinno"},"content":"                TableColumn column \u003d aliasListTable.get(j);"},{"lineNumber":128,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":129,"author":{"gitID":"jingyinno"},"content":"                // Current Row value at column"},{"lineNumber":130,"author":{"gitID":"jingyinno"},"content":"                assertEquals(expectedList.get(i).get(j), column.getCellObservableValue(i).getValue());"},{"lineNumber":131,"author":{"gitID":"jingyinno"},"content":"            }"},{"lineNumber":132,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":135,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"jingyinno"},"content":"     * Asserts that the content in {@code aliasListTable} matches all the string in {@code expected}"},{"lineNumber":137,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"jingyinno"},"content":"    public static void assertTableContent(ObservableList\u003cTableColumn\u003e aliasListTable, Alias[][] expected) {"},{"lineNumber":139,"author":{"gitID":"jingyinno"},"content":"        ArrayList\u003cArrayList\u003cString\u003e\u003e expectedList \u003d populateExpectedAliases(expected);"},{"lineNumber":140,"author":{"gitID":"jingyinno"},"content":"        for (int i \u003d 0; i \u003c expectedList.size(); i++) {"},{"lineNumber":141,"author":{"gitID":"jingyinno"},"content":"            for (int j \u003d 0; j \u003c expectedList.get(i).size(); j++) {"},{"lineNumber":142,"author":{"gitID":"jingyinno"},"content":"                TableColumn column \u003d aliasListTable.get(j);"},{"lineNumber":143,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":144,"author":{"gitID":"jingyinno"},"content":"                // Current Row value at column"},{"lineNumber":145,"author":{"gitID":"jingyinno"},"content":"                assertEquals(expectedList.get(i).get(j), column.getCellObservableValue(i).getValue());"},{"lineNumber":146,"author":{"gitID":"jingyinno"},"content":"            }"},{"lineNumber":147,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":150,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"jingyinno"},"content":"     * Helper method to populate expectedTable with unused empty Alias"},{"lineNumber":152,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"jingyinno"},"content":"    public static ArrayList\u003cArrayList\u003cString\u003e\u003e populateExpectedAliases(String[][] expected) {"},{"lineNumber":154,"author":{"gitID":"jingyinno"},"content":"        String emptyAlias \u003d \"\";"},{"lineNumber":155,"author":{"gitID":"jingyinno"},"content":"        ArrayList\u003cArrayList\u003cString\u003e\u003e expectedList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":156,"author":{"gitID":"jingyinno"},"content":"        for (String[] inner : expected) {"},{"lineNumber":157,"author":{"gitID":"jingyinno"},"content":"            ArrayList\u003cString\u003e innerList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":158,"author":{"gitID":"jingyinno"},"content":"            // Add expected alias for command"},{"lineNumber":159,"author":{"gitID":"jingyinno"},"content":"            for (String alias : inner) {"},{"lineNumber":160,"author":{"gitID":"jingyinno"},"content":"                innerList.add(alias);"},{"lineNumber":161,"author":{"gitID":"jingyinno"},"content":"            }"},{"lineNumber":162,"author":{"gitID":"jingyinno"},"content":"            // Generate empty alias (\"\") for no alias command"},{"lineNumber":163,"author":{"gitID":"jingyinno"},"content":"            while (innerList.size() \u003c AliasCommand.getCommands().size()) {"},{"lineNumber":164,"author":{"gitID":"jingyinno"},"content":"                innerList.add(emptyAlias);"},{"lineNumber":165,"author":{"gitID":"jingyinno"},"content":"            }"},{"lineNumber":166,"author":{"gitID":"jingyinno"},"content":"            expectedList.add(innerList);"},{"lineNumber":167,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"jingyinno"},"content":"        return expectedList;"},{"lineNumber":169,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":171,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":172,"author":{"gitID":"jingyinno"},"content":"     * Helper method to populate expectedTable with unused empty Alias"},{"lineNumber":173,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":174,"author":{"gitID":"jingyinno"},"content":"    public static ArrayList\u003cArrayList\u003cString\u003e\u003e populateExpectedAliases(Alias[][] expected) {"},{"lineNumber":175,"author":{"gitID":"jingyinno"},"content":"        String emptyAlias \u003d \"\";"},{"lineNumber":176,"author":{"gitID":"jingyinno"},"content":"        ArrayList\u003cArrayList\u003cString\u003e\u003e expectedList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":177,"author":{"gitID":"jingyinno"},"content":"        for (Alias[] inner : expected) {"},{"lineNumber":178,"author":{"gitID":"jingyinno"},"content":"            ArrayList\u003cString\u003e innerList \u003d setExpectedAliases(emptyAlias, inner);"},{"lineNumber":179,"author":{"gitID":"jingyinno"},"content":"            expectedList.add(innerList);"},{"lineNumber":180,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"jingyinno"},"content":"        return expectedList;"},{"lineNumber":182,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":184,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":185,"author":{"gitID":"jingyinno"},"content":"     * Helper method to set inner expected aliases"},{"lineNumber":186,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":187,"author":{"gitID":"jingyinno"},"content":"    private static ArrayList\u003cString\u003e setExpectedAliases(String emptyAlias, Alias[] inner) {"},{"lineNumber":188,"author":{"gitID":"jingyinno"},"content":"        ArrayList\u003cString\u003e innerList \u003d createNewInnerList(emptyAlias);"},{"lineNumber":189,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":190,"author":{"gitID":"jingyinno"},"content":"        // reset expected alias for command"},{"lineNumber":191,"author":{"gitID":"jingyinno"},"content":"        for (Alias alias : inner) {"},{"lineNumber":192,"author":{"gitID":"jingyinno"},"content":"            int index \u003d AliasCommand.getCommands().indexOf(alias.getCommand());"},{"lineNumber":193,"author":{"gitID":"jingyinno"},"content":"            innerList.set(index, alias.getAlias());"},{"lineNumber":194,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"jingyinno"},"content":"        return innerList;"},{"lineNumber":196,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":198,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":199,"author":{"gitID":"jingyinno"},"content":"     * Helper method to generate new inner list"},{"lineNumber":200,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":201,"author":{"gitID":"jingyinno"},"content":"    private static ArrayList\u003cString\u003e createNewInnerList(String emptyAlias) {"},{"lineNumber":202,"author":{"gitID":"jingyinno"},"content":"        // Generate empty alias (\"\") for inner list"},{"lineNumber":203,"author":{"gitID":"jingyinno"},"content":"        ArrayList\u003cString\u003e innerList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":204,"author":{"gitID":"jingyinno"},"content":"        for (int i \u003d 0; i \u003c AliasCommand.getCommands().size(); i++) {"},{"lineNumber":205,"author":{"gitID":"jingyinno"},"content":"            innerList.add(emptyAlias);"},{"lineNumber":206,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"jingyinno"},"content":"        return innerList;"},{"lineNumber":208,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"jingyinno"},"content":"    //@@author"},{"lineNumber":210,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yeggasd":28,"jingyinno":91,"-":91}},{"path":"src/test/java/seedu/address/commons/util/StringUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.hamcrest.CoreMatchers.containsString;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.hamcrest.MatcherAssert.assertThat;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class StringUtilTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    //---------------- Tests for isUnsignedPositiveInteger --------------------------------------"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void isUnsignedPositiveInteger() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // EP: empty strings"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // EP: not a number"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // EP: zero"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // EP: zero as prefix"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // EP: signed numbers"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // EP: numbers with white space"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\"));  // Spaces in the middle"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // EP: number larger than Integer.MAX_VALUE"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // EP: valid numbers, should return true"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    //---------------- Tests for containsWordIgnoreCase --------------------------------------"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Invalid equivalence partitions for word: null, empty, multiple words"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Invalid equivalence partitions for sentence: null"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * The four test cases below test one invalid input at a time."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertExceptionThrown(NullPointerException.class, \"typical sentence\", null, Optional.empty());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    private void assertExceptionThrown(Class\u003c? extends Throwable\u003e exceptionClass, String sentence, String word,"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            Optional\u003cString\u003e errorMessage) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        thrown.expect(exceptionClass);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        errorMessage.ifPresent(message -\u003e thrown.expectMessage(message));"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        StringUtil.containsWordIgnoreCase(sentence, word);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"  \","},{"lineNumber":82,"author":{"gitID":"-"},"content":"                Optional.of(\"Word parameter cannot be empty\"));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"aaa BBB\","},{"lineNumber":88,"author":{"gitID":"-"},"content":"                Optional.of(\"Word parameter should be a single word\"));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertExceptionThrown(NullPointerException.class, null, \"abc\", Optional.empty());"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Valid equivalence partitions for word:"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     *   - any word"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     *   - word containing symbols/numbers"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     *   - word with leading/trailing spaces"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Valid equivalence partitions for sentence:"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     *   - empty string"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     *   - one word"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     *   - multiple words"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     *   - sentence with extra spaces"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Possible scenarios returning true:"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     *   - matches first word in sentence"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     *   - last word in sentence"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     *   - middle word in sentence"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     *   - matches multiple words"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Possible scenarios returning false:"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     *   - query word matches part of a sentence word"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     *   - sentence word matches part of the query word"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * The test method below tries to verify all above with a reasonably low number of test cases."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public void containsWordIgnoreCase_validInputs_correctResult() {"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        // Empty sentence"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // Matches a partial word only"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        // Matches word in the sentence, different upper/lower case letters"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        // Matches multiple words in sentence"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    //---------------- Tests for getDetails --------------------------------------"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * Equivalence Partitions: null, valid throwable object"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    public void getDetails_exceptionGiven() {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertThat(StringUtil.getDetails(new FileNotFoundException(\"file not found\")),"},{"lineNumber":152,"author":{"gitID":"-"},"content":"                   containsString(\"java.io.FileNotFoundException: file not found\"));"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    public void getDetails_nullGiven_throwsNullPointerException() {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        StringUtil.getDetails(null);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"yeggasd"},"content":"    //@@author yeggasd"},{"lineNumber":162,"author":{"gitID":"yeggasd"},"content":"    //---------------- Tests for isOddEven --------------------------------------"},{"lineNumber":163,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":164,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":165,"author":{"gitID":"yeggasd"},"content":"    public void isOddEven() {"},{"lineNumber":166,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":167,"author":{"gitID":"yeggasd"},"content":"        // EP: empty strings"},{"lineNumber":168,"author":{"gitID":"yeggasd"},"content":"        assertFalse(StringUtil.isOddEven(\"\")); // Boundary value"},{"lineNumber":169,"author":{"gitID":"yeggasd"},"content":"        assertFalse(StringUtil.isOddEven(\"  \"));"},{"lineNumber":170,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":171,"author":{"gitID":"yeggasd"},"content":"        // EP: odd with white space"},{"lineNumber":172,"author":{"gitID":"yeggasd"},"content":"        assertFalse(StringUtil.isOddEven(\" odd \")); // Leading/trailing spaces"},{"lineNumber":173,"author":{"gitID":"yeggasd"},"content":"        assertFalse(StringUtil.isOddEven(\"od d\"));  // Spaces in the middle"},{"lineNumber":174,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":175,"author":{"gitID":"yeggasd"},"content":"        // EP: even with white space"},{"lineNumber":176,"author":{"gitID":"yeggasd"},"content":"        assertFalse(StringUtil.isOddEven(\" even \")); // Leading/trailing spaces"},{"lineNumber":177,"author":{"gitID":"yeggasd"},"content":"        assertFalse(StringUtil.isOddEven(\"ev en\"));  // Spaces in the middle"},{"lineNumber":178,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":179,"author":{"gitID":"yeggasd"},"content":"        // EP: multiple words"},{"lineNumber":180,"author":{"gitID":"yeggasd"},"content":"        assertFalse(StringUtil.isOddEven(\"odd even\"));"},{"lineNumber":181,"author":{"gitID":"yeggasd"},"content":"        assertFalse(StringUtil.isOddEven(\"even asd\"));"},{"lineNumber":182,"author":{"gitID":"yeggasd"},"content":"        assertFalse(StringUtil.isOddEven(\"odd dsa\"));"},{"lineNumber":183,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":184,"author":{"gitID":"yeggasd"},"content":"        // EP: valid odd or even, should return true"},{"lineNumber":185,"author":{"gitID":"yeggasd"},"content":"        assertTrue(StringUtil.isOddEven(\"odd\"));"},{"lineNumber":186,"author":{"gitID":"yeggasd"},"content":"        assertTrue(StringUtil.isOddEven(\"even\"));"},{"lineNumber":187,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":188,"author":{"gitID":"yeggasd"},"content":"        //EP: valid odd or even with different upper and lower case, should return true"},{"lineNumber":189,"author":{"gitID":"yeggasd"},"content":"        assertTrue(StringUtil.isOddEven(\"OdD\"));"},{"lineNumber":190,"author":{"gitID":"yeggasd"},"content":"        assertTrue(StringUtil.isOddEven(\"EvEn\"));"},{"lineNumber":191,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":193,"author":{"gitID":"yeggasd"},"content":"    //---------------- Tests for getOddEven --------------------------------------"},{"lineNumber":194,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":195,"author":{"gitID":"yeggasd"},"content":"    /*"},{"lineNumber":196,"author":{"gitID":"yeggasd"},"content":"     * Equivalence Partitions: null, empty String, one word, multiple words, odd, even"},{"lineNumber":197,"author":{"gitID":"yeggasd"},"content":"     * and with different upper and lower case"},{"lineNumber":198,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":199,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":200,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":201,"author":{"gitID":"yeggasd"},"content":"    public void getOddEven_nullGiven_throwsNullPointerException() {"},{"lineNumber":202,"author":{"gitID":"yeggasd"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":203,"author":{"gitID":"yeggasd"},"content":"        StringUtil.getOddEven(null);"},{"lineNumber":204,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":206,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":207,"author":{"gitID":"yeggasd"},"content":"    public void getOddEven_invalidStringGiven_nullReturned() {"},{"lineNumber":208,"author":{"gitID":"yeggasd"},"content":"        assertTrue(StringUtil.getOddEven(\"\") \u003d\u003d null);"},{"lineNumber":209,"author":{"gitID":"yeggasd"},"content":"        assertTrue(StringUtil.getOddEven(\"word\") \u003d\u003d null);"},{"lineNumber":210,"author":{"gitID":"yeggasd"},"content":"        assertTrue(StringUtil.getOddEven(\"words words\") \u003d\u003d null);"},{"lineNumber":211,"author":{"gitID":"yeggasd"},"content":"        assertTrue(StringUtil.getOddEven(\"odd odd\") \u003d\u003d null);"},{"lineNumber":212,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":214,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":215,"author":{"gitID":"yeggasd"},"content":"    public void getOddEven_validStringGiven_correctResult() {"},{"lineNumber":216,"author":{"gitID":"yeggasd"},"content":"        assertEquals(StringUtil.getOddEven(\"even\"), Index.fromZeroBased(0));"},{"lineNumber":217,"author":{"gitID":"yeggasd"},"content":"        assertEquals(StringUtil.getOddEven(\"odd\"), Index.fromZeroBased(1));"},{"lineNumber":218,"author":{"gitID":"yeggasd"},"content":"        assertEquals(StringUtil.getOddEven(\"eVeN\"), Index.fromZeroBased(0));"},{"lineNumber":219,"author":{"gitID":"yeggasd"},"content":"        assertEquals(StringUtil.getOddEven(\"oDd\"), Index.fromZeroBased(1));"},{"lineNumber":220,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":221,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":223,"author":{"gitID":"yeggasd"},"content":"    //---------------- Tests for isDay --------------------------------------"},{"lineNumber":224,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":225,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":226,"author":{"gitID":"yeggasd"},"content":"    public void isDay() {"},{"lineNumber":227,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":228,"author":{"gitID":"yeggasd"},"content":"        // EP: empty strings"},{"lineNumber":229,"author":{"gitID":"yeggasd"},"content":"        assertFalse(StringUtil.isDay(\"\")); // Boundary value"},{"lineNumber":230,"author":{"gitID":"yeggasd"},"content":"        assertFalse(StringUtil.isDay(\"  \"));"},{"lineNumber":231,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":232,"author":{"gitID":"yeggasd"},"content":"        // EP: days with white space"},{"lineNumber":233,"author":{"gitID":"yeggasd"},"content":"        assertFalse(StringUtil.isDay(\" monday \")); // Leading/trailing spaces"},{"lineNumber":234,"author":{"gitID":"yeggasd"},"content":"        assertFalse(StringUtil.isDay(\"mon day\"));  // Spaces in the middle"},{"lineNumber":235,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":236,"author":{"gitID":"yeggasd"},"content":"        assertFalse(StringUtil.isDay(\" tuesday \")); // Leading/trailing spaces"},{"lineNumber":237,"author":{"gitID":"yeggasd"},"content":"        assertFalse(StringUtil.isDay(\"tues day\"));  // Spaces in the middle"},{"lineNumber":238,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":239,"author":{"gitID":"yeggasd"},"content":"        assertFalse(StringUtil.isDay(\" wednesday \")); // Leading/trailing spaces"},{"lineNumber":240,"author":{"gitID":"yeggasd"},"content":"        assertFalse(StringUtil.isDay(\"wed day\"));  // Spaces in the middle"},{"lineNumber":241,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":242,"author":{"gitID":"yeggasd"},"content":"        assertFalse(StringUtil.isDay(\" thursday \")); // Leading/trailing spaces"},{"lineNumber":243,"author":{"gitID":"yeggasd"},"content":"        assertFalse(StringUtil.isDay(\"thurs day\"));  // Spaces in the middle"},{"lineNumber":244,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":245,"author":{"gitID":"yeggasd"},"content":"        assertFalse(StringUtil.isDay(\" friday \")); // Leading/trailing spaces"},{"lineNumber":246,"author":{"gitID":"yeggasd"},"content":"        assertFalse(StringUtil.isDay(\"fri day\"));  // Spaces in the middle"},{"lineNumber":247,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":248,"author":{"gitID":"yeggasd"},"content":"        // EP: multiple words"},{"lineNumber":249,"author":{"gitID":"yeggasd"},"content":"        assertFalse(StringUtil.isDay(\"friday monday\"));"},{"lineNumber":250,"author":{"gitID":"yeggasd"},"content":"        assertFalse(StringUtil.isDay(\"monday asd\"));"},{"lineNumber":251,"author":{"gitID":"yeggasd"},"content":"        assertFalse(StringUtil.isDay(\"asd dsa\"));"},{"lineNumber":252,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":253,"author":{"gitID":"yeggasd"},"content":"        // EP: valid days, should return true"},{"lineNumber":254,"author":{"gitID":"yeggasd"},"content":"        assertTrue(StringUtil.isDay(\"monday\"));"},{"lineNumber":255,"author":{"gitID":"yeggasd"},"content":"        assertTrue(StringUtil.isDay(\"tuesday\"));"},{"lineNumber":256,"author":{"gitID":"yeggasd"},"content":"        assertTrue(StringUtil.isDay(\"wednesday\"));"},{"lineNumber":257,"author":{"gitID":"yeggasd"},"content":"        assertTrue(StringUtil.isDay(\"thursday\"));"},{"lineNumber":258,"author":{"gitID":"yeggasd"},"content":"        assertTrue(StringUtil.isDay(\"friday\"));"},{"lineNumber":259,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":260,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":261,"author":{"gitID":"yeggasd"},"content":"        //EP: valid odd or even with different upper and lower case,  should return true"},{"lineNumber":262,"author":{"gitID":"yeggasd"},"content":"        assertTrue(StringUtil.isDay(\"MoNdaY\"));"},{"lineNumber":263,"author":{"gitID":"yeggasd"},"content":"        assertTrue(StringUtil.isDay(\"TueSday\"));"},{"lineNumber":264,"author":{"gitID":"yeggasd"},"content":"        assertTrue(StringUtil.isDay(\"weDNesDAy\"));"},{"lineNumber":265,"author":{"gitID":"yeggasd"},"content":"        assertTrue(StringUtil.isDay(\"THURSDAY\"));"},{"lineNumber":266,"author":{"gitID":"yeggasd"},"content":"        assertTrue(StringUtil.isDay(\"FriDAY\"));"},{"lineNumber":267,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":268,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":269,"author":{"gitID":"yeggasd"},"content":"    //---------------- Tests for capitalize --------------------------------------"},{"lineNumber":270,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":271,"author":{"gitID":"yeggasd"},"content":"    /*"},{"lineNumber":272,"author":{"gitID":"yeggasd"},"content":"     * Equivalence Partitions: null, empty String, one letter, one word and one word with multiple cases"},{"lineNumber":273,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":274,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":275,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":276,"author":{"gitID":"yeggasd"},"content":"    public void capitalize_nullGiven_throwsNullPointerException() {"},{"lineNumber":277,"author":{"gitID":"yeggasd"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":278,"author":{"gitID":"yeggasd"},"content":"        StringUtil.capitalize(null);"},{"lineNumber":279,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":280,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":281,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":282,"author":{"gitID":"yeggasd"},"content":"    public void capitalize_emptyStringGiven_throwsIndexOutOfBoundException() {"},{"lineNumber":283,"author":{"gitID":"yeggasd"},"content":"        thrown.expect(IndexOutOfBoundsException.class);"},{"lineNumber":284,"author":{"gitID":"yeggasd"},"content":"        StringUtil.capitalize(\"\");"},{"lineNumber":285,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":286,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":287,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":288,"author":{"gitID":"yeggasd"},"content":"    public void capitalize_validStringGiven_correctResult() {"},{"lineNumber":289,"author":{"gitID":"yeggasd"},"content":"        assertEquals(StringUtil.capitalize(\"e\"), \"E\");"},{"lineNumber":290,"author":{"gitID":"yeggasd"},"content":"        assertEquals(StringUtil.capitalize(\"even\"), \"Even\");"},{"lineNumber":291,"author":{"gitID":"yeggasd"},"content":"        assertEquals(StringUtil.capitalize(\"eVeN\"), \"Even\");"},{"lineNumber":292,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":293,"author":{"gitID":"yeggasd"},"content":"}"}],"authorContributionMap":{"yeggasd":133,"-":160}},{"path":"src/test/java/seedu/address/ui/BirthdayListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.guihandles.BirthdayListHandle;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.BirthdayListEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"AzuraAiR"},"content":"//@@author AzuraAiR"},{"lineNumber":20,"author":{"gitID":"AzuraAiR"},"content":"public class BirthdayListTest extends GuiUnitTest {"},{"lineNumber":21,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":22,"author":{"gitID":"AzuraAiR"},"content":"    private List\u003cPerson\u003e personListStub;"},{"lineNumber":23,"author":{"gitID":"AzuraAiR"},"content":"    private ObservableList\u003cPerson\u003e personObservableListStub;"},{"lineNumber":24,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":25,"author":{"gitID":"AzuraAiR"},"content":"    private BirthdayList birthdayList;"},{"lineNumber":26,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":27,"author":{"gitID":"AzuraAiR"},"content":"    private BirthdayListEvent birthdayListEventStub;"},{"lineNumber":28,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":29,"author":{"gitID":"AzuraAiR"},"content":"    private BirthdayListHandle birthdaysListHandle;"},{"lineNumber":30,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":31,"author":{"gitID":"AzuraAiR"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"AzuraAiR"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitID":"AzuraAiR"},"content":"        birthdayList \u003d new BirthdayList();"},{"lineNumber":34,"author":{"gitID":"AzuraAiR"},"content":"        uiPartRule.setUiPart(birthdayList);"},{"lineNumber":35,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":36,"author":{"gitID":"AzuraAiR"},"content":"        birthdaysListHandle \u003d new BirthdayListHandle(getChildNode(birthdayList.getRoot(),"},{"lineNumber":37,"author":{"gitID":"AzuraAiR"},"content":"                BirthdayListHandle.BIRTHDAYS_LIST_ID));"},{"lineNumber":38,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":40,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"AzuraAiR"},"content":"    public void display() {"},{"lineNumber":42,"author":{"gitID":"AzuraAiR"},"content":"        String expectedResult \u003d \"1/1/1995 Alice Pauline\\n2/2/1993 Alice Pauline\\n\";"},{"lineNumber":43,"author":{"gitID":"AzuraAiR"},"content":"        birthdayListEventStub \u003d new BirthdayListEvent(\"1/1/1995 Alice Pauline\\n2/2/1993 Alice Pauline\\n\");"},{"lineNumber":44,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":45,"author":{"gitID":"AzuraAiR"},"content":"        // default birthday list text"},{"lineNumber":46,"author":{"gitID":"AzuraAiR"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":47,"author":{"gitID":"AzuraAiR"},"content":"        assertEquals(\"\", birthdaysListHandle.getText());"},{"lineNumber":48,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":49,"author":{"gitID":"AzuraAiR"},"content":"        // new event received, will not go through"},{"lineNumber":50,"author":{"gitID":"AzuraAiR"},"content":"        postNow(birthdayListEventStub);"},{"lineNumber":51,"author":{"gitID":"AzuraAiR"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":52,"author":{"gitID":"AzuraAiR"},"content":"        assertNotEquals(expectedResult, birthdaysListHandle.getText());"},{"lineNumber":53,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":55,"author":{"gitID":"AzuraAiR"},"content":"}"}],"authorContributionMap":{"AzuraAiR":37,"-":18}},{"path":"src/test/java/seedu/address/logic/parser/BirthdaysCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.BirthdaysCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"AzuraAiR"},"content":"//@@author AzuraAiR"},{"lineNumber":12,"author":{"gitID":"AzuraAiR"},"content":"public class BirthdaysCommandParserTest {"},{"lineNumber":13,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":14,"author":{"gitID":"AzuraAiR"},"content":"    private BirthdaysCommandParser parser \u003d new BirthdaysCommandParser();"},{"lineNumber":15,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":16,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"AzuraAiR"},"content":"    public void parse_todaysFieldMissing_success() {"},{"lineNumber":18,"author":{"gitID":"AzuraAiR"},"content":"        assertParseSuccess(parser, \"\", new BirthdaysCommand(false));"},{"lineNumber":19,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":21,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"AzuraAiR"},"content":"    public void parse_todaysFieldPresent_success() {"},{"lineNumber":23,"author":{"gitID":"AzuraAiR"},"content":"        assertParseSuccess(parser, \"today\", new BirthdaysCommand(true));"},{"lineNumber":24,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":26,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"AzuraAiR"},"content":"    public void parse_todaysFieldinvalid_failure() {"},{"lineNumber":28,"author":{"gitID":"AzuraAiR"},"content":"        assertParseFailure(parser, \"tomorrow\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":29,"author":{"gitID":"AzuraAiR"},"content":"                BirthdaysCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"AzuraAiR"},"content":"}"}],"authorContributionMap":{"Caijun7":3,"AzuraAiR":21,"-":7}},{"path":"src/test/java/seedu/address/logic/parser/UnaliasCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ALIAS_DESC_ADD;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_UNALIAS_DESC;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_UNALIAS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UnaliasCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"jingyinno"},"content":"//@@author jingyinno"},{"lineNumber":16,"author":{"gitID":"jingyinno"},"content":"public class UnaliasCommandParserTest {"},{"lineNumber":17,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":18,"author":{"gitID":"jingyinno"},"content":"    private UnaliasCommandParser parser \u003d new UnaliasCommandParser();"},{"lineNumber":19,"author":{"gitID":"jingyinno"},"content":"    private String message \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnaliasCommand.MESSAGE_USAGE);"},{"lineNumber":20,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":21,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"jingyinno"},"content":"    public void parse_compulsoryArgumentMissing_failure() {"},{"lineNumber":23,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":24,"author":{"gitID":"jingyinno"},"content":"        //missing argument"},{"lineNumber":25,"author":{"gitID":"jingyinno"},"content":"        String noArgumentCommand \u003d \"\";"},{"lineNumber":26,"author":{"gitID":"jingyinno"},"content":"        assertParseFailure(parser, noArgumentCommand, message);"},{"lineNumber":27,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":29,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"jingyinno"},"content":"    public void parse_unalias_success() {"},{"lineNumber":31,"author":{"gitID":"jingyinno"},"content":"        assertParseSuccess(parser, VALID_UNALIAS, new UnaliasCommand(VALID_UNALIAS));"},{"lineNumber":32,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":34,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"jingyinno"},"content":"    public void parse_unaliasMultipleArgs_failure() {"},{"lineNumber":36,"author":{"gitID":"jingyinno"},"content":"        assertParseFailure(parser, ALIAS_DESC_ADD, message);"},{"lineNumber":37,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":39,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":40,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"jingyinno"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":42,"author":{"gitID":"jingyinno"},"content":"        assertParseFailure(parser, INVALID_UNALIAS_DESC, Alias.MESSAGE_ALIAS_CONSTRAINTS);"},{"lineNumber":43,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"jingyinno"},"content":"}"}],"authorContributionMap":{"jingyinno":30,"-":14}},{"path":"src/test/java/seedu/address/commons/util/SecurityUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileWriter;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Scanner;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.WrongPasswordException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.Password;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"yeggasd"},"content":"//@@author yeggasd"},{"lineNumber":21,"author":{"gitID":"yeggasd"},"content":"public class SecurityUtilTest {"},{"lineNumber":22,"author":{"gitID":"yeggasd"},"content":"    private static final File TEST_DATA_FILE \u003d new File(\"./src/test/data/sandbox/temp\");"},{"lineNumber":23,"author":{"gitID":"yeggasd"},"content":"    private static final File VALID_DATA_FILE \u003d new File("},{"lineNumber":24,"author":{"gitID":"yeggasd"},"content":"            \"./src/test/data/XmlAddressBookStorageTest/validAddressBook.xml\");"},{"lineNumber":25,"author":{"gitID":"yeggasd"},"content":"    private static final String TEST_DATA \u003d \"\u003cxml\u003e\";"},{"lineNumber":26,"author":{"gitID":"yeggasd"},"content":"    private static final String TEST_PASSWORD \u003d  \"test\";"},{"lineNumber":27,"author":{"gitID":"yeggasd"},"content":"    private static final String WRONG_PASSWORD \u003d \"wrong\";"},{"lineNumber":28,"author":{"gitID":"yeggasd"},"content":"    private static final byte[] hashedPassword \u003d SecurityUtil.hashPassword(TEST_PASSWORD);"},{"lineNumber":29,"author":{"gitID":"yeggasd"},"content":"    @Rule"},{"lineNumber":30,"author":{"gitID":"yeggasd"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":31,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":32,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"yeggasd"},"content":"    public void decrypt_noPassword_success() throws Exception {"},{"lineNumber":34,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":35,"author":{"gitID":"yeggasd"},"content":"        FileWriter writer \u003d new FileWriter(TEST_DATA_FILE);"},{"lineNumber":36,"author":{"gitID":"yeggasd"},"content":"        writer.write(TEST_DATA);"},{"lineNumber":37,"author":{"gitID":"yeggasd"},"content":"        writer.close();"},{"lineNumber":38,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":39,"author":{"gitID":"yeggasd"},"content":"        SecurityUtil.decrypt(TEST_DATA_FILE);"},{"lineNumber":40,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":41,"author":{"gitID":"yeggasd"},"content":"        Scanner reader \u003d new Scanner(TEST_DATA_FILE);"},{"lineNumber":42,"author":{"gitID":"yeggasd"},"content":"        String read \u003d reader.nextLine();"},{"lineNumber":43,"author":{"gitID":"yeggasd"},"content":"        reader.close();"},{"lineNumber":44,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":45,"author":{"gitID":"yeggasd"},"content":"        assertEquals(TEST_DATA, read);"},{"lineNumber":46,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":48,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"yeggasd"},"content":"    public void decrypt_fileProcessorPlainText_success() throws Exception {"},{"lineNumber":50,"author":{"gitID":"yeggasd"},"content":"        FileWriter writer \u003d new FileWriter(TEST_DATA_FILE);"},{"lineNumber":51,"author":{"gitID":"yeggasd"},"content":"        writer.write(TEST_DATA);"},{"lineNumber":52,"author":{"gitID":"yeggasd"},"content":"        writer.close();"},{"lineNumber":53,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":54,"author":{"gitID":"yeggasd"},"content":"        SecurityUtil.decrypt(TEST_DATA_FILE, hashedPassword);"},{"lineNumber":55,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":56,"author":{"gitID":"yeggasd"},"content":"        Scanner reader \u003d new Scanner(TEST_DATA_FILE);"},{"lineNumber":57,"author":{"gitID":"yeggasd"},"content":"        String read \u003d reader.nextLine();"},{"lineNumber":58,"author":{"gitID":"yeggasd"},"content":"        reader.close();"},{"lineNumber":59,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":60,"author":{"gitID":"yeggasd"},"content":"        assertEquals(TEST_DATA, read);"},{"lineNumber":61,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":63,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"yeggasd"},"content":"    public void encryptDecrypt_customisedPassword_success() throws Exception {"},{"lineNumber":65,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":66,"author":{"gitID":"yeggasd"},"content":"        FileWriter writer \u003d new FileWriter(TEST_DATA_FILE);"},{"lineNumber":67,"author":{"gitID":"yeggasd"},"content":"        writer.write(TEST_DATA);"},{"lineNumber":68,"author":{"gitID":"yeggasd"},"content":"        writer.close();"},{"lineNumber":69,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":70,"author":{"gitID":"yeggasd"},"content":"        SecurityUtil.encrypt(TEST_DATA_FILE, hashedPassword);"},{"lineNumber":71,"author":{"gitID":"yeggasd"},"content":"        SecurityUtil.decrypt(TEST_DATA_FILE, hashedPassword);"},{"lineNumber":72,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":73,"author":{"gitID":"yeggasd"},"content":"        Scanner reader \u003d new Scanner(TEST_DATA_FILE);"},{"lineNumber":74,"author":{"gitID":"yeggasd"},"content":"        String read \u003d reader.nextLine();"},{"lineNumber":75,"author":{"gitID":"yeggasd"},"content":"        reader.close();"},{"lineNumber":76,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":77,"author":{"gitID":"yeggasd"},"content":"        assertEquals(TEST_DATA, read);"},{"lineNumber":78,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":80,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"yeggasd"},"content":"    public void decrypt_withPassword_throwsWrongPasswordException() throws Exception {"},{"lineNumber":82,"author":{"gitID":"yeggasd"},"content":"        FileWriter writer \u003d new FileWriter(TEST_DATA_FILE);"},{"lineNumber":83,"author":{"gitID":"yeggasd"},"content":"        writer.write(TEST_DATA);"},{"lineNumber":84,"author":{"gitID":"yeggasd"},"content":"        writer.close();"},{"lineNumber":85,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":86,"author":{"gitID":"yeggasd"},"content":"        SecurityUtil.encrypt(TEST_DATA_FILE, hashedPassword);"},{"lineNumber":87,"author":{"gitID":"yeggasd"},"content":"        thrown.expect(WrongPasswordException.class);"},{"lineNumber":88,"author":{"gitID":"yeggasd"},"content":"        SecurityUtil.decrypt(TEST_DATA_FILE);"},{"lineNumber":89,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":91,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"yeggasd"},"content":"    public void encryptDecrypt_wrongPassword_throwsWrongPasswordException() throws Exception {"},{"lineNumber":93,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":94,"author":{"gitID":"yeggasd"},"content":"        SecurityUtil.encrypt(VALID_DATA_FILE, hashedPassword);"},{"lineNumber":95,"author":{"gitID":"yeggasd"},"content":"        thrown.expect(WrongPasswordException.class);"},{"lineNumber":96,"author":{"gitID":"yeggasd"},"content":"        SecurityUtil.decryptFile(VALID_DATA_FILE, new Password(WRONG_PASSWORD));"},{"lineNumber":97,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":99,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"yeggasd"},"content":"    public void encryptDecrypt_wrongPasswordBadPadding_throwsWrongPasswordException() throws Exception {"},{"lineNumber":101,"author":{"gitID":"yeggasd"},"content":"        FileWriter writer \u003d new FileWriter(TEST_DATA_FILE);"},{"lineNumber":102,"author":{"gitID":"yeggasd"},"content":"        writer.write(TEST_DATA);"},{"lineNumber":103,"author":{"gitID":"yeggasd"},"content":"        writer.close();"},{"lineNumber":104,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":105,"author":{"gitID":"yeggasd"},"content":"        SecurityUtil.encryptFile(TEST_DATA_FILE, new Password(TEST_PASSWORD));"},{"lineNumber":106,"author":{"gitID":"yeggasd"},"content":"        thrown.expect(WrongPasswordException.class);"},{"lineNumber":107,"author":{"gitID":"yeggasd"},"content":"        SecurityUtil.decryptFile(TEST_DATA_FILE, new Password(WRONG_PASSWORD));"},{"lineNumber":108,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":110,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"yeggasd"},"content":"    public void encryptDecryptFile_wrongPassword_throwsWrongPasswordException() throws Exception {"},{"lineNumber":112,"author":{"gitID":"yeggasd"},"content":"        byte[] hashedWrong \u003d SecurityUtil.hashPassword(WRONG_PASSWORD);"},{"lineNumber":113,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":114,"author":{"gitID":"yeggasd"},"content":"        FileWriter writer \u003d new FileWriter(TEST_DATA_FILE);"},{"lineNumber":115,"author":{"gitID":"yeggasd"},"content":"        writer.write(TEST_DATA);"},{"lineNumber":116,"author":{"gitID":"yeggasd"},"content":"        writer.close();"},{"lineNumber":117,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":118,"author":{"gitID":"yeggasd"},"content":"        SecurityUtil.encrypt(TEST_DATA_FILE, hashedPassword);"},{"lineNumber":119,"author":{"gitID":"yeggasd"},"content":"        thrown.expect(WrongPasswordException.class);"},{"lineNumber":120,"author":{"gitID":"yeggasd"},"content":"        SecurityUtil.decrypt(TEST_DATA_FILE, hashedWrong);"},{"lineNumber":121,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":123,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":124,"author":{"gitID":"yeggasd"},"content":"    public void encrypt_wrongPasswordLength_throwsAssertionError() throws Exception {"},{"lineNumber":125,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":126,"author":{"gitID":"yeggasd"},"content":"        FileWriter writer \u003d new FileWriter(TEST_DATA_FILE);"},{"lineNumber":127,"author":{"gitID":"yeggasd"},"content":"        writer.write(TEST_DATA);"},{"lineNumber":128,"author":{"gitID":"yeggasd"},"content":"        writer.close();"},{"lineNumber":129,"author":{"gitID":"yeggasd"},"content":"        byte[] truncatedHashedPassword \u003d Arrays.copyOf(hashedPassword, 13);"},{"lineNumber":130,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":131,"author":{"gitID":"yeggasd"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":132,"author":{"gitID":"yeggasd"},"content":"        SecurityUtil.encrypt(TEST_DATA_FILE, truncatedHashedPassword);"},{"lineNumber":133,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":135,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":136,"author":{"gitID":"yeggasd"},"content":"    public void decrypt_wrongPasswordLength_throwsAssertionError() throws Exception {"},{"lineNumber":137,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":138,"author":{"gitID":"yeggasd"},"content":"        FileWriter writer \u003d new FileWriter(TEST_DATA_FILE);"},{"lineNumber":139,"author":{"gitID":"yeggasd"},"content":"        writer.write(TEST_DATA);"},{"lineNumber":140,"author":{"gitID":"yeggasd"},"content":"        writer.close();"},{"lineNumber":141,"author":{"gitID":"yeggasd"},"content":"        byte[] truncatedHashedPassword \u003d Arrays.copyOf(hashedPassword, 13);"},{"lineNumber":142,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":143,"author":{"gitID":"yeggasd"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":144,"author":{"gitID":"yeggasd"},"content":"        SecurityUtil.decrypt(TEST_DATA_FILE, truncatedHashedPassword);"},{"lineNumber":145,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":147,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":148,"author":{"gitID":"yeggasd"},"content":"    public void decryptEncrypt_null_throwsNullPointerExceptionError() throws Exception {"},{"lineNumber":149,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":150,"author":{"gitID":"yeggasd"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e SecurityUtil.encrypt(null, hashedPassword));"},{"lineNumber":151,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":152,"author":{"gitID":"yeggasd"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e SecurityUtil.encrypt(TEST_DATA_FILE, null));"},{"lineNumber":153,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":154,"author":{"gitID":"yeggasd"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e SecurityUtil.decrypt(null));"},{"lineNumber":155,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":156,"author":{"gitID":"yeggasd"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e SecurityUtil.decrypt(null, hashedPassword));"},{"lineNumber":157,"author":{"gitID":"yeggasd"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e SecurityUtil.decrypt(TEST_DATA_FILE, null));"},{"lineNumber":158,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":159,"author":{"gitID":"yeggasd"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e SecurityUtil.hashPassword(null));"},{"lineNumber":160,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":161,"author":{"gitID":"yeggasd"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e SecurityUtil.decryptFile(TEST_DATA_FILE, null));"},{"lineNumber":162,"author":{"gitID":"yeggasd"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e SecurityUtil.decryptFile(null, new Password(\"asd\")));"},{"lineNumber":163,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":164,"author":{"gitID":"yeggasd"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e  SecurityUtil.encryptFile(null, new Password(\"asd\")));"},{"lineNumber":165,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":166,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":168,"author":{"gitID":"yeggasd"},"content":"    @After"},{"lineNumber":169,"author":{"gitID":"yeggasd"},"content":"    public void reset() throws Exception {"},{"lineNumber":170,"author":{"gitID":"yeggasd"},"content":"        SecurityUtil.decrypt(VALID_DATA_FILE, hashedPassword);"},{"lineNumber":171,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"yeggasd"},"content":"}"}],"authorContributionMap":{"yeggasd":153,"-":19}},{"path":"src/test/java/seedu/address/logic/parser/AliasCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ALIAS_DESC_ADD;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ALIAS_DESC_ALIAS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ALIAS_DESC_CLEAR;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ALIAS_DESC_DECRYPT;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ALIAS_DESC_DELETE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ALIAS_DESC_EDIT;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ALIAS_DESC_ENCRYPT;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ALIAS_DESC_EXIT;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ALIAS_DESC_EXPORT;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ALIAS_DESC_FIND;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ALIAS_DESC_HELP;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ALIAS_DESC_HISTORY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ALIAS_DESC_IMPORT;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ALIAS_DESC_LIST;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ALIAS_DESC_MAP1;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ALIAS_DESC_REDO;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ALIAS_DESC_SELECT;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ALIAS_DESC_UNALIAS;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ALIAS_DESC_UNDO;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ALIAS_DESC_UNION;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ALIAS_DESC_UPLOAD;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ALIAS_DESC_VACANT;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ALIAS_SYNTAX_DESC;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_COMMAND_SYNTAX_DESC;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALIAS_ADD;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALIAS_ALIAS;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALIAS_CLEAR;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALIAS_DECRYPT;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALIAS_DELETE;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALIAS_EDIT;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALIAS_ENCRYPT;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALIAS_EXIT;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALIAS_EXPORT;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALIAS_FIND;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALIAS_HELP;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALIAS_HISTORY;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALIAS_IMPORT;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALIAS_LIST;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALIAS_MAP1;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALIAS_REDO;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALIAS_SELECT;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALIAS_UNALIAS;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALIAS_UNDO;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALIAS_UNION;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALIAS_UPLOAD;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALIAS_VACANT;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AliasCommand;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExportCommand;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ImportCommand;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.MapCommand;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.PasswordCommand;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RemovePasswordCommand;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.TimetableUnionCommand;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UnaliasCommand;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UploadCommand;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.VacantCommand;"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AliasBuilder;"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"jingyinno"},"content":"//@@author jingyinno"},{"lineNumber":84,"author":{"gitID":"jingyinno"},"content":"public class AliasCommandParserTest {"},{"lineNumber":85,"author":{"gitID":"jingyinno"},"content":"    private AliasCommandParser parser \u003d new AliasCommandParser();"},{"lineNumber":86,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":87,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"jingyinno"},"content":"    public void parse_addAlias_success() {"},{"lineNumber":89,"author":{"gitID":"jingyinno"},"content":"        Alias expectedAddAlias \u003d new AliasBuilder().withCommand(AddCommand.COMMAND_WORD)"},{"lineNumber":90,"author":{"gitID":"jingyinno"},"content":"                .withAlias(VALID_ALIAS_ADD).build();"},{"lineNumber":91,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":92,"author":{"gitID":"jingyinno"},"content":"        assertParseSuccess(parser, ALIAS_DESC_ADD, new AliasCommand(expectedAddAlias));"},{"lineNumber":93,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":95,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"jingyinno"},"content":"    public void parse_aliasAlias_success() {"},{"lineNumber":97,"author":{"gitID":"jingyinno"},"content":"        Alias expectedAliasAlias \u003d new AliasBuilder().withCommand(AliasCommand.COMMAND_WORD)"},{"lineNumber":98,"author":{"gitID":"jingyinno"},"content":"                .withAlias(VALID_ALIAS_ALIAS).build();"},{"lineNumber":99,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":100,"author":{"gitID":"jingyinno"},"content":"        assertParseSuccess(parser, ALIAS_DESC_ALIAS, new AliasCommand(expectedAliasAlias));"},{"lineNumber":101,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":103,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"jingyinno"},"content":"    public void parse_clearAlias_success() {"},{"lineNumber":105,"author":{"gitID":"jingyinno"},"content":"        Alias expectedClearAlias \u003d new AliasBuilder().withCommand(ClearCommand.COMMAND_WORD)"},{"lineNumber":106,"author":{"gitID":"jingyinno"},"content":"                .withAlias(VALID_ALIAS_CLEAR).build();"},{"lineNumber":107,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":108,"author":{"gitID":"jingyinno"},"content":"        assertParseSuccess(parser, ALIAS_DESC_CLEAR, new AliasCommand(expectedClearAlias));"},{"lineNumber":109,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":111,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"jingyinno"},"content":"    public void parse_deleteAlias_success() {"},{"lineNumber":113,"author":{"gitID":"jingyinno"},"content":"        Alias expectedDeleteAlias \u003d new AliasBuilder().withCommand(DeleteCommand.COMMAND_WORD)"},{"lineNumber":114,"author":{"gitID":"jingyinno"},"content":"                .withAlias(VALID_ALIAS_DELETE).build();"},{"lineNumber":115,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":116,"author":{"gitID":"jingyinno"},"content":"        assertParseSuccess(parser, ALIAS_DESC_DELETE, new AliasCommand(expectedDeleteAlias));"},{"lineNumber":117,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":119,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"jingyinno"},"content":"    public void parse_editAlias_success() {"},{"lineNumber":121,"author":{"gitID":"jingyinno"},"content":"        Alias expectedEditAlias \u003d new AliasBuilder().withCommand(EditCommand.COMMAND_WORD)"},{"lineNumber":122,"author":{"gitID":"jingyinno"},"content":"                .withAlias(VALID_ALIAS_EDIT).build();"},{"lineNumber":123,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":124,"author":{"gitID":"jingyinno"},"content":"        assertParseSuccess(parser, ALIAS_DESC_EDIT, new AliasCommand(expectedEditAlias));"},{"lineNumber":125,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":127,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":128,"author":{"gitID":"jingyinno"},"content":"    public void parse_exitAlias_success() {"},{"lineNumber":129,"author":{"gitID":"jingyinno"},"content":"        Alias expectedExitAlias \u003d new AliasBuilder().withCommand(ExitCommand.COMMAND_WORD)"},{"lineNumber":130,"author":{"gitID":"jingyinno"},"content":"                .withAlias(VALID_ALIAS_EXIT).build();"},{"lineNumber":131,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":132,"author":{"gitID":"jingyinno"},"content":"        assertParseSuccess(parser, ALIAS_DESC_EXIT, new AliasCommand(expectedExitAlias));"},{"lineNumber":133,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":135,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":136,"author":{"gitID":"jingyinno"},"content":"    public void parse_findAlias_success() {"},{"lineNumber":137,"author":{"gitID":"jingyinno"},"content":"        Alias expectedFindAlias \u003d new AliasBuilder().withCommand(FindCommand.COMMAND_WORD)"},{"lineNumber":138,"author":{"gitID":"jingyinno"},"content":"                .withAlias(VALID_ALIAS_FIND).build();"},{"lineNumber":139,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":140,"author":{"gitID":"jingyinno"},"content":"        assertParseSuccess(parser, ALIAS_DESC_FIND, new AliasCommand(expectedFindAlias));"},{"lineNumber":141,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":143,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":144,"author":{"gitID":"jingyinno"},"content":"    public void parse_helpAlias_success() {"},{"lineNumber":145,"author":{"gitID":"jingyinno"},"content":"        Alias expectedHelpAlias \u003d new AliasBuilder().withCommand(HelpCommand.COMMAND_WORD)"},{"lineNumber":146,"author":{"gitID":"jingyinno"},"content":"                .withAlias(VALID_ALIAS_HELP).build();"},{"lineNumber":147,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":148,"author":{"gitID":"jingyinno"},"content":"        assertParseSuccess(parser, ALIAS_DESC_HELP, new AliasCommand(expectedHelpAlias));"},{"lineNumber":149,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":151,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":152,"author":{"gitID":"jingyinno"},"content":"    public void parse_historyAlias_success() {"},{"lineNumber":153,"author":{"gitID":"jingyinno"},"content":"        Alias expectedHistoryAlias \u003d new AliasBuilder().withCommand(HistoryCommand.COMMAND_WORD)"},{"lineNumber":154,"author":{"gitID":"jingyinno"},"content":"                .withAlias(VALID_ALIAS_HISTORY).build();"},{"lineNumber":155,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":156,"author":{"gitID":"jingyinno"},"content":"        assertParseSuccess(parser, ALIAS_DESC_HISTORY, new AliasCommand(expectedHistoryAlias));"},{"lineNumber":157,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":159,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":160,"author":{"gitID":"jingyinno"},"content":"    public void parse_importAlias_success() {"},{"lineNumber":161,"author":{"gitID":"jingyinno"},"content":"        Alias expectedImportAlias \u003d new AliasBuilder().withCommand(ImportCommand.COMMAND_WORD)"},{"lineNumber":162,"author":{"gitID":"jingyinno"},"content":"                .withAlias(VALID_ALIAS_IMPORT).build();"},{"lineNumber":163,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":164,"author":{"gitID":"jingyinno"},"content":"        assertParseSuccess(parser, ALIAS_DESC_IMPORT, new AliasCommand(expectedImportAlias));"},{"lineNumber":165,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":167,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":168,"author":{"gitID":"jingyinno"},"content":"    public void parse_listAlias_success() {"},{"lineNumber":169,"author":{"gitID":"jingyinno"},"content":"        Alias expectedListAlias \u003d new AliasBuilder().withCommand(ListCommand.COMMAND_WORD)"},{"lineNumber":170,"author":{"gitID":"jingyinno"},"content":"                .withAlias(VALID_ALIAS_LIST).build();"},{"lineNumber":171,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":172,"author":{"gitID":"jingyinno"},"content":"        assertParseSuccess(parser, ALIAS_DESC_LIST, new AliasCommand(expectedListAlias));"},{"lineNumber":173,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":175,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":176,"author":{"gitID":"jingyinno"},"content":"    public void parse_redoAlias_success() {"},{"lineNumber":177,"author":{"gitID":"jingyinno"},"content":"        Alias expectedRedoAlias \u003d new AliasBuilder().withCommand(RedoCommand.COMMAND_WORD)"},{"lineNumber":178,"author":{"gitID":"jingyinno"},"content":"                .withAlias(VALID_ALIAS_REDO).build();"},{"lineNumber":179,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":180,"author":{"gitID":"jingyinno"},"content":"        assertParseSuccess(parser, ALIAS_DESC_REDO, new AliasCommand(expectedRedoAlias));"},{"lineNumber":181,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":183,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":184,"author":{"gitID":"jingyinno"},"content":"    public void parse_selectAlias_success() {"},{"lineNumber":185,"author":{"gitID":"jingyinno"},"content":"        Alias expectedSelectAlias \u003d new AliasBuilder().withCommand(SelectCommand.COMMAND_WORD)"},{"lineNumber":186,"author":{"gitID":"jingyinno"},"content":"                .withAlias(VALID_ALIAS_SELECT).build();"},{"lineNumber":187,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":188,"author":{"gitID":"jingyinno"},"content":"        assertParseSuccess(parser, ALIAS_DESC_SELECT, new AliasCommand(expectedSelectAlias));"},{"lineNumber":189,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":191,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":192,"author":{"gitID":"jingyinno"},"content":"    public void parse_undoAlias_success() {"},{"lineNumber":193,"author":{"gitID":"jingyinno"},"content":"        Alias expectedUndoAlias \u003d new AliasBuilder().withCommand(UndoCommand.COMMAND_WORD)"},{"lineNumber":194,"author":{"gitID":"jingyinno"},"content":"                .withAlias(VALID_ALIAS_UNDO).build();"},{"lineNumber":195,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":196,"author":{"gitID":"jingyinno"},"content":"        assertParseSuccess(parser, ALIAS_DESC_UNDO, new AliasCommand(expectedUndoAlias));"},{"lineNumber":197,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":199,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":200,"author":{"gitID":"jingyinno"},"content":"    public void parse_encryptAlias_success() {"},{"lineNumber":201,"author":{"gitID":"jingyinno"},"content":"        Alias expectedEncryptAlias \u003d new AliasBuilder().withCommand(PasswordCommand.COMMAND_WORD)"},{"lineNumber":202,"author":{"gitID":"jingyinno"},"content":"                .withAlias(VALID_ALIAS_ENCRYPT).build();"},{"lineNumber":203,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":204,"author":{"gitID":"jingyinno"},"content":"        assertParseSuccess(parser, ALIAS_DESC_ENCRYPT, new AliasCommand(expectedEncryptAlias));"},{"lineNumber":205,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":207,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":208,"author":{"gitID":"jingyinno"},"content":"    public void parse_decryptAlias_success() {"},{"lineNumber":209,"author":{"gitID":"jingyinno"},"content":"        Alias expectedDecryptAlias \u003d new AliasBuilder().withCommand(RemovePasswordCommand.COMMAND_WORD)"},{"lineNumber":210,"author":{"gitID":"jingyinno"},"content":"                .withAlias(VALID_ALIAS_DECRYPT).build();"},{"lineNumber":211,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":212,"author":{"gitID":"jingyinno"},"content":"        assertParseSuccess(parser, ALIAS_DESC_DECRYPT, new AliasCommand(expectedDecryptAlias));"},{"lineNumber":213,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":215,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":216,"author":{"gitID":"jingyinno"},"content":"    public void parse_mapAlias_success() {"},{"lineNumber":217,"author":{"gitID":"jingyinno"},"content":"        Alias expectedMapAlias \u003d new AliasBuilder().withCommand(MapCommand.COMMAND_WORD)"},{"lineNumber":218,"author":{"gitID":"jingyinno"},"content":"                .withAlias(VALID_ALIAS_MAP1).build();"},{"lineNumber":219,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":220,"author":{"gitID":"jingyinno"},"content":"        assertParseSuccess(parser, ALIAS_DESC_MAP1, new AliasCommand(expectedMapAlias));"},{"lineNumber":221,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":223,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":224,"author":{"gitID":"jingyinno"},"content":"    public void parse_unionAlias_success() {"},{"lineNumber":225,"author":{"gitID":"jingyinno"},"content":"        Alias expectedUnionAlias \u003d new AliasBuilder().withCommand(TimetableUnionCommand.COMMAND_WORD)"},{"lineNumber":226,"author":{"gitID":"jingyinno"},"content":"                .withAlias(VALID_ALIAS_UNION).build();"},{"lineNumber":227,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":228,"author":{"gitID":"jingyinno"},"content":"        assertParseSuccess(parser, ALIAS_DESC_UNION, new AliasCommand(expectedUnionAlias));"},{"lineNumber":229,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":231,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":232,"author":{"gitID":"jingyinno"},"content":"    public void parse_unaliasAlias_success() {"},{"lineNumber":233,"author":{"gitID":"jingyinno"},"content":"        Alias expectedUnaliasAlias \u003d new AliasBuilder().withCommand(UnaliasCommand.COMMAND_WORD)"},{"lineNumber":234,"author":{"gitID":"jingyinno"},"content":"                .withAlias(VALID_ALIAS_UNALIAS).build();"},{"lineNumber":235,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":236,"author":{"gitID":"jingyinno"},"content":"        assertParseSuccess(parser, ALIAS_DESC_UNALIAS, new AliasCommand(expectedUnaliasAlias));"},{"lineNumber":237,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":239,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":240,"author":{"gitID":"jingyinno"},"content":"    public void parse_uploadAlias_success() {"},{"lineNumber":241,"author":{"gitID":"jingyinno"},"content":"        Alias expectedUploadAlias \u003d new AliasBuilder().withCommand(UploadCommand.COMMAND_WORD)"},{"lineNumber":242,"author":{"gitID":"jingyinno"},"content":"                .withAlias(VALID_ALIAS_UPLOAD).build();"},{"lineNumber":243,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":244,"author":{"gitID":"jingyinno"},"content":"        assertParseSuccess(parser, ALIAS_DESC_UPLOAD, new AliasCommand(expectedUploadAlias));"},{"lineNumber":245,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":246,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":247,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":248,"author":{"gitID":"jingyinno"},"content":"    public void parse_exportAlias_success() {"},{"lineNumber":249,"author":{"gitID":"jingyinno"},"content":"        Alias expectedExportAlias \u003d new AliasBuilder().withCommand(ExportCommand.COMMAND_WORD)"},{"lineNumber":250,"author":{"gitID":"jingyinno"},"content":"                .withAlias(VALID_ALIAS_EXPORT).build();"},{"lineNumber":251,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":252,"author":{"gitID":"jingyinno"},"content":"        assertParseSuccess(parser, ALIAS_DESC_EXPORT, new AliasCommand(expectedExportAlias));"},{"lineNumber":253,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":255,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":256,"author":{"gitID":"jingyinno"},"content":"    public void parse_vacantAlias_success() {"},{"lineNumber":257,"author":{"gitID":"jingyinno"},"content":"        Alias expectedVacantAlias \u003d new AliasBuilder().withCommand(VacantCommand.COMMAND_WORD)"},{"lineNumber":258,"author":{"gitID":"jingyinno"},"content":"                .withAlias(VALID_ALIAS_VACANT).build();"},{"lineNumber":259,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":260,"author":{"gitID":"jingyinno"},"content":"        assertParseSuccess(parser, ALIAS_DESC_VACANT, new AliasCommand(expectedVacantAlias));"},{"lineNumber":261,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":262,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":263,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":264,"author":{"gitID":"jingyinno"},"content":"    public void parse_invalidAliasSyntax_failure() {"},{"lineNumber":265,"author":{"gitID":"jingyinno"},"content":"        //alias with symbols failure"},{"lineNumber":266,"author":{"gitID":"jingyinno"},"content":"        assertParseFailure(parser, INVALID_ALIAS_SYNTAX_DESC, Alias.MESSAGE_ALIAS_CONSTRAINTS);"},{"lineNumber":267,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":268,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":269,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":270,"author":{"gitID":"jingyinno"},"content":"    public void parse_invalidCommandSyntax_failure() {"},{"lineNumber":271,"author":{"gitID":"jingyinno"},"content":"        //command with symbols failure"},{"lineNumber":272,"author":{"gitID":"jingyinno"},"content":"        assertParseFailure(parser, INVALID_COMMAND_SYNTAX_DESC, Alias.MESSAGE_ALIAS_CONSTRAINTS);"},{"lineNumber":273,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":274,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":275,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":276,"author":{"gitID":"jingyinno"},"content":"    public void parse_compulsoryArgumentMissing_failure() {"},{"lineNumber":277,"author":{"gitID":"jingyinno"},"content":"        String message \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AliasCommand.MESSAGE_USAGE);"},{"lineNumber":278,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":279,"author":{"gitID":"jingyinno"},"content":"        //missing command/alias word argument"},{"lineNumber":280,"author":{"gitID":"jingyinno"},"content":"        String missingArgumentCommand \u003d AddCommand.COMMAND_WORD;"},{"lineNumber":281,"author":{"gitID":"jingyinno"},"content":"        assertParseFailure(parser, missingArgumentCommand, message);"},{"lineNumber":282,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":283,"author":{"gitID":"jingyinno"},"content":"        //missing both arguments"},{"lineNumber":284,"author":{"gitID":"jingyinno"},"content":"        String noArgumentCommand \u003d \"\";"},{"lineNumber":285,"author":{"gitID":"jingyinno"},"content":"        assertParseFailure(parser, noArgumentCommand, message);"},{"lineNumber":286,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":287,"author":{"gitID":"jingyinno"},"content":"}"}],"authorContributionMap":{"jingyinno":205,"-":82}},{"path":"src/test/java/seedu/address/logic/parser/RemovePasswordCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RemovePasswordCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"yeggasd"},"content":"//@@author yeggasd"},{"lineNumber":11,"author":{"gitID":"yeggasd"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"yeggasd"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":13,"author":{"gitID":"yeggasd"},"content":" * outside of the RemovePasswordCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":14,"author":{"gitID":"yeggasd"},"content":" * same path through the RemovePasswordCommand, and therefore we test only one of them."},{"lineNumber":15,"author":{"gitID":"yeggasd"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":16,"author":{"gitID":"yeggasd"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":17,"author":{"gitID":"yeggasd"},"content":" */"},{"lineNumber":18,"author":{"gitID":"yeggasd"},"content":"public class RemovePasswordCommandParserTest {"},{"lineNumber":19,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":20,"author":{"gitID":"yeggasd"},"content":"    private RemovePasswordCommandParser parser \u003d new RemovePasswordCommandParser();"},{"lineNumber":21,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":22,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"yeggasd"},"content":"    public void parse_validArgs_returnsParseCommand() {"},{"lineNumber":24,"author":{"gitID":"yeggasd"},"content":"        Command command \u003d parser.parse(\"\");"},{"lineNumber":25,"author":{"gitID":"yeggasd"},"content":"        assertTrue(command instanceof RemovePasswordCommand);"},{"lineNumber":26,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"yeggasd"},"content":"}"}],"authorContributionMap":{"yeggasd":18,"-":9}},{"path":"src/test/java/seedu/address/logic/parser/ImportCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":"import seedu.address.logic.commands.ImportCommand;"},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":"//@@author Caijun7"},{"lineNumber":12,"author":{"gitID":"Caijun7"},"content":"public class ImportCommandParserTest {"},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":"    private static final String TEST_PASSWORD \u003d \"test\";"},{"lineNumber":14,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":"    private ImportCommandParser parser \u003d new ImportCommandParser();"},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":17,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"Caijun7"},"content":"    public void parse_validOneArgs_returnsImportCommand() {"},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":"        assertParseSuccess(parser, \"validString\", new ImportCommand(\"validString\", TEST_PASSWORD));"},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":22,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"Caijun7"},"content":"    public void parse_validTwoArgs_returnsImportCommand() {"},{"lineNumber":24,"author":{"gitID":"Caijun7"},"content":"        assertParseSuccess(parser, \"validString test\", new ImportCommand(\"validString\", TEST_PASSWORD));"},{"lineNumber":25,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":27,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"Caijun7"},"content":"    public void parse_invalidThreeArg_throwsParseException() {"},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":"        assertParseFailure(parser, \"invalidString is invalid\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":30,"author":{"gitID":"Caijun7"},"content":"                ImportCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":33,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"Caijun7"},"content":"    public void parse_invalidZeroArgs_throwsParseException() {"},{"lineNumber":35,"author":{"gitID":"Caijun7"},"content":"        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":32,"-":5}},{"path":"src/test/java/seedu/address/logic/parser/VacantCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_BUILDING_1;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_BUILDING_2;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BUILDING_1;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.VacantCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.building.Building;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"jingyinno"},"content":"//@@author jingyinno"},{"lineNumber":17,"author":{"gitID":"jingyinno"},"content":"public class VacantCommandParserTest {"},{"lineNumber":18,"author":{"gitID":"jingyinno"},"content":"    private VacantCommandParser parser \u003d new VacantCommandParser();"},{"lineNumber":19,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":20,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"jingyinno"},"content":"    public void parse_retrieveBuilding_success() {"},{"lineNumber":22,"author":{"gitID":"jingyinno"},"content":"        assertParseSuccess(parser, VALID_BUILDING_1, new VacantCommand(new Building(VALID_BUILDING_1)));"},{"lineNumber":23,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":25,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"jingyinno"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":27,"author":{"gitID":"jingyinno"},"content":"        assertParseFailure(parser, INVALID_BUILDING_1, Building.MESSAGE_BUILDING_CONSTRAINTS);"},{"lineNumber":28,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":30,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"jingyinno"},"content":"    public void parse_invalidNumberOfArguments_failure() {"},{"lineNumber":32,"author":{"gitID":"jingyinno"},"content":"        String message \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, VacantCommand.MESSAGE_USAGE);"},{"lineNumber":33,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":34,"author":{"gitID":"jingyinno"},"content":"        //more than one building name arguement"},{"lineNumber":35,"author":{"gitID":"jingyinno"},"content":"        String tooManyArgumentsCommand \u003d INVALID_BUILDING_2;"},{"lineNumber":36,"author":{"gitID":"jingyinno"},"content":"        assertParseFailure(parser, tooManyArgumentsCommand, message);"},{"lineNumber":37,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":38,"author":{"gitID":"jingyinno"},"content":"        //missing both arguments"},{"lineNumber":39,"author":{"gitID":"jingyinno"},"content":"        String noArgumentCommand \u003d \"\";"},{"lineNumber":40,"author":{"gitID":"jingyinno"},"content":"        assertParseFailure(parser, noArgumentCommand, message);"},{"lineNumber":41,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":42,"author":{"gitID":"jingyinno"},"content":"        //missing both arguments, extra spaces"},{"lineNumber":43,"author":{"gitID":"jingyinno"},"content":"        String spacesArgumentCommand \u003d \"       \";"},{"lineNumber":44,"author":{"gitID":"jingyinno"},"content":"        assertParseFailure(parser, spacesArgumentCommand, message);"},{"lineNumber":45,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"jingyinno"},"content":"}"}],"authorContributionMap":{"jingyinno":31,"-":15}},{"path":"src/test/java/seedu/address/commons/util/TimetableParserUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.timetable.TimetableParserUtil;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.timetable.Timetable;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TimetableBuilder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"AzuraAiR"},"content":"//@@author AzuraAiR"},{"lineNumber":16,"author":{"gitID":"AzuraAiR"},"content":"public class TimetableParserUtilTest {"},{"lineNumber":17,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":18,"author":{"gitID":"AzuraAiR"},"content":"    private static final String EMPTY_URL \u003d \" \";"},{"lineNumber":19,"author":{"gitID":"AzuraAiR"},"content":"    private static final String VALID_WEEK \u003d \"Odd Week\";"},{"lineNumber":20,"author":{"gitID":"AzuraAiR"},"content":"    private static final String VALID_DAY \u003d \"Wednesday\";"},{"lineNumber":21,"author":{"gitID":"AzuraAiR"},"content":"    private static final int VALID_TIMESLOT \u003d 11;"},{"lineNumber":22,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":23,"author":{"gitID":"AzuraAiR"},"content":"    private static final String VALID_URL \u003d \"http://modsn.us/kqUAK\";"},{"lineNumber":24,"author":{"gitID":"AzuraAiR"},"content":"    private static final String INVALID_OTHER_URL \u003d \"http://google.com/\";"},{"lineNumber":25,"author":{"gitID":"AzuraAiR"},"content":"    private static final String INVALID_NUSMODS_URL \u003d \"http://modsn.us/zzzzz\";"},{"lineNumber":26,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":27,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"AzuraAiR"},"content":"    public void parseUrl_nullUrl_throwsNullPointerException() {"},{"lineNumber":29,"author":{"gitID":"AzuraAiR"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e TimetableParserUtil.parseUrl(null));"},{"lineNumber":30,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":32,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"AzuraAiR"},"content":"    public void parseUrl_emptyUrl_throwsIllegalArgumentException() {"},{"lineNumber":34,"author":{"gitID":"AzuraAiR"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e TimetableParserUtil.parseUrl(EMPTY_URL));"},{"lineNumber":35,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":37,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"AzuraAiR"},"content":"    public void parseUrl_invalidUrl_throwsIllegalArgumentAndParseException() {"},{"lineNumber":39,"author":{"gitID":"AzuraAiR"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e TimetableParserUtil.parseUrl(INVALID_OTHER_URL));"},{"lineNumber":40,"author":{"gitID":"AzuraAiR"},"content":"        Assert.assertThrows(ParseException.class, () -\u003e TimetableParserUtil.parseUrl(INVALID_NUSMODS_URL));"},{"lineNumber":41,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":43,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"AzuraAiR"},"content":"    public void parseShortUrl_validUrl_success() {"},{"lineNumber":45,"author":{"gitID":"AzuraAiR"},"content":"        Timetable timetable \u003d new TimetableBuilder().getDummy(0);"},{"lineNumber":46,"author":{"gitID":"AzuraAiR"},"content":"        try {"},{"lineNumber":47,"author":{"gitID":"AzuraAiR"},"content":"            assertEquals(timetable.getLessonFromSlot(VALID_WEEK, VALID_DAY, VALID_TIMESLOT).toString(),"},{"lineNumber":48,"author":{"gitID":"AzuraAiR"},"content":"                TimetableParserUtil.parseUrl(VALID_URL).getLessonFromSlot(VALID_WEEK, VALID_DAY, VALID_TIMESLOT)"},{"lineNumber":49,"author":{"gitID":"AzuraAiR"},"content":"                        .toString());"},{"lineNumber":50,"author":{"gitID":"AzuraAiR"},"content":"        } catch (IllegalValueException pe) {"},{"lineNumber":51,"author":{"gitID":"AzuraAiR"},"content":"            fail(\"Unexpected exception thrown \" + pe);"},{"lineNumber":52,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":55,"author":{"gitID":"AzuraAiR"},"content":"}"}],"authorContributionMap":{"AzuraAiR":41,"-":14}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalOddEven.EVEN;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AliasCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.BirthdaysCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ImportCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.MapCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.PasswordCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RemovePasswordCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.TimetableUnionCommand;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UnaliasCommand;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.VacantCommand;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.building.Building;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AliasBuilder;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AliasUtil;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.testutil.BuildingBuilder;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private static final int ARG_INDEX \u003d 1;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private static final int COMMAND_INDEX \u003d 0;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private static final String EMPTY_ARG \u003d \"\";"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        String[] input \u003d parser.extractCommandArgs(PersonUtil.getAddCommand(person));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(input[COMMAND_INDEX], input[ARG_INDEX]);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"jingyinno"},"content":"    //@@author jingyinno"},{"lineNumber":76,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"jingyinno"},"content":"    public void parseCommand_alias() throws Exception {"},{"lineNumber":78,"author":{"gitID":"jingyinno"},"content":"        Alias alias \u003d new AliasBuilder().build();"},{"lineNumber":79,"author":{"gitID":"jingyinno"},"content":"        String[] input \u003d parser.extractCommandArgs(AliasUtil.getAliasCommand(alias));"},{"lineNumber":80,"author":{"gitID":"jingyinno"},"content":"        AliasCommand command \u003d (AliasCommand) parser.parseCommand(input[COMMAND_INDEX], input[ARG_INDEX]);"},{"lineNumber":81,"author":{"gitID":"jingyinno"},"content":"        assertEquals(new AliasCommand(alias), command);"},{"lineNumber":82,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":84,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"jingyinno"},"content":"    public void parseCommand_unalias() throws Exception {"},{"lineNumber":86,"author":{"gitID":"jingyinno"},"content":"        Alias toUnalias \u003d new AliasBuilder().build();"},{"lineNumber":87,"author":{"gitID":"jingyinno"},"content":"        String unalias \u003d toUnalias.getAlias();"},{"lineNumber":88,"author":{"gitID":"jingyinno"},"content":"        String[] input \u003d parser.extractCommandArgs(AliasUtil.getUnliasCommand(unalias));"},{"lineNumber":89,"author":{"gitID":"jingyinno"},"content":"        UnaliasCommand command \u003d (UnaliasCommand) parser.parseCommand(input[COMMAND_INDEX], input[ARG_INDEX]);"},{"lineNumber":90,"author":{"gitID":"jingyinno"},"content":"        assertEquals(new UnaliasCommand(unalias), command);"},{"lineNumber":91,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":93,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"jingyinno"},"content":"    public void parseCommand_vacant() throws Exception {"},{"lineNumber":95,"author":{"gitID":"jingyinno"},"content":"        Building building \u003d new BuildingBuilder().build();"},{"lineNumber":96,"author":{"gitID":"jingyinno"},"content":"        String vacant \u003d VacantCommand.COMMAND_WORD + \" \" + building.getBuildingName();"},{"lineNumber":97,"author":{"gitID":"jingyinno"},"content":"        String[] input \u003d parser.extractCommandArgs(vacant);"},{"lineNumber":98,"author":{"gitID":"jingyinno"},"content":"        VacantCommand command \u003d (VacantCommand) parser.parseCommand(input[COMMAND_INDEX], input[ARG_INDEX]);"},{"lineNumber":99,"author":{"gitID":"jingyinno"},"content":"        assertEquals(new VacantCommand(building), command);"},{"lineNumber":100,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":102,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"jingyinno"},"content":"    public void parseCommand_map() throws Exception {"},{"lineNumber":104,"author":{"gitID":"jingyinno"},"content":"        String locations \u003d \"com1\";"},{"lineNumber":105,"author":{"gitID":"jingyinno"},"content":"        String map \u003d MapCommand.COMMAND_WORD + \" \" + locations;"},{"lineNumber":106,"author":{"gitID":"jingyinno"},"content":"        String[] input \u003d parser.extractCommandArgs(map);"},{"lineNumber":107,"author":{"gitID":"jingyinno"},"content":"        MapCommand command \u003d (MapCommand) parser.parseCommand(input[COMMAND_INDEX], input[ARG_INDEX]);"},{"lineNumber":108,"author":{"gitID":"jingyinno"},"content":"        assertEquals(new MapCommand(locations), command);"},{"lineNumber":109,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"jingyinno"},"content":"    //@@author"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD, EMPTY_ARG) instanceof ClearCommand);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        String clear \u003d ClearCommand.COMMAND_WORD + \" 3\";"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        String[] input \u003d parser.extractCommandArgs(clear);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(input[COMMAND_INDEX], input[ARG_INDEX]) instanceof ClearCommand);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        String delete \u003d DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        String[] input \u003d parser.extractCommandArgs(delete);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand(input[COMMAND_INDEX], input[ARG_INDEX]);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"yeggasd"},"content":"    //@@author yeggasd"},{"lineNumber":129,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"yeggasd"},"content":"    public void parseCommand_password() throws Exception {"},{"lineNumber":131,"author":{"gitID":"yeggasd"},"content":"        String password \u003d PasswordCommand.COMMAND_WORD + \" test\";"},{"lineNumber":132,"author":{"gitID":"yeggasd"},"content":"        String[] input \u003d parser.extractCommandArgs(password);"},{"lineNumber":133,"author":{"gitID":"yeggasd"},"content":"        PasswordCommand command \u003d (PasswordCommand) parser.parseCommand(input[COMMAND_INDEX], input[ARG_INDEX]);"},{"lineNumber":134,"author":{"gitID":"yeggasd"},"content":"        assertEquals(new PasswordCommand(\"test\"), command);"},{"lineNumber":135,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":137,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":138,"author":{"gitID":"yeggasd"},"content":"    public void parseCommand_nopassword() throws Exception {"},{"lineNumber":139,"author":{"gitID":"yeggasd"},"content":"        String removePassword \u003d RemovePasswordCommand.COMMAND_WORD + \" 3\";"},{"lineNumber":140,"author":{"gitID":"yeggasd"},"content":"        assertTrue(parser.parseCommand(RemovePasswordCommand.COMMAND_WORD, EMPTY_ARG) instanceof RemovePasswordCommand);"},{"lineNumber":141,"author":{"gitID":"yeggasd"},"content":"        String[] input \u003d parser.extractCommandArgs(removePassword);"},{"lineNumber":142,"author":{"gitID":"yeggasd"},"content":"        assertTrue(parser.parseCommand(input[COMMAND_INDEX], input[ARG_INDEX])"},{"lineNumber":143,"author":{"gitID":"yeggasd"},"content":"                instanceof RemovePasswordCommand);"},{"lineNumber":144,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":146,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":147,"author":{"gitID":"yeggasd"},"content":"    public void parseCommand_import() throws Exception {"},{"lineNumber":148,"author":{"gitID":"yeggasd"},"content":"        String importFile \u003d ImportCommand.COMMAND_WORD + \" /data/addressbook.xml test\";"},{"lineNumber":149,"author":{"gitID":"yeggasd"},"content":"        String[] input \u003d parser.extractCommandArgs(importFile);"},{"lineNumber":150,"author":{"gitID":"yeggasd"},"content":"        ImportCommand command \u003d (ImportCommand) parser.parseCommand(input[COMMAND_INDEX], input[ARG_INDEX]);"},{"lineNumber":151,"author":{"gitID":"yeggasd"},"content":"        assertEquals(new ImportCommand(\"/data/addressbook.xml\", \"test\"), command);"},{"lineNumber":152,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"yeggasd"},"content":"    //@@author"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"AzuraAiR"},"content":"    //@@author AzuraAiR"},{"lineNumber":156,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":157,"author":{"gitID":"AzuraAiR"},"content":"    public void parseCommand_birthdays() throws Exception {"},{"lineNumber":158,"author":{"gitID":"AzuraAiR"},"content":"        BirthdaysCommand command \u003d (BirthdaysCommand) parser.parseCommand("},{"lineNumber":159,"author":{"gitID":"AzuraAiR"},"content":"                BirthdaysCommand.COMMAND_WORD, EMPTY_ARG);"},{"lineNumber":160,"author":{"gitID":"AzuraAiR"},"content":"        assertEquals(new BirthdaysCommand(false), command);"},{"lineNumber":161,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":163,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":164,"author":{"gitID":"AzuraAiR"},"content":"    public void parseCommand_birthdaysToday() throws Exception {"},{"lineNumber":165,"author":{"gitID":"AzuraAiR"},"content":"        String birthday \u003d BirthdaysCommand.COMMAND_WORD + \" \" + BirthdaysCommand.ADDITIONAL_COMMAND_PARAMETER;"},{"lineNumber":166,"author":{"gitID":"AzuraAiR"},"content":"        String[] input \u003d parser.extractCommandArgs(birthday);"},{"lineNumber":167,"author":{"gitID":"AzuraAiR"},"content":"        BirthdaysCommand command \u003d (BirthdaysCommand) parser.parseCommand(input[COMMAND_INDEX], input[ARG_INDEX]);"},{"lineNumber":168,"author":{"gitID":"AzuraAiR"},"content":"        assertEquals(new BirthdaysCommand(true), command);"},{"lineNumber":169,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":171,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":172,"author":{"gitID":"AzuraAiR"},"content":"    public void parseCommand_timeTableUnion() throws Exception {"},{"lineNumber":173,"author":{"gitID":"AzuraAiR"},"content":"        String timetableUnion \u003d TimetableUnionCommand.COMMAND_WORD + \" Odd 1 2\";"},{"lineNumber":174,"author":{"gitID":"AzuraAiR"},"content":"        String[] input \u003d parser.extractCommandArgs(timetableUnion);"},{"lineNumber":175,"author":{"gitID":"AzuraAiR"},"content":"        TimetableUnionCommand command \u003d (TimetableUnionCommand) parser.parseCommand(input["},{"lineNumber":176,"author":{"gitID":"AzuraAiR"},"content":"                COMMAND_INDEX], input[ARG_INDEX]);"},{"lineNumber":177,"author":{"gitID":"AzuraAiR"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":178,"author":{"gitID":"AzuraAiR"},"content":"        indexes.add(INDEX_FIRST_PERSON);"},{"lineNumber":179,"author":{"gitID":"AzuraAiR"},"content":"        indexes.add(INDEX_SECOND_PERSON);"},{"lineNumber":180,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":181,"author":{"gitID":"AzuraAiR"},"content":"        assertEquals(new TimetableUnionCommand(indexes, \"Odd\"), command);"},{"lineNumber":182,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"AzuraAiR"},"content":"    //@@author"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        String edit \u003d EditCommand.COMMAND_WORD + \" \""},{"lineNumber":190,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        String[] input \u003d parser.extractCommandArgs(edit);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(input[COMMAND_INDEX], input[ARG_INDEX]);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        String exit \u003d ExitCommand.COMMAND_WORD + \" 3\";"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        String[] input \u003d parser.extractCommandArgs(exit);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD, EMPTY_ARG) instanceof ExitCommand);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(input[COMMAND_INDEX], input[ARG_INDEX]) instanceof ExitCommand);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        String find \u003d FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \"));"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        String[] input \u003d parser.extractCommandArgs(find);"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand(input[COMMAND_INDEX], input[ARG_INDEX]);"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD, EMPTY_ARG) instanceof HelpCommand);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        String help \u003d HelpCommand.COMMAND_WORD + \" 3\";"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        String[] input \u003d parser.extractCommandArgs(help);"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(input[COMMAND_INDEX], input[ARG_INDEX]) instanceof HelpCommand);"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD, EMPTY_ARG) instanceof HistoryCommand);"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        String history \u003d HistoryCommand.COMMAND_WORD + \" 3\";"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        String[] input \u003d parser.extractCommandArgs(history);"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(input[COMMAND_INDEX], input[ARG_INDEX]) instanceof HistoryCommand);"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"            history \u003d \"histories\";"},{"lineNumber":230,"author":{"gitID":"-"},"content":"            input \u003d parser.extractCommandArgs(history);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"            parser.parseCommand(input[COMMAND_INDEX], input[ARG_INDEX]);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":234,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD, EMPTY_ARG) instanceof ListCommand);"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        String list \u003d ListCommand.COMMAND_WORD + \" 3\";"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        String[] input \u003d parser.extractCommandArgs(list);"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(input[COMMAND_INDEX], input[ARG_INDEX]) instanceof ListCommand);"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        String select \u003d SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \" \" + EVEN;"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        String[] input \u003d parser.extractCommandArgs(select);"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand(input[COMMAND_INDEX], input[ARG_INDEX]);"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON, EVEN), command);"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":255,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD, EMPTY_ARG) instanceof RedoCommand);"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        String redo \u003d RedoCommand.COMMAND_WORD + \" 1\";"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        String[] input \u003d parser.extractCommandArgs(redo);"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(input[COMMAND_INDEX], input[ARG_INDEX]) instanceof RedoCommand);"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD, EMPTY_ARG) instanceof UndoCommand);"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        String undo \u003d UndoCommand.COMMAND_WORD + \" 3\";"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        String[] input \u003d parser.extractCommandArgs(undo);"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(input[COMMAND_INDEX], input[ARG_INDEX]) instanceof UndoCommand);"},{"lineNumber":268,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":271,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        String invalid \u003d EMPTY_ARG;"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        String[] input \u003d parser.extractCommandArgs(invalid);"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        parser.parseCommand(input[COMMAND_INDEX], input[ARG_INDEX]);"},{"lineNumber":277,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":278,"author":{"gitID":"-"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":280,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\", EMPTY_ARG);"},{"lineNumber":284,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":285,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yeggasd":26,"AzuraAiR":29,"jingyinno":36,"-":194}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.MapCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.building.Building;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.timetable.Timetable;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"AzuraAiR"},"content":"    //@@author AzuraAiR"},{"lineNumber":49,"author":{"gitID":"AzuraAiR"},"content":"    private static final String VALID_TIMETABLE \u003d \"http://modsn.us/oNZLY\";"},{"lineNumber":50,"author":{"gitID":"AzuraAiR"},"content":"    private static final String VALID_BIRTHDAY \u003d \"01011995\";"},{"lineNumber":51,"author":{"gitID":"AzuraAiR"},"content":"    private static final String INVALID_TIMETABLE \u003d \"http://google.com/\";"},{"lineNumber":52,"author":{"gitID":"AzuraAiR"},"content":"    private static final String INVALID_BIRTHDAY \u003d \"31021985\";"},{"lineNumber":53,"author":{"gitID":"AzuraAiR"},"content":"    //@@author"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"jingyinno"},"content":"    //@@author jingyinno"},{"lineNumber":56,"author":{"gitID":"jingyinno"},"content":"    private static final String VALID_BUILDING \u003d \"COM1\";"},{"lineNumber":57,"author":{"gitID":"jingyinno"},"content":"    private static final String VALID_BUILDING_2 \u003d \"COM2\";"},{"lineNumber":58,"author":{"gitID":"jingyinno"},"content":"    private static final String INVALID_BUILDING \u003d \"COM*\";"},{"lineNumber":59,"author":{"gitID":"jingyinno"},"content":"    private static final String VALID_LOCATION \u003d \"com1\";"},{"lineNumber":60,"author":{"gitID":"jingyinno"},"content":"    private static final String VALID_POSTAL_CODE \u003d \"117417\";"},{"lineNumber":61,"author":{"gitID":"jingyinno"},"content":"    private static final String VALID_POSTAL_CODE_2 \u003d \"138527\";"},{"lineNumber":62,"author":{"gitID":"jingyinno"},"content":"    private static final String VALID_ALIAS \u003d \"add1\";"},{"lineNumber":63,"author":{"gitID":"jingyinno"},"content":"    private static final String INVALID_ALIAS \u003d \"add*\";"},{"lineNumber":64,"author":{"gitID":"jingyinno"},"content":"    private static final Alias ADD_ALIAS \u003d new Alias(AddCommand.COMMAND_WORD, VALID_ALIAS);"},{"lineNumber":65,"author":{"gitID":"jingyinno"},"content":"    //@@author"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"yeggasd"},"content":"    //@@author yeggasd"},{"lineNumber":68,"author":{"gitID":"yeggasd"},"content":"    private static final String VALID_ODD \u003d \"odd\";"},{"lineNumber":69,"author":{"gitID":"yeggasd"},"content":"    private static final String VALID_EVEN \u003d \"even\";"},{"lineNumber":70,"author":{"gitID":"yeggasd"},"content":"    private static final String INVALID_ODDEVEN \u003d \"ord\";"},{"lineNumber":71,"author":{"gitID":"yeggasd"},"content":"    //@@author"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public final ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void parseIndex_invalidInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(\"10 a\");"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_INVALID_INDEX);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // No whitespaces"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public void parseName_null_throwsNullPointerException() {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((Optional\u003cString\u003e) null));"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void parseName_invalidValue_throwsIllegalValueException() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(Optional.of(INVALID_NAME)));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void parseName_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseName(Optional.empty()).isPresent());"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(VALID_NAME)));"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(nameWithWhitespace)));"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((Optional\u003cString\u003e) null));"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public void parsePhone_invalidValue_throwsIllegalValueException() {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(Optional.of(INVALID_PHONE)));"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    public void parsePhone_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parsePhone(Optional.empty()).isPresent());"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(VALID_PHONE)));"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(phoneWithWhitespace)));"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((Optional\u003cString\u003e) null));"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    public void parseAddress_invalidValue_throwsIllegalValueException() {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseAddress(Optional.of(INVALID_ADDRESS)));"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    public void parseAddress_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseAddress(Optional.empty()).isPresent());"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedAddress), ParserUtil.parseAddress(Optional.of(VALID_ADDRESS)));"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedAddress), ParserUtil.parseAddress(Optional.of(addressWithWhitespace)));"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((Optional\u003cString\u003e) null));"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    public void parseEmail_invalidValue_throwsIllegalValueException() {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(Optional.of(INVALID_EMAIL)));"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    public void parseEmail_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseEmail(Optional.empty()).isPresent());"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(VALID_EMAIL)));"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(emailWithWhitespace)));"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"AzuraAiR"},"content":"    //@@author AzuraAiR"},{"lineNumber":229,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":230,"author":{"gitID":"AzuraAiR"},"content":"    public void parseBirthday_null_throwsNullPointerException() {"},{"lineNumber":231,"author":{"gitID":"AzuraAiR"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseBirthday((String) null));"},{"lineNumber":232,"author":{"gitID":"AzuraAiR"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseBirthday((Optional\u003cString\u003e) null));"},{"lineNumber":233,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":235,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":236,"author":{"gitID":"AzuraAiR"},"content":"    public void parseBirthday_invalidValue_throwsIllegalValueException() {"},{"lineNumber":237,"author":{"gitID":"AzuraAiR"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseBirthday(INVALID_BIRTHDAY));"},{"lineNumber":238,"author":{"gitID":"AzuraAiR"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseBirthday(Optional"},{"lineNumber":239,"author":{"gitID":"AzuraAiR"},"content":"                .of(INVALID_BIRTHDAY)));"},{"lineNumber":240,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":241,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":242,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":243,"author":{"gitID":"AzuraAiR"},"content":"    public void parseTimetable_validValue_returnsBirthday() throws Exception {"},{"lineNumber":244,"author":{"gitID":"AzuraAiR"},"content":"        Birthday expectedBirthday \u003d new Birthday(VALID_BIRTHDAY);"},{"lineNumber":245,"author":{"gitID":"AzuraAiR"},"content":"        assertEquals(expectedBirthday, ParserUtil.parseBirthday(VALID_BIRTHDAY));"},{"lineNumber":246,"author":{"gitID":"AzuraAiR"},"content":"        assertEquals(Optional.of(expectedBirthday), ParserUtil.parseBirthday(Optional.of(VALID_BIRTHDAY)));"},{"lineNumber":247,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":249,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":250,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":251,"author":{"gitID":"AzuraAiR"},"content":"    public void parseTimetable_null_throwsNullPointerException() {"},{"lineNumber":252,"author":{"gitID":"AzuraAiR"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTimetable((String) null));"},{"lineNumber":253,"author":{"gitID":"AzuraAiR"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTimetable((Optional\u003cString\u003e) null));"},{"lineNumber":254,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":255,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":256,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":257,"author":{"gitID":"AzuraAiR"},"content":"    public void parseTimetable_invalidValue_throwsIllegalValueException() {"},{"lineNumber":258,"author":{"gitID":"AzuraAiR"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseTimetable(INVALID_TIMETABLE));"},{"lineNumber":259,"author":{"gitID":"AzuraAiR"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseTimetable(Optional"},{"lineNumber":260,"author":{"gitID":"AzuraAiR"},"content":"                .of(INVALID_TIMETABLE)));"},{"lineNumber":261,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":262,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":263,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":264,"author":{"gitID":"AzuraAiR"},"content":"    public void parseTimetable_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":265,"author":{"gitID":"AzuraAiR"},"content":"        assertFalse(ParserUtil.parseTimetable(Optional.empty()).isPresent());"},{"lineNumber":266,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":267,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":268,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":269,"author":{"gitID":"AzuraAiR"},"content":"    public void parseTimetable_validValueWithoutWhitespace_returnsTimetable() throws Exception {"},{"lineNumber":270,"author":{"gitID":"AzuraAiR"},"content":"        Timetable expectedTimetable \u003d new Timetable(VALID_TIMETABLE);"},{"lineNumber":271,"author":{"gitID":"AzuraAiR"},"content":"        assertEquals(expectedTimetable, ParserUtil.parseTimetable(VALID_TIMETABLE));"},{"lineNumber":272,"author":{"gitID":"AzuraAiR"},"content":"        assertEquals(Optional.of(expectedTimetable), ParserUtil.parseTimetable(Optional.of(VALID_TIMETABLE)));"},{"lineNumber":273,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":274,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":275,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":276,"author":{"gitID":"AzuraAiR"},"content":"    public void parseTimetable_validValueWithWhitespace_returnsTrimmedTimetable() throws Exception {"},{"lineNumber":277,"author":{"gitID":"AzuraAiR"},"content":"        String timetableWithWhitespace \u003d WHITESPACE + VALID_TIMETABLE + WHITESPACE;"},{"lineNumber":278,"author":{"gitID":"AzuraAiR"},"content":"        Timetable expectedTimetable \u003d new Timetable(VALID_TIMETABLE);"},{"lineNumber":279,"author":{"gitID":"AzuraAiR"},"content":"        assertEquals(expectedTimetable, ParserUtil.parseTimetable(timetableWithWhitespace));"},{"lineNumber":280,"author":{"gitID":"AzuraAiR"},"content":"        assertEquals(Optional.of(expectedTimetable), ParserUtil.parseTimetable(Optional"},{"lineNumber":281,"author":{"gitID":"AzuraAiR"},"content":"                .of(timetableWithWhitespace)));"},{"lineNumber":282,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":283,"author":{"gitID":"AzuraAiR"},"content":"    //@@author"},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":286,"author":{"gitID":"-"},"content":"    public void parseTag_null_throwsNullPointerException() throws Exception {"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":288,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(null);"},{"lineNumber":289,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":292,"author":{"gitID":"-"},"content":"    public void parseTag_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":293,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":294,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(INVALID_TAG);"},{"lineNumber":295,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":296,"author":{"gitID":"-"},"content":""},{"lineNumber":297,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":298,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":299,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":300,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"},{"lineNumber":301,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":302,"author":{"gitID":"-"},"content":""},{"lineNumber":303,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":304,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":305,"author":{"gitID":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"},{"lineNumber":306,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":307,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"},{"lineNumber":308,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":309,"author":{"gitID":"-"},"content":""},{"lineNumber":310,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":311,"author":{"gitID":"-"},"content":"    public void parseTags_null_throwsNullPointerException() throws Exception {"},{"lineNumber":312,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":313,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(null);"},{"lineNumber":314,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":315,"author":{"gitID":"-"},"content":""},{"lineNumber":316,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":317,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsIllegalValueException() throws Exception {"},{"lineNumber":318,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":319,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"},{"lineNumber":320,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":321,"author":{"gitID":"-"},"content":""},{"lineNumber":322,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":323,"author":{"gitID":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":324,"author":{"gitID":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":325,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":326,"author":{"gitID":"-"},"content":""},{"lineNumber":327,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":328,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":329,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":330,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":331,"author":{"gitID":"-"},"content":""},{"lineNumber":332,"author":{"gitID":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":333,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":334,"author":{"gitID":"-"},"content":""},{"lineNumber":335,"author":{"gitID":"jingyinno"},"content":"    //@@author jingyinno"},{"lineNumber":336,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":337,"author":{"gitID":"jingyinno"},"content":"    public void parseBuilding_validBuilding() throws Exception {"},{"lineNumber":338,"author":{"gitID":"jingyinno"},"content":"        Building building \u003d new Building(VALID_BUILDING);"},{"lineNumber":339,"author":{"gitID":"jingyinno"},"content":"        assertEquals(building, ParserUtil.parseBuilding(VALID_BUILDING));"},{"lineNumber":340,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":341,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":342,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":343,"author":{"gitID":"jingyinno"},"content":"    public void parseBuilding_invalidBuilding_throwsIllegalValueException() {"},{"lineNumber":344,"author":{"gitID":"jingyinno"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseBuilding(INVALID_BUILDING));"},{"lineNumber":345,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":346,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":347,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":348,"author":{"gitID":"jingyinno"},"content":"    public void parseBuilding_invalidBuilding_throwsNullPointerException() {"},{"lineNumber":349,"author":{"gitID":"jingyinno"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseBuilding(null));"},{"lineNumber":350,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":351,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":352,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":353,"author":{"gitID":"jingyinno"},"content":"    public void parseUnalias_validUnAlias() throws Exception {"},{"lineNumber":354,"author":{"gitID":"jingyinno"},"content":"        assertEquals(VALID_ALIAS, ParserUtil.parseUnalias(VALID_ALIAS));"},{"lineNumber":355,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":356,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":357,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":358,"author":{"gitID":"jingyinno"},"content":"    public void parseUnalias_invalidUnAlias_throwsIllegalValueException() {"},{"lineNumber":359,"author":{"gitID":"jingyinno"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseUnalias(INVALID_ALIAS));"},{"lineNumber":360,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":361,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":362,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":363,"author":{"gitID":"jingyinno"},"content":"    public void parseUnalias_invalidUnAlias_throwsNullPointerException() {"},{"lineNumber":364,"author":{"gitID":"jingyinno"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseUnalias(null));"},{"lineNumber":365,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":366,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":367,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":368,"author":{"gitID":"jingyinno"},"content":"    public void parseAlias_validAliasCommandAndAlias() throws Exception {"},{"lineNumber":369,"author":{"gitID":"jingyinno"},"content":"        assertEquals(ADD_ALIAS, ParserUtil.parseAlias(AddCommand.COMMAND_WORD, VALID_ALIAS));"},{"lineNumber":370,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":371,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":372,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":373,"author":{"gitID":"jingyinno"},"content":"    public void parseAlias_validAliasCommandAndinvalidAlias_throwsIllegalValueException() {"},{"lineNumber":374,"author":{"gitID":"jingyinno"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseAlias(AddCommand.COMMAND_WORD,"},{"lineNumber":375,"author":{"gitID":"jingyinno"},"content":"                INVALID_ALIAS));"},{"lineNumber":376,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":377,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":378,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":379,"author":{"gitID":"jingyinno"},"content":"    public void parseAlias_invalidAliasCommandAndvalidAlias_throwsIllegalValueException() {"},{"lineNumber":380,"author":{"gitID":"jingyinno"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseAlias(INVALID_ALIAS, VALID_ALIAS));"},{"lineNumber":381,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":382,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":383,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":384,"author":{"gitID":"jingyinno"},"content":"    public void parseAlias_invalidAliasCommandAndvalidAlias_throwsNullPointerException() {"},{"lineNumber":385,"author":{"gitID":"jingyinno"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAlias(null, VALID_ALIAS));"},{"lineNumber":386,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":387,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":388,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":389,"author":{"gitID":"jingyinno"},"content":"    public void parseAlias_validAliasCommandAndinvalidAlias_throwsNullPointerException() {"},{"lineNumber":390,"author":{"gitID":"jingyinno"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAlias(AddCommand.COMMAND_WORD, null));"},{"lineNumber":391,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":392,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":393,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":394,"author":{"gitID":"jingyinno"},"content":"    public void parseLocations_validLocation_success() {"},{"lineNumber":395,"author":{"gitID":"jingyinno"},"content":"        assertEquals(VALID_POSTAL_CODE, ParserUtil.parseLocations(VALID_POSTAL_CODE));"},{"lineNumber":396,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":397,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":398,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":399,"author":{"gitID":"jingyinno"},"content":"    public void parseLocations_multipleLocations_success() {"},{"lineNumber":400,"author":{"gitID":"jingyinno"},"content":"        String[] locations \u003d new String[] {VALID_POSTAL_CODE, VALID_POSTAL_CODE_2};"},{"lineNumber":401,"author":{"gitID":"jingyinno"},"content":"        String joinedLocations \u003d String.join(MapCommand.SPLIT_TOKEN, locations);"},{"lineNumber":402,"author":{"gitID":"jingyinno"},"content":"        assertEquals(joinedLocations , ParserUtil.parseLocations(joinedLocations));"},{"lineNumber":403,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":404,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":405,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":406,"author":{"gitID":"jingyinno"},"content":"    public void parseLocations_validNusLocations_success() {"},{"lineNumber":407,"author":{"gitID":"jingyinno"},"content":"        assertEquals(VALID_POSTAL_CODE , ParserUtil.parseLocations(VALID_BUILDING));"},{"lineNumber":408,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":409,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":410,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":411,"author":{"gitID":"jingyinno"},"content":"    public void parseLocations_validNusLocationsMixedCase_success() {"},{"lineNumber":412,"author":{"gitID":"jingyinno"},"content":"        assertEquals(VALID_POSTAL_CODE , ParserUtil.parseLocations(VALID_LOCATION));"},{"lineNumber":413,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":414,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":415,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":416,"author":{"gitID":"jingyinno"},"content":"    public void parseLocations_validMultipleNusLocations_success() {"},{"lineNumber":417,"author":{"gitID":"jingyinno"},"content":"        String[] locationsPostalCode \u003d new String[] {VALID_POSTAL_CODE, VALID_POSTAL_CODE};"},{"lineNumber":418,"author":{"gitID":"jingyinno"},"content":"        String expectedLocations \u003d String.join(MapCommand.SPLIT_TOKEN, locationsPostalCode);"},{"lineNumber":419,"author":{"gitID":"jingyinno"},"content":"        String[] locations \u003d new String[] {VALID_BUILDING, VALID_BUILDING_2};"},{"lineNumber":420,"author":{"gitID":"jingyinno"},"content":"        String joinedLocations \u003d String.join(MapCommand.SPLIT_TOKEN, locations);"},{"lineNumber":421,"author":{"gitID":"jingyinno"},"content":"        assertEquals(expectedLocations , ParserUtil.parseLocations(joinedLocations));"},{"lineNumber":422,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":423,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":424,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":425,"author":{"gitID":"jingyinno"},"content":"    public void parseLocations_validMixedLocations_success() {"},{"lineNumber":426,"author":{"gitID":"jingyinno"},"content":"        String[] locationsPostalCode \u003d new String[] {VALID_POSTAL_CODE_2, VALID_POSTAL_CODE};"},{"lineNumber":427,"author":{"gitID":"jingyinno"},"content":"        String expectedLocations \u003d String.join(MapCommand.SPLIT_TOKEN, locationsPostalCode);"},{"lineNumber":428,"author":{"gitID":"jingyinno"},"content":"        String[] locations \u003d new String[] {VALID_POSTAL_CODE_2, VALID_BUILDING};"},{"lineNumber":429,"author":{"gitID":"jingyinno"},"content":"        String joinedLocations \u003d String.join(MapCommand.SPLIT_TOKEN, locations);"},{"lineNumber":430,"author":{"gitID":"jingyinno"},"content":"        assertEquals(expectedLocations , ParserUtil.parseLocations(joinedLocations));"},{"lineNumber":431,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":432,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":433,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":434,"author":{"gitID":"jingyinno"},"content":"    public void parseLocations_invalidLocation_throwsNullPointerException() {"},{"lineNumber":435,"author":{"gitID":"jingyinno"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseLocations(null));"},{"lineNumber":436,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":437,"author":{"gitID":"jingyinno"},"content":"    //@@author"},{"lineNumber":438,"author":{"gitID":"-"},"content":""},{"lineNumber":439,"author":{"gitID":"yeggasd"},"content":"    //@@author yeggasd"},{"lineNumber":440,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":441,"author":{"gitID":"yeggasd"},"content":"    public void parseOddEven_validOddEven() throws Exception {"},{"lineNumber":442,"author":{"gitID":"yeggasd"},"content":"        assertEquals(VALID_ODD, ParserUtil.parseOddEven(VALID_ODD));"},{"lineNumber":443,"author":{"gitID":"yeggasd"},"content":"        assertEquals(VALID_EVEN, ParserUtil.parseOddEven(VALID_EVEN));"},{"lineNumber":444,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":445,"author":{"gitID":"yeggasd"},"content":"        //with trailing and leading spaces"},{"lineNumber":446,"author":{"gitID":"yeggasd"},"content":"        assertEquals(VALID_ODD, ParserUtil.parseOddEven(\" \" + VALID_ODD + \" \"));"},{"lineNumber":447,"author":{"gitID":"yeggasd"},"content":"        assertEquals(VALID_EVEN, ParserUtil.parseOddEven(\" \" + VALID_EVEN + \" \"));"},{"lineNumber":448,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":449,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":450,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":451,"author":{"gitID":"yeggasd"},"content":"    public void  parseOddEven_nullGive_throwsNullPointerException() {"},{"lineNumber":452,"author":{"gitID":"yeggasd"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseOddEven(null));"},{"lineNumber":453,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":454,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":455,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":456,"author":{"gitID":"yeggasd"},"content":"    public void  parseOddEven_invalidOddEven_throwsIllegalValueException() {"},{"lineNumber":457,"author":{"gitID":"yeggasd"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseOddEven(INVALID_ODDEVEN));"},{"lineNumber":458,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":459,"author":{"gitID":"yeggasd"},"content":"    //@@author"},{"lineNumber":460,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yeggasd":26,"AzuraAiR":62,"jingyinno":114,"-":258}},{"path":"src/test/java/seedu/address/logic/parser/PasswordCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.PasswordCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"yeggasd"},"content":"//@@author yeggasd"},{"lineNumber":12,"author":{"gitID":"yeggasd"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"yeggasd"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":14,"author":{"gitID":"yeggasd"},"content":" * outside of the PasswordCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":15,"author":{"gitID":"yeggasd"},"content":" * same path through the PasswordCommand, and therefore we test only one of them."},{"lineNumber":16,"author":{"gitID":"yeggasd"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":17,"author":{"gitID":"yeggasd"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":18,"author":{"gitID":"yeggasd"},"content":" */"},{"lineNumber":19,"author":{"gitID":"yeggasd"},"content":"public class PasswordCommandParserTest {"},{"lineNumber":20,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":21,"author":{"gitID":"yeggasd"},"content":"    private PasswordCommandParser parser \u003d new PasswordCommandParser();"},{"lineNumber":22,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":23,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"yeggasd"},"content":"    public void parse_validArgs_returnsParseCommand() {"},{"lineNumber":25,"author":{"gitID":"yeggasd"},"content":"        assertParseSuccess(parser, \"1\", new PasswordCommand(\"1\"));"},{"lineNumber":26,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":28,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"yeggasd"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":30,"author":{"gitID":"yeggasd"},"content":"        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":31,"author":{"gitID":"yeggasd"},"content":"                PasswordCommand.INVALID_PASSWORD, PasswordCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"yeggasd"},"content":"}"}],"authorContributionMap":{"yeggasd":23,"Caijun7":3,"-":7}},{"path":"src/test/java/seedu/address/logic/commands/UnaliasCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALIAS_FIND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALIAS_HISTORY;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALIAS_LIST;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALIAS_LIST_COMMAND;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelStub;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.exceptions.AliasNotFoundException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AliasBuilder;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"jingyinno"},"content":"//@@author jingyinno"},{"lineNumber":30,"author":{"gitID":"jingyinno"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"jingyinno"},"content":" * Contains integration tests (interaction with the Model) and unit tests for UnaliasCommand."},{"lineNumber":32,"author":{"gitID":"jingyinno"},"content":" */"},{"lineNumber":33,"author":{"gitID":"jingyinno"},"content":"public class UnaliasCommandTest {"},{"lineNumber":34,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":35,"author":{"gitID":"jingyinno"},"content":"    @Rule"},{"lineNumber":36,"author":{"gitID":"jingyinno"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":37,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":38,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":39,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"jingyinno"},"content":"    public void constructor_nullAlias_throwsNullPointerException() {"},{"lineNumber":41,"author":{"gitID":"jingyinno"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":42,"author":{"gitID":"jingyinno"},"content":"        new UnaliasCommand(null);"},{"lineNumber":43,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":45,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"jingyinno"},"content":"    public void execute_unaliasRemovedByModel_removeSuccessful() throws Exception {"},{"lineNumber":47,"author":{"gitID":"jingyinno"},"content":"        ModelStubAcceptingUnaliasAdded modelStub \u003d new ModelStubAcceptingUnaliasAdded();"},{"lineNumber":48,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":49,"author":{"gitID":"jingyinno"},"content":"        String validUnalias \u003d VALID_ALIAS_LIST;"},{"lineNumber":50,"author":{"gitID":"jingyinno"},"content":"        Alias validUnaliasAlias \u003d new AliasBuilder().withCommand(VALID_ALIAS_LIST_COMMAND)"},{"lineNumber":51,"author":{"gitID":"jingyinno"},"content":"                .withAlias(VALID_ALIAS_LIST).build();"},{"lineNumber":52,"author":{"gitID":"jingyinno"},"content":"        ArrayList\u003cAlias\u003e expectedAliasesList \u003d new ArrayList\u003cAlias\u003e();"},{"lineNumber":53,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":54,"author":{"gitID":"jingyinno"},"content":"        CommandResult commandResult \u003d getUnaliasCommand(validUnalias, modelStub).execute();"},{"lineNumber":55,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":56,"author":{"gitID":"jingyinno"},"content":"        assertEquals(String.format(UnaliasCommand.MESSAGE_SUCCESS, validUnaliasAlias), commandResult.feedbackToUser);"},{"lineNumber":57,"author":{"gitID":"jingyinno"},"content":"        assertEquals(expectedAliasesList, modelStub.aliases);"},{"lineNumber":58,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":60,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"jingyinno"},"content":"    public void execute_unaliasRemovedByModel_removeFailure() throws Exception {"},{"lineNumber":62,"author":{"gitID":"jingyinno"},"content":"        ModelStubAcceptingUnaliasAdded modelStub \u003d new ModelStubAcceptingUnaliasAdded();"},{"lineNumber":63,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":64,"author":{"gitID":"jingyinno"},"content":"        String invalidUnalias \u003d VALID_ALIAS_FIND;"},{"lineNumber":65,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":66,"author":{"gitID":"jingyinno"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":67,"author":{"gitID":"jingyinno"},"content":"        thrown.expectMessage(UnaliasCommand.MESSAGE_UNKNOWN_UNALIAS);"},{"lineNumber":68,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":69,"author":{"gitID":"jingyinno"},"content":"        getUnaliasCommand(invalidUnalias, modelStub).execute();"},{"lineNumber":70,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":72,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"jingyinno"},"content":"    public void equals() {"},{"lineNumber":74,"author":{"gitID":"jingyinno"},"content":"        UnaliasCommand listUnaliasCommand \u003d new UnaliasCommand(VALID_ALIAS_LIST);"},{"lineNumber":75,"author":{"gitID":"jingyinno"},"content":"        UnaliasCommand historyUnaliasCommand \u003d new UnaliasCommand(VALID_ALIAS_HISTORY);"},{"lineNumber":76,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":77,"author":{"gitID":"jingyinno"},"content":"        // same object -\u003e returns true"},{"lineNumber":78,"author":{"gitID":"jingyinno"},"content":"        assertTrue(listUnaliasCommand.equals(listUnaliasCommand));"},{"lineNumber":79,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":80,"author":{"gitID":"jingyinno"},"content":"        // same values -\u003e returns true"},{"lineNumber":81,"author":{"gitID":"jingyinno"},"content":"        UnaliasCommand listUnaliasCommandCopy \u003d new UnaliasCommand(VALID_ALIAS_LIST);"},{"lineNumber":82,"author":{"gitID":"jingyinno"},"content":"        assertTrue(listUnaliasCommand.equals(listUnaliasCommandCopy));"},{"lineNumber":83,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":84,"author":{"gitID":"jingyinno"},"content":"        // different types -\u003e returns false"},{"lineNumber":85,"author":{"gitID":"jingyinno"},"content":"        assertFalse(listUnaliasCommand.equals(1));"},{"lineNumber":86,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":87,"author":{"gitID":"jingyinno"},"content":"        // null -\u003e returns false"},{"lineNumber":88,"author":{"gitID":"jingyinno"},"content":"        assertFalse(listUnaliasCommand \u003d\u003d null);"},{"lineNumber":89,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":90,"author":{"gitID":"jingyinno"},"content":"        // different unalias -\u003e returns false"},{"lineNumber":91,"author":{"gitID":"jingyinno"},"content":"        assertFalse(listUnaliasCommand.equals(historyUnaliasCommand));"},{"lineNumber":92,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":94,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"jingyinno"},"content":"     * Generates a new UnaliasCommand with the details of the given alias."},{"lineNumber":96,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"jingyinno"},"content":"    private UnaliasCommand getUnaliasCommand(String unalias, Model model) {"},{"lineNumber":98,"author":{"gitID":"jingyinno"},"content":"        UnaliasCommand command \u003d new UnaliasCommand(unalias);"},{"lineNumber":99,"author":{"gitID":"jingyinno"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":100,"author":{"gitID":"jingyinno"},"content":"        return command;"},{"lineNumber":101,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":103,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"jingyinno"},"content":"     * A Model stub that always accept the alias being removed."},{"lineNumber":105,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"jingyinno"},"content":"    private class ModelStubAcceptingUnaliasAdded extends ModelStub {"},{"lineNumber":107,"author":{"gitID":"jingyinno"},"content":"        private final ArrayList\u003cAlias\u003e aliases \u003d new ArrayList\u003c\u003e();"},{"lineNumber":108,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":109,"author":{"gitID":"jingyinno"},"content":"        @Override"},{"lineNumber":110,"author":{"gitID":"jingyinno"},"content":"        public void removeAlias(String unalias) throws AliasNotFoundException {"},{"lineNumber":111,"author":{"gitID":"jingyinno"},"content":"            aliases.add(new Alias(VALID_ALIAS_LIST_COMMAND, VALID_ALIAS_LIST));"},{"lineNumber":112,"author":{"gitID":"jingyinno"},"content":"            requireNonNull(unalias);"},{"lineNumber":113,"author":{"gitID":"jingyinno"},"content":"            boolean isRemove \u003d false;"},{"lineNumber":114,"author":{"gitID":"jingyinno"},"content":"            for (int i \u003d 0; i \u003c aliases.size(); i++) {"},{"lineNumber":115,"author":{"gitID":"jingyinno"},"content":"                if (aliases.get(i).getAlias().equals(unalias)) {"},{"lineNumber":116,"author":{"gitID":"jingyinno"},"content":"                    aliases.remove(aliases.get(i));"},{"lineNumber":117,"author":{"gitID":"jingyinno"},"content":"                    isRemove \u003d true;"},{"lineNumber":118,"author":{"gitID":"jingyinno"},"content":"                    break;"},{"lineNumber":119,"author":{"gitID":"jingyinno"},"content":"                }"},{"lineNumber":120,"author":{"gitID":"jingyinno"},"content":"            }"},{"lineNumber":121,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":122,"author":{"gitID":"jingyinno"},"content":"            if (!isRemove) {"},{"lineNumber":123,"author":{"gitID":"jingyinno"},"content":"                throw new AliasNotFoundException();"},{"lineNumber":124,"author":{"gitID":"jingyinno"},"content":"            }"},{"lineNumber":125,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":127,"author":{"gitID":"jingyinno"},"content":"        @Override"},{"lineNumber":128,"author":{"gitID":"jingyinno"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":129,"author":{"gitID":"jingyinno"},"content":"            return new AddressBook();"},{"lineNumber":130,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"jingyinno"},"content":"}"}],"authorContributionMap":{"jingyinno":104,"-":28}},{"path":"src/test/java/seedu/address/logic/parser/UploadCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":"import seedu.address.logic.commands.UploadCommand;"},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":"//@@author Caijun7"},{"lineNumber":12,"author":{"gitID":"Caijun7"},"content":"public class UploadCommandParserTest {"},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":"    private static final String TEST_PASSWORD \u003d \"test\";"},{"lineNumber":14,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":"    private UploadCommandParser parser \u003d new UploadCommandParser();"},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":17,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"Caijun7"},"content":"    public void parse_validOneArgs_returnsUploadCommand() {"},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":"        assertParseSuccess(parser, \"validString\", new UploadCommand(\"validString\", TEST_PASSWORD));"},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":22,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"Caijun7"},"content":"    public void parse_validTwoArgs_returnsUploadCommand() {"},{"lineNumber":24,"author":{"gitID":"Caijun7"},"content":"        assertParseSuccess(parser, \"validString test\", new UploadCommand(\"validString\", TEST_PASSWORD));"},{"lineNumber":25,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":27,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"Caijun7"},"content":"    public void parse_invalidThreeArg_throwsParseException() {"},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":"        assertParseFailure(parser, \"invalidString is invalid\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":30,"author":{"gitID":"Caijun7"},"content":"                UploadCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":33,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"Caijun7"},"content":"    public void parse_invalidZeroArgs_throwsParseException() {"},{"lineNumber":35,"author":{"gitID":"Caijun7"},"content":"        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, UploadCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":32,"-":5}},{"path":"src/test/java/seedu/address/logic/parser/ExportCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":"import seedu.address.logic.commands.ExportCommand;"},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":"//@@author Caijun7"},{"lineNumber":12,"author":{"gitID":"Caijun7"},"content":"public class ExportCommandParserTest {"},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":"    private static final String TEST_PASSWORD \u003d \"test\";"},{"lineNumber":14,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":"    private ExportCommandParser parser \u003d new ExportCommandParser();"},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":17,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"Caijun7"},"content":"    public void parse_validOneArgs_returnsExportCommand() {"},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":"        assertParseSuccess(parser, \"validString\", new ExportCommand(\"validString\", TEST_PASSWORD));"},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":22,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"Caijun7"},"content":"    public void parse_validTwoArgs_returnsExportCommand() {"},{"lineNumber":24,"author":{"gitID":"Caijun7"},"content":"        assertParseSuccess(parser, \"validString test\", new ExportCommand(\"validString\", TEST_PASSWORD));"},{"lineNumber":25,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":27,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"Caijun7"},"content":"    public void parse_invalidThreeArg_throwsParseException() {"},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":"        assertParseFailure(parser, \"invalidString is invalid\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":30,"author":{"gitID":"Caijun7"},"content":"                ExportCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":33,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"Caijun7"},"content":"    public void parse_invalidZeroArgs_throwsParseException() {"},{"lineNumber":35,"author":{"gitID":"Caijun7"},"content":"        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":32,"-":5}},{"path":"src/test/java/seedu/address/logic/commands/MapCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_BUILDING_UPPERCASE_1;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_THREE_LOCATIONS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TWO_LOCATIONS_ADDRESS;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"jingyinno"},"content":"//@@author jingyinno"},{"lineNumber":22,"author":{"gitID":"jingyinno"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"jingyinno"},"content":" * Contains integration tests (interaction with the Model) and unit tests for MapCommand."},{"lineNumber":24,"author":{"gitID":"jingyinno"},"content":" */"},{"lineNumber":25,"author":{"gitID":"jingyinno"},"content":"public class MapCommandTest {"},{"lineNumber":26,"author":{"gitID":"jingyinno"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"jingyinno"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":28,"author":{"gitID":"jingyinno"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":29,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":30,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"jingyinno"},"content":"    public void constructor_nullLocation_throwsNullPointerException() {"},{"lineNumber":32,"author":{"gitID":"jingyinno"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":33,"author":{"gitID":"jingyinno"},"content":"        new MapCommand(null);"},{"lineNumber":34,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":36,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"jingyinno"},"content":"    public void execute_inputOneLocation_retrievalSuccessful() throws Exception {"},{"lineNumber":38,"author":{"gitID":"jingyinno"},"content":"        String expectedMessage \u003d String.format(MapCommand.MESSAGE_SUCCESS);"},{"lineNumber":39,"author":{"gitID":"jingyinno"},"content":"        CommandResult result \u003d prepareCommand(VALID_LOCATION_BUILDING_UPPERCASE_1, model).execute();"},{"lineNumber":40,"author":{"gitID":"jingyinno"},"content":"        assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":41,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":43,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"jingyinno"},"content":"    public void execute_inputTwoLocations_retrievalSuccessful() throws Exception {"},{"lineNumber":45,"author":{"gitID":"jingyinno"},"content":"        String expectedMessage \u003d String.format(MapCommand.MESSAGE_SUCCESS);"},{"lineNumber":46,"author":{"gitID":"jingyinno"},"content":"        CommandResult result \u003d prepareCommand(VALID_TWO_LOCATIONS_ADDRESS, model).execute();"},{"lineNumber":47,"author":{"gitID":"jingyinno"},"content":"        assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":48,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":50,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"jingyinno"},"content":"    public void execute_inputThreeLocations_retrievalSuccessful() throws Exception {"},{"lineNumber":52,"author":{"gitID":"jingyinno"},"content":"        String expectedMessage \u003d String.format(MapCommand.MESSAGE_SUCCESS);"},{"lineNumber":53,"author":{"gitID":"jingyinno"},"content":"        CommandResult result \u003d prepareCommand(VALID_THREE_LOCATIONS, model).execute();"},{"lineNumber":54,"author":{"gitID":"jingyinno"},"content":"        assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":55,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":57,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"jingyinno"},"content":"    public void equals() {"},{"lineNumber":59,"author":{"gitID":"jingyinno"},"content":"        MapCommand nus \u003d new MapCommand(\"nus\");"},{"lineNumber":60,"author":{"gitID":"jingyinno"},"content":"        MapCommand soc \u003d new MapCommand(\"soc\");"},{"lineNumber":61,"author":{"gitID":"jingyinno"},"content":"        MapCommand nusCopy \u003d new MapCommand(\"nus\");"},{"lineNumber":62,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":63,"author":{"gitID":"jingyinno"},"content":"        // same object \u0026 values -\u003e returns true"},{"lineNumber":64,"author":{"gitID":"jingyinno"},"content":"        assertTrue(nus.equals(nusCopy));"},{"lineNumber":65,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":66,"author":{"gitID":"jingyinno"},"content":"        // different types -\u003e returns false"},{"lineNumber":67,"author":{"gitID":"jingyinno"},"content":"        assertFalse(nus.equals(1));"},{"lineNumber":68,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":69,"author":{"gitID":"jingyinno"},"content":"        // null -\u003e returns false"},{"lineNumber":70,"author":{"gitID":"jingyinno"},"content":"        assertFalse(nus \u003d\u003d null);"},{"lineNumber":71,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":72,"author":{"gitID":"jingyinno"},"content":"        // different person -\u003e returns false"},{"lineNumber":73,"author":{"gitID":"jingyinno"},"content":"        assertFalse(nus.equals(soc));"},{"lineNumber":74,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":76,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"jingyinno"},"content":"     * Generates a new MapCommand given the locations specified"},{"lineNumber":78,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"jingyinno"},"content":"    private MapCommand prepareCommand(String locations, Model model) {"},{"lineNumber":80,"author":{"gitID":"jingyinno"},"content":"        MapCommand command \u003d new MapCommand(locations);"},{"lineNumber":81,"author":{"gitID":"jingyinno"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":82,"author":{"gitID":"jingyinno"},"content":"        return command;"},{"lineNumber":83,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"jingyinno"},"content":"}"}],"authorContributionMap":{"jingyinno":64,"-":20}},{"path":"src/test/java/seedu/address/logic/parser/TimetableUnionCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalOddEven.ODD;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.TimetableUnionCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"AzuraAiR"},"content":"//@@author AzuraAiR"},{"lineNumber":19,"author":{"gitID":"AzuraAiR"},"content":"public class TimetableUnionCommandParserTest {"},{"lineNumber":20,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":21,"author":{"gitID":"AzuraAiR"},"content":"    private TimetableUnionCommandParser parser \u003d new TimetableUnionCommandParser();"},{"lineNumber":22,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":23,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"AzuraAiR"},"content":"    public void parse_validArgs_returnsTimeTableCommand() {"},{"lineNumber":25,"author":{"gitID":"AzuraAiR"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":26,"author":{"gitID":"AzuraAiR"},"content":"        indexes.add(INDEX_FIRST_PERSON);"},{"lineNumber":27,"author":{"gitID":"AzuraAiR"},"content":"        indexes.add(INDEX_SECOND_PERSON);"},{"lineNumber":28,"author":{"gitID":"AzuraAiR"},"content":"        assertParseSuccess(parser, \"Odd 1 2\", new TimetableUnionCommand(indexes, ODD));"},{"lineNumber":29,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":31,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"AzuraAiR"},"content":"    public void parse_moreThanTwoValidArgs_returnsTimeTableCommand() {"},{"lineNumber":33,"author":{"gitID":"AzuraAiR"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":34,"author":{"gitID":"AzuraAiR"},"content":"        indexes.add(INDEX_FIRST_PERSON);"},{"lineNumber":35,"author":{"gitID":"AzuraAiR"},"content":"        indexes.add(INDEX_SECOND_PERSON);"},{"lineNumber":36,"author":{"gitID":"AzuraAiR"},"content":"        indexes.add(INDEX_THIRD_PERSON);"},{"lineNumber":37,"author":{"gitID":"AzuraAiR"},"content":"        assertParseSuccess(parser, \"Odd 1 2 3\", new TimetableUnionCommand(indexes, ODD));"},{"lineNumber":38,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":40,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"AzuraAiR"},"content":"    public void parse_invalidNumArgs_throwsParseException() {"},{"lineNumber":42,"author":{"gitID":"AzuraAiR"},"content":"        assertParseFailure(parser, \"Odd 1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":43,"author":{"gitID":"AzuraAiR"},"content":"                TimetableUnionCommand.MESSAGE_USAGE));"},{"lineNumber":44,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":46,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"AzuraAiR"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":48,"author":{"gitID":"AzuraAiR"},"content":"        assertParseFailure(parser, \"odd1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":49,"author":{"gitID":"AzuraAiR"},"content":"                TimetableUnionCommand.MESSAGE_USAGE));"},{"lineNumber":50,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":52,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"AzuraAiR"},"content":"    public void parse_repeatedArgs_throwsParseException() {"},{"lineNumber":54,"author":{"gitID":"AzuraAiR"},"content":"        assertParseFailure(parser, \"Odd 1 1 2\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":55,"author":{"gitID":"AzuraAiR"},"content":"                TimetableUnionCommand.MESSAGE_USAGE));"},{"lineNumber":56,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"AzuraAiR"},"content":"}"}],"authorContributionMap":{"AzuraAiR":40,"-":17}},{"path":"src/test/java/seedu/address/logic/commands/AliasCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_COMMAND_DESC;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALIAS_ADD;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelStub;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.exceptions.DuplicateAliasException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AliasBuilder;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"jingyinno"},"content":"//@@author jingyinno"},{"lineNumber":30,"author":{"gitID":"jingyinno"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"jingyinno"},"content":" * Contains integration tests (interaction with the Model) and unit tests for AliasCommand."},{"lineNumber":32,"author":{"gitID":"jingyinno"},"content":" */"},{"lineNumber":33,"author":{"gitID":"jingyinno"},"content":"public class AliasCommandTest {"},{"lineNumber":34,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":35,"author":{"gitID":"jingyinno"},"content":"    @Rule"},{"lineNumber":36,"author":{"gitID":"jingyinno"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":37,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":38,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"jingyinno"},"content":"    public void constructor_nullAlias_throwsNullPointerException() {"},{"lineNumber":40,"author":{"gitID":"jingyinno"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":41,"author":{"gitID":"jingyinno"},"content":"        new AliasCommand(null);"},{"lineNumber":42,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":44,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"jingyinno"},"content":"    public void execute_aliasAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":46,"author":{"gitID":"jingyinno"},"content":"        ModelStubAcceptingAliasAdded modelStub \u003d new ModelStubAcceptingAliasAdded();"},{"lineNumber":47,"author":{"gitID":"jingyinno"},"content":"        Alias validAlias \u003d new AliasBuilder().build();"},{"lineNumber":48,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":49,"author":{"gitID":"jingyinno"},"content":"        CommandResult commandResult \u003d getAliasCommand(validAlias, modelStub).execute();"},{"lineNumber":50,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":51,"author":{"gitID":"jingyinno"},"content":"        assertEquals(String.format(AliasCommand.MESSAGE_SUCCESS, validAlias), commandResult.feedbackToUser);"},{"lineNumber":52,"author":{"gitID":"jingyinno"},"content":"        assertEquals(Arrays.asList(validAlias), modelStub.aliasesAdded);"},{"lineNumber":53,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":55,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"jingyinno"},"content":"    public void execute_duplicateAlias_throwsCommandException() throws Exception {"},{"lineNumber":57,"author":{"gitID":"jingyinno"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateAliasException();"},{"lineNumber":58,"author":{"gitID":"jingyinno"},"content":"        Alias validAlias \u003d new AliasBuilder().build();"},{"lineNumber":59,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":60,"author":{"gitID":"jingyinno"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":61,"author":{"gitID":"jingyinno"},"content":"        thrown.expectMessage(AliasCommand.MESSAGE_DUPLICATE_ALIAS);"},{"lineNumber":62,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":63,"author":{"gitID":"jingyinno"},"content":"        getAliasCommand(validAlias, modelStub).execute();"},{"lineNumber":64,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":66,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"jingyinno"},"content":"    public void execute_aliasWordAlias_failure() throws Exception {"},{"lineNumber":68,"author":{"gitID":"jingyinno"},"content":"        //test alias word to be a command word failure"},{"lineNumber":69,"author":{"gitID":"jingyinno"},"content":"        ModelStubAcceptingAliasAdded modelStub \u003d new ModelStubAcceptingAliasAdded();"},{"lineNumber":70,"author":{"gitID":"jingyinno"},"content":"        List\u003cString\u003e commands \u003d AliasCommand.getCommands();"},{"lineNumber":71,"author":{"gitID":"jingyinno"},"content":"        for (int i \u003d 0; i \u003c commands.size(); i++) {"},{"lineNumber":72,"author":{"gitID":"jingyinno"},"content":"            for (int j \u003d 0; j \u003c commands.size(); j++) {"},{"lineNumber":73,"author":{"gitID":"jingyinno"},"content":"                thrown.expect(CommandException.class);"},{"lineNumber":74,"author":{"gitID":"jingyinno"},"content":"                Alias invalidAlias \u003d new Alias(commands.get(i), commands.get(j));"},{"lineNumber":75,"author":{"gitID":"jingyinno"},"content":"                getAliasCommand(invalidAlias, modelStub).execute();"},{"lineNumber":76,"author":{"gitID":"jingyinno"},"content":"            }"},{"lineNumber":77,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":80,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"jingyinno"},"content":"    public void execute_commandWordAlias_failure() throws Exception {"},{"lineNumber":82,"author":{"gitID":"jingyinno"},"content":"        //test invalid command word with valid alias word failure"},{"lineNumber":83,"author":{"gitID":"jingyinno"},"content":"        ModelStubAcceptingAliasAdded modelStub \u003d new ModelStubAcceptingAliasAdded();"},{"lineNumber":84,"author":{"gitID":"jingyinno"},"content":"        Alias invalidAlias \u003d new Alias(INVALID_COMMAND_DESC, VALID_ALIAS_ADD);"},{"lineNumber":85,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":86,"author":{"gitID":"jingyinno"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":87,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":88,"author":{"gitID":"jingyinno"},"content":"        getAliasCommand(invalidAlias, modelStub).execute();"},{"lineNumber":89,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":91,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":92,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"jingyinno"},"content":"    public void equals() {"},{"lineNumber":94,"author":{"gitID":"jingyinno"},"content":"        Alias edit \u003d new AliasBuilder().withCommand(\"Edit\").build();"},{"lineNumber":95,"author":{"gitID":"jingyinno"},"content":"        Alias exit \u003d new AliasBuilder().withCommand(\"Exit\").build();"},{"lineNumber":96,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":97,"author":{"gitID":"jingyinno"},"content":"        AliasCommand editAliasCommand \u003d new AliasCommand(edit);"},{"lineNumber":98,"author":{"gitID":"jingyinno"},"content":"        AliasCommand exitAliasCommand \u003d new AliasCommand(exit);"},{"lineNumber":99,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":100,"author":{"gitID":"jingyinno"},"content":"        // same object -\u003e returns true"},{"lineNumber":101,"author":{"gitID":"jingyinno"},"content":"        assertTrue(editAliasCommand.equals(editAliasCommand));"},{"lineNumber":102,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":103,"author":{"gitID":"jingyinno"},"content":"        // same values -\u003e returns true"},{"lineNumber":104,"author":{"gitID":"jingyinno"},"content":"        AliasCommand editAliasCommandCopy \u003d new AliasCommand(edit);"},{"lineNumber":105,"author":{"gitID":"jingyinno"},"content":"        assertTrue(editAliasCommand.equals(editAliasCommandCopy));"},{"lineNumber":106,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":107,"author":{"gitID":"jingyinno"},"content":"        // different types -\u003e returns false"},{"lineNumber":108,"author":{"gitID":"jingyinno"},"content":"        assertFalse(editAliasCommand.equals(1));"},{"lineNumber":109,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":110,"author":{"gitID":"jingyinno"},"content":"        // null -\u003e returns false"},{"lineNumber":111,"author":{"gitID":"jingyinno"},"content":"        assertFalse(editAliasCommand \u003d\u003d null);"},{"lineNumber":112,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":113,"author":{"gitID":"jingyinno"},"content":"        // different alias -\u003e returns false"},{"lineNumber":114,"author":{"gitID":"jingyinno"},"content":"        assertFalse(editAliasCommand.equals(exitAliasCommand));"},{"lineNumber":115,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":117,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"jingyinno"},"content":"     * Generates a new AliasCommand with the details of the given alias."},{"lineNumber":119,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"jingyinno"},"content":"    private AliasCommand getAliasCommand(Alias alias, Model model) {"},{"lineNumber":121,"author":{"gitID":"jingyinno"},"content":"        AliasCommand command \u003d new AliasCommand(alias);"},{"lineNumber":122,"author":{"gitID":"jingyinno"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":123,"author":{"gitID":"jingyinno"},"content":"        return command;"},{"lineNumber":124,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":126,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"jingyinno"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":128,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"jingyinno"},"content":"    private class ModelStubThrowingDuplicateAliasException extends ModelStub {"},{"lineNumber":130,"author":{"gitID":"jingyinno"},"content":"        @Override"},{"lineNumber":131,"author":{"gitID":"jingyinno"},"content":"        public void addAlias(Alias alias) throws DuplicateAliasException {"},{"lineNumber":132,"author":{"gitID":"jingyinno"},"content":"            throw new DuplicateAliasException();"},{"lineNumber":133,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":135,"author":{"gitID":"jingyinno"},"content":"        @Override"},{"lineNumber":136,"author":{"gitID":"jingyinno"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":137,"author":{"gitID":"jingyinno"},"content":"            return new AddressBook();"},{"lineNumber":138,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":141,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"jingyinno"},"content":"     * A Model stub that always accept the alias being added."},{"lineNumber":143,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"jingyinno"},"content":"    private class ModelStubAcceptingAliasAdded extends ModelStub {"},{"lineNumber":145,"author":{"gitID":"jingyinno"},"content":"        private final ArrayList\u003cAlias\u003e aliasesAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":146,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":147,"author":{"gitID":"jingyinno"},"content":"        @Override"},{"lineNumber":148,"author":{"gitID":"jingyinno"},"content":"        public void addAlias(Alias alias) {"},{"lineNumber":149,"author":{"gitID":"jingyinno"},"content":"            requireNonNull(alias);"},{"lineNumber":150,"author":{"gitID":"jingyinno"},"content":"            aliasesAdded.add(alias);"},{"lineNumber":151,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":153,"author":{"gitID":"jingyinno"},"content":"        @Override"},{"lineNumber":154,"author":{"gitID":"jingyinno"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":155,"author":{"gitID":"jingyinno"},"content":"            return new AddressBook();"},{"lineNumber":156,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"jingyinno"},"content":"}"}],"authorContributionMap":{"jingyinno":130,"-":28}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMETABLE;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TimetableBuilder.DUMMY_LINK_ONE;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TimetableBuilder.DUMMY_LINK_TWO;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.SecurityUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":34,"author":{"gitID":"-"},"content":" */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String VALID_BIRTHDAY_AMY \u003d \"01011995\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String VALID_BIRTHDAY_BOB \u003d \"02021993\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String VALID_TIMETABLE_AMY \u003d DUMMY_LINK_ONE;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String VALID_TIMETABLE_BOB \u003d DUMMY_LINK_TWO;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":51,"author":{"gitID":"Caijun7"},"content":"    public static final String VALID_TAG_UNUSED \u003d \"unused\"; // do not use this tag when creating a person"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final String BIRTHDAY_DESC_AMY \u003d \" \" + PREFIX_BIRTHDAY + VALID_BIRTHDAY_AMY;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String BIRTHDAY_DESC_BOB \u003d \" \" + PREFIX_BIRTHDAY + VALID_BIRTHDAY_BOB;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String TIMETABLE_DESC_AMY \u003d \" \" + PREFIX_TIMETABLE + VALID_TIMETABLE_AMY;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String TIMETABLE_DESC_BOB \u003d \" \" + PREFIX_TIMETABLE + VALID_TIMETABLE_BOB;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static final String INVALID_BIRTHDAY_DESC \u003d \" \" + PREFIX_BIRTHDAY + \"12345b\"; // \u0027b\u0027 not allowed in birthday"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public static final String INVALID_TIMETABLE_DESC \u003d \" \" + PREFIX_TIMETABLE"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            + \"http://google.com/\"; // not NUSMods links"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"jingyinno"},"content":"    //@@author jingyinno"},{"lineNumber":81,"author":{"gitID":"jingyinno"},"content":"    public static final String VALID_ALIAS_ADD \u003d \"add1\";"},{"lineNumber":82,"author":{"gitID":"jingyinno"},"content":"    public static final String VALID_ALIAS_ALIAS \u003d \"alias1\";"},{"lineNumber":83,"author":{"gitID":"jingyinno"},"content":"    public static final String VALID_ALIAS_BIRTHDAYS \u003d \"birthdays1\";"},{"lineNumber":84,"author":{"gitID":"jingyinno"},"content":"    public static final String VALID_ALIAS_CLEAR_COMMAND \u003d ClearCommand.COMMAND_WORD;"},{"lineNumber":85,"author":{"gitID":"jingyinno"},"content":"    public static final String VALID_ALIAS_CLEAR \u003d \"clear1\";"},{"lineNumber":86,"author":{"gitID":"jingyinno"},"content":"    public static final String VALID_ALIAS_DELETE_COMMAND \u003d DeleteCommand.COMMAND_WORD;"},{"lineNumber":87,"author":{"gitID":"jingyinno"},"content":"    public static final String VALID_ALIAS_DELETE \u003d \"delete1\";"},{"lineNumber":88,"author":{"gitID":"jingyinno"},"content":"    public static final String VALID_ALIAS_EDIT \u003d \"edit1\";"},{"lineNumber":89,"author":{"gitID":"jingyinno"},"content":"    public static final String VALID_ALIAS_EXIT \u003d \"exit1\";"},{"lineNumber":90,"author":{"gitID":"jingyinno"},"content":"    public static final String VALID_ALIAS_EXPORT \u003d \"export1\";"},{"lineNumber":91,"author":{"gitID":"jingyinno"},"content":"    public static final String VALID_ALIAS_FIND \u003d \"find1\";"},{"lineNumber":92,"author":{"gitID":"jingyinno"},"content":"    public static final String VALID_ALIAS_HELP_COMMAND \u003d HelpCommand.COMMAND_WORD;"},{"lineNumber":93,"author":{"gitID":"jingyinno"},"content":"    public static final String VALID_ALIAS_HELP \u003d \"help1\";"},{"lineNumber":94,"author":{"gitID":"jingyinno"},"content":"    public static final String VALID_ALIAS_HISTORY \u003d \"history1\";"},{"lineNumber":95,"author":{"gitID":"jingyinno"},"content":"    public static final String VALID_ALIAS_IMPORT \u003d \"import1\";"},{"lineNumber":96,"author":{"gitID":"jingyinno"},"content":"    public static final String VALID_ALIAS_LIST_COMMAND \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":97,"author":{"gitID":"jingyinno"},"content":"    public static final String VALID_ALIAS_LIST \u003d \"list1\";"},{"lineNumber":98,"author":{"gitID":"jingyinno"},"content":"    public static final String VALID_ALIAS_MAP1 \u003d \"map1\";"},{"lineNumber":99,"author":{"gitID":"jingyinno"},"content":"    public static final String VALID_ALIAS_MAP2 \u003d \"map2\";"},{"lineNumber":100,"author":{"gitID":"jingyinno"},"content":"    public static final String VALID_ALIAS_ENCRYPT \u003d \"encrypt1\";"},{"lineNumber":101,"author":{"gitID":"jingyinno"},"content":"    public static final String VALID_ALIAS_REDO \u003d \"redo1\";"},{"lineNumber":102,"author":{"gitID":"jingyinno"},"content":"    public static final String VALID_ALIAS_DECRYPT \u003d \"decrypt1\";"},{"lineNumber":103,"author":{"gitID":"jingyinno"},"content":"    public static final String VALID_ALIAS_SELECT \u003d \"select1\";"},{"lineNumber":104,"author":{"gitID":"jingyinno"},"content":"    public static final String VALID_ALIAS_UNALIAS \u003d \"unalias1\";"},{"lineNumber":105,"author":{"gitID":"jingyinno"},"content":"    public static final String VALID_ALIAS_UNDO \u003d \"undo1\";"},{"lineNumber":106,"author":{"gitID":"jingyinno"},"content":"    public static final String VALID_ALIAS_VACANT \u003d \"vacant1\";"},{"lineNumber":107,"author":{"gitID":"jingyinno"},"content":"    public static final String VALID_ALIAS_UNION \u003d \"union1\";"},{"lineNumber":108,"author":{"gitID":"jingyinno"},"content":"    public static final String VALID_ALIAS_UPLOAD \u003d \"upload1\";"},{"lineNumber":109,"author":{"gitID":"jingyinno"},"content":"    public static final String VALID_ALIAS_NUMBER \u003d \"911\";"},{"lineNumber":110,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":111,"author":{"gitID":"jingyinno"},"content":"    public static final String ALIAS_DESC_ADD \u003d AddCommand.COMMAND_WORD + \" \" + VALID_ALIAS_ADD;"},{"lineNumber":112,"author":{"gitID":"jingyinno"},"content":"    public static final String ALIAS_DESC_ALIAS \u003d AliasCommand.COMMAND_WORD + \" \" + VALID_ALIAS_ALIAS;"},{"lineNumber":113,"author":{"gitID":"jingyinno"},"content":"    public static final String ALIAS_DESC_BIRTHDAYS \u003d BirthdaysCommand.COMMAND_WORD + \" \" + VALID_ALIAS_BIRTHDAYS;"},{"lineNumber":114,"author":{"gitID":"jingyinno"},"content":"    public static final String ALIAS_DESC_CLEAR \u003d ClearCommand.COMMAND_WORD + \" \" + VALID_ALIAS_CLEAR;"},{"lineNumber":115,"author":{"gitID":"jingyinno"},"content":"    public static final String ALIAS_DESC_DELETE \u003d DeleteCommand.COMMAND_WORD + \" \" + VALID_ALIAS_DELETE;"},{"lineNumber":116,"author":{"gitID":"jingyinno"},"content":"    public static final String ALIAS_DESC_DECRYPT \u003d RemovePasswordCommand.COMMAND_WORD + \" \" + VALID_ALIAS_DECRYPT;"},{"lineNumber":117,"author":{"gitID":"jingyinno"},"content":"    public static final String ALIAS_DESC_EDIT \u003d EditCommand.COMMAND_WORD + \" \" + VALID_ALIAS_EDIT;"},{"lineNumber":118,"author":{"gitID":"jingyinno"},"content":"    public static final String ALIAS_DESC_EXIT \u003d ExitCommand.COMMAND_WORD + \" \" + VALID_ALIAS_EXIT;"},{"lineNumber":119,"author":{"gitID":"jingyinno"},"content":"    public static final String ALIAS_DESC_ENCRYPT \u003d PasswordCommand.COMMAND_WORD + \" \" + VALID_ALIAS_ENCRYPT;"},{"lineNumber":120,"author":{"gitID":"jingyinno"},"content":"    public static final String ALIAS_DESC_EXPORT \u003d ExportCommand.COMMAND_WORD + \" \" + VALID_ALIAS_EXPORT;"},{"lineNumber":121,"author":{"gitID":"jingyinno"},"content":"    public static final String ALIAS_DESC_FIND \u003d FindCommand.COMMAND_WORD + \" \" + VALID_ALIAS_FIND;"},{"lineNumber":122,"author":{"gitID":"jingyinno"},"content":"    public static final String ALIAS_DESC_HELP \u003d HelpCommand.COMMAND_WORD + \" \" + VALID_ALIAS_HELP;"},{"lineNumber":123,"author":{"gitID":"jingyinno"},"content":"    public static final String ALIAS_DESC_HISTORY \u003d HistoryCommand.COMMAND_WORD + \" \" + VALID_ALIAS_HISTORY;"},{"lineNumber":124,"author":{"gitID":"jingyinno"},"content":"    public static final String ALIAS_DESC_IMPORT \u003d ImportCommand.COMMAND_WORD + \" \" + VALID_ALIAS_IMPORT;"},{"lineNumber":125,"author":{"gitID":"jingyinno"},"content":"    public static final String ALIAS_DESC_LIST \u003d ListCommand.COMMAND_WORD + \" \" + VALID_ALIAS_LIST;"},{"lineNumber":126,"author":{"gitID":"jingyinno"},"content":"    public static final String ALIAS_DESC_MAP1 \u003d MapCommand.COMMAND_WORD + \" \" + VALID_ALIAS_MAP1;"},{"lineNumber":127,"author":{"gitID":"jingyinno"},"content":"    public static final String ALIAS_DESC_MAP2 \u003d MapCommand.COMMAND_WORD + \" \" + VALID_ALIAS_MAP2;"},{"lineNumber":128,"author":{"gitID":"jingyinno"},"content":"    public static final String ALIAS_DESC_REDO \u003d RedoCommand.COMMAND_WORD + \" \" + VALID_ALIAS_REDO;"},{"lineNumber":129,"author":{"gitID":"jingyinno"},"content":"    public static final String ALIAS_DESC_SELECT \u003d SelectCommand.COMMAND_WORD + \" \" + VALID_ALIAS_SELECT;"},{"lineNumber":130,"author":{"gitID":"jingyinno"},"content":"    public static final String ALIAS_DESC_UNALIAS \u003d UnaliasCommand.COMMAND_WORD + \" \" + VALID_ALIAS_UNALIAS;"},{"lineNumber":131,"author":{"gitID":"jingyinno"},"content":"    public static final String ALIAS_DESC_UNDO \u003d UndoCommand.COMMAND_WORD + \" \" + VALID_ALIAS_UNDO;"},{"lineNumber":132,"author":{"gitID":"jingyinno"},"content":"    public static final String ALIAS_DESC_VACANT \u003d VacantCommand.COMMAND_WORD + \" \" + VALID_ALIAS_VACANT;"},{"lineNumber":133,"author":{"gitID":"jingyinno"},"content":"    public static final String ALIAS_DESC_UNION \u003d TimetableUnionCommand.COMMAND_WORD + \" \" + VALID_ALIAS_UNION;"},{"lineNumber":134,"author":{"gitID":"jingyinno"},"content":"    public static final String ALIAS_DESC_UPLOAD \u003d UploadCommand.COMMAND_WORD + \" \" + VALID_ALIAS_UPLOAD;"},{"lineNumber":135,"author":{"gitID":"jingyinno"},"content":"    public static final String ALIAS_DESC_NUMBER \u003d UploadCommand.COMMAND_WORD + \" \" + VALID_ALIAS_NUMBER;"},{"lineNumber":136,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":137,"author":{"gitID":"jingyinno"},"content":"    public static final String INVALID_COMMAND_SYNTAX \u003d \"command!\";"},{"lineNumber":138,"author":{"gitID":"jingyinno"},"content":"    public static final String INVALID_ALIAS \u003d \"alias!\";"},{"lineNumber":139,"author":{"gitID":"jingyinno"},"content":"    public static final String INVALID_COMMAND_DESC \u003d \"invalid\";"},{"lineNumber":140,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":141,"author":{"gitID":"jingyinno"},"content":"    public static final String INVALID_COMMAND_SYNTAX_DESC \u003d INVALID_COMMAND_SYNTAX + \" \" + VALID_ALIAS_ALIAS;"},{"lineNumber":142,"author":{"gitID":"jingyinno"},"content":"    public static final String INVALID_COMMAND_WORD_DESC \u003d INVALID_COMMAND_DESC + \" \" + VALID_ALIAS_ALIAS;"},{"lineNumber":143,"author":{"gitID":"jingyinno"},"content":"    public static final String INVALID_ALIAS_SYNTAX_DESC \u003d SelectCommand.COMMAND_WORD + \" \" + INVALID_ALIAS;"},{"lineNumber":144,"author":{"gitID":"jingyinno"},"content":"    public static final String INVALID_ALIAS_WORD_DESC \u003d SelectCommand.COMMAND_WORD + \" \" + VacantCommand.COMMAND_WORD;"},{"lineNumber":145,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":146,"author":{"gitID":"jingyinno"},"content":"    public static final String VALID_BUILDING_1 \u003d \"COM1\";"},{"lineNumber":147,"author":{"gitID":"jingyinno"},"content":"    public static final String VALID_BUILDING_2 \u003d \"S1\";"},{"lineNumber":148,"author":{"gitID":"jingyinno"},"content":"    public static final String VALID_BUILDING_3 \u003d \"ERC\";"},{"lineNumber":149,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":150,"author":{"gitID":"jingyinno"},"content":"    public static final String INVALID_BUILDING_1 \u003d \"ERC*\";"},{"lineNumber":151,"author":{"gitID":"jingyinno"},"content":"    public static final String INVALID_BUILDING_2 \u003d \"COM1 COM2\";"},{"lineNumber":152,"author":{"gitID":"jingyinno"},"content":"    public static final String INVALID_BUILDING_3 \u003d \"Building\";"},{"lineNumber":153,"author":{"gitID":"jingyinno"},"content":"    public static final String MIXED_CASE_VACANT_COMMAND_WORD \u003d \"VaCaNt\";"},{"lineNumber":154,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":155,"author":{"gitID":"jingyinno"},"content":"    public static final String VALID_UNALIAS \u003d VALID_ALIAS_ADD;"},{"lineNumber":156,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":157,"author":{"gitID":"jingyinno"},"content":"    public static final String INVALID_UNALIAS \u003d \"nonexistent\";"},{"lineNumber":158,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":159,"author":{"gitID":"jingyinno"},"content":"    public static final String INVALID_UNALIAS_DESC \u003d \"alias!\";"},{"lineNumber":160,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":161,"author":{"gitID":"jingyinno"},"content":"    public static final String VALID_LOCATION_BUILDING_UPPERCASE_1 \u003d \"EA\";"},{"lineNumber":162,"author":{"gitID":"jingyinno"},"content":"    public static final String VALID_LOCATION_BUILDING_UPPERCASE_2 \u003d \"COM1\";"},{"lineNumber":163,"author":{"gitID":"jingyinno"},"content":"    public static final String VALID_LOCATION_BUILDING_LOWERCASE \u003d \"ea\";"},{"lineNumber":164,"author":{"gitID":"jingyinno"},"content":"    public static final String VALID_LOCATION_POSTAL_1 \u003d \"677743\";"},{"lineNumber":165,"author":{"gitID":"jingyinno"},"content":"    public static final String VALID_LOCATION_POSTAL_2 \u003d \"819643\";"},{"lineNumber":166,"author":{"gitID":"jingyinno"},"content":"    public static final String VALID_LOCATION_ADDRESS_1 \u003d \"Changi Airport Singapore\";"},{"lineNumber":167,"author":{"gitID":"jingyinno"},"content":"    public static final String VALID_LOCATION_ADDRESS_2 \u003d \"Serangoon block 413\";"},{"lineNumber":168,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":169,"author":{"gitID":"jingyinno"},"content":"    //EA to COM1"},{"lineNumber":170,"author":{"gitID":"jingyinno"},"content":"    public static final String VALID_TWO_LOCATIONS_BUILDING \u003d VALID_LOCATION_BUILDING_UPPERCASE_1 + \"/\""},{"lineNumber":171,"author":{"gitID":"jingyinno"},"content":"            + VALID_LOCATION_BUILDING_UPPERCASE_2;"},{"lineNumber":172,"author":{"gitID":"jingyinno"},"content":"    //677743 to 819643"},{"lineNumber":173,"author":{"gitID":"jingyinno"},"content":"    public static final String VALID_TWO_LOCATIONS_POSTAL \u003d VALID_LOCATION_POSTAL_1 + \"/\""},{"lineNumber":174,"author":{"gitID":"jingyinno"},"content":"            + VALID_LOCATION_POSTAL_2;"},{"lineNumber":175,"author":{"gitID":"jingyinno"},"content":"    //Changi Airport Terminal to Serangoon block 413"},{"lineNumber":176,"author":{"gitID":"jingyinno"},"content":"    public static final String VALID_TWO_LOCATIONS_ADDRESS \u003d VALID_LOCATION_ADDRESS_1 + \"/\""},{"lineNumber":177,"author":{"gitID":"jingyinno"},"content":"            + VALID_LOCATION_ADDRESS_2;"},{"lineNumber":178,"author":{"gitID":"jingyinno"},"content":"    //building, postal"},{"lineNumber":179,"author":{"gitID":"jingyinno"},"content":"    public static final String VALID_TWO_LOCATIONS_1 \u003d VALID_LOCATION_BUILDING_UPPERCASE_1 + \"/\""},{"lineNumber":180,"author":{"gitID":"jingyinno"},"content":"            + VALID_LOCATION_POSTAL_1;"},{"lineNumber":181,"author":{"gitID":"jingyinno"},"content":"    //building, address"},{"lineNumber":182,"author":{"gitID":"jingyinno"},"content":"    public static final String VALID_TWO_LOCATIONS_2 \u003d VALID_LOCATION_BUILDING_UPPERCASE_1 + \"/\""},{"lineNumber":183,"author":{"gitID":"jingyinno"},"content":"            + VALID_LOCATION_ADDRESS_1;"},{"lineNumber":184,"author":{"gitID":"jingyinno"},"content":"    //postal, address"},{"lineNumber":185,"author":{"gitID":"jingyinno"},"content":"    public static final String VALID_TWO_LOCATIONS_3 \u003d VALID_LOCATION_POSTAL_1 + \"/\""},{"lineNumber":186,"author":{"gitID":"jingyinno"},"content":"            + VALID_LOCATION_ADDRESS_1;"},{"lineNumber":187,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":188,"author":{"gitID":"jingyinno"},"content":"    public static final String VALID_THREE_LOCATIONS \u003d VALID_LOCATION_ADDRESS_1 + \"/\""},{"lineNumber":189,"author":{"gitID":"jingyinno"},"content":"            + VALID_LOCATION_BUILDING_LOWERCASE + \"/\" + VALID_LOCATION_POSTAL_2;"},{"lineNumber":190,"author":{"gitID":"jingyinno"},"content":"    //@@author"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"yeggasd"},"content":"    //@@author yeggasd"},{"lineNumber":193,"author":{"gitID":"yeggasd"},"content":"    public static final String VALID_PASSWORD \u003d \"test\";"},{"lineNumber":194,"author":{"gitID":"yeggasd"},"content":"    public static final byte[] VALID_PASSWORD_HASH;"},{"lineNumber":195,"author":{"gitID":"yeggasd"},"content":"    public static final String MIXED_CASE_PASSWORD_COMMAND_WORD \u003d \"EnCrYpT\";"},{"lineNumber":196,"author":{"gitID":"yeggasd"},"content":"    public static final String MIXED_CASE_REMOVEPASSWORD_COMMAND_WORD \u003d \"DeCrYpT\";"},{"lineNumber":197,"author":{"gitID":"yeggasd"},"content":"    //@@author"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"Caijun7"},"content":"    //@@author Caijun7"},{"lineNumber":200,"author":{"gitID":"Caijun7"},"content":"    public static final String VALID_IMPORT_FILEPATH \u003d \"src/test/data/ImportCommandTest/aliceAddressBook.xml\";"},{"lineNumber":201,"author":{"gitID":"Caijun7"},"content":"    public static final String ENCRYPTED_IMPORT_FILEPATH \u003d"},{"lineNumber":202,"author":{"gitID":"Caijun7"},"content":"            \"src/test/data/ImportCommandTest/encryptedAliceBensonAddressBook.xml\";"},{"lineNumber":203,"author":{"gitID":"Caijun7"},"content":"    public static final String TEST_PASSWORD \u003d \"test\";"},{"lineNumber":204,"author":{"gitID":"Caijun7"},"content":"    public static final String WRONG_PASSWORD \u003d \"wrong\";"},{"lineNumber":205,"author":{"gitID":"Caijun7"},"content":"    public static final String MIXED_CASE_IMPORT_COMMAND_WORD \u003d \"ImPoRt\";"},{"lineNumber":206,"author":{"gitID":"Caijun7"},"content":"    public static final String INVALID_IMPORT_FILEPATH \u003d \"src/\";"},{"lineNumber":207,"author":{"gitID":"Caijun7"},"content":"    public static final String INVALID_FILE_FORMAT \u003d \"src/test/data/ImportCommandTest/invalidFileFormatAddressBook.xml\";"},{"lineNumber":208,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":209,"author":{"gitID":"Caijun7"},"content":"    public static final String VALID_EXPORT_FILEPATH \u003d \"src/test/data/sandbox/temp.xml\";"},{"lineNumber":210,"author":{"gitID":"Caijun7"},"content":"    public static final String MIXED_CASE_EXPORT_COMMAND_WORD \u003d \"ExPoRt\";"},{"lineNumber":211,"author":{"gitID":"Caijun7"},"content":"    public static final String INVALID_EXPORT_FILEPATH \u003d \"src/\";"},{"lineNumber":212,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":213,"author":{"gitID":"Caijun7"},"content":"    public static final String VALID_UPLOAD_FILEPATH \u003d \"src/test/data/sandbox/temp.xml\";"},{"lineNumber":214,"author":{"gitID":"Caijun7"},"content":"    public static final String MIXED_CASE_UPLOAD_COMMAND_WORD \u003d \"UpLoAd\";"},{"lineNumber":215,"author":{"gitID":"Caijun7"},"content":"    public static final String INVALID_UPLOAD_FILEPATH \u003d \"src/\";"},{"lineNumber":216,"author":{"gitID":"Caijun7"},"content":"    //@@author"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        VALID_PASSWORD_HASH \u003d SecurityUtil.hashPassword(VALID_PASSWORD);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":224,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":225,"author":{"gitID":"-"},"content":"                .withBirthday(VALID_BIRTHDAY_AMY).withTimetable(VALID_TIMETABLE_AMY)"},{"lineNumber":226,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":228,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":229,"author":{"gitID":"-"},"content":"                .withBirthday(VALID_BIRTHDAY_BOB).withTimetable(VALID_TIMETABLE_BOB)"},{"lineNumber":230,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":239,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":242,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":243,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":253,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":254,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":255,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":258,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":262,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":263,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":265,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":266,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":267,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":273,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":274,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":275,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":283,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":286,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":287,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":288,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":289,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":291,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":292,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":293,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":294,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":295,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":296,"author":{"gitID":"-"},"content":""},{"lineNumber":297,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":298,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":299,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":300,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":301,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":302,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":303,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":304,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":305,"author":{"gitID":"-"},"content":""},{"lineNumber":306,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":307,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":308,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":309,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":310,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":311,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":312,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":313,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":314,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yeggasd":6,"Caijun7":19,"jingyinno":111,"-":178}},{"path":"src/test/java/seedu/address/logic/commands/BirthdaysCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.BirthdaysCommand.SHOWING_BIRTHDAY_MESSAGE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.BirthdaysCommand.SHOWING_BIRTHDAY_NOTIFICATION;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.BirthdayListEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.BirthdayNotificationEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"AzuraAiR"},"content":"//@@author AzuraAiR"},{"lineNumber":23,"author":{"gitID":"AzuraAiR"},"content":"public class BirthdaysCommandTest {"},{"lineNumber":24,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":25,"author":{"gitID":"AzuraAiR"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"AzuraAiR"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":27,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":28,"author":{"gitID":"AzuraAiR"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"AzuraAiR"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":30,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":31,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"AzuraAiR"},"content":"    public void execute_emptyBirthdays_birthdaysFailure() {"},{"lineNumber":33,"author":{"gitID":"AzuraAiR"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":34,"author":{"gitID":"AzuraAiR"},"content":"        new BirthdaysCommand(false).execute();"},{"lineNumber":35,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":37,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":38,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"AzuraAiR"},"content":"    public void execute_birthdaysWithoutToday_birthdaysSuccess() {"},{"lineNumber":40,"author":{"gitID":"AzuraAiR"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":41,"author":{"gitID":"AzuraAiR"},"content":"        CommandResult result \u003d prepareCommand(false, model).execute();"},{"lineNumber":42,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":43,"author":{"gitID":"AzuraAiR"},"content":"        assertEquals(SHOWING_BIRTHDAY_MESSAGE, result.feedbackToUser);"},{"lineNumber":44,"author":{"gitID":"AzuraAiR"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof BirthdayListEvent);"},{"lineNumber":45,"author":{"gitID":"AzuraAiR"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":46,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":48,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"AzuraAiR"},"content":"    public void execute_birthdaysWithToday_birthdaysSuccess() {"},{"lineNumber":50,"author":{"gitID":"AzuraAiR"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":51,"author":{"gitID":"AzuraAiR"},"content":"        CommandResult result \u003d prepareCommand(true, model).execute();"},{"lineNumber":52,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":53,"author":{"gitID":"AzuraAiR"},"content":"        assertEquals(SHOWING_BIRTHDAY_NOTIFICATION, result.feedbackToUser);"},{"lineNumber":54,"author":{"gitID":"AzuraAiR"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof BirthdayNotificationEvent);"},{"lineNumber":55,"author":{"gitID":"AzuraAiR"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":56,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":58,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"AzuraAiR"},"content":"     * Generates a new {@code ClearCommand} which upon execution, clears the contents in {@code model}."},{"lineNumber":60,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"AzuraAiR"},"content":"    private BirthdaysCommand prepareCommand(boolean today, Model model) {"},{"lineNumber":62,"author":{"gitID":"AzuraAiR"},"content":"        BirthdaysCommand command \u003d new BirthdaysCommand(today);"},{"lineNumber":63,"author":{"gitID":"AzuraAiR"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":64,"author":{"gitID":"AzuraAiR"},"content":"        return command;"},{"lineNumber":65,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"AzuraAiR"},"content":"}"}],"authorContributionMap":{"Caijun7":1,"AzuraAiR":45,"-":20}},{"path":"src/test/java/seedu/address/logic/commands/ImportCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Caijun7"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Caijun7"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.SecurityUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":30,"author":{"gitID":"Caijun7"},"content":"//@@author Caijun7"},{"lineNumber":31,"author":{"gitID":"Caijun7"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"Caijun7"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":33,"author":{"gitID":"Caijun7"},"content":" * {@code ImportCommand}."},{"lineNumber":34,"author":{"gitID":"Caijun7"},"content":" */"},{"lineNumber":35,"author":{"gitID":"Caijun7"},"content":"public class ImportCommandTest {"},{"lineNumber":36,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":37,"author":{"gitID":"Caijun7"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/ImportCommandTest/\");"},{"lineNumber":38,"author":{"gitID":"Caijun7"},"content":"    private static final String TEST_DATA_FILE_ALICE \u003d TEST_DATA_FOLDER + \"aliceAddressBook.xml\";"},{"lineNumber":39,"author":{"gitID":"Caijun7"},"content":"    private static final String TEST_DATA_FILE_ALICE_BENSON \u003d TEST_DATA_FOLDER + \"aliceBensonAddressBook.xml\";"},{"lineNumber":40,"author":{"gitID":"Caijun7"},"content":"    private static final String TEST_PASSWORD \u003d \"test\";"},{"lineNumber":41,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":42,"author":{"gitID":"Caijun7"},"content":"    @Rule"},{"lineNumber":43,"author":{"gitID":"Caijun7"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":44,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":45,"author":{"gitID":"Caijun7"},"content":"    private final AddressBook addressBookWithAliceAndBenson \u003d new AddressBookBuilder().withPerson(ALICE)"},{"lineNumber":46,"author":{"gitID":"Caijun7"},"content":"            .withPerson(BENSON).build();"},{"lineNumber":47,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":48,"author":{"gitID":"Caijun7"},"content":"    private Model model \u003d new ModelManager(new AddressBook(), new UserPrefs());"},{"lineNumber":49,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":50,"author":{"gitID":"Caijun7"},"content":"    private final ImportCommand standardCommand \u003d prepareCommand(TEST_DATA_FILE_ALICE_BENSON, model);"},{"lineNumber":51,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":52,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"Caijun7"},"content":"    public void execute_validFileImportIntoEmptyAddressBook_success() throws Exception {"},{"lineNumber":54,"author":{"gitID":"Caijun7"},"content":"        String filepath \u003d TEST_DATA_FOLDER + \"aliceBensonAddressBook.xml\";"},{"lineNumber":55,"author":{"gitID":"Caijun7"},"content":"        ImportCommand importCommand \u003d prepareCommand(filepath, model);"},{"lineNumber":56,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":57,"author":{"gitID":"Caijun7"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":58,"author":{"gitID":"Caijun7"},"content":"        expectedModel.importAddressBook(filepath, SecurityUtil.hashPassword(\"\"));"},{"lineNumber":59,"author":{"gitID":"Caijun7"},"content":"        assertCommandSuccess(importCommand, model, ImportCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":60,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":62,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"Caijun7"},"content":"    public void execute_validFileImportIntoNonEmptyAddressBook_success() throws Exception {"},{"lineNumber":64,"author":{"gitID":"Caijun7"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":65,"author":{"gitID":"Caijun7"},"content":"        String filepath \u003d TEST_DATA_FOLDER + \"aliceBensonAddressBook.xml\";"},{"lineNumber":66,"author":{"gitID":"Caijun7"},"content":"        ImportCommand importCommand \u003d prepareCommand(filepath, model);"},{"lineNumber":67,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":68,"author":{"gitID":"Caijun7"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":69,"author":{"gitID":"Caijun7"},"content":"        expectedModel.importAddressBook(filepath, SecurityUtil.hashPassword(\"\"));"},{"lineNumber":70,"author":{"gitID":"Caijun7"},"content":"        assertCommandSuccess(importCommand, model, ImportCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":71,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"Caijun7"},"content":"    //@@author"},{"lineNumber":73,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":74,"author":{"gitID":"yeggasd"},"content":"    //@@author yeggasd"},{"lineNumber":75,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"yeggasd"},"content":"    public void execute_encryptedAddressBook_success() throws Exception {"},{"lineNumber":77,"author":{"gitID":"yeggasd"},"content":"        String encryptedFile \u003d TEST_DATA_FOLDER + \"encryptedAliceBensonAddressBook.xml\";"},{"lineNumber":78,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":79,"author":{"gitID":"yeggasd"},"content":"        ImportCommand importCommand \u003d prepareCommand(encryptedFile, model, TEST_PASSWORD);"},{"lineNumber":80,"author":{"gitID":"yeggasd"},"content":"        importCommand.executeUndoableCommand();"},{"lineNumber":81,"author":{"gitID":"yeggasd"},"content":"        SecurityUtil.encrypt(encryptedFile, TEST_PASSWORD);"},{"lineNumber":82,"author":{"gitID":"yeggasd"},"content":"        assertEquals(model.getAddressBook(), addressBookWithAliceAndBenson);"},{"lineNumber":83,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":85,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"yeggasd"},"content":"    public void execute_wrongPasswordEncryptedAddressBook_throwsCommandException() throws Exception {"},{"lineNumber":87,"author":{"gitID":"yeggasd"},"content":"        String encryptedFile \u003d TEST_DATA_FOLDER + \"encryptedAliceBensonAddressBook.xml\";"},{"lineNumber":88,"author":{"gitID":"yeggasd"},"content":"        ImportCommand importCommand \u003d prepareCommand(encryptedFile, model, TEST_PASSWORD + \"1\");"},{"lineNumber":89,"author":{"gitID":"yeggasd"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":90,"author":{"gitID":"yeggasd"},"content":"        importCommand.executeUndoableCommand();"},{"lineNumber":91,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"yeggasd"},"content":"    //@@author"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"Caijun7"},"content":"    //@@author Caijun7"},{"lineNumber":95,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"Caijun7"},"content":"    public void execute_nonExistentFileImportIntoAddressBook_throwsCommandException() throws Exception {"},{"lineNumber":97,"author":{"gitID":"Caijun7"},"content":"        String nonExistentFile \u003d TEST_DATA_FOLDER + \"nonExistentFile.xml\";"},{"lineNumber":98,"author":{"gitID":"Caijun7"},"content":"        ImportCommand importCommand \u003d prepareCommand(nonExistentFile, model);"},{"lineNumber":99,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":100,"author":{"gitID":"Caijun7"},"content":"        assertCommandFailure(importCommand, model, ImportCommand.MESSAGE_FILE_NOT_FOUND);"},{"lineNumber":101,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":103,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"Caijun7"},"content":"    public void execute_invalidFileFormatImportIntoAddressBook_throwsCommandException() throws Exception {"},{"lineNumber":105,"author":{"gitID":"Caijun7"},"content":"        String invalidFileFormat \u003d TEST_DATA_FOLDER + \"invalidFileFormatAddressBook.xml\";"},{"lineNumber":106,"author":{"gitID":"Caijun7"},"content":"        ImportCommand importCommand \u003d prepareCommand(invalidFileFormat, model);"},{"lineNumber":107,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":108,"author":{"gitID":"Caijun7"},"content":"        assertCommandFailure(importCommand, model, ImportCommand.MESSAGE_DATA_CONVERSION_ERROR);"},{"lineNumber":109,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":111,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"Caijun7"},"content":"    public void execute_importDuplicateAddressBook_noChange() throws Exception {"},{"lineNumber":113,"author":{"gitID":"Caijun7"},"content":"        Model model \u003d new ModelManager(addressBookWithAliceAndBenson, new UserPrefs());"},{"lineNumber":114,"author":{"gitID":"Caijun7"},"content":"        String filepath \u003d TEST_DATA_FOLDER + \"aliceBensonAddressBook.xml\";"},{"lineNumber":115,"author":{"gitID":"Caijun7"},"content":"        ImportCommand importCommand \u003d prepareCommand(filepath, model);"},{"lineNumber":116,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":117,"author":{"gitID":"Caijun7"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":118,"author":{"gitID":"Caijun7"},"content":"        expectedModel.importAddressBook(filepath, SecurityUtil.hashPassword(\"\"));"},{"lineNumber":119,"author":{"gitID":"Caijun7"},"content":"        assertCommandSuccess(importCommand, model, ImportCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":120,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":122,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"Caijun7"},"content":"    public void execute_importDuplicatePerson_noChange() throws Exception {"},{"lineNumber":124,"author":{"gitID":"Caijun7"},"content":"        Model model \u003d new ModelManager(addressBookWithAliceAndBenson, new UserPrefs());"},{"lineNumber":125,"author":{"gitID":"Caijun7"},"content":"        String filepath \u003d TEST_DATA_FOLDER + \"aliceAddressBook.xml\";"},{"lineNumber":126,"author":{"gitID":"Caijun7"},"content":"        ImportCommand importCommand \u003d prepareCommand(filepath, model);"},{"lineNumber":127,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":128,"author":{"gitID":"Caijun7"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":129,"author":{"gitID":"Caijun7"},"content":"        expectedModel.importAddressBook(filepath, SecurityUtil.hashPassword(\"\"));"},{"lineNumber":130,"author":{"gitID":"Caijun7"},"content":"        assertCommandSuccess(importCommand, model, ImportCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":131,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":133,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":134,"author":{"gitID":"Caijun7"},"content":"    public void executeUndoRedo_validAddressBookFile_success() throws Exception {"},{"lineNumber":135,"author":{"gitID":"Caijun7"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":136,"author":{"gitID":"Caijun7"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":137,"author":{"gitID":"Caijun7"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":138,"author":{"gitID":"Caijun7"},"content":"        String filepath \u003d TEST_DATA_FOLDER + \"aliceBensonAddressBook.xml\";"},{"lineNumber":139,"author":{"gitID":"Caijun7"},"content":"        ImportCommand importCommand \u003d prepareCommand(filepath, model);"},{"lineNumber":140,"author":{"gitID":"Caijun7"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":141,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":142,"author":{"gitID":"Caijun7"},"content":"        // import -\u003e address book imported"},{"lineNumber":143,"author":{"gitID":"Caijun7"},"content":"        importCommand.execute();"},{"lineNumber":144,"author":{"gitID":"Caijun7"},"content":"        undoRedoStack.push(importCommand);"},{"lineNumber":145,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":146,"author":{"gitID":"Caijun7"},"content":"        // undo -\u003e reverts address book back to previous state and filtered person list to show all persons"},{"lineNumber":147,"author":{"gitID":"Caijun7"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":148,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":149,"author":{"gitID":"Caijun7"},"content":"        // redo -\u003e address book imported again"},{"lineNumber":150,"author":{"gitID":"Caijun7"},"content":"        expectedModel.importAddressBook(filepath, SecurityUtil.hashPassword(\"\"));"},{"lineNumber":151,"author":{"gitID":"Caijun7"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":152,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":154,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":155,"author":{"gitID":"Caijun7"},"content":"    public void executeUndoRedo_invalidAddressBookFile_failure() {"},{"lineNumber":156,"author":{"gitID":"Caijun7"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":157,"author":{"gitID":"Caijun7"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":158,"author":{"gitID":"Caijun7"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":159,"author":{"gitID":"Caijun7"},"content":"        String filepath \u003d TEST_DATA_FOLDER + \"invalidFileFormatAddressBook.xml\";"},{"lineNumber":160,"author":{"gitID":"Caijun7"},"content":"        ImportCommand importCommand \u003d prepareCommand(filepath, model);"},{"lineNumber":161,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":162,"author":{"gitID":"Caijun7"},"content":"        // execution failed -\u003e importCommand not pushed into undoRedoStack"},{"lineNumber":163,"author":{"gitID":"Caijun7"},"content":"        assertCommandFailure(importCommand, model, importCommand.MESSAGE_DATA_CONVERSION_ERROR);"},{"lineNumber":164,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":165,"author":{"gitID":"Caijun7"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":166,"author":{"gitID":"Caijun7"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":167,"author":{"gitID":"Caijun7"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":168,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":170,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":171,"author":{"gitID":"Caijun7"},"content":"    public void executeUndoRedo_nonExistentAddressBookFile_failure() {"},{"lineNumber":172,"author":{"gitID":"Caijun7"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":173,"author":{"gitID":"Caijun7"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":174,"author":{"gitID":"Caijun7"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":175,"author":{"gitID":"Caijun7"},"content":"        String filepath \u003d TEST_DATA_FOLDER + \"nonExistentAddressBook.xml\";"},{"lineNumber":176,"author":{"gitID":"Caijun7"},"content":"        ImportCommand importCommand \u003d prepareCommand(filepath, model);"},{"lineNumber":177,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":178,"author":{"gitID":"Caijun7"},"content":"        // execution failed -\u003e importCommand not pushed into undoRedoStack"},{"lineNumber":179,"author":{"gitID":"Caijun7"},"content":"        assertCommandFailure(importCommand, model, importCommand.MESSAGE_FILE_NOT_FOUND);"},{"lineNumber":180,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":181,"author":{"gitID":"Caijun7"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":182,"author":{"gitID":"Caijun7"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":183,"author":{"gitID":"Caijun7"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":184,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":186,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":187,"author":{"gitID":"Caijun7"},"content":"    public void equals_sameValues_true() {"},{"lineNumber":188,"author":{"gitID":"Caijun7"},"content":"        ImportCommand commandWithSameValues \u003d prepareCommand(TEST_DATA_FILE_ALICE_BENSON, model);"},{"lineNumber":189,"author":{"gitID":"Caijun7"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":190,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":192,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":193,"author":{"gitID":"Caijun7"},"content":"    public void equals_sameObject_true() {"},{"lineNumber":194,"author":{"gitID":"Caijun7"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":195,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":197,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":198,"author":{"gitID":"Caijun7"},"content":"    public void equals_sameType_true() {"},{"lineNumber":199,"author":{"gitID":"Caijun7"},"content":"        assertTrue(standardCommand.equals(new ImportCommand(TEST_DATA_FILE_ALICE_BENSON, TEST_PASSWORD)));"},{"lineNumber":200,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":202,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":203,"author":{"gitID":"Caijun7"},"content":"    public void equals_nullInstance_false() {"},{"lineNumber":204,"author":{"gitID":"Caijun7"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":205,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":207,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":208,"author":{"gitID":"Caijun7"},"content":"    public void equals_differentTypes_false() {"},{"lineNumber":209,"author":{"gitID":"Caijun7"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":210,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":212,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":213,"author":{"gitID":"Caijun7"},"content":"    public void equals_differentAddressBook_false() {"},{"lineNumber":214,"author":{"gitID":"Caijun7"},"content":"        assertFalse(standardCommand.equals(prepareCommand(TEST_DATA_FILE_ALICE, model)));"},{"lineNumber":215,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":217,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":218,"author":{"gitID":"Caijun7"},"content":"     * Returns a {@code ImportCommand} with the parameter {@code filepath} with password as TEST_PASSWORD."},{"lineNumber":219,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":220,"author":{"gitID":"Caijun7"},"content":"    private ImportCommand prepareCommand(String filepath, Model model) {"},{"lineNumber":221,"author":{"gitID":"Caijun7"},"content":"        return prepareCommand(filepath, model, TEST_PASSWORD);"},{"lineNumber":222,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":224,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":225,"author":{"gitID":"Caijun7"},"content":"     * Returns a {@code ImportCommand} with the parameter {@code filepath} and {@code password}."},{"lineNumber":226,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":227,"author":{"gitID":"Caijun7"},"content":"    private ImportCommand prepareCommand(String filepath, Model model, String password) {"},{"lineNumber":228,"author":{"gitID":"Caijun7"},"content":"        ImportCommand importCommand \u003d new ImportCommand(filepath, password);"},{"lineNumber":229,"author":{"gitID":"Caijun7"},"content":"        importCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":230,"author":{"gitID":"Caijun7"},"content":"        return importCommand;"},{"lineNumber":231,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":233,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"yeggasd":19,"Caijun7":191,"-":23}},{"path":"src/test/java/seedu/address/logic/commands/SelectCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalOddEven.EVEN;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalOddEven.ODD;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code SelectCommand}."},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class SelectCommandTest {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"yeggasd"},"content":"    //@@author yeggasd"},{"lineNumber":45,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"yeggasd"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":47,"author":{"gitID":"yeggasd"},"content":"        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":48,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":49,"author":{"gitID":"yeggasd"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON, ODD);"},{"lineNumber":50,"author":{"gitID":"yeggasd"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON, EVEN);"},{"lineNumber":51,"author":{"gitID":"yeggasd"},"content":"        assertExecutionSuccess(INDEX_THIRD_PERSON, EVEN);"},{"lineNumber":52,"author":{"gitID":"yeggasd"},"content":"        assertExecutionSuccess(lastPersonIndex, EVEN);"},{"lineNumber":53,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":55,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"yeggasd"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":57,"author":{"gitID":"yeggasd"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":58,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":59,"author":{"gitID":"yeggasd"},"content":"        assertExecutionFailure(outOfBoundsIndex, ODD, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":60,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":62,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"yeggasd"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":64,"author":{"gitID":"yeggasd"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":65,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":66,"author":{"gitID":"yeggasd"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON, ODD);"},{"lineNumber":67,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":69,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"yeggasd"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":71,"author":{"gitID":"yeggasd"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":72,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":73,"author":{"gitID":"yeggasd"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":74,"author":{"gitID":"yeggasd"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":75,"author":{"gitID":"yeggasd"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":76,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":77,"author":{"gitID":"yeggasd"},"content":"        assertExecutionFailure(outOfBoundsIndex, ODD, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":78,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":80,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"yeggasd"},"content":"    public void equals() {"},{"lineNumber":82,"author":{"gitID":"yeggasd"},"content":"        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PERSON, ODD);"},{"lineNumber":83,"author":{"gitID":"yeggasd"},"content":"        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PERSON, ODD);"},{"lineNumber":84,"author":{"gitID":"yeggasd"},"content":"        SelectCommand selectThirdCommand \u003d new SelectCommand(INDEX_FIRST_PERSON, EVEN);"},{"lineNumber":85,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":86,"author":{"gitID":"yeggasd"},"content":"        // same object -\u003e returns true"},{"lineNumber":87,"author":{"gitID":"yeggasd"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommand));"},{"lineNumber":88,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":89,"author":{"gitID":"yeggasd"},"content":"        // same values -\u003e returns true"},{"lineNumber":90,"author":{"gitID":"yeggasd"},"content":"        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PERSON, ODD);"},{"lineNumber":91,"author":{"gitID":"yeggasd"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"},{"lineNumber":92,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":93,"author":{"gitID":"yeggasd"},"content":"        // different types -\u003e returns false"},{"lineNumber":94,"author":{"gitID":"yeggasd"},"content":"        assertFalse(selectFirstCommand.equals(1));"},{"lineNumber":95,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":96,"author":{"gitID":"yeggasd"},"content":"        // null -\u003e returns false"},{"lineNumber":97,"author":{"gitID":"yeggasd"},"content":"        assertFalse(selectFirstCommand.equals(null));"},{"lineNumber":98,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":99,"author":{"gitID":"yeggasd"},"content":"        // different person -\u003e returns false"},{"lineNumber":100,"author":{"gitID":"yeggasd"},"content":"        assertFalse(selectFirstCommand.equals(selectSecondCommand));"},{"lineNumber":101,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":102,"author":{"gitID":"yeggasd"},"content":"        //different odd/even -\u003e returns false"},{"lineNumber":103,"author":{"gitID":"yeggasd"},"content":"        assertFalse(selectFirstCommand.equals(selectThirdCommand));"},{"lineNumber":104,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":106,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"yeggasd"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"},{"lineNumber":108,"author":{"gitID":"yeggasd"},"content":"     * is raised with the correct index."},{"lineNumber":109,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"yeggasd"},"content":"    private void assertExecutionSuccess(Index index, String oddEven) {"},{"lineNumber":111,"author":{"gitID":"yeggasd"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index, oddEven);"},{"lineNumber":112,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":113,"author":{"gitID":"yeggasd"},"content":"        try {"},{"lineNumber":114,"author":{"gitID":"yeggasd"},"content":"            CommandResult commandResult \u003d selectCommand.execute();"},{"lineNumber":115,"author":{"gitID":"yeggasd"},"content":"            assertEquals(String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased(), oddEven),"},{"lineNumber":116,"author":{"gitID":"yeggasd"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":117,"author":{"gitID":"yeggasd"},"content":"        } catch (CommandException ce) {"},{"lineNumber":118,"author":{"gitID":"yeggasd"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":119,"author":{"gitID":"yeggasd"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":121,"author":{"gitID":"yeggasd"},"content":"        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":122,"author":{"gitID":"yeggasd"},"content":"        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"},{"lineNumber":123,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":125,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"yeggasd"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":127,"author":{"gitID":"yeggasd"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":128,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"yeggasd"},"content":"    private void assertExecutionFailure(Index index, String oddEven, String expectedMessage) {"},{"lineNumber":130,"author":{"gitID":"yeggasd"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index, oddEven);"},{"lineNumber":131,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":132,"author":{"gitID":"yeggasd"},"content":"        try {"},{"lineNumber":133,"author":{"gitID":"yeggasd"},"content":"            selectCommand.execute();"},{"lineNumber":134,"author":{"gitID":"yeggasd"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":135,"author":{"gitID":"yeggasd"},"content":"        } catch (CommandException ce) {"},{"lineNumber":136,"author":{"gitID":"yeggasd"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":137,"author":{"gitID":"yeggasd"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":138,"author":{"gitID":"yeggasd"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":141,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"yeggasd"},"content":"     * Returns a {@code SelectCommand} with parameters {@code index}."},{"lineNumber":143,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"yeggasd"},"content":"    private SelectCommand prepareCommand(Index index, String oddEven) {"},{"lineNumber":145,"author":{"gitID":"yeggasd"},"content":"        SelectCommand selectCommand \u003d new SelectCommand(index, oddEven);"},{"lineNumber":146,"author":{"gitID":"yeggasd"},"content":"        selectCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":147,"author":{"gitID":"yeggasd"},"content":"        return selectCommand;"},{"lineNumber":148,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"yeggasd"},"content":"}"}],"authorContributionMap":{"yeggasd":106,"-":43}},{"path":"src/test/java/seedu/address/logic/commands/PasswordCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.SecurityUtil;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"yeggasd"},"content":"//@@author yeggasd"},{"lineNumber":18,"author":{"gitID":"yeggasd"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"yeggasd"},"content":" * Contains integration tests (interaction with the Model) and unit tests for"},{"lineNumber":20,"author":{"gitID":"yeggasd"},"content":" * {@code PasswordCommand}."},{"lineNumber":21,"author":{"gitID":"yeggasd"},"content":" */"},{"lineNumber":22,"author":{"gitID":"yeggasd"},"content":"public class PasswordCommandTest {"},{"lineNumber":23,"author":{"gitID":"yeggasd"},"content":"    private static final String TEST_PASSWORD \u003d \"test\";"},{"lineNumber":24,"author":{"gitID":"yeggasd"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":25,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":26,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"yeggasd"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":28,"author":{"gitID":"yeggasd"},"content":"        PasswordCommand passwordCommand \u003d prepareCommand(TEST_PASSWORD + \"1\");"},{"lineNumber":29,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":30,"author":{"gitID":"yeggasd"},"content":"        String expectedMessage \u003d String.format(PasswordCommand.MESSAGE_SUCCESS);"},{"lineNumber":31,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":32,"author":{"gitID":"yeggasd"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"yeggasd"},"content":"        expectedModel.updatePassword(SecurityUtil.hashPassword(TEST_PASSWORD + \"1\"));"},{"lineNumber":34,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":35,"author":{"gitID":"yeggasd"},"content":"        assertCommandSuccess(passwordCommand, model, expectedMessage, expectedModel);"},{"lineNumber":36,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":38,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"yeggasd"},"content":"    public void equals() throws Exception {"},{"lineNumber":40,"author":{"gitID":"yeggasd"},"content":"        PasswordCommand passwordFirstCommand \u003d prepareCommand(TEST_PASSWORD);"},{"lineNumber":41,"author":{"gitID":"yeggasd"},"content":"        PasswordCommand passwordSecondCommand \u003d prepareCommand(TEST_PASSWORD + \"1\");"},{"lineNumber":42,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":43,"author":{"gitID":"yeggasd"},"content":"        // same object -\u003e returns true"},{"lineNumber":44,"author":{"gitID":"yeggasd"},"content":"        assertTrue(passwordFirstCommand.equals(passwordFirstCommand));"},{"lineNumber":45,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":46,"author":{"gitID":"yeggasd"},"content":"        // same values -\u003e returns true"},{"lineNumber":47,"author":{"gitID":"yeggasd"},"content":"        PasswordCommand passwordFirstCommandCopy \u003d prepareCommand(TEST_PASSWORD);"},{"lineNumber":48,"author":{"gitID":"yeggasd"},"content":"        assertTrue(passwordFirstCommand.equals(passwordFirstCommandCopy));"},{"lineNumber":49,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":50,"author":{"gitID":"yeggasd"},"content":"        // different types -\u003e returns false"},{"lineNumber":51,"author":{"gitID":"yeggasd"},"content":"        assertFalse(passwordFirstCommand.equals(1));"},{"lineNumber":52,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":53,"author":{"gitID":"yeggasd"},"content":"        // null -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"yeggasd"},"content":"        assertFalse(passwordFirstCommand.equals(null));"},{"lineNumber":55,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":56,"author":{"gitID":"yeggasd"},"content":"        // different person -\u003e returns false"},{"lineNumber":57,"author":{"gitID":"yeggasd"},"content":"        assertFalse(passwordFirstCommand.equals(passwordSecondCommand));"},{"lineNumber":58,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":60,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"yeggasd"},"content":"     * Returns a {@code PasswordCommand} with the parameter {@code password}."},{"lineNumber":62,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"yeggasd"},"content":"    private PasswordCommand prepareCommand(String password) {"},{"lineNumber":64,"author":{"gitID":"yeggasd"},"content":"        PasswordCommand passwordCommand \u003d new PasswordCommand(password);"},{"lineNumber":65,"author":{"gitID":"yeggasd"},"content":"        passwordCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":66,"author":{"gitID":"yeggasd"},"content":"        return passwordCommand;"},{"lineNumber":67,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"yeggasd"},"content":"}"}],"authorContributionMap":{"yeggasd":52,"-":16}},{"path":"src/test/java/seedu/address/logic/commands/VacantCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_BUILDING_3;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BUILDING_1;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BUILDING_2;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelStub;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.building.Building;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.building.exceptions.BuildingNotFoundException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"jingyinno"},"content":"//@@author jingyinno"},{"lineNumber":27,"author":{"gitID":"jingyinno"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"jingyinno"},"content":" * Contains integration tests (interaction with the Model) and unit tests for VacantCommand."},{"lineNumber":29,"author":{"gitID":"jingyinno"},"content":" */"},{"lineNumber":30,"author":{"gitID":"jingyinno"},"content":"public class VacantCommandTest {"},{"lineNumber":31,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":32,"author":{"gitID":"jingyinno"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"jingyinno"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":34,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":35,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"jingyinno"},"content":"    public void constructor_nullBuilding_throwsNullPointerException() {"},{"lineNumber":37,"author":{"gitID":"jingyinno"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":38,"author":{"gitID":"jingyinno"},"content":"        new VacantCommand(null);"},{"lineNumber":39,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":41,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"jingyinno"},"content":"    public void execute_validBuildingRetrieval_success() throws Exception {"},{"lineNumber":43,"author":{"gitID":"jingyinno"},"content":"        ModelStub modelStub \u003d new ModelStubAcceptingBuilding();"},{"lineNumber":44,"author":{"gitID":"jingyinno"},"content":"        Building validBuilding \u003d new Building(VALID_BUILDING_1);"},{"lineNumber":45,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":46,"author":{"gitID":"jingyinno"},"content":"        CommandResult commandResult \u003d getVacantCommand(validBuilding, modelStub).execute();"},{"lineNumber":47,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":48,"author":{"gitID":"jingyinno"},"content":"        assertEquals(String.format(VacantCommand.MESSAGE_SUCCESS, validBuilding), commandResult.feedbackToUser);"},{"lineNumber":49,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":51,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"jingyinno"},"content":"    public void execute_invalidBuildingRetrieval_failure() throws Exception {"},{"lineNumber":53,"author":{"gitID":"jingyinno"},"content":"        ModelStub modelStub \u003d new ModelStubAcceptingBuilding();"},{"lineNumber":54,"author":{"gitID":"jingyinno"},"content":"        Building validBuilding \u003d new Building(INVALID_BUILDING_3);"},{"lineNumber":55,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":56,"author":{"gitID":"jingyinno"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":57,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":58,"author":{"gitID":"jingyinno"},"content":"        getVacantCommand(validBuilding, modelStub).execute();"},{"lineNumber":59,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":61,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"jingyinno"},"content":"    public void equals() {"},{"lineNumber":63,"author":{"gitID":"jingyinno"},"content":"        Building validBuildingOne \u003d new Building(VALID_BUILDING_1);"},{"lineNumber":64,"author":{"gitID":"jingyinno"},"content":"        Building validBuildingTwo \u003d new Building(VALID_BUILDING_2);"},{"lineNumber":65,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":66,"author":{"gitID":"jingyinno"},"content":"        VacantCommand oneVacantCommand \u003d new VacantCommand(validBuildingOne);"},{"lineNumber":67,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":68,"author":{"gitID":"jingyinno"},"content":"        // same object -\u003e returns true"},{"lineNumber":69,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":70,"author":{"gitID":"jingyinno"},"content":"        assertTrue(validBuildingOne.equals(validBuildingOne));"},{"lineNumber":71,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":72,"author":{"gitID":"jingyinno"},"content":"        // same values -\u003e returns true"},{"lineNumber":73,"author":{"gitID":"jingyinno"},"content":"        VacantCommand validBuildingOneCopy \u003d new VacantCommand(validBuildingOne);"},{"lineNumber":74,"author":{"gitID":"jingyinno"},"content":"        assertTrue(oneVacantCommand.equals(validBuildingOneCopy));"},{"lineNumber":75,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":76,"author":{"gitID":"jingyinno"},"content":"        // different types -\u003e returns false"},{"lineNumber":77,"author":{"gitID":"jingyinno"},"content":"        assertFalse(validBuildingOne.equals(1));"},{"lineNumber":78,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":79,"author":{"gitID":"jingyinno"},"content":"        // null -\u003e returns false"},{"lineNumber":80,"author":{"gitID":"jingyinno"},"content":"        assertFalse(validBuildingOne \u003d\u003d null);"},{"lineNumber":81,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":82,"author":{"gitID":"jingyinno"},"content":"        // different vacant -\u003e returns false"},{"lineNumber":83,"author":{"gitID":"jingyinno"},"content":"        assertFalse(validBuildingOne.equals(validBuildingTwo));"},{"lineNumber":84,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":86,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"jingyinno"},"content":"     * Generates a new VacantCommand with the details of the given building"},{"lineNumber":88,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"jingyinno"},"content":"    private VacantCommand getVacantCommand(Building building, Model model) {"},{"lineNumber":90,"author":{"gitID":"jingyinno"},"content":"        VacantCommand command \u003d new VacantCommand(building);"},{"lineNumber":91,"author":{"gitID":"jingyinno"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":92,"author":{"gitID":"jingyinno"},"content":"        return command;"},{"lineNumber":93,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":95,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"jingyinno"},"content":"     * A Model stub that always accept the building being requested."},{"lineNumber":97,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"jingyinno"},"content":"    private class ModelStubAcceptingBuilding extends ModelStub {"},{"lineNumber":99,"author":{"gitID":"jingyinno"},"content":"        private ArrayList\u003cArrayList\u003cString\u003e\u003e roomsSchedule \u003d new ArrayList\u003cArrayList\u003cString\u003e\u003e();"},{"lineNumber":100,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":101,"author":{"gitID":"jingyinno"},"content":"        @Override"},{"lineNumber":102,"author":{"gitID":"jingyinno"},"content":"        public ArrayList\u003cArrayList\u003cString\u003e\u003e retrieveAllRoomsSchedule(Building building)"},{"lineNumber":103,"author":{"gitID":"jingyinno"},"content":"                throws BuildingNotFoundException {"},{"lineNumber":104,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":105,"author":{"gitID":"jingyinno"},"content":"            if (!Building.isValidBuilding(building)) {"},{"lineNumber":106,"author":{"gitID":"jingyinno"},"content":"                throw new BuildingNotFoundException();"},{"lineNumber":107,"author":{"gitID":"jingyinno"},"content":"            }"},{"lineNumber":108,"author":{"gitID":"jingyinno"},"content":"            ArrayList\u003cString\u003e rooms \u003d new ArrayList\u003c\u003e();"},{"lineNumber":109,"author":{"gitID":"jingyinno"},"content":"            rooms.add(\"room\");"},{"lineNumber":110,"author":{"gitID":"jingyinno"},"content":"            roomsSchedule.add(rooms);"},{"lineNumber":111,"author":{"gitID":"jingyinno"},"content":"            return roomsSchedule;"},{"lineNumber":112,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":114,"author":{"gitID":"jingyinno"},"content":"        @Override"},{"lineNumber":115,"author":{"gitID":"jingyinno"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":116,"author":{"gitID":"jingyinno"},"content":"            return new AddressBook();"},{"lineNumber":117,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"jingyinno"},"content":"}"}],"authorContributionMap":{"jingyinno":94,"-":25}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedPasswordTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.SecurityUtil;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Password;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"yeggasd"},"content":"//@@author yeggasd"},{"lineNumber":11,"author":{"gitID":"yeggasd"},"content":"public class XmlAdaptedPasswordTest {"},{"lineNumber":12,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":13,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"yeggasd"},"content":"    public void toModelType_validPassword_returnsPassword() throws Exception {"},{"lineNumber":15,"author":{"gitID":"yeggasd"},"content":"        Password pass \u003d new Password(hash(\"test\"), hash(\"test\"));"},{"lineNumber":16,"author":{"gitID":"yeggasd"},"content":"        XmlAdaptedPassword password \u003d new XmlAdaptedPassword(pass);"},{"lineNumber":17,"author":{"gitID":"yeggasd"},"content":"        assertEquals(pass, password.toModelType());"},{"lineNumber":18,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":20,"author":{"gitID":"yeggasd"},"content":"    private byte[] hash(String password) {"},{"lineNumber":21,"author":{"gitID":"yeggasd"},"content":"        return SecurityUtil.hashPassword(password);"},{"lineNumber":22,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"yeggasd"},"content":"}"}],"authorContributionMap":{"yeggasd":14,"-":9}},{"path":"src/test/java/seedu/address/logic/commands/TimetableUnionCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalOddEven.EVEN;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalOddEven.ODD;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.TimeTableEvent;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.timetable.Timetable;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"AzuraAiR"},"content":"//@@author AzuraAiR"},{"lineNumber":36,"author":{"gitID":"AzuraAiR"},"content":"/**"},{"lineNumber":37,"author":{"gitID":"AzuraAiR"},"content":" * Contains integration tests (interaction with the Model) for {@code TimetableUnionCommand}."},{"lineNumber":38,"author":{"gitID":"AzuraAiR"},"content":" */"},{"lineNumber":39,"author":{"gitID":"AzuraAiR"},"content":"public class TimetableUnionCommandTest {"},{"lineNumber":40,"author":{"gitID":"AzuraAiR"},"content":"    @Rule"},{"lineNumber":41,"author":{"gitID":"AzuraAiR"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":42,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":43,"author":{"gitID":"AzuraAiR"},"content":"    private Model model;"},{"lineNumber":44,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":45,"author":{"gitID":"AzuraAiR"},"content":"    @Before"},{"lineNumber":46,"author":{"gitID":"AzuraAiR"},"content":"    public void setUp() {"},{"lineNumber":47,"author":{"gitID":"AzuraAiR"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":48,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":50,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"AzuraAiR"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":52,"author":{"gitID":"AzuraAiR"},"content":"        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":53,"author":{"gitID":"AzuraAiR"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":54,"author":{"gitID":"AzuraAiR"},"content":"        indexes.add(INDEX_FIRST_PERSON);"},{"lineNumber":55,"author":{"gitID":"AzuraAiR"},"content":"        indexes.add(INDEX_SECOND_PERSON);"},{"lineNumber":56,"author":{"gitID":"AzuraAiR"},"content":"        assertExecutionSuccess(indexes, ODD);"},{"lineNumber":57,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":58,"author":{"gitID":"AzuraAiR"},"content":"        indexes.add(lastPersonIndex);"},{"lineNumber":59,"author":{"gitID":"AzuraAiR"},"content":"        assertExecutionSuccess(indexes, ODD);"},{"lineNumber":60,"author":{"gitID":"AzuraAiR"},"content":"        assertExecutionSuccess(indexes, EVEN);"},{"lineNumber":61,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":63,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"AzuraAiR"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":65,"author":{"gitID":"AzuraAiR"},"content":"        Index outOfBoundsIndexOne \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":66,"author":{"gitID":"AzuraAiR"},"content":"        Index outOfBoundsIndexTwo \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 2);"},{"lineNumber":67,"author":{"gitID":"AzuraAiR"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":68,"author":{"gitID":"AzuraAiR"},"content":"        indexes.add(outOfBoundsIndexOne);"},{"lineNumber":69,"author":{"gitID":"AzuraAiR"},"content":"        indexes.add(outOfBoundsIndexTwo);"},{"lineNumber":70,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":71,"author":{"gitID":"AzuraAiR"},"content":"        assertExecutionFailure(indexes, EVEN, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":72,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":74,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"AzuraAiR"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":76,"author":{"gitID":"AzuraAiR"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":77,"author":{"gitID":"AzuraAiR"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":78,"author":{"gitID":"AzuraAiR"},"content":"        indexes.add(INDEX_FIRST_PERSON);"},{"lineNumber":79,"author":{"gitID":"AzuraAiR"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":80,"author":{"gitID":"AzuraAiR"},"content":"        indexes.add(outOfBoundsIndex);"},{"lineNumber":81,"author":{"gitID":"AzuraAiR"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":82,"author":{"gitID":"AzuraAiR"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":83,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":84,"author":{"gitID":"AzuraAiR"},"content":"        assertExecutionFailure(indexes, EVEN, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":85,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":87,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"AzuraAiR"},"content":"    public void equals() {"},{"lineNumber":89,"author":{"gitID":"AzuraAiR"},"content":"        ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":90,"author":{"gitID":"AzuraAiR"},"content":"        indexes.add(INDEX_FIRST_PERSON);"},{"lineNumber":91,"author":{"gitID":"AzuraAiR"},"content":"        indexes.add(INDEX_SECOND_PERSON);"},{"lineNumber":92,"author":{"gitID":"AzuraAiR"},"content":"        TimetableUnionCommand timetableFirstCommand \u003d new TimetableUnionCommand(indexes, EVEN);"},{"lineNumber":93,"author":{"gitID":"AzuraAiR"},"content":"        TimetableUnionCommand timetableFirstCommandCopy \u003d new TimetableUnionCommand(indexes, EVEN);"},{"lineNumber":94,"author":{"gitID":"AzuraAiR"},"content":"        TimetableUnionCommand timetableSecondCommand \u003d new TimetableUnionCommand(indexes, ODD);"},{"lineNumber":95,"author":{"gitID":"AzuraAiR"},"content":"        indexes.add(INDEX_THIRD_PERSON);"},{"lineNumber":96,"author":{"gitID":"AzuraAiR"},"content":"        TimetableUnionCommand timetableThirdCommand \u003d new TimetableUnionCommand(indexes, ODD);"},{"lineNumber":97,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":98,"author":{"gitID":"AzuraAiR"},"content":"        // same object -\u003e returns true"},{"lineNumber":99,"author":{"gitID":"AzuraAiR"},"content":"        assertTrue(timetableFirstCommand.equals(timetableFirstCommand));"},{"lineNumber":100,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":101,"author":{"gitID":"AzuraAiR"},"content":"        // same values -\u003e returns true"},{"lineNumber":102,"author":{"gitID":"AzuraAiR"},"content":"        assertTrue(timetableFirstCommand.equals(timetableFirstCommandCopy));"},{"lineNumber":103,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":104,"author":{"gitID":"AzuraAiR"},"content":"        // different types -\u003e returns false"},{"lineNumber":105,"author":{"gitID":"AzuraAiR"},"content":"        assertFalse(timetableFirstCommand.equals(1));"},{"lineNumber":106,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":107,"author":{"gitID":"AzuraAiR"},"content":"        // null -\u003e returns false"},{"lineNumber":108,"author":{"gitID":"AzuraAiR"},"content":"        assertFalse(timetableFirstCommand.equals(null));"},{"lineNumber":109,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":110,"author":{"gitID":"AzuraAiR"},"content":"        // different OddEven -\u003e returns false"},{"lineNumber":111,"author":{"gitID":"AzuraAiR"},"content":"        assertFalse(timetableFirstCommand.equals(timetableSecondCommand));"},{"lineNumber":112,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":113,"author":{"gitID":"AzuraAiR"},"content":"        // different person -\u003e returns false"},{"lineNumber":114,"author":{"gitID":"AzuraAiR"},"content":"        assertFalse(timetableFirstCommand.equals(timetableThirdCommand));"},{"lineNumber":115,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":116,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":118,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"AzuraAiR"},"content":"     * Executes a {@code TimetableUnionCommand} with the given {@code indexes}  and {@code oddEven},"},{"lineNumber":120,"author":{"gitID":"AzuraAiR"},"content":"     * and checks that {@code JumpToListRequestEvent}"},{"lineNumber":121,"author":{"gitID":"AzuraAiR"},"content":"     * is raised with the correct indexes and oddEven."},{"lineNumber":122,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"AzuraAiR"},"content":"    private void assertExecutionSuccess(ArrayList\u003cIndex\u003e indexes, String oddEven) {"},{"lineNumber":124,"author":{"gitID":"AzuraAiR"},"content":"        TimetableUnionCommand timetableUnionCommand \u003d prepareCommand(indexes, oddEven);"},{"lineNumber":125,"author":{"gitID":"AzuraAiR"},"content":"        ArrayList\u003cPerson\u003e targets \u003d new ArrayList\u003cPerson\u003e();"},{"lineNumber":126,"author":{"gitID":"AzuraAiR"},"content":"        ArrayList\u003cTimetable\u003e timetables \u003d new ArrayList\u003cTimetable\u003e();"},{"lineNumber":127,"author":{"gitID":"AzuraAiR"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":128,"author":{"gitID":"AzuraAiR"},"content":"        for (int i \u003d 0; i \u003c indexes.size(); i++) {"},{"lineNumber":129,"author":{"gitID":"AzuraAiR"},"content":"            Person target \u003d model.getFilteredPersonList().get(indexes.get(i).getZeroBased());"},{"lineNumber":130,"author":{"gitID":"AzuraAiR"},"content":"            targets.add(target);"},{"lineNumber":131,"author":{"gitID":"AzuraAiR"},"content":"            timetables.add(target.getTimetable());"},{"lineNumber":132,"author":{"gitID":"AzuraAiR"},"content":"            sb.append(target.getName());"},{"lineNumber":133,"author":{"gitID":"AzuraAiR"},"content":"            if (i !\u003d indexes.size() - 1) {"},{"lineNumber":134,"author":{"gitID":"AzuraAiR"},"content":"                sb.append(\", \");"},{"lineNumber":135,"author":{"gitID":"AzuraAiR"},"content":"            }"},{"lineNumber":136,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"AzuraAiR"},"content":"        sb.append(\"\\n\");"},{"lineNumber":138,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":139,"author":{"gitID":"AzuraAiR"},"content":"        int oddEvenIndex \u003d StringUtil.getOddEven(oddEven).getZeroBased();"},{"lineNumber":140,"author":{"gitID":"AzuraAiR"},"content":"        ArrayList\u003cArrayList\u003cArrayList\u003cString\u003e\u003e\u003e targetList \u003d Timetable.unionTimetable(timetables);"},{"lineNumber":141,"author":{"gitID":"AzuraAiR"},"content":"        try {"},{"lineNumber":142,"author":{"gitID":"AzuraAiR"},"content":"            CommandResult commandResult \u003d timetableUnionCommand.execute();"},{"lineNumber":143,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":144,"author":{"gitID":"AzuraAiR"},"content":"            assertEquals(String.format(TimetableUnionCommand.MESSAGE_SELECT_PERSON_SUCCESS, oddEven, sb.toString()),"},{"lineNumber":145,"author":{"gitID":"AzuraAiR"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":146,"author":{"gitID":"AzuraAiR"},"content":"        } catch (CommandException ce) {"},{"lineNumber":147,"author":{"gitID":"AzuraAiR"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":148,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":150,"author":{"gitID":"AzuraAiR"},"content":"        TimeTableEvent lastEvent \u003d (TimeTableEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":151,"author":{"gitID":"AzuraAiR"},"content":"        assertEquals(targetList.get(oddEvenIndex), lastEvent.getTimeTable());"},{"lineNumber":152,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":154,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"AzuraAiR"},"content":"     * Executes a {@code TimetableUnionCommand} with the given {@code indexes} and {@code oddEven},"},{"lineNumber":156,"author":{"gitID":"AzuraAiR"},"content":"     * and checks that a {@code CommandException}"},{"lineNumber":157,"author":{"gitID":"AzuraAiR"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":158,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"AzuraAiR"},"content":"    private void assertExecutionFailure(ArrayList\u003cIndex\u003e indexes, String oddEven, String expectedMessage) {"},{"lineNumber":160,"author":{"gitID":"AzuraAiR"},"content":"        TimetableUnionCommand timetableUnionCommand \u003d prepareCommand(indexes, oddEven);"},{"lineNumber":161,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":162,"author":{"gitID":"AzuraAiR"},"content":"        try {"},{"lineNumber":163,"author":{"gitID":"AzuraAiR"},"content":"            timetableUnionCommand.execute();"},{"lineNumber":164,"author":{"gitID":"AzuraAiR"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":165,"author":{"gitID":"AzuraAiR"},"content":"        } catch (CommandException ce) {"},{"lineNumber":166,"author":{"gitID":"AzuraAiR"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":167,"author":{"gitID":"AzuraAiR"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":168,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":171,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":172,"author":{"gitID":"AzuraAiR"},"content":"     * Returns a {@code TimetableUnionCommand} with parameters {@code indexes} and {@code oddEven}."},{"lineNumber":173,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":174,"author":{"gitID":"AzuraAiR"},"content":"    private TimetableUnionCommand prepareCommand(ArrayList\u003cIndex\u003e indexes, String oddEven) {"},{"lineNumber":175,"author":{"gitID":"AzuraAiR"},"content":"        TimetableUnionCommand timetableUnionCommand \u003d new TimetableUnionCommand(indexes, oddEven);"},{"lineNumber":176,"author":{"gitID":"AzuraAiR"},"content":"        timetableUnionCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":177,"author":{"gitID":"AzuraAiR"},"content":"        return timetableUnionCommand;"},{"lineNumber":178,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"AzuraAiR"},"content":"}"}],"authorContributionMap":{"AzuraAiR":145,"-":34}},{"path":"src/test/java/seedu/address/logic/commands/RemovePasswordCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.SecurityUtil;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Password;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"yeggasd"},"content":"//@@author yeggasd"},{"lineNumber":19,"author":{"gitID":"yeggasd"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"yeggasd"},"content":" * Contains integration tests (interaction with the Model and Password) and unit tests"},{"lineNumber":21,"author":{"gitID":"yeggasd"},"content":" * for {@code RemovePasswordCommand}."},{"lineNumber":22,"author":{"gitID":"yeggasd"},"content":" */"},{"lineNumber":23,"author":{"gitID":"yeggasd"},"content":"public class RemovePasswordCommandTest {"},{"lineNumber":24,"author":{"gitID":"yeggasd"},"content":"    private static final byte[] TEST_PASSWORD \u003d (SecurityUtil.hashPassword(\"test\"));"},{"lineNumber":25,"author":{"gitID":"yeggasd"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":26,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":27,"author":{"gitID":"yeggasd"},"content":"    @Before"},{"lineNumber":28,"author":{"gitID":"yeggasd"},"content":"    public void setUp() {"},{"lineNumber":29,"author":{"gitID":"yeggasd"},"content":"        model.updatePassword(TEST_PASSWORD);"},{"lineNumber":30,"author":{"gitID":"yeggasd"},"content":"        model.updatePassword(TEST_PASSWORD);"},{"lineNumber":31,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"yeggasd"},"content":"    public void execute_removePassword_success() throws Exception {"},{"lineNumber":34,"author":{"gitID":"yeggasd"},"content":"        RemovePasswordCommand removepasswordCommand \u003d prepareCommand();"},{"lineNumber":35,"author":{"gitID":"yeggasd"},"content":"        String expectedMessage \u003d String.format(RemovePasswordCommand.MESSAGE_SUCCESS);"},{"lineNumber":36,"author":{"gitID":"yeggasd"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":38,"author":{"gitID":"yeggasd"},"content":"        expectedModel.updatePassword(null);"},{"lineNumber":39,"author":{"gitID":"yeggasd"},"content":"        assertCommandSuccess(removepasswordCommand, model, expectedMessage, expectedModel);"},{"lineNumber":40,"author":{"gitID":"yeggasd"},"content":"        assertEquals(model.getAddressBook().getPassword(), new Password(null, TEST_PASSWORD));"},{"lineNumber":41,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":42,"author":{"gitID":"yeggasd"},"content":"        expectedModel.updatePassword(null);"},{"lineNumber":43,"author":{"gitID":"yeggasd"},"content":"        assertCommandSuccess(removepasswordCommand, model, expectedMessage, expectedModel);"},{"lineNumber":44,"author":{"gitID":"yeggasd"},"content":"        assertEquals(model.getAddressBook().getPassword(), new Password(null, null));"},{"lineNumber":45,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":47,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"yeggasd"},"content":"     * Returns a {@code RemovePasswordCommand}."},{"lineNumber":49,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"yeggasd"},"content":"    private RemovePasswordCommand prepareCommand() {"},{"lineNumber":51,"author":{"gitID":"yeggasd"},"content":"        RemovePasswordCommand removepasswordCommand \u003d new RemovePasswordCommand();"},{"lineNumber":52,"author":{"gitID":"yeggasd"},"content":"        removepasswordCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":53,"author":{"gitID":"yeggasd"},"content":"        return removepasswordCommand;"},{"lineNumber":54,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"yeggasd"},"content":"}"}],"authorContributionMap":{"yeggasd":38,"-":17}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedAliasTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalAliases.ADD;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalAliases.DELETE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalAliases.UNKNOWN;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AliasBuilder;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"jingyinno"},"content":"//@@author jingyinno"},{"lineNumber":18,"author":{"gitID":"jingyinno"},"content":"public class XmlAdaptedAliasTest {"},{"lineNumber":19,"author":{"gitID":"jingyinno"},"content":"    private static final String ILLEGAL_COMMAND_WORD \u003d \"add%\";"},{"lineNumber":20,"author":{"gitID":"jingyinno"},"content":"    private static final String ILLEGAL_ALIAS_WORD \u003d \"alias$\";"},{"lineNumber":21,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":22,"author":{"gitID":"jingyinno"},"content":"    private static final String VALID_COMMAND \u003d ADD.getCommand();"},{"lineNumber":23,"author":{"gitID":"jingyinno"},"content":"    private static final String VALID_ALIAS \u003d ADD.getAlias();"},{"lineNumber":24,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":25,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"jingyinno"},"content":"    public void toModelType_validAliasDetails_returnsAlias() throws Exception {"},{"lineNumber":27,"author":{"gitID":"jingyinno"},"content":"        XmlAdaptedAlias alias \u003d new XmlAdaptedAlias(ADD);"},{"lineNumber":28,"author":{"gitID":"jingyinno"},"content":"        assertEquals(ADD, alias.toModelType());"},{"lineNumber":29,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":31,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"jingyinno"},"content":"    public void toModelType_invalidCommand_returnsAlias() throws Exception {"},{"lineNumber":33,"author":{"gitID":"jingyinno"},"content":"        //parser should have already handled invalid command values --\u003e invalid command will pass here"},{"lineNumber":34,"author":{"gitID":"jingyinno"},"content":"        XmlAdaptedAlias alias \u003d new XmlAdaptedAlias(UNKNOWN);"},{"lineNumber":35,"author":{"gitID":"jingyinno"},"content":"        assertEquals(UNKNOWN, alias.toModelType());"},{"lineNumber":36,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":38,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"jingyinno"},"content":"    public void toModelType_invalidCommand_throwsIllegalValueException() {"},{"lineNumber":40,"author":{"gitID":"jingyinno"},"content":"        XmlAdaptedAlias alias \u003d new XmlAdaptedAlias(ILLEGAL_COMMAND_WORD, VALID_ALIAS);"},{"lineNumber":41,"author":{"gitID":"jingyinno"},"content":"        String expectedMessage \u003d Alias.MESSAGE_ALIAS_CONSTRAINTS;"},{"lineNumber":42,"author":{"gitID":"jingyinno"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, alias::toModelType);"},{"lineNumber":43,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":45,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"jingyinno"},"content":"    public void toModelType_invalidAlias_throwsIllegalValueException() {"},{"lineNumber":47,"author":{"gitID":"jingyinno"},"content":"        XmlAdaptedAlias alias \u003d new XmlAdaptedAlias(VALID_COMMAND, ILLEGAL_ALIAS_WORD);"},{"lineNumber":48,"author":{"gitID":"jingyinno"},"content":"        String expectedMessage \u003d Alias.MESSAGE_ALIAS_CONSTRAINTS;"},{"lineNumber":49,"author":{"gitID":"jingyinno"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, alias::toModelType);"},{"lineNumber":50,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":52,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"jingyinno"},"content":"    public void toModelType_nullCommand_throwsIllegalValueException() {"},{"lineNumber":54,"author":{"gitID":"jingyinno"},"content":"        XmlAdaptedAlias alias \u003d new XmlAdaptedAlias(null, VALID_ALIAS);"},{"lineNumber":55,"author":{"gitID":"jingyinno"},"content":"        String expectedMessage \u003d Alias.MESSAGE_ALIAS_CONSTRAINTS;"},{"lineNumber":56,"author":{"gitID":"jingyinno"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, alias::toModelType);"},{"lineNumber":57,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":59,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"jingyinno"},"content":"    public void toModelType_nullAlias_throwsIllegalValueException() {"},{"lineNumber":61,"author":{"gitID":"jingyinno"},"content":"        XmlAdaptedAlias alias \u003d new XmlAdaptedAlias(VALID_COMMAND, null);"},{"lineNumber":62,"author":{"gitID":"jingyinno"},"content":"        String expectedMessage \u003d Alias.MESSAGE_ALIAS_CONSTRAINTS;"},{"lineNumber":63,"author":{"gitID":"jingyinno"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, alias::toModelType);"},{"lineNumber":64,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":66,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"jingyinno"},"content":"    public void equals() throws Exception {"},{"lineNumber":68,"author":{"gitID":"jingyinno"},"content":"        XmlAdaptedAlias add \u003d new XmlAdaptedAlias(ADD);"},{"lineNumber":69,"author":{"gitID":"jingyinno"},"content":"        XmlAdaptedAlias addCopy \u003d new XmlAdaptedAlias(ADD);"},{"lineNumber":70,"author":{"gitID":"jingyinno"},"content":"        XmlAdaptedAlias delete \u003d new XmlAdaptedAlias(DELETE);"},{"lineNumber":71,"author":{"gitID":"jingyinno"},"content":"        Alias aliasObject \u003d new AliasBuilder().build();"},{"lineNumber":72,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":73,"author":{"gitID":"jingyinno"},"content":"        // same object -\u003e returns true"},{"lineNumber":74,"author":{"gitID":"jingyinno"},"content":"        assertTrue(add.equals(add));"},{"lineNumber":75,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":76,"author":{"gitID":"jingyinno"},"content":"        // same values -\u003e returns true"},{"lineNumber":77,"author":{"gitID":"jingyinno"},"content":"        assertTrue(add.equals(addCopy));"},{"lineNumber":78,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":79,"author":{"gitID":"jingyinno"},"content":"        // null -\u003e returns false"},{"lineNumber":80,"author":{"gitID":"jingyinno"},"content":"        assertFalse(add \u003d\u003d null);"},{"lineNumber":81,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":82,"author":{"gitID":"jingyinno"},"content":"        // different values -\u003e returns false"},{"lineNumber":83,"author":{"gitID":"jingyinno"},"content":"        assertFalse(add.equals(delete));"},{"lineNumber":84,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":85,"author":{"gitID":"jingyinno"},"content":"        // different object -\u003e returns false"},{"lineNumber":86,"author":{"gitID":"jingyinno"},"content":"        assertFalse(add.equals(aliasObject));"},{"lineNumber":87,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"jingyinno"},"content":"}"}],"authorContributionMap":{"jingyinno":72,"-":16}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Password;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String TEST_PASSWORD \u003d \"test\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":37,"author":{"gitID":"Caijun7"},"content":"        ReadOnlyJsonVenueInformation venueInformationStorage \u003d new ReadOnlyJsonVenueInformation(\"vi\");"},{"lineNumber":38,"author":{"gitID":"Caijun7"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage, venueInformationStorage);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private String getTempFilePath(String fileName) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return testFolder.getRoot().getPath() + fileName;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":49,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":50,"author":{"gitID":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":51,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":52,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        original.setGuiSettings(300, 600, 4, 6);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void addressBookReadSave() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":63,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":64,"author":{"gitID":"-"},"content":"         * {@link XmlAddressBookStorage} class."},{"lineNumber":65,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."},{"lineNumber":66,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        storageManager.saveAddressBook(original);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"yeggasd"},"content":"    //@@author yeggasd"},{"lineNumber":74,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"yeggasd"},"content":"    public void addressBookEncryptedReadSaveWithPassword() throws Exception {"},{"lineNumber":76,"author":{"gitID":"yeggasd"},"content":"        /*"},{"lineNumber":77,"author":{"gitID":"yeggasd"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":78,"author":{"gitID":"yeggasd"},"content":"         * {@link XmlAddressBookStorage} class."},{"lineNumber":79,"author":{"gitID":"yeggasd"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."},{"lineNumber":80,"author":{"gitID":"yeggasd"},"content":"         */"},{"lineNumber":81,"author":{"gitID":"yeggasd"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":82,"author":{"gitID":"yeggasd"},"content":"        Password testPassword \u003d new Password(TEST_PASSWORD);"},{"lineNumber":83,"author":{"gitID":"yeggasd"},"content":"        original.updatePassword(testPassword);"},{"lineNumber":84,"author":{"gitID":"yeggasd"},"content":"        storageManager.saveAddressBook(original);"},{"lineNumber":85,"author":{"gitID":"yeggasd"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook(testPassword).get();"},{"lineNumber":86,"author":{"gitID":"yeggasd"},"content":"        assertEquals(original, new AddressBook(retrieved));"},{"lineNumber":87,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":89,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"yeggasd"},"content":"    public void addressBookEncryptedReadSaveWithFilePath() throws Exception {"},{"lineNumber":91,"author":{"gitID":"yeggasd"},"content":"        /*"},{"lineNumber":92,"author":{"gitID":"yeggasd"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":93,"author":{"gitID":"yeggasd"},"content":"         * {@link XmlAddressBookStorage} class."},{"lineNumber":94,"author":{"gitID":"yeggasd"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."},{"lineNumber":95,"author":{"gitID":"yeggasd"},"content":"         */"},{"lineNumber":96,"author":{"gitID":"yeggasd"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":97,"author":{"gitID":"yeggasd"},"content":"        Password testPassword \u003d new Password(TEST_PASSWORD);"},{"lineNumber":98,"author":{"gitID":"yeggasd"},"content":"        original.updatePassword(testPassword);"},{"lineNumber":99,"author":{"gitID":"yeggasd"},"content":"        storageManager.saveAddressBook(original);"},{"lineNumber":100,"author":{"gitID":"yeggasd"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook(storageManager.getAddressBookFilePath(),"},{"lineNumber":101,"author":{"gitID":"yeggasd"},"content":"                                                                        testPassword).get();"},{"lineNumber":102,"author":{"gitID":"yeggasd"},"content":"        assertEquals(original, new AddressBook(retrieved));"},{"lineNumber":103,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"yeggasd"},"content":"    //@@author"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void getAddressBookFilePath() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(\"dummy\"),"},{"lineNumber":115,"author":{"gitID":"Caijun7"},"content":"                                             new JsonUserPrefsStorage(\"dummy\"),"},{"lineNumber":116,"author":{"gitID":"Caijun7"},"content":"                                             new ReadOnlyJsonVenueInformation(\"dummy\"));"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new AddressBook()));"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * A Stub class to throw an exception when the save method is called"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    class XmlAddressBookStorageExceptionThrowingStub extends XmlAddressBookStorage {"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        public XmlAddressBookStorageExceptionThrowingStub(String filePath) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            super(filePath);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            throw new IOException(\"dummy exception\");"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yeggasd":32,"Caijun7":4,"-":102}},{"path":"src/test/java/seedu/address/storage/ReadOnlyJsonVenueInformationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.Building;"},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.Room;"},{"lineNumber":17,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.Week;"},{"lineNumber":18,"author":{"gitID":"Caijun7"},"content":"import seedu.address.testutil.BuildingBuilder;"},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":"import seedu.address.testutil.RoomBuilder;"},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":21,"author":{"gitID":"Caijun7"},"content":"//@@author Caijun7"},{"lineNumber":22,"author":{"gitID":"Caijun7"},"content":"public class ReadOnlyJsonVenueInformationTest {"},{"lineNumber":23,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":24,"author":{"gitID":"Caijun7"},"content":"    private static final String TEST_DATA_FOLDER \u003d \"/ReadOnlyJsonVenueInformationTest/\";"},{"lineNumber":25,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":26,"author":{"gitID":"Caijun7"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"Caijun7"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":28,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"Caijun7"},"content":"    public void readVenueInformation_nullFilePath_throwsNullPointerException() throws DataConversionException {"},{"lineNumber":31,"author":{"gitID":"Caijun7"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":32,"author":{"gitID":"Caijun7"},"content":"        readVenueInformation(null);"},{"lineNumber":33,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":35,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"Caijun7"},"content":"    public void readVenueInformation_missingFile_emptyResult() throws DataConversionException {"},{"lineNumber":37,"author":{"gitID":"Caijun7"},"content":"        assertFalse(readVenueInformation(\"NonExistentFile.json\").isPresent());"},{"lineNumber":38,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":40,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"Caijun7"},"content":"    public void readVenueInformation_notJsonFormat_exceptionThrown() throws DataConversionException {"},{"lineNumber":42,"author":{"gitID":"Caijun7"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":43,"author":{"gitID":"Caijun7"},"content":"        readVenueInformation(\"NotJsonFormatVenueInformation.json\");"},{"lineNumber":44,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":46,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"Caijun7"},"content":"    public void readVenueInformation_fileInOrder_successfullyRead() throws DataConversionException {"},{"lineNumber":48,"author":{"gitID":"Caijun7"},"content":"        HashMap\u003cString, Week\u003e expected \u003d getTypicalVenueInformation().getNusRooms();"},{"lineNumber":49,"author":{"gitID":"Caijun7"},"content":"        HashMap\u003cString, Week\u003e actual \u003d readVenueInformation(\"TypicalVenueInformation.json\").get().getNusRooms();"},{"lineNumber":50,"author":{"gitID":"Caijun7"},"content":"        assertEquals(expected, actual);"},{"lineNumber":51,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":53,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"Caijun7"},"content":"    public void readVenueInformation_valuesMissingFromFile_defaultValueUsed() throws DataConversionException {"},{"lineNumber":55,"author":{"gitID":"Caijun7"},"content":"        HashMap\u003cString, Week\u003e actual \u003d readVenueInformation(\"EmptyVenueInformation.json\").get().getNusRooms();"},{"lineNumber":56,"author":{"gitID":"Caijun7"},"content":"        assertEquals(null, actual);"},{"lineNumber":57,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":59,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"Caijun7"},"content":"    public void readVenueInformation_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"},{"lineNumber":61,"author":{"gitID":"Caijun7"},"content":"        HashMap\u003cString, Week\u003e expected \u003d getTypicalVenueInformation().getNusRooms();"},{"lineNumber":62,"author":{"gitID":"Caijun7"},"content":"        HashMap\u003cString, Week\u003e actual \u003d readVenueInformation(\"ExtraValuesVenueInformation.json\").get().getNusRooms();"},{"lineNumber":63,"author":{"gitID":"Caijun7"},"content":"        assertEquals(expected, actual);"},{"lineNumber":64,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":66,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"Caijun7"},"content":"    public void readBuildingsAndRoomsInformation_nullFilePath_throwsNullPointerException()"},{"lineNumber":68,"author":{"gitID":"Caijun7"},"content":"            throws DataConversionException {"},{"lineNumber":69,"author":{"gitID":"Caijun7"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":70,"author":{"gitID":"Caijun7"},"content":"        readBuildingsAndRoomsInformation(null);"},{"lineNumber":71,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":73,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"Caijun7"},"content":"    public void readBuildingsAndRoomsInformation_missingFile_emptyResult() throws DataConversionException {"},{"lineNumber":75,"author":{"gitID":"Caijun7"},"content":"        assertFalse(readBuildingsAndRoomsInformation(\"NonExistentFile.json\").isPresent());"},{"lineNumber":76,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":78,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"Caijun7"},"content":"    public void readBuildingsAndRoomsInformation_notJsonFormat_exceptionThrown() throws DataConversionException {"},{"lineNumber":80,"author":{"gitID":"Caijun7"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":81,"author":{"gitID":"Caijun7"},"content":"        readBuildingsAndRoomsInformation(\"NotJsonFormatVenueInformation.json\");"},{"lineNumber":82,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":84,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"Caijun7"},"content":"    public void readBuildingsAndRoomsInformation_fileInOrder_successfullyRead() throws DataConversionException {"},{"lineNumber":86,"author":{"gitID":"Caijun7"},"content":"        HashMap\u003cString, ArrayList\u003cString\u003e\u003e expected \u003d getTypicalBuildingsAndRoomsInformation().getBuildingsAndRooms();"},{"lineNumber":87,"author":{"gitID":"Caijun7"},"content":"        HashMap\u003cString, ArrayList\u003cString\u003e\u003e actual \u003d"},{"lineNumber":88,"author":{"gitID":"Caijun7"},"content":"                readBuildingsAndRoomsInformation(\"TypicalVenueInformation.json\").get().getBuildingsAndRooms();"},{"lineNumber":89,"author":{"gitID":"Caijun7"},"content":"        assertEquals(expected, actual);"},{"lineNumber":90,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":92,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"Caijun7"},"content":"    public void readBuildingsAndRoomsInformation_valuesMissingFromFile_defaultValueUsed()"},{"lineNumber":94,"author":{"gitID":"Caijun7"},"content":"            throws DataConversionException {"},{"lineNumber":95,"author":{"gitID":"Caijun7"},"content":"        HashMap\u003cString, ArrayList\u003cString\u003e\u003e actual \u003d"},{"lineNumber":96,"author":{"gitID":"Caijun7"},"content":"                readBuildingsAndRoomsInformation(\"EmptyVenueInformation.json\").get().getBuildingsAndRooms();"},{"lineNumber":97,"author":{"gitID":"Caijun7"},"content":"        assertEquals(null, actual);"},{"lineNumber":98,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":100,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"Caijun7"},"content":"    public void readBuildingsAndRoomsInformation_extraValuesInFile_extraValuesIgnored()"},{"lineNumber":102,"author":{"gitID":"Caijun7"},"content":"            throws DataConversionException {"},{"lineNumber":103,"author":{"gitID":"Caijun7"},"content":"        HashMap\u003cString, ArrayList\u003cString\u003e\u003e expected \u003d getTypicalBuildingsAndRoomsInformation().getBuildingsAndRooms();"},{"lineNumber":104,"author":{"gitID":"Caijun7"},"content":"        HashMap\u003cString, ArrayList\u003cString\u003e\u003e actual \u003d"},{"lineNumber":105,"author":{"gitID":"Caijun7"},"content":"                readBuildingsAndRoomsInformation(\"ExtraValuesVenueInformation.json\").get().getBuildingsAndRooms();"},{"lineNumber":106,"author":{"gitID":"Caijun7"},"content":"        assertEquals(expected, actual);"},{"lineNumber":107,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":109,"author":{"gitID":"Caijun7"},"content":"    private Optional\u003cRoom\u003e readVenueInformation(String venueInformationFileInTestDataFolder)"},{"lineNumber":110,"author":{"gitID":"Caijun7"},"content":"            throws DataConversionException {"},{"lineNumber":111,"author":{"gitID":"Caijun7"},"content":"        String venueInformationFilePath \u003d addToTestDataPathIfNotNull(venueInformationFileInTestDataFolder);"},{"lineNumber":112,"author":{"gitID":"Caijun7"},"content":"        return new ReadOnlyJsonVenueInformation(venueInformationFilePath)"},{"lineNumber":113,"author":{"gitID":"Caijun7"},"content":"                .readVenueInformation(venueInformationFilePath);"},{"lineNumber":114,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":116,"author":{"gitID":"Caijun7"},"content":"    private Optional\u003cBuilding\u003e readBuildingsAndRoomsInformation(String venueInformationFileInTestDataFolder)"},{"lineNumber":117,"author":{"gitID":"Caijun7"},"content":"            throws DataConversionException {"},{"lineNumber":118,"author":{"gitID":"Caijun7"},"content":"        String venueInformationFilePath \u003d addToTestDataPathIfNotNull(venueInformationFileInTestDataFolder);"},{"lineNumber":119,"author":{"gitID":"Caijun7"},"content":"        return new ReadOnlyJsonVenueInformation(venueInformationFilePath)"},{"lineNumber":120,"author":{"gitID":"Caijun7"},"content":"                .readBuildingsAndRoomsInformation(venueInformationFilePath);"},{"lineNumber":121,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":123,"author":{"gitID":"Caijun7"},"content":"    private String addToTestDataPathIfNotNull(String venueInformationFileInTestDataFolder) {"},{"lineNumber":124,"author":{"gitID":"Caijun7"},"content":"        return venueInformationFileInTestDataFolder !\u003d null"},{"lineNumber":125,"author":{"gitID":"Caijun7"},"content":"                ? TEST_DATA_FOLDER + venueInformationFileInTestDataFolder"},{"lineNumber":126,"author":{"gitID":"Caijun7"},"content":"                : null;"},{"lineNumber":127,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":129,"author":{"gitID":"Caijun7"},"content":"    private Room getTypicalVenueInformation() {"},{"lineNumber":130,"author":{"gitID":"Caijun7"},"content":"        Room venueInformation \u003d new RoomBuilder().build();"},{"lineNumber":131,"author":{"gitID":"Caijun7"},"content":"        return venueInformation;"},{"lineNumber":132,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":134,"author":{"gitID":"Caijun7"},"content":"    private Building getTypicalBuildingsAndRoomsInformation() {"},{"lineNumber":135,"author":{"gitID":"Caijun7"},"content":"        Building buildingsAndRoomsInformation \u003d new BuildingBuilder().build();"},{"lineNumber":136,"author":{"gitID":"Caijun7"},"content":"        return buildingsAndRoomsInformation;"},{"lineNumber":137,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":139,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":127,"-":12}},{"path":"src/test/java/seedu/address/storage/GoogleDriveStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":5,"author":{"gitID":"Caijun7"},"content":"import org.junit.AfterClass;"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":"import org.junit.BeforeClass;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":"import seedu.address.storage.exceptions.RequestTimeoutException;"},{"lineNumber":12,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":"//@@author Caijun7"},{"lineNumber":14,"author":{"gitID":"Caijun7"},"content":"public class GoogleDriveStorageTest {"},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":"    @Rule"},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":17,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":18,"author":{"gitID":"Caijun7"},"content":"    @BeforeClass"},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":"    public static void setTestEnvironment() {"},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":"        GoogleDriveStorage.setTestEnvironment();"},{"lineNumber":21,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":23,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"Caijun7"},"content":"    public void constructor_noUserResponse_throwsRequestTimeoutException() throws Exception {"},{"lineNumber":25,"author":{"gitID":"Caijun7"},"content":"        thrown.expect(RequestTimeoutException.class);"},{"lineNumber":26,"author":{"gitID":"Caijun7"},"content":"        GoogleDriveStorage.resetTestEnvironment();"},{"lineNumber":27,"author":{"gitID":"Caijun7"},"content":"        GoogleDriveStorage googleDriveStorage \u003d new GoogleDriveStorage(\"test\");"},{"lineNumber":28,"author":{"gitID":"Caijun7"},"content":"        GoogleDriveStorage.setTestEnvironment();"},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":31,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"Caijun7"},"content":"    public void uploadFile_invalidFilePath_throwsIoException() throws Exception {"},{"lineNumber":33,"author":{"gitID":"Caijun7"},"content":"        thrown.expect(IOException.class);"},{"lineNumber":34,"author":{"gitID":"Caijun7"},"content":"        String invalidFilePath \u003d \"nonExistentAddressBook.xml\";"},{"lineNumber":35,"author":{"gitID":"Caijun7"},"content":"        GoogleDriveStorage googleDriveStorage \u003d new GoogleDriveStorage(invalidFilePath);"},{"lineNumber":36,"author":{"gitID":"Caijun7"},"content":"        googleDriveStorage.uploadFile();"},{"lineNumber":37,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":39,"author":{"gitID":"Caijun7"},"content":"    @AfterClass"},{"lineNumber":40,"author":{"gitID":"Caijun7"},"content":"    public static void resetTestEnvironment() {"},{"lineNumber":41,"author":{"gitID":"Caijun7"},"content":"        GoogleDriveStorage.resetTestEnvironment();"},{"lineNumber":42,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":44,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":38,"-":6}},{"path":"src/test/java/seedu/address/storage/XmlAddressBookStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"Caijun7"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":"import java.nio.file.Files;"},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":"import java.nio.file.Path;"},{"lineNumber":17,"author":{"gitID":"Caijun7"},"content":"import java.nio.file.Paths;"},{"lineNumber":18,"author":{"gitID":"Caijun7"},"content":"import java.util.Arrays;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.WrongPasswordException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.SecurityUtil;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.Password;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":33,"author":{"gitID":"Caijun7"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class XmlAddressBookStorageTest {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/XmlAddressBookStorageTest/\");"},{"lineNumber":37,"author":{"gitID":"Caijun7"},"content":"    private static final String TEST_PASSWORD \u003d \"test!!!!\";"},{"lineNumber":38,"author":{"gitID":"Caijun7"},"content":"    private static final String TEST_DATA_FILE \u003d FileUtil.getPath(\"src/test/data/sandbox/temp.xml\");"},{"lineNumber":39,"author":{"gitID":"Caijun7"},"content":"    private static final String TEST_DATA_FILE_ALICE_BENSON \u003d TEST_DATA_FOLDER + \"aliceBensonAddressBook.xml\";"},{"lineNumber":40,"author":{"gitID":"Caijun7"},"content":"    private static final String TEST_DATA_FILE_ALICE_BENSON_ENCRYPTED \u003d TEST_DATA_FOLDER"},{"lineNumber":41,"author":{"gitID":"Caijun7"},"content":"            + \"encryptedAliceBensonAddressBook.xml\";"},{"lineNumber":42,"author":{"gitID":"Caijun7"},"content":"    private static final String TEST_DATA_FILE_ALICE_BENSON_ENCRYPTED_BACKUP \u003d TEST_DATA_FOLDER"},{"lineNumber":43,"author":{"gitID":"Caijun7"},"content":"            + \"encryptedAliceBensonAddressBookBackup.xml\";"},{"lineNumber":44,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"Caijun7"},"content":"    private final AddressBook addressBookWithAliceAndBenson \u003d new AddressBookBuilder().withPerson(ALICE)"},{"lineNumber":52,"author":{"gitID":"Caijun7"},"content":"            .withPerson(BENSON).build();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        readAddressBook(null);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return new XmlAddressBookStorage(filePath).readAddressBook(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"yeggasd"},"content":"    //@@author yeggasd"},{"lineNumber":65,"author":{"gitID":"yeggasd"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath, Password password)"},{"lineNumber":66,"author":{"gitID":"yeggasd"},"content":"                                                                            throws Exception {"},{"lineNumber":67,"author":{"gitID":"yeggasd"},"content":"        return new XmlAddressBookStorage(filePath).readAddressBook(addToTestDataPathIfNotNull(filePath), password);"},{"lineNumber":68,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"yeggasd"},"content":"    //@@author"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                ? TEST_DATA_FOLDER + prefsFileInTestDataFolder"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                : null;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.xml\").isPresent());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void read_notXmlFormat_exceptionThrown() throws Exception {"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        readAddressBook(\"NotXmlFormatAddressBook.xml\");"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":89,"author":{"gitID":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":90,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"Caijun7"},"content":"    public void readAddressBook_invalidPersonAddressBook_throwsDataConversionException() throws Exception {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        readAddressBook(\"invalidPersonAddressBook.xml\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"Caijun7"},"content":"    public void readAddressBook_invalidAndValidPersonAddressBook_throwsDataConversionException() throws Exception {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        readAddressBook(\"invalidAndValidPersonAddressBook.xml\");"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"yeggasd"},"content":"    //@@author yeggasd"},{"lineNumber":106,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"yeggasd"},"content":"    public void readAddressBookWithPassword_invalidAndValidPersonAddressBook_throwsDataConversionException()"},{"lineNumber":108,"author":{"gitID":"yeggasd"},"content":"            throws Exception {"},{"lineNumber":109,"author":{"gitID":"yeggasd"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":110,"author":{"gitID":"yeggasd"},"content":"        readAddressBook(\"invalidAndValidPersonAddressBook.xml\");"},{"lineNumber":111,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":113,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"yeggasd"},"content":"    public void readAddressBookWithPassword_wrongPassword_throwsWrongPasswordException() throws Exception {"},{"lineNumber":115,"author":{"gitID":"yeggasd"},"content":"        String filePath \u003d \"TempEncryptedAddressBook.xml\";"},{"lineNumber":116,"author":{"gitID":"yeggasd"},"content":"        File file \u003d new File(TEST_DATA_FOLDER + filePath);"},{"lineNumber":117,"author":{"gitID":"yeggasd"},"content":"        SecurityUtil.encrypt(file, SecurityUtil.hashPassword(\"wrongPassword\"));"},{"lineNumber":118,"author":{"gitID":"yeggasd"},"content":"        thrown.expect(WrongPasswordException.class);"},{"lineNumber":119,"author":{"gitID":"yeggasd"},"content":"        readAddressBook(filePath, new Password(\"test\"));"},{"lineNumber":120,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"yeggasd"},"content":"    //@@author"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempAddressBook.xml\";"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        //Save in new file and read back"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        //Modify data, overwrite exiting file, and read back"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        original.addPerson(HOON);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        original.removePerson(ALICE);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        //Save and read without specifying file path"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        original.addPerson(IDA);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original); //file path not specified"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook().get(); //file path not specified"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"yeggasd"},"content":"    //@@author yeggasd"},{"lineNumber":150,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":151,"author":{"gitID":"yeggasd"},"content":"    public void readAndSaveEncryptedAddressBook_allInOrder_success() throws Exception {"},{"lineNumber":152,"author":{"gitID":"yeggasd"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempAddressBook.xml\";"},{"lineNumber":153,"author":{"gitID":"yeggasd"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":154,"author":{"gitID":"yeggasd"},"content":"        original.updatePassword(new Password(\"test\"));"},{"lineNumber":155,"author":{"gitID":"yeggasd"},"content":"        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":156,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":157,"author":{"gitID":"yeggasd"},"content":"        //Save in new file and read back"},{"lineNumber":158,"author":{"gitID":"yeggasd"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":159,"author":{"gitID":"yeggasd"},"content":"        ReadOnlyAddressBook readBack \u003d xmlAddressBookStorage.readAddressBook(filePath, new Password(\"test\")).get();"},{"lineNumber":160,"author":{"gitID":"yeggasd"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":161,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":162,"author":{"gitID":"yeggasd"},"content":"        //Modify data, overwrite exiting file, and read back"},{"lineNumber":163,"author":{"gitID":"yeggasd"},"content":"        original.addPerson(HOON);"},{"lineNumber":164,"author":{"gitID":"yeggasd"},"content":"        original.removePerson(ALICE);"},{"lineNumber":165,"author":{"gitID":"yeggasd"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":166,"author":{"gitID":"yeggasd"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook(filePath, new Password(\"test\")).get();"},{"lineNumber":167,"author":{"gitID":"yeggasd"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":168,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":169,"author":{"gitID":"yeggasd"},"content":"        //Save and read without specifying file path"},{"lineNumber":170,"author":{"gitID":"yeggasd"},"content":"        original.addPerson(IDA);"},{"lineNumber":171,"author":{"gitID":"yeggasd"},"content":"        xmlAddressBookStorage.saveAddressBook(original); //file path not specified"},{"lineNumber":172,"author":{"gitID":"yeggasd"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook(new Password(\"test\")).get(); //file path not specified"},{"lineNumber":173,"author":{"gitID":"yeggasd"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":174,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":175,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":177,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":178,"author":{"gitID":"yeggasd"},"content":"    public void saveAddressBook_changedPassword_success() throws Exception {"},{"lineNumber":179,"author":{"gitID":"yeggasd"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempAddressBook.xml\";"},{"lineNumber":180,"author":{"gitID":"yeggasd"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":181,"author":{"gitID":"yeggasd"},"content":"        original.updatePassword(new Password(\"test\"));"},{"lineNumber":182,"author":{"gitID":"yeggasd"},"content":"        original.updatePassword(SecurityUtil.hashPassword(\"new\"));"},{"lineNumber":183,"author":{"gitID":"yeggasd"},"content":"        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":184,"author":{"gitID":"yeggasd"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":185,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":186,"author":{"gitID":"yeggasd"},"content":"        ReadOnlyAddressBook readBack \u003d xmlAddressBookStorage.readAddressBook(filePath, new Password("},{"lineNumber":187,"author":{"gitID":"yeggasd"},"content":"                                        SecurityUtil.hashPassword(\"new\"),"},{"lineNumber":188,"author":{"gitID":"yeggasd"},"content":"                                        SecurityUtil.hashPassword(TEST_PASSWORD))).get();"},{"lineNumber":189,"author":{"gitID":"yeggasd"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":190,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"yeggasd"},"content":"    //@@author"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"Caijun7"},"content":"    //@@author Caijun7"},{"lineNumber":194,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":195,"author":{"gitID":"Caijun7"},"content":"    public void importAddressBook_invalidFileFormat_throwsDataConversionException() throws Exception {"},{"lineNumber":196,"author":{"gitID":"Caijun7"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":197,"author":{"gitID":"Caijun7"},"content":"        String filePath \u003d TEST_DATA_FOLDER + \"invalidFileFormatAddressBook.xml\";"},{"lineNumber":198,"author":{"gitID":"Caijun7"},"content":"        AddressBook original \u003d new AddressBook();"},{"lineNumber":199,"author":{"gitID":"Caijun7"},"content":"        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":200,"author":{"gitID":"Caijun7"},"content":"        xmlAddressBookStorage.importAddressBook(filePath, original, SecurityUtil.hashPassword(TEST_PASSWORD));"},{"lineNumber":201,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":203,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":204,"author":{"gitID":"Caijun7"},"content":"    public void importAddressBook_nonExistentFile_throwsFileNotFoundException() throws Exception {"},{"lineNumber":205,"author":{"gitID":"Caijun7"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":206,"author":{"gitID":"Caijun7"},"content":"        String filePath \u003d TEST_DATA_FOLDER + \"nonExistentAddressBook.xml\";"},{"lineNumber":207,"author":{"gitID":"Caijun7"},"content":"        AddressBook original \u003d new AddressBook();"},{"lineNumber":208,"author":{"gitID":"Caijun7"},"content":"        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":209,"author":{"gitID":"Caijun7"},"content":"        xmlAddressBookStorage.importAddressBook(filePath, original, SecurityUtil.hashPassword(TEST_PASSWORD));"},{"lineNumber":210,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":212,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":213,"author":{"gitID":"Caijun7"},"content":"    public void importAddressBook_encryptedFileWrongPassword_throwsWrongPasswordException() throws Exception {"},{"lineNumber":214,"author":{"gitID":"Caijun7"},"content":"        thrown.expect(WrongPasswordException.class);"},{"lineNumber":215,"author":{"gitID":"Caijun7"},"content":"        String encryptedFile \u003d TEST_DATA_FILE_ALICE_BENSON_ENCRYPTED;"},{"lineNumber":216,"author":{"gitID":"Caijun7"},"content":"        AddressBook original \u003d new AddressBook();"},{"lineNumber":217,"author":{"gitID":"Caijun7"},"content":"        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(encryptedFile);"},{"lineNumber":218,"author":{"gitID":"Caijun7"},"content":"        xmlAddressBookStorage.importAddressBook(encryptedFile, original, SecurityUtil.hashPassword(\"Wrong password\"));"},{"lineNumber":219,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":221,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":222,"author":{"gitID":"Caijun7"},"content":"    public void importAddressBook_encryptedValidFile_success() throws Exception {"},{"lineNumber":223,"author":{"gitID":"Caijun7"},"content":"        String encryptedFile \u003d TEST_DATA_FILE_ALICE_BENSON;"},{"lineNumber":224,"author":{"gitID":"Caijun7"},"content":"        AddressBook original \u003d new AddressBook();"},{"lineNumber":225,"author":{"gitID":"Caijun7"},"content":"        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(encryptedFile);"},{"lineNumber":226,"author":{"gitID":"Caijun7"},"content":"        // Import file into existing address book"},{"lineNumber":227,"author":{"gitID":"Caijun7"},"content":"        xmlAddressBookStorage.importAddressBook(encryptedFile, original, SecurityUtil.hashPassword(TEST_PASSWORD));"},{"lineNumber":228,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":229,"author":{"gitID":"Caijun7"},"content":"        AddressBook expected \u003d addressBookWithAliceAndBenson;"},{"lineNumber":230,"author":{"gitID":"Caijun7"},"content":"        assertEquals(expected, original);"},{"lineNumber":231,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":233,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":234,"author":{"gitID":"Caijun7"},"content":"    public void importAddressBook_unencryptedValidFile_success() throws Exception {"},{"lineNumber":235,"author":{"gitID":"Caijun7"},"content":"        String filePath \u003d TEST_DATA_FILE_ALICE_BENSON;"},{"lineNumber":236,"author":{"gitID":"Caijun7"},"content":"        AddressBook original \u003d new AddressBook();"},{"lineNumber":237,"author":{"gitID":"Caijun7"},"content":"        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":238,"author":{"gitID":"Caijun7"},"content":"        // Import file into existing address book"},{"lineNumber":239,"author":{"gitID":"Caijun7"},"content":"        xmlAddressBookStorage.importAddressBook(filePath, original, null);"},{"lineNumber":240,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":241,"author":{"gitID":"Caijun7"},"content":"        AddressBook expected \u003d addressBookWithAliceAndBenson;"},{"lineNumber":242,"author":{"gitID":"Caijun7"},"content":"        assertEquals(expected, original);"},{"lineNumber":243,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":245,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":246,"author":{"gitID":"Caijun7"},"content":"    public void exportAddressBook_invalidFilepath_throwsIoException() throws Exception {"},{"lineNumber":247,"author":{"gitID":"Caijun7"},"content":"        thrown.expect(IOException.class);"},{"lineNumber":248,"author":{"gitID":"Caijun7"},"content":"        String filePath \u003d TEST_DATA_FOLDER;"},{"lineNumber":249,"author":{"gitID":"Caijun7"},"content":"        AddressBook addressBook \u003d addressBookWithAliceAndBenson;"},{"lineNumber":250,"author":{"gitID":"Caijun7"},"content":"        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":251,"author":{"gitID":"Caijun7"},"content":"        xmlAddressBookStorage.exportAddressBook(filePath, null, addressBook.getPersonList(),"},{"lineNumber":252,"author":{"gitID":"Caijun7"},"content":"                addressBook.getAliasList(), addressBook.getTagList());"},{"lineNumber":253,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":255,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":256,"author":{"gitID":"Caijun7"},"content":"    public void exportAddressBook_validFilepathUnencryptedAddressBook_success() throws Exception {"},{"lineNumber":257,"author":{"gitID":"Caijun7"},"content":"        String filePath \u003d TEST_DATA_FILE;"},{"lineNumber":258,"author":{"gitID":"Caijun7"},"content":"        AddressBook original \u003d addressBookWithAliceAndBenson;"},{"lineNumber":259,"author":{"gitID":"Caijun7"},"content":"        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":260,"author":{"gitID":"Caijun7"},"content":"        xmlAddressBookStorage.exportAddressBook(filePath, null, original.getPersonList(),"},{"lineNumber":261,"author":{"gitID":"Caijun7"},"content":"                original.getAliasList(), original.getTagList());"},{"lineNumber":262,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":263,"author":{"gitID":"Caijun7"},"content":"        Path testDataPath \u003d Paths.get(TEST_DATA_FILE);"},{"lineNumber":264,"author":{"gitID":"Caijun7"},"content":"        byte[] testData \u003d Files.readAllBytes(testDataPath);"},{"lineNumber":265,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":266,"author":{"gitID":"Caijun7"},"content":"        Path expectedPath \u003d Paths.get(TEST_DATA_FILE_ALICE_BENSON);"},{"lineNumber":267,"author":{"gitID":"Caijun7"},"content":"        byte[] expected \u003d Files.readAllBytes(expectedPath);"},{"lineNumber":268,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":269,"author":{"gitID":"Caijun7"},"content":"        assertTrue(Arrays.equals(expected, testData));"},{"lineNumber":270,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":271,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":272,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":273,"author":{"gitID":"Caijun7"},"content":"    public void exportAddressBook_validFilepathEncryptedAddressBook_success() throws Exception {"},{"lineNumber":274,"author":{"gitID":"Caijun7"},"content":"        String filePath \u003d TEST_DATA_FILE_ALICE_BENSON_ENCRYPTED;"},{"lineNumber":275,"author":{"gitID":"Caijun7"},"content":"        AddressBook original \u003d addressBookWithAliceAndBenson;"},{"lineNumber":276,"author":{"gitID":"Caijun7"},"content":"        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":277,"author":{"gitID":"Caijun7"},"content":"        xmlAddressBookStorage.exportAddressBook(filePath, new Password(TEST_PASSWORD), original.getPersonList(),"},{"lineNumber":278,"author":{"gitID":"Caijun7"},"content":"                original.getAliasList(), original.getTagList());"},{"lineNumber":279,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":280,"author":{"gitID":"Caijun7"},"content":"        Path testDataPath \u003d Paths.get(TEST_DATA_FILE_ALICE_BENSON_ENCRYPTED);"},{"lineNumber":281,"author":{"gitID":"Caijun7"},"content":"        byte[] testData \u003d Files.readAllBytes(testDataPath);"},{"lineNumber":282,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":283,"author":{"gitID":"Caijun7"},"content":"        Path expectedPath \u003d Paths.get(TEST_DATA_FILE_ALICE_BENSON_ENCRYPTED_BACKUP);"},{"lineNumber":284,"author":{"gitID":"Caijun7"},"content":"        byte[] expected \u003d Files.readAllBytes(expectedPath);"},{"lineNumber":285,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":286,"author":{"gitID":"Caijun7"},"content":"        assertTrue(Arrays.equals(expected, testData));"},{"lineNumber":287,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":288,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":289,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":290,"author":{"gitID":"Caijun7"},"content":"    public void exportAndImportUnencryptedAddressBook_allInOrder_success() throws Exception {"},{"lineNumber":291,"author":{"gitID":"Caijun7"},"content":"        String filePath \u003d TEST_DATA_FILE;"},{"lineNumber":292,"author":{"gitID":"Caijun7"},"content":"        AddressBook original \u003d addressBookWithAliceAndBenson;"},{"lineNumber":293,"author":{"gitID":"Caijun7"},"content":"        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":294,"author":{"gitID":"Caijun7"},"content":"        xmlAddressBookStorage.exportAddressBook(filePath, null, original.getPersonList(),"},{"lineNumber":295,"author":{"gitID":"Caijun7"},"content":"                original.getAliasList(), original.getTagList());"},{"lineNumber":296,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":297,"author":{"gitID":"Caijun7"},"content":"        AddressBook expected \u003d new AddressBook();"},{"lineNumber":298,"author":{"gitID":"Caijun7"},"content":"        XmlAddressBookStorage expectedXmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":299,"author":{"gitID":"Caijun7"},"content":"        expectedXmlAddressBookStorage.importAddressBook(filePath, expected, null);"},{"lineNumber":300,"author":{"gitID":"Caijun7"},"content":"        assertEquals(expected, original);"},{"lineNumber":301,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":302,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":303,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":304,"author":{"gitID":"Caijun7"},"content":"    public void exportAndImportEncryptedAddressBook_allInOrder_success() throws Exception {"},{"lineNumber":305,"author":{"gitID":"Caijun7"},"content":"        String filePath \u003d TEST_DATA_FILE;"},{"lineNumber":306,"author":{"gitID":"Caijun7"},"content":"        AddressBook original \u003d addressBookWithAliceAndBenson;"},{"lineNumber":307,"author":{"gitID":"Caijun7"},"content":"        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":308,"author":{"gitID":"Caijun7"},"content":"        xmlAddressBookStorage.exportAddressBook(filePath, new Password(TEST_PASSWORD), original.getPersonList(),"},{"lineNumber":309,"author":{"gitID":"Caijun7"},"content":"                original.getAliasList(), original.getTagList());"},{"lineNumber":310,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":311,"author":{"gitID":"Caijun7"},"content":"        AddressBook expected \u003d new AddressBook();"},{"lineNumber":312,"author":{"gitID":"Caijun7"},"content":"        XmlAddressBookStorage expectedXmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":313,"author":{"gitID":"Caijun7"},"content":"        expectedXmlAddressBookStorage.importAddressBook(filePath, expected, SecurityUtil.hashPassword(TEST_PASSWORD));"},{"lineNumber":314,"author":{"gitID":"Caijun7"},"content":"        assertEquals(expected, original);"},{"lineNumber":315,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":316,"author":{"gitID":"Caijun7"},"content":"    //@@author"},{"lineNumber":317,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":318,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":319,"author":{"gitID":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"},{"lineNumber":320,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":321,"author":{"gitID":"-"},"content":"        saveAddressBook(null, \"SomeFile.xml\");"},{"lineNumber":322,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":323,"author":{"gitID":"-"},"content":""},{"lineNumber":324,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":325,"author":{"gitID":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}."},{"lineNumber":326,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":327,"author":{"gitID":"-"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"},{"lineNumber":328,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":329,"author":{"gitID":"-"},"content":"            new XmlAddressBookStorage(filePath).saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":330,"author":{"gitID":"-"},"content":"        } catch (WrongPasswordException wpe) {"},{"lineNumber":331,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be any encryption for the file.\", wpe);"},{"lineNumber":332,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":333,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":334,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":335,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":336,"author":{"gitID":"-"},"content":""},{"lineNumber":337,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":338,"author":{"gitID":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() throws IOException {"},{"lineNumber":339,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":340,"author":{"gitID":"-"},"content":"        saveAddressBook(new AddressBook(), null);"},{"lineNumber":341,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":342,"author":{"gitID":"yeggasd"},"content":"    //@@author yeggasd"},{"lineNumber":343,"author":{"gitID":"yeggasd"},"content":"    @After"},{"lineNumber":344,"author":{"gitID":"yeggasd"},"content":"    public void reset() throws Exception {"},{"lineNumber":345,"author":{"gitID":"yeggasd"},"content":"        String filePath \u003d \"TempEncryptedAddressBook.xml\";"},{"lineNumber":346,"author":{"gitID":"yeggasd"},"content":"        File file \u003d new File(TEST_DATA_FOLDER + filePath);"},{"lineNumber":347,"author":{"gitID":"yeggasd"},"content":"        SecurityUtil.decrypt(file, SecurityUtil.hashPassword(\"wrongPassword\"));"},{"lineNumber":348,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":349,"author":{"gitID":"yeggasd"},"content":"}"}],"authorContributionMap":{"yeggasd":74,"Caijun7":145,"-":130}},{"path":"src/test/java/seedu/address/model/alias/AliasTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.alias;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ALIAS;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALIAS_ADD;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALIAS_CLEAR;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALIAS_CLEAR_COMMAND;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALIAS_LIST_COMMAND;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALIAS_MAP1;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ALIAS_NUMBER;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.MapCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AliasBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"jingyinno"},"content":"//@@author jingyinno"},{"lineNumber":26,"author":{"gitID":"jingyinno"},"content":"public class AliasTest {"},{"lineNumber":27,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":28,"author":{"gitID":"jingyinno"},"content":"    private Alias clear;"},{"lineNumber":29,"author":{"gitID":"jingyinno"},"content":"    private Alias add;"},{"lineNumber":30,"author":{"gitID":"jingyinno"},"content":"    private Alias addClone;"},{"lineNumber":31,"author":{"gitID":"jingyinno"},"content":"    private Alias map;"},{"lineNumber":32,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":33,"author":{"gitID":"jingyinno"},"content":"    @Before"},{"lineNumber":34,"author":{"gitID":"jingyinno"},"content":"    public void setUp() {"},{"lineNumber":35,"author":{"gitID":"jingyinno"},"content":"        AliasBuilder builder \u003d new AliasBuilder();"},{"lineNumber":36,"author":{"gitID":"jingyinno"},"content":"        clear \u003d builder.withCommand(ClearCommand.COMMAND_WORD).withAlias(VALID_ALIAS_CLEAR).build();"},{"lineNumber":37,"author":{"gitID":"jingyinno"},"content":"        add \u003d builder.withCommand(AddCommand.COMMAND_WORD).withAlias(VALID_ALIAS_ADD).build();"},{"lineNumber":38,"author":{"gitID":"jingyinno"},"content":"        addClone \u003d builder.withCommand(AddCommand.COMMAND_WORD).withAlias(VALID_ALIAS_ADD).build();"},{"lineNumber":39,"author":{"gitID":"jingyinno"},"content":"        map \u003d builder.withCommand(MapCommand.COMMAND_WORD).withAlias(VALID_ALIAS_MAP1).build();"},{"lineNumber":40,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":42,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"jingyinno"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":44,"author":{"gitID":"jingyinno"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Alias(null, null));"},{"lineNumber":45,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":47,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"jingyinno"},"content":"    public void constructor_invalidAlias_throwsIllegalArgumentException() {"},{"lineNumber":49,"author":{"gitID":"jingyinno"},"content":"        String invalidAlias \u003d INVALID_ALIAS;"},{"lineNumber":50,"author":{"gitID":"jingyinno"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Alias(VALID_ALIAS_LIST_COMMAND, invalidAlias));"},{"lineNumber":51,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":53,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"jingyinno"},"content":"    public void isValidAliasName() {"},{"lineNumber":55,"author":{"gitID":"jingyinno"},"content":"        // null alias"},{"lineNumber":56,"author":{"gitID":"jingyinno"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Alias(null, null));"},{"lineNumber":57,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":58,"author":{"gitID":"jingyinno"},"content":"        // invalid alias"},{"lineNumber":59,"author":{"gitID":"jingyinno"},"content":"        assertFalse(Alias.isValidAliasParameter(\"\")); // empty string"},{"lineNumber":60,"author":{"gitID":"jingyinno"},"content":"        assertFalse(Alias.isValidAliasParameter(\" \")); // spaces only"},{"lineNumber":61,"author":{"gitID":"jingyinno"},"content":"        assertFalse(Alias.isValidAliasParameter(INVALID_ALIAS)); // only non-alphanumeric characters"},{"lineNumber":62,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":63,"author":{"gitID":"jingyinno"},"content":"        // valid alias"},{"lineNumber":64,"author":{"gitID":"jingyinno"},"content":"        assertTrue(Alias.isValidAliasParameter(VALID_ALIAS_ADD));"},{"lineNumber":65,"author":{"gitID":"jingyinno"},"content":"        assertTrue(Alias.isValidAliasParameter(VALID_ALIAS_NUMBER));"},{"lineNumber":66,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":68,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"jingyinno"},"content":"    public void equals() {"},{"lineNumber":70,"author":{"gitID":"jingyinno"},"content":"        assertEquals(clear, new Alias(VALID_ALIAS_CLEAR_COMMAND, VALID_ALIAS_CLEAR));"},{"lineNumber":71,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":73,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"jingyinno"},"content":"    public void getCommand_validAliases_success() {"},{"lineNumber":75,"author":{"gitID":"jingyinno"},"content":"        assertEquals(add.getCommand(), AddCommand.COMMAND_WORD);"},{"lineNumber":76,"author":{"gitID":"jingyinno"},"content":"        assertEquals(map.getCommand(), MapCommand.COMMAND_WORD);"},{"lineNumber":77,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":79,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"jingyinno"},"content":"    public void getAlias_validAliases_success() {"},{"lineNumber":81,"author":{"gitID":"jingyinno"},"content":"        assertEquals(add.getAlias(), VALID_ALIAS_ADD);"},{"lineNumber":82,"author":{"gitID":"jingyinno"},"content":"        assertEquals(map.getAlias(), VALID_ALIAS_MAP1);"},{"lineNumber":83,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":85,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"jingyinno"},"content":"    public void hashCode_equals() {"},{"lineNumber":87,"author":{"gitID":"jingyinno"},"content":"        assertEquals(add.hashCode(), addClone.hashCode());"},{"lineNumber":88,"author":{"gitID":"jingyinno"},"content":"        assertNotEquals(add.hashCode(), clear.hashCode());"},{"lineNumber":89,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":91,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"jingyinno"},"content":"    public void toString_equals() {"},{"lineNumber":93,"author":{"gitID":"jingyinno"},"content":"        String expectedString \u003d String.format(\"[%s]\", add.getAlias());"},{"lineNumber":94,"author":{"gitID":"jingyinno"},"content":"        assertEquals(add.toString(), expectedString);"},{"lineNumber":95,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"jingyinno"},"content":"}"}],"authorContributionMap":{"jingyinno":72,"-":24}},{"path":"src/test/java/seedu/address/logic/commands/ExportCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Caijun7"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":3,"author":{"gitID":"Caijun7"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"Caijun7"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.Password;"},{"lineNumber":21,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":23,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":24,"author":{"gitID":"Caijun7"},"content":"//@@author Caijun7"},{"lineNumber":25,"author":{"gitID":"Caijun7"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"Caijun7"},"content":" * Contains integration tests (interaction with the Model) and unit tests for {@code ExportCommand}."},{"lineNumber":27,"author":{"gitID":"Caijun7"},"content":" */"},{"lineNumber":28,"author":{"gitID":"Caijun7"},"content":"public class ExportCommandTest {"},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":30,"author":{"gitID":"Caijun7"},"content":"    private static final String TEST_DATA_FILE \u003d FileUtil.getPath(\"src/test/data/sandbox/temp.xml\");"},{"lineNumber":31,"author":{"gitID":"Caijun7"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/ExportCommandTest/\");"},{"lineNumber":32,"author":{"gitID":"Caijun7"},"content":"    private static final String TEST_DATA_FILE_ALICE \u003d TEST_DATA_FOLDER + \"aliceAddressBook.xml\";"},{"lineNumber":33,"author":{"gitID":"Caijun7"},"content":"    private static final String TEST_DATA_FILE_ALICE_BENSON \u003d TEST_DATA_FOLDER + \"aliceBensonAddressBook.xml\";"},{"lineNumber":34,"author":{"gitID":"Caijun7"},"content":"    private static final String TEST_PASSWORD \u003d \"test\";"},{"lineNumber":35,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":36,"author":{"gitID":"Caijun7"},"content":"    @Rule"},{"lineNumber":37,"author":{"gitID":"Caijun7"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":38,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":39,"author":{"gitID":"Caijun7"},"content":"    private final AddressBook addressBookWithAliceAndBenson \u003d new AddressBookBuilder().withPerson(ALICE)"},{"lineNumber":40,"author":{"gitID":"Caijun7"},"content":"            .withPerson(BENSON).build();"},{"lineNumber":41,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":42,"author":{"gitID":"Caijun7"},"content":"    private Model model \u003d new ModelManager(new AddressBook(), new UserPrefs());"},{"lineNumber":43,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":44,"author":{"gitID":"Caijun7"},"content":"    private final ExportCommand standardCommand \u003d prepareCommand(TEST_DATA_FILE_ALICE_BENSON, model);"},{"lineNumber":45,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":46,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"Caijun7"},"content":"    public void execute_emptyAddressBookExportIntoValidFilepathUnencrypted_success() throws Exception {"},{"lineNumber":48,"author":{"gitID":"Caijun7"},"content":"        String filepath \u003d TEST_DATA_FILE;"},{"lineNumber":49,"author":{"gitID":"Caijun7"},"content":"        ExportCommand exportCommand \u003d prepareCommand(filepath, model, null);"},{"lineNumber":50,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":51,"author":{"gitID":"Caijun7"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":52,"author":{"gitID":"Caijun7"},"content":"        expectedModel.exportAddressBook(filepath, null);"},{"lineNumber":53,"author":{"gitID":"Caijun7"},"content":"        assertCommandSuccess(exportCommand, model, ExportCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":54,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":56,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"Caijun7"},"content":"    public void execute_nonEmptyAddressBookExportIntoValidFilepathUnencrypted_success() throws Exception {"},{"lineNumber":58,"author":{"gitID":"Caijun7"},"content":"        String filepath \u003d TEST_DATA_FILE;"},{"lineNumber":59,"author":{"gitID":"Caijun7"},"content":"        ModelManager model \u003d new ModelManager(addressBookWithAliceAndBenson, new UserPrefs());"},{"lineNumber":60,"author":{"gitID":"Caijun7"},"content":"        ExportCommand exportCommand \u003d prepareCommand(filepath, model, null);"},{"lineNumber":61,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":62,"author":{"gitID":"Caijun7"},"content":"        ModelManager expectedModel \u003d new ModelManager(addressBookWithAliceAndBenson, new UserPrefs());"},{"lineNumber":63,"author":{"gitID":"Caijun7"},"content":"        expectedModel.exportAddressBook(filepath, null);"},{"lineNumber":64,"author":{"gitID":"Caijun7"},"content":"        assertCommandSuccess(exportCommand, model, ExportCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":65,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":67,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"Caijun7"},"content":"    public void execute_emptyAddressBookExportIntoValidFilepathEncrypted_success() throws Exception {"},{"lineNumber":69,"author":{"gitID":"Caijun7"},"content":"        String filepath \u003d TEST_DATA_FILE;"},{"lineNumber":70,"author":{"gitID":"Caijun7"},"content":"        ExportCommand exportCommand \u003d prepareCommand(filepath, model, TEST_PASSWORD);"},{"lineNumber":71,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":72,"author":{"gitID":"Caijun7"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":73,"author":{"gitID":"Caijun7"},"content":"        expectedModel.exportAddressBook(filepath, new Password(TEST_PASSWORD));"},{"lineNumber":74,"author":{"gitID":"Caijun7"},"content":"        assertCommandSuccess(exportCommand, model, ExportCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":75,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":77,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"Caijun7"},"content":"    public void execute_nonEmptyAddressBookExportIntoValidFilepathEncrypted_success() throws Exception {"},{"lineNumber":79,"author":{"gitID":"Caijun7"},"content":"        String filepath \u003d TEST_DATA_FILE;"},{"lineNumber":80,"author":{"gitID":"Caijun7"},"content":"        ModelManager model \u003d new ModelManager(addressBookWithAliceAndBenson, new UserPrefs());"},{"lineNumber":81,"author":{"gitID":"Caijun7"},"content":"        ExportCommand exportCommand \u003d prepareCommand(filepath, model, TEST_PASSWORD);"},{"lineNumber":82,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":83,"author":{"gitID":"Caijun7"},"content":"        ModelManager expectedModel \u003d new ModelManager(addressBookWithAliceAndBenson, new UserPrefs());"},{"lineNumber":84,"author":{"gitID":"Caijun7"},"content":"        expectedModel.exportAddressBook(filepath, new Password(TEST_PASSWORD));"},{"lineNumber":85,"author":{"gitID":"Caijun7"},"content":"        assertCommandSuccess(exportCommand, model, ExportCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":86,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":88,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"Caijun7"},"content":"    public void execute_emptyAddressBookExportIntoInvalidFilepath_throwsCommandException() throws Exception {"},{"lineNumber":90,"author":{"gitID":"Caijun7"},"content":"        String invalidFilepath \u003d \"\";"},{"lineNumber":91,"author":{"gitID":"Caijun7"},"content":"        ExportCommand exportCommand \u003d prepareCommand(invalidFilepath, model, null);"},{"lineNumber":92,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":93,"author":{"gitID":"Caijun7"},"content":"        assertCommandFailure(exportCommand, model, ExportCommand.MESSAGE_FILE_UNABLE_TO_SAVE);"},{"lineNumber":94,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":96,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"Caijun7"},"content":"    public void equals_sameValues_true() {"},{"lineNumber":98,"author":{"gitID":"Caijun7"},"content":"        ExportCommand commandWithSameValues \u003d prepareCommand(TEST_DATA_FILE_ALICE_BENSON, model);"},{"lineNumber":99,"author":{"gitID":"Caijun7"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":100,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":102,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"Caijun7"},"content":"    public void equals_sameObject_true() {"},{"lineNumber":104,"author":{"gitID":"Caijun7"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":105,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":107,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"Caijun7"},"content":"    public void equals_sameType_true() {"},{"lineNumber":109,"author":{"gitID":"Caijun7"},"content":"        assertTrue(standardCommand.equals(new ExportCommand(TEST_DATA_FILE_ALICE_BENSON, TEST_PASSWORD)));"},{"lineNumber":110,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":112,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"Caijun7"},"content":"    public void equals_nullInstance_false() {"},{"lineNumber":114,"author":{"gitID":"Caijun7"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":115,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":117,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"Caijun7"},"content":"    public void equals_differentTypes_false() {"},{"lineNumber":119,"author":{"gitID":"Caijun7"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":120,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":122,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"Caijun7"},"content":"    public void equals_differentAddressBook_false() {"},{"lineNumber":124,"author":{"gitID":"Caijun7"},"content":"        assertFalse(standardCommand.equals(prepareCommand(TEST_DATA_FILE_ALICE, model)));"},{"lineNumber":125,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":127,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"Caijun7"},"content":"     * Returns a {@code ExportCommand} with the parameter {@code filepath} with password as TEST_PASSWORD."},{"lineNumber":129,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"Caijun7"},"content":"    private ExportCommand prepareCommand(String filepath, Model model) {"},{"lineNumber":131,"author":{"gitID":"Caijun7"},"content":"        return prepareCommand(filepath, model, TEST_PASSWORD);"},{"lineNumber":132,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":134,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"Caijun7"},"content":"     * Returns a {@code ExportCommand} with the parameter {@code filepath} and {@code password}."},{"lineNumber":136,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"Caijun7"},"content":"    private ExportCommand prepareCommand(String filepath, Model model, String password) {"},{"lineNumber":138,"author":{"gitID":"Caijun7"},"content":"        ExportCommand exportCommand;"},{"lineNumber":139,"author":{"gitID":"Caijun7"},"content":"        if (password \u003d\u003d null) {"},{"lineNumber":140,"author":{"gitID":"Caijun7"},"content":"            exportCommand \u003d new ExportCommand(filepath);"},{"lineNumber":141,"author":{"gitID":"Caijun7"},"content":"        } else {"},{"lineNumber":142,"author":{"gitID":"Caijun7"},"content":"            exportCommand \u003d new ExportCommand(filepath, password);"},{"lineNumber":143,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"Caijun7"},"content":"        exportCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":145,"author":{"gitID":"Caijun7"},"content":"        return exportCommand;"},{"lineNumber":146,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":148,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":136,"-":12}},{"path":"src/test/java/seedu/address/model/UniqueAliasListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalAliases.ADD;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalAliases.EDIT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalAliases.MAP_1;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalAliases.MAP_2;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AliasCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.UniqueAliasList;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.exceptions.AliasNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.exceptions.DuplicateAliasException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"jingyinno"},"content":"//@@author jingyinno"},{"lineNumber":26,"author":{"gitID":"jingyinno"},"content":"public class UniqueAliasListTest {"},{"lineNumber":27,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":28,"author":{"gitID":"jingyinno"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"jingyinno"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":30,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":31,"author":{"gitID":"jingyinno"},"content":"    private UniqueAliasList uniqueAliasList;"},{"lineNumber":32,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":33,"author":{"gitID":"jingyinno"},"content":"    @Before"},{"lineNumber":34,"author":{"gitID":"jingyinno"},"content":"    public void setUp() {"},{"lineNumber":35,"author":{"gitID":"jingyinno"},"content":"        uniqueAliasList \u003d new UniqueAliasList();"},{"lineNumber":36,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":38,"author":{"gitID":"jingyinno"},"content":"    @After"},{"lineNumber":39,"author":{"gitID":"jingyinno"},"content":"    public void clean() throws AliasNotFoundException {"},{"lineNumber":40,"author":{"gitID":"jingyinno"},"content":"        clearAliasList();"},{"lineNumber":41,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":43,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"jingyinno"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":45,"author":{"gitID":"jingyinno"},"content":"        uniqueAliasList \u003d new UniqueAliasList();"},{"lineNumber":46,"author":{"gitID":"jingyinno"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":47,"author":{"gitID":"jingyinno"},"content":"        uniqueAliasList.asObservableList().remove(0);"},{"lineNumber":48,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":50,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"jingyinno"},"content":"    public void addAlias_validAlias_success() throws DuplicateAliasException {"},{"lineNumber":52,"author":{"gitID":"jingyinno"},"content":"        Alias validAlias \u003d ADD;"},{"lineNumber":53,"author":{"gitID":"jingyinno"},"content":"        uniqueAliasList.add(validAlias);"},{"lineNumber":54,"author":{"gitID":"jingyinno"},"content":"        assertEquals(Arrays.asList(validAlias), uniqueAliasList.getAliasObservableList());"},{"lineNumber":55,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":57,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"jingyinno"},"content":"    public void addAlias_validAlias_throwsDuplicateAliasException() throws DuplicateAliasException {"},{"lineNumber":59,"author":{"gitID":"jingyinno"},"content":"        Alias validAlias \u003d ADD;"},{"lineNumber":60,"author":{"gitID":"jingyinno"},"content":"        uniqueAliasList.add(validAlias);"},{"lineNumber":61,"author":{"gitID":"jingyinno"},"content":"        thrown.expect(DuplicateAliasException.class);"},{"lineNumber":62,"author":{"gitID":"jingyinno"},"content":"        uniqueAliasList.add(validAlias);"},{"lineNumber":63,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":65,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"jingyinno"},"content":"    public void removeAlias_validAlias_success() throws DuplicateAliasException, AliasNotFoundException {"},{"lineNumber":67,"author":{"gitID":"jingyinno"},"content":"        Alias validAlias \u003d ADD;"},{"lineNumber":68,"author":{"gitID":"jingyinno"},"content":"        uniqueAliasList.add(validAlias);"},{"lineNumber":69,"author":{"gitID":"jingyinno"},"content":"        uniqueAliasList.remove(validAlias.getAlias());"},{"lineNumber":70,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":71,"author":{"gitID":"jingyinno"},"content":"        UniqueAliasList expectedList \u003d new UniqueAliasList();"},{"lineNumber":72,"author":{"gitID":"jingyinno"},"content":"        assertEquals(uniqueAliasList.getAliasObservableList(), expectedList.asObservableList());"},{"lineNumber":73,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":75,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"jingyinno"},"content":"    public void removeAlias_invalidAlias_failure() throws AliasNotFoundException {"},{"lineNumber":77,"author":{"gitID":"jingyinno"},"content":"        Alias validAlias \u003d ADD;"},{"lineNumber":78,"author":{"gitID":"jingyinno"},"content":"        thrown.expect(AliasNotFoundException.class);"},{"lineNumber":79,"author":{"gitID":"jingyinno"},"content":"        uniqueAliasList.remove(validAlias.getAlias());"},{"lineNumber":80,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":82,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"jingyinno"},"content":"    public void getAliasCommand_validAlias_success() throws DuplicateAliasException {"},{"lineNumber":84,"author":{"gitID":"jingyinno"},"content":"        Alias validAlias \u003d ADD;"},{"lineNumber":85,"author":{"gitID":"jingyinno"},"content":"        uniqueAliasList.add(validAlias);"},{"lineNumber":86,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":87,"author":{"gitID":"jingyinno"},"content":"        String command \u003d uniqueAliasList.getCommandFromAlias(validAlias.getAlias());"},{"lineNumber":88,"author":{"gitID":"jingyinno"},"content":"        String expected \u003d validAlias.getCommand();"},{"lineNumber":89,"author":{"gitID":"jingyinno"},"content":"        assertEquals(command, expected);"},{"lineNumber":90,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":92,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"jingyinno"},"content":"    public void importAlias_validAlias_success() {"},{"lineNumber":94,"author":{"gitID":"jingyinno"},"content":"        Alias validAlias \u003d ADD;"},{"lineNumber":95,"author":{"gitID":"jingyinno"},"content":"        uniqueAliasList.importAlias(validAlias);"},{"lineNumber":96,"author":{"gitID":"jingyinno"},"content":"        assertEquals(Arrays.asList(validAlias), uniqueAliasList.getAliasObservableList());"},{"lineNumber":97,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":99,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"jingyinno"},"content":"    public void extractAliasMapping_noAliasAdded_success() {"},{"lineNumber":101,"author":{"gitID":"jingyinno"},"content":"        ArrayList\u003cString\u003e expectedList \u003d new ArrayList\u003cString\u003e();"},{"lineNumber":102,"author":{"gitID":"jingyinno"},"content":"        assertEquals(expectedList, uniqueAliasList.extractAliasMapping());"},{"lineNumber":103,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":105,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"jingyinno"},"content":"    public void extractAliasMapping_validAliasAdded_success() throws DuplicateAliasException {"},{"lineNumber":107,"author":{"gitID":"jingyinno"},"content":"        uniqueAliasList.add(ADD);"},{"lineNumber":108,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":109,"author":{"gitID":"jingyinno"},"content":"        ArrayList\u003cArrayList\u003cString\u003e\u003e expectedList \u003d generateExpectedList(new Alias[][]{{ADD}});"},{"lineNumber":110,"author":{"gitID":"jingyinno"},"content":"        assertEquals(expectedList, uniqueAliasList.extractAliasMapping());"},{"lineNumber":111,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":113,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"jingyinno"},"content":"    public void extractAliasMapping_differentCommandAliases_success() throws DuplicateAliasException,"},{"lineNumber":115,"author":{"gitID":"jingyinno"},"content":"            AliasNotFoundException {"},{"lineNumber":116,"author":{"gitID":"jingyinno"},"content":"        uniqueAliasList.add(ADD);"},{"lineNumber":117,"author":{"gitID":"jingyinno"},"content":"        uniqueAliasList.add(EDIT);"},{"lineNumber":118,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":119,"author":{"gitID":"jingyinno"},"content":"        ArrayList\u003cArrayList\u003cString\u003e\u003e expectedList \u003d generateExpectedList(new Alias[][]{{ADD, EDIT}});"},{"lineNumber":120,"author":{"gitID":"jingyinno"},"content":"        assertEquals(expectedList, uniqueAliasList.extractAliasMapping());"},{"lineNumber":121,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":123,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":124,"author":{"gitID":"jingyinno"},"content":"    public void extractAliasMapping_sameCommandAliases_success() throws DuplicateAliasException {"},{"lineNumber":125,"author":{"gitID":"jingyinno"},"content":"        uniqueAliasList.add(MAP_1);"},{"lineNumber":126,"author":{"gitID":"jingyinno"},"content":"        uniqueAliasList.add(MAP_2);"},{"lineNumber":127,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":128,"author":{"gitID":"jingyinno"},"content":"        ArrayList\u003cArrayList\u003cString\u003e\u003e expectedList \u003d generateExpectedList(new Alias[][]{{MAP_1}, {MAP_2}});"},{"lineNumber":129,"author":{"gitID":"jingyinno"},"content":"        assertEquals(expectedList, uniqueAliasList.extractAliasMapping());"},{"lineNumber":130,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":132,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":133,"author":{"gitID":"jingyinno"},"content":"    public void extractAliasMapping_mixedCommandAliases_success() throws DuplicateAliasException {"},{"lineNumber":134,"author":{"gitID":"jingyinno"},"content":"        uniqueAliasList.add(ADD);"},{"lineNumber":135,"author":{"gitID":"jingyinno"},"content":"        uniqueAliasList.add(MAP_1);"},{"lineNumber":136,"author":{"gitID":"jingyinno"},"content":"        uniqueAliasList.add(MAP_2);"},{"lineNumber":137,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":138,"author":{"gitID":"jingyinno"},"content":"        ArrayList\u003cArrayList\u003cString\u003e\u003e expectedList \u003d generateExpectedList(new Alias[][]{{ADD, MAP_1}, {MAP_2}});"},{"lineNumber":139,"author":{"gitID":"jingyinno"},"content":"        assertEquals(expectedList, uniqueAliasList.extractAliasMapping());"},{"lineNumber":140,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":142,"author":{"gitID":"jingyinno"},"content":"    @Test"},{"lineNumber":143,"author":{"gitID":"jingyinno"},"content":"    public void resetHashMap_success() throws DuplicateAliasException {"},{"lineNumber":144,"author":{"gitID":"jingyinno"},"content":"        uniqueAliasList.add(ADD);"},{"lineNumber":145,"author":{"gitID":"jingyinno"},"content":"        assertEquals(Arrays.asList(ADD), uniqueAliasList.getAliasObservableList());"},{"lineNumber":146,"author":{"gitID":"jingyinno"},"content":"        uniqueAliasList.resetHashmap();"},{"lineNumber":147,"author":{"gitID":"jingyinno"},"content":"        assertEquals(new ArrayList\u003cAlias\u003e(), uniqueAliasList.getAliasObservableList());"},{"lineNumber":148,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":150,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"jingyinno"},"content":"     * Generates an expected list with the aliases in the testAliasList inserted at their correct positions."},{"lineNumber":152,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"jingyinno"},"content":"    private ArrayList\u003cArrayList\u003cString\u003e\u003e generateExpectedList(Alias[][] testAliasList) {"},{"lineNumber":154,"author":{"gitID":"jingyinno"},"content":"        ArrayList\u003cArrayList\u003cString\u003e\u003e expectedList \u003d new ArrayList\u003cArrayList\u003cString\u003e\u003e();"},{"lineNumber":155,"author":{"gitID":"jingyinno"},"content":"        for (Alias[] row : testAliasList) {"},{"lineNumber":156,"author":{"gitID":"jingyinno"},"content":"            ArrayList\u003cString\u003e innerList \u003d populateEmptyAlias();"},{"lineNumber":157,"author":{"gitID":"jingyinno"},"content":"            insertAliasAtPositions(row, innerList);"},{"lineNumber":158,"author":{"gitID":"jingyinno"},"content":"            expectedList.add(innerList);"},{"lineNumber":159,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"jingyinno"},"content":"        return expectedList;"},{"lineNumber":161,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":163,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"jingyinno"},"content":"     * Inserts the alias command at their respective positions in the array."},{"lineNumber":165,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"jingyinno"},"content":"    private void insertAliasAtPositions(Alias[] testInnerAliasList, ArrayList\u003cString\u003e innerList) {"},{"lineNumber":167,"author":{"gitID":"jingyinno"},"content":"        for (Alias alias : testInnerAliasList) {"},{"lineNumber":168,"author":{"gitID":"jingyinno"},"content":"            innerList.set(AliasCommand.getCommands().indexOf(alias.getCommand()), alias.getAlias());"},{"lineNumber":169,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":172,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"jingyinno"},"content":"     * Removes all aliases in the list."},{"lineNumber":174,"author":{"gitID":"jingyinno"},"content":"     *"},{"lineNumber":175,"author":{"gitID":"jingyinno"},"content":"     * @throws AliasNotFoundException if the Alias to add is not an existing Alias in the list."},{"lineNumber":176,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"jingyinno"},"content":"    private void clearAliasList() throws AliasNotFoundException {"},{"lineNumber":178,"author":{"gitID":"jingyinno"},"content":"        for (Alias alias : uniqueAliasList.getAliasObservableList()) {"},{"lineNumber":179,"author":{"gitID":"jingyinno"},"content":"            uniqueAliasList.remove(alias.getAlias());"},{"lineNumber":180,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":183,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":184,"author":{"gitID":"jingyinno"},"content":"     * Creates an empty arraylist of size number of commands."},{"lineNumber":185,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":186,"author":{"gitID":"jingyinno"},"content":"    private ArrayList\u003cString\u003e populateEmptyAlias() {"},{"lineNumber":187,"author":{"gitID":"jingyinno"},"content":"        ArrayList\u003cString\u003e emptyList \u003d new ArrayList\u003cString\u003e();"},{"lineNumber":188,"author":{"gitID":"jingyinno"},"content":"        int size \u003d AliasCommand.getCommands().size();"},{"lineNumber":189,"author":{"gitID":"jingyinno"},"content":"        for (int i \u003d 0; i \u003c size; i++) {"},{"lineNumber":190,"author":{"gitID":"jingyinno"},"content":"            emptyList.add(\"\");"},{"lineNumber":191,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"jingyinno"},"content":"        return emptyList;"},{"lineNumber":193,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"jingyinno"},"content":"}"}],"authorContributionMap":{"jingyinno":170,"-":24}},{"path":"src/test/java/seedu/address/model/person/BirthdayTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.model.person.Birthday.MESSAGE_BIRTHDAY_CONSTRAINTS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.model.person.Birthday.MESSAGE_FUTURE_BIRTHDAY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.model.person.Birthday.MESSAGE_INVALID_BIRTHDAY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.model.person.Birthday.MESSAGE_INVALID_BIRTHMONTH;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"AzuraAiR"},"content":"//@@author AzuraAiR"},{"lineNumber":18,"author":{"gitID":"AzuraAiR"},"content":"public class BirthdayTest {"},{"lineNumber":19,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":20,"author":{"gitID":"AzuraAiR"},"content":"    @Rule"},{"lineNumber":21,"author":{"gitID":"AzuraAiR"},"content":"    public final ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":22,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":23,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"AzuraAiR"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":25,"author":{"gitID":"AzuraAiR"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Birthday(null));"},{"lineNumber":26,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":28,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"AzuraAiR"},"content":"    public void constructor_invalidBirthday_throwsIllegalArgumentException() {"},{"lineNumber":30,"author":{"gitID":"AzuraAiR"},"content":"        String invalidBirthday \u003d \"\";"},{"lineNumber":31,"author":{"gitID":"AzuraAiR"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Birthday(invalidBirthday));"},{"lineNumber":32,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":34,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"AzuraAiR"},"content":"    public void isValidBirthday_nullBirthday_throwsNullPointerException() {"},{"lineNumber":36,"author":{"gitID":"AzuraAiR"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Birthday.isValidBirthday(null));"},{"lineNumber":37,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":39,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"AzuraAiR"},"content":"    public void isValidBirthday_emptyBirthday_throwsIllegalArgumentException() {"},{"lineNumber":41,"author":{"gitID":"AzuraAiR"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":42,"author":{"gitID":"AzuraAiR"},"content":"        thrown.expectMessage(MESSAGE_BIRTHDAY_CONSTRAINTS);"},{"lineNumber":43,"author":{"gitID":"AzuraAiR"},"content":"        Birthday.isValidBirthday(\"\");"},{"lineNumber":44,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":46,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"AzuraAiR"},"content":"    public void isValidBirthday_birthdayWithSpaces_throwsIllegalArgumentException() {"},{"lineNumber":48,"author":{"gitID":"AzuraAiR"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":49,"author":{"gitID":"AzuraAiR"},"content":"        thrown.expectMessage(MESSAGE_BIRTHDAY_CONSTRAINTS);"},{"lineNumber":50,"author":{"gitID":"AzuraAiR"},"content":"        Birthday.isValidBirthday(\"     \");"},{"lineNumber":51,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":53,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"AzuraAiR"},"content":"    public void isValidBirthday_tooShortBirthday_throwsIllegalArgumentException() {"},{"lineNumber":55,"author":{"gitID":"AzuraAiR"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":56,"author":{"gitID":"AzuraAiR"},"content":"        thrown.expectMessage(MESSAGE_BIRTHDAY_CONSTRAINTS);"},{"lineNumber":57,"author":{"gitID":"AzuraAiR"},"content":"        Birthday.isValidBirthday(\"121212\");"},{"lineNumber":58,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":59,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":61,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"AzuraAiR"},"content":"    public void isValidBirthday_tooLongBirthday_throwsIllegalArgumentException() {"},{"lineNumber":63,"author":{"gitID":"AzuraAiR"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":64,"author":{"gitID":"AzuraAiR"},"content":"        thrown.expectMessage(MESSAGE_BIRTHDAY_CONSTRAINTS);"},{"lineNumber":65,"author":{"gitID":"AzuraAiR"},"content":"        Birthday.isValidBirthday(\"1212121212\");"},{"lineNumber":66,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":68,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"AzuraAiR"},"content":"    public void isValidBirthday_invalidYear_throwsIllegalArgumentException() {"},{"lineNumber":70,"author":{"gitID":"AzuraAiR"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":71,"author":{"gitID":"AzuraAiR"},"content":"        thrown.expectMessage(MESSAGE_FUTURE_BIRTHDAY);"},{"lineNumber":72,"author":{"gitID":"AzuraAiR"},"content":"        Birthday.isValidBirthday(\"01012020\");"},{"lineNumber":73,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":75,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"AzuraAiR"},"content":"    public void isValidBirthday_invalidDay_throwsIllegalArgumentException() {"},{"lineNumber":77,"author":{"gitID":"AzuraAiR"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":78,"author":{"gitID":"AzuraAiR"},"content":"        thrown.expectMessage(MESSAGE_INVALID_BIRTHDAY);"},{"lineNumber":79,"author":{"gitID":"AzuraAiR"},"content":"        Birthday.isValidBirthday(\"00011995\");"},{"lineNumber":80,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":82,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"AzuraAiR"},"content":"    public void isValidBirthday_invalidMonth_throwsIllegalArgumentException() {"},{"lineNumber":84,"author":{"gitID":"AzuraAiR"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":85,"author":{"gitID":"AzuraAiR"},"content":"        thrown.expectMessage(MESSAGE_INVALID_BIRTHMONTH);"},{"lineNumber":86,"author":{"gitID":"AzuraAiR"},"content":"        Birthday.isValidBirthday(\"01131995\");"},{"lineNumber":87,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":89,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"AzuraAiR"},"content":"    public void isValidBirthday_invalidDayOfMonth_throwsIllegalArgumentException() {"},{"lineNumber":91,"author":{"gitID":"AzuraAiR"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":92,"author":{"gitID":"AzuraAiR"},"content":"        thrown.expectMessage(MESSAGE_INVALID_BIRTHDAY);"},{"lineNumber":93,"author":{"gitID":"AzuraAiR"},"content":"        Birthday.isValidBirthday(\"30021995\");"},{"lineNumber":94,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":96,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"AzuraAiR"},"content":"    public void isValidBirthday_futureBirthdaySameYear_throwsIllegalArgumentException() {"},{"lineNumber":98,"author":{"gitID":"AzuraAiR"},"content":"        LocalDate today \u003d LocalDate.now();"},{"lineNumber":99,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":100,"author":{"gitID":"AzuraAiR"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":101,"author":{"gitID":"AzuraAiR"},"content":"        thrown.expectMessage(MESSAGE_FUTURE_BIRTHDAY);"},{"lineNumber":102,"author":{"gitID":"AzuraAiR"},"content":"        Birthday.isValidBirthday(buildBirthday(today, 10, today.getMonthValue() + 1));"},{"lineNumber":103,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":105,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"AzuraAiR"},"content":"    public void isValidBirthday_futureBirthdaySameMonth_throwsIllegalArgumentException() {"},{"lineNumber":107,"author":{"gitID":"AzuraAiR"},"content":"        LocalDate today \u003d LocalDate.now();"},{"lineNumber":108,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":109,"author":{"gitID":"AzuraAiR"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":110,"author":{"gitID":"AzuraAiR"},"content":"        thrown.expectMessage(MESSAGE_FUTURE_BIRTHDAY);"},{"lineNumber":111,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":112,"author":{"gitID":"AzuraAiR"},"content":"        Birthday.isValidBirthday(buildBirthday(today, today.getDayOfMonth() + 1, today.getMonthValue()));"},{"lineNumber":113,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":115,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"AzuraAiR"},"content":"    public void isValidBirthday_validBirthday_success() {"},{"lineNumber":117,"author":{"gitID":"AzuraAiR"},"content":"        try {"},{"lineNumber":118,"author":{"gitID":"AzuraAiR"},"content":"            assertTrue(Birthday.isValidBirthday(\"01011995\"));"},{"lineNumber":119,"author":{"gitID":"AzuraAiR"},"content":"        } catch (IllegalArgumentException iae) {"},{"lineNumber":120,"author":{"gitID":"AzuraAiR"},"content":"            // Should never go here"},{"lineNumber":121,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":124,"author":{"gitID":"AzuraAiR"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"AzuraAiR"},"content":"    public void getValidDayMonth() {"},{"lineNumber":126,"author":{"gitID":"AzuraAiR"},"content":"        Birthday birthdayStub \u003d new Birthday(\"01121995\");"},{"lineNumber":127,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":128,"author":{"gitID":"AzuraAiR"},"content":"        assertTrue(birthdayStub.getDay() \u003d\u003d 1); // check Day"},{"lineNumber":129,"author":{"gitID":"AzuraAiR"},"content":"        assertTrue(birthdayStub.getMonth() \u003d\u003d 12); // check Month"},{"lineNumber":130,"author":{"gitID":"AzuraAiR"},"content":"        assertTrue(birthdayStub.getYear() \u003d\u003d 1995); // check Year"},{"lineNumber":131,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":133,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"AzuraAiR"},"content":"     * Creates a stub for testing isValidBirthday with user input"},{"lineNumber":135,"author":{"gitID":"AzuraAiR"},"content":"     * @param today date of the computer running the rest"},{"lineNumber":136,"author":{"gitID":"AzuraAiR"},"content":"     * @param day day to be entered as valid date"},{"lineNumber":137,"author":{"gitID":"AzuraAiR"},"content":"     * @param month month to be entered as valid date"},{"lineNumber":138,"author":{"gitID":"AzuraAiR"},"content":"     * @return valid birthday whose values are adjusted for testing"},{"lineNumber":139,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"AzuraAiR"},"content":"    private String buildBirthday(LocalDate today, int day, int month) {"},{"lineNumber":141,"author":{"gitID":"AzuraAiR"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":142,"author":{"gitID":"AzuraAiR"},"content":"        int year \u003d today.getYear();"},{"lineNumber":143,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":144,"author":{"gitID":"AzuraAiR"},"content":"        // Append day"},{"lineNumber":145,"author":{"gitID":"AzuraAiR"},"content":"        if (day \u003c 10) { // Set day to 10 to avoid unnecessary trouble with preceding 0"},{"lineNumber":146,"author":{"gitID":"AzuraAiR"},"content":"            day \u003d 10;"},{"lineNumber":147,"author":{"gitID":"AzuraAiR"},"content":"        } else if (day + 1 \u003e 28) {  // If day exceeds the upper limit of any month, skip to next month"},{"lineNumber":148,"author":{"gitID":"AzuraAiR"},"content":"            month +\u003d 1;"},{"lineNumber":149,"author":{"gitID":"AzuraAiR"},"content":"            day \u003d 10;"},{"lineNumber":150,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"AzuraAiR"},"content":"        sb.append(day);"},{"lineNumber":152,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":153,"author":{"gitID":"AzuraAiR"},"content":"        // Append month"},{"lineNumber":154,"author":{"gitID":"AzuraAiR"},"content":"        if (month \u003c 10) {   // Add the preceding 0"},{"lineNumber":155,"author":{"gitID":"AzuraAiR"},"content":"            sb.append(\"0\");"},{"lineNumber":156,"author":{"gitID":"AzuraAiR"},"content":"        } else if (month \u003e 12) {    // If month exceeds year, skip to next year"},{"lineNumber":157,"author":{"gitID":"AzuraAiR"},"content":"            year +\u003d 1;"},{"lineNumber":158,"author":{"gitID":"AzuraAiR"},"content":"            month \u003d 10;"},{"lineNumber":159,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"AzuraAiR"},"content":"        sb.append(month);"},{"lineNumber":161,"author":{"gitID":"AzuraAiR"},"content":"        sb.append(year);"},{"lineNumber":162,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":163,"author":{"gitID":"AzuraAiR"},"content":"        return sb.toString();"},{"lineNumber":164,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"AzuraAiR"},"content":"}"},{"lineNumber":166,"author":{"gitID":"AzuraAiR"},"content":""}],"authorContributionMap":{"AzuraAiR":150,"-":16}},{"path":"src/test/java/seedu/address/storage/XmlSerializableAddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":"import seedu.address.testutil.TypicalAliases;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBookTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlSerializableAddressBookTest/\");"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final File TYPICAL_PERSONS_FILE \u003d new File(TEST_DATA_FOLDER + \"typicalPersonsAddressBook.xml\");"},{"lineNumber":22,"author":{"gitID":"Caijun7"},"content":"    private static final File TYPICAL_ALIASES_FILE \u003d new File(TEST_DATA_FOLDER + \"typicalAliasesAddressBook.xml\");"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonAddressBook.xml\");"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final File INVALID_TAG_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidTagAddressBook.xml\");"},{"lineNumber":25,"author":{"gitID":"Caijun7"},"content":"    private static final File INVALID_ALIAS_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidAliasAddressBook.xml\");"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void toModelType_typicalPersonsFile_success() throws Exception {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_PERSONS_FILE,"},{"lineNumber":33,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"Caijun7"},"content":"    //@@author Caijun7"},{"lineNumber":40,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"Caijun7"},"content":"    public void toModelType_typicalAliasesFile_success() throws Exception {"},{"lineNumber":42,"author":{"gitID":"Caijun7"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_ALIASES_FILE,"},{"lineNumber":43,"author":{"gitID":"Caijun7"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":44,"author":{"gitID":"Caijun7"},"content":"        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":45,"author":{"gitID":"Caijun7"},"content":"        AddressBook typicalAliasesAddressBook \u003d TypicalAliases.getTypicalAddressBook();"},{"lineNumber":46,"author":{"gitID":"Caijun7"},"content":"        assertEquals(addressBookFromFile, typicalAliasesAddressBook);"},{"lineNumber":47,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"Caijun7"},"content":"    //@@author"},{"lineNumber":49,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_PERSON_FILE,"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTagFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_TAG_FILE,"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":66,"author":{"gitID":"Caijun7"},"content":"    //@@author Caijun7"},{"lineNumber":67,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"Caijun7"},"content":"    public void toModelType_invalidAliasFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":69,"author":{"gitID":"Caijun7"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_ALIAS_FILE,"},{"lineNumber":70,"author":{"gitID":"Caijun7"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":71,"author":{"gitID":"Caijun7"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":72,"author":{"gitID":"Caijun7"},"content":"        dataFromFile.toModelType();"},{"lineNumber":73,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":75,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"Caijun7"},"content":"    public void addToAddressBook_typicalPersonsFile_success() throws Exception {"},{"lineNumber":77,"author":{"gitID":"Caijun7"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_PERSONS_FILE,"},{"lineNumber":78,"author":{"gitID":"Caijun7"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":79,"author":{"gitID":"Caijun7"},"content":"        AddressBook addressBookFromFile \u003d new AddressBook();"},{"lineNumber":80,"author":{"gitID":"Caijun7"},"content":"        dataFromFile.addToAddressBook(addressBookFromFile);"},{"lineNumber":81,"author":{"gitID":"Caijun7"},"content":"        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"},{"lineNumber":82,"author":{"gitID":"Caijun7"},"content":"        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"},{"lineNumber":83,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":85,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"Caijun7"},"content":"    public void addToAddressBook_typicalAliasesFile_success() throws Exception {"},{"lineNumber":87,"author":{"gitID":"Caijun7"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_ALIASES_FILE,"},{"lineNumber":88,"author":{"gitID":"Caijun7"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":89,"author":{"gitID":"Caijun7"},"content":"        AddressBook addressBookFromFile \u003d new AddressBook();"},{"lineNumber":90,"author":{"gitID":"Caijun7"},"content":"        dataFromFile.addToAddressBook(addressBookFromFile);"},{"lineNumber":91,"author":{"gitID":"Caijun7"},"content":"        AddressBook typicalAliasesAddressBook \u003d TypicalAliases.getTypicalAddressBook();"},{"lineNumber":92,"author":{"gitID":"Caijun7"},"content":"        assertEquals(addressBookFromFile, typicalAliasesAddressBook);"},{"lineNumber":93,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":95,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"Caijun7"},"content":"    public void addToAddressBook_invalidPersonFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":97,"author":{"gitID":"Caijun7"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_PERSON_FILE,"},{"lineNumber":98,"author":{"gitID":"Caijun7"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":99,"author":{"gitID":"Caijun7"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":100,"author":{"gitID":"Caijun7"},"content":"        dataFromFile.addToAddressBook(new AddressBook());"},{"lineNumber":101,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":103,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"Caijun7"},"content":"    public void addToAddressBook_invalidTagFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":105,"author":{"gitID":"Caijun7"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_TAG_FILE,"},{"lineNumber":106,"author":{"gitID":"Caijun7"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":107,"author":{"gitID":"Caijun7"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":108,"author":{"gitID":"Caijun7"},"content":"        dataFromFile.addToAddressBook(new AddressBook());"},{"lineNumber":109,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":111,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"Caijun7"},"content":"    public void addToAddressBook_invalidAliasFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":113,"author":{"gitID":"Caijun7"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_ALIAS_FILE,"},{"lineNumber":114,"author":{"gitID":"Caijun7"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":115,"author":{"gitID":"Caijun7"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":116,"author":{"gitID":"Caijun7"},"content":"        dataFromFile.addToAddressBook(new AddressBook());"},{"lineNumber":117,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"Caijun7"},"content":"    //@@author"},{"lineNumber":119,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Caijun7":68,"-":51}},{"path":"src/test/java/seedu/address/model/UniquePersonListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Caijun7"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":5,"author":{"gitID":"Caijun7"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class UniquePersonListTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":"    //@@author Caijun7"},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"Caijun7"},"content":"    public void importPerson_validPerson_success() throws Exception {"},{"lineNumber":22,"author":{"gitID":"Caijun7"},"content":"        UniquePersonList uniquePersonList \u003d new UniquePersonList();"},{"lineNumber":23,"author":{"gitID":"Caijun7"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":24,"author":{"gitID":"Caijun7"},"content":"        uniquePersonList.importPerson(validPerson);"},{"lineNumber":25,"author":{"gitID":"Caijun7"},"content":"        assertEquals(Arrays.asList(validPerson), uniquePersonList.asObservableList());"},{"lineNumber":26,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"Caijun7"},"content":"    //@@author"},{"lineNumber":28,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        UniquePersonList uniquePersonList \u003d new UniquePersonList();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        uniquePersonList.asObservableList().remove(0);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Caijun7":16,"-":19}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.SecurityUtil;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":30,"author":{"gitID":"Caijun7"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":31,"author":{"gitID":"Caijun7"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"Caijun7"},"content":"    private final AddressBook addressBookWithAmyAndBob \u003d new AddressBookBuilder().withPerson(AMY)"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            .withPerson(BOB).build();"},{"lineNumber":42,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        List\u003cAlias\u003e newAliases \u003d new ArrayList\u003c\u003e();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags, newAliases);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        addressBook.getPersonList().remove(0);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"content":"    //@@author Caijun7-reused"},{"lineNumber":87,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"Caijun7"},"content":"    public void updatePerson_detailsChanged_personsAndTagsListUpdated() throws Exception {"},{"lineNumber":89,"author":{"gitID":"Caijun7"},"content":"        AddressBook addressBookUpdatedToAmy \u003d new AddressBookBuilder().withPerson(BOB).build();"},{"lineNumber":90,"author":{"gitID":"Caijun7"},"content":"        addressBookUpdatedToAmy.updatePerson(BOB, AMY);"},{"lineNumber":91,"author":{"gitID":"Caijun7"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(AMY).build();"},{"lineNumber":92,"author":{"gitID":"Caijun7"},"content":"        assertEquals(expectedAddressBook, addressBookUpdatedToAmy);"},{"lineNumber":93,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":95,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"Caijun7"},"content":"    public void removeTag_tagNotInUsed_addressBookUnchanged() throws Exception {"},{"lineNumber":97,"author":{"gitID":"Caijun7"},"content":"        addressBookWithAmyAndBob.removeTag(new Tag(VALID_TAG_UNUSED));"},{"lineNumber":98,"author":{"gitID":"Caijun7"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"},{"lineNumber":99,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":100,"author":{"gitID":"Caijun7"},"content":"        assertEquals(expectedAddressBook, addressBookWithAmyAndBob);"},{"lineNumber":101,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":103,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"Caijun7"},"content":"    public void removeTag_tagUsedByMultiplePersons_tagRemoved() throws Exception {"},{"lineNumber":105,"author":{"gitID":"Caijun7"},"content":"        addressBookWithAmyAndBob.removeTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":106,"author":{"gitID":"Caijun7"},"content":"        Person amyWithoutFriendTag \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":107,"author":{"gitID":"Caijun7"},"content":"        Person bobWithoutFriendTag \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":108,"author":{"gitID":"Caijun7"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(amyWithoutFriendTag)"},{"lineNumber":109,"author":{"gitID":"Caijun7"},"content":"                .withPerson(bobWithoutFriendTag).build();"},{"lineNumber":110,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":111,"author":{"gitID":"Caijun7"},"content":"        assertEquals(expectedAddressBook, addressBookWithAmyAndBob);"},{"lineNumber":112,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":113,"content":"    //@@author"},{"lineNumber":114,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":115,"author":{"gitID":"yeggasd"},"content":"    //@@author yeggasd"},{"lineNumber":116,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"yeggasd"},"content":"    public void createdWithPassword_passwordChanged_passwordChanged() throws Exception {"},{"lineNumber":118,"author":{"gitID":"yeggasd"},"content":"        AddressBook addressBookUpdatedPassword \u003d new AddressBook(\"new\");"},{"lineNumber":119,"author":{"gitID":"yeggasd"},"content":"        Password expectedPassword \u003d new Password(\"new\");"},{"lineNumber":120,"author":{"gitID":"yeggasd"},"content":"        assertEquals(expectedPassword, addressBookUpdatedPassword.getPassword());"},{"lineNumber":121,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":123,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":124,"author":{"gitID":"yeggasd"},"content":"    public void updatePasswordWithClass_passwordChanged_passwordUpdated() throws Exception {"},{"lineNumber":125,"author":{"gitID":"yeggasd"},"content":"        AddressBook addressBookUpdatedPassword \u003d new AddressBookBuilder().withPerson(BOB).withPassword(\"test\").build();"},{"lineNumber":126,"author":{"gitID":"yeggasd"},"content":"        addressBookUpdatedPassword.updatePassword(new Password(\"new\"));"},{"lineNumber":127,"author":{"gitID":"yeggasd"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(BOB).withPassword(\"new\").build();"},{"lineNumber":128,"author":{"gitID":"yeggasd"},"content":"        assertEquals(expectedAddressBook, addressBookUpdatedPassword);"},{"lineNumber":129,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":131,"author":{"gitID":"yeggasd"},"content":"    @Test"},{"lineNumber":132,"author":{"gitID":"yeggasd"},"content":"    public void updatePasswordWithBytes_passwordChanged_passwordUpdated() throws Exception {"},{"lineNumber":133,"author":{"gitID":"yeggasd"},"content":"        AddressBook addressBookUpdatedPassword \u003d new AddressBookBuilder().withPerson(BOB).withPassword(\"test\").build();"},{"lineNumber":134,"author":{"gitID":"yeggasd"},"content":"        addressBookUpdatedPassword.updatePassword(SecurityUtil.hashPassword(\"new\"));"},{"lineNumber":135,"author":{"gitID":"yeggasd"},"content":"        addressBookUpdatedPassword.updatePassword(SecurityUtil.hashPassword(\"new\"));"},{"lineNumber":136,"author":{"gitID":"yeggasd"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(BOB).withPassword(\"new\").build();"},{"lineNumber":137,"author":{"gitID":"yeggasd"},"content":"        assertEquals(expectedAddressBook, addressBookUpdatedPassword);"},{"lineNumber":138,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"yeggasd"},"content":"    //@@author"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons and tags lists can violate interface constraints."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":147,"author":{"gitID":"jingyinno"},"content":"        //@@author jingyinno"},{"lineNumber":148,"author":{"gitID":"jingyinno"},"content":"        private final ObservableList\u003cAlias\u003e aliases \u003d FXCollections.observableArrayList();"},{"lineNumber":149,"author":{"gitID":"jingyinno"},"content":"        //@@author"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        private final Password password \u003d new Password(\"test\");"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003c? extends Tag\u003e tags, Collection\u003cAlias\u003e aliases) {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            this.aliases.setAll(aliases);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            return persons;"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"jingyinno"},"content":"        //@@author jingyinno"},{"lineNumber":169,"author":{"gitID":"jingyinno"},"content":"        @Override"},{"lineNumber":170,"author":{"gitID":"jingyinno"},"content":"        public ObservableList\u003cAlias\u003e getAliasList() {"},{"lineNumber":171,"author":{"gitID":"jingyinno"},"content":"            return aliases;"},{"lineNumber":172,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":174,"author":{"gitID":"jingyinno"},"content":"        @Override"},{"lineNumber":175,"author":{"gitID":"jingyinno"},"content":"        public HashMap\u003cString, String\u003e getAliasMapping() {"},{"lineNumber":176,"author":{"gitID":"jingyinno"},"content":"            return new HashMap\u003c\u003e();"},{"lineNumber":177,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":179,"author":{"gitID":"jingyinno"},"content":"        @Override"},{"lineNumber":180,"author":{"gitID":"jingyinno"},"content":"        public ArrayList\u003cArrayList\u003cString\u003e\u003e getUiFormattedAliasList() {"},{"lineNumber":181,"author":{"gitID":"jingyinno"},"content":"            return null;"},{"lineNumber":182,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":184,"author":{"gitID":"jingyinno"},"content":"        @Override"},{"lineNumber":185,"author":{"gitID":"jingyinno"},"content":"        public void resetAliasList() {"},{"lineNumber":186,"author":{"gitID":"jingyinno"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":187,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"jingyinno"},"content":"        //@@author"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"yeggasd"},"content":"        //@@author yeggasd"},{"lineNumber":191,"author":{"gitID":"yeggasd"},"content":"        @Override"},{"lineNumber":192,"author":{"gitID":"yeggasd"},"content":"        public Password getPassword() {"},{"lineNumber":193,"author":{"gitID":"yeggasd"},"content":"            return password;"},{"lineNumber":194,"author":{"gitID":"yeggasd"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"yeggasd"},"content":"        //@@author"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":2,"yeggasd":31,"Caijun7":36,"jingyinno":24,"-":105}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Caijun7"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":22,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":25,"author":{"gitID":"Caijun7"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        modelManager.getFilteredPersonList().remove(0);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"content":"    //@@author Caijun7-reused"},{"lineNumber":39,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"Caijun7"},"content":"    public void removeTag_tagNotInUsed_addressBookUnchanged() throws Exception {"},{"lineNumber":41,"author":{"gitID":"Caijun7"},"content":"        AddressBook addressBookWithAmyAndBob \u003d new AddressBookBuilder().withPerson(AMY)"},{"lineNumber":42,"author":{"gitID":"Caijun7"},"content":"                .withPerson(BOB).build();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":44,"author":{"gitID":"Caijun7"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBookWithAmyAndBob, userPrefs);"},{"lineNumber":45,"author":{"gitID":"Caijun7"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBookWithAmyAndBob, userPrefs);"},{"lineNumber":46,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":47,"author":{"gitID":"Caijun7"},"content":"        modelManager.deleteTag(new Tag(VALID_TAG_UNUSED));"},{"lineNumber":48,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":49,"author":{"gitID":"Caijun7"},"content":"        assertEquals(modelManagerCopy, modelManager);"},{"lineNumber":50,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":52,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"Caijun7"},"content":"    public void removeTag_tagUsedByMultiplePersons_tagRemoved() throws Exception {"},{"lineNumber":54,"author":{"gitID":"Caijun7"},"content":"        AddressBook addressBookWithAmyAndBob \u003d new AddressBookBuilder().withPerson(AMY)"},{"lineNumber":55,"author":{"gitID":"Caijun7"},"content":"                .withPerson(BOB).build();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":57,"author":{"gitID":"Caijun7"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBookWithAmyAndBob, userPrefs);"},{"lineNumber":58,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":59,"author":{"gitID":"Caijun7"},"content":"        modelManager.deleteTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":60,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":61,"author":{"gitID":"Caijun7"},"content":"        Person amyWithoutFriendTag \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":62,"author":{"gitID":"Caijun7"},"content":"        Person bobWithoutFriendTag \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":63,"author":{"gitID":"Caijun7"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(amyWithoutFriendTag)"},{"lineNumber":64,"author":{"gitID":"Caijun7"},"content":"                .withPerson(bobWithoutFriendTag).build();"},{"lineNumber":65,"author":{"gitID":"Caijun7"},"content":"        ModelManager expectedModelManager \u003d new ModelManager(expectedAddressBook, userPrefs);"},{"lineNumber":66,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":67,"author":{"gitID":"Caijun7"},"content":"        assertEquals(expectedModelManager, modelManager);"},{"lineNumber":68,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":69,"content":"    //@@author"},{"lineNumber":70,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // different userPrefs -\u003e returns true"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        differentUserPrefs.setAddressBookName(\"differentName\");"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":2,"Caijun7":38,"-":67}},{"path":"src/test/java/seedu/address/model/UniqueTagListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Caijun7"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":5,"author":{"gitID":"Caijun7"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class UniqueTagListTest {"},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":"    private static final Tag VALID_TAG \u003d new Tag(\"friends\");"},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":"    //@@author Caijun7"},{"lineNumber":21,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"Caijun7"},"content":"    public void importTag_validTag_success() throws Exception {"},{"lineNumber":23,"author":{"gitID":"Caijun7"},"content":"        UniqueTagList uniqueTagList \u003d new UniqueTagList();"},{"lineNumber":24,"author":{"gitID":"Caijun7"},"content":"        uniqueTagList.importTag(VALID_TAG);"},{"lineNumber":25,"author":{"gitID":"Caijun7"},"content":"        assertEquals(Arrays.asList(VALID_TAG), uniqueTagList.asObservableList());"},{"lineNumber":26,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"Caijun7"},"content":"    //@@author"},{"lineNumber":28,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        UniqueTagList uniqueTagList \u003d new UniqueTagList();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        uniqueTagList.asObservableList().remove(0);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Caijun7":16,"-":19}},{"path":"src/test/java/seedu/address/logic/commands/UploadCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Caijun7"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":3,"author":{"gitID":"Caijun7"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":"import org.junit.AfterClass;"},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":"import org.junit.BeforeClass;"},{"lineNumber":12,"author":{"gitID":"Caijun7"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Password;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"Caijun7"},"content":"import seedu.address.storage.GoogleDriveStorage;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":26,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":27,"author":{"gitID":"Caijun7"},"content":"//@@author Caijun7"},{"lineNumber":28,"author":{"gitID":"Caijun7"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":" * Contains integration tests (interaction with the Model) and unit tests for {@code UploadCommand}."},{"lineNumber":30,"author":{"gitID":"Caijun7"},"content":" */"},{"lineNumber":31,"author":{"gitID":"Caijun7"},"content":"public class UploadCommandTest {"},{"lineNumber":32,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":33,"author":{"gitID":"Caijun7"},"content":"    private static final String TEST_DATA_FILE \u003d FileUtil.getPath(\"src/test/data/sandbox/temp.xml\");"},{"lineNumber":34,"author":{"gitID":"Caijun7"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/UploadCommandTest/\");"},{"lineNumber":35,"author":{"gitID":"Caijun7"},"content":"    private static final String TEST_DATA_FILE_ALICE \u003d TEST_DATA_FOLDER + \"aliceAddressBook.xml\";"},{"lineNumber":36,"author":{"gitID":"Caijun7"},"content":"    private static final String TEST_DATA_FILE_ALICE_BENSON \u003d TEST_DATA_FOLDER + \"aliceBensonAddressBook.xml\";"},{"lineNumber":37,"author":{"gitID":"Caijun7"},"content":"    private static final String TEST_PASSWORD \u003d \"test\";"},{"lineNumber":38,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":39,"author":{"gitID":"Caijun7"},"content":"    @Rule"},{"lineNumber":40,"author":{"gitID":"Caijun7"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":41,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":42,"author":{"gitID":"Caijun7"},"content":"    private final AddressBook addressBookWithAliceAndBenson \u003d new AddressBookBuilder().withPerson(ALICE)"},{"lineNumber":43,"author":{"gitID":"Caijun7"},"content":"            .withPerson(BENSON).build();"},{"lineNumber":44,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":45,"author":{"gitID":"Caijun7"},"content":"    private Model model \u003d new ModelManager(new AddressBook(), new UserPrefs());"},{"lineNumber":46,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":47,"author":{"gitID":"Caijun7"},"content":"    private final UploadCommand standardCommand \u003d prepareCommand(TEST_DATA_FILE_ALICE_BENSON, model);"},{"lineNumber":48,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":49,"author":{"gitID":"Caijun7"},"content":"    @BeforeClass"},{"lineNumber":50,"author":{"gitID":"Caijun7"},"content":"    public static void setTestEnvironment() {"},{"lineNumber":51,"author":{"gitID":"Caijun7"},"content":"        GoogleDriveStorage.setTestEnvironment();"},{"lineNumber":52,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":54,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"Caijun7"},"content":"    public void execute_emptyAddressBookUploadIntoValidFilepathUnencrypted_success() throws Exception {"},{"lineNumber":56,"author":{"gitID":"Caijun7"},"content":"        String filepath \u003d TEST_DATA_FILE;"},{"lineNumber":57,"author":{"gitID":"Caijun7"},"content":"        UploadCommand uploadCommand \u003d prepareCommand(filepath, model, null);"},{"lineNumber":58,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":59,"author":{"gitID":"Caijun7"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":60,"author":{"gitID":"Caijun7"},"content":"        expectedModel.uploadAddressBook(filepath, null);"},{"lineNumber":61,"author":{"gitID":"Caijun7"},"content":"        assertCommandSuccess(uploadCommand, model, UploadCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":62,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":64,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"Caijun7"},"content":"    public void execute_nonEmptyAddressBookUploadIntoValidFilepathUnencrypted_success() throws Exception {"},{"lineNumber":66,"author":{"gitID":"Caijun7"},"content":"        String filepath \u003d TEST_DATA_FILE;"},{"lineNumber":67,"author":{"gitID":"Caijun7"},"content":"        ModelManager model \u003d new ModelManager(addressBookWithAliceAndBenson, new UserPrefs());"},{"lineNumber":68,"author":{"gitID":"Caijun7"},"content":"        UploadCommand uploadCommand \u003d prepareCommand(filepath, model, null);"},{"lineNumber":69,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":70,"author":{"gitID":"Caijun7"},"content":"        ModelManager expectedModel \u003d new ModelManager(addressBookWithAliceAndBenson, new UserPrefs());"},{"lineNumber":71,"author":{"gitID":"Caijun7"},"content":"        expectedModel.uploadAddressBook(filepath, null);"},{"lineNumber":72,"author":{"gitID":"Caijun7"},"content":"        assertCommandSuccess(uploadCommand, model, UploadCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":73,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":75,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"Caijun7"},"content":"    public void execute_emptyAddressBookUploadIntoValidFilepathEncrypted_success() throws Exception {"},{"lineNumber":77,"author":{"gitID":"Caijun7"},"content":"        String filepath \u003d TEST_DATA_FILE;"},{"lineNumber":78,"author":{"gitID":"Caijun7"},"content":"        UploadCommand uploadCommand \u003d prepareCommand(filepath, model, TEST_PASSWORD);"},{"lineNumber":79,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":80,"author":{"gitID":"Caijun7"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":81,"author":{"gitID":"Caijun7"},"content":"        expectedModel.uploadAddressBook(filepath, new Password(TEST_PASSWORD));"},{"lineNumber":82,"author":{"gitID":"Caijun7"},"content":"        assertCommandSuccess(uploadCommand, model, UploadCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":83,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":85,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"Caijun7"},"content":"    public void execute_nonEmptyAddressBookUploadIntoValidFilepathEncrypted_success() throws Exception {"},{"lineNumber":87,"author":{"gitID":"Caijun7"},"content":"        String filepath \u003d TEST_DATA_FILE;"},{"lineNumber":88,"author":{"gitID":"Caijun7"},"content":"        ModelManager model \u003d new ModelManager(addressBookWithAliceAndBenson, new UserPrefs());"},{"lineNumber":89,"author":{"gitID":"Caijun7"},"content":"        UploadCommand uploadCommand \u003d prepareCommand(filepath, model, TEST_PASSWORD);"},{"lineNumber":90,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":91,"author":{"gitID":"Caijun7"},"content":"        ModelManager expectedModel \u003d new ModelManager(addressBookWithAliceAndBenson, new UserPrefs());"},{"lineNumber":92,"author":{"gitID":"Caijun7"},"content":"        expectedModel.uploadAddressBook(filepath, new Password(TEST_PASSWORD));"},{"lineNumber":93,"author":{"gitID":"Caijun7"},"content":"        assertCommandSuccess(uploadCommand, model, UploadCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":94,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":96,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"Caijun7"},"content":"    public void execute_addressBookUploadIntoInvalidFilepath_throwsCommandException() throws Exception {"},{"lineNumber":98,"author":{"gitID":"Caijun7"},"content":"        String invalidFilepath \u003d \"\";"},{"lineNumber":99,"author":{"gitID":"Caijun7"},"content":"        UploadCommand uploadCommand \u003d prepareCommand(invalidFilepath, model, null);"},{"lineNumber":100,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":101,"author":{"gitID":"Caijun7"},"content":"        assertCommandFailure(uploadCommand, model, UploadCommand.MESSAGE_FILE_UNABLE_TO_SAVE);"},{"lineNumber":102,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":104,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"Caijun7"},"content":"    public void execute_addressBookUploadNoUserResponse_throwsCommandException() throws Exception {"},{"lineNumber":106,"author":{"gitID":"Caijun7"},"content":"        String filepath \u003d TEST_DATA_FILE;"},{"lineNumber":107,"author":{"gitID":"Caijun7"},"content":"        ModelManager model \u003d new ModelManager(addressBookWithAliceAndBenson, new UserPrefs());"},{"lineNumber":108,"author":{"gitID":"Caijun7"},"content":"        UploadCommand uploadCommand \u003d prepareCommand(filepath, model, TEST_PASSWORD);"},{"lineNumber":109,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":110,"author":{"gitID":"Caijun7"},"content":"        GoogleDriveStorage.resetTestEnvironment();"},{"lineNumber":111,"author":{"gitID":"Caijun7"},"content":"        assertCommandFailure(uploadCommand, model, UploadCommand.MESSAGE_REQUEST_TIMEOUT);"},{"lineNumber":112,"author":{"gitID":"Caijun7"},"content":"        GoogleDriveStorage.setTestEnvironment();"},{"lineNumber":113,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":115,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"Caijun7"},"content":"    public void equals_sameValues_true() {"},{"lineNumber":117,"author":{"gitID":"Caijun7"},"content":"        UploadCommand commandWithSameValues \u003d prepareCommand(TEST_DATA_FILE_ALICE_BENSON, model);"},{"lineNumber":118,"author":{"gitID":"Caijun7"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":119,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":121,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":122,"author":{"gitID":"Caijun7"},"content":"    public void equals_sameObject_true() {"},{"lineNumber":123,"author":{"gitID":"Caijun7"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":124,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":126,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":127,"author":{"gitID":"Caijun7"},"content":"    public void equals_sameType_true() {"},{"lineNumber":128,"author":{"gitID":"Caijun7"},"content":"        assertTrue(standardCommand.equals(new UploadCommand(TEST_DATA_FILE_ALICE_BENSON, TEST_PASSWORD)));"},{"lineNumber":129,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":131,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":132,"author":{"gitID":"Caijun7"},"content":"    public void equals_nullInstance_false() {"},{"lineNumber":133,"author":{"gitID":"Caijun7"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":134,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":136,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":137,"author":{"gitID":"Caijun7"},"content":"    public void equals_differentTypes_false() {"},{"lineNumber":138,"author":{"gitID":"Caijun7"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":139,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":141,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":142,"author":{"gitID":"Caijun7"},"content":"    public void equals_differentAddressBook_false() {"},{"lineNumber":143,"author":{"gitID":"Caijun7"},"content":"        assertFalse(standardCommand.equals(prepareCommand(TEST_DATA_FILE_ALICE, model)));"},{"lineNumber":144,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":146,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"Caijun7"},"content":"     * Returns a {@code UploadCommand} with the parameter {@code filepath} with password as TEST_PASSWORD."},{"lineNumber":148,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"Caijun7"},"content":"    private UploadCommand prepareCommand(String filepath, Model model) {"},{"lineNumber":150,"author":{"gitID":"Caijun7"},"content":"        return prepareCommand(filepath, model, TEST_PASSWORD);"},{"lineNumber":151,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":153,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":154,"author":{"gitID":"Caijun7"},"content":"     * Returns a {@code UploadCommand} with the parameter {@code filepath} and {@code password}."},{"lineNumber":155,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"Caijun7"},"content":"    private UploadCommand prepareCommand(String filepath, Model model, String password) {"},{"lineNumber":157,"author":{"gitID":"Caijun7"},"content":"        UploadCommand uploadCommand;"},{"lineNumber":158,"author":{"gitID":"Caijun7"},"content":"        if (password \u003d\u003d null) {"},{"lineNumber":159,"author":{"gitID":"Caijun7"},"content":"            uploadCommand \u003d new UploadCommand(filepath);"},{"lineNumber":160,"author":{"gitID":"Caijun7"},"content":"        } else {"},{"lineNumber":161,"author":{"gitID":"Caijun7"},"content":"            uploadCommand \u003d new UploadCommand(filepath, password);"},{"lineNumber":162,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"Caijun7"},"content":"        uploadCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":164,"author":{"gitID":"Caijun7"},"content":"        return uploadCommand;"},{"lineNumber":165,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":167,"author":{"gitID":"Caijun7"},"content":"    @AfterClass"},{"lineNumber":168,"author":{"gitID":"Caijun7"},"content":"    public static void resetTestEnvironment() {"},{"lineNumber":169,"author":{"gitID":"Caijun7"},"content":"        GoogleDriveStorage.resetTestEnvironment();"},{"lineNumber":170,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":157,"-":14}},{"path":"src/test/java/seedu/address/model/building/RoomTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Caijun7"},"content":"package seedu.address.model.building;"},{"lineNumber":2,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.exceptions.CorruptedVenueInformationException;"},{"lineNumber":14,"author":{"gitID":"Caijun7"},"content":"import seedu.address.testutil.RoomBuilder;"},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":"import seedu.address.testutil.WeekBuilder;"},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":17,"author":{"gitID":"Caijun7"},"content":"//@@author Caijun7"},{"lineNumber":18,"author":{"gitID":"Caijun7"},"content":"public class RoomTest {"},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":"    private Room room \u003d new Room(\"COM2-0108\");"},{"lineNumber":21,"author":{"gitID":"Caijun7"},"content":"    private final Room validRoom \u003d new RoomBuilder().build();"},{"lineNumber":22,"author":{"gitID":"Caijun7"},"content":"    private final Room standardRoom \u003d new RoomBuilder().withRoomName(\"COM2-0108\").build();"},{"lineNumber":23,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":24,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"Caijun7"},"content":"    public void retrieveWeekDaySchedule_nullNusVenues_throwsCorruptedVenueInformationException() {"},{"lineNumber":26,"author":{"gitID":"Caijun7"},"content":"        Room.setNusVenues(null);"},{"lineNumber":27,"author":{"gitID":"Caijun7"},"content":"        assertThrows(CorruptedVenueInformationException.class, () -\u003e room.retrieveWeekDaySchedule());"},{"lineNumber":28,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":30,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"Caijun7"},"content":"    public void retrieveWeekDaySchedule_nonNullInvalidNusVenues_throwsCorruptedVenueInformationException() {"},{"lineNumber":32,"author":{"gitID":"Caijun7"},"content":"        HashMap\u003cString, Week\u003e invalidNusVenues \u003d new HashMap\u003c\u003e();"},{"lineNumber":33,"author":{"gitID":"Caijun7"},"content":"        invalidNusVenues.put(\"COM2-0108\", null);"},{"lineNumber":34,"author":{"gitID":"Caijun7"},"content":"        Room.setNusVenues(invalidNusVenues);"},{"lineNumber":35,"author":{"gitID":"Caijun7"},"content":"        assertThrows(CorruptedVenueInformationException.class, () -\u003e room.retrieveWeekDaySchedule());"},{"lineNumber":36,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":38,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"Caijun7"},"content":"    public void retrieveWeekDaySchedule_validNusVenues_success() throws Exception {"},{"lineNumber":40,"author":{"gitID":"Caijun7"},"content":"        ArrayList\u003cString\u003e expectedList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":41,"author":{"gitID":"Caijun7"},"content":"        expectedList.add(room.getRoomName());"},{"lineNumber":42,"author":{"gitID":"Caijun7"},"content":"        for (int i \u003d 0; i \u003c WeekDay.NUMBER_OF_CLASSES; i++) {"},{"lineNumber":43,"author":{"gitID":"Caijun7"},"content":"            expectedList.add(\"vacant\");"},{"lineNumber":44,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"Caijun7"},"content":"        assertEquals(expectedList, validRoom.retrieveWeekDaySchedule());"},{"lineNumber":46,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":48,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"Caijun7"},"content":"    public void initializeWeek_nullNusVenues_throwsCorruptedVenueInformationException() {"},{"lineNumber":50,"author":{"gitID":"Caijun7"},"content":"        Room.setNusVenues(null);"},{"lineNumber":51,"author":{"gitID":"Caijun7"},"content":"        assertThrows(CorruptedVenueInformationException.class, () -\u003e room.initializeWeek());"},{"lineNumber":52,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":54,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"Caijun7"},"content":"    public void initializeWeek_nonNullInvalidNusVenues_throwsCorruptedVenueInformationException() {"},{"lineNumber":56,"author":{"gitID":"Caijun7"},"content":"        HashMap\u003cString, Week\u003e invalidNusVenues \u003d new HashMap\u003c\u003e();"},{"lineNumber":57,"author":{"gitID":"Caijun7"},"content":"        invalidNusVenues.put(\"COM2-0108\", null);"},{"lineNumber":58,"author":{"gitID":"Caijun7"},"content":"        Room.setNusVenues(invalidNusVenues);"},{"lineNumber":59,"author":{"gitID":"Caijun7"},"content":"        assertThrows(CorruptedVenueInformationException.class, () -\u003e room.initializeWeek());"},{"lineNumber":60,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":62,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"Caijun7"},"content":"    public void initializeWeek_validNusVenues_success() throws Exception {"},{"lineNumber":64,"author":{"gitID":"Caijun7"},"content":"        validRoom.initializeWeek();"},{"lineNumber":65,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":66,"author":{"gitID":"Caijun7"},"content":"        Week expectedWeek \u003d new WeekBuilder().build();"},{"lineNumber":67,"author":{"gitID":"Caijun7"},"content":"        assertEquals(expectedWeek, validRoom.getWeek());"},{"lineNumber":68,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":70,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"Caijun7"},"content":"    public void equals_sameValues_true() {"},{"lineNumber":72,"author":{"gitID":"Caijun7"},"content":"        Room roomWithSameValues \u003d new RoomBuilder(standardRoom).build();"},{"lineNumber":73,"author":{"gitID":"Caijun7"},"content":"        assertTrue(standardRoom.equals(roomWithSameValues));"},{"lineNumber":74,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":76,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"Caijun7"},"content":"    public void equals_sameObject_true() {"},{"lineNumber":78,"author":{"gitID":"Caijun7"},"content":"        assertTrue(standardRoom.equals(standardRoom));"},{"lineNumber":79,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":81,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"Caijun7"},"content":"    public void equals_sameType_true() {"},{"lineNumber":83,"author":{"gitID":"Caijun7"},"content":"        Room room \u003d new Room(\"COM2-0108\");"},{"lineNumber":84,"author":{"gitID":"Caijun7"},"content":"        Room sameTypeRoom \u003d new Room(\"COM2-0108\");"},{"lineNumber":85,"author":{"gitID":"Caijun7"},"content":"        assertTrue(room.equals(sameTypeRoom));"},{"lineNumber":86,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":88,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"Caijun7"},"content":"    public void equals_nullInstance_false() {"},{"lineNumber":90,"author":{"gitID":"Caijun7"},"content":"        assertFalse(standardRoom.equals(null));"},{"lineNumber":91,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":93,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"Caijun7"},"content":"    public void equals_differentTypes_false() {"},{"lineNumber":95,"author":{"gitID":"Caijun7"},"content":"        assertFalse(standardRoom.equals(new Week()));"},{"lineNumber":96,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":98,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":93,"-":5}},{"path":"src/test/java/seedu/address/model/building/WeekDayTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Caijun7"},"content":"package seedu.address.model.building;"},{"lineNumber":2,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.exceptions.CorruptedVenueInformationException;"},{"lineNumber":14,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.exceptions.InvalidWeekDayScheduleException;"},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":"import seedu.address.testutil.WeekDayBuilder;"},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":17,"author":{"gitID":"Caijun7"},"content":"//@@author Caijun7"},{"lineNumber":18,"author":{"gitID":"Caijun7"},"content":"public class WeekDayTest {"},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":"    private WeekDay weekDay \u003d new WeekDay();"},{"lineNumber":21,"author":{"gitID":"Caijun7"},"content":"    private final WeekDay validWeekDay \u003d new WeekDayBuilder().build();"},{"lineNumber":22,"author":{"gitID":"Caijun7"},"content":"    private final WeekDay standardWeekDay \u003d"},{"lineNumber":23,"author":{"gitID":"Caijun7"},"content":"            new WeekDayBuilder().withWeekDay(\"Monday\").withRoomName(\"COM2-0108\").build();"},{"lineNumber":24,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":25,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"Caijun7"},"content":"    public void retrieveWeekDaySchedule_nullWeekDaySchedule_throwsCorruptedVenueInformationException() {"},{"lineNumber":27,"author":{"gitID":"Caijun7"},"content":"        weekDay.setWeekDaySchedule(null);"},{"lineNumber":28,"author":{"gitID":"Caijun7"},"content":"        assertThrows(CorruptedVenueInformationException.class, () -\u003e weekDay.retrieveWeekDaySchedule());"},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":31,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"Caijun7"},"content":"    public void retrieveWeekDaySchedule_invalidWeekDayScheduleFormat_throwsCorruptedVenueInformationException() {"},{"lineNumber":33,"author":{"gitID":"Caijun7"},"content":"        HashMap\u003cString, String\u003e invalidWeekDaySchedule \u003d new HashMap\u003c\u003e();"},{"lineNumber":34,"author":{"gitID":"Caijun7"},"content":"        invalidWeekDaySchedule.put(\"800\", \"vacant\");"},{"lineNumber":35,"author":{"gitID":"Caijun7"},"content":"        weekDay.setWeekDaySchedule(invalidWeekDaySchedule);"},{"lineNumber":36,"author":{"gitID":"Caijun7"},"content":"        assertThrows(CorruptedVenueInformationException.class, () -\u003e weekDay.retrieveWeekDaySchedule());"},{"lineNumber":37,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":39,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"Caijun7"},"content":"    public void retrieveWeekDaySchedule_invalidWeekDayScheduleData_throwsCorruptedVenueInformationException() {"},{"lineNumber":41,"author":{"gitID":"Caijun7"},"content":"        HashMap\u003cString, String\u003e invalidWeekDaySchedule \u003d createInvalidWeekDaySchedule();"},{"lineNumber":42,"author":{"gitID":"Caijun7"},"content":"        weekDay.setWeekDaySchedule(invalidWeekDaySchedule);"},{"lineNumber":43,"author":{"gitID":"Caijun7"},"content":"        assertThrows(CorruptedVenueInformationException.class, () -\u003e weekDay.retrieveWeekDaySchedule());"},{"lineNumber":44,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":46,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"Caijun7"},"content":"    public void retrieveWeekDaySchedule_validWeekDaySchedule_success() throws Exception {"},{"lineNumber":48,"author":{"gitID":"Caijun7"},"content":"        HashMap\u003cString, String\u003e validWeekDaySchedule \u003d validWeekDay.getWeekDaySchedule();"},{"lineNumber":49,"author":{"gitID":"Caijun7"},"content":"        weekDay.setWeekDaySchedule(validWeekDaySchedule);"},{"lineNumber":50,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":51,"author":{"gitID":"Caijun7"},"content":"        ArrayList\u003cString\u003e expectedList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":52,"author":{"gitID":"Caijun7"},"content":"        for (int i \u003d 0; i \u003c WeekDay.NUMBER_OF_CLASSES; i++) {"},{"lineNumber":53,"author":{"gitID":"Caijun7"},"content":"            expectedList.add(\"vacant\");"},{"lineNumber":54,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"Caijun7"},"content":"        assertEquals(expectedList, weekDay.retrieveWeekDaySchedule());"},{"lineNumber":56,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":58,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"Caijun7"},"content":"    public void isValidWeekDaySchedule_nullWeekDaySchedule_throwsInvalidWeekDayScheduleException() {"},{"lineNumber":60,"author":{"gitID":"Caijun7"},"content":"        weekDay.setWeekDaySchedule(null);"},{"lineNumber":61,"author":{"gitID":"Caijun7"},"content":"        assertThrows(InvalidWeekDayScheduleException.class, () -\u003e weekDay.isValidWeekDaySchedule());"},{"lineNumber":62,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":64,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"Caijun7"},"content":"    public void isValidWeekDaySchedule_invalidWeekDayScheduleFormat_throwsInvalidWeekDayScheduleException() {"},{"lineNumber":66,"author":{"gitID":"Caijun7"},"content":"        HashMap\u003cString, String\u003e invalidWeekDaySchedule \u003d new HashMap\u003c\u003e();"},{"lineNumber":67,"author":{"gitID":"Caijun7"},"content":"        invalidWeekDaySchedule.put(\"800\", \"vacant\");"},{"lineNumber":68,"author":{"gitID":"Caijun7"},"content":"        weekDay.setWeekDaySchedule(invalidWeekDaySchedule);"},{"lineNumber":69,"author":{"gitID":"Caijun7"},"content":"        assertThrows(InvalidWeekDayScheduleException.class, () -\u003e weekDay.isValidWeekDaySchedule());"},{"lineNumber":70,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":72,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"Caijun7"},"content":"    public void isValidWeekDaySchedule_invalidWeekDayScheduleData_throwsInvalidWeekDayScheduleException() {"},{"lineNumber":74,"author":{"gitID":"Caijun7"},"content":"        HashMap\u003cString, String\u003e invalidWeekDaySchedule \u003d createInvalidWeekDaySchedule();"},{"lineNumber":75,"author":{"gitID":"Caijun7"},"content":"        weekDay.setWeekDaySchedule(invalidWeekDaySchedule);"},{"lineNumber":76,"author":{"gitID":"Caijun7"},"content":"        assertThrows(InvalidWeekDayScheduleException.class, () -\u003e weekDay.isValidWeekDaySchedule());"},{"lineNumber":77,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":79,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"Caijun7"},"content":"    public void isValidWeekDaySchedule_validWeekDaySchedule_success() throws Exception {"},{"lineNumber":81,"author":{"gitID":"Caijun7"},"content":"        HashMap\u003cString, String\u003e validWeekDaySchedule \u003d validWeekDay.getWeekDaySchedule();"},{"lineNumber":82,"author":{"gitID":"Caijun7"},"content":"        weekDay.setWeekDaySchedule(validWeekDaySchedule);"},{"lineNumber":83,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":84,"author":{"gitID":"Caijun7"},"content":"        assertTrue(weekDay.isValidWeekDaySchedule());"},{"lineNumber":85,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":87,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"Caijun7"},"content":"    public void equals_sameValues_true() {"},{"lineNumber":89,"author":{"gitID":"Caijun7"},"content":"        WeekDay weekDayWithSameValues \u003d new WeekDayBuilder().build();"},{"lineNumber":90,"author":{"gitID":"Caijun7"},"content":"        assertTrue(standardWeekDay.equals(weekDayWithSameValues));"},{"lineNumber":91,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":93,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"Caijun7"},"content":"    public void equals_sameObject_true() {"},{"lineNumber":95,"author":{"gitID":"Caijun7"},"content":"        assertTrue(standardWeekDay.equals(standardWeekDay));"},{"lineNumber":96,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":98,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"Caijun7"},"content":"    public void equals_sameType_true() {"},{"lineNumber":100,"author":{"gitID":"Caijun7"},"content":"        WeekDay weekDay \u003d new WeekDay();"},{"lineNumber":101,"author":{"gitID":"Caijun7"},"content":"        HashMap\u003cString, String\u003e testWeekDaySchedule \u003d new HashMap\u003c\u003e();"},{"lineNumber":102,"author":{"gitID":"Caijun7"},"content":"        weekDay.setWeekDaySchedule(testWeekDaySchedule);"},{"lineNumber":103,"author":{"gitID":"Caijun7"},"content":"        WeekDay sameTypeWeekDay \u003d new WeekDay();"},{"lineNumber":104,"author":{"gitID":"Caijun7"},"content":"        sameTypeWeekDay.setWeekDaySchedule(testWeekDaySchedule);"},{"lineNumber":105,"author":{"gitID":"Caijun7"},"content":"        assertTrue(weekDay.equals(sameTypeWeekDay));"},{"lineNumber":106,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":108,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"Caijun7"},"content":"    public void equals_nullInstance_false() {"},{"lineNumber":110,"author":{"gitID":"Caijun7"},"content":"        assertFalse(standardWeekDay.equals(null));"},{"lineNumber":111,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":113,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"Caijun7"},"content":"    public void equals_differentTypes_false() {"},{"lineNumber":115,"author":{"gitID":"Caijun7"},"content":"        assertFalse(standardWeekDay.equals(new Week()));"},{"lineNumber":116,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":118,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"Caijun7"},"content":"     * Creates an invalid {@code weekDaySchedule} HashMap with one incorrect data"},{"lineNumber":120,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"Caijun7"},"content":"    private HashMap\u003cString, String\u003e createInvalidWeekDaySchedule() {"},{"lineNumber":122,"author":{"gitID":"Caijun7"},"content":"        HashMap\u003cString, String\u003e invalidWeekDaySchedule \u003d new HashMap\u003c\u003e();"},{"lineNumber":123,"author":{"gitID":"Caijun7"},"content":"        invalidWeekDaySchedule.put(\"0800\", \"vacant\");"},{"lineNumber":124,"author":{"gitID":"Caijun7"},"content":"        invalidWeekDaySchedule.put(\"0900\", \"vacant\");"},{"lineNumber":125,"author":{"gitID":"Caijun7"},"content":"        invalidWeekDaySchedule.put(\"1000\", \"vacant\");"},{"lineNumber":126,"author":{"gitID":"Caijun7"},"content":"        invalidWeekDaySchedule.put(\"1100\", \"vacant\");"},{"lineNumber":127,"author":{"gitID":"Caijun7"},"content":"        invalidWeekDaySchedule.put(\"1200\", \"vacant\");"},{"lineNumber":128,"author":{"gitID":"Caijun7"},"content":"        invalidWeekDaySchedule.put(\"1300\", \"vacant\");"},{"lineNumber":129,"author":{"gitID":"Caijun7"},"content":"        invalidWeekDaySchedule.put(\"1400\", \"vacant\");"},{"lineNumber":130,"author":{"gitID":"Caijun7"},"content":"        invalidWeekDaySchedule.put(\"1500\", \"vacant\");"},{"lineNumber":131,"author":{"gitID":"Caijun7"},"content":"        invalidWeekDaySchedule.put(\"1600\", \"vacant\");"},{"lineNumber":132,"author":{"gitID":"Caijun7"},"content":"        invalidWeekDaySchedule.put(\"1700\", \"vacant\");"},{"lineNumber":133,"author":{"gitID":"Caijun7"},"content":"        invalidWeekDaySchedule.put(\"1800\", \"vacant\");"},{"lineNumber":134,"author":{"gitID":"Caijun7"},"content":"        invalidWeekDaySchedule.put(\"1900\", \"vacant\");"},{"lineNumber":135,"author":{"gitID":"Caijun7"},"content":"        invalidWeekDaySchedule.put(\"2000\", \"vacan\");"},{"lineNumber":136,"author":{"gitID":"Caijun7"},"content":"        return invalidWeekDaySchedule;"},{"lineNumber":137,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":139,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":134,"-":5}},{"path":"src/test/java/seedu/address/model/building/BuildingTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Caijun7"},"content":"package seedu.address.model.building;"},{"lineNumber":2,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.exceptions.CorruptedVenueInformationException;"},{"lineNumber":14,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.exceptions.NoRoomsInBuildingException;"},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":"import seedu.address.testutil.BuildingBuilder;"},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":"import seedu.address.testutil.RoomBuilder;"},{"lineNumber":17,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":18,"author":{"gitID":"Caijun7"},"content":"//@@author Caijun7"},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":"public class BuildingTest {"},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":21,"author":{"gitID":"Caijun7"},"content":"    private Building building \u003d new Building(\"COM2\");"},{"lineNumber":22,"author":{"gitID":"Caijun7"},"content":"    private final String validBuildingName \u003d \"COM2\";"},{"lineNumber":23,"author":{"gitID":"Caijun7"},"content":"    private final Building validBuilding \u003d new BuildingBuilder().build();"},{"lineNumber":24,"author":{"gitID":"Caijun7"},"content":"    private final Building standardBuilding \u003d new BuildingBuilder().withBuildingName(\"COM2\").build();"},{"lineNumber":25,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":26,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"Caijun7"},"content":"    public void isValidBuilding_validString_true() {"},{"lineNumber":28,"author":{"gitID":"Caijun7"},"content":"        assertTrue(Building.isValidBuilding(validBuildingName));"},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":31,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"Caijun7"},"content":"    public void isValidBuilding_invalidString_false() {"},{"lineNumber":33,"author":{"gitID":"Caijun7"},"content":"        String invalidString \u003d \"COM2!\";"},{"lineNumber":34,"author":{"gitID":"Caijun7"},"content":"        assertFalse(Building.isValidBuilding(invalidString));"},{"lineNumber":35,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":37,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"Caijun7"},"content":"    public void isValidBuilding_buildingFoundInListOfNusBuildings_true() {"},{"lineNumber":39,"author":{"gitID":"Caijun7"},"content":"        assertTrue(Building.isValidBuilding(validBuilding));"},{"lineNumber":40,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":42,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"Caijun7"},"content":"    public void isValidBuilding_buildingNotFoundInListOfNusBuildings_false() {"},{"lineNumber":44,"author":{"gitID":"Caijun7"},"content":"        Building invalidBuilding \u003d new Building(\"COM3\");"},{"lineNumber":45,"author":{"gitID":"Caijun7"},"content":"        assertFalse(Building.isValidBuilding(invalidBuilding));"},{"lineNumber":46,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":48,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"Caijun7"},"content":"    public void retrieveAllRoomsSchedule_nullNusBuildingsAndRooms_throwsCorruptedVenueInformationException() {"},{"lineNumber":50,"author":{"gitID":"Caijun7"},"content":"        Building.setNusBuildingsAndRooms(null);"},{"lineNumber":51,"author":{"gitID":"Caijun7"},"content":"        assertThrows(CorruptedVenueInformationException.class, () -\u003e building.retrieveAllRoomsSchedule());"},{"lineNumber":52,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":54,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"Caijun7"},"content":"    public void retrieveAllRoomsSchedule_invalidNusBuildingsAndRooms_throwsNoRoomsInBuildingException() {"},{"lineNumber":56,"author":{"gitID":"Caijun7"},"content":"        HashMap\u003cString, ArrayList\u003cString\u003e\u003e invalidNusBuildingsAndRooms \u003d new HashMap\u003c\u003e();"},{"lineNumber":57,"author":{"gitID":"Caijun7"},"content":"        invalidNusBuildingsAndRooms.put(\"COM2\", null);"},{"lineNumber":58,"author":{"gitID":"Caijun7"},"content":"        Building.setNusBuildingsAndRooms(invalidNusBuildingsAndRooms);"},{"lineNumber":59,"author":{"gitID":"Caijun7"},"content":"        assertThrows(NoRoomsInBuildingException.class, () -\u003e building.retrieveAllRoomsSchedule());"},{"lineNumber":60,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":62,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"Caijun7"},"content":"    public void retrieveAllRoomsSchedule_validNusBuildingsAndRooms_success() throws Exception {"},{"lineNumber":64,"author":{"gitID":"Caijun7"},"content":"        ArrayList\u003cArrayList\u003cString\u003e\u003e expectedList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":65,"author":{"gitID":"Caijun7"},"content":"        ArrayList\u003cString\u003e expectedSchedule \u003d new ArrayList\u003c\u003e();"},{"lineNumber":66,"author":{"gitID":"Caijun7"},"content":"        Room room \u003d new RoomBuilder().build();"},{"lineNumber":67,"author":{"gitID":"Caijun7"},"content":"        expectedSchedule.add(room.getRoomName());"},{"lineNumber":68,"author":{"gitID":"Caijun7"},"content":"        for (int i \u003d 0; i \u003c WeekDay.NUMBER_OF_CLASSES; i++) {"},{"lineNumber":69,"author":{"gitID":"Caijun7"},"content":"            expectedSchedule.add(\"vacant\");"},{"lineNumber":70,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"Caijun7"},"content":"        expectedList.add(expectedSchedule);"},{"lineNumber":72,"author":{"gitID":"Caijun7"},"content":"        assertEquals(expectedList, validBuilding.retrieveAllRoomsSchedule());"},{"lineNumber":73,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":75,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"Caijun7"},"content":"    public void retrieveAllRoomsInBuilding_nullNusBuildingsAndRooms_throwsCorruptedVenueInformationException() {"},{"lineNumber":77,"author":{"gitID":"Caijun7"},"content":"        Building.setNusBuildingsAndRooms(null);"},{"lineNumber":78,"author":{"gitID":"Caijun7"},"content":"        assertThrows(CorruptedVenueInformationException.class, () -\u003e building.retrieveAllRoomsInBuilding());"},{"lineNumber":79,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":81,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"Caijun7"},"content":"    public void retrieveAllRoomsInBuilding_invalidNusBuildingsAndRooms_throwsNoRoomsInBuildingException() {"},{"lineNumber":83,"author":{"gitID":"Caijun7"},"content":"        HashMap\u003cString, ArrayList\u003cString\u003e\u003e invalidNusBuildingsAndRooms \u003d new HashMap\u003c\u003e();"},{"lineNumber":84,"author":{"gitID":"Caijun7"},"content":"        invalidNusBuildingsAndRooms.put(\"COM2\", null);"},{"lineNumber":85,"author":{"gitID":"Caijun7"},"content":"        Building.setNusBuildingsAndRooms(invalidNusBuildingsAndRooms);"},{"lineNumber":86,"author":{"gitID":"Caijun7"},"content":"        assertThrows(NoRoomsInBuildingException.class, () -\u003e building.retrieveAllRoomsInBuilding());"},{"lineNumber":87,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":89,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"Caijun7"},"content":"    public void retrieveAllRoomsInBuilding_invalidBuilding_throwsIllegalArgumentException() throws Exception {"},{"lineNumber":91,"author":{"gitID":"Caijun7"},"content":"        Building invalidBuilding \u003d new Building(\"COM3\");"},{"lineNumber":92,"author":{"gitID":"Caijun7"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e invalidBuilding.retrieveAllRoomsInBuilding());"},{"lineNumber":93,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":95,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"Caijun7"},"content":"    public void retrieveAllRoomsInBuilding_validNusBuildingsAndRooms_success() throws Exception {"},{"lineNumber":97,"author":{"gitID":"Caijun7"},"content":"        ArrayList\u003cString\u003e expectedList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":98,"author":{"gitID":"Caijun7"},"content":"        expectedList.add(RoomBuilder.DEFAULT_ROOMNAME);"},{"lineNumber":99,"author":{"gitID":"Caijun7"},"content":"        assertEquals(expectedList, validBuilding.retrieveAllRoomsInBuilding());"},{"lineNumber":100,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":102,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"Caijun7"},"content":"    public void equals_sameValues_true() {"},{"lineNumber":104,"author":{"gitID":"Caijun7"},"content":"        Building buildingWithSameValues \u003d new BuildingBuilder(standardBuilding).build();"},{"lineNumber":105,"author":{"gitID":"Caijun7"},"content":"        assertTrue(standardBuilding.equals(buildingWithSameValues));"},{"lineNumber":106,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":108,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"Caijun7"},"content":"    public void equals_sameObject_true() {"},{"lineNumber":110,"author":{"gitID":"Caijun7"},"content":"        assertTrue(standardBuilding.equals(standardBuilding));"},{"lineNumber":111,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":113,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"Caijun7"},"content":"    public void equals_sameType_true() {"},{"lineNumber":115,"author":{"gitID":"Caijun7"},"content":"        Building building \u003d new Building(\"COM2\");"},{"lineNumber":116,"author":{"gitID":"Caijun7"},"content":"        Building sameTypeBuilding \u003d new Building(\"COM2\");"},{"lineNumber":117,"author":{"gitID":"Caijun7"},"content":"        assertTrue(building.equals(sameTypeBuilding));"},{"lineNumber":118,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":120,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":121,"author":{"gitID":"Caijun7"},"content":"    public void equals_nullInstance_false() {"},{"lineNumber":122,"author":{"gitID":"Caijun7"},"content":"        assertFalse(standardBuilding.equals(null));"},{"lineNumber":123,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":125,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"Caijun7"},"content":"    public void equals_differentTypes_false() {"},{"lineNumber":127,"author":{"gitID":"Caijun7"},"content":"        assertFalse(standardBuilding.equals(new Week()));"},{"lineNumber":128,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":130,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":125,"-":5}},{"path":"src/test/java/seedu/address/testutil/TypicalOddEven.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"yeggasd"},"content":"//@@author yeggasd"},{"lineNumber":6,"author":{"gitID":"yeggasd"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"yeggasd"},"content":" * A utility class containing Odd or Even String to be used in tests."},{"lineNumber":8,"author":{"gitID":"yeggasd"},"content":" */"},{"lineNumber":9,"author":{"gitID":"yeggasd"},"content":"public class TypicalOddEven {"},{"lineNumber":10,"author":{"gitID":"yeggasd"},"content":"    public static final String ODD \u003d \"Odd\";"},{"lineNumber":11,"author":{"gitID":"yeggasd"},"content":"    public static final String EVEN \u003d \"Even\";"},{"lineNumber":12,"author":{"gitID":"yeggasd"},"content":"    public static final Index EVEN_INDEX \u003d Index.fromZeroBased(0);"},{"lineNumber":13,"author":{"gitID":"yeggasd"},"content":"    public static final Index ODD_INDEX \u003d Index.fromZeroBased(1);"},{"lineNumber":14,"author":{"gitID":"yeggasd"},"content":"}"}],"authorContributionMap":{"yeggasd":10,"-":4}},{"path":"src/test/java/seedu/address/testutil/AddressBookBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.Password;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * A utility class to help with building Addressbook objects."},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":13,"author":{"gitID":"-"},"content":" *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").withTag(\"Friend\").build();}"},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class AddressBookBuilder {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private AddressBook addressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public AddressBookBuilder() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        addressBook \u003d new AddressBook();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public AddressBookBuilder(AddressBook addressBook) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        this.addressBook \u003d addressBook;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Adds a new {@code Person} to the {@code AddressBook} that we are building."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public AddressBookBuilder withPerson(Person person) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            addressBook.addPerson(person);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"person is expected to be unique.\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Parses {@code tagName} into a {@code Tag} and adds it to the {@code AddressBook} that we are building."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public AddressBookBuilder withTag(String tagName) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            addressBook.addTag(new Tag(tagName));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"tagName is expected to be valid.\");"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"yeggasd"},"content":"    //@@author yeggasd"},{"lineNumber":52,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"yeggasd"},"content":"     * Parses {@code password} into a {@code Password} and updates the {@code AddressBook} \u0027s password"},{"lineNumber":54,"author":{"gitID":"yeggasd"},"content":"     * that we are building."},{"lineNumber":55,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"yeggasd"},"content":"    public AddressBookBuilder withPassword(String password) {"},{"lineNumber":57,"author":{"gitID":"yeggasd"},"content":"        addressBook.updatePassword(new Password(password));"},{"lineNumber":58,"author":{"gitID":"yeggasd"},"content":"        return this;"},{"lineNumber":59,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"yeggasd"},"content":"    //@@author"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public AddressBook build() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yeggasd":10,"-":55}},{"path":"src/test/java/seedu/address/testutil/BuildingBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"Caijun7"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.Building;"},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":"//@@author Caijun7"},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":" * A utility class to help with building {@code Building} objects"},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":" */"},{"lineNumber":12,"author":{"gitID":"Caijun7"},"content":"public class BuildingBuilder {"},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":14,"author":{"gitID":"Caijun7"},"content":"    public static final String DEFAULT_BUILDINGNAME \u003d \"COM2\";"},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":"    private static HashMap\u003cString, ArrayList\u003cString\u003e\u003e nusBuildingsAndRooms;"},{"lineNumber":17,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":18,"author":{"gitID":"Caijun7"},"content":"    private HashMap\u003cString, ArrayList\u003cString\u003e\u003e buildingsAndRooms;"},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":"    private String buildingName;"},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":21,"author":{"gitID":"Caijun7"},"content":"    public BuildingBuilder() {"},{"lineNumber":22,"author":{"gitID":"Caijun7"},"content":"        buildingName \u003d DEFAULT_BUILDINGNAME;"},{"lineNumber":23,"author":{"gitID":"Caijun7"},"content":"        buildingsAndRooms \u003d createValidNusBuildingsAndRooms();"},{"lineNumber":24,"author":{"gitID":"Caijun7"},"content":"        nusBuildingsAndRooms \u003d buildingsAndRooms;"},{"lineNumber":25,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":27,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"Caijun7"},"content":"     * Initializes the BuildingBuilder with the data of {@code buildingToCopy}."},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"Caijun7"},"content":"    public BuildingBuilder(Building buildingToCopy) {"},{"lineNumber":31,"author":{"gitID":"Caijun7"},"content":"        buildingName \u003d buildingToCopy.getBuildingName();"},{"lineNumber":32,"author":{"gitID":"Caijun7"},"content":"        buildingsAndRooms \u003d buildingToCopy.getBuildingsAndRooms();"},{"lineNumber":33,"author":{"gitID":"Caijun7"},"content":"        nusBuildingsAndRooms \u003d Building.getNusBuildingsAndRooms();"},{"lineNumber":34,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":36,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"Caijun7"},"content":"     * Creates a valid {@code nusBuildingsAndBuildings}"},{"lineNumber":38,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"Caijun7"},"content":"    private HashMap\u003cString, ArrayList\u003cString\u003e\u003e createValidNusBuildingsAndRooms() {"},{"lineNumber":40,"author":{"gitID":"Caijun7"},"content":"        HashMap\u003cString, ArrayList\u003cString\u003e\u003e validNusBuildingsAndRooms \u003d new HashMap\u003c\u003e();"},{"lineNumber":41,"author":{"gitID":"Caijun7"},"content":"        ArrayList\u003cString\u003e validRoomsInBuildings \u003d new ArrayList\u003c\u003e();"},{"lineNumber":42,"author":{"gitID":"Caijun7"},"content":"        validRoomsInBuildings.add(RoomBuilder.DEFAULT_ROOMNAME);"},{"lineNumber":43,"author":{"gitID":"Caijun7"},"content":"        validNusBuildingsAndRooms.put(DEFAULT_BUILDINGNAME, validRoomsInBuildings);"},{"lineNumber":44,"author":{"gitID":"Caijun7"},"content":"        return validNusBuildingsAndRooms;"},{"lineNumber":45,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":47,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"Caijun7"},"content":"     * Sets the {@code buildingName} into a {@code Building} that we are building."},{"lineNumber":49,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"Caijun7"},"content":"    public BuildingBuilder withBuildingName(String buildingName) {"},{"lineNumber":51,"author":{"gitID":"Caijun7"},"content":"        this.buildingName \u003d buildingName;"},{"lineNumber":52,"author":{"gitID":"Caijun7"},"content":"        return this;"},{"lineNumber":53,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":55,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"Caijun7"},"content":"     * Sets the {@code nusBuildingsAndRooms} into a {@code Building} that we are building."},{"lineNumber":57,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"Caijun7"},"content":"    public BuildingBuilder withNusBuildingsAndRooms(HashMap\u003cString, ArrayList\u003cString\u003e\u003e nusBuildingsAndRooms) {"},{"lineNumber":59,"author":{"gitID":"Caijun7"},"content":"        BuildingBuilder.nusBuildingsAndRooms \u003d nusBuildingsAndRooms;"},{"lineNumber":60,"author":{"gitID":"Caijun7"},"content":"        return this;"},{"lineNumber":61,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":63,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"Caijun7"},"content":"     * Sets the {@code buildingsAndRooms} into a {@code Building} that we are building."},{"lineNumber":65,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"Caijun7"},"content":"    public BuildingBuilder withBuildingsAndRooms(HashMap\u003cString, ArrayList\u003cString\u003e\u003e buildingsAndRooms) {"},{"lineNumber":67,"author":{"gitID":"Caijun7"},"content":"        this.buildingsAndRooms \u003d buildingsAndRooms;"},{"lineNumber":68,"author":{"gitID":"Caijun7"},"content":"        return this;"},{"lineNumber":69,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":71,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"Caijun7"},"content":"     * Builds a {@code Building} object"},{"lineNumber":73,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"Caijun7"},"content":"    public Building build() {"},{"lineNumber":75,"author":{"gitID":"Caijun7"},"content":"        Building building \u003d new Building(buildingName);"},{"lineNumber":76,"author":{"gitID":"Caijun7"},"content":"        Building.setNusBuildingsAndRooms(nusBuildingsAndRooms);"},{"lineNumber":77,"author":{"gitID":"Caijun7"},"content":"        building.setBuildingsAndRooms(buildingsAndRooms);"},{"lineNumber":78,"author":{"gitID":"Caijun7"},"content":"        return building;"},{"lineNumber":79,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":77,"-":3}},{"path":"src/test/java/seedu/address/testutil/TimetableBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.timetable.Lesson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.timetable.Timetable;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"AzuraAiR"},"content":"//@@author AzuraAiR"},{"lineNumber":10,"author":{"gitID":"AzuraAiR"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"AzuraAiR"},"content":" * A utility class to help build dummy timetables for Persons"},{"lineNumber":12,"author":{"gitID":"AzuraAiR"},"content":" * This is to prevent the tests from trying to retrieve information from NUSMods API too many times"},{"lineNumber":13,"author":{"gitID":"AzuraAiR"},"content":" */"},{"lineNumber":14,"author":{"gitID":"AzuraAiR"},"content":"public class TimetableBuilder {"},{"lineNumber":15,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":16,"author":{"gitID":"AzuraAiR"},"content":"    public static final int NUM_OF_DUMMY_TIMETABLE \u003d 2;"},{"lineNumber":17,"author":{"gitID":"AzuraAiR"},"content":"    public static final String DUMMY_LINK_ONE \u003d \"http://modsn.us/aaaaa\";"},{"lineNumber":18,"author":{"gitID":"AzuraAiR"},"content":"    public static final String DUMMY_LINK_TWO \u003d \"http://modsn.us/bbbbb\";"},{"lineNumber":19,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":20,"author":{"gitID":"AzuraAiR"},"content":"    private Timetable[] dummyTimetables;"},{"lineNumber":21,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":22,"author":{"gitID":"AzuraAiR"},"content":"    public TimetableBuilder() {"},{"lineNumber":23,"author":{"gitID":"AzuraAiR"},"content":"        dummyTimetables \u003d new Timetable[NUM_OF_DUMMY_TIMETABLE];"},{"lineNumber":24,"author":{"gitID":"AzuraAiR"},"content":"        dummyTimetables[0] \u003d fillTimetableWithDummyValues(new Timetable(DUMMY_LINK_ONE));"},{"lineNumber":25,"author":{"gitID":"AzuraAiR"},"content":"        dummyTimetables[1] \u003d fillTimetableWithDummyValues(new Timetable(DUMMY_LINK_TWO));"},{"lineNumber":26,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":27,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":29,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"AzuraAiR"},"content":"     * Gets the dummy timetable from the array of dummy timetables"},{"lineNumber":31,"author":{"gitID":"AzuraAiR"},"content":"     * @param index"},{"lineNumber":32,"author":{"gitID":"AzuraAiR"},"content":"     * @return Timetable with hardcoded values"},{"lineNumber":33,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"AzuraAiR"},"content":"    public Timetable getDummy(int index) {"},{"lineNumber":35,"author":{"gitID":"AzuraAiR"},"content":"        if (index \u003e\u003d 0 \u0026\u0026 index \u003c NUM_OF_DUMMY_TIMETABLE) {"},{"lineNumber":36,"author":{"gitID":"AzuraAiR"},"content":"            return dummyTimetables[index];"},{"lineNumber":37,"author":{"gitID":"AzuraAiR"},"content":"        } else {"},{"lineNumber":38,"author":{"gitID":"AzuraAiR"},"content":"            return new Timetable(\"\");   // Create empty timetable as failsafe"},{"lineNumber":39,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":42,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"AzuraAiR"},"content":"     * Helper method to fill the timetable with dummy values"},{"lineNumber":44,"author":{"gitID":"AzuraAiR"},"content":"     * @param timetable to be filled"},{"lineNumber":45,"author":{"gitID":"AzuraAiR"},"content":"     * @return dummy Timetable"},{"lineNumber":46,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"AzuraAiR"},"content":"    private Timetable fillTimetableWithDummyValues(Timetable timetable) {"},{"lineNumber":48,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":49,"author":{"gitID":"AzuraAiR"},"content":"        ArrayList\u003cLesson\u003e dummyLessons \u003d new ArrayList\u003cLesson\u003e();"},{"lineNumber":50,"author":{"gitID":"AzuraAiR"},"content":"        dummyLessons.add(new Lesson(\"CS2103T\", \"T6\", \"Tutorial\", \"Every Week\","},{"lineNumber":51,"author":{"gitID":"AzuraAiR"},"content":"                \"Wednesday\", \"1100\", \"1200\"));"},{"lineNumber":52,"author":{"gitID":"AzuraAiR"},"content":"        if (timetable.value.equalsIgnoreCase(DUMMY_LINK_TWO)) {   // To differentiate dummy timetable 1 and 2"},{"lineNumber":53,"author":{"gitID":"AzuraAiR"},"content":"            dummyLessons.add(new Lesson(\"CS2101\", \"6\", \"Sectional Teaching\","},{"lineNumber":54,"author":{"gitID":"AzuraAiR"},"content":"                    \"Every Week\", \"Tuesday\", \"1000\", \"1200\"));"},{"lineNumber":55,"author":{"gitID":"AzuraAiR"},"content":"            dummyLessons.add(new Lesson(\"CS2101\", \"6\", \"Sectional Teaching\","},{"lineNumber":56,"author":{"gitID":"AzuraAiR"},"content":"                    \"Every Week\", \"Thursday\", \"1000\", \"1200\"));"},{"lineNumber":57,"author":{"gitID":"AzuraAiR"},"content":"            dummyLessons.add(new Lesson(\"CS2101\", \"6\", \"Sectional Teaching\","},{"lineNumber":58,"author":{"gitID":"AzuraAiR"},"content":"                    \"Every Week\", \"Friday\", \"1600\", \"1800\"));"},{"lineNumber":59,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":61,"author":{"gitID":"AzuraAiR"},"content":"        try {"},{"lineNumber":62,"author":{"gitID":"AzuraAiR"},"content":"            for (Lesson lessonToAdd : dummyLessons) {"},{"lineNumber":63,"author":{"gitID":"AzuraAiR"},"content":"                timetable.addLessonToSlot(lessonToAdd);"},{"lineNumber":64,"author":{"gitID":"AzuraAiR"},"content":"            }"},{"lineNumber":65,"author":{"gitID":"AzuraAiR"},"content":"        } catch (IllegalValueException ie) {"},{"lineNumber":66,"author":{"gitID":"AzuraAiR"},"content":"            return new Timetable(\"\"); // Should never happen since dummy values are hardcoded"},{"lineNumber":67,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":69,"author":{"gitID":"AzuraAiR"},"content":"        return timetable;"},{"lineNumber":70,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":72,"author":{"gitID":"AzuraAiR"},"content":"}"}],"authorContributionMap":{"AzuraAiR":64,"-":8}},{"path":"src/test/java/seedu/address/testutil/AliasUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AliasCommand;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UnaliasCommand;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"jingyinno"},"content":"//@@author jingyinno"},{"lineNumber":8,"author":{"gitID":"jingyinno"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"jingyinno"},"content":" * A utility class for Alias."},{"lineNumber":10,"author":{"gitID":"jingyinno"},"content":" */"},{"lineNumber":11,"author":{"gitID":"jingyinno"},"content":"public class AliasUtil {"},{"lineNumber":12,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":13,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"jingyinno"},"content":"     * Returns an alias command string for adding the {@code alias}."},{"lineNumber":15,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":16,"author":{"gitID":"jingyinno"},"content":"    public static String getAliasCommand(Alias alias) {"},{"lineNumber":17,"author":{"gitID":"jingyinno"},"content":"        return AliasCommand.COMMAND_WORD + \" \" + getAliasDetails(alias);"},{"lineNumber":18,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":20,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"jingyinno"},"content":"     * Returns an unalias command string for removing the {@code alias}."},{"lineNumber":22,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"jingyinno"},"content":"    public static String getUnliasCommand(String unalias) {"},{"lineNumber":24,"author":{"gitID":"jingyinno"},"content":"        return UnaliasCommand.COMMAND_WORD + \" \" + unalias;"},{"lineNumber":25,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":27,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"jingyinno"},"content":"     * Returns the part of command string for the given {@code alias}\u0027s details."},{"lineNumber":29,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"jingyinno"},"content":"    public static String getAliasDetails(Alias alias) {"},{"lineNumber":31,"author":{"gitID":"jingyinno"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":32,"author":{"gitID":"jingyinno"},"content":"        sb.append(alias.getCommand() + \" \");"},{"lineNumber":33,"author":{"gitID":"jingyinno"},"content":"        sb.append(alias.getAlias());"},{"lineNumber":34,"author":{"gitID":"jingyinno"},"content":"        return sb.toString();"},{"lineNumber":35,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"jingyinno"},"content":"}"}],"authorContributionMap":{"jingyinno":30,"-":6}},{"path":"src/test/java/seedu/address/model/ModelStub.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.exceptions.AliasNotFoundException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.exceptions.DuplicateAliasException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.building.Building;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.building.exceptions.BuildingNotFoundException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"jingyinno"},"content":"//@@author jingyinno"},{"lineNumber":23,"author":{"gitID":"jingyinno"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"jingyinno"},"content":" * A default model stub that have all of the methods failing."},{"lineNumber":25,"author":{"gitID":"jingyinno"},"content":" */"},{"lineNumber":26,"author":{"gitID":"jingyinno"},"content":"public class ModelStub implements Model {"},{"lineNumber":27,"author":{"gitID":"jingyinno"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"jingyinno"},"content":"    public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":29,"author":{"gitID":"jingyinno"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":30,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":32,"author":{"gitID":"jingyinno"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"jingyinno"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":34,"author":{"gitID":"jingyinno"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":35,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":37,"author":{"gitID":"jingyinno"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"jingyinno"},"content":"    public void resetData(ReadOnlyAddressBook newData, HashMap\u003cString, String\u003e newAliasList) {"},{"lineNumber":39,"author":{"gitID":"jingyinno"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":40,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":42,"author":{"gitID":"jingyinno"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"jingyinno"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":44,"author":{"gitID":"jingyinno"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":45,"author":{"gitID":"jingyinno"},"content":"        return null;"},{"lineNumber":46,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":48,"author":{"gitID":"jingyinno"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"jingyinno"},"content":"    public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":50,"author":{"gitID":"jingyinno"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":51,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":53,"author":{"gitID":"jingyinno"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"jingyinno"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":55,"author":{"gitID":"jingyinno"},"content":"            throws DuplicatePersonException {"},{"lineNumber":56,"author":{"gitID":"jingyinno"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":57,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":59,"author":{"gitID":"jingyinno"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"jingyinno"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":61,"author":{"gitID":"jingyinno"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":62,"author":{"gitID":"jingyinno"},"content":"        return null;"},{"lineNumber":63,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":65,"author":{"gitID":"jingyinno"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"jingyinno"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":67,"author":{"gitID":"jingyinno"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":68,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":70,"author":{"gitID":"jingyinno"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"jingyinno"},"content":"    public void updateAliasesMapping(HashMap\u003cString, String\u003e aliases) {"},{"lineNumber":72,"author":{"gitID":"jingyinno"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":73,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":75,"author":{"gitID":"jingyinno"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"jingyinno"},"content":"    public void deleteTag(Tag tag) {"},{"lineNumber":77,"author":{"gitID":"jingyinno"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":78,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":80,"author":{"gitID":"jingyinno"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"jingyinno"},"content":"    public void updatePassword(byte[] password)  {"},{"lineNumber":82,"author":{"gitID":"jingyinno"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":83,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":85,"author":{"gitID":"jingyinno"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"jingyinno"},"content":"    public void removeAlias(String toRemove) throws AliasNotFoundException {"},{"lineNumber":87,"author":{"gitID":"jingyinno"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":88,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":90,"author":{"gitID":"jingyinno"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"jingyinno"},"content":"    public void importAddressBook(String filepath, byte[] password) throws DataConversionException, IOException {"},{"lineNumber":92,"author":{"gitID":"jingyinno"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":93,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":95,"author":{"gitID":"jingyinno"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"jingyinno"},"content":"    public void exportAddressBook(String filepath, Password password) {"},{"lineNumber":97,"author":{"gitID":"jingyinno"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":98,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":100,"author":{"gitID":"jingyinno"},"content":"    @Override"},{"lineNumber":101,"author":{"gitID":"jingyinno"},"content":"    public void uploadAddressBook(String filepath, Password password) {"},{"lineNumber":102,"author":{"gitID":"jingyinno"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":103,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":105,"author":{"gitID":"jingyinno"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"jingyinno"},"content":"    public void addAlias(Alias alias) throws DuplicateAliasException {"},{"lineNumber":107,"author":{"gitID":"jingyinno"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":108,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":110,"author":{"gitID":"jingyinno"},"content":"    @Override"},{"lineNumber":111,"author":{"gitID":"jingyinno"},"content":"    public HashMap\u003cString, String\u003e getAliasList() {"},{"lineNumber":112,"author":{"gitID":"jingyinno"},"content":"        return new HashMap\u003cString, String\u003e();"},{"lineNumber":113,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":115,"author":{"gitID":"jingyinno"},"content":"    @Override"},{"lineNumber":116,"author":{"gitID":"jingyinno"},"content":"    public String getCommandFromAlias(String aliasKey) {"},{"lineNumber":117,"author":{"gitID":"jingyinno"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":118,"author":{"gitID":"jingyinno"},"content":"        return null;"},{"lineNumber":119,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":121,"author":{"gitID":"jingyinno"},"content":"    @Override"},{"lineNumber":122,"author":{"gitID":"jingyinno"},"content":"    public ArrayList\u003cArrayList\u003cString\u003e\u003e getUiFormattedAliasList() {"},{"lineNumber":123,"author":{"gitID":"jingyinno"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":124,"author":{"gitID":"jingyinno"},"content":"        return null;"},{"lineNumber":125,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":127,"author":{"gitID":"jingyinno"},"content":"    @Override"},{"lineNumber":128,"author":{"gitID":"jingyinno"},"content":"    public ArrayList\u003cArrayList\u003cString\u003e\u003e retrieveAllRoomsSchedule(Building building)"},{"lineNumber":129,"author":{"gitID":"jingyinno"},"content":"            throws BuildingNotFoundException {"},{"lineNumber":130,"author":{"gitID":"jingyinno"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":131,"author":{"gitID":"jingyinno"},"content":"        return null;"},{"lineNumber":132,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"jingyinno"},"content":"}"}],"authorContributionMap":{"jingyinno":112,"-":21}},{"path":"src/test/java/seedu/address/testutil/RoomBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"Caijun7"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":3,"author":{"gitID":"Caijun7"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":5,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.Room;"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.Week;"},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":"//@@author Caijun7"},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":" * A utility class to help with building {@code Room} objects"},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":" */"},{"lineNumber":12,"author":{"gitID":"Caijun7"},"content":"public class RoomBuilder {"},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":14,"author":{"gitID":"Caijun7"},"content":"    public static final String DEFAULT_ROOMNAME \u003d \"COM2-0108\";"},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":"    private static HashMap\u003cString, Week\u003e nusVenues;"},{"lineNumber":17,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":18,"author":{"gitID":"Caijun7"},"content":"    private String roomName;"},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":"    private HashMap\u003cString, Week\u003e nusRooms;"},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":"    private Week week \u003d null;"},{"lineNumber":21,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":22,"author":{"gitID":"Caijun7"},"content":"    public RoomBuilder() {"},{"lineNumber":23,"author":{"gitID":"Caijun7"},"content":"        roomName \u003d DEFAULT_ROOMNAME;"},{"lineNumber":24,"author":{"gitID":"Caijun7"},"content":"        nusRooms \u003d createValidNusRooms();"},{"lineNumber":25,"author":{"gitID":"Caijun7"},"content":"        nusVenues \u003d nusRooms;"},{"lineNumber":26,"author":{"gitID":"Caijun7"},"content":"        week \u003d new WeekBuilder().build();"},{"lineNumber":27,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"Caijun7"},"content":"     * Initializes the RoomBuilder with the data of {@code roomToCopy}."},{"lineNumber":31,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"Caijun7"},"content":"    public RoomBuilder(Room roomToCopy) {"},{"lineNumber":33,"author":{"gitID":"Caijun7"},"content":"        roomName \u003d roomToCopy.getRoomName();"},{"lineNumber":34,"author":{"gitID":"Caijun7"},"content":"        nusRooms \u003d roomToCopy.getNusRooms();"},{"lineNumber":35,"author":{"gitID":"Caijun7"},"content":"        nusVenues \u003d Room.getNusVenues();"},{"lineNumber":36,"author":{"gitID":"Caijun7"},"content":"        week \u003d roomToCopy.getWeek();"},{"lineNumber":37,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":39,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"Caijun7"},"content":"     * Creates a valid {@code nusRooms}"},{"lineNumber":41,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"Caijun7"},"content":"    private HashMap\u003cString, Week\u003e createValidNusRooms() {"},{"lineNumber":43,"author":{"gitID":"Caijun7"},"content":"        HashMap\u003cString, Week\u003e validNusRooms \u003d new HashMap\u003c\u003e();"},{"lineNumber":44,"author":{"gitID":"Caijun7"},"content":"        Week validWeek \u003d new WeekBuilder().build();"},{"lineNumber":45,"author":{"gitID":"Caijun7"},"content":"        validNusRooms.put(roomName, validWeek);"},{"lineNumber":46,"author":{"gitID":"Caijun7"},"content":"        return validNusRooms;"},{"lineNumber":47,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":49,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"Caijun7"},"content":"     * Sets the {@code roomName} into a {@code Room} that we are building."},{"lineNumber":51,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"Caijun7"},"content":"    public RoomBuilder withRoomName(String roomName) {"},{"lineNumber":53,"author":{"gitID":"Caijun7"},"content":"        this.roomName \u003d roomName;"},{"lineNumber":54,"author":{"gitID":"Caijun7"},"content":"        return this;"},{"lineNumber":55,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":57,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"Caijun7"},"content":"     * Sets the {@code nusVenues} into a {@code Room} that we are building."},{"lineNumber":59,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"Caijun7"},"content":"    public RoomBuilder withNusVenues(HashMap\u003cString, Week\u003e nusVenues) {"},{"lineNumber":61,"author":{"gitID":"Caijun7"},"content":"        RoomBuilder.nusVenues \u003d nusVenues;"},{"lineNumber":62,"author":{"gitID":"Caijun7"},"content":"        return this;"},{"lineNumber":63,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":65,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"Caijun7"},"content":"     * Sets the {@code nusRooms} into a {@code Room} that we are building."},{"lineNumber":67,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"Caijun7"},"content":"    public RoomBuilder withNusRooms(HashMap\u003cString, Week\u003e nusRooms) {"},{"lineNumber":69,"author":{"gitID":"Caijun7"},"content":"        this.nusRooms \u003d nusRooms;"},{"lineNumber":70,"author":{"gitID":"Caijun7"},"content":"        return this;"},{"lineNumber":71,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":73,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"Caijun7"},"content":"     * Sets the {@code week} into a {@code Room} that we are building."},{"lineNumber":75,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"Caijun7"},"content":"    public RoomBuilder withWeek(Week week) {"},{"lineNumber":77,"author":{"gitID":"Caijun7"},"content":"        this.week \u003d week;"},{"lineNumber":78,"author":{"gitID":"Caijun7"},"content":"        return this;"},{"lineNumber":79,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":81,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"Caijun7"},"content":"     * Builds a {@code Room} object"},{"lineNumber":83,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"Caijun7"},"content":"    public Room build() {"},{"lineNumber":85,"author":{"gitID":"Caijun7"},"content":"        Room room \u003d new Room(roomName);"},{"lineNumber":86,"author":{"gitID":"Caijun7"},"content":"        room.setNusRooms(nusRooms);"},{"lineNumber":87,"author":{"gitID":"Caijun7"},"content":"        Room.setNusVenues(nusVenues);"},{"lineNumber":88,"author":{"gitID":"Caijun7"},"content":"        room.setWeek(week);"},{"lineNumber":89,"author":{"gitID":"Caijun7"},"content":"        return room;"},{"lineNumber":90,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":91}},{"path":"src/test/java/seedu/address/testutil/WeekBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":5,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.Week;"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.WeekDay;"},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":"//@@author Caijun7"},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":" * A utility class to help with building {@code Week} objects"},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":" */"},{"lineNumber":12,"author":{"gitID":"Caijun7"},"content":"public class WeekBuilder {"},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":14,"author":{"gitID":"Caijun7"},"content":"    public static final String DEFAULT_ROOMNAME \u003d \"COM2-0108\";"},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":"    public static final int DEFAULT_WEEKDAY \u003d 0;"},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":17,"author":{"gitID":"Caijun7"},"content":"    private String roomName;"},{"lineNumber":18,"author":{"gitID":"Caijun7"},"content":"    private int weekday;"},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":"    private ArrayList\u003cWeekDay\u003e weekSchedule;"},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":21,"author":{"gitID":"Caijun7"},"content":"    public WeekBuilder() {"},{"lineNumber":22,"author":{"gitID":"Caijun7"},"content":"        roomName \u003d DEFAULT_ROOMNAME;"},{"lineNumber":23,"author":{"gitID":"Caijun7"},"content":"        weekday \u003d DEFAULT_WEEKDAY;"},{"lineNumber":24,"author":{"gitID":"Caijun7"},"content":"        weekSchedule \u003d createValidWeekSchedule();"},{"lineNumber":25,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":27,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"Caijun7"},"content":"     * Initializes the WeekBuilder with the data of {@code weekToCopy}."},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"Caijun7"},"content":"    public WeekBuilder(Week weekToCopy) {"},{"lineNumber":31,"author":{"gitID":"Caijun7"},"content":"        roomName \u003d weekToCopy.getRoomName();"},{"lineNumber":32,"author":{"gitID":"Caijun7"},"content":"        weekSchedule \u003d weekToCopy.getWeekSchedule();"},{"lineNumber":33,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":35,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"Caijun7"},"content":"     * Creates a valid {@code weekSchedule}"},{"lineNumber":37,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"Caijun7"},"content":"    private ArrayList\u003cWeekDay\u003e createValidWeekSchedule() {"},{"lineNumber":39,"author":{"gitID":"Caijun7"},"content":"        ArrayList\u003cWeekDay\u003e validWeekSchedule \u003d new ArrayList\u003c\u003e();"},{"lineNumber":40,"author":{"gitID":"Caijun7"},"content":"        WeekDay validWeekDay \u003d new WeekDayBuilder().build();"},{"lineNumber":41,"author":{"gitID":"Caijun7"},"content":"        for (int i \u003d 0; i \u003c Week.NUMBER_OF_DAYS; i++) {"},{"lineNumber":42,"author":{"gitID":"Caijun7"},"content":"            validWeekSchedule.add(validWeekDay);"},{"lineNumber":43,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"Caijun7"},"content":"        return validWeekSchedule;"},{"lineNumber":45,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":47,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"Caijun7"},"content":"     * Sets the {@code weekday} into a {@code Week} that we are building."},{"lineNumber":49,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"Caijun7"},"content":"    public WeekBuilder withDay(int day) {"},{"lineNumber":51,"author":{"gitID":"Caijun7"},"content":"        this.weekday \u003d day;"},{"lineNumber":52,"author":{"gitID":"Caijun7"},"content":"        return this;"},{"lineNumber":53,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":55,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"Caijun7"},"content":"     * Sets the {@code roomName} into a {@code Week} that we are building."},{"lineNumber":57,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"Caijun7"},"content":"    public WeekBuilder withRoomName(String roomName) {"},{"lineNumber":59,"author":{"gitID":"Caijun7"},"content":"        this.roomName \u003d roomName;"},{"lineNumber":60,"author":{"gitID":"Caijun7"},"content":"        return this;"},{"lineNumber":61,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":63,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"Caijun7"},"content":"     * Sets the {@code weekSchedule} into a {@code Week} that we are building."},{"lineNumber":65,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"Caijun7"},"content":"    public WeekBuilder withWeekSchedule(ArrayList\u003cWeekDay\u003e weekSchedule) {"},{"lineNumber":67,"author":{"gitID":"Caijun7"},"content":"        this.weekSchedule \u003d weekSchedule;"},{"lineNumber":68,"author":{"gitID":"Caijun7"},"content":"        return this;"},{"lineNumber":69,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":71,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"Caijun7"},"content":"     * Builds a {@code Week} object"},{"lineNumber":73,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"Caijun7"},"content":"    public Week build() {"},{"lineNumber":75,"author":{"gitID":"Caijun7"},"content":"        Week week \u003d new Week();"},{"lineNumber":76,"author":{"gitID":"Caijun7"},"content":"        week.setWeekday(weekday);"},{"lineNumber":77,"author":{"gitID":"Caijun7"},"content":"        week.setRoomName(roomName);"},{"lineNumber":78,"author":{"gitID":"Caijun7"},"content":"        week.setWeekSchedule(weekSchedule);"},{"lineNumber":79,"author":{"gitID":"Caijun7"},"content":"        return week;"},{"lineNumber":80,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":78,"-":3}},{"path":"src/test/java/seedu/address/model/building/WeekTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Caijun7"},"content":"package seedu.address.model.building;"},{"lineNumber":2,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":12,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.exceptions.CorruptedVenueInformationException;"},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.exceptions.InvalidWeekScheduleException;"},{"lineNumber":14,"author":{"gitID":"Caijun7"},"content":"import seedu.address.testutil.WeekBuilder;"},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":"import seedu.address.testutil.WeekDayBuilder;"},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":17,"author":{"gitID":"Caijun7"},"content":"//@@author Caijun7"},{"lineNumber":18,"author":{"gitID":"Caijun7"},"content":"public class WeekTest {"},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":"    private Week week \u003d new Week();"},{"lineNumber":21,"author":{"gitID":"Caijun7"},"content":"    private final Week validWeek \u003d new WeekBuilder().build();"},{"lineNumber":22,"author":{"gitID":"Caijun7"},"content":"    private final Week standardWeek \u003d new WeekBuilder().withDay(0).withRoomName(\"COM2-0108\").build();"},{"lineNumber":23,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":24,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"Caijun7"},"content":"    public void retrieveWeekDaySchedule_nullWeekSchedule_throwsCorruptedVenueInformationException() {"},{"lineNumber":26,"author":{"gitID":"Caijun7"},"content":"        week.setWeekSchedule(null);"},{"lineNumber":27,"author":{"gitID":"Caijun7"},"content":"        assertThrows(CorruptedVenueInformationException.class, () -\u003e week.retrieveWeekDaySchedule());"},{"lineNumber":28,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":30,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"Caijun7"},"content":"    public void retrieveWeekDaySchedule_nonNullInvalidWeekDaySchedule_throwsCorruptedVenueInformationException() {"},{"lineNumber":32,"author":{"gitID":"Caijun7"},"content":"        ArrayList\u003cWeekDay\u003e invalidWeekSchedule \u003d new ArrayList\u003c\u003e();"},{"lineNumber":33,"author":{"gitID":"Caijun7"},"content":"        invalidWeekSchedule.add(new WeekDayBuilder().build());"},{"lineNumber":34,"author":{"gitID":"Caijun7"},"content":"        week.setWeekSchedule(invalidWeekSchedule);"},{"lineNumber":35,"author":{"gitID":"Caijun7"},"content":"        assertThrows(CorruptedVenueInformationException.class, () -\u003e week.retrieveWeekDaySchedule());"},{"lineNumber":36,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":38,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"Caijun7"},"content":"    public void retrieveWeekDaySchedule_validWeekDaySchedule_success() throws Exception {"},{"lineNumber":40,"author":{"gitID":"Caijun7"},"content":"        ArrayList\u003cString\u003e expectedList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":41,"author":{"gitID":"Caijun7"},"content":"        for (int i \u003d 0; i \u003c WeekDay.NUMBER_OF_CLASSES; i++) {"},{"lineNumber":42,"author":{"gitID":"Caijun7"},"content":"            expectedList.add(\"vacant\");"},{"lineNumber":43,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"Caijun7"},"content":"        assertEquals(expectedList, validWeek.retrieveWeekDaySchedule());"},{"lineNumber":45,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":47,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"Caijun7"},"content":"    public void retrieveWeekDaySchedule_sundayWeekDaySchedule_success() throws Exception {"},{"lineNumber":49,"author":{"gitID":"Caijun7"},"content":"        validWeek.setWeekday(Week.SUNDAY);"},{"lineNumber":50,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":51,"author":{"gitID":"Caijun7"},"content":"        ArrayList\u003cString\u003e expectedList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":52,"author":{"gitID":"Caijun7"},"content":"        for (int i \u003d 0; i \u003c WeekDay.NUMBER_OF_CLASSES; i++) {"},{"lineNumber":53,"author":{"gitID":"Caijun7"},"content":"            expectedList.add(\"vacant\");"},{"lineNumber":54,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"Caijun7"},"content":"        assertEquals(expectedList, validWeek.retrieveWeekDaySchedule());"},{"lineNumber":56,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":58,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"Caijun7"},"content":"    public void isValidWeekSchedule_nullWeekSchedule_throwsInvalidWeekScheduleException() {"},{"lineNumber":60,"author":{"gitID":"Caijun7"},"content":"        week.setWeekSchedule(null);"},{"lineNumber":61,"author":{"gitID":"Caijun7"},"content":"        assertThrows(InvalidWeekScheduleException.class, () -\u003e week.isValidWeekSchedule());"},{"lineNumber":62,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":64,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"Caijun7"},"content":"    public void isValidWeekSchedule_nonNullInvalidWeekDaySchedule_throwsInvalidWeekScheduleException() {"},{"lineNumber":66,"author":{"gitID":"Caijun7"},"content":"        ArrayList\u003cWeekDay\u003e invalidWeekSchedule \u003d new ArrayList\u003c\u003e();"},{"lineNumber":67,"author":{"gitID":"Caijun7"},"content":"        invalidWeekSchedule.add(new WeekDayBuilder().build());"},{"lineNumber":68,"author":{"gitID":"Caijun7"},"content":"        week.setWeekSchedule(invalidWeekSchedule);"},{"lineNumber":69,"author":{"gitID":"Caijun7"},"content":"        assertThrows(InvalidWeekScheduleException.class, () -\u003e week.isValidWeekSchedule());"},{"lineNumber":70,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":72,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"Caijun7"},"content":"    public void isValidWeekSchedule_validWeekDaySchedule_success() throws Exception {"},{"lineNumber":74,"author":{"gitID":"Caijun7"},"content":"        assertTrue(validWeek.isValidWeekSchedule());"},{"lineNumber":75,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":77,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"Caijun7"},"content":"    public void equals_sameValues_true() {"},{"lineNumber":79,"author":{"gitID":"Caijun7"},"content":"        Week weekWithSameValues \u003d new WeekBuilder(standardWeek).build();"},{"lineNumber":80,"author":{"gitID":"Caijun7"},"content":"        assertTrue(standardWeek.equals(weekWithSameValues));"},{"lineNumber":81,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":83,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"Caijun7"},"content":"    public void equals_sameObject_true() {"},{"lineNumber":85,"author":{"gitID":"Caijun7"},"content":"        assertTrue(standardWeek.equals(standardWeek));"},{"lineNumber":86,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":88,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"Caijun7"},"content":"    public void equals_sameType_true() {"},{"lineNumber":90,"author":{"gitID":"Caijun7"},"content":"        Week week \u003d new Week();"},{"lineNumber":91,"author":{"gitID":"Caijun7"},"content":"        ArrayList\u003cWeekDay\u003e testWeekSchedule \u003d new ArrayList\u003c\u003e();"},{"lineNumber":92,"author":{"gitID":"Caijun7"},"content":"        week.setWeekSchedule(testWeekSchedule);"},{"lineNumber":93,"author":{"gitID":"Caijun7"},"content":"        Week sameTypeWeek \u003d new Week();"},{"lineNumber":94,"author":{"gitID":"Caijun7"},"content":"        sameTypeWeek.setWeekSchedule(testWeekSchedule);"},{"lineNumber":95,"author":{"gitID":"Caijun7"},"content":"        assertTrue(week.equals(sameTypeWeek));"},{"lineNumber":96,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":98,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"Caijun7"},"content":"    public void equals_nullInstance_false() {"},{"lineNumber":100,"author":{"gitID":"Caijun7"},"content":"        assertFalse(standardWeek.equals(null));"},{"lineNumber":101,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":103,"author":{"gitID":"Caijun7"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"Caijun7"},"content":"    public void equals_differentTypes_false() {"},{"lineNumber":105,"author":{"gitID":"Caijun7"},"content":"        assertFalse(standardWeek.equals(new WeekDay()));"},{"lineNumber":106,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":108,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":105,"-":3}},{"path":"src/test/java/seedu/address/testutil/AliasBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"jingyinno"},"content":"//@@author jingyinno"},{"lineNumber":6,"author":{"gitID":"jingyinno"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"jingyinno"},"content":" * A utility class to help with building Alias objects."},{"lineNumber":8,"author":{"gitID":"jingyinno"},"content":" */"},{"lineNumber":9,"author":{"gitID":"jingyinno"},"content":"public class AliasBuilder {"},{"lineNumber":10,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":11,"author":{"gitID":"jingyinno"},"content":"    public static final String DEFAULT_COMMAND \u003d \"add\";"},{"lineNumber":12,"author":{"gitID":"jingyinno"},"content":"    public static final String DEFAULT_ALIAS \u003d \"a\";"},{"lineNumber":13,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":14,"author":{"gitID":"jingyinno"},"content":"    private String command;"},{"lineNumber":15,"author":{"gitID":"jingyinno"},"content":"    private String alias;"},{"lineNumber":16,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":17,"author":{"gitID":"jingyinno"},"content":"    public AliasBuilder() {"},{"lineNumber":18,"author":{"gitID":"jingyinno"},"content":"        command \u003d DEFAULT_COMMAND;"},{"lineNumber":19,"author":{"gitID":"jingyinno"},"content":"        alias \u003d DEFAULT_ALIAS;"},{"lineNumber":20,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":21,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":23,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"jingyinno"},"content":"     * Initializes the AliasBuilder with the data of {@code aliasToCopy}."},{"lineNumber":25,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"jingyinno"},"content":"    public AliasBuilder(Alias aliasToCopy) {"},{"lineNumber":27,"author":{"gitID":"jingyinno"},"content":"        command \u003d aliasToCopy.getCommand();"},{"lineNumber":28,"author":{"gitID":"jingyinno"},"content":"        alias \u003d aliasToCopy.getAlias();"},{"lineNumber":29,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":31,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"jingyinno"},"content":"     * Sets the {@code command} of the {@code Alias} that we are building."},{"lineNumber":33,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"jingyinno"},"content":"    public AliasBuilder withCommand(String command) {"},{"lineNumber":35,"author":{"gitID":"jingyinno"},"content":"        this.command \u003d command;"},{"lineNumber":36,"author":{"gitID":"jingyinno"},"content":"        return this;"},{"lineNumber":37,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":39,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"jingyinno"},"content":"     * Sets the {@code alias} into a {@code Alias} that we are building."},{"lineNumber":41,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"jingyinno"},"content":"    public AliasBuilder withAlias(String alias) {"},{"lineNumber":43,"author":{"gitID":"jingyinno"},"content":"        this.alias \u003d alias;"},{"lineNumber":44,"author":{"gitID":"jingyinno"},"content":"        return this;"},{"lineNumber":45,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":47,"author":{"gitID":"jingyinno"},"content":"    public Alias build() {"},{"lineNumber":48,"author":{"gitID":"jingyinno"},"content":"        return new Alias(command, alias);"},{"lineNumber":49,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"jingyinno"},"content":"}"}],"authorContributionMap":{"jingyinno":46,"-":4}},{"path":"src/test/java/seedu/address/testutil/TypicalAliases.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.exceptions.DuplicateAliasException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"jingyinno"},"content":"//@@author jingyinno"},{"lineNumber":12,"author":{"gitID":"jingyinno"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"jingyinno"},"content":" * A utility class containing a list of {@code Alias} objects to be used in tests."},{"lineNumber":14,"author":{"gitID":"jingyinno"},"content":" */"},{"lineNumber":15,"author":{"gitID":"jingyinno"},"content":"public class TypicalAliases {"},{"lineNumber":16,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":17,"author":{"gitID":"jingyinno"},"content":"    public static final Alias ADD \u003d new AliasBuilder().withCommand(\"add\").withAlias(\"add1\").build();"},{"lineNumber":18,"author":{"gitID":"jingyinno"},"content":"    public static final Alias ALIAS  \u003d new AliasBuilder().withCommand(\"alias\").withAlias(\"alias1\").build();"},{"lineNumber":19,"author":{"gitID":"jingyinno"},"content":"    public static final Alias CLEAR \u003d new AliasBuilder().withCommand(\"clear\").withAlias(\"clear1\").build();"},{"lineNumber":20,"author":{"gitID":"jingyinno"},"content":"    public static final Alias DELETE \u003d new AliasBuilder().withCommand(\"delete\").withAlias(\"delete1\").build();"},{"lineNumber":21,"author":{"gitID":"jingyinno"},"content":"    public static final Alias EDIT \u003d new AliasBuilder().withCommand(\"edit\").withAlias(\"edit1\").build();"},{"lineNumber":22,"author":{"gitID":"jingyinno"},"content":"    public static final Alias EXIT \u003d new AliasBuilder().withCommand(\"exit\").withAlias(\"exit1\").build();"},{"lineNumber":23,"author":{"gitID":"jingyinno"},"content":"    public static final Alias FIND \u003d new AliasBuilder().withCommand(\"find\").withAlias(\"find1\").build();"},{"lineNumber":24,"author":{"gitID":"jingyinno"},"content":"    public static final Alias HELP \u003d new AliasBuilder().withCommand(\"help\").withAlias(\"help1\").build();"},{"lineNumber":25,"author":{"gitID":"jingyinno"},"content":"    public static final Alias HISTORY \u003d new AliasBuilder().withCommand(\"history\").withAlias(\"history1\").build();"},{"lineNumber":26,"author":{"gitID":"jingyinno"},"content":"    public static final Alias IMPORT \u003d new AliasBuilder().withCommand(\"import\").withAlias(\"import1\").build();"},{"lineNumber":27,"author":{"gitID":"jingyinno"},"content":"    public static final Alias LIST \u003d new AliasBuilder().withCommand(\"list\").withAlias(\"list1\").build();"},{"lineNumber":28,"author":{"gitID":"jingyinno"},"content":"    public static final Alias NONEXISTENT \u003d new AliasBuilder().withCommand(\"list\").withAlias(\"nonexistent\").build();"},{"lineNumber":29,"author":{"gitID":"jingyinno"},"content":"    public static final Alias REDO \u003d new AliasBuilder().withCommand(\"redo\").withAlias(\"redo1\").build();"},{"lineNumber":30,"author":{"gitID":"jingyinno"},"content":"    public static final Alias UNDO \u003d new AliasBuilder().withCommand(\"undo\").withAlias(\"undo1\").build();"},{"lineNumber":31,"author":{"gitID":"jingyinno"},"content":"    public static final Alias UPLOAD \u003d new AliasBuilder().withCommand(\"upload\").withAlias(\"911\").build();"},{"lineNumber":32,"author":{"gitID":"jingyinno"},"content":"    public static final Alias UNION \u003d new AliasBuilder().withCommand(\"union\").withAlias(\"union1\").build();"},{"lineNumber":33,"author":{"gitID":"jingyinno"},"content":"    public static final Alias UNKNOWN \u003d new AliasBuilder().withCommand(\"unknownCommand\").withAlias(\"add1\").build();"},{"lineNumber":34,"author":{"gitID":"jingyinno"},"content":"    public static final Alias MAP_1 \u003d new AliasBuilder().withCommand(\"map\").withAlias(\"map1\").build();"},{"lineNumber":35,"author":{"gitID":"jingyinno"},"content":"    public static final Alias MAP_2 \u003d new AliasBuilder().withCommand(\"map\").withAlias(\"map2\").build();"},{"lineNumber":36,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":37,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":38,"author":{"gitID":"jingyinno"},"content":"    private TypicalAliases() {} // prevents instantiation"},{"lineNumber":39,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":40,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"jingyinno"},"content":"     * Returns an {@code AddressBook} with all the typical aliases."},{"lineNumber":42,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"jingyinno"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":44,"author":{"gitID":"jingyinno"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":45,"author":{"gitID":"jingyinno"},"content":"        for (Alias alias : getTypicalAliases()) {"},{"lineNumber":46,"author":{"gitID":"jingyinno"},"content":"            try {"},{"lineNumber":47,"author":{"gitID":"jingyinno"},"content":"                ab.addAlias(alias);"},{"lineNumber":48,"author":{"gitID":"jingyinno"},"content":"            } catch (DuplicateAliasException e) {"},{"lineNumber":49,"author":{"gitID":"jingyinno"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":50,"author":{"gitID":"jingyinno"},"content":"            }"},{"lineNumber":51,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"jingyinno"},"content":"        return ab;"},{"lineNumber":53,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":55,"author":{"gitID":"jingyinno"},"content":"    public static List\u003cAlias\u003e getTypicalAliases() {"},{"lineNumber":56,"author":{"gitID":"jingyinno"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ADD, ALIAS, CLEAR, DELETE, EDIT, EXIT, HELP, HISTORY, LIST, REDO,"},{"lineNumber":57,"author":{"gitID":"jingyinno"},"content":"                UNDO, UNION, MAP_2, MAP_1, UPLOAD));"},{"lineNumber":58,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"jingyinno"},"content":"}"}],"authorContributionMap":{"jingyinno":49,"-":10}},{"path":"src/test/java/seedu/address/testutil/WeekDayBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"Caijun7"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":3,"author":{"gitID":"Caijun7"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":5,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.WeekDay;"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":"//@@author Caijun7"},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":" * A utility class to help with building {@code WeekDay} objects"},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":" */"},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":"public class WeekDayBuilder {"},{"lineNumber":12,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":"    public static final String DEFAULT_WEEKDAY \u003d \"Monday\";"},{"lineNumber":14,"author":{"gitID":"Caijun7"},"content":"    public static final String DEFAULT_ROOMNAME \u003d \"COM2-0108\";"},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":"    private HashMap\u003cString, String\u003e weekDaySchedule;"},{"lineNumber":17,"author":{"gitID":"Caijun7"},"content":"    private String weekday;"},{"lineNumber":18,"author":{"gitID":"Caijun7"},"content":"    private String roomName;"},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":"    public WeekDayBuilder() {"},{"lineNumber":21,"author":{"gitID":"Caijun7"},"content":"        weekday \u003d DEFAULT_WEEKDAY;"},{"lineNumber":22,"author":{"gitID":"Caijun7"},"content":"        roomName \u003d DEFAULT_ROOMNAME;"},{"lineNumber":23,"author":{"gitID":"Caijun7"},"content":"        weekDaySchedule \u003d createValidWeekDaySchedule();"},{"lineNumber":24,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":26,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"Caijun7"},"content":"     * Initializes the WeekDayBuilder with the data of {@code weekDayToCopy}."},{"lineNumber":28,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":"    public WeekDayBuilder(WeekDay weekDayToCopy) {"},{"lineNumber":30,"author":{"gitID":"Caijun7"},"content":"        weekday \u003d weekDayToCopy.getWeekday();"},{"lineNumber":31,"author":{"gitID":"Caijun7"},"content":"        roomName \u003d weekDayToCopy.getRoomName();"},{"lineNumber":32,"author":{"gitID":"Caijun7"},"content":"        weekDaySchedule \u003d weekDayToCopy.getWeekDaySchedule();"},{"lineNumber":33,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":35,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"Caijun7"},"content":"     * Creates a valid {@code weekDaySchedule}"},{"lineNumber":37,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"Caijun7"},"content":"    private HashMap\u003cString, String\u003e createValidWeekDaySchedule() {"},{"lineNumber":39,"author":{"gitID":"Caijun7"},"content":"        HashMap\u003cString, String\u003e validWeekDaySchedule \u003d new HashMap\u003c\u003e();"},{"lineNumber":40,"author":{"gitID":"Caijun7"},"content":"        validWeekDaySchedule.put(\"0800\", \"vacant\");"},{"lineNumber":41,"author":{"gitID":"Caijun7"},"content":"        validWeekDaySchedule.put(\"0900\", \"vacant\");"},{"lineNumber":42,"author":{"gitID":"Caijun7"},"content":"        validWeekDaySchedule.put(\"1000\", \"vacant\");"},{"lineNumber":43,"author":{"gitID":"Caijun7"},"content":"        validWeekDaySchedule.put(\"1100\", \"vacant\");"},{"lineNumber":44,"author":{"gitID":"Caijun7"},"content":"        validWeekDaySchedule.put(\"1200\", \"vacant\");"},{"lineNumber":45,"author":{"gitID":"Caijun7"},"content":"        validWeekDaySchedule.put(\"1300\", \"vacant\");"},{"lineNumber":46,"author":{"gitID":"Caijun7"},"content":"        validWeekDaySchedule.put(\"1400\", \"vacant\");"},{"lineNumber":47,"author":{"gitID":"Caijun7"},"content":"        validWeekDaySchedule.put(\"1500\", \"vacant\");"},{"lineNumber":48,"author":{"gitID":"Caijun7"},"content":"        validWeekDaySchedule.put(\"1600\", \"vacant\");"},{"lineNumber":49,"author":{"gitID":"Caijun7"},"content":"        validWeekDaySchedule.put(\"1700\", \"vacant\");"},{"lineNumber":50,"author":{"gitID":"Caijun7"},"content":"        validWeekDaySchedule.put(\"1800\", \"vacant\");"},{"lineNumber":51,"author":{"gitID":"Caijun7"},"content":"        validWeekDaySchedule.put(\"1900\", \"vacant\");"},{"lineNumber":52,"author":{"gitID":"Caijun7"},"content":"        validWeekDaySchedule.put(\"2000\", \"vacant\");"},{"lineNumber":53,"author":{"gitID":"Caijun7"},"content":"        return validWeekDaySchedule;"},{"lineNumber":54,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":56,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"Caijun7"},"content":"     * Sets the {@code weekday} of the {@code WeekDay} that we are building."},{"lineNumber":58,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"Caijun7"},"content":"    public WeekDayBuilder withWeekDay(String weekday) {"},{"lineNumber":60,"author":{"gitID":"Caijun7"},"content":"        this.weekday \u003d weekday;"},{"lineNumber":61,"author":{"gitID":"Caijun7"},"content":"        return this;"},{"lineNumber":62,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":64,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"Caijun7"},"content":"     * Sets the {@code roomName} into a {@code WeekDay} that we are building."},{"lineNumber":66,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"Caijun7"},"content":"    public WeekDayBuilder withRoomName(String roomName) {"},{"lineNumber":68,"author":{"gitID":"Caijun7"},"content":"        this.roomName \u003d roomName;"},{"lineNumber":69,"author":{"gitID":"Caijun7"},"content":"        return this;"},{"lineNumber":70,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":72,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"Caijun7"},"content":"     * Sets the {@code weekDaySchedule} into a {@code WeekDay} that we are building."},{"lineNumber":74,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"Caijun7"},"content":"    public WeekDayBuilder withWeekDaySchedule(HashMap\u003cString, String\u003e weekDaySchedule) {"},{"lineNumber":76,"author":{"gitID":"Caijun7"},"content":"        this.weekDaySchedule \u003d weekDaySchedule;"},{"lineNumber":77,"author":{"gitID":"Caijun7"},"content":"        return this;"},{"lineNumber":78,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":80,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"Caijun7"},"content":"     * Builds a {@code WeekDay} object"},{"lineNumber":82,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"Caijun7"},"content":"    public WeekDay build() {"},{"lineNumber":84,"author":{"gitID":"Caijun7"},"content":"        WeekDay weekDay \u003d new WeekDay();"},{"lineNumber":85,"author":{"gitID":"Caijun7"},"content":"        weekDay.setWeekday(weekday);"},{"lineNumber":86,"author":{"gitID":"Caijun7"},"content":"        weekDay.setRoomName(roomName);"},{"lineNumber":87,"author":{"gitID":"Caijun7"},"content":"        weekDay.setWeekDaySchedule(weekDaySchedule);"},{"lineNumber":88,"author":{"gitID":"Caijun7"},"content":"        return weekDay;"},{"lineNumber":89,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":90}},{"path":"src/test/java/guitests/guihandles/WebViewUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Helper methods for dealing with {@code WebView}."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class WebViewUtil {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Returns the {@code URL} of the currently loaded page in the {@code webView}."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static URL getLoadedUrl(WebView webView) {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"            return new URL(webView.getEngine().getLocation());"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"webView should not be displaying an invalid URL.\", mue);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * If the {@code browserPanelHandle}\u0027s {@code WebView} is loading, sleeps the thread till it is successfully loaded."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static void waitUntilBrowserLoaded(BrowserPanelHandle browserPanelHandle) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        new GuiRobot().waitForEvent(browserPanelHandle::isLoaded);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"jingyinno"},"content":"    //@@author jingyinno"},{"lineNumber":33,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"jingyinno"},"content":"     * If the {@code googleMapsDisplayHandle}\u0027s {@code WebView} is loading, sleeps the thread till it is"},{"lineNumber":35,"author":{"gitID":"jingyinno"},"content":"     * successfully loaded."},{"lineNumber":36,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"jingyinno"},"content":"    public static void waitUntilBrowserLoaded(GoogleMapsDisplayHandle googleMapsDisplayHandle) {"},{"lineNumber":38,"author":{"gitID":"jingyinno"},"content":"        new GuiRobot().waitForEvent(googleMapsDisplayHandle::isLoaded);"},{"lineNumber":39,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"jingyinno"},"content":"    //@@author"},{"lineNumber":41,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jingyinno":9,"-":32}},{"path":"src/test/java/guitests/guihandles/BirthdayNotificationHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.scene.control.DialogPane;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"AzuraAiR"},"content":"//@@author AzuraAiR"},{"lineNumber":7,"author":{"gitID":"AzuraAiR"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"AzuraAiR"},"content":" * A handle for the {@code BirthdayNotificationHandle} of the UI."},{"lineNumber":9,"author":{"gitID":"AzuraAiR"},"content":" */"},{"lineNumber":10,"author":{"gitID":"AzuraAiR"},"content":"public class BirthdayNotificationHandle extends StageHandle {"},{"lineNumber":11,"author":{"gitID":"AzuraAiR"},"content":"    private final DialogPane dialogPane;"},{"lineNumber":12,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":13,"author":{"gitID":"AzuraAiR"},"content":"    public BirthdayNotificationHandle(Stage stage) {"},{"lineNumber":14,"author":{"gitID":"AzuraAiR"},"content":"        super(stage);"},{"lineNumber":15,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":16,"author":{"gitID":"AzuraAiR"},"content":"        this.dialogPane \u003d getChildNode(\"#\" + \"birthdayDialogPane\");"},{"lineNumber":17,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":19,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"AzuraAiR"},"content":"     * Returns the text of the header in the {@code AlertDialog}."},{"lineNumber":21,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"AzuraAiR"},"content":"    public String getHeaderText() {"},{"lineNumber":23,"author":{"gitID":"AzuraAiR"},"content":"        return dialogPane.getHeaderText();"},{"lineNumber":24,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":26,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"AzuraAiR"},"content":"     * Returns the text of the content in the {@code AlertDialog}."},{"lineNumber":28,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"AzuraAiR"},"content":"    public String getContentText() {"},{"lineNumber":30,"author":{"gitID":"AzuraAiR"},"content":"        return dialogPane.getContentText();"},{"lineNumber":31,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"AzuraAiR"},"content":"}"}],"authorContributionMap":{"AzuraAiR":27,"-":5}},{"path":"src/test/java/guitests/guihandles/PersonCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Provides a handle to a person card in the person list panel."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#email\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Label addressLabel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Label phoneLabel;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Label emailLabel;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public PersonCardHandle(Node cardNode) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public String getAddress() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return addressLabel.getText();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public String getPhone() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return phoneLabel.getText();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public String getEmail() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return emailLabel.getText();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"yeggasd"},"content":"    //@@author yeggasd"},{"lineNumber":73,"author":{"gitID":"yeggasd"},"content":"    public List\u003cString\u003e getTagStyleClasses(String tag) {"},{"lineNumber":74,"author":{"gitID":"yeggasd"},"content":"        return tagLabels"},{"lineNumber":75,"author":{"gitID":"yeggasd"},"content":"                .stream()"},{"lineNumber":76,"author":{"gitID":"yeggasd"},"content":"                .filter(label -\u003e label.getText().equals(tag))"},{"lineNumber":77,"author":{"gitID":"yeggasd"},"content":"                .map(Label::getStyleClass)"},{"lineNumber":78,"author":{"gitID":"yeggasd"},"content":"                .findFirst()"},{"lineNumber":79,"author":{"gitID":"yeggasd"},"content":"                .orElseThrow(() -\u003e new IllegalArgumentException(\"No such tag.\"));"},{"lineNumber":80,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"yeggasd"},"content":"    //@@author"},{"lineNumber":82,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yeggasd":10,"-":72}},{"path":"src/test/java/guitests/guihandles/BirthdayListHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"AzuraAiR"},"content":"//@@author AzuraAiR"},{"lineNumber":6,"author":{"gitID":"AzuraAiR"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"AzuraAiR"},"content":" * A handler for the {@code BirthdayList} of the UI"},{"lineNumber":8,"author":{"gitID":"AzuraAiR"},"content":" */"},{"lineNumber":9,"author":{"gitID":"AzuraAiR"},"content":"public class BirthdayListHandle extends NodeHandle\u003cTextArea\u003e {"},{"lineNumber":10,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":11,"author":{"gitID":"AzuraAiR"},"content":"    public static final String BIRTHDAYS_LIST_ID \u003d \"#birthdayList\";"},{"lineNumber":12,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":13,"author":{"gitID":"AzuraAiR"},"content":"    public BirthdayListHandle(TextArea birthdayListDisplayNode) {"},{"lineNumber":14,"author":{"gitID":"AzuraAiR"},"content":"        super(birthdayListDisplayNode);"},{"lineNumber":15,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":17,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"AzuraAiR"},"content":"     * Returns the text in the birthday list"},{"lineNumber":19,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"AzuraAiR"},"content":"    public String getText() {"},{"lineNumber":21,"author":{"gitID":"AzuraAiR"},"content":"        return getRootNode().getText();"},{"lineNumber":22,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":24,"author":{"gitID":"AzuraAiR"},"content":"    public boolean getFront() {"},{"lineNumber":25,"author":{"gitID":"AzuraAiR"},"content":"        return getRootNode().getChildrenUnmodifiable().get(0).equals(this);"},{"lineNumber":26,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":28,"author":{"gitID":"AzuraAiR"},"content":"}"}],"authorContributionMap":{"AzuraAiR":24,"-":4}},{"path":"src/test/java/guitests/guihandles/GoogleMapsDisplayHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.concurrent.Worker;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebEngine;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"jingyinno"},"content":"//@@author jingyinno"},{"lineNumber":12,"author":{"gitID":"jingyinno"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"jingyinno"},"content":" * A handle for the {@code AlertDialog} of the UI."},{"lineNumber":14,"author":{"gitID":"jingyinno"},"content":" */"},{"lineNumber":15,"author":{"gitID":"jingyinno"},"content":"public class GoogleMapsDisplayHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":16,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":17,"author":{"gitID":"jingyinno"},"content":"    public static final String MAP_ID \u003d \"#maps\";"},{"lineNumber":18,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":19,"author":{"gitID":"jingyinno"},"content":"    private boolean isWebViewLoaded \u003d true;"},{"lineNumber":20,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":21,"author":{"gitID":"jingyinno"},"content":"    private URL lastRememberedUrl;"},{"lineNumber":22,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":23,"author":{"gitID":"jingyinno"},"content":"    public GoogleMapsDisplayHandle(Node mapPanelNode) {"},{"lineNumber":24,"author":{"gitID":"jingyinno"},"content":"        super(mapPanelNode);"},{"lineNumber":25,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":26,"author":{"gitID":"jingyinno"},"content":"        WebView webView \u003d getChildNode(MAP_ID);"},{"lineNumber":27,"author":{"gitID":"jingyinno"},"content":"        WebEngine engine \u003d webView.getEngine();"},{"lineNumber":28,"author":{"gitID":"jingyinno"},"content":"        new GuiRobot().interact(() -\u003e engine.getLoadWorker().stateProperty().addListener((obs, oldState, newState) -\u003e {"},{"lineNumber":29,"author":{"gitID":"jingyinno"},"content":"            if (newState \u003d\u003d Worker.State.RUNNING) {"},{"lineNumber":30,"author":{"gitID":"jingyinno"},"content":"                isWebViewLoaded \u003d false;"},{"lineNumber":31,"author":{"gitID":"jingyinno"},"content":"            } else if (newState \u003d\u003d Worker.State.SUCCEEDED) {"},{"lineNumber":32,"author":{"gitID":"jingyinno"},"content":"                isWebViewLoaded \u003d true;"},{"lineNumber":33,"author":{"gitID":"jingyinno"},"content":"            }"},{"lineNumber":34,"author":{"gitID":"jingyinno"},"content":"        }));"},{"lineNumber":35,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":37,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"jingyinno"},"content":"     * Returns the {@code URL} of the currently loaded page."},{"lineNumber":39,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"jingyinno"},"content":"    public URL getLoadedUrl() {"},{"lineNumber":41,"author":{"gitID":"jingyinno"},"content":"        return WebViewUtil.getLoadedUrl(getChildNode(MAP_ID));"},{"lineNumber":42,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":44,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"jingyinno"},"content":"     * Remembers the {@code URL} of the currently loaded page."},{"lineNumber":46,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"jingyinno"},"content":"    public void rememberUrl() {"},{"lineNumber":48,"author":{"gitID":"jingyinno"},"content":"        lastRememberedUrl \u003d getLoadedUrl();"},{"lineNumber":49,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":51,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"jingyinno"},"content":"     * Returns true if the browser is done loading a page, or if this browser has yet to load any page."},{"lineNumber":53,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"jingyinno"},"content":"    public boolean isLoaded() {"},{"lineNumber":55,"author":{"gitID":"jingyinno"},"content":"        return isWebViewLoaded;"},{"lineNumber":56,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"jingyinno"},"content":"}"}],"authorContributionMap":{"jingyinno":47,"-":10}},{"path":"src/main/java/seedu/address/ui/AliasList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.beans.property.SimpleStringProperty;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.TableCell;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.TableColumn;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.TableView;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"jingyinno"},"content":"//@@author jingyinno"},{"lineNumber":14,"author":{"gitID":"jingyinno"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"jingyinno"},"content":" * A ui for the info panel that is displayed when the list command is called."},{"lineNumber":16,"author":{"gitID":"jingyinno"},"content":" */"},{"lineNumber":17,"author":{"gitID":"jingyinno"},"content":"public class AliasList extends UiPart\u003cRegion\u003e {"},{"lineNumber":18,"author":{"gitID":"jingyinno"},"content":"    private static final String FXML \u003d \"AliasList.fxml\";"},{"lineNumber":19,"author":{"gitID":"jingyinno"},"content":"    private static final String EMPTY_CELL \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"jingyinno"},"content":"    private static final String ODD_COLUMN_STYLE_CLASS \u003d \"alias-column-odd\";"},{"lineNumber":21,"author":{"gitID":"jingyinno"},"content":"    private static final String EVEN_COLUMN_STYLE_CLASS \u003d \"alias-column-even\";"},{"lineNumber":22,"author":{"gitID":"jingyinno"},"content":"    private static final int SHORT_COMMAND_WIDTH \u003d 75;"},{"lineNumber":23,"author":{"gitID":"jingyinno"},"content":"    private static final int LONG_COMMAND_WIDTH \u003d 100;"},{"lineNumber":24,"author":{"gitID":"jingyinno"},"content":"    private static final int LONG_COMMAND_INDEX \u003d 2;"},{"lineNumber":25,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":26,"author":{"gitID":"jingyinno"},"content":"    private ArrayList\u003cTableColumn\u003cArrayList\u003cString\u003e, String\u003e\u003e columns;"},{"lineNumber":27,"author":{"gitID":"jingyinno"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"jingyinno"},"content":"    private TableView aliasList;"},{"lineNumber":29,"author":{"gitID":"jingyinno"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"jingyinno"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e addCommand;"},{"lineNumber":31,"author":{"gitID":"jingyinno"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"jingyinno"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e editCommand;"},{"lineNumber":33,"author":{"gitID":"jingyinno"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"jingyinno"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e selectCommand;"},{"lineNumber":35,"author":{"gitID":"jingyinno"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"jingyinno"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e deleteComamnd;"},{"lineNumber":37,"author":{"gitID":"jingyinno"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"jingyinno"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e clearCommand;"},{"lineNumber":39,"author":{"gitID":"jingyinno"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"jingyinno"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e findCommand;"},{"lineNumber":41,"author":{"gitID":"jingyinno"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"jingyinno"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e listCommand;"},{"lineNumber":43,"author":{"gitID":"jingyinno"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"jingyinno"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e historyCommand;"},{"lineNumber":45,"author":{"gitID":"jingyinno"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"jingyinno"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e exitCommand;"},{"lineNumber":47,"author":{"gitID":"jingyinno"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitID":"jingyinno"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e helpCommand;"},{"lineNumber":49,"author":{"gitID":"jingyinno"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitID":"jingyinno"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e undoCommand;"},{"lineNumber":51,"author":{"gitID":"jingyinno"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitID":"jingyinno"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e redoCommand;"},{"lineNumber":53,"author":{"gitID":"jingyinno"},"content":"    @FXML"},{"lineNumber":54,"author":{"gitID":"jingyinno"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e aliasCommand;"},{"lineNumber":55,"author":{"gitID":"jingyinno"},"content":"    @FXML"},{"lineNumber":56,"author":{"gitID":"jingyinno"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e importCommand;"},{"lineNumber":57,"author":{"gitID":"jingyinno"},"content":"    @FXML"},{"lineNumber":58,"author":{"gitID":"jingyinno"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e passwordCommand;"},{"lineNumber":59,"author":{"gitID":"jingyinno"},"content":"    @FXML"},{"lineNumber":60,"author":{"gitID":"jingyinno"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e birthdaysCommand;"},{"lineNumber":61,"author":{"gitID":"jingyinno"},"content":"    @FXML"},{"lineNumber":62,"author":{"gitID":"jingyinno"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e exportCommand;"},{"lineNumber":63,"author":{"gitID":"jingyinno"},"content":"    @FXML"},{"lineNumber":64,"author":{"gitID":"jingyinno"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e mapCommand;"},{"lineNumber":65,"author":{"gitID":"jingyinno"},"content":"    @FXML"},{"lineNumber":66,"author":{"gitID":"jingyinno"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e removePasswordCommand;"},{"lineNumber":67,"author":{"gitID":"jingyinno"},"content":"    @FXML"},{"lineNumber":68,"author":{"gitID":"jingyinno"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e unaliasCommand;"},{"lineNumber":69,"author":{"gitID":"jingyinno"},"content":"    @FXML"},{"lineNumber":70,"author":{"gitID":"jingyinno"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e vacantCommand;"},{"lineNumber":71,"author":{"gitID":"jingyinno"},"content":"    @FXML"},{"lineNumber":72,"author":{"gitID":"jingyinno"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e unionCommand;"},{"lineNumber":73,"author":{"gitID":"jingyinno"},"content":"    @FXML"},{"lineNumber":74,"author":{"gitID":"jingyinno"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e uploadCommand;"},{"lineNumber":75,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":76,"author":{"gitID":"jingyinno"},"content":"    public AliasList()  {"},{"lineNumber":77,"author":{"gitID":"jingyinno"},"content":"        super(FXML);"},{"lineNumber":78,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":80,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"jingyinno"},"content":"     * Initializes columns"},{"lineNumber":82,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"jingyinno"},"content":"    private void initializeColumns() {"},{"lineNumber":84,"author":{"gitID":"jingyinno"},"content":"        columns \u003d new ArrayList\u003c\u003e();"},{"lineNumber":85,"author":{"gitID":"jingyinno"},"content":"        columns.add(addCommand);"},{"lineNumber":86,"author":{"gitID":"jingyinno"},"content":"        columns.add(aliasCommand);"},{"lineNumber":87,"author":{"gitID":"jingyinno"},"content":"        columns.add(birthdaysCommand);"},{"lineNumber":88,"author":{"gitID":"jingyinno"},"content":"        columns.add(clearCommand);"},{"lineNumber":89,"author":{"gitID":"jingyinno"},"content":"        columns.add(removePasswordCommand);"},{"lineNumber":90,"author":{"gitID":"jingyinno"},"content":"        columns.add(deleteComamnd);"},{"lineNumber":91,"author":{"gitID":"jingyinno"},"content":"        columns.add(editCommand);"},{"lineNumber":92,"author":{"gitID":"jingyinno"},"content":"        columns.add(passwordCommand);"},{"lineNumber":93,"author":{"gitID":"jingyinno"},"content":"        columns.add(exitCommand);"},{"lineNumber":94,"author":{"gitID":"jingyinno"},"content":"        columns.add(exportCommand);"},{"lineNumber":95,"author":{"gitID":"jingyinno"},"content":"        columns.add(findCommand);"},{"lineNumber":96,"author":{"gitID":"jingyinno"},"content":"        columns.add(helpCommand);"},{"lineNumber":97,"author":{"gitID":"jingyinno"},"content":"        columns.add(historyCommand);"},{"lineNumber":98,"author":{"gitID":"jingyinno"},"content":"        columns.add(importCommand);"},{"lineNumber":99,"author":{"gitID":"jingyinno"},"content":"        columns.add(listCommand);"},{"lineNumber":100,"author":{"gitID":"jingyinno"},"content":"        columns.add(mapCommand);"},{"lineNumber":101,"author":{"gitID":"jingyinno"},"content":"        columns.add(redoCommand);"},{"lineNumber":102,"author":{"gitID":"jingyinno"},"content":"        columns.add(selectCommand);"},{"lineNumber":103,"author":{"gitID":"jingyinno"},"content":"        columns.add(unaliasCommand);"},{"lineNumber":104,"author":{"gitID":"jingyinno"},"content":"        columns.add(undoCommand);"},{"lineNumber":105,"author":{"gitID":"jingyinno"},"content":"        columns.add(unionCommand);"},{"lineNumber":106,"author":{"gitID":"jingyinno"},"content":"        columns.add(uploadCommand);"},{"lineNumber":107,"author":{"gitID":"jingyinno"},"content":"        columns.add(vacantCommand);"},{"lineNumber":108,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":110,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"jingyinno"},"content":"     * Initializes alias list Ui"},{"lineNumber":112,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"jingyinno"},"content":"    public void init(ObservableList\u003cArrayList\u003cString\u003e\u003e aliases) {"},{"lineNumber":114,"author":{"gitID":"jingyinno"},"content":"        aliasList.setItems(aliases);"},{"lineNumber":115,"author":{"gitID":"jingyinno"},"content":"        initializeColumns();"},{"lineNumber":116,"author":{"gitID":"jingyinno"},"content":"        initializeTableColumns();"},{"lineNumber":117,"author":{"gitID":"jingyinno"},"content":"        aliasList.setColumnResizePolicy(TableView.UNCONSTRAINED_RESIZE_POLICY);"},{"lineNumber":118,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":120,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"jingyinno"},"content":"     * Initializes table columns"},{"lineNumber":122,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"jingyinno"},"content":"    private void initializeTableColumns() {"},{"lineNumber":124,"author":{"gitID":"jingyinno"},"content":"        for (int i \u003d 0; i \u003c columns.size(); i++) {"},{"lineNumber":125,"author":{"gitID":"jingyinno"},"content":"            final int index \u003d i;"},{"lineNumber":126,"author":{"gitID":"jingyinno"},"content":"            columns.get(i).setCellValueFactory(cellData -\u003e new SimpleStringProperty(cellData.getValue().get(index)));"},{"lineNumber":127,"author":{"gitID":"jingyinno"},"content":"            columns.get(i).impl_setReorderable(false);"},{"lineNumber":128,"author":{"gitID":"jingyinno"},"content":"            if (i \u003d\u003d LONG_COMMAND_INDEX) {"},{"lineNumber":129,"author":{"gitID":"jingyinno"},"content":"                columns.get(i).setMinWidth(LONG_COMMAND_WIDTH);"},{"lineNumber":130,"author":{"gitID":"jingyinno"},"content":"            } else {"},{"lineNumber":131,"author":{"gitID":"jingyinno"},"content":"                columns.get(i).setMinWidth(SHORT_COMMAND_WIDTH);"},{"lineNumber":132,"author":{"gitID":"jingyinno"},"content":"            }"},{"lineNumber":133,"author":{"gitID":"jingyinno"},"content":"            columns.get(i).setSortable(false);"},{"lineNumber":134,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":135,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"jingyinno"},"content":"     * Sets the command box style to indicate an alias belonging to the command."},{"lineNumber":139,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"jingyinno"},"content":"    public void setStyle() {"},{"lineNumber":141,"author":{"gitID":"jingyinno"},"content":"        for (int i \u003d 0; i \u003c columns.size(); i++) {"},{"lineNumber":142,"author":{"gitID":"jingyinno"},"content":"            final int index \u003d i;"},{"lineNumber":143,"author":{"gitID":"jingyinno"},"content":"            columns.get(i).setCellFactory(column -\u003e {"},{"lineNumber":144,"author":{"gitID":"jingyinno"},"content":"                return new TableCell\u003cArrayList\u003cString\u003e, String\u003e() {"},{"lineNumber":145,"author":{"gitID":"jingyinno"},"content":"                    @Override"},{"lineNumber":146,"author":{"gitID":"jingyinno"},"content":"                    protected void updateItem(String item, boolean empty) {"},{"lineNumber":147,"author":{"gitID":"jingyinno"},"content":"                        super.updateItem(item, empty);"},{"lineNumber":148,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":149,"author":{"gitID":"jingyinno"},"content":"                        if (item \u003d\u003d null || empty) {"},{"lineNumber":150,"author":{"gitID":"jingyinno"},"content":"                            setText(null);"},{"lineNumber":151,"author":{"gitID":"jingyinno"},"content":"                            setStyle(EMPTY_CELL);"},{"lineNumber":152,"author":{"gitID":"jingyinno"},"content":"                        } else {"},{"lineNumber":153,"author":{"gitID":"jingyinno"},"content":"                            removeAllStyle(this);"},{"lineNumber":154,"author":{"gitID":"jingyinno"},"content":"                            setText(item);"},{"lineNumber":155,"author":{"gitID":"jingyinno"},"content":"                            if (!EMPTY_CELL.equals(getItem())) {"},{"lineNumber":156,"author":{"gitID":"jingyinno"},"content":"                                fillOddAndEvenIndexedCells();"},{"lineNumber":157,"author":{"gitID":"jingyinno"},"content":"                            }"},{"lineNumber":158,"author":{"gitID":"jingyinno"},"content":"                        }"},{"lineNumber":159,"author":{"gitID":"jingyinno"},"content":"                    }"},{"lineNumber":160,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":161,"author":{"gitID":"jingyinno"},"content":"                    private void fillOddAndEvenIndexedCells() {"},{"lineNumber":162,"author":{"gitID":"jingyinno"},"content":"                        if (index % 2 \u003d\u003d 0) {"},{"lineNumber":163,"author":{"gitID":"jingyinno"},"content":"                            getStyleClass().add(EVEN_COLUMN_STYLE_CLASS);"},{"lineNumber":164,"author":{"gitID":"jingyinno"},"content":"                        } else {"},{"lineNumber":165,"author":{"gitID":"jingyinno"},"content":"                            getStyleClass().add(ODD_COLUMN_STYLE_CLASS);"},{"lineNumber":166,"author":{"gitID":"jingyinno"},"content":"                        }"},{"lineNumber":167,"author":{"gitID":"jingyinno"},"content":"                    }"},{"lineNumber":168,"author":{"gitID":"jingyinno"},"content":"                };"},{"lineNumber":169,"author":{"gitID":"jingyinno"},"content":"            });"},{"lineNumber":170,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":173,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"jingyinno"},"content":"     * Removes all styles present in cell"},{"lineNumber":175,"author":{"gitID":"jingyinno"},"content":"     * @param tableCell Cell with its style to be removed"},{"lineNumber":176,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"jingyinno"},"content":"    private static void removeAllStyle(TableCell\u003cArrayList\u003cString\u003e, String\u003e tableCell) {"},{"lineNumber":178,"author":{"gitID":"jingyinno"},"content":"        tableCell.getStyleClass().remove(ODD_COLUMN_STYLE_CLASS);"},{"lineNumber":179,"author":{"gitID":"jingyinno"},"content":"        tableCell.getStyleClass().remove(EVEN_COLUMN_STYLE_CLASS);"},{"lineNumber":180,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"jingyinno"},"content":"}"}],"authorContributionMap":{"jingyinno":169,"-":12}},{"path":"src/test/java/guitests/guihandles/AliasListHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.TableColumn;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.control.TableView;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"jingyinno"},"content":"//@@author jingyinno"},{"lineNumber":8,"author":{"gitID":"jingyinno"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"jingyinno"},"content":" * A handler for the {@code AliasList} of the UI"},{"lineNumber":10,"author":{"gitID":"jingyinno"},"content":" */"},{"lineNumber":11,"author":{"gitID":"jingyinno"},"content":"public class AliasListHandle extends NodeHandle\u003cTableView\u003e {"},{"lineNumber":12,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":13,"author":{"gitID":"jingyinno"},"content":"    public static final String ALIAS_LIST_ID \u003d \"#aliasList\";"},{"lineNumber":14,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":15,"author":{"gitID":"jingyinno"},"content":"    public AliasListHandle(TableView aliasListNode) {"},{"lineNumber":16,"author":{"gitID":"jingyinno"},"content":"        super(aliasListNode);"},{"lineNumber":17,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":19,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"jingyinno"},"content":"     * Returns the tables in the alias list"},{"lineNumber":21,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"jingyinno"},"content":"    public ObservableList\u003cTableColumn\u003e getTables() {"},{"lineNumber":23,"author":{"gitID":"jingyinno"},"content":"        return getRootNode().getColumns();"},{"lineNumber":24,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"jingyinno"},"content":"}"}],"authorContributionMap":{"jingyinno":19,"-":6}},{"path":"src/test/java/guitests/guihandles/PasswordBoxHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.ui.PasswordBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"yeggasd"},"content":"//@@author yeggasd"},{"lineNumber":9,"author":{"gitID":"yeggasd"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"yeggasd"},"content":" * A handle to the {@code CommandBox} in the GUI."},{"lineNumber":11,"author":{"gitID":"yeggasd"},"content":" */"},{"lineNumber":12,"author":{"gitID":"yeggasd"},"content":"public class PasswordBoxHandle extends NodeHandle\u003cTextField\u003e {"},{"lineNumber":13,"author":{"gitID":"yeggasd"},"content":"    public static final String PASSWORD_WINDOW_TITLE \u003d \"Password\";"},{"lineNumber":14,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":15,"author":{"gitID":"yeggasd"},"content":"    public static final String PASSWORD_INPUT_FIELD_ID \u003d \"#passwordTextField\";"},{"lineNumber":16,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":17,"author":{"gitID":"yeggasd"},"content":"    public PasswordBoxHandle(TextField passwordBoxNode) {"},{"lineNumber":18,"author":{"gitID":"yeggasd"},"content":"        super(passwordBoxNode);"},{"lineNumber":19,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":21,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"yeggasd"},"content":"     * Returns the text in the command box."},{"lineNumber":23,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"yeggasd"},"content":"    public String getInput() {"},{"lineNumber":25,"author":{"gitID":"yeggasd"},"content":"        return getRootNode().getText();"},{"lineNumber":26,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":28,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"yeggasd"},"content":"     * Enters the given command in the Command Box and presses enter."},{"lineNumber":30,"author":{"gitID":"yeggasd"},"content":"     * @return true if the command succeeded, false otherwise."},{"lineNumber":31,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"yeggasd"},"content":"    public boolean run(String password) {"},{"lineNumber":33,"author":{"gitID":"yeggasd"},"content":"        click();"},{"lineNumber":34,"author":{"gitID":"yeggasd"},"content":"        guiRobot.interact(() -\u003e getRootNode().setText(password));"},{"lineNumber":35,"author":{"gitID":"yeggasd"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":36,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":37,"author":{"gitID":"yeggasd"},"content":"        guiRobot.type(KeyCode.ENTER);"},{"lineNumber":38,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":39,"author":{"gitID":"yeggasd"},"content":"        return !getStyleClass().contains(PasswordBox.ERROR_STYLE_CLASS);"},{"lineNumber":40,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":42,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"yeggasd"},"content":"     * Returns the list of style classes present in the command box."},{"lineNumber":44,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"yeggasd"},"content":"    public ObservableList\u003cString\u003e getStyleClass() {"},{"lineNumber":46,"author":{"gitID":"yeggasd"},"content":"        return getRootNode().getStyleClass();"},{"lineNumber":47,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"yeggasd"},"content":"}"}],"authorContributionMap":{"yeggasd":41,"-":7}},{"path":"src/main/java/seedu/address/ui/GoogleMapsDisplay.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.event.Event;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"jingyinno"},"content":"//@@author jingyinno"},{"lineNumber":13,"author":{"gitID":"jingyinno"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"jingyinno"},"content":" * A ui for the info panel that is displayed when the map command is called."},{"lineNumber":15,"author":{"gitID":"jingyinno"},"content":" */"},{"lineNumber":16,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":17,"author":{"gitID":"jingyinno"},"content":"public class GoogleMapsDisplay extends UiPart\u003cRegion\u003e {"},{"lineNumber":18,"author":{"gitID":"jingyinno"},"content":"    public static final String DEFAULT_PAGE \u003d \"default.html\";"},{"lineNumber":19,"author":{"gitID":"jingyinno"},"content":"    public static final String MAP_SEARCH_URL_PREFIX \u003d \"https://www.google.com/maps/search/\";"},{"lineNumber":20,"author":{"gitID":"jingyinno"},"content":"    public static final String MAP_DIRECTIONS_URL_PREFIX \u003d \"https://www.google.com/maps/dir/\";"},{"lineNumber":21,"author":{"gitID":"jingyinno"},"content":"    private static final String FXML \u003d \"GoogleMapsDisplay.fxml\";"},{"lineNumber":22,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":23,"author":{"gitID":"jingyinno"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitID":"jingyinno"},"content":"    private WebView maps;"},{"lineNumber":25,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":26,"author":{"gitID":"jingyinno"},"content":"    public GoogleMapsDisplay() {"},{"lineNumber":27,"author":{"gitID":"jingyinno"},"content":"        this(null);"},{"lineNumber":28,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":30,"author":{"gitID":"jingyinno"},"content":"    public GoogleMapsDisplay(String locations) {"},{"lineNumber":31,"author":{"gitID":"jingyinno"},"content":"        super(FXML);"},{"lineNumber":32,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":33,"author":{"gitID":"jingyinno"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":34,"author":{"gitID":"jingyinno"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":35,"author":{"gitID":"jingyinno"},"content":"        loadDefaultPage();"},{"lineNumber":36,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":38,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"jingyinno"},"content":"     * Loads the Google Maps page with the location."},{"lineNumber":40,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"jingyinno"},"content":"    public void loadMapPage(String location) {"},{"lineNumber":42,"author":{"gitID":"jingyinno"},"content":"        String address \u003d MAP_SEARCH_URL_PREFIX + location;"},{"lineNumber":43,"author":{"gitID":"jingyinno"},"content":"        loadPage(address);"},{"lineNumber":44,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":46,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"jingyinno"},"content":"     * Loads the Google Maps page with the directions between locations."},{"lineNumber":48,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"jingyinno"},"content":"    public void loadMapDirections(String locations) {"},{"lineNumber":50,"author":{"gitID":"jingyinno"},"content":"        String address \u003d MAP_DIRECTIONS_URL_PREFIX + locations;"},{"lineNumber":51,"author":{"gitID":"jingyinno"},"content":"        loadPage(address);"},{"lineNumber":52,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":54,"author":{"gitID":"jingyinno"},"content":"    public void loadPage(String url) {"},{"lineNumber":55,"author":{"gitID":"jingyinno"},"content":"        Platform.runLater(() -\u003e maps.getEngine().load(url));"},{"lineNumber":56,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":58,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"jingyinno"},"content":"     * Loads a default HTML file with a background that matches the general theme."},{"lineNumber":60,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"jingyinno"},"content":"    private void loadDefaultPage() {"},{"lineNumber":62,"author":{"gitID":"jingyinno"},"content":"        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":63,"author":{"gitID":"jingyinno"},"content":"        loadPage(defaultPage.toExternalForm());"},{"lineNumber":64,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":66,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"jingyinno"},"content":"     * Frees resources allocated to the browser."},{"lineNumber":68,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"jingyinno"},"content":"    public void freeResources() {"},{"lineNumber":70,"author":{"gitID":"jingyinno"},"content":"        maps \u003d null;"},{"lineNumber":71,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"jingyinno"},"content":"}"}],"authorContributionMap":{"jingyinno":61,"-":11}},{"path":"src/test/java/guitests/guihandles/PersonDetailsCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":""},{"lineNumber":2,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.TableView;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"yeggasd"},"content":"//@@author yeggasd"},{"lineNumber":13,"author":{"gitID":"yeggasd"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"yeggasd"},"content":" * Provides a handle to a person details card in the main window."},{"lineNumber":15,"author":{"gitID":"yeggasd"},"content":" */"},{"lineNumber":16,"author":{"gitID":"yeggasd"},"content":"public class PersonDetailsCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":17,"author":{"gitID":"yeggasd"},"content":"    public static final String PERSON_DETAILS_CARD_PLACEHOLDER \u003d \"#personDetailsCard\";"},{"lineNumber":18,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":19,"author":{"gitID":"yeggasd"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":20,"author":{"gitID":"yeggasd"},"content":"    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"},{"lineNumber":21,"author":{"gitID":"yeggasd"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":22,"author":{"gitID":"yeggasd"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#email\";"},{"lineNumber":23,"author":{"gitID":"yeggasd"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":24,"author":{"gitID":"yeggasd"},"content":"    private static final String TIMETABLE_FIELD_ID \u003d \"#timeTable\";"},{"lineNumber":25,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":26,"author":{"gitID":"yeggasd"},"content":"    private final Label nameLabel;"},{"lineNumber":27,"author":{"gitID":"yeggasd"},"content":"    private final Label addressLabel;"},{"lineNumber":28,"author":{"gitID":"yeggasd"},"content":"    private final Label phoneLabel;"},{"lineNumber":29,"author":{"gitID":"yeggasd"},"content":"    private final Label emailLabel;"},{"lineNumber":30,"author":{"gitID":"yeggasd"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":31,"author":{"gitID":"yeggasd"},"content":"    private final TableView timeTable;"},{"lineNumber":32,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":33,"author":{"gitID":"yeggasd"},"content":"    public PersonDetailsCardHandle(Node cardNode) {"},{"lineNumber":34,"author":{"gitID":"yeggasd"},"content":"        super(cardNode);"},{"lineNumber":35,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":36,"author":{"gitID":"yeggasd"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":37,"author":{"gitID":"yeggasd"},"content":"        this.addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"},{"lineNumber":38,"author":{"gitID":"yeggasd"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":39,"author":{"gitID":"yeggasd"},"content":"        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"},{"lineNumber":40,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":41,"author":{"gitID":"yeggasd"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":42,"author":{"gitID":"yeggasd"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":43,"author":{"gitID":"yeggasd"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":44,"author":{"gitID":"yeggasd"},"content":"                .stream()"},{"lineNumber":45,"author":{"gitID":"yeggasd"},"content":"                .map(Label.class::cast)"},{"lineNumber":46,"author":{"gitID":"yeggasd"},"content":"                .collect(Collectors.toList());"},{"lineNumber":47,"author":{"gitID":"yeggasd"},"content":"        this.timeTable \u003d getChildNode(TIMETABLE_FIELD_ID);"},{"lineNumber":48,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":50,"author":{"gitID":"yeggasd"},"content":"    public String getName() {"},{"lineNumber":51,"author":{"gitID":"yeggasd"},"content":"        return nameLabel.getText();"},{"lineNumber":52,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":54,"author":{"gitID":"yeggasd"},"content":"    public String getAddress() {"},{"lineNumber":55,"author":{"gitID":"yeggasd"},"content":"        return addressLabel.getText();"},{"lineNumber":56,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":58,"author":{"gitID":"yeggasd"},"content":"    public String getPhone() {"},{"lineNumber":59,"author":{"gitID":"yeggasd"},"content":"        return phoneLabel.getText();"},{"lineNumber":60,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":62,"author":{"gitID":"yeggasd"},"content":"    public String getEmail() {"},{"lineNumber":63,"author":{"gitID":"yeggasd"},"content":"        return emailLabel.getText();"},{"lineNumber":64,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":66,"author":{"gitID":"yeggasd"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":67,"author":{"gitID":"yeggasd"},"content":"        return tagLabels"},{"lineNumber":68,"author":{"gitID":"yeggasd"},"content":"                .stream()"},{"lineNumber":69,"author":{"gitID":"yeggasd"},"content":"                .map(Label::getText)"},{"lineNumber":70,"author":{"gitID":"yeggasd"},"content":"                .collect(Collectors.toList());"},{"lineNumber":71,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":73,"author":{"gitID":"yeggasd"},"content":"    public TableView getTimeTable() {"},{"lineNumber":74,"author":{"gitID":"yeggasd"},"content":"        return timeTable;"},{"lineNumber":75,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":77,"author":{"gitID":"yeggasd"},"content":"    public List\u003cString\u003e getTagStyleClasses(String tag) {"},{"lineNumber":78,"author":{"gitID":"yeggasd"},"content":"        return tagLabels"},{"lineNumber":79,"author":{"gitID":"yeggasd"},"content":"                .stream()"},{"lineNumber":80,"author":{"gitID":"yeggasd"},"content":"                .filter(label -\u003e label.getText().equals(tag))"},{"lineNumber":81,"author":{"gitID":"yeggasd"},"content":"                .map(Label::getStyleClass)"},{"lineNumber":82,"author":{"gitID":"yeggasd"},"content":"                .findFirst()"},{"lineNumber":83,"author":{"gitID":"yeggasd"},"content":"                .orElseThrow(() -\u003e new IllegalArgumentException(\"No such tag.\"));"},{"lineNumber":84,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"yeggasd"},"content":"}"},{"lineNumber":86,"author":{"gitID":"yeggasd"},"content":""}],"authorContributionMap":{"yeggasd":75,"-":11}},{"path":"src/main/java/seedu/address/ui/PasswordWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"yeggasd"},"content":"//@@author yeggasd"},{"lineNumber":11,"author":{"gitID":"yeggasd"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"yeggasd"},"content":" * The Password Window. Provides the basic application layout containing"},{"lineNumber":13,"author":{"gitID":"yeggasd"},"content":" * space where other JavaFX elements can be placed."},{"lineNumber":14,"author":{"gitID":"yeggasd"},"content":" */"},{"lineNumber":15,"author":{"gitID":"yeggasd"},"content":"public class PasswordWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":16,"author":{"gitID":"yeggasd"},"content":"    private static final String PASSWORDBOX_TITLE \u003d \"Key In Password\";"},{"lineNumber":17,"author":{"gitID":"yeggasd"},"content":"    private static final String FXML \u003d \"PasswordWindow.fxml\";"},{"lineNumber":18,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":19,"author":{"gitID":"yeggasd"},"content":"    private final Storage storage;"},{"lineNumber":20,"author":{"gitID":"yeggasd"},"content":"    private final Model model;"},{"lineNumber":21,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":22,"author":{"gitID":"yeggasd"},"content":"    private Stage primaryStage;"},{"lineNumber":23,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":24,"author":{"gitID":"yeggasd"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitID":"yeggasd"},"content":"    private StackPane passwordBoxPlaceholder;"},{"lineNumber":26,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":27,"author":{"gitID":"yeggasd"},"content":"    public PasswordWindow(Stage primaryStage, Model model, Storage storage) {"},{"lineNumber":28,"author":{"gitID":"yeggasd"},"content":"        super(FXML, primaryStage);"},{"lineNumber":29,"author":{"gitID":"yeggasd"},"content":"        // Set dependencies"},{"lineNumber":30,"author":{"gitID":"yeggasd"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":31,"author":{"gitID":"yeggasd"},"content":"        this.storage \u003d storage;"},{"lineNumber":32,"author":{"gitID":"yeggasd"},"content":"        this.model \u003d model;"},{"lineNumber":33,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":34,"author":{"gitID":"yeggasd"},"content":"        setTitle(PASSWORDBOX_TITLE);"},{"lineNumber":35,"author":{"gitID":"yeggasd"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":36,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":38,"author":{"gitID":"yeggasd"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":39,"author":{"gitID":"yeggasd"},"content":"        return primaryStage;"},{"lineNumber":40,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":42,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"yeggasd"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":44,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"yeggasd"},"content":"    void fillInnerParts() {"},{"lineNumber":46,"author":{"gitID":"yeggasd"},"content":"        PasswordBox passwordBox \u003d new PasswordBox(storage, model);"},{"lineNumber":47,"author":{"gitID":"yeggasd"},"content":"        passwordBoxPlaceholder.getChildren().add(passwordBox.getRoot());"},{"lineNumber":48,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":50,"author":{"gitID":"yeggasd"},"content":"    void hide() {"},{"lineNumber":51,"author":{"gitID":"yeggasd"},"content":"        primaryStage.hide();"},{"lineNumber":52,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":54,"author":{"gitID":"yeggasd"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":55,"author":{"gitID":"yeggasd"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":56,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":58,"author":{"gitID":"yeggasd"},"content":"    public void show() {"},{"lineNumber":59,"author":{"gitID":"yeggasd"},"content":"        primaryStage.show();"},{"lineNumber":60,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":62,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"yeggasd"},"content":"     * Closes the application."},{"lineNumber":64,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"yeggasd"},"content":"    @FXML"},{"lineNumber":66,"author":{"gitID":"yeggasd"},"content":"    private void handleExit() {"},{"lineNumber":67,"author":{"gitID":"yeggasd"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":68,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":70,"author":{"gitID":"yeggasd"},"content":"    void releaseResources() {"},{"lineNumber":71,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"yeggasd"},"content":"}"}],"authorContributionMap":{"yeggasd":63,"-":9}},{"path":"src/main/java/seedu/address/ui/VenueTable.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.beans.property.SimpleStringProperty;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.TableCell;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.TableColumn;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.TableView;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"jingyinno"},"content":"//@@author jingyinno"},{"lineNumber":14,"author":{"gitID":"jingyinno"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"jingyinno"},"content":" * A ui for the info panel that is displayed when the vacant command is called."},{"lineNumber":16,"author":{"gitID":"jingyinno"},"content":" */"},{"lineNumber":17,"author":{"gitID":"jingyinno"},"content":"public class VenueTable extends UiPart\u003cRegion\u003e {"},{"lineNumber":18,"author":{"gitID":"jingyinno"},"content":"    private static final String FXML \u003d \"VenueTable.fxml\";"},{"lineNumber":19,"author":{"gitID":"jingyinno"},"content":"    private static final String EMPTY_CELL \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"jingyinno"},"content":"    private static final String OCCUPIED_LABEL \u003d \"occupied\";"},{"lineNumber":21,"author":{"gitID":"jingyinno"},"content":"    private static final String VACANT_LABEL \u003d \"vacant\";"},{"lineNumber":22,"author":{"gitID":"jingyinno"},"content":"    private static final String OCCUPIED_STYLE_CLASS \u003d \"venueTable-cell-occupied\";"},{"lineNumber":23,"author":{"gitID":"jingyinno"},"content":"    private static final String VACANT_STYLE_CLASS \u003d \"venueTable-cell-vacant\";"},{"lineNumber":24,"author":{"gitID":"jingyinno"},"content":"    private static final int MIN_CELL_WIDTH \u003d 75;"},{"lineNumber":25,"author":{"gitID":"jingyinno"},"content":"    private static final int MAX_CELL_WIDTH \u003d 100;"},{"lineNumber":26,"author":{"gitID":"jingyinno"},"content":"    private static final int ROOM_COLUMN_INDEX \u003d 0;"},{"lineNumber":27,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":28,"author":{"gitID":"jingyinno"},"content":"    private ArrayList\u003cTableColumn\u003cArrayList\u003cString\u003e, String\u003e\u003e columns;"},{"lineNumber":29,"author":{"gitID":"jingyinno"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"jingyinno"},"content":"    private TableView venueTable;"},{"lineNumber":31,"author":{"gitID":"jingyinno"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"jingyinno"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e roomId;"},{"lineNumber":33,"author":{"gitID":"jingyinno"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"jingyinno"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e eightAm;"},{"lineNumber":35,"author":{"gitID":"jingyinno"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"jingyinno"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e nineAm;"},{"lineNumber":37,"author":{"gitID":"jingyinno"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"jingyinno"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e tenAm;"},{"lineNumber":39,"author":{"gitID":"jingyinno"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"jingyinno"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e elevenAm;"},{"lineNumber":41,"author":{"gitID":"jingyinno"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"jingyinno"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e twelvePm;"},{"lineNumber":43,"author":{"gitID":"jingyinno"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"jingyinno"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e onePm;"},{"lineNumber":45,"author":{"gitID":"jingyinno"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"jingyinno"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e twoPm;"},{"lineNumber":47,"author":{"gitID":"jingyinno"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitID":"jingyinno"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e threePm;"},{"lineNumber":49,"author":{"gitID":"jingyinno"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitID":"jingyinno"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e fourPm;"},{"lineNumber":51,"author":{"gitID":"jingyinno"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitID":"jingyinno"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e fivePm;"},{"lineNumber":53,"author":{"gitID":"jingyinno"},"content":"    @FXML"},{"lineNumber":54,"author":{"gitID":"jingyinno"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e sixPm;"},{"lineNumber":55,"author":{"gitID":"jingyinno"},"content":"    @FXML"},{"lineNumber":56,"author":{"gitID":"jingyinno"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e sevenPm;"},{"lineNumber":57,"author":{"gitID":"jingyinno"},"content":"    @FXML"},{"lineNumber":58,"author":{"gitID":"jingyinno"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e eightPm;"},{"lineNumber":59,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":60,"author":{"gitID":"jingyinno"},"content":"    public VenueTable() {"},{"lineNumber":61,"author":{"gitID":"jingyinno"},"content":"        this(null);"},{"lineNumber":62,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":64,"author":{"gitID":"jingyinno"},"content":"    public VenueTable(ObservableList\u003cArrayList\u003cString\u003e\u003e schedules) {"},{"lineNumber":65,"author":{"gitID":"jingyinno"},"content":"        super(FXML);"},{"lineNumber":66,"author":{"gitID":"jingyinno"},"content":"        venueTable.setItems(schedules);"},{"lineNumber":67,"author":{"gitID":"jingyinno"},"content":"        initializeColumns();"},{"lineNumber":68,"author":{"gitID":"jingyinno"},"content":"        initializeTableColumns();"},{"lineNumber":69,"author":{"gitID":"jingyinno"},"content":"        roomId.setMinWidth(MAX_CELL_WIDTH);"},{"lineNumber":70,"author":{"gitID":"jingyinno"},"content":"        roomId.setMaxWidth(MAX_CELL_WIDTH);"},{"lineNumber":71,"author":{"gitID":"jingyinno"},"content":"        venueTable.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);"},{"lineNumber":72,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":74,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"jingyinno"},"content":"     * Initializes columns"},{"lineNumber":76,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"jingyinno"},"content":"    private void initializeColumns() {"},{"lineNumber":78,"author":{"gitID":"jingyinno"},"content":"        columns \u003d new ArrayList\u003c\u003e();"},{"lineNumber":79,"author":{"gitID":"jingyinno"},"content":"        columns.add(roomId);"},{"lineNumber":80,"author":{"gitID":"jingyinno"},"content":"        columns.add(eightAm);"},{"lineNumber":81,"author":{"gitID":"jingyinno"},"content":"        columns.add(nineAm);"},{"lineNumber":82,"author":{"gitID":"jingyinno"},"content":"        columns.add(tenAm);"},{"lineNumber":83,"author":{"gitID":"jingyinno"},"content":"        columns.add(elevenAm);"},{"lineNumber":84,"author":{"gitID":"jingyinno"},"content":"        columns.add(twelvePm);"},{"lineNumber":85,"author":{"gitID":"jingyinno"},"content":"        columns.add(onePm);"},{"lineNumber":86,"author":{"gitID":"jingyinno"},"content":"        columns.add(twoPm);"},{"lineNumber":87,"author":{"gitID":"jingyinno"},"content":"        columns.add(threePm);"},{"lineNumber":88,"author":{"gitID":"jingyinno"},"content":"        columns.add(fourPm);"},{"lineNumber":89,"author":{"gitID":"jingyinno"},"content":"        columns.add(fivePm);"},{"lineNumber":90,"author":{"gitID":"jingyinno"},"content":"        columns.add(sixPm);"},{"lineNumber":91,"author":{"gitID":"jingyinno"},"content":"        columns.add(sevenPm);"},{"lineNumber":92,"author":{"gitID":"jingyinno"},"content":"        columns.add(eightPm);"},{"lineNumber":93,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":95,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"jingyinno"},"content":"     * Initializes table columns"},{"lineNumber":97,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"jingyinno"},"content":"    private void initializeTableColumns() {"},{"lineNumber":99,"author":{"gitID":"jingyinno"},"content":"        for (int i \u003d 0; i \u003c columns.size(); i++) {"},{"lineNumber":100,"author":{"gitID":"jingyinno"},"content":"            final int j \u003d i;"},{"lineNumber":101,"author":{"gitID":"jingyinno"},"content":"            columns.get(i).setCellValueFactory(cellData -\u003e new SimpleStringProperty(cellData.getValue().get(j)));"},{"lineNumber":102,"author":{"gitID":"jingyinno"},"content":"            columns.get(i).impl_setReorderable(false);"},{"lineNumber":103,"author":{"gitID":"jingyinno"},"content":"            if (j !\u003d ROOM_COLUMN_INDEX) {"},{"lineNumber":104,"author":{"gitID":"jingyinno"},"content":"                columns.get(i).setMinWidth(MIN_CELL_WIDTH);"},{"lineNumber":105,"author":{"gitID":"jingyinno"},"content":"                columns.get(i).setMaxWidth(MAX_CELL_WIDTH);"},{"lineNumber":106,"author":{"gitID":"jingyinno"},"content":"            }"},{"lineNumber":107,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":108,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"jingyinno"},"content":"     * Sets the command box style to indicate a vacant or occupied room."},{"lineNumber":112,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"jingyinno"},"content":"    public void setStyle() {"},{"lineNumber":114,"author":{"gitID":"jingyinno"},"content":"        for (int i \u003d 0; i \u003c columns.size(); i++) {"},{"lineNumber":115,"author":{"gitID":"jingyinno"},"content":"            TableColumn\u003cArrayList\u003cString\u003e, String\u003e columnToBeSet \u003d columns.get(i);"},{"lineNumber":116,"author":{"gitID":"jingyinno"},"content":"            setStyleForColumn(columnToBeSet);"},{"lineNumber":117,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":120,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"jingyinno"},"content":"     * Sets the style of each column."},{"lineNumber":122,"author":{"gitID":"jingyinno"},"content":"     * @param columnToBeSet is the column that would be set"},{"lineNumber":123,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"jingyinno"},"content":"    private void setStyleForColumn (TableColumn\u003cArrayList\u003cString\u003e, String\u003e columnToBeSet) {"},{"lineNumber":125,"author":{"gitID":"jingyinno"},"content":"        columnToBeSet.setCellFactory(column -\u003e {"},{"lineNumber":126,"author":{"gitID":"jingyinno"},"content":"            return setStyleForCell();"},{"lineNumber":127,"author":{"gitID":"jingyinno"},"content":"        });"},{"lineNumber":128,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":130,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"jingyinno"},"content":"     * Sets the style of the cell given the data and return it"},{"lineNumber":132,"author":{"gitID":"jingyinno"},"content":"     * @return the tablecell with its style set."},{"lineNumber":133,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"jingyinno"},"content":"    private TableCell\u003cArrayList\u003cString\u003e, String\u003e setStyleForCell () {"},{"lineNumber":135,"author":{"gitID":"jingyinno"},"content":"        return new TableCell\u003cArrayList\u003cString\u003e, String\u003e() {"},{"lineNumber":136,"author":{"gitID":"jingyinno"},"content":"            @Override"},{"lineNumber":137,"author":{"gitID":"jingyinno"},"content":"            protected void updateItem(String item, boolean empty) {"},{"lineNumber":138,"author":{"gitID":"jingyinno"},"content":"                super.updateItem(item, empty);"},{"lineNumber":139,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":140,"author":{"gitID":"jingyinno"},"content":"                if (item \u003d\u003d null || empty) {"},{"lineNumber":141,"author":{"gitID":"jingyinno"},"content":"                    setText(null);"},{"lineNumber":142,"author":{"gitID":"jingyinno"},"content":"                    setStyle(EMPTY_CELL);"},{"lineNumber":143,"author":{"gitID":"jingyinno"},"content":"                } else {"},{"lineNumber":144,"author":{"gitID":"jingyinno"},"content":"                    removeAllStyle(this);"},{"lineNumber":145,"author":{"gitID":"jingyinno"},"content":"                    setText(item);"},{"lineNumber":146,"author":{"gitID":"jingyinno"},"content":"                    if (getItem().equals(OCCUPIED_LABEL)) {"},{"lineNumber":147,"author":{"gitID":"jingyinno"},"content":"                        getStyleClass().add(OCCUPIED_STYLE_CLASS);"},{"lineNumber":148,"author":{"gitID":"jingyinno"},"content":"                    } else if (getItem().equals(VACANT_LABEL)) {"},{"lineNumber":149,"author":{"gitID":"jingyinno"},"content":"                        getStyleClass().add(VACANT_STYLE_CLASS);"},{"lineNumber":150,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":151,"author":{"gitID":"jingyinno"},"content":"                    }"},{"lineNumber":152,"author":{"gitID":"jingyinno"},"content":"                }"},{"lineNumber":153,"author":{"gitID":"jingyinno"},"content":"            }"},{"lineNumber":154,"author":{"gitID":"jingyinno"},"content":"        };"},{"lineNumber":155,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":157,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"jingyinno"},"content":"     * Removes all styles present in cell"},{"lineNumber":159,"author":{"gitID":"jingyinno"},"content":"     * @param tableCell Cell with its style to be removed"},{"lineNumber":160,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"jingyinno"},"content":"    private static void removeAllStyle(TableCell\u003cArrayList\u003cString\u003e, String\u003e tableCell) {"},{"lineNumber":162,"author":{"gitID":"jingyinno"},"content":"        tableCell.getStyleClass().remove(OCCUPIED_STYLE_CLASS);"},{"lineNumber":163,"author":{"gitID":"jingyinno"},"content":"        tableCell.getStyleClass().remove(VACANT_STYLE_CLASS);"},{"lineNumber":164,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"jingyinno"},"content":"}"}],"authorContributionMap":{"jingyinno":153,"-":12}},{"path":"src/main/java/seedu/address/ui/BirthdayNotification.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.BirthdayNotificationEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"AzuraAiR"},"content":"//@@author AzuraAiR"},{"lineNumber":15,"author":{"gitID":"AzuraAiR"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"AzuraAiR"},"content":" * A ui for the notification dialog that is displayed at the start of the application or"},{"lineNumber":17,"author":{"gitID":"AzuraAiR"},"content":" * after `birthdays today` is called."},{"lineNumber":18,"author":{"gitID":"AzuraAiR"},"content":" */"},{"lineNumber":19,"author":{"gitID":"AzuraAiR"},"content":"public class BirthdayNotification extends UiPart\u003cRegion\u003e {"},{"lineNumber":20,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":21,"author":{"gitID":"AzuraAiR"},"content":"    public static final String NOTIFICATION_TITLE \u003d \"Birthdays Today\";"},{"lineNumber":22,"author":{"gitID":"AzuraAiR"},"content":"    public static final String NOTIFICATION_HEADER_TEXT \u003d \"Birthday(s) on \";"},{"lineNumber":23,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":24,"author":{"gitID":"AzuraAiR"},"content":"    private static final String FXML \u003d \"BirthdayList.fxml\";"},{"lineNumber":25,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":26,"author":{"gitID":"AzuraAiR"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":27,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":28,"author":{"gitID":"AzuraAiR"},"content":"    public BirthdayNotification() {"},{"lineNumber":29,"author":{"gitID":"AzuraAiR"},"content":"        super(FXML);"},{"lineNumber":30,"author":{"gitID":"AzuraAiR"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":31,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":33,"author":{"gitID":"AzuraAiR"},"content":"    @Subscribe"},{"lineNumber":34,"author":{"gitID":"AzuraAiR"},"content":"    private void handleBirthdayNotificationEvent(BirthdayNotificationEvent event) {"},{"lineNumber":35,"author":{"gitID":"AzuraAiR"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"},{"lineNumber":36,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":37,"author":{"gitID":"AzuraAiR"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":38,"author":{"gitID":"AzuraAiR"},"content":"        Alert alert \u003d new Alert(Alert.AlertType.INFORMATION);"},{"lineNumber":39,"author":{"gitID":"AzuraAiR"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"},{"lineNumber":40,"author":{"gitID":"AzuraAiR"},"content":"        alert.setTitle(NOTIFICATION_TITLE);"},{"lineNumber":41,"author":{"gitID":"AzuraAiR"},"content":"        alert.setHeaderText(NOTIFICATION_HEADER_TEXT + dtf.format(event.getCurrentDate()));"},{"lineNumber":42,"author":{"gitID":"AzuraAiR"},"content":"        alert.setContentText(event.getBirthdayList());"},{"lineNumber":43,"author":{"gitID":"AzuraAiR"},"content":"        alert.getDialogPane().setId(\"birthdayDialogPane\");"},{"lineNumber":44,"author":{"gitID":"AzuraAiR"},"content":"        alert.showAndWait();"},{"lineNumber":45,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"AzuraAiR"},"content":"}"}],"authorContributionMap":{"AzuraAiR":33,"-":13}},{"path":"src/main/java/seedu/address/ui/BirthdayList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.beans.property.SimpleStringProperty;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.beans.property.StringProperty;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"AzuraAiR"},"content":"//@@author AzuraAiR"},{"lineNumber":12,"author":{"gitID":"AzuraAiR"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"AzuraAiR"},"content":" * A ui for the birthday list that is displayed at the InfoPanel after `birthdays` is called"},{"lineNumber":14,"author":{"gitID":"AzuraAiR"},"content":" */"},{"lineNumber":15,"author":{"gitID":"AzuraAiR"},"content":"public class BirthdayList extends UiPart\u003cRegion\u003e {"},{"lineNumber":16,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":17,"author":{"gitID":"AzuraAiR"},"content":"    private static final String FXML \u003d \"BirthdayList.fxml\";"},{"lineNumber":18,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":19,"author":{"gitID":"AzuraAiR"},"content":"    private final StringProperty displayed \u003d new SimpleStringProperty(\"\");"},{"lineNumber":20,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":21,"author":{"gitID":"AzuraAiR"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitID":"AzuraAiR"},"content":"    private TextArea birthdayList;"},{"lineNumber":23,"author":{"gitID":"AzuraAiR"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitID":"AzuraAiR"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":25,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":26,"author":{"gitID":"AzuraAiR"},"content":"    public BirthdayList() {"},{"lineNumber":27,"author":{"gitID":"AzuraAiR"},"content":"        super(FXML);"},{"lineNumber":28,"author":{"gitID":"AzuraAiR"},"content":"        birthdayList.textProperty().bind(displayed);"},{"lineNumber":29,"author":{"gitID":"AzuraAiR"},"content":"        scrollPane.setContent(birthdayList);"},{"lineNumber":30,"author":{"gitID":"AzuraAiR"},"content":"        scrollPane.setFitToWidth(true);"},{"lineNumber":31,"author":{"gitID":"AzuraAiR"},"content":"        scrollPane.setFitToHeight(true);"},{"lineNumber":32,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":33,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":35,"author":{"gitID":"AzuraAiR"},"content":"    public void loadList(String list) {"},{"lineNumber":36,"author":{"gitID":"AzuraAiR"},"content":"        Platform.runLater(() -\u003e displayed.setValue(list));"},{"lineNumber":37,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":39,"author":{"gitID":"AzuraAiR"},"content":"}"}],"authorContributionMap":{"AzuraAiR":29,"-":10}},{"path":"src/main/java/seedu/address/ui/TimeTablePanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.beans.property.SimpleStringProperty;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.TableCell;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.TableColumn;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.control.TableView;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"yeggasd"},"content":"//@@author yeggasd"},{"lineNumber":17,"author":{"gitID":"yeggasd"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"yeggasd"},"content":" * A ui for the info panel that is displayed when the timetable command is called."},{"lineNumber":19,"author":{"gitID":"yeggasd"},"content":" */"},{"lineNumber":20,"author":{"gitID":"yeggasd"},"content":"public class TimeTablePanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"yeggasd"},"content":"    private static final int MAX_COLUMN_WIDTH \u003d 200;"},{"lineNumber":22,"author":{"gitID":"yeggasd"},"content":"    private static final int MIN_COLUMN_WIDTH \u003d 75;"},{"lineNumber":23,"author":{"gitID":"yeggasd"},"content":"    private static final String COLUMNHEADER_STYLE_CLASS \u003d \"column-header\";"},{"lineNumber":24,"author":{"gitID":"yeggasd"},"content":"    private static final String TABLECELL_STYLE_CLASS \u003d \"table-cell\";"},{"lineNumber":25,"author":{"gitID":"yeggasd"},"content":"    private static final String EMPTY_STYLE_CLASS \u003d \"timetable-cell-empty\";"},{"lineNumber":26,"author":{"gitID":"yeggasd"},"content":"    private static final String[] MOD_COLOR_STYLES \u003d { \"modteal\", \"modsandybrown\", \"modplum\", \"modyellow\","},{"lineNumber":27,"author":{"gitID":"yeggasd"},"content":"                                                         \"modyellow\", \"modcyan\", \"modpink\", \"modlightblue\", \"modpurple\","},{"lineNumber":28,"author":{"gitID":"yeggasd"},"content":"                                                         \"modindigo\", \"modlightgreen\", \"modorange\", \"modgoldbrown\"};"},{"lineNumber":29,"author":{"gitID":"yeggasd"},"content":"    private static final String FXML \u003d \"TimeTablePanel.fxml\";"},{"lineNumber":30,"author":{"gitID":"yeggasd"},"content":"    private static final HashMap\u003cInteger, String\u003e TAKEN_COLOR \u003d new HashMap\u003c\u003e();"},{"lineNumber":31,"author":{"gitID":"yeggasd"},"content":"    private static final int MODNAME_LENGTH \u003d 6;"},{"lineNumber":32,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":33,"author":{"gitID":"yeggasd"},"content":"    private ArrayList\u003cTableColumn\u003cArrayList\u003cString\u003e, String\u003e\u003e columns;"},{"lineNumber":34,"author":{"gitID":"yeggasd"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"yeggasd"},"content":"    private TableView timeTable;"},{"lineNumber":36,"author":{"gitID":"yeggasd"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"yeggasd"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e day;"},{"lineNumber":38,"author":{"gitID":"yeggasd"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"yeggasd"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e eightAm;"},{"lineNumber":40,"author":{"gitID":"yeggasd"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"yeggasd"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e nineAm;"},{"lineNumber":42,"author":{"gitID":"yeggasd"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"yeggasd"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e tenAm;"},{"lineNumber":44,"author":{"gitID":"yeggasd"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"yeggasd"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e elevenAm;"},{"lineNumber":46,"author":{"gitID":"yeggasd"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitID":"yeggasd"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e twelvePm;"},{"lineNumber":48,"author":{"gitID":"yeggasd"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitID":"yeggasd"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e onePm;"},{"lineNumber":50,"author":{"gitID":"yeggasd"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitID":"yeggasd"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e twoPm;"},{"lineNumber":52,"author":{"gitID":"yeggasd"},"content":"    @FXML"},{"lineNumber":53,"author":{"gitID":"yeggasd"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e threePm;"},{"lineNumber":54,"author":{"gitID":"yeggasd"},"content":"    @FXML"},{"lineNumber":55,"author":{"gitID":"yeggasd"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e fourPm;"},{"lineNumber":56,"author":{"gitID":"yeggasd"},"content":"    @FXML"},{"lineNumber":57,"author":{"gitID":"yeggasd"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e fivePm;"},{"lineNumber":58,"author":{"gitID":"yeggasd"},"content":"    @FXML"},{"lineNumber":59,"author":{"gitID":"yeggasd"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e sixPm;"},{"lineNumber":60,"author":{"gitID":"yeggasd"},"content":"    @FXML"},{"lineNumber":61,"author":{"gitID":"yeggasd"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e sevenPm;"},{"lineNumber":62,"author":{"gitID":"yeggasd"},"content":"    @FXML"},{"lineNumber":63,"author":{"gitID":"yeggasd"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e eightPm;"},{"lineNumber":64,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":65,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":66,"author":{"gitID":"yeggasd"},"content":"    public TimeTablePanel() {"},{"lineNumber":67,"author":{"gitID":"yeggasd"},"content":"        super(FXML);"},{"lineNumber":68,"author":{"gitID":"yeggasd"},"content":"        timeTable.setItems(null);"},{"lineNumber":69,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":71,"author":{"gitID":"yeggasd"},"content":"    public TimeTablePanel(ObservableList\u003cArrayList\u003cString\u003e\u003e schedules) {"},{"lineNumber":72,"author":{"gitID":"yeggasd"},"content":"        super(FXML);"},{"lineNumber":73,"author":{"gitID":"yeggasd"},"content":"        TAKEN_COLOR.clear();"},{"lineNumber":74,"author":{"gitID":"yeggasd"},"content":"        timeTable.setItems(schedules);"},{"lineNumber":75,"author":{"gitID":"yeggasd"},"content":"        timeTable.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);"},{"lineNumber":76,"author":{"gitID":"yeggasd"},"content":"        initializeColumns();"},{"lineNumber":77,"author":{"gitID":"yeggasd"},"content":"        initializeTableColumns();"},{"lineNumber":78,"author":{"gitID":"yeggasd"},"content":"        day.setMinWidth(100);"},{"lineNumber":79,"author":{"gitID":"yeggasd"},"content":"        day.setMaxWidth(100);"},{"lineNumber":80,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":82,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"yeggasd"},"content":"     * Initializes columns"},{"lineNumber":84,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"yeggasd"},"content":"    private void initializeColumns() {"},{"lineNumber":86,"author":{"gitID":"yeggasd"},"content":"        columns \u003d new ArrayList\u003c\u003e();"},{"lineNumber":87,"author":{"gitID":"yeggasd"},"content":"        columns.add(day);"},{"lineNumber":88,"author":{"gitID":"yeggasd"},"content":"        columns.add(eightAm);"},{"lineNumber":89,"author":{"gitID":"yeggasd"},"content":"        columns.add(nineAm);"},{"lineNumber":90,"author":{"gitID":"yeggasd"},"content":"        columns.add(tenAm);"},{"lineNumber":91,"author":{"gitID":"yeggasd"},"content":"        columns.add(elevenAm);"},{"lineNumber":92,"author":{"gitID":"yeggasd"},"content":"        columns.add(twelvePm);"},{"lineNumber":93,"author":{"gitID":"yeggasd"},"content":"        columns.add(onePm);"},{"lineNumber":94,"author":{"gitID":"yeggasd"},"content":"        columns.add(twoPm);"},{"lineNumber":95,"author":{"gitID":"yeggasd"},"content":"        columns.add(threePm);"},{"lineNumber":96,"author":{"gitID":"yeggasd"},"content":"        columns.add(fourPm);"},{"lineNumber":97,"author":{"gitID":"yeggasd"},"content":"        columns.add(fivePm);"},{"lineNumber":98,"author":{"gitID":"yeggasd"},"content":"        columns.add(sixPm);"},{"lineNumber":99,"author":{"gitID":"yeggasd"},"content":"        columns.add(sevenPm);"},{"lineNumber":100,"author":{"gitID":"yeggasd"},"content":"        columns.add(eightPm);"},{"lineNumber":101,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":103,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"yeggasd"},"content":"     * Initializes table columns"},{"lineNumber":105,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"yeggasd"},"content":"    private void initializeTableColumns() {"},{"lineNumber":107,"author":{"gitID":"yeggasd"},"content":"        for (int i \u003d 0; i \u003c columns.size(); i++) {"},{"lineNumber":108,"author":{"gitID":"yeggasd"},"content":"            final int j \u003d i;"},{"lineNumber":109,"author":{"gitID":"yeggasd"},"content":"            columns.get(i).setCellValueFactory(cellData -\u003e new SimpleStringProperty(cellData.getValue().get(j)));"},{"lineNumber":110,"author":{"gitID":"yeggasd"},"content":"            columns.get(i).impl_setReorderable(false);"},{"lineNumber":111,"author":{"gitID":"yeggasd"},"content":"            if (j !\u003d 0) {"},{"lineNumber":112,"author":{"gitID":"yeggasd"},"content":"                columns.get(i).setMinWidth(MIN_COLUMN_WIDTH);"},{"lineNumber":113,"author":{"gitID":"yeggasd"},"content":"                columns.get(i).setMaxWidth(MAX_COLUMN_WIDTH);"},{"lineNumber":114,"author":{"gitID":"yeggasd"},"content":"            }"},{"lineNumber":115,"author":{"gitID":"yeggasd"},"content":"            columns.get(i).setSortable(false);"},{"lineNumber":116,"author":{"gitID":"yeggasd"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":119,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"yeggasd"},"content":"     * Sets the columns to the style for each value."},{"lineNumber":121,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"yeggasd"},"content":"    public void setStyle() {"},{"lineNumber":123,"author":{"gitID":"yeggasd"},"content":"        for (int i \u003d 0; i \u003c columns.size(); i++) {"},{"lineNumber":124,"author":{"gitID":"yeggasd"},"content":"            TableColumn\u003cArrayList\u003cString\u003e, String\u003e columnToBeSet \u003d columns.get(i);"},{"lineNumber":125,"author":{"gitID":"yeggasd"},"content":"            setStyleForColumn(columnToBeSet);"},{"lineNumber":126,"author":{"gitID":"yeggasd"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":129,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"yeggasd"},"content":"     * Sets the style of each column."},{"lineNumber":131,"author":{"gitID":"yeggasd"},"content":"     * @param columnToBeSet is the column that would be set"},{"lineNumber":132,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"yeggasd"},"content":"    private void setStyleForColumn (TableColumn\u003cArrayList\u003cString\u003e, String\u003e columnToBeSet) {"},{"lineNumber":134,"author":{"gitID":"yeggasd"},"content":"        columnToBeSet.setCellFactory(column -\u003e {"},{"lineNumber":135,"author":{"gitID":"yeggasd"},"content":"            return setStyleForCell();"},{"lineNumber":136,"author":{"gitID":"yeggasd"},"content":"        });"},{"lineNumber":137,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":139,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"yeggasd"},"content":"     * Sets the style of the cell given the data and return it"},{"lineNumber":141,"author":{"gitID":"yeggasd"},"content":"     * @return the tablecell with its style set."},{"lineNumber":142,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"yeggasd"},"content":"    private TableCell\u003cArrayList\u003cString\u003e, String\u003e setStyleForCell () {"},{"lineNumber":144,"author":{"gitID":"yeggasd"},"content":"        return new TableCell\u003cArrayList\u003cString\u003e, String\u003e() {"},{"lineNumber":145,"author":{"gitID":"yeggasd"},"content":"            @Override"},{"lineNumber":146,"author":{"gitID":"yeggasd"},"content":"            protected void updateItem(String item, boolean empty) {"},{"lineNumber":147,"author":{"gitID":"yeggasd"},"content":"                super.updateItem(item, empty);"},{"lineNumber":148,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":149,"author":{"gitID":"yeggasd"},"content":"                if (item \u003d\u003d null || empty) {"},{"lineNumber":150,"author":{"gitID":"yeggasd"},"content":"                    setText(null);"},{"lineNumber":151,"author":{"gitID":"yeggasd"},"content":"                    setStyle(\"\");"},{"lineNumber":152,"author":{"gitID":"yeggasd"},"content":"                } else {"},{"lineNumber":153,"author":{"gitID":"yeggasd"},"content":"                    setText(item);"},{"lineNumber":154,"author":{"gitID":"yeggasd"},"content":"                    removeAllStyle(this);"},{"lineNumber":155,"author":{"gitID":"yeggasd"},"content":"                    if (\"\".equals(getItem())) {"},{"lineNumber":156,"author":{"gitID":"yeggasd"},"content":"                        getStyleClass().add(EMPTY_STYLE_CLASS);"},{"lineNumber":157,"author":{"gitID":"yeggasd"},"content":"                    } else if (StringUtil.isDay(getItem())) {"},{"lineNumber":158,"author":{"gitID":"yeggasd"},"content":"                        getStyleClass().add(COLUMNHEADER_STYLE_CLASS);"},{"lineNumber":159,"author":{"gitID":"yeggasd"},"content":"                    } else {"},{"lineNumber":160,"author":{"gitID":"yeggasd"},"content":"                        getStyleClass().add(getColorStyleFor(getItem()));"},{"lineNumber":161,"author":{"gitID":"yeggasd"},"content":"                    }"},{"lineNumber":162,"author":{"gitID":"yeggasd"},"content":"                }"},{"lineNumber":163,"author":{"gitID":"yeggasd"},"content":"            }"},{"lineNumber":164,"author":{"gitID":"yeggasd"},"content":"        };"},{"lineNumber":165,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":167,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":168,"author":{"gitID":"yeggasd"},"content":"     * Removes all styles present in cell"},{"lineNumber":169,"author":{"gitID":"yeggasd"},"content":"     * @param tableCell Cell with its style to be removed"},{"lineNumber":170,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"yeggasd"},"content":"    private static void removeAllStyle(TableCell\u003cArrayList\u003cString\u003e, String\u003e tableCell) {"},{"lineNumber":172,"author":{"gitID":"yeggasd"},"content":"        for (String color : MOD_COLOR_STYLES) {"},{"lineNumber":173,"author":{"gitID":"yeggasd"},"content":"            tableCell.getStyleClass().remove(color);"},{"lineNumber":174,"author":{"gitID":"yeggasd"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"yeggasd"},"content":"        tableCell.getStyleClass().remove(EMPTY_STYLE_CLASS);"},{"lineNumber":176,"author":{"gitID":"yeggasd"},"content":"        tableCell.getStyleClass().remove(TABLECELL_STYLE_CLASS);"},{"lineNumber":177,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":179,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":180,"author":{"gitID":"yeggasd"},"content":"     * Returns a Color Style for the Module based on its hashcode."},{"lineNumber":181,"author":{"gitID":"yeggasd"},"content":"     * @param lessonName"},{"lineNumber":182,"author":{"gitID":"yeggasd"},"content":"     * @return colorStyle for {@code modName}\u0027s label."},{"lineNumber":183,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":184,"author":{"gitID":"yeggasd"},"content":"    private static String getColorStyleFor(String lessonName) {"},{"lineNumber":185,"author":{"gitID":"yeggasd"},"content":"        String modName \u003d lessonName.substring(0, MODNAME_LENGTH);"},{"lineNumber":186,"author":{"gitID":"yeggasd"},"content":"        int colorIndex \u003d Math.abs(modName.hashCode()) % MOD_COLOR_STYLES.length;"},{"lineNumber":187,"author":{"gitID":"yeggasd"},"content":"        int index \u003d 0;"},{"lineNumber":188,"author":{"gitID":"yeggasd"},"content":"        //finds the next avaliable index that is not taken."},{"lineNumber":189,"author":{"gitID":"yeggasd"},"content":"        while (index \u003c MOD_COLOR_STYLES.length \u0026\u0026 TAKEN_COLOR.get(colorIndex) !\u003d null"},{"lineNumber":190,"author":{"gitID":"yeggasd"},"content":"                \u0026\u0026 !TAKEN_COLOR.get(colorIndex).equals(modName)) {"},{"lineNumber":191,"author":{"gitID":"yeggasd"},"content":"            colorIndex \u003d (colorIndex + 1) % MOD_COLOR_STYLES.length;"},{"lineNumber":192,"author":{"gitID":"yeggasd"},"content":"            index++;"},{"lineNumber":193,"author":{"gitID":"yeggasd"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"yeggasd"},"content":"        TAKEN_COLOR.put(colorIndex, modName);"},{"lineNumber":195,"author":{"gitID":"yeggasd"},"content":"        return MOD_COLOR_STYLES[colorIndex];"},{"lineNumber":196,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"yeggasd"},"content":"}"}],"authorContributionMap":{"yeggasd":182,"-":15}},{"path":"src/main/java/seedu/address/ui/PersonDetailsCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.timetable.Timetable;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"yeggasd"},"content":"//@@author yeggasd"},{"lineNumber":17,"author":{"gitID":"yeggasd"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"yeggasd"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":19,"author":{"gitID":"yeggasd"},"content":" */"},{"lineNumber":20,"author":{"gitID":"yeggasd"},"content":"public class PersonDetailsCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":22,"author":{"gitID":"yeggasd"},"content":"    private static final String FXML \u003d \"PersonDetailsCard.fxml\";"},{"lineNumber":23,"author":{"gitID":"yeggasd"},"content":"    private static final String[] TAG_COLOR_STYLES \u003d { \"teal\", \"cyan\", \"purple\", \"indigo\", \"lightgreen\", \"bluegrey\","},{"lineNumber":24,"author":{"gitID":"yeggasd"},"content":"                                                         \"amber\", \"yellow\"};"},{"lineNumber":25,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"yeggasd"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":27,"author":{"gitID":"yeggasd"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":28,"author":{"gitID":"yeggasd"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":29,"author":{"gitID":"yeggasd"},"content":"     *"},{"lineNumber":30,"author":{"gitID":"yeggasd"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":31,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":33,"author":{"gitID":"yeggasd"},"content":"    public final Person person;"},{"lineNumber":34,"author":{"gitID":"yeggasd"},"content":"    private TimeTablePanel timeTablePanel;"},{"lineNumber":35,"author":{"gitID":"yeggasd"},"content":"    private ArrayList\u003cLabel\u003e tagLabels \u003d new ArrayList\u003c\u003e();"},{"lineNumber":36,"author":{"gitID":"yeggasd"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"yeggasd"},"content":"    private Label name;"},{"lineNumber":38,"author":{"gitID":"yeggasd"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"yeggasd"},"content":"    private Label phone;"},{"lineNumber":40,"author":{"gitID":"yeggasd"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"yeggasd"},"content":"    private Label address;"},{"lineNumber":42,"author":{"gitID":"yeggasd"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"yeggasd"},"content":"    private Label email;"},{"lineNumber":44,"author":{"gitID":"yeggasd"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"yeggasd"},"content":"    private Label birthday;"},{"lineNumber":46,"author":{"gitID":"yeggasd"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitID":"yeggasd"},"content":"    private FlowPane tags;"},{"lineNumber":48,"author":{"gitID":"yeggasd"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitID":"yeggasd"},"content":"    private StackPane timetablePlaceholder;"},{"lineNumber":50,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":51,"author":{"gitID":"yeggasd"},"content":"    public PersonDetailsCard() {"},{"lineNumber":52,"author":{"gitID":"yeggasd"},"content":"        super(FXML);"},{"lineNumber":53,"author":{"gitID":"yeggasd"},"content":"        person \u003d null;"},{"lineNumber":54,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":56,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":57,"author":{"gitID":"yeggasd"},"content":"    public PersonDetailsCard(Person person, int oddEvenIndex) {"},{"lineNumber":58,"author":{"gitID":"yeggasd"},"content":"        super(FXML);"},{"lineNumber":59,"author":{"gitID":"yeggasd"},"content":"        this.person \u003d person;"},{"lineNumber":60,"author":{"gitID":"yeggasd"},"content":"        timeTablePanel \u003d new TimeTablePanel();"},{"lineNumber":61,"author":{"gitID":"yeggasd"},"content":"        timetablePlaceholder.getChildren().add(timeTablePanel.getRoot());"},{"lineNumber":62,"author":{"gitID":"yeggasd"},"content":"        update(person, oddEvenIndex);"},{"lineNumber":63,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":65,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"yeggasd"},"content":"     * Updates the {@code PersonDetailsCard} for the new person selected"},{"lineNumber":67,"author":{"gitID":"yeggasd"},"content":"     * @param person the Person that is currently selected"},{"lineNumber":68,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"yeggasd"},"content":"    public void update(Person person, int oddEvenIndex) {"},{"lineNumber":70,"author":{"gitID":"yeggasd"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":71,"author":{"gitID":"yeggasd"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":72,"author":{"gitID":"yeggasd"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":73,"author":{"gitID":"yeggasd"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":74,"author":{"gitID":"yeggasd"},"content":"        birthday.setText(person.getBirthday().value);"},{"lineNumber":75,"author":{"gitID":"yeggasd"},"content":"        initializeTags(person);"},{"lineNumber":76,"author":{"gitID":"yeggasd"},"content":"        initializeTimetable(person, oddEvenIndex);"},{"lineNumber":77,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":79,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"yeggasd"},"content":"     * Initializes the tag labels for {@code person}."},{"lineNumber":81,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"yeggasd"},"content":"    private void initializeTags(Person person) {"},{"lineNumber":83,"author":{"gitID":"yeggasd"},"content":"        int i \u003d 0;"},{"lineNumber":84,"author":{"gitID":"yeggasd"},"content":"        for (Tag tag : person.getTags()) {"},{"lineNumber":85,"author":{"gitID":"yeggasd"},"content":"            if (tagLabels.size() \u003e  i) {"},{"lineNumber":86,"author":{"gitID":"yeggasd"},"content":"                Label tagLabel \u003d tagLabels.get(i);"},{"lineNumber":87,"author":{"gitID":"yeggasd"},"content":"                tagLabel.setVisible(true);"},{"lineNumber":88,"author":{"gitID":"yeggasd"},"content":"                tagLabel.getStyleClass().remove(getColorStyleFor(tagLabel.getText()));"},{"lineNumber":89,"author":{"gitID":"yeggasd"},"content":"                tagLabels.get(i).setText(tag.tagName);"},{"lineNumber":90,"author":{"gitID":"yeggasd"},"content":"                tagLabels.get(i).getStyleClass().add(getColorStyleFor(tag.tagName));"},{"lineNumber":91,"author":{"gitID":"yeggasd"},"content":"            } else {"},{"lineNumber":92,"author":{"gitID":"yeggasd"},"content":"                Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":93,"author":{"gitID":"yeggasd"},"content":"                tagLabel.getStyleClass().add(getColorStyleFor(tag.tagName));"},{"lineNumber":94,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":95,"author":{"gitID":"yeggasd"},"content":"                tagLabels.add(tagLabel);"},{"lineNumber":96,"author":{"gitID":"yeggasd"},"content":"                tags.getChildren().add(tagLabel);"},{"lineNumber":97,"author":{"gitID":"yeggasd"},"content":"            }"},{"lineNumber":98,"author":{"gitID":"yeggasd"},"content":"            i++;"},{"lineNumber":99,"author":{"gitID":"yeggasd"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"yeggasd"},"content":"        for (; i \u003c tagLabels.size(); i++) {"},{"lineNumber":101,"author":{"gitID":"yeggasd"},"content":"            tagLabels.get(i).setVisible(false);"},{"lineNumber":102,"author":{"gitID":"yeggasd"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":105,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"yeggasd"},"content":"     * Initializes the timetable for {@code person}."},{"lineNumber":107,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"yeggasd"},"content":"    private void initializeTimetable(Person person, int oddEvenIndex) {"},{"lineNumber":109,"author":{"gitID":"yeggasd"},"content":"        Timetable timeTable \u003d person.getTimetable();"},{"lineNumber":110,"author":{"gitID":"yeggasd"},"content":"        ArrayList\u003cArrayList\u003cString\u003e\u003e personTimeTable \u003d timeTable.getTimetable().get(oddEvenIndex);"},{"lineNumber":111,"author":{"gitID":"yeggasd"},"content":"        ObservableList\u003cArrayList\u003cString\u003e\u003e timeTableList \u003d FXCollections.observableArrayList(personTimeTable);"},{"lineNumber":112,"author":{"gitID":"yeggasd"},"content":"        timeTablePanel \u003d new TimeTablePanel(timeTableList);"},{"lineNumber":113,"author":{"gitID":"yeggasd"},"content":"        timetablePlaceholder.getChildren().add(timeTablePanel.getRoot());"},{"lineNumber":114,"author":{"gitID":"yeggasd"},"content":"        timeTablePanel.setStyle();"},{"lineNumber":115,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":117,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"yeggasd"},"content":"     * @param tagName"},{"lineNumber":119,"author":{"gitID":"yeggasd"},"content":"     * @return colorStyle for {@code tagName}\u0027s label."},{"lineNumber":120,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"yeggasd"},"content":"    public static String getColorStyleFor(String tagName) {"},{"lineNumber":122,"author":{"gitID":"yeggasd"},"content":"        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"},{"lineNumber":123,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":125,"author":{"gitID":"yeggasd"},"content":"    @Override"},{"lineNumber":126,"author":{"gitID":"yeggasd"},"content":"    public boolean equals(Object other) {"},{"lineNumber":127,"author":{"gitID":"yeggasd"},"content":"        // short circuit if same object"},{"lineNumber":128,"author":{"gitID":"yeggasd"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":129,"author":{"gitID":"yeggasd"},"content":"            return true;"},{"lineNumber":130,"author":{"gitID":"yeggasd"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":132,"author":{"gitID":"yeggasd"},"content":"        // instanceof handles nulls"},{"lineNumber":133,"author":{"gitID":"yeggasd"},"content":"        if (!(other instanceof PersonDetailsCard)) {"},{"lineNumber":134,"author":{"gitID":"yeggasd"},"content":"            return false;"},{"lineNumber":135,"author":{"gitID":"yeggasd"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":137,"author":{"gitID":"yeggasd"},"content":"        // state check"},{"lineNumber":138,"author":{"gitID":"yeggasd"},"content":"        PersonDetailsCard card \u003d (PersonDetailsCard) other;"},{"lineNumber":139,"author":{"gitID":"yeggasd"},"content":"        return person.equals(card.person);"},{"lineNumber":140,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"yeggasd"},"content":"}"}],"authorContributionMap":{"yeggasd":126,"-":15}},{"path":"src/main/java/seedu/address/ui/TimetableUnionPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.beans.property.SimpleStringProperty;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.TableCell;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.TableColumn;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.TableView;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"AzuraAiR"},"content":"//@@author AzuraAiR"},{"lineNumber":16,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":17,"author":{"gitID":"AzuraAiR"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"AzuraAiR"},"content":" * A ui for the info panel that is displayed when the timetable command is called."},{"lineNumber":19,"author":{"gitID":"AzuraAiR"},"content":" */"},{"lineNumber":20,"author":{"gitID":"AzuraAiR"},"content":"public class TimetableUnionPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"AzuraAiR"},"content":"    private static final String COLUMNHEADER_STYLE_CLASS \u003d \"column-header\";"},{"lineNumber":22,"author":{"gitID":"AzuraAiR"},"content":"    private static final String TABLECELL_STYLE_CLASS \u003d \"table-cell\";"},{"lineNumber":23,"author":{"gitID":"AzuraAiR"},"content":"    private static final String EMPTY_STYLE_CLASS \u003d \"timetable-cell-empty\";"},{"lineNumber":24,"author":{"gitID":"AzuraAiR"},"content":"    private static final String[] MOD_COLOR_STYLES \u003d { \"modteal\", \"modsandybrown\", \"modplum\", \"modyellow\","},{"lineNumber":25,"author":{"gitID":"AzuraAiR"},"content":"                                                         \"modyellow\"};"},{"lineNumber":26,"author":{"gitID":"AzuraAiR"},"content":"    private static final String FXML \u003d \"TimetableUnionPanel.fxml\";"},{"lineNumber":27,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":28,"author":{"gitID":"AzuraAiR"},"content":"    private ArrayList\u003cTableColumn\u003cArrayList\u003cString\u003e, String\u003e\u003e columns;"},{"lineNumber":29,"author":{"gitID":"AzuraAiR"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"AzuraAiR"},"content":"    private TableView timetableUnion;"},{"lineNumber":31,"author":{"gitID":"AzuraAiR"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"AzuraAiR"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e day;"},{"lineNumber":33,"author":{"gitID":"AzuraAiR"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"AzuraAiR"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e eightAm;"},{"lineNumber":35,"author":{"gitID":"AzuraAiR"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"AzuraAiR"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e nineAm;"},{"lineNumber":37,"author":{"gitID":"AzuraAiR"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"AzuraAiR"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e tenAm;"},{"lineNumber":39,"author":{"gitID":"AzuraAiR"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"AzuraAiR"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e elevenAm;"},{"lineNumber":41,"author":{"gitID":"AzuraAiR"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"AzuraAiR"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e twelvePm;"},{"lineNumber":43,"author":{"gitID":"AzuraAiR"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"AzuraAiR"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e onePm;"},{"lineNumber":45,"author":{"gitID":"AzuraAiR"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"AzuraAiR"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e twoPm;"},{"lineNumber":47,"author":{"gitID":"AzuraAiR"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitID":"AzuraAiR"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e threePm;"},{"lineNumber":49,"author":{"gitID":"AzuraAiR"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitID":"AzuraAiR"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e fourPm;"},{"lineNumber":51,"author":{"gitID":"AzuraAiR"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitID":"AzuraAiR"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e fivePm;"},{"lineNumber":53,"author":{"gitID":"AzuraAiR"},"content":"    @FXML"},{"lineNumber":54,"author":{"gitID":"AzuraAiR"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e sixPm;"},{"lineNumber":55,"author":{"gitID":"AzuraAiR"},"content":"    @FXML"},{"lineNumber":56,"author":{"gitID":"AzuraAiR"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e sevenPm;"},{"lineNumber":57,"author":{"gitID":"AzuraAiR"},"content":"    @FXML"},{"lineNumber":58,"author":{"gitID":"AzuraAiR"},"content":"    private TableColumn\u003cArrayList\u003cString\u003e, String\u003e eightPm;"},{"lineNumber":59,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":60,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":61,"author":{"gitID":"AzuraAiR"},"content":"    public TimetableUnionPanel() {"},{"lineNumber":62,"author":{"gitID":"AzuraAiR"},"content":"        super(FXML);"},{"lineNumber":63,"author":{"gitID":"AzuraAiR"},"content":"        timetableUnion.setItems(null);"},{"lineNumber":64,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":66,"author":{"gitID":"AzuraAiR"},"content":"    public TimetableUnionPanel(ObservableList\u003cArrayList\u003cString\u003e\u003e schedules) {"},{"lineNumber":67,"author":{"gitID":"AzuraAiR"},"content":"        super(FXML);"},{"lineNumber":68,"author":{"gitID":"AzuraAiR"},"content":"        timetableUnion.setItems(schedules);"},{"lineNumber":69,"author":{"gitID":"AzuraAiR"},"content":"        timetableUnion.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);"},{"lineNumber":70,"author":{"gitID":"AzuraAiR"},"content":"        initializeColumns();"},{"lineNumber":71,"author":{"gitID":"AzuraAiR"},"content":"        initializeTableColumns();"},{"lineNumber":72,"author":{"gitID":"AzuraAiR"},"content":"        day.setMinWidth(100);"},{"lineNumber":73,"author":{"gitID":"AzuraAiR"},"content":"        day.setMaxWidth(100);"},{"lineNumber":74,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":76,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"AzuraAiR"},"content":"     * Initializes columns"},{"lineNumber":78,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"AzuraAiR"},"content":"    private void initializeColumns() {"},{"lineNumber":80,"author":{"gitID":"AzuraAiR"},"content":"        columns \u003d new ArrayList\u003c\u003e();"},{"lineNumber":81,"author":{"gitID":"AzuraAiR"},"content":"        columns.add(day);"},{"lineNumber":82,"author":{"gitID":"AzuraAiR"},"content":"        columns.add(eightAm);"},{"lineNumber":83,"author":{"gitID":"AzuraAiR"},"content":"        columns.add(nineAm);"},{"lineNumber":84,"author":{"gitID":"AzuraAiR"},"content":"        columns.add(tenAm);"},{"lineNumber":85,"author":{"gitID":"AzuraAiR"},"content":"        columns.add(elevenAm);"},{"lineNumber":86,"author":{"gitID":"AzuraAiR"},"content":"        columns.add(twelvePm);"},{"lineNumber":87,"author":{"gitID":"AzuraAiR"},"content":"        columns.add(onePm);"},{"lineNumber":88,"author":{"gitID":"AzuraAiR"},"content":"        columns.add(twoPm);"},{"lineNumber":89,"author":{"gitID":"AzuraAiR"},"content":"        columns.add(threePm);"},{"lineNumber":90,"author":{"gitID":"AzuraAiR"},"content":"        columns.add(fourPm);"},{"lineNumber":91,"author":{"gitID":"AzuraAiR"},"content":"        columns.add(fivePm);"},{"lineNumber":92,"author":{"gitID":"AzuraAiR"},"content":"        columns.add(sixPm);"},{"lineNumber":93,"author":{"gitID":"AzuraAiR"},"content":"        columns.add(sevenPm);"},{"lineNumber":94,"author":{"gitID":"AzuraAiR"},"content":"        columns.add(eightPm);"},{"lineNumber":95,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":97,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"AzuraAiR"},"content":"     * Initializes table columns"},{"lineNumber":99,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"AzuraAiR"},"content":"    private void initializeTableColumns() {"},{"lineNumber":101,"author":{"gitID":"AzuraAiR"},"content":"        for (int i \u003d 0; i \u003c columns.size(); i++) {"},{"lineNumber":102,"author":{"gitID":"AzuraAiR"},"content":"            final int j \u003d i;"},{"lineNumber":103,"author":{"gitID":"AzuraAiR"},"content":"            columns.get(i).setCellValueFactory(cellData -\u003e new SimpleStringProperty(cellData.getValue().get(j)));"},{"lineNumber":104,"author":{"gitID":"AzuraAiR"},"content":"            columns.get(i).impl_setReorderable(false);"},{"lineNumber":105,"author":{"gitID":"AzuraAiR"},"content":"            if (j !\u003d 0) {"},{"lineNumber":106,"author":{"gitID":"AzuraAiR"},"content":"                columns.get(i).setMinWidth(75);"},{"lineNumber":107,"author":{"gitID":"AzuraAiR"},"content":"                columns.get(i).setMaxWidth(200);"},{"lineNumber":108,"author":{"gitID":"AzuraAiR"},"content":"            }"},{"lineNumber":109,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":110,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":113,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"AzuraAiR"},"content":"     * Sets the columns to the style for each value."},{"lineNumber":115,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"AzuraAiR"},"content":"    public void setStyle() {"},{"lineNumber":117,"author":{"gitID":"AzuraAiR"},"content":"        for (int i \u003d 0; i \u003c columns.size(); i++) {"},{"lineNumber":118,"author":{"gitID":"AzuraAiR"},"content":"            TableColumn\u003cArrayList\u003cString\u003e, String\u003e columnToBeSet \u003d columns.get(i);"},{"lineNumber":119,"author":{"gitID":"AzuraAiR"},"content":"            setStyleForColumn(columnToBeSet);"},{"lineNumber":120,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":123,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"AzuraAiR"},"content":"     * Sets the style of each column."},{"lineNumber":125,"author":{"gitID":"AzuraAiR"},"content":"     * @param columnToBeSet is the column that would be set"},{"lineNumber":126,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"AzuraAiR"},"content":"    private void setStyleForColumn (TableColumn\u003cArrayList\u003cString\u003e, String\u003e columnToBeSet) {"},{"lineNumber":128,"author":{"gitID":"AzuraAiR"},"content":"        columnToBeSet.setCellFactory(column -\u003e {"},{"lineNumber":129,"author":{"gitID":"AzuraAiR"},"content":"            return setStyleForCell();"},{"lineNumber":130,"author":{"gitID":"AzuraAiR"},"content":"        });"},{"lineNumber":131,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":133,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"AzuraAiR"},"content":"     * Sets the style of the cell given the data and return it"},{"lineNumber":135,"author":{"gitID":"AzuraAiR"},"content":"     * @return the tablecell with its style set."},{"lineNumber":136,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"AzuraAiR"},"content":"    private TableCell\u003cArrayList\u003cString\u003e, String\u003e setStyleForCell () {"},{"lineNumber":138,"author":{"gitID":"AzuraAiR"},"content":"        return new TableCell\u003cArrayList\u003cString\u003e, String\u003e() {"},{"lineNumber":139,"author":{"gitID":"AzuraAiR"},"content":"            @Override"},{"lineNumber":140,"author":{"gitID":"AzuraAiR"},"content":"            protected void updateItem(String item, boolean empty) {"},{"lineNumber":141,"author":{"gitID":"AzuraAiR"},"content":"                super.updateItem(item, empty);"},{"lineNumber":142,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":143,"author":{"gitID":"AzuraAiR"},"content":"                if (item \u003d\u003d null || empty) {"},{"lineNumber":144,"author":{"gitID":"AzuraAiR"},"content":"                    setText(null);"},{"lineNumber":145,"author":{"gitID":"AzuraAiR"},"content":"                    setStyle(\"\");"},{"lineNumber":146,"author":{"gitID":"AzuraAiR"},"content":"                } else {"},{"lineNumber":147,"author":{"gitID":"AzuraAiR"},"content":"                    setText(item);"},{"lineNumber":148,"author":{"gitID":"AzuraAiR"},"content":"                    removeAllStyle(this);"},{"lineNumber":149,"author":{"gitID":"AzuraAiR"},"content":"                    if (\"\".equals(getItem())) {"},{"lineNumber":150,"author":{"gitID":"AzuraAiR"},"content":"                        getStyleClass().add(EMPTY_STYLE_CLASS);"},{"lineNumber":151,"author":{"gitID":"AzuraAiR"},"content":"                    } else if (StringUtil.isDay(getItem())) {"},{"lineNumber":152,"author":{"gitID":"AzuraAiR"},"content":"                        getStyleClass().add(COLUMNHEADER_STYLE_CLASS);"},{"lineNumber":153,"author":{"gitID":"AzuraAiR"},"content":"                    } else {"},{"lineNumber":154,"author":{"gitID":"AzuraAiR"},"content":"                        getStyleClass().add(getColorStyleFor(getItem()));"},{"lineNumber":155,"author":{"gitID":"AzuraAiR"},"content":"                    }"},{"lineNumber":156,"author":{"gitID":"AzuraAiR"},"content":"                }"},{"lineNumber":157,"author":{"gitID":"AzuraAiR"},"content":"            }"},{"lineNumber":158,"author":{"gitID":"AzuraAiR"},"content":"        };"},{"lineNumber":159,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":161,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":162,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"AzuraAiR"},"content":"     * Removes all styles present in cell"},{"lineNumber":164,"author":{"gitID":"AzuraAiR"},"content":"     * @param tableCell Cell with its style to be removed"},{"lineNumber":165,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"AzuraAiR"},"content":"    private static void removeAllStyle(TableCell\u003cArrayList\u003cString\u003e, String\u003e tableCell) {"},{"lineNumber":167,"author":{"gitID":"AzuraAiR"},"content":"        for (String color : MOD_COLOR_STYLES) {"},{"lineNumber":168,"author":{"gitID":"AzuraAiR"},"content":"            tableCell.getStyleClass().remove(color);"},{"lineNumber":169,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"AzuraAiR"},"content":"        tableCell.getStyleClass().remove(EMPTY_STYLE_CLASS);"},{"lineNumber":171,"author":{"gitID":"AzuraAiR"},"content":"        tableCell.getStyleClass().remove(TABLECELL_STYLE_CLASS);"},{"lineNumber":172,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":174,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":175,"author":{"gitID":"AzuraAiR"},"content":"     * Returns a Color Style for the Module based on its hashcode."},{"lineNumber":176,"author":{"gitID":"AzuraAiR"},"content":"     * @param modName"},{"lineNumber":177,"author":{"gitID":"AzuraAiR"},"content":"     * @return colorStyle for {@code modName}\u0027s label."},{"lineNumber":178,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":179,"author":{"gitID":"AzuraAiR"},"content":"    private static String getColorStyleFor(String modName) {"},{"lineNumber":180,"author":{"gitID":"AzuraAiR"},"content":"        return MOD_COLOR_STYLES[Math.abs(modName.hashCode()) % MOD_COLOR_STYLES.length];"},{"lineNumber":181,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"AzuraAiR"},"content":"}"}],"authorContributionMap":{"AzuraAiR":168,"-":14}},{"path":"src/main/java/seedu/address/commons/core/Config.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Config values used by the app"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class Config {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_CONFIG_FILE \u003d \"config.json\";"},{"lineNumber":12,"author":{"gitID":"Caijun7"},"content":"    public static final String DEFAULT_VENUEINFORMATION_FILE \u003d \"/json/venueinformation.json\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    // Config values customizable through config file"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private String appTitle \u003d \"StardyTogether\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private Level logLevel \u003d Level.INFO;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private String userPrefsFilePath \u003d \"preferences.json\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public String getAppTitle() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return appTitle;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void setAppTitle(String appTitle) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        this.appTitle \u003d appTitle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public Level getLogLevel() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        return logLevel;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void setLogLevel(Level logLevel) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.logLevel \u003d logLevel;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return userPrefsFilePath;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void setUserPrefsFilePath(String userPrefsFilePath) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well."},{"lineNumber":49,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        Config o \u003d (Config) other;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return Objects.equals(appTitle, o.appTitle)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        sb.append(\"App title : \" + appTitle);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        sb.append(\"\\nCurrent log level : \" + logLevel);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Caijun7":1,"-":72}},{"path":"src/main/java/seedu/address/commons/util/JsonUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"Caijun7"},"content":"import java.io.BufferedReader;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":"import java.io.InputStream;"},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":"import java.io.InputStreamReader;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.annotation.JsonAutoDetect;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.annotation.PropertyAccessor;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationFeature;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.ObjectMapper;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.SerializationFeature;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.module.SimpleModule;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Converts a Java object instance to JSON and vice versa"},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class JsonUtil {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            .registerModule(new SimpleModule(\"SimpleModule\")"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                    .addSerializer(Level.class, new ToStringSerializer())"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    static \u003cT\u003e void serializeObjectToJsonFile(File jsonFile, T objectToSerialize) throws IOException {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    static \u003cT\u003e T deserializeObjectFromJsonFile(File jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            throws IOException {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * @param filePath cannot be null."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file format is not as expected."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("},{"lineNumber":61,"author":{"gitID":"-"},"content":"            String filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        if (!file.exists()) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            logger.info(\"Json file \"  + file + \" not found\");"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        T jsonFile;"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            jsonFile \u003d deserializeObjectFromJsonFile(file, classOfObjectToDeserialize);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            logger.warning(\"Error reading from jsonFile file \" + file + \": \" + e);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            throw new DataConversionException(e);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return Optional.of(jsonFile);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"Caijun7"},"content":"    //@@author Caijun7"},{"lineNumber":83,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"Caijun7"},"content":"     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."},{"lineNumber":85,"author":{"gitID":"Caijun7"},"content":"     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."},{"lineNumber":86,"author":{"gitID":"Caijun7"},"content":"     * @param filePath cannot be null."},{"lineNumber":87,"author":{"gitID":"Caijun7"},"content":"     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."},{"lineNumber":88,"author":{"gitID":"Caijun7"},"content":"     * @throws DataConversionException if the file format is not as expected."},{"lineNumber":89,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"Caijun7"},"content":"    public static \u003cT\u003e Optional\u003cT\u003e readJsonFileFromResource("},{"lineNumber":91,"author":{"gitID":"Caijun7"},"content":"            String filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"},{"lineNumber":92,"author":{"gitID":"Caijun7"},"content":"        requireNonNull(filePath);"},{"lineNumber":93,"author":{"gitID":"Caijun7"},"content":"        InputStream inputStream;"},{"lineNumber":94,"author":{"gitID":"Caijun7"},"content":"        try {"},{"lineNumber":95,"author":{"gitID":"Caijun7"},"content":"            inputStream \u003d JsonUtil.class.getResourceAsStream(filePath);"},{"lineNumber":96,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":97,"author":{"gitID":"Caijun7"},"content":"            if (inputStream \u003d\u003d null) {"},{"lineNumber":98,"author":{"gitID":"Caijun7"},"content":"                logger.warning(\"Json file \"  + filePath + \" not found\");"},{"lineNumber":99,"author":{"gitID":"Caijun7"},"content":"                return Optional.empty();"},{"lineNumber":100,"author":{"gitID":"Caijun7"},"content":"            }"},{"lineNumber":101,"author":{"gitID":"Caijun7"},"content":"            T jsonFile;"},{"lineNumber":102,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":103,"author":{"gitID":"Caijun7"},"content":"            BufferedReader streamReader \u003d new BufferedReader(new InputStreamReader(inputStream, \"UTF-8\"));"},{"lineNumber":104,"author":{"gitID":"Caijun7"},"content":"            StringBuilder responseStrBuilder \u003d new StringBuilder();"},{"lineNumber":105,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":106,"author":{"gitID":"Caijun7"},"content":"            String inputStr;"},{"lineNumber":107,"author":{"gitID":"Caijun7"},"content":"            while ((inputStr \u003d streamReader.readLine()) !\u003d null) {"},{"lineNumber":108,"author":{"gitID":"Caijun7"},"content":"                responseStrBuilder.append(inputStr);"},{"lineNumber":109,"author":{"gitID":"Caijun7"},"content":"            }"},{"lineNumber":110,"author":{"gitID":"Caijun7"},"content":"            jsonFile \u003d fromJsonString(responseStrBuilder.toString(), classOfObjectToDeserialize);"},{"lineNumber":111,"author":{"gitID":"Caijun7"},"content":"            return Optional.of(jsonFile);"},{"lineNumber":112,"author":{"gitID":"Caijun7"},"content":"        } catch (IOException e) {"},{"lineNumber":113,"author":{"gitID":"Caijun7"},"content":"            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"},{"lineNumber":114,"author":{"gitID":"Caijun7"},"content":"            throw new DataConversionException(e);"},{"lineNumber":115,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"Caijun7"},"content":"    //@@author"},{"lineNumber":118,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * Saves the Json object to the specified file."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * @param jsonFile cannot be null"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * @param filePath cannot be null"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * @throws IOException if there was an error during writing to the file"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public static \u003cT\u003e void saveJsonFile(T jsonFile, String filePath) throws IOException {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        requireNonNull(jsonFile);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        serializeObjectToJsonFile(new File(filePath), jsonFile);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Converts a given string representation of a JSON data to instance of a class"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * @return The instance of T with the specified values in the JSON string"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        return objectMapper.readValue(json, instanceClass);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Converts a given instance of a class into its JSON data string representation"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * @param instance The T object to be converted into the JSON string"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * @return JSON data representation of the given class instance, in string"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * Contains methods that retrieve logging level from serialized string."},{"lineNumber":155,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        protected LevelDeserializer(Class\u003c?\u003e vc) {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            super(vc);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        protected Level _deserialize(String value, DeserializationContext ctxt) throws IOException {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            return getLoggingLevel(value);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":168,"author":{"gitID":"-"},"content":"         * Gets the logging level that matches loggingLevelString"},{"lineNumber":169,"author":{"gitID":"-"},"content":"         * \u003cp\u003e"},{"lineNumber":170,"author":{"gitID":"-"},"content":"         * Returns null if there are no matches"},{"lineNumber":171,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":172,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        private Level getLoggingLevel(String loggingLevelString) {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            return Level.parse(loggingLevelString);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        public Class\u003cLevel\u003e handledType() {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            return Level.class;"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Caijun7":40,"-":143}},{"path":"src/main/java/seedu/address/commons/util/StringUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.PrintWriter;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.StringWriter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Helper functions for handling strings."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class StringUtil {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Returns true if the {@code sentence} contains the {@code word}."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     *   Ignores case, but a full word match is required."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *   \u003cbr\u003eexamples:\u003cpre\u003e"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     *       \u003c/pre\u003e"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * @param sentence cannot be null"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @param word cannot be null, cannot be empty, must be a single word"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static boolean containsWordIgnoreCase(String sentence, String word) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        requireNonNull(sentence);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(word);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        String preppedWord \u003d word.trim();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        String preppedSentence \u003d sentence;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        for (String wordInSentence: wordsInPreppedSentence) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            if (wordInSentence.equalsIgnoreCase(preppedWord)) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return false;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Returns a detailed message of the t, including the stack trace."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static String getDetails(Throwable t) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        requireNonNull(t);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        StringWriter sw \u003d new StringWriter();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Will return false for any other non-null string input"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code s} is null."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        requireNonNull(s);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            int value \u003d Integer.parseInt(s);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        } catch (NumberFormatException nfe) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"yeggasd"},"content":"    //@@author yeggasd"},{"lineNumber":75,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"yeggasd"},"content":"     * Returns true if {@code s} represents odd or even"},{"lineNumber":77,"author":{"gitID":"yeggasd"},"content":"     ** Will return false for any other non-null string input"},{"lineNumber":78,"author":{"gitID":"yeggasd"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"},{"lineNumber":79,"author":{"gitID":"yeggasd"},"content":"     * @throws NullPointerException if {@code s} is null."},{"lineNumber":80,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"yeggasd"},"content":"    public static boolean isOddEven(String s) {"},{"lineNumber":82,"author":{"gitID":"yeggasd"},"content":"        requireNonNull(s);"},{"lineNumber":83,"author":{"gitID":"yeggasd"},"content":"        return s.equalsIgnoreCase(\"even\") || s.equalsIgnoreCase(\"odd\");"},{"lineNumber":84,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":86,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"yeggasd"},"content":"     * @param s The string to be checked"},{"lineNumber":88,"author":{"gitID":"yeggasd"},"content":"     * @return 0 if string is even"},{"lineNumber":89,"author":{"gitID":"yeggasd"},"content":"     *         1 if string is odd"},{"lineNumber":90,"author":{"gitID":"yeggasd"},"content":"     *         null otherwise."},{"lineNumber":91,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"yeggasd"},"content":"    public static Index getOddEven(String s) {"},{"lineNumber":93,"author":{"gitID":"yeggasd"},"content":"        requireNonNull(s);"},{"lineNumber":94,"author":{"gitID":"yeggasd"},"content":"        if (s.equalsIgnoreCase(\"even\")) {"},{"lineNumber":95,"author":{"gitID":"yeggasd"},"content":"            return Index.fromZeroBased(0);"},{"lineNumber":96,"author":{"gitID":"yeggasd"},"content":"        } else if (s.equalsIgnoreCase(\"odd\")) {"},{"lineNumber":97,"author":{"gitID":"yeggasd"},"content":"            return Index.fromZeroBased(1);"},{"lineNumber":98,"author":{"gitID":"yeggasd"},"content":"        } else {"},{"lineNumber":99,"author":{"gitID":"yeggasd"},"content":"            return null;"},{"lineNumber":100,"author":{"gitID":"yeggasd"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":103,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"yeggasd"},"content":"     * Returns true if (@code text) represents a day in the week"},{"lineNumber":105,"author":{"gitID":"yeggasd"},"content":"     * e.g. Monday"},{"lineNumber":106,"author":{"gitID":"yeggasd"},"content":"     * Will return false for any other non-null string input"},{"lineNumber":107,"author":{"gitID":"yeggasd"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"},{"lineNumber":108,"author":{"gitID":"yeggasd"},"content":"     * @throws NullPointerException if {@code s} is null."},{"lineNumber":109,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"yeggasd"},"content":"    public static boolean isDay(String s) {"},{"lineNumber":111,"author":{"gitID":"yeggasd"},"content":"        requireNonNull(s);"},{"lineNumber":112,"author":{"gitID":"yeggasd"},"content":"        return s.equalsIgnoreCase(\"Monday\") || s.equalsIgnoreCase(\"Tuesday\")"},{"lineNumber":113,"author":{"gitID":"yeggasd"},"content":"                || s.equalsIgnoreCase(\"Wednesday\") || s.equalsIgnoreCase(\"Thursday\")"},{"lineNumber":114,"author":{"gitID":"yeggasd"},"content":"                || s.equalsIgnoreCase(\"Friday\") || s.equalsIgnoreCase(\"Saturday\")"},{"lineNumber":115,"author":{"gitID":"yeggasd"},"content":"                || s.equalsIgnoreCase(\"Sunday\");"},{"lineNumber":116,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":118,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"yeggasd"},"content":"     * Capitalizes the given (@code s)"},{"lineNumber":120,"author":{"gitID":"yeggasd"},"content":"     * @param s String to be capitalized"},{"lineNumber":121,"author":{"gitID":"yeggasd"},"content":"     * @return Capitalized String"},{"lineNumber":122,"author":{"gitID":"yeggasd"},"content":"     * @throws NullPointerException if {@code s} is null."},{"lineNumber":123,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"yeggasd"},"content":"    public static String capitalize(String s) {"},{"lineNumber":125,"author":{"gitID":"yeggasd"},"content":"        requireNonNull(s);"},{"lineNumber":126,"author":{"gitID":"yeggasd"},"content":"        return s.substring(0, 1).toUpperCase() + s.substring(1).toLowerCase();"},{"lineNumber":127,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"yeggasd"},"content":"    //@@author"},{"lineNumber":129,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yeggasd":55,"-":74}},{"path":"src/main/java/seedu/address/ui/InfoPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.AliasListEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.BirthdayListEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.GoogleMapsEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.InfoPanelEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.TimeTableEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.VenueTableEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Container for both browser panel and person information panel"},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class InfoPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"InfoPanel.fxml\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private BirthdayList birthdayList;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private VenueTable venueTable;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private AliasList aliasList;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private GoogleMapsDisplay mapsDisplay;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private PersonDetailsCard personDetailsCard;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private TimetableUnionPanel timetableUnionPanel;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private StackPane placeholder;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private StackPane birthdayPlaceholder;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private StackPane venuePlaceholder;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private StackPane aliasListPlaceholder;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private StackPane userDetailsPlaceholder;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private StackPane timetableUnionPlaceholder;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private StackPane mapsPlaceholder;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public InfoPanel() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        personDetailsCard \u003d new PersonDetailsCard();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        userDetailsPlaceholder.getChildren().add(personDetailsCard.getRoot());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        venueTable \u003d new VenueTable();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        venuePlaceholder.getChildren().add(venueTable.getRoot());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        aliasList \u003d new AliasList();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        aliasListPlaceholder.getChildren().add(aliasList.getRoot());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        mapsDisplay \u003d new GoogleMapsDisplay();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        mapsPlaceholder.getChildren().add(mapsDisplay.getRoot());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        birthdayList \u003d new BirthdayList();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        birthdayPlaceholder.getChildren().add(birthdayList.getRoot());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        timetableUnionPanel \u003d new TimetableUnionPanel();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        timetableUnionPlaceholder.getChildren().add(timetableUnionPanel.getRoot());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        placeholder.toFront();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void freeResources() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"AzuraAiR"},"content":"    //@@author AzuraAiR"},{"lineNumber":76,"author":{"gitID":"AzuraAiR"},"content":"    @Subscribe"},{"lineNumber":77,"author":{"gitID":"AzuraAiR"},"content":"    private void handleBirthdayListEvent(BirthdayListEvent event) {"},{"lineNumber":78,"author":{"gitID":"AzuraAiR"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":79,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":80,"author":{"gitID":"AzuraAiR"},"content":"        birthdayList.loadList(event.getBirthdayList());"},{"lineNumber":81,"author":{"gitID":"AzuraAiR"},"content":"        birthdayPlaceholder.toFront();"},{"lineNumber":82,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"AzuraAiR"},"content":"    //@@author"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"jingyinno"},"content":"    //@@author jingyinno"},{"lineNumber":86,"author":{"gitID":"jingyinno"},"content":"    @Subscribe"},{"lineNumber":87,"author":{"gitID":"jingyinno"},"content":"    private void handleVenueTableEvent(VenueTableEvent event) {"},{"lineNumber":88,"author":{"gitID":"jingyinno"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":89,"author":{"gitID":"jingyinno"},"content":"        venuePlaceholder.getChildren().removeAll();"},{"lineNumber":90,"author":{"gitID":"jingyinno"},"content":"        venueTable \u003d new VenueTable(event.getSchedule());"},{"lineNumber":91,"author":{"gitID":"jingyinno"},"content":"        venuePlaceholder.getChildren().add(venueTable.getRoot());"},{"lineNumber":92,"author":{"gitID":"jingyinno"},"content":"        venuePlaceholder.toFront();"},{"lineNumber":93,"author":{"gitID":"jingyinno"},"content":"        venueTable.setStyle();"},{"lineNumber":94,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":96,"author":{"gitID":"jingyinno"},"content":"    @Subscribe"},{"lineNumber":97,"author":{"gitID":"jingyinno"},"content":"    private void handleGoogleMapsDisplayEvent(GoogleMapsEvent event) {"},{"lineNumber":98,"author":{"gitID":"jingyinno"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":99,"author":{"gitID":"jingyinno"},"content":"        if (event.getIsOneLocationEvent()) {"},{"lineNumber":100,"author":{"gitID":"jingyinno"},"content":"            mapsDisplay.loadMapPage(event.getLocations());"},{"lineNumber":101,"author":{"gitID":"jingyinno"},"content":"        } else {"},{"lineNumber":102,"author":{"gitID":"jingyinno"},"content":"            mapsDisplay.loadMapDirections(event.getLocations());"},{"lineNumber":103,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"jingyinno"},"content":"        mapsPlaceholder.toFront();"},{"lineNumber":105,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":107,"author":{"gitID":"jingyinno"},"content":"    @Subscribe"},{"lineNumber":108,"author":{"gitID":"jingyinno"},"content":"    private void handleAliasListEvent(AliasListEvent event) {"},{"lineNumber":109,"author":{"gitID":"jingyinno"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":110,"author":{"gitID":"jingyinno"},"content":"        aliasListPlaceholder.getChildren().removeAll();"},{"lineNumber":111,"author":{"gitID":"jingyinno"},"content":"        aliasList.init(event.getAliases());"},{"lineNumber":112,"author":{"gitID":"jingyinno"},"content":"        aliasListPlaceholder.toFront();"},{"lineNumber":113,"author":{"gitID":"jingyinno"},"content":"        aliasList.setStyle();"},{"lineNumber":114,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":116,"author":{"gitID":"jingyinno"},"content":"    @Subscribe"},{"lineNumber":117,"author":{"gitID":"jingyinno"},"content":"    private void handleInfoPanelEvent(InfoPanelEvent event) {"},{"lineNumber":118,"author":{"gitID":"jingyinno"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":119,"author":{"gitID":"jingyinno"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":120,"author":{"gitID":"jingyinno"},"content":"            hideAllPanel();"},{"lineNumber":121,"author":{"gitID":"jingyinno"},"content":"        });"},{"lineNumber":122,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"jingyinno"},"content":"    //@@author"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"yeggasd"},"content":"    //@@author yeggasd"},{"lineNumber":126,"author":{"gitID":"yeggasd"},"content":"    @Subscribe"},{"lineNumber":127,"author":{"gitID":"yeggasd"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":128,"author":{"gitID":"yeggasd"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":129,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":130,"author":{"gitID":"yeggasd"},"content":"        hideAllPanel();"},{"lineNumber":131,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":132,"author":{"gitID":"yeggasd"},"content":"        Person person \u003d event.getNewSelection().person;"},{"lineNumber":133,"author":{"gitID":"yeggasd"},"content":"        int oddEvenIndex \u003d event.getOddEvenIndex();"},{"lineNumber":134,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":135,"author":{"gitID":"yeggasd"},"content":"        personDetailsCard.update(person, oddEvenIndex);"},{"lineNumber":136,"author":{"gitID":"yeggasd"},"content":"        userDetailsPlaceholder.toFront();"},{"lineNumber":137,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":139,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"yeggasd"},"content":"     * Hides all the panels"},{"lineNumber":141,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"yeggasd"},"content":"    private void hideAllPanel() {"},{"lineNumber":143,"author":{"gitID":"yeggasd"},"content":"        userDetailsPlaceholder.toBack();"},{"lineNumber":144,"author":{"gitID":"yeggasd"},"content":"        venuePlaceholder.toBack();"},{"lineNumber":145,"author":{"gitID":"yeggasd"},"content":"        mapsPlaceholder.toBack();"},{"lineNumber":146,"author":{"gitID":"yeggasd"},"content":"        birthdayPlaceholder.toBack();"},{"lineNumber":147,"author":{"gitID":"yeggasd"},"content":"        timetableUnionPlaceholder.toBack();"},{"lineNumber":148,"author":{"gitID":"yeggasd"},"content":"        aliasListPlaceholder.toBack();"},{"lineNumber":149,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"yeggasd"},"content":"    //@@author"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    private void handleTimeTableUnionEvent(TimeTableEvent event) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        userDetailsPlaceholder.getChildren().removeAll();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        timetableUnionPanel \u003d new TimetableUnionPanel(event.getTimeTable());"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        timetableUnionPlaceholder.getChildren().add(timetableUnionPanel.getRoot());"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        timetableUnionPlaceholder.toFront();"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        timetableUnionPanel.setStyle();"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"content":"    //@@author"},{"lineNumber":162,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"yeggasd":27,"AzuraAiR":9,"jingyinno":39,"-":86}},{"path":"src/main/java/seedu/address/ui/PasswordBox.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.PasswordField;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PasswordCorrectEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PasswordWrongEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.WrongPasswordException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.ListElementPointer;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Password;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"yeggasd"},"content":"//@@author yeggasd"},{"lineNumber":26,"author":{"gitID":"yeggasd"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"yeggasd"},"content":" * The UI component that is responsible for receiving user password inputs."},{"lineNumber":28,"author":{"gitID":"yeggasd"},"content":" */"},{"lineNumber":29,"author":{"gitID":"yeggasd"},"content":"public class PasswordBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":30,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":31,"author":{"gitID":"yeggasd"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":32,"author":{"gitID":"yeggasd"},"content":"    private static final String FXML \u003d \"PasswordBox.fxml\";"},{"lineNumber":33,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":34,"author":{"gitID":"yeggasd"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PasswordBox.class);"},{"lineNumber":35,"author":{"gitID":"yeggasd"},"content":"    private ListElementPointer historySnapshot;"},{"lineNumber":36,"author":{"gitID":"yeggasd"},"content":"    private final Storage storage;"},{"lineNumber":37,"author":{"gitID":"yeggasd"},"content":"    private final Model model;"},{"lineNumber":38,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":39,"author":{"gitID":"yeggasd"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"yeggasd"},"content":"    private PasswordField passwordTextField;"},{"lineNumber":41,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":42,"author":{"gitID":"yeggasd"},"content":"    public PasswordBox(Storage storage, Model model) {"},{"lineNumber":43,"author":{"gitID":"yeggasd"},"content":"        super(FXML);"},{"lineNumber":44,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":45,"author":{"gitID":"yeggasd"},"content":"        this.storage \u003d storage;"},{"lineNumber":46,"author":{"gitID":"yeggasd"},"content":"        this.model \u003d model;"},{"lineNumber":47,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":48,"author":{"gitID":"yeggasd"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the Passowrd box."},{"lineNumber":49,"author":{"gitID":"yeggasd"},"content":"        passwordTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":50,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":52,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"yeggasd"},"content":"     * Handles the key press event, {@code keyEvent}."},{"lineNumber":54,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"yeggasd"},"content":"    @FXML"},{"lineNumber":56,"author":{"gitID":"yeggasd"},"content":"    private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":57,"author":{"gitID":"yeggasd"},"content":"        switch (keyEvent.getCode()) {"},{"lineNumber":58,"author":{"gitID":"yeggasd"},"content":"        default:"},{"lineNumber":59,"author":{"gitID":"yeggasd"},"content":"            // let JavaFx handle the keypress"},{"lineNumber":60,"author":{"gitID":"yeggasd"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":63,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"yeggasd"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":65,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"yeggasd"},"content":"    @FXML"},{"lineNumber":67,"author":{"gitID":"yeggasd"},"content":"    private void handlePasswordInputChanged() {"},{"lineNumber":68,"author":{"gitID":"yeggasd"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"},{"lineNumber":69,"author":{"gitID":"yeggasd"},"content":"        ReadOnlyAddressBook initialData;"},{"lineNumber":70,"author":{"gitID":"yeggasd"},"content":"        String input \u003d passwordTextField.getText();"},{"lineNumber":71,"author":{"gitID":"yeggasd"},"content":"        try {"},{"lineNumber":72,"author":{"gitID":"yeggasd"},"content":"            passwordTextField.setText(\"\");"},{"lineNumber":73,"author":{"gitID":"yeggasd"},"content":"            addressBookOptional \u003d storage.readAddressBook(new Password(input));"},{"lineNumber":74,"author":{"gitID":"yeggasd"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"},{"lineNumber":75,"author":{"gitID":"yeggasd"},"content":"            model.resetData(initialData);"},{"lineNumber":76,"author":{"gitID":"yeggasd"},"content":"            raise(new PasswordCorrectEvent());"},{"lineNumber":77,"author":{"gitID":"yeggasd"},"content":"        } catch (WrongPasswordException e) {"},{"lineNumber":78,"author":{"gitID":"yeggasd"},"content":"            logger.warning(\"Wrong password used. Trying again.\");"},{"lineNumber":79,"author":{"gitID":"yeggasd"},"content":"            raise(new PasswordWrongEvent());"},{"lineNumber":80,"author":{"gitID":"yeggasd"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":81,"author":{"gitID":"yeggasd"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":82,"author":{"gitID":"yeggasd"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"},{"lineNumber":83,"author":{"gitID":"yeggasd"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":84,"author":{"gitID":"yeggasd"},"content":"        } catch (IOException e) {"},{"lineNumber":85,"author":{"gitID":"yeggasd"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":86,"author":{"gitID":"yeggasd"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":87,"author":{"gitID":"yeggasd"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":90,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"yeggasd"},"content":"     * Sets the password box style to use the default style."},{"lineNumber":92,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"yeggasd"},"content":"    private void setStyleToDefault() {"},{"lineNumber":94,"author":{"gitID":"yeggasd"},"content":"        passwordTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":95,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":97,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"yeggasd"},"content":"     * Sets the password box style to indicate a wrong password."},{"lineNumber":99,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"yeggasd"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":101,"author":{"gitID":"yeggasd"},"content":"        ObservableList\u003cString\u003e styleClass \u003d passwordTextField.getStyleClass();"},{"lineNumber":102,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":103,"author":{"gitID":"yeggasd"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":104,"author":{"gitID":"yeggasd"},"content":"            return;"},{"lineNumber":105,"author":{"gitID":"yeggasd"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":107,"author":{"gitID":"yeggasd"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":108,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":110,"author":{"gitID":"yeggasd"},"content":"}"}],"authorContributionMap":{"yeggasd":86,"-":24}},{"path":"src/main/java/seedu/address/commons/exceptions/NoInternetConnectionException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"AzuraAiR"},"content":"//@@author AzuraAiR"},{"lineNumber":4,"author":{"gitID":"AzuraAiR"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"AzuraAiR"},"content":" * Represents an error in trying to obtain the long url from the shortened Timetable URL"},{"lineNumber":6,"author":{"gitID":"AzuraAiR"},"content":" */"},{"lineNumber":7,"author":{"gitID":"AzuraAiR"},"content":"public class NoInternetConnectionException extends Exception {"},{"lineNumber":8,"author":{"gitID":"AzuraAiR"},"content":"    public NoInternetConnectionException(String message) {"},{"lineNumber":9,"author":{"gitID":"AzuraAiR"},"content":"        super(message);"},{"lineNumber":10,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":11,"author":{"gitID":"AzuraAiR"},"content":"}"}],"authorContributionMap":{"AzuraAiR":9,"-":2}},{"path":"src/main/java/seedu/address/commons/exceptions/WrongPasswordException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"yeggasd"},"content":"//@@author yeggasd"},{"lineNumber":4,"author":{"gitID":"yeggasd"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"yeggasd"},"content":" * Represents an error during decryption"},{"lineNumber":6,"author":{"gitID":"yeggasd"},"content":" */"},{"lineNumber":7,"author":{"gitID":"yeggasd"},"content":"public class WrongPasswordException extends Exception {"},{"lineNumber":8,"author":{"gitID":"yeggasd"},"content":"    public WrongPasswordException(String message) {"},{"lineNumber":9,"author":{"gitID":"yeggasd"},"content":"        super(message);"},{"lineNumber":10,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":11,"author":{"gitID":"yeggasd"},"content":"}"},{"lineNumber":12,"author":{"gitID":"yeggasd"},"content":""}],"authorContributionMap":{"yeggasd":10,"-":2}},{"path":"src/main/java/seedu/address/ui/PasswordUiManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PasswordCorrectEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PasswordWrongEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"yeggasd"},"content":"//@@author yeggasd"},{"lineNumber":20,"author":{"gitID":"yeggasd"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"yeggasd"},"content":" * The manager of the Password UI component."},{"lineNumber":22,"author":{"gitID":"yeggasd"},"content":" */"},{"lineNumber":23,"author":{"gitID":"yeggasd"},"content":"public class PasswordUiManager extends ComponentManager implements Ui {"},{"lineNumber":24,"author":{"gitID":"yeggasd"},"content":"    public static final String WRONG_PASSWORD_ERROR_DIALOG_STAGE_TITLE \u003d \"Password Wrong Error\";"},{"lineNumber":25,"author":{"gitID":"yeggasd"},"content":"    public static final String WRONG_PASSWORD_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Wrong Password used\";"},{"lineNumber":26,"author":{"gitID":"yeggasd"},"content":"    public static final String WRONG_PASSWORD_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Try Again\";"},{"lineNumber":27,"author":{"gitID":"yeggasd"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"},{"lineNumber":28,"author":{"gitID":"yeggasd"},"content":"    private static final double MAX_WINDOW_SIZE \u003d Double.MAX_VALUE;"},{"lineNumber":29,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":30,"author":{"gitID":"yeggasd"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":31,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":32,"author":{"gitID":"yeggasd"},"content":"    private Storage storage;"},{"lineNumber":33,"author":{"gitID":"yeggasd"},"content":"    private Model model;"},{"lineNumber":34,"author":{"gitID":"yeggasd"},"content":"    private Ui ui;"},{"lineNumber":35,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":36,"author":{"gitID":"yeggasd"},"content":"    private PasswordWindow pw;"},{"lineNumber":37,"author":{"gitID":"yeggasd"},"content":"    private Stage primaryStage;"},{"lineNumber":38,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":39,"author":{"gitID":"yeggasd"},"content":"    public PasswordUiManager(Storage storage, Model model, Ui ui) {"},{"lineNumber":40,"author":{"gitID":"yeggasd"},"content":"        super();"},{"lineNumber":41,"author":{"gitID":"yeggasd"},"content":"        this.storage \u003d storage;"},{"lineNumber":42,"author":{"gitID":"yeggasd"},"content":"        this.model \u003d model;"},{"lineNumber":43,"author":{"gitID":"yeggasd"},"content":"        this.ui \u003d ui;"},{"lineNumber":44,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":46,"author":{"gitID":"yeggasd"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"yeggasd"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":48,"author":{"gitID":"yeggasd"},"content":"        logger.info(\"Starting UI...\");"},{"lineNumber":49,"author":{"gitID":"yeggasd"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":50,"author":{"gitID":"yeggasd"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"yeggasd"},"content":"            pw \u003d new PasswordWindow(primaryStage, model, storage);"},{"lineNumber":52,"author":{"gitID":"yeggasd"},"content":"            pw.show();"},{"lineNumber":53,"author":{"gitID":"yeggasd"},"content":"            pw.fillInnerParts();"},{"lineNumber":54,"author":{"gitID":"yeggasd"},"content":"        } catch (Throwable e) {"},{"lineNumber":55,"author":{"gitID":"yeggasd"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":56,"author":{"gitID":"yeggasd"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"},{"lineNumber":57,"author":{"gitID":"yeggasd"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":60,"author":{"gitID":"yeggasd"},"content":"    private void showPasswordWrongAlertAndWait(String description, String details) {"},{"lineNumber":61,"author":{"gitID":"yeggasd"},"content":"        showAlertDialogAndWait(AlertType.ERROR, WRONG_PASSWORD_ERROR_DIALOG_STAGE_TITLE, description, details);"},{"lineNumber":62,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":64,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"yeggasd"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},"},{"lineNumber":66,"author":{"gitID":"yeggasd"},"content":"     * and exits the application after the user has closed the alert dialog."},{"lineNumber":67,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"yeggasd"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"},{"lineNumber":69,"author":{"gitID":"yeggasd"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"},{"lineNumber":70,"author":{"gitID":"yeggasd"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"},{"lineNumber":71,"author":{"gitID":"yeggasd"},"content":"        Platform.exit();"},{"lineNumber":72,"author":{"gitID":"yeggasd"},"content":"        System.exit(1);"},{"lineNumber":73,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":75,"author":{"gitID":"yeggasd"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"},{"lineNumber":76,"author":{"gitID":"yeggasd"},"content":"        showAlertDialogAndWait(primaryStage, type, title, headerText, contentText);"},{"lineNumber":77,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":79,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"yeggasd"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters."},{"lineNumber":81,"author":{"gitID":"yeggasd"},"content":"     * This method only returns after the user has closed the alert dialog."},{"lineNumber":82,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"yeggasd"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"},{"lineNumber":84,"author":{"gitID":"yeggasd"},"content":"                                               String contentText) {"},{"lineNumber":85,"author":{"gitID":"yeggasd"},"content":"        final Alert alert \u003d new Alert(type);"},{"lineNumber":86,"author":{"gitID":"yeggasd"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"},{"lineNumber":87,"author":{"gitID":"yeggasd"},"content":"        alert.initOwner(owner);"},{"lineNumber":88,"author":{"gitID":"yeggasd"},"content":"        alert.setTitle(title);"},{"lineNumber":89,"author":{"gitID":"yeggasd"},"content":"        alert.setHeaderText(headerText);"},{"lineNumber":90,"author":{"gitID":"yeggasd"},"content":"        alert.setContentText(contentText);"},{"lineNumber":91,"author":{"gitID":"yeggasd"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":92,"author":{"gitID":"yeggasd"},"content":"        alert.showAndWait();"},{"lineNumber":93,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":95,"author":{"gitID":"yeggasd"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"yeggasd"},"content":"    public void stop() {"},{"lineNumber":97,"author":{"gitID":"yeggasd"},"content":"        pw.hide();"},{"lineNumber":98,"author":{"gitID":"yeggasd"},"content":"        pw.releaseResources();"},{"lineNumber":99,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"yeggasd"},"content":"    @Subscribe"},{"lineNumber":101,"author":{"gitID":"yeggasd"},"content":"    private void handlePasswordCorrectEvent(PasswordCorrectEvent event) {"},{"lineNumber":102,"author":{"gitID":"yeggasd"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":103,"author":{"gitID":"yeggasd"},"content":"        primaryStage.setResizable(true);"},{"lineNumber":104,"author":{"gitID":"yeggasd"},"content":"        primaryStage.setMaxHeight(MAX_WINDOW_SIZE);"},{"lineNumber":105,"author":{"gitID":"yeggasd"},"content":"        ui.start(primaryStage); ("},{"lineNumber":106,"author":{"gitID":"yeggasd"},"content":"                (UiManager) ui).openBirthdayNotification();"},{"lineNumber":107,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":109,"author":{"gitID":"yeggasd"},"content":"    @Subscribe"},{"lineNumber":110,"author":{"gitID":"yeggasd"},"content":"    private void handlePasswordWrongEvent(PasswordWrongEvent event) {"},{"lineNumber":111,"author":{"gitID":"yeggasd"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":112,"author":{"gitID":"yeggasd"},"content":"        showPasswordWrongAlertAndWait(WRONG_PASSWORD_ERROR_DIALOG_HEADER_MESSAGE,"},{"lineNumber":113,"author":{"gitID":"yeggasd"},"content":"                WRONG_PASSWORD_ERROR_DIALOG_CONTENT_MESSAGE);"},{"lineNumber":114,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":116,"author":{"gitID":"yeggasd"},"content":"}"}],"authorContributionMap":{"yeggasd":98,"-":18}},{"path":"src/main/java/seedu/address/commons/util/timetable/Lesson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util.timetable;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"AzuraAiR"},"content":"//@@author AzuraAiR"},{"lineNumber":4,"author":{"gitID":"AzuraAiR"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"AzuraAiR"},"content":" * Represents a lesson that a module has"},{"lineNumber":6,"author":{"gitID":"AzuraAiR"},"content":" */"},{"lineNumber":7,"author":{"gitID":"AzuraAiR"},"content":"public class Lesson {"},{"lineNumber":8,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":9,"author":{"gitID":"AzuraAiR"},"content":"    private final String moduleCode;"},{"lineNumber":10,"author":{"gitID":"AzuraAiR"},"content":"    private final String classNo;"},{"lineNumber":11,"author":{"gitID":"AzuraAiR"},"content":"    private final String lessonType;"},{"lineNumber":12,"author":{"gitID":"AzuraAiR"},"content":"    private final String weekType;"},{"lineNumber":13,"author":{"gitID":"AzuraAiR"},"content":"    private final String day;"},{"lineNumber":14,"author":{"gitID":"AzuraAiR"},"content":"    private final String startTime;"},{"lineNumber":15,"author":{"gitID":"AzuraAiR"},"content":"    private final String endTime;"},{"lineNumber":16,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":17,"author":{"gitID":"AzuraAiR"},"content":"    public Lesson(String moduleCode, String classNo, String lessonType, String weekType,"},{"lineNumber":18,"author":{"gitID":"AzuraAiR"},"content":"                  String day, String startTime, String endTime) {"},{"lineNumber":19,"author":{"gitID":"AzuraAiR"},"content":"        this.moduleCode \u003d moduleCode;"},{"lineNumber":20,"author":{"gitID":"AzuraAiR"},"content":"        this.classNo \u003d classNo;"},{"lineNumber":21,"author":{"gitID":"AzuraAiR"},"content":"        this.lessonType \u003d lessonType;"},{"lineNumber":22,"author":{"gitID":"AzuraAiR"},"content":"        this.weekType \u003d weekType;"},{"lineNumber":23,"author":{"gitID":"AzuraAiR"},"content":"        this.day \u003d day;"},{"lineNumber":24,"author":{"gitID":"AzuraAiR"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":25,"author":{"gitID":"AzuraAiR"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":26,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":28,"author":{"gitID":"AzuraAiR"},"content":"    public String getModuleCode() {"},{"lineNumber":29,"author":{"gitID":"AzuraAiR"},"content":"        return moduleCode;"},{"lineNumber":30,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":32,"author":{"gitID":"AzuraAiR"},"content":"    public String getClassNo() {"},{"lineNumber":33,"author":{"gitID":"AzuraAiR"},"content":"        return classNo;"},{"lineNumber":34,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":36,"author":{"gitID":"AzuraAiR"},"content":"    public String getLessonType() {"},{"lineNumber":37,"author":{"gitID":"AzuraAiR"},"content":"        return lessonType;"},{"lineNumber":38,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":40,"author":{"gitID":"AzuraAiR"},"content":"    public String getWeekType() {"},{"lineNumber":41,"author":{"gitID":"AzuraAiR"},"content":"        return weekType;"},{"lineNumber":42,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":44,"author":{"gitID":"AzuraAiR"},"content":"    public String getDay() {"},{"lineNumber":45,"author":{"gitID":"AzuraAiR"},"content":"        return day;"},{"lineNumber":46,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":48,"author":{"gitID":"AzuraAiR"},"content":"    public String getStartTime() {"},{"lineNumber":49,"author":{"gitID":"AzuraAiR"},"content":"        return startTime;"},{"lineNumber":50,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":52,"author":{"gitID":"AzuraAiR"},"content":"    public String getEndTime() {"},{"lineNumber":53,"author":{"gitID":"AzuraAiR"},"content":"        return endTime;"},{"lineNumber":54,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":56,"author":{"gitID":"AzuraAiR"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"AzuraAiR"},"content":"    public String toString() {"},{"lineNumber":58,"author":{"gitID":"AzuraAiR"},"content":"        return moduleCode + \"\\n\" + lessonType.substring(0, 3).toUpperCase() + \"[\" + classNo + \"]\\n\";"},{"lineNumber":59,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"AzuraAiR"},"content":"}"}],"authorContributionMap":{"AzuraAiR":58,"-":2}},{"path":"src/main/java/seedu/address/commons/events/ui/BirthdayNotificationEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"AzuraAiR"},"content":"//@@author AzuraAiR"},{"lineNumber":8,"author":{"gitID":"AzuraAiR"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"AzuraAiR"},"content":" * Represents a call for the Birthday Notification to be displayed"},{"lineNumber":10,"author":{"gitID":"AzuraAiR"},"content":" */"},{"lineNumber":11,"author":{"gitID":"AzuraAiR"},"content":"public class BirthdayNotificationEvent extends BaseEvent {"},{"lineNumber":12,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":13,"author":{"gitID":"AzuraAiR"},"content":"    private final String birthdayList;"},{"lineNumber":14,"author":{"gitID":"AzuraAiR"},"content":"    private final LocalDate currentDate;"},{"lineNumber":15,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":16,"author":{"gitID":"AzuraAiR"},"content":"    public BirthdayNotificationEvent(String newList, LocalDate today) {"},{"lineNumber":17,"author":{"gitID":"AzuraAiR"},"content":"        this.birthdayList \u003d newList;"},{"lineNumber":18,"author":{"gitID":"AzuraAiR"},"content":"        this.currentDate \u003d today;"},{"lineNumber":19,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":21,"author":{"gitID":"AzuraAiR"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"AzuraAiR"},"content":"    public String toString() {"},{"lineNumber":23,"author":{"gitID":"AzuraAiR"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":24,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":26,"author":{"gitID":"AzuraAiR"},"content":"    public String getBirthdayList() {"},{"lineNumber":27,"author":{"gitID":"AzuraAiR"},"content":"        return birthdayList;"},{"lineNumber":28,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":30,"author":{"gitID":"AzuraAiR"},"content":"    public LocalDate getCurrentDate() {"},{"lineNumber":31,"author":{"gitID":"AzuraAiR"},"content":"        return currentDate;"},{"lineNumber":32,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":34,"author":{"gitID":"AzuraAiR"},"content":"}"}],"authorContributionMap":{"AzuraAiR":28,"-":6}},{"path":"src/main/java/seedu/address/commons/events/ui/PasswordCorrectEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"yeggasd"},"content":"//@@author yeggasd"},{"lineNumber":6,"author":{"gitID":"yeggasd"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"yeggasd"},"content":" * Indicates a request for App start for Correct Password"},{"lineNumber":8,"author":{"gitID":"yeggasd"},"content":" */"},{"lineNumber":9,"author":{"gitID":"yeggasd"},"content":"public class PasswordCorrectEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":11,"author":{"gitID":"yeggasd"},"content":"    @Override"},{"lineNumber":12,"author":{"gitID":"yeggasd"},"content":"    public String toString() {"},{"lineNumber":13,"author":{"gitID":"yeggasd"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":14,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"yeggasd"},"content":"}"}],"authorContributionMap":{"yeggasd":11,"-":4}},{"path":"src/main/java/seedu/address/commons/events/ui/AliasListEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"jingyinno"},"content":"//@@author jingyinno"},{"lineNumber":9,"author":{"gitID":"jingyinno"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"jingyinno"},"content":" * Represents a list of aliases that have been set"},{"lineNumber":11,"author":{"gitID":"jingyinno"},"content":" */"},{"lineNumber":12,"author":{"gitID":"jingyinno"},"content":"public class AliasListEvent extends BaseEvent {"},{"lineNumber":13,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":14,"author":{"gitID":"jingyinno"},"content":"    private final ObservableList\u003cArrayList\u003cString\u003e\u003e aliases;"},{"lineNumber":15,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":16,"author":{"gitID":"jingyinno"},"content":"    public AliasListEvent(ObservableList\u003cArrayList\u003cString\u003e\u003e aliases) {"},{"lineNumber":17,"author":{"gitID":"jingyinno"},"content":"        this.aliases \u003d aliases;"},{"lineNumber":18,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":20,"author":{"gitID":"jingyinno"},"content":"    public ObservableList\u003cArrayList\u003cString\u003e\u003e getAliases() {"},{"lineNumber":21,"author":{"gitID":"jingyinno"},"content":"        return aliases;"},{"lineNumber":22,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":24,"author":{"gitID":"jingyinno"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"jingyinno"},"content":"    public String toString() {"},{"lineNumber":26,"author":{"gitID":"jingyinno"},"content":"        return \"AliasListEvent\";"},{"lineNumber":27,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"jingyinno"},"content":"}"}],"authorContributionMap":{"jingyinno":21,"-":7}},{"path":"src/main/java/seedu/address/commons/events/ui/GoogleMapsEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.net.HttpURLConnection;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"jingyinno"},"content":"//@@author jingyinno"},{"lineNumber":10,"author":{"gitID":"jingyinno"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"jingyinno"},"content":" * Represents a Google Maps event in GoogleMapsDisplay"},{"lineNumber":12,"author":{"gitID":"jingyinno"},"content":" */"},{"lineNumber":13,"author":{"gitID":"jingyinno"},"content":"public class GoogleMapsEvent extends BaseEvent {"},{"lineNumber":14,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":15,"author":{"gitID":"jingyinno"},"content":"    private static final String MAPS_URL \u003d \"https://www.google.com.sg/maps\";"},{"lineNumber":16,"author":{"gitID":"jingyinno"},"content":"    private String locations;"},{"lineNumber":17,"author":{"gitID":"jingyinno"},"content":"    private boolean isOneLocationEvent;"},{"lineNumber":18,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":19,"author":{"gitID":"jingyinno"},"content":"    public GoogleMapsEvent(String locations, boolean isOneLocationEvent) throws IOException {"},{"lineNumber":20,"author":{"gitID":"jingyinno"},"content":"        this.locations \u003d locations;"},{"lineNumber":21,"author":{"gitID":"jingyinno"},"content":"        this.isOneLocationEvent \u003d isOneLocationEvent;"},{"lineNumber":22,"author":{"gitID":"jingyinno"},"content":"        checkInternetConnection();"},{"lineNumber":23,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":25,"author":{"gitID":"jingyinno"},"content":"    public String getLocations() {"},{"lineNumber":26,"author":{"gitID":"jingyinno"},"content":"        return locations;"},{"lineNumber":27,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":29,"author":{"gitID":"jingyinno"},"content":"    public boolean getIsOneLocationEvent() {"},{"lineNumber":30,"author":{"gitID":"jingyinno"},"content":"        return isOneLocationEvent;"},{"lineNumber":31,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":33,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"jingyinno"},"content":"     * Checks if there is internet connection."},{"lineNumber":35,"author":{"gitID":"jingyinno"},"content":"     *"},{"lineNumber":36,"author":{"gitID":"jingyinno"},"content":"     * @throws IOException if there is no internet connection"},{"lineNumber":37,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"jingyinno"},"content":"    private boolean checkInternetConnection() throws IOException {"},{"lineNumber":39,"author":{"gitID":"jingyinno"},"content":"        URL url \u003d new URL(MAPS_URL);"},{"lineNumber":40,"author":{"gitID":"jingyinno"},"content":"        HttpURLConnection urlConn \u003d (HttpURLConnection) url.openConnection();"},{"lineNumber":41,"author":{"gitID":"jingyinno"},"content":"        urlConn.connect();"},{"lineNumber":42,"author":{"gitID":"jingyinno"},"content":"        return HttpURLConnection.HTTP_OK \u003d\u003d urlConn.getResponseCode();"},{"lineNumber":43,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":45,"author":{"gitID":"jingyinno"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"jingyinno"},"content":"    public String toString() {"},{"lineNumber":47,"author":{"gitID":"jingyinno"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":48,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":50,"author":{"gitID":"jingyinno"},"content":"}"}],"authorContributionMap":{"jingyinno":42,"-":8}},{"path":"src/main/java/seedu/address/commons/events/ui/VenueTableEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"jingyinno"},"content":"//@@author jingyinno"},{"lineNumber":9,"author":{"gitID":"jingyinno"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"jingyinno"},"content":" * Represents a schedule list in VenueTable"},{"lineNumber":11,"author":{"gitID":"jingyinno"},"content":" */"},{"lineNumber":12,"author":{"gitID":"jingyinno"},"content":"public class VenueTableEvent extends BaseEvent {"},{"lineNumber":13,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":14,"author":{"gitID":"jingyinno"},"content":"    private final ObservableList\u003cArrayList\u003cString\u003e\u003e schedule;"},{"lineNumber":15,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":16,"author":{"gitID":"jingyinno"},"content":"    public VenueTableEvent(ObservableList\u003cArrayList\u003cString\u003e\u003e schedule) {"},{"lineNumber":17,"author":{"gitID":"jingyinno"},"content":"        this.schedule \u003d schedule;"},{"lineNumber":18,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":20,"author":{"gitID":"jingyinno"},"content":"    public ObservableList\u003cArrayList\u003cString\u003e\u003e getSchedule() {"},{"lineNumber":21,"author":{"gitID":"jingyinno"},"content":"        return schedule;"},{"lineNumber":22,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":24,"author":{"gitID":"jingyinno"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"jingyinno"},"content":"    public String toString() {"},{"lineNumber":26,"author":{"gitID":"jingyinno"},"content":"        return \"VenueTableEvent\";"},{"lineNumber":27,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"jingyinno"},"content":"}"}],"authorContributionMap":{"jingyinno":21,"-":7}},{"path":"src/main/java/seedu/address/commons/util/SecurityUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileInputStream;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.FileOutputStream;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.io.UnsupportedEncodingException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.security.InvalidKeyException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.security.Key;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.security.MessageDigest;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.security.NoSuchAlgorithmException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javax.crypto.BadPaddingException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javax.crypto.Cipher;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import javax.crypto.IllegalBlockSizeException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import javax.crypto.NoSuchPaddingException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import javax.crypto.spec.SecretKeySpec;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.WrongPasswordException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.Password;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"yeggasd"},"content":"//@@author yeggasd"},{"lineNumber":29,"author":{"gitID":"yeggasd"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"yeggasd"},"content":" * Contains utility methods used for encrypting and decrypting files for Storage"},{"lineNumber":31,"author":{"gitID":"yeggasd"},"content":" */"},{"lineNumber":32,"author":{"gitID":"yeggasd"},"content":"public class SecurityUtil {"},{"lineNumber":33,"author":{"gitID":"yeggasd"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":34,"author":{"gitID":"yeggasd"},"content":"    private static final String XML \u003d \"xml\";"},{"lineNumber":35,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":36,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"yeggasd"},"content":"     * Encrypts the given file using AES key created by the hash of the password."},{"lineNumber":38,"author":{"gitID":"yeggasd"},"content":"     *"},{"lineNumber":39,"author":{"gitID":"yeggasd"},"content":"     * @param file Points to a valid file containing data"},{"lineNumber":40,"author":{"gitID":"yeggasd"},"content":"     * @param password Used to decrypt file"},{"lineNumber":41,"author":{"gitID":"yeggasd"},"content":"     * @throws IOException if file cannot be opened"},{"lineNumber":42,"author":{"gitID":"yeggasd"},"content":"     * @throws WrongPasswordException if password used is wrong"},{"lineNumber":43,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"yeggasd"},"content":"    public static void encrypt(String file, String password)throws IOException, WrongPasswordException {"},{"lineNumber":45,"author":{"gitID":"yeggasd"},"content":"        requireNonNull(file);"},{"lineNumber":46,"author":{"gitID":"yeggasd"},"content":"        requireNonNull(password);"},{"lineNumber":47,"author":{"gitID":"yeggasd"},"content":"        byte[] hashedPassword \u003d hashPassword(password);"},{"lineNumber":48,"author":{"gitID":"yeggasd"},"content":"        encrypt(new File(file), hashedPassword);"},{"lineNumber":49,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":51,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"yeggasd"},"content":"     * Encrypts the given file using AES key created by hashed password."},{"lineNumber":53,"author":{"gitID":"yeggasd"},"content":"     *"},{"lineNumber":54,"author":{"gitID":"yeggasd"},"content":"     * @param file Points to a valid file containing data"},{"lineNumber":55,"author":{"gitID":"yeggasd"},"content":"     * @param password Used to decrypt file"},{"lineNumber":56,"author":{"gitID":"yeggasd"},"content":"     * @throws IOException if file cannot be opened"},{"lineNumber":57,"author":{"gitID":"yeggasd"},"content":"     * @throws WrongPasswordException if password used is wrong"},{"lineNumber":58,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"yeggasd"},"content":"    public static void encrypt(File file, byte[] password)throws IOException, WrongPasswordException {"},{"lineNumber":60,"author":{"gitID":"yeggasd"},"content":"        requireNonNull(file);"},{"lineNumber":61,"author":{"gitID":"yeggasd"},"content":"        requireNonNull(password);"},{"lineNumber":62,"author":{"gitID":"yeggasd"},"content":"        try {"},{"lineNumber":63,"author":{"gitID":"yeggasd"},"content":"            logger.info(\"Encrypting...\");"},{"lineNumber":64,"author":{"gitID":"yeggasd"},"content":"            Key secretAesKey \u003d createKey(password);"},{"lineNumber":65,"author":{"gitID":"yeggasd"},"content":"            Cipher cipher \u003d Cipher.getInstance(\"AES/ECB/PKCS5Padding\");"},{"lineNumber":66,"author":{"gitID":"yeggasd"},"content":"            cipher.init(Cipher.ENCRYPT_MODE, secretAesKey);"},{"lineNumber":67,"author":{"gitID":"yeggasd"},"content":"            processFile(cipher, file);"},{"lineNumber":68,"author":{"gitID":"yeggasd"},"content":"            logger.info(\"Encrypted\");"},{"lineNumber":69,"author":{"gitID":"yeggasd"},"content":"        } catch (InvalidKeyException ike) {"},{"lineNumber":70,"author":{"gitID":"yeggasd"},"content":"            logger.warning(\"ERROR: Wrong key length \" + StringUtil.getDetails(ike));"},{"lineNumber":71,"author":{"gitID":"yeggasd"},"content":"            throw new AssertionError(\"Wrong key length\");"},{"lineNumber":72,"author":{"gitID":"yeggasd"},"content":"        } catch (NoSuchAlgorithmException | NoSuchPaddingException e) {"},{"lineNumber":73,"author":{"gitID":"yeggasd"},"content":"            logger.severe(\"ERROR: Cannot find AES or padding in library.\");"},{"lineNumber":74,"author":{"gitID":"yeggasd"},"content":"            throw new AssertionError(\"Cannot find AES or padding\");"},{"lineNumber":75,"author":{"gitID":"yeggasd"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":78,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"yeggasd"},"content":"     * Test to see if the given file is plaintext using the by checking if it is a xml file."},{"lineNumber":80,"author":{"gitID":"yeggasd"},"content":"     *"},{"lineNumber":81,"author":{"gitID":"yeggasd"},"content":"     * @param file Points to a valid file containing data"},{"lineNumber":82,"author":{"gitID":"yeggasd"},"content":"     * @throws IOException thrown if cannot open file"},{"lineNumber":83,"author":{"gitID":"yeggasd"},"content":"     * @throws WrongPasswordException if password used is wrong"},{"lineNumber":84,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"yeggasd"},"content":"    public static void decrypt(File file)throws IOException, WrongPasswordException {"},{"lineNumber":86,"author":{"gitID":"yeggasd"},"content":"        requireNonNull(file);"},{"lineNumber":87,"author":{"gitID":"yeggasd"},"content":"        if (!checkXmlPlainText(file)) {"},{"lineNumber":88,"author":{"gitID":"yeggasd"},"content":"            throw new WrongPasswordException(\"File Encrypted!\");"},{"lineNumber":89,"author":{"gitID":"yeggasd"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":92,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"yeggasd"},"content":"     * Decrypts the given file using AES key created by hashed password."},{"lineNumber":94,"author":{"gitID":"yeggasd"},"content":"     *"},{"lineNumber":95,"author":{"gitID":"yeggasd"},"content":"     * @param file Points to a file to be decrypted"},{"lineNumber":96,"author":{"gitID":"yeggasd"},"content":"     * @param password Used to decrypt file"},{"lineNumber":97,"author":{"gitID":"yeggasd"},"content":"     * @throws IOException if file cannot be opened"},{"lineNumber":98,"author":{"gitID":"yeggasd"},"content":"     * @throws WrongPasswordException if password used is wrong"},{"lineNumber":99,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"yeggasd"},"content":"    public static void decrypt(File file, byte[] password) throws IOException, WrongPasswordException {"},{"lineNumber":101,"author":{"gitID":"yeggasd"},"content":"        requireNonNull(file);"},{"lineNumber":102,"author":{"gitID":"yeggasd"},"content":"        requireNonNull(password);"},{"lineNumber":103,"author":{"gitID":"yeggasd"},"content":"        try {"},{"lineNumber":104,"author":{"gitID":"yeggasd"},"content":"            logger.info(\"Decrypting...\");"},{"lineNumber":105,"author":{"gitID":"yeggasd"},"content":"            Key secretAesKey \u003d createKey(password);"},{"lineNumber":106,"author":{"gitID":"yeggasd"},"content":"            Cipher cipher \u003d Cipher.getInstance(\"AES/ECB/PKCS5Padding\");"},{"lineNumber":107,"author":{"gitID":"yeggasd"},"content":"            cipher.init(Cipher.DECRYPT_MODE, secretAesKey);"},{"lineNumber":108,"author":{"gitID":"yeggasd"},"content":"            processFile(cipher, file);"},{"lineNumber":109,"author":{"gitID":"yeggasd"},"content":"            logger.info(\"Decrypted\");"},{"lineNumber":110,"author":{"gitID":"yeggasd"},"content":"        } catch (InvalidKeyException ike) {"},{"lineNumber":111,"author":{"gitID":"yeggasd"},"content":"            logger.warning(\"ERROR: Wrong key length \" + StringUtil.getDetails(ike));"},{"lineNumber":112,"author":{"gitID":"yeggasd"},"content":"            throw new AssertionError(\"Wrong key length\");"},{"lineNumber":113,"author":{"gitID":"yeggasd"},"content":"        } catch (NoSuchAlgorithmException | NoSuchPaddingException e) {"},{"lineNumber":114,"author":{"gitID":"yeggasd"},"content":"            logger.severe(\"ERROR: Cannot find AES or padding in library.\");"},{"lineNumber":115,"author":{"gitID":"yeggasd"},"content":"            throw new AssertionError(\"Cannot find AES or padding\");"},{"lineNumber":116,"author":{"gitID":"yeggasd"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":119,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"yeggasd"},"content":"     * Decrypts or encrypts at the file using cipher passed."},{"lineNumber":121,"author":{"gitID":"yeggasd"},"content":"     *"},{"lineNumber":122,"author":{"gitID":"yeggasd"},"content":"     * @param cipher Encrypts or Decrypts file given mode"},{"lineNumber":123,"author":{"gitID":"yeggasd"},"content":"     * @param file Points to a valid file containing data"},{"lineNumber":124,"author":{"gitID":"yeggasd"},"content":"     * @throws IOException if cannot open file"},{"lineNumber":125,"author":{"gitID":"yeggasd"},"content":"     * @throws WrongPasswordException if password used is wrong"},{"lineNumber":126,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"yeggasd"},"content":"    private static void processFile(Cipher cipher, File file) throws IOException, WrongPasswordException {"},{"lineNumber":128,"author":{"gitID":"yeggasd"},"content":"        requireNonNull(file);"},{"lineNumber":129,"author":{"gitID":"yeggasd"},"content":"        requireNonNull(cipher);"},{"lineNumber":130,"author":{"gitID":"yeggasd"},"content":"        byte[] inputBytes \u003d null;"},{"lineNumber":131,"author":{"gitID":"yeggasd"},"content":"        try {"},{"lineNumber":132,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":133,"author":{"gitID":"yeggasd"},"content":"            FileInputStream inputStream \u003d new FileInputStream(file);"},{"lineNumber":134,"author":{"gitID":"yeggasd"},"content":"            inputBytes \u003d new byte[(int) file.length()];"},{"lineNumber":135,"author":{"gitID":"yeggasd"},"content":"            inputStream.read(inputBytes);"},{"lineNumber":136,"author":{"gitID":"yeggasd"},"content":"            byte[] outputBytes \u003d cipher.doFinal(inputBytes);"},{"lineNumber":137,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":138,"author":{"gitID":"yeggasd"},"content":"            FileOutputStream outputStream \u003d new FileOutputStream(file);"},{"lineNumber":139,"author":{"gitID":"yeggasd"},"content":"            outputStream.write(outputBytes);"},{"lineNumber":140,"author":{"gitID":"yeggasd"},"content":"            checkXmlPlainText(outputBytes);"},{"lineNumber":141,"author":{"gitID":"yeggasd"},"content":"            inputStream.close();"},{"lineNumber":142,"author":{"gitID":"yeggasd"},"content":"            outputStream.close();"},{"lineNumber":143,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":144,"author":{"gitID":"yeggasd"},"content":"        } catch (BadPaddingException e) {"},{"lineNumber":145,"author":{"gitID":"yeggasd"},"content":"            handleBadPaddingException(inputBytes, e);"},{"lineNumber":146,"author":{"gitID":"yeggasd"},"content":"        } catch (IllegalBlockSizeException e) {"},{"lineNumber":147,"author":{"gitID":"yeggasd"},"content":"            logger.info(\"Warning: Text already in plain text.\");"},{"lineNumber":148,"author":{"gitID":"yeggasd"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":151,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"yeggasd"},"content":"     * Hashes the password provided to meet the required length for AES."},{"lineNumber":153,"author":{"gitID":"yeggasd"},"content":"     * @param password to be hashed."},{"lineNumber":154,"author":{"gitID":"yeggasd"},"content":"     * @return byte[] of the hashed password."},{"lineNumber":155,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"yeggasd"},"content":"    public static byte[] hashPassword(String password) {"},{"lineNumber":157,"author":{"gitID":"yeggasd"},"content":"        requireNonNull(password);"},{"lineNumber":158,"author":{"gitID":"yeggasd"},"content":"        try {"},{"lineNumber":159,"author":{"gitID":"yeggasd"},"content":"            MessageDigest md \u003d MessageDigest.getInstance(\"SHA-1\");"},{"lineNumber":160,"author":{"gitID":"yeggasd"},"content":"            try {"},{"lineNumber":161,"author":{"gitID":"yeggasd"},"content":"                md.update(password.getBytes(\"UTF-8\"));"},{"lineNumber":162,"author":{"gitID":"yeggasd"},"content":"            } catch (UnsupportedEncodingException e) {"},{"lineNumber":163,"author":{"gitID":"yeggasd"},"content":"                logger.severe(\"UTF-8 not supported, using default but may not be able to decrypt in other computer.\");"},{"lineNumber":164,"author":{"gitID":"yeggasd"},"content":"                md.update(password.getBytes());"},{"lineNumber":165,"author":{"gitID":"yeggasd"},"content":"            }"},{"lineNumber":166,"author":{"gitID":"yeggasd"},"content":"            byte[] hashedPassword \u003d md.digest();"},{"lineNumber":167,"author":{"gitID":"yeggasd"},"content":"            return Arrays.copyOf(hashedPassword, 16);"},{"lineNumber":168,"author":{"gitID":"yeggasd"},"content":"        } catch (NoSuchAlgorithmException nsae) {"},{"lineNumber":169,"author":{"gitID":"yeggasd"},"content":"            throw new AssertionError(\"SHA-1 should exist\");"},{"lineNumber":170,"author":{"gitID":"yeggasd"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":173,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"yeggasd"},"content":"     * Decrypt the given file with the current and if it fails the previous password."},{"lineNumber":175,"author":{"gitID":"yeggasd"},"content":"     * if password is null, will not try to decrypt."},{"lineNumber":176,"author":{"gitID":"yeggasd"},"content":"     * @param file Points to the file to be decrypted."},{"lineNumber":177,"author":{"gitID":"yeggasd"},"content":"     * @param password Used to decrypt file."},{"lineNumber":178,"author":{"gitID":"yeggasd"},"content":"     * @throws IOException if file cannot be opened."},{"lineNumber":179,"author":{"gitID":"yeggasd"},"content":"     * @throws WrongPasswordException if password used is wrong."},{"lineNumber":180,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":181,"author":{"gitID":"yeggasd"},"content":"    public static void decryptFile (File file, Password password) throws IOException, WrongPasswordException {"},{"lineNumber":182,"author":{"gitID":"yeggasd"},"content":"        requireNonNull(file);"},{"lineNumber":183,"author":{"gitID":"yeggasd"},"content":"        requireNonNull(password);"},{"lineNumber":184,"author":{"gitID":"yeggasd"},"content":"        if (password.getPassword() !\u003d null) {"},{"lineNumber":185,"author":{"gitID":"yeggasd"},"content":"            try {"},{"lineNumber":186,"author":{"gitID":"yeggasd"},"content":"                decrypt(file, password.getPassword());"},{"lineNumber":187,"author":{"gitID":"yeggasd"},"content":"            } catch (WrongPasswordException e) {"},{"lineNumber":188,"author":{"gitID":"yeggasd"},"content":"                logger.info(\"Current Password don\u0027t work, trying previous password.\");"},{"lineNumber":189,"author":{"gitID":"yeggasd"},"content":"                decrypt(file, password.getPrevPassword());"},{"lineNumber":190,"author":{"gitID":"yeggasd"},"content":"            }"},{"lineNumber":191,"author":{"gitID":"yeggasd"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":194,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":195,"author":{"gitID":"yeggasd"},"content":"     * Encrypt the given file with the current."},{"lineNumber":196,"author":{"gitID":"yeggasd"},"content":"     * if password is null, will not try to encrypt."},{"lineNumber":197,"author":{"gitID":"yeggasd"},"content":"     * @param file Points to the file to be decrypted."},{"lineNumber":198,"author":{"gitID":"yeggasd"},"content":"     * @param password Used to decrypt file."},{"lineNumber":199,"author":{"gitID":"yeggasd"},"content":"     * @throws IOException if file cannot be opened."},{"lineNumber":200,"author":{"gitID":"yeggasd"},"content":"     * @throws WrongPasswordException if password used is wrong."},{"lineNumber":201,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":202,"author":{"gitID":"yeggasd"},"content":"    public static void encryptFile (File file, Password password) throws IOException, WrongPasswordException {"},{"lineNumber":203,"author":{"gitID":"yeggasd"},"content":"        requireNonNull(file);"},{"lineNumber":204,"author":{"gitID":"yeggasd"},"content":"        if (password !\u003d null \u0026\u0026 password.getPassword() !\u003d null) {"},{"lineNumber":205,"author":{"gitID":"yeggasd"},"content":"            encrypt(file, password.getPassword());"},{"lineNumber":206,"author":{"gitID":"yeggasd"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":209,"author":{"gitID":"yeggasd"},"content":"     * Generates a key."},{"lineNumber":210,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":211,"author":{"gitID":"yeggasd"},"content":"    private static Key createKey(byte[] password) {"},{"lineNumber":212,"author":{"gitID":"yeggasd"},"content":"        return new SecretKeySpec(password, \"AES\");"},{"lineNumber":213,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":215,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":216,"author":{"gitID":"yeggasd"},"content":"     * Handles {@code BadPaddingException} by determining whether it is plain text or other case."},{"lineNumber":217,"author":{"gitID":"yeggasd"},"content":"     * @param inputBytes Input data that caused this."},{"lineNumber":218,"author":{"gitID":"yeggasd"},"content":"     * @param e Contains the exception details to throw with WrongPasswordException."},{"lineNumber":219,"author":{"gitID":"yeggasd"},"content":"     * @throws WrongPasswordException if it is wrong password."},{"lineNumber":220,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":221,"author":{"gitID":"yeggasd"},"content":"    private static void handleBadPaddingException(byte[] inputBytes, BadPaddingException e)"},{"lineNumber":222,"author":{"gitID":"yeggasd"},"content":"                                                                            throws WrongPasswordException {"},{"lineNumber":223,"author":{"gitID":"yeggasd"},"content":"        if (!checkXmlPlainText(inputBytes)) {"},{"lineNumber":224,"author":{"gitID":"yeggasd"},"content":"            logger.severe(\"ERROR: Wrong PASSWORD length used \");"},{"lineNumber":225,"author":{"gitID":"yeggasd"},"content":"            throw new WrongPasswordException(\"Wrong PASSWORD.\");"},{"lineNumber":226,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":227,"author":{"gitID":"yeggasd"},"content":"        } else {"},{"lineNumber":228,"author":{"gitID":"yeggasd"},"content":"            logger.info(\"Warning: Text already in plain text.\");"},{"lineNumber":229,"author":{"gitID":"yeggasd"},"content":"        }"},{"lineNumber":230,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":232,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":233,"author":{"gitID":"yeggasd"},"content":"     * Checks whether it is plain text by checking whether it is in the range of characters commonly used for the"},{"lineNumber":234,"author":{"gitID":"yeggasd"},"content":"     *  the whole data."},{"lineNumber":235,"author":{"gitID":"yeggasd"},"content":"     * @param data Contains the file data."},{"lineNumber":236,"author":{"gitID":"yeggasd"},"content":"     * @return true if it is highly likely to be plain text."},{"lineNumber":237,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":238,"author":{"gitID":"yeggasd"},"content":"    private static boolean checkXmlPlainText(byte[] data) {"},{"lineNumber":239,"author":{"gitID":"yeggasd"},"content":"        requireNonNull(data);"},{"lineNumber":240,"author":{"gitID":"yeggasd"},"content":"        String string \u003d new String(data);"},{"lineNumber":241,"author":{"gitID":"yeggasd"},"content":"        return string.contains(XML);"},{"lineNumber":242,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":243,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":244,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":245,"author":{"gitID":"yeggasd"},"content":"     * Checks whether it is plain text by checking whether it is in the range of characters commonly used for the"},{"lineNumber":246,"author":{"gitID":"yeggasd"},"content":"     *  the whole data."},{"lineNumber":247,"author":{"gitID":"yeggasd"},"content":"     * @param file Points to file path."},{"lineNumber":248,"author":{"gitID":"yeggasd"},"content":"     * @return true if it is highly likely to be plain text."},{"lineNumber":249,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":250,"author":{"gitID":"yeggasd"},"content":"    private static boolean checkXmlPlainText(File file) throws IOException {"},{"lineNumber":251,"author":{"gitID":"yeggasd"},"content":"        requireNonNull(file);"},{"lineNumber":252,"author":{"gitID":"yeggasd"},"content":"        FileInputStream inputStream \u003d new FileInputStream(file);"},{"lineNumber":253,"author":{"gitID":"yeggasd"},"content":"        byte[] inputBytes \u003d new byte[(int) file.length()];"},{"lineNumber":254,"author":{"gitID":"yeggasd"},"content":"        inputStream.read(inputBytes);"},{"lineNumber":255,"author":{"gitID":"yeggasd"},"content":"        inputStream.close();"},{"lineNumber":256,"author":{"gitID":"yeggasd"},"content":"        return checkXmlPlainText(inputBytes);"},{"lineNumber":257,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"yeggasd"},"content":"}"}],"authorContributionMap":{"yeggasd":231,"-":27}},{"path":"src/main/java/seedu/address/commons/events/ui/TimeTableEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"yeggasd"},"content":"//@@author yeggasd"},{"lineNumber":9,"author":{"gitID":"yeggasd"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"yeggasd"},"content":" * Represents a call for the TimeTable to be displayed"},{"lineNumber":11,"author":{"gitID":"yeggasd"},"content":" */"},{"lineNumber":12,"author":{"gitID":"yeggasd"},"content":"public class TimeTableEvent extends BaseEvent {"},{"lineNumber":13,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":14,"author":{"gitID":"yeggasd"},"content":"    private final ObservableList\u003cArrayList\u003cString\u003e\u003e timetable;"},{"lineNumber":15,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":16,"author":{"gitID":"yeggasd"},"content":"    public TimeTableEvent(ObservableList\u003cArrayList\u003cString\u003e\u003e timetable) {"},{"lineNumber":17,"author":{"gitID":"yeggasd"},"content":"        this.timetable \u003d timetable;"},{"lineNumber":18,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":20,"author":{"gitID":"yeggasd"},"content":"    public ObservableList\u003cArrayList\u003cString\u003e\u003e getTimeTable() {"},{"lineNumber":21,"author":{"gitID":"yeggasd"},"content":"        return timetable;"},{"lineNumber":22,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":24,"author":{"gitID":"yeggasd"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"yeggasd"},"content":"    public String toString() {"},{"lineNumber":26,"author":{"gitID":"yeggasd"},"content":"        return \"TimeTableEvent\";"},{"lineNumber":27,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"yeggasd"},"content":"}"}],"authorContributionMap":{"yeggasd":21,"-":7}},{"path":"src/main/java/seedu/address/commons/events/ui/BirthdayListEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"AzuraAiR"},"content":"//@@author AzuraAiR"},{"lineNumber":6,"author":{"gitID":"AzuraAiR"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"AzuraAiR"},"content":" * Represents a call for the Birthday List to be displayed"},{"lineNumber":8,"author":{"gitID":"AzuraAiR"},"content":" */"},{"lineNumber":9,"author":{"gitID":"AzuraAiR"},"content":"public class BirthdayListEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":11,"author":{"gitID":"AzuraAiR"},"content":"    private final String birthdayList;"},{"lineNumber":12,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":13,"author":{"gitID":"AzuraAiR"},"content":"    public BirthdayListEvent(String newList) {"},{"lineNumber":14,"author":{"gitID":"AzuraAiR"},"content":"        this.birthdayList \u003d newList;"},{"lineNumber":15,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":17,"author":{"gitID":"AzuraAiR"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"AzuraAiR"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"AzuraAiR"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":20,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":22,"author":{"gitID":"AzuraAiR"},"content":"    public String getBirthdayList() {"},{"lineNumber":23,"author":{"gitID":"AzuraAiR"},"content":"        return birthdayList;"},{"lineNumber":24,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"AzuraAiR"},"content":"}"}],"authorContributionMap":{"AzuraAiR":21,"-":4}},{"path":"src/main/java/seedu/address/commons/events/ui/PasswordWrongEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"yeggasd"},"content":"//@@author yeggasd"},{"lineNumber":6,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":7,"author":{"gitID":"yeggasd"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"yeggasd"},"content":" * Indicates a request to show Wrong Passowrd Dialog"},{"lineNumber":9,"author":{"gitID":"yeggasd"},"content":" */"},{"lineNumber":10,"author":{"gitID":"yeggasd"},"content":"public class PasswordWrongEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":12,"author":{"gitID":"yeggasd"},"content":"    @Override"},{"lineNumber":13,"author":{"gitID":"yeggasd"},"content":"    public String toString() {"},{"lineNumber":14,"author":{"gitID":"yeggasd"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":15,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"yeggasd"},"content":"}"}],"authorContributionMap":{"yeggasd":12,"-":4}},{"path":"src/main/java/seedu/address/commons/events/ui/InfoPanelEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"jingyinno"},"content":"//@@author jingyinno"},{"lineNumber":6,"author":{"gitID":"jingyinno"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"jingyinno"},"content":" * Represents a hidden info panel"},{"lineNumber":8,"author":{"gitID":"jingyinno"},"content":" */"},{"lineNumber":9,"author":{"gitID":"jingyinno"},"content":"public class InfoPanelEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":11,"author":{"gitID":"jingyinno"},"content":"    @Override"},{"lineNumber":12,"author":{"gitID":"jingyinno"},"content":"    public String toString() {"},{"lineNumber":13,"author":{"gitID":"jingyinno"},"content":"        return \"InfoPanelEvent\";"},{"lineNumber":14,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"jingyinno"},"content":"}"}],"authorContributionMap":{"jingyinno":11,"-":4}},{"path":"src/main/java/seedu/address/logic/parser/VacantCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.VacantCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.building.Building;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"jingyinno"},"content":"//@@author jingyinno"},{"lineNumber":11,"author":{"gitID":"jingyinno"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"jingyinno"},"content":" * Parses input arguments and creates a new VacantCommand object"},{"lineNumber":13,"author":{"gitID":"jingyinno"},"content":" */"},{"lineNumber":14,"author":{"gitID":"jingyinno"},"content":"public class VacantCommandParser implements Parser\u003cVacantCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"jingyinno"},"content":"    private static final String SPLIT_TOKEN \u003d \"\\\\s+\";"},{"lineNumber":16,"author":{"gitID":"jingyinno"},"content":"    private static final String EMPTY_STRING \u003d \"\";"},{"lineNumber":17,"author":{"gitID":"jingyinno"},"content":"    private static final int NO_ARGS_LENGTH \u003d 0;"},{"lineNumber":18,"author":{"gitID":"jingyinno"},"content":"    private static final int CORRECT_ARGS_LENGTH \u003d 1;"},{"lineNumber":19,"author":{"gitID":"jingyinno"},"content":"    private static final int BUILDING_NAME_INDEX \u003d 0;"},{"lineNumber":20,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":21,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"jingyinno"},"content":"     * Parses the given {@code String} of arguments in the context of the VacantCommand"},{"lineNumber":23,"author":{"gitID":"jingyinno"},"content":"     * and returns a VacantCommand object for execution."},{"lineNumber":24,"author":{"gitID":"jingyinno"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":25,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"jingyinno"},"content":"    public VacantCommand parse(String args) throws ParseException {"},{"lineNumber":27,"author":{"gitID":"jingyinno"},"content":"        String[] buildingName \u003d validateNumberOfArgs(args);"},{"lineNumber":28,"author":{"gitID":"jingyinno"},"content":"        try {"},{"lineNumber":29,"author":{"gitID":"jingyinno"},"content":"            Building building \u003d ParserUtil.parseBuilding(buildingName[BUILDING_NAME_INDEX]);"},{"lineNumber":30,"author":{"gitID":"jingyinno"},"content":"            return new VacantCommand(building);"},{"lineNumber":31,"author":{"gitID":"jingyinno"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":32,"author":{"gitID":"jingyinno"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":33,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":36,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"jingyinno"},"content":"     * Returns a String Array of valid number of elements after slicing the user input."},{"lineNumber":38,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"jingyinno"},"content":"    private String[] validateNumberOfArgs(String args) throws ParseException {"},{"lineNumber":40,"author":{"gitID":"jingyinno"},"content":"        int length;"},{"lineNumber":41,"author":{"gitID":"jingyinno"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":42,"author":{"gitID":"jingyinno"},"content":"        String[] buildingName \u003d trimmedArgs.split(SPLIT_TOKEN);"},{"lineNumber":43,"author":{"gitID":"jingyinno"},"content":"        if (EMPTY_STRING.equals(trimmedArgs) || SPLIT_TOKEN.equals(trimmedArgs)) {"},{"lineNumber":44,"author":{"gitID":"jingyinno"},"content":"            length \u003d NO_ARGS_LENGTH;"},{"lineNumber":45,"author":{"gitID":"jingyinno"},"content":"        } else {"},{"lineNumber":46,"author":{"gitID":"jingyinno"},"content":"            length \u003d buildingName.length;"},{"lineNumber":47,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"jingyinno"},"content":"        if (length !\u003d CORRECT_ARGS_LENGTH) {"},{"lineNumber":49,"author":{"gitID":"jingyinno"},"content":"            throw new ParseException("},{"lineNumber":50,"author":{"gitID":"jingyinno"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, VacantCommand.MESSAGE_USAGE));"},{"lineNumber":51,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"jingyinno"},"content":"        return buildingName;"},{"lineNumber":53,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"jingyinno"},"content":"}"}],"authorContributionMap":{"jingyinno":45,"-":9}},{"path":"src/main/java/seedu/address/commons/util/timetable/TimetableParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util.timetable;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.model.person.timetable.Timetable.MESSAGE_INVALID_URL;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.model.person.timetable.Timetable.MESSAGE_URL_CONSTRAINTS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.model.person.timetable.Timetable.isValidUrl;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.net.HttpURLConnection;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.net.Proxy;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import com.fasterxml.jackson.databind.ObjectMapper;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.NoInternetConnectionException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.timetable.TimetableData;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"AzuraAiR"},"content":"//@@author AzuraAiR"},{"lineNumber":24,"author":{"gitID":"AzuraAiR"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"AzuraAiR"},"content":" * Utility functions to parse a shortened NUSMods url to create TimetableData"},{"lineNumber":26,"author":{"gitID":"AzuraAiR"},"content":" */"},{"lineNumber":27,"author":{"gitID":"AzuraAiR"},"content":"public class TimetableParserUtil {"},{"lineNumber":28,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":29,"author":{"gitID":"AzuraAiR"},"content":"    public static final String URL_BACKSLASH_REGEX \u003d \"/\";"},{"lineNumber":30,"author":{"gitID":"AzuraAiR"},"content":"    public static final String URL_QUESTION_MARK_REGEX \u003d \"\\\\?\";"},{"lineNumber":31,"author":{"gitID":"AzuraAiR"},"content":"    public static final String URL_AND_SIGN_REGEX \u003d \"\u0026\";"},{"lineNumber":32,"author":{"gitID":"AzuraAiR"},"content":"    public static final String URL_EQUALS_SIGN_REGEX \u003d \"\u003d\";"},{"lineNumber":33,"author":{"gitID":"AzuraAiR"},"content":"    public static final String URL_MINUS_SIGN_REGEX \u003d \"-\";"},{"lineNumber":34,"author":{"gitID":"AzuraAiR"},"content":"    public static final String URL_COMMA_SIGN_REGEX \u003d \",\";"},{"lineNumber":35,"author":{"gitID":"AzuraAiR"},"content":"    public static final String URL_COLON_REGEX \u003d \":\";"},{"lineNumber":36,"author":{"gitID":"AzuraAiR"},"content":"    public static final int SEMESTER_NUMBER_URL_INDEX \u003d 4;"},{"lineNumber":37,"author":{"gitID":"AzuraAiR"},"content":"    public static final int SEMESTER_NUMBER_INTEGER_INDEX \u003d 1;"},{"lineNumber":38,"author":{"gitID":"AzuraAiR"},"content":"    public static final int LAST_STRING_URL_INDEX \u003d 5;"},{"lineNumber":39,"author":{"gitID":"AzuraAiR"},"content":"    public static final int MODULE_STRING_INDEX \u003d 1;"},{"lineNumber":40,"author":{"gitID":"AzuraAiR"},"content":"    public static final int MODULE_CODE_INDEX \u003d 0;"},{"lineNumber":41,"author":{"gitID":"AzuraAiR"},"content":"    public static final int LESSON_STRING_INDEX \u003d 1;"},{"lineNumber":42,"author":{"gitID":"AzuraAiR"},"content":"    public static final int LESSON_TYPE_INDEX \u003d 0;"},{"lineNumber":43,"author":{"gitID":"AzuraAiR"},"content":"    public static final int LESSON_NUMBER_INDEX \u003d 1;"},{"lineNumber":44,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":45,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"AzuraAiR"},"content":"     * Parses a shortened NUSMods url and creates TimetableData"},{"lineNumber":47,"author":{"gitID":"AzuraAiR"},"content":"     * @param url shortened NUSMods url"},{"lineNumber":48,"author":{"gitID":"AzuraAiR"},"content":"     * @return TimetableData of the NUSMods timetable"},{"lineNumber":49,"author":{"gitID":"AzuraAiR"},"content":"     * @throws ParseException when an error in parsing is encountered"},{"lineNumber":50,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"AzuraAiR"},"content":"    public static TimetableData parseUrl(String url) throws ParseException {"},{"lineNumber":52,"author":{"gitID":"AzuraAiR"},"content":"        checkArgument(isValidUrl(url), MESSAGE_URL_CONSTRAINTS);"},{"lineNumber":53,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":54,"author":{"gitID":"AzuraAiR"},"content":"        try {"},{"lineNumber":55,"author":{"gitID":"AzuraAiR"},"content":"            String longUrl \u003d parseShortUrl(url);"},{"lineNumber":56,"author":{"gitID":"AzuraAiR"},"content":"            return parseLongUrl(longUrl);"},{"lineNumber":57,"author":{"gitID":"AzuraAiR"},"content":"        } catch (NoInternetConnectionException ie) {"},{"lineNumber":58,"author":{"gitID":"AzuraAiR"},"content":"            return new TimetableData();"},{"lineNumber":59,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":61,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":63,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"AzuraAiR"},"content":"     * Attempts to access NUSMods to obtain the full NUSMods url"},{"lineNumber":65,"author":{"gitID":"AzuraAiR"},"content":"     * @param url shortened NUSMods url"},{"lineNumber":66,"author":{"gitID":"AzuraAiR"},"content":"     * @return long url"},{"lineNumber":67,"author":{"gitID":"AzuraAiR"},"content":"     * @throws ParseException if the parsing fails and returns the default NUSMods URL"},{"lineNumber":68,"author":{"gitID":"AzuraAiR"},"content":"     * @throws NoInternetConnectionException when the app timeouts in obtaining the long url"},{"lineNumber":69,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"AzuraAiR"},"content":"    public static String parseShortUrl (String url) throws ParseException, NoInternetConnectionException {"},{"lineNumber":71,"author":{"gitID":"AzuraAiR"},"content":"        try {"},{"lineNumber":72,"author":{"gitID":"AzuraAiR"},"content":"            URL shortUrl \u003d new URL(url);"},{"lineNumber":73,"author":{"gitID":"AzuraAiR"},"content":"            HttpURLConnection httpUrlConnection \u003d (HttpURLConnection) shortUrl.openConnection(Proxy.NO_PROXY);"},{"lineNumber":74,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":75,"author":{"gitID":"AzuraAiR"},"content":"            httpUrlConnection.setReadTimeout(500);"},{"lineNumber":76,"author":{"gitID":"AzuraAiR"},"content":"            httpUrlConnection.setInstanceFollowRedirects(false);"},{"lineNumber":77,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":78,"author":{"gitID":"AzuraAiR"},"content":"            String longUrl \u003d httpUrlConnection.getHeaderField(\"Location\");"},{"lineNumber":79,"author":{"gitID":"AzuraAiR"},"content":"            httpUrlConnection.disconnect();"},{"lineNumber":80,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":81,"author":{"gitID":"AzuraAiR"},"content":"            if (longUrl \u003d\u003d null) {"},{"lineNumber":82,"author":{"gitID":"AzuraAiR"},"content":"                throw new NoInternetConnectionException(\"No internet connection, starting with empty timetables\");"},{"lineNumber":83,"author":{"gitID":"AzuraAiR"},"content":"            } else if (longUrl.equals(\"http://modsn.us\")) {"},{"lineNumber":84,"author":{"gitID":"AzuraAiR"},"content":"                throw new ParseException(MESSAGE_INVALID_URL);"},{"lineNumber":85,"author":{"gitID":"AzuraAiR"},"content":"            }"},{"lineNumber":86,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":87,"author":{"gitID":"AzuraAiR"},"content":"            return longUrl;"},{"lineNumber":88,"author":{"gitID":"AzuraAiR"},"content":"        } catch (IOException ioe) {"},{"lineNumber":89,"author":{"gitID":"AzuraAiR"},"content":"            throw new ParseException(MESSAGE_INVALID_URL);"},{"lineNumber":90,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":93,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"AzuraAiR"},"content":"     * Parses the full NUSMods link into TimetableData format"},{"lineNumber":95,"author":{"gitID":"AzuraAiR"},"content":"     * @param url Full NUSMods link"},{"lineNumber":96,"author":{"gitID":"AzuraAiR"},"content":"     * @return TimetableData parsed from link"},{"lineNumber":97,"author":{"gitID":"AzuraAiR"},"content":"     * @throws ParseException"},{"lineNumber":98,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"AzuraAiR"},"content":"    public static TimetableData parseLongUrl(String url) throws ParseException {"},{"lineNumber":100,"author":{"gitID":"AzuraAiR"},"content":"        String[] urlParts \u003d url.split(URL_BACKSLASH_REGEX); // Obtain the last part of url"},{"lineNumber":101,"author":{"gitID":"AzuraAiR"},"content":"        ArrayList\u003cLesson\u003e totalLessonList \u003d new ArrayList\u003cLesson\u003e();"},{"lineNumber":102,"author":{"gitID":"AzuraAiR"},"content":"        ArrayList\u003cLesson\u003e lessonsToAddFromModule;"},{"lineNumber":103,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":104,"author":{"gitID":"AzuraAiR"},"content":"        // Separate semester number normally found at the fifth part"},{"lineNumber":105,"author":{"gitID":"AzuraAiR"},"content":"        String semNum \u003d urlParts[SEMESTER_NUMBER_URL_INDEX];"},{"lineNumber":106,"author":{"gitID":"AzuraAiR"},"content":"        // Separate \"share\" out of last part of url"},{"lineNumber":107,"author":{"gitID":"AzuraAiR"},"content":"        String[] toParse \u003d urlParts[LAST_STRING_URL_INDEX].split(URL_QUESTION_MARK_REGEX);"},{"lineNumber":108,"author":{"gitID":"AzuraAiR"},"content":"        // Separate the modules in last part of url"},{"lineNumber":109,"author":{"gitID":"AzuraAiR"},"content":"        String[] modules \u003d toParse[MODULE_STRING_INDEX].split(URL_AND_SIGN_REGEX);"},{"lineNumber":110,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":111,"author":{"gitID":"AzuraAiR"},"content":"        // Loop to find the modules taken and create the Lessons taken to add into Timetable"},{"lineNumber":112,"author":{"gitID":"AzuraAiR"},"content":"        for (String module: modules) {"},{"lineNumber":113,"author":{"gitID":"AzuraAiR"},"content":"            lessonsToAddFromModule \u003d parseModule(module, semNum);"},{"lineNumber":114,"author":{"gitID":"AzuraAiR"},"content":"            for (Lesson lessonToAdd: lessonsToAddFromModule) {"},{"lineNumber":115,"author":{"gitID":"AzuraAiR"},"content":"                totalLessonList.add(lessonToAdd);"},{"lineNumber":116,"author":{"gitID":"AzuraAiR"},"content":"            }"},{"lineNumber":117,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"AzuraAiR"},"content":"        return new TimetableData(totalLessonList);"},{"lineNumber":119,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":121,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"AzuraAiR"},"content":"     * Parses the module string and returns the lessons taken"},{"lineNumber":123,"author":{"gitID":"AzuraAiR"},"content":"     * @param module String that contains module code and lessons selected"},{"lineNumber":124,"author":{"gitID":"AzuraAiR"},"content":"     * @param semNum Semester number"},{"lineNumber":125,"author":{"gitID":"AzuraAiR"},"content":"     * @return ArrayList of lessons taken"},{"lineNumber":126,"author":{"gitID":"AzuraAiR"},"content":"     * @throws ParseException when invalid lessons are received"},{"lineNumber":127,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"AzuraAiR"},"content":"    public static ArrayList\u003cLesson\u003e parseModule(String module, String semNum) throws ParseException {"},{"lineNumber":129,"author":{"gitID":"AzuraAiR"},"content":"        ArrayList\u003cLesson\u003e lessonListFromApi;"},{"lineNumber":130,"author":{"gitID":"AzuraAiR"},"content":"        ArrayList\u003cLesson\u003e lessonsTakenList;"},{"lineNumber":131,"author":{"gitID":"AzuraAiR"},"content":"        lessonsTakenList \u003d new ArrayList\u003cLesson\u003e();"},{"lineNumber":132,"author":{"gitID":"AzuraAiR"},"content":"        // Separate the module code"},{"lineNumber":133,"author":{"gitID":"AzuraAiR"},"content":"        String[] moduleInfo \u003d module.split(URL_EQUALS_SIGN_REGEX);"},{"lineNumber":134,"author":{"gitID":"AzuraAiR"},"content":"        // Separate the number from SEM-NUM"},{"lineNumber":135,"author":{"gitID":"AzuraAiR"},"content":"        String[] semNumToParse \u003d semNum.split(URL_MINUS_SIGN_REGEX);"},{"lineNumber":136,"author":{"gitID":"AzuraAiR"},"content":"        int semNumInt \u003d Integer.parseInt(semNumToParse[SEMESTER_NUMBER_INTEGER_INDEX]);"},{"lineNumber":137,"author":{"gitID":"AzuraAiR"},"content":"        String moduleCode \u003d moduleInfo[MODULE_CODE_INDEX];"},{"lineNumber":138,"author":{"gitID":"AzuraAiR"},"content":"        //Separate the individual lessons"},{"lineNumber":139,"author":{"gitID":"AzuraAiR"},"content":"        String[] lessonsTaken \u003d moduleInfo[LESSON_STRING_INDEX].split(URL_COMMA_SIGN_REGEX);"},{"lineNumber":140,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":141,"author":{"gitID":"AzuraAiR"},"content":"        lessonListFromApi \u003d obtainModuleInfoFromApi(moduleCode, semNumInt);"},{"lineNumber":142,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":143,"author":{"gitID":"AzuraAiR"},"content":"        // Main loop to add lessons to list"},{"lineNumber":144,"author":{"gitID":"AzuraAiR"},"content":"        for (String lessonTaken : lessonsTaken) {"},{"lineNumber":145,"author":{"gitID":"AzuraAiR"},"content":"            String[] lessonToParse \u003d lessonTaken.split(URL_COLON_REGEX);"},{"lineNumber":146,"author":{"gitID":"AzuraAiR"},"content":"            String lessonType \u003d convertShortFormToLong(lessonToParse[LESSON_TYPE_INDEX]);"},{"lineNumber":147,"author":{"gitID":"AzuraAiR"},"content":"            String lessonNum \u003d lessonToParse[LESSON_NUMBER_INDEX];"},{"lineNumber":148,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":149,"author":{"gitID":"AzuraAiR"},"content":"            for (Lesson lessonFromApi: lessonListFromApi) {"},{"lineNumber":150,"author":{"gitID":"AzuraAiR"},"content":"                if (lessonType.equalsIgnoreCase(lessonFromApi.getLessonType())"},{"lineNumber":151,"author":{"gitID":"AzuraAiR"},"content":"                        \u0026\u0026 lessonNum.equalsIgnoreCase(lessonFromApi.getClassNo())) {"},{"lineNumber":152,"author":{"gitID":"AzuraAiR"},"content":"                    lessonsTakenList.add(lessonFromApi);"},{"lineNumber":153,"author":{"gitID":"AzuraAiR"},"content":"                }"},{"lineNumber":154,"author":{"gitID":"AzuraAiR"},"content":"            }"},{"lineNumber":155,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":157,"author":{"gitID":"AzuraAiR"},"content":"        return lessonsTakenList;"},{"lineNumber":158,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":160,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"AzuraAiR"},"content":"     * Accesses NUSMods API and obtains and parses the json file"},{"lineNumber":162,"author":{"gitID":"AzuraAiR"},"content":"     * @param moduleCode the module"},{"lineNumber":163,"author":{"gitID":"AzuraAiR"},"content":"     * @param semNum current semester number"},{"lineNumber":164,"author":{"gitID":"AzuraAiR"},"content":"     * @return Total list of lessons a module has"},{"lineNumber":165,"author":{"gitID":"AzuraAiR"},"content":"     * @throws ParseException when information from NUSMods API cannot be retrieved successfully"},{"lineNumber":166,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"AzuraAiR"},"content":"    public static ArrayList\u003cLesson\u003e obtainModuleInfoFromApi(String moduleCode, int semNum) throws ParseException {"},{"lineNumber":168,"author":{"gitID":"AzuraAiR"},"content":"        LocalDate currentDate \u003d LocalDate.now();"},{"lineNumber":169,"author":{"gitID":"AzuraAiR"},"content":"        String acadYear;"},{"lineNumber":170,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":171,"author":{"gitID":"AzuraAiR"},"content":"        // Calculate current academic year"},{"lineNumber":172,"author":{"gitID":"AzuraAiR"},"content":"        if (currentDate.getMonthValue() \u003c\u003d 6) {"},{"lineNumber":173,"author":{"gitID":"AzuraAiR"},"content":"            acadYear \u003d (currentDate.getYear() - 1) + \"-\" + (currentDate.getYear());"},{"lineNumber":174,"author":{"gitID":"AzuraAiR"},"content":"        } else {"},{"lineNumber":175,"author":{"gitID":"AzuraAiR"},"content":"            acadYear \u003d currentDate.getYear() + \"-\" + (currentDate.getYear() + 1);"},{"lineNumber":176,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":178,"author":{"gitID":"AzuraAiR"},"content":"        // Link format is correct as of 3/4/2018"},{"lineNumber":179,"author":{"gitID":"AzuraAiR"},"content":"        String link \u003d \"http://api.nusmods.com/\" + acadYear + \"/\" + semNum + \"/modules/\" + moduleCode + \".json\";"},{"lineNumber":180,"author":{"gitID":"AzuraAiR"},"content":"        ObjectMapper mapper \u003d new ObjectMapper();"},{"lineNumber":181,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":182,"author":{"gitID":"AzuraAiR"},"content":"        try {"},{"lineNumber":183,"author":{"gitID":"AzuraAiR"},"content":"            // Grab lesson info from API and store as a map"},{"lineNumber":184,"author":{"gitID":"AzuraAiR"},"content":"            URL url \u003d new URL(link);"},{"lineNumber":185,"author":{"gitID":"AzuraAiR"},"content":"            @SuppressWarnings(\"unchecked\")"},{"lineNumber":186,"author":{"gitID":"AzuraAiR"},"content":"            Map\u003cString, Object\u003e mappedJson \u003d mapper.readValue(url, HashMap.class);"},{"lineNumber":187,"author":{"gitID":"AzuraAiR"},"content":"            @SuppressWarnings(\"unchecked\")"},{"lineNumber":188,"author":{"gitID":"AzuraAiR"},"content":"            ArrayList\u003cHashMap\u003cString, String\u003e\u003e lessonInfo \u003d (ArrayList\u003cHashMap\u003cString, String\u003e\u003e)"},{"lineNumber":189,"author":{"gitID":"AzuraAiR"},"content":"                    mappedJson.get(\"Timetable\");"},{"lineNumber":190,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":191,"author":{"gitID":"AzuraAiR"},"content":"            // Parse the information from API and creates an Arraylist of all possible lessons"},{"lineNumber":192,"author":{"gitID":"AzuraAiR"},"content":"            ArrayList\u003cLesson\u003e lessons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":193,"author":{"gitID":"AzuraAiR"},"content":"            for (HashMap\u003cString, String\u003e lesson : lessonInfo) {"},{"lineNumber":194,"author":{"gitID":"AzuraAiR"},"content":"                Lesson lessonToAdd \u003d new Lesson(moduleCode, lesson.get(\"ClassNo\"), lesson.get(\"LessonType\"),"},{"lineNumber":195,"author":{"gitID":"AzuraAiR"},"content":"                        lesson.get(\"WeekText\"), lesson.get(\"DayText\"), lesson.get(\"StartTime\"), lesson.get(\"EndTime\"));"},{"lineNumber":196,"author":{"gitID":"AzuraAiR"},"content":"                lessons.add(lessonToAdd);"},{"lineNumber":197,"author":{"gitID":"AzuraAiR"},"content":"            }"},{"lineNumber":198,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":199,"author":{"gitID":"AzuraAiR"},"content":"            return lessons;"},{"lineNumber":200,"author":{"gitID":"AzuraAiR"},"content":"        } catch (IOException exception) {"},{"lineNumber":201,"author":{"gitID":"AzuraAiR"},"content":"            throw new ParseException(\"Cannot retrieve module information\");"},{"lineNumber":202,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":205,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":206,"author":{"gitID":"AzuraAiR"},"content":"     * Converts the short form (in url) to the lengthened form (in json file)"},{"lineNumber":207,"author":{"gitID":"AzuraAiR"},"content":"     * @param shortform shortform in url"},{"lineNumber":208,"author":{"gitID":"AzuraAiR"},"content":"     * @return String Full form of shortform"},{"lineNumber":209,"author":{"gitID":"AzuraAiR"},"content":"     * @throws ParseException when invalid shortform"},{"lineNumber":210,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":211,"author":{"gitID":"AzuraAiR"},"content":"    private static String convertShortFormToLong(String shortform) throws ParseException {"},{"lineNumber":212,"author":{"gitID":"AzuraAiR"},"content":"        switch (shortform) {"},{"lineNumber":213,"author":{"gitID":"AzuraAiR"},"content":"        case \"LEC\":"},{"lineNumber":214,"author":{"gitID":"AzuraAiR"},"content":"            return \"Lecture\";"},{"lineNumber":215,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":216,"author":{"gitID":"AzuraAiR"},"content":"        case \"TUT\":"},{"lineNumber":217,"author":{"gitID":"AzuraAiR"},"content":"            return \"Tutorial\";"},{"lineNumber":218,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":219,"author":{"gitID":"AzuraAiR"},"content":"        case \"LAB\":"},{"lineNumber":220,"author":{"gitID":"AzuraAiR"},"content":"            return \"Laboratory\";"},{"lineNumber":221,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":222,"author":{"gitID":"AzuraAiR"},"content":"        case \"SEM\":"},{"lineNumber":223,"author":{"gitID":"AzuraAiR"},"content":"            return \"Seminar-Style Module Class\";"},{"lineNumber":224,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":225,"author":{"gitID":"AzuraAiR"},"content":"        case \"SEC\":"},{"lineNumber":226,"author":{"gitID":"AzuraAiR"},"content":"            return \"Sectional Teaching\";"},{"lineNumber":227,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":228,"author":{"gitID":"AzuraAiR"},"content":"        case \"REC\":"},{"lineNumber":229,"author":{"gitID":"AzuraAiR"},"content":"            return \"Recitation\";"},{"lineNumber":230,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":231,"author":{"gitID":"AzuraAiR"},"content":"        case \"TUT2\":"},{"lineNumber":232,"author":{"gitID":"AzuraAiR"},"content":"            return \"Tutorial Type 2\";"},{"lineNumber":233,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":234,"author":{"gitID":"AzuraAiR"},"content":"        case \"TUT3\":"},{"lineNumber":235,"author":{"gitID":"AzuraAiR"},"content":"            return \"Tutorial Type 3\";"},{"lineNumber":236,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":237,"author":{"gitID":"AzuraAiR"},"content":"        default:"},{"lineNumber":238,"author":{"gitID":"AzuraAiR"},"content":"            throw new ParseException(\"Error converting invalid shortform\");"},{"lineNumber":239,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":240,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":241,"author":{"gitID":"AzuraAiR"},"content":"}"}],"authorContributionMap":{"AzuraAiR":219,"-":22}},{"path":"src/main/java/seedu/address/logic/parser/SelectCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"yeggasd"},"content":"//@@author yeggasd"},{"lineNumber":12,"author":{"gitID":"yeggasd"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"yeggasd"},"content":" * Parses input arguments and creates a new SelectCommand object"},{"lineNumber":14,"author":{"gitID":"yeggasd"},"content":" */"},{"lineNumber":15,"author":{"gitID":"yeggasd"},"content":"public class SelectCommandParser implements Parser\u003cSelectCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":17,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"yeggasd"},"content":"     * Parses the given {@code String} of arguments in the context of the SelectCommand"},{"lineNumber":19,"author":{"gitID":"yeggasd"},"content":"     * and returns an SelectCommand object for execution."},{"lineNumber":20,"author":{"gitID":"yeggasd"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"yeggasd"},"content":"    public SelectCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"yeggasd"},"content":"        try {"},{"lineNumber":24,"author":{"gitID":"yeggasd"},"content":"            String trimmedArgs \u003d args.trim();"},{"lineNumber":25,"author":{"gitID":"yeggasd"},"content":"            String[] argsArray \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":26,"author":{"gitID":"yeggasd"},"content":"            if (argsArray.length !\u003d 2) {"},{"lineNumber":27,"author":{"gitID":"yeggasd"},"content":"                throw new ParseException("},{"lineNumber":28,"author":{"gitID":"yeggasd"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"yeggasd"},"content":"            }"},{"lineNumber":30,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":31,"author":{"gitID":"yeggasd"},"content":"            Index index \u003d ParserUtil.parseIndex(argsArray[0]);"},{"lineNumber":32,"author":{"gitID":"yeggasd"},"content":"            if (!StringUtil.isOddEven(argsArray[1])) {"},{"lineNumber":33,"author":{"gitID":"yeggasd"},"content":"                throw new ParseException("},{"lineNumber":34,"author":{"gitID":"yeggasd"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":35,"author":{"gitID":"yeggasd"},"content":"            }"},{"lineNumber":36,"author":{"gitID":"yeggasd"},"content":"            String oddEven \u003d argsArray[1];"},{"lineNumber":37,"author":{"gitID":"yeggasd"},"content":"            return new SelectCommand(index, oddEven);"},{"lineNumber":38,"author":{"gitID":"yeggasd"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":39,"author":{"gitID":"yeggasd"},"content":"            throw new ParseException("},{"lineNumber":40,"author":{"gitID":"yeggasd"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":41,"author":{"gitID":"yeggasd"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"yeggasd"},"content":"}"}],"authorContributionMap":{"yeggasd":33,"-":10}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AliasCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.BirthdaysCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":17,"author":{"gitID":"Caijun7"},"content":"import seedu.address.logic.commands.ExportCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":21,"author":{"gitID":"Caijun7"},"content":"import seedu.address.logic.commands.ImportCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.MapCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.PasswordCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RemovePasswordCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.TimetableUnionCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UnaliasCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":31,"author":{"gitID":"Caijun7"},"content":"import seedu.address.logic.commands.UploadCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.VacantCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":37,"author":{"gitID":"-"},"content":" */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * @param commandWord commandWord from the user input"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * @param arguments arguments from the user input"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public Command parseCommand(String commandWord, String arguments) throws ParseException {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"Caijun7"},"content":"        case ImportCommand.COMMAND_WORD:"},{"lineNumber":93,"author":{"gitID":"Caijun7"},"content":"            return new ImportCommandParser().parse(arguments);"},{"lineNumber":94,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":95,"author":{"gitID":"Caijun7"},"content":"        case ExportCommand.COMMAND_WORD:"},{"lineNumber":96,"author":{"gitID":"Caijun7"},"content":"            return new ExportCommandParser().parse(arguments);"},{"lineNumber":97,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":98,"author":{"gitID":"Caijun7"},"content":"        case UploadCommand.COMMAND_WORD:"},{"lineNumber":99,"author":{"gitID":"Caijun7"},"content":"            return new UploadCommandParser().parse(arguments);"},{"lineNumber":100,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        case AliasCommand.COMMAND_WORD:"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            return new AliasCommandParser().parse(arguments);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        case UnaliasCommand.COMMAND_WORD:"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            return new UnaliasCommandParser().parse(arguments);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        case VacantCommand.COMMAND_WORD:"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            return new VacantCommandParser().parse(arguments);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        case PasswordCommand.COMMAND_WORD:"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            return new PasswordCommandParser().parse(arguments);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        case BirthdaysCommand.COMMAND_WORD:"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            return new BirthdaysCommandParser().parse(arguments);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        case RemovePasswordCommand.COMMAND_WORD:"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            return new RemovePasswordCommandParser().parse(arguments);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        case MapCommand.COMMAND_WORD:"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            return new MapCommandParser().parse(arguments);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        case TimetableUnionCommand.COMMAND_WORD:"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            return new TimetableUnionCommandParser().parse(arguments);"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"jingyinno"},"content":"    //@@author jingyinno"},{"lineNumber":131,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"jingyinno"},"content":"     * Parses user input into command for execution."},{"lineNumber":133,"author":{"gitID":"jingyinno"},"content":"     *"},{"lineNumber":134,"author":{"gitID":"jingyinno"},"content":"     * @param userInput full user input string"},{"lineNumber":135,"author":{"gitID":"jingyinno"},"content":"     * @return String[] of size 2, consists of commandWord and arguments"},{"lineNumber":136,"author":{"gitID":"jingyinno"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":137,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"jingyinno"},"content":"    public String[] extractCommandArgs(String userInput) throws ParseException {"},{"lineNumber":139,"author":{"gitID":"jingyinno"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":140,"author":{"gitID":"jingyinno"},"content":"        if (!matcher.matches()) {"},{"lineNumber":141,"author":{"gitID":"jingyinno"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":142,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":144,"author":{"gitID":"jingyinno"},"content":"        return new String[] {matcher.group(\"commandWord\"), matcher.group(\"arguments\")};"},{"lineNumber":145,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"jingyinno"},"content":"    //@@author"},{"lineNumber":147,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Caijun7":12,"jingyinno":17,"-":118}},{"path":"src/main/java/seedu/address/logic/parser/ImportCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":5,"author":{"gitID":"Caijun7"},"content":"import seedu.address.logic.commands.ImportCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":"//@@author Caijun7"},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":" * Parses input arguments and creates a new ImportCommand object"},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":" */"},{"lineNumber":12,"author":{"gitID":"Caijun7"},"content":"public class ImportCommandParser implements Parser\u003cImportCommand\u003e {"},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":"    private static final String SPLIT_TOKEN \u003d \"\\\\s+\";"},{"lineNumber":14,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":"     * Parses the given {@code String} of arguments in the context of the ImportCommand"},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":"     * and returns an ImportCommand object for execution."},{"lineNumber":17,"author":{"gitID":"Caijun7"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":18,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":"    public ImportCommand parse(String args) throws ParseException {"},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":21,"author":{"gitID":"Caijun7"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":22,"author":{"gitID":"Caijun7"},"content":"            throw new ParseException("},{"lineNumber":23,"author":{"gitID":"Caijun7"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"},{"lineNumber":24,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":25,"author":{"gitID":"Caijun7"},"content":"        String[] splitArgs \u003d trimmedArgs.split(SPLIT_TOKEN);"},{"lineNumber":26,"author":{"gitID":"Caijun7"},"content":"        if (splitArgs.length \u003d\u003d 1) {"},{"lineNumber":27,"author":{"gitID":"Caijun7"},"content":"            return new ImportCommand(splitArgs[0]);"},{"lineNumber":28,"author":{"gitID":"Caijun7"},"content":"        } else if (splitArgs.length \u003d\u003d 2) {"},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":"            return new ImportCommand(splitArgs[0], splitArgs[1]);"},{"lineNumber":30,"author":{"gitID":"Caijun7"},"content":"        } else {"},{"lineNumber":31,"author":{"gitID":"Caijun7"},"content":"            throw new ParseException("},{"lineNumber":32,"author":{"gitID":"Caijun7"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":35,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":31,"-":5}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.model.building.Building.retrieveNusBuildingIfExist;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.MapCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.building.Building;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Birthday;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.timetable.Timetable;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":27,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_ODDEVEN \u003d \"String is not even or odd.\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * Parses a {@code String birthday} into a {@code Birthday}."},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code birthday} is invalid."},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    public static Birthday parseBirthday(String birthday) throws IllegalValueException {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        requireNonNull(birthday);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        String trimmedBirthday \u003d birthday.trim();"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            Birthday.isValidBirthday(trimmedBirthday);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        } catch (IllegalArgumentException iae) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(iae.getMessage());"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        return new Birthday(trimmedBirthday);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e birthday} into an {@code Optional\u003cBirthday\u003e} if {@code birthday} is present."},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":170,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    public static Optional\u003cBirthday\u003e parseBirthday(Optional\u003cString\u003e birthday) throws IllegalValueException {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        requireNonNull(birthday);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        return birthday.isPresent() ? Optional.of(parseBirthday(birthday.get())) : Optional.empty();"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * Parses a {@code String timetableUrl} into a {@code Timetable}."},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":179,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code birthday} is invalid."},{"lineNumber":181,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    public static Timetable parseTimetable(String timetableUrl) throws IllegalValueException {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        requireNonNull(timetableUrl);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        String trimmedUrl \u003d timetableUrl.trim();"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        if (!trimmedUrl.equals(Timetable.EMPTY_LINK) \u0026\u0026 !Timetable.isValidUrl(timetableUrl)) {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Timetable.MESSAGE_URL_CONSTRAINTS);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        return new Timetable(trimmedUrl);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e timetableUrl} into an {@code Optional\u003cTimetable\u003e}"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * if {@code timetableUrl} is present."},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":196,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    public static Optional\u003cTimetable\u003e parseTimetable(Optional\u003cString\u003e timetableUrl) throws IllegalValueException {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        requireNonNull(timetableUrl);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        return timetableUrl.isPresent() ? Optional.of(parseTimetable(timetableUrl.get())) : Optional.empty();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":205,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":207,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":219,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"jingyinno"},"content":"    //@@author jingyinno"},{"lineNumber":230,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":231,"author":{"gitID":"jingyinno"},"content":"     * Parses a {@code String command} and {@code String alias} into {@code Alias}"},{"lineNumber":232,"author":{"gitID":"jingyinno"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":233,"author":{"gitID":"jingyinno"},"content":"     *"},{"lineNumber":234,"author":{"gitID":"jingyinno"},"content":"     * @throws IllegalValueException if the given command and alias are invalid."},{"lineNumber":235,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":236,"author":{"gitID":"jingyinno"},"content":"    public static Alias parseAlias(String command, String alias) throws IllegalValueException {"},{"lineNumber":237,"author":{"gitID":"jingyinno"},"content":"        requireNonNull(command, alias);"},{"lineNumber":238,"author":{"gitID":"jingyinno"},"content":"        if (!Alias.isValidAliasParameter(command) || !Alias.isValidAliasParameter(alias)) {"},{"lineNumber":239,"author":{"gitID":"jingyinno"},"content":"            throw new IllegalValueException(Alias.MESSAGE_ALIAS_CONSTRAINTS);"},{"lineNumber":240,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":241,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":242,"author":{"gitID":"jingyinno"},"content":"        return new Alias(command, alias);"},{"lineNumber":243,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":245,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":246,"author":{"gitID":"jingyinno"},"content":"     * Parses a {@code String locations} into {@code String formattedLocations}"},{"lineNumber":247,"author":{"gitID":"jingyinno"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":248,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":249,"author":{"gitID":"jingyinno"},"content":"    public static String parseLocations(String locations) {"},{"lineNumber":250,"author":{"gitID":"jingyinno"},"content":"        requireNonNull(locations);"},{"lineNumber":251,"author":{"gitID":"jingyinno"},"content":"        String[] locationsArray \u003d locations.split(MapCommand.SPLIT_TOKEN);"},{"lineNumber":252,"author":{"gitID":"jingyinno"},"content":"        checkForAndRetrieveNusBuildings(locationsArray);"},{"lineNumber":253,"author":{"gitID":"jingyinno"},"content":"        return identifyNumberOfSpecifiedLocations(locationsArray);"},{"lineNumber":254,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":255,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":256,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":257,"author":{"gitID":"jingyinno"},"content":"     * Identifies if one or more locations are specified in the user input"},{"lineNumber":258,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":259,"author":{"gitID":"jingyinno"},"content":"    private static String identifyNumberOfSpecifiedLocations(String[] locationsArray) {"},{"lineNumber":260,"author":{"gitID":"jingyinno"},"content":"        if (locationsArray.length \u003e\u003d MapCommand.TWO_LOCATIONS_WORD_LENGTH) {"},{"lineNumber":261,"author":{"gitID":"jingyinno"},"content":"            return String.join(MapCommand.SPLIT_TOKEN, locationsArray);"},{"lineNumber":262,"author":{"gitID":"jingyinno"},"content":"        } else {"},{"lineNumber":263,"author":{"gitID":"jingyinno"},"content":"            return locationsArray[MapCommand.FIRST_LOCATION_INDEX];"},{"lineNumber":264,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":265,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":267,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":268,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":269,"author":{"gitID":"jingyinno"},"content":"     * Replace NUS building names with respective postal code"},{"lineNumber":270,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":271,"author":{"gitID":"jingyinno"},"content":"    private static void checkForAndRetrieveNusBuildings(String[] locationsArray) {"},{"lineNumber":272,"author":{"gitID":"jingyinno"},"content":"        for (int i \u003d 0; i \u003c locationsArray.length; i++) {"},{"lineNumber":273,"author":{"gitID":"jingyinno"},"content":"            locationsArray[i] \u003d locationsArray[i].trim();"},{"lineNumber":274,"author":{"gitID":"jingyinno"},"content":"            locationsArray[i] \u003d retrieveNusBuildingIfExist(locationsArray[i]);"},{"lineNumber":275,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":276,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":277,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":278,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":279,"author":{"gitID":"jingyinno"},"content":"     * Parses a {@code String unalias}"},{"lineNumber":280,"author":{"gitID":"jingyinno"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":281,"author":{"gitID":"jingyinno"},"content":"     *"},{"lineNumber":282,"author":{"gitID":"jingyinno"},"content":"     * @throws IllegalValueException if the given {@code unalias} is invalid."},{"lineNumber":283,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":284,"author":{"gitID":"jingyinno"},"content":"    public static String parseUnalias(String unalias) throws IllegalValueException {"},{"lineNumber":285,"author":{"gitID":"jingyinno"},"content":"        requireNonNull(unalias);"},{"lineNumber":286,"author":{"gitID":"jingyinno"},"content":"        if (!Alias.isValidAliasParameter(unalias)) {"},{"lineNumber":287,"author":{"gitID":"jingyinno"},"content":"            throw new IllegalValueException(Alias.MESSAGE_ALIAS_CONSTRAINTS);"},{"lineNumber":288,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":289,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":290,"author":{"gitID":"jingyinno"},"content":"        return unalias;"},{"lineNumber":291,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":292,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":293,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":294,"author":{"gitID":"jingyinno"},"content":"     * Parses a {@code String building} into a {@code Building}."},{"lineNumber":295,"author":{"gitID":"jingyinno"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":296,"author":{"gitID":"jingyinno"},"content":"     *"},{"lineNumber":297,"author":{"gitID":"jingyinno"},"content":"     * @throws IllegalValueException if the given {@code building} is invalid."},{"lineNumber":298,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":299,"author":{"gitID":"jingyinno"},"content":"    public static Building parseBuilding(String building) throws IllegalValueException {"},{"lineNumber":300,"author":{"gitID":"jingyinno"},"content":"        requireNonNull(building);"},{"lineNumber":301,"author":{"gitID":"jingyinno"},"content":"        String trimmedBuilding \u003d building.trim();"},{"lineNumber":302,"author":{"gitID":"jingyinno"},"content":"        if (!Building.isValidBuilding(trimmedBuilding)) {"},{"lineNumber":303,"author":{"gitID":"jingyinno"},"content":"            throw new IllegalValueException(Building.MESSAGE_BUILDING_CONSTRAINTS);"},{"lineNumber":304,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":305,"author":{"gitID":"jingyinno"},"content":"        return new Building(trimmedBuilding);"},{"lineNumber":306,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":307,"author":{"gitID":"jingyinno"},"content":"    //@@author"},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"yeggasd"},"content":"    //@@author yeggasd"},{"lineNumber":310,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":311,"author":{"gitID":"yeggasd"},"content":"     * Parses a (@code String oddEven)"},{"lineNumber":312,"author":{"gitID":"yeggasd"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":313,"author":{"gitID":"yeggasd"},"content":"     * @throws IllegalValueException if not odd or even"},{"lineNumber":314,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":315,"author":{"gitID":"yeggasd"},"content":"    public static String parseOddEven(String oddEven) throws IllegalValueException {"},{"lineNumber":316,"author":{"gitID":"yeggasd"},"content":"        requireNonNull(oddEven);"},{"lineNumber":317,"author":{"gitID":"yeggasd"},"content":"        String trimmedOddEven \u003d oddEven.trim();"},{"lineNumber":318,"author":{"gitID":"yeggasd"},"content":"        if (!StringUtil.isOddEven(trimmedOddEven)) {"},{"lineNumber":319,"author":{"gitID":"yeggasd"},"content":"            throw new IllegalValueException(MESSAGE_NOT_ODDEVEN);"},{"lineNumber":320,"author":{"gitID":"yeggasd"},"content":"        }"},{"lineNumber":321,"author":{"gitID":"yeggasd"},"content":"        return trimmedOddEven;"},{"lineNumber":322,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":323,"author":{"gitID":"yeggasd"},"content":"    //@@author"},{"lineNumber":324,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yeggasd":15,"jingyinno":79,"-":230}},{"path":"src/main/java/seedu/address/logic/parser/RemovePasswordCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RemovePasswordCommand;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"yeggasd"},"content":"//@@author yeggasd"},{"lineNumber":7,"author":{"gitID":"yeggasd"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"yeggasd"},"content":" * Parses input arguments and creates a new RemovePasswordCommand object"},{"lineNumber":9,"author":{"gitID":"yeggasd"},"content":" */"},{"lineNumber":10,"author":{"gitID":"yeggasd"},"content":"public class RemovePasswordCommandParser implements Parser\u003cRemovePasswordCommand\u003e {"},{"lineNumber":11,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":12,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":13,"author":{"gitID":"yeggasd"},"content":"     * Parses the given {@code String} of arguments in the context of the RemovePasswordCommand"},{"lineNumber":14,"author":{"gitID":"yeggasd"},"content":"     * and returns an RemovePasswordCommand object for execution."},{"lineNumber":15,"author":{"gitID":"yeggasd"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":16,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"yeggasd"},"content":"    public RemovePasswordCommand parse(String arguments) {"},{"lineNumber":18,"author":{"gitID":"yeggasd"},"content":"        return new RemovePasswordCommand();"},{"lineNumber":19,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"yeggasd"},"content":"}"}],"authorContributionMap":{"yeggasd":15,"-":5}},{"path":"src/main/java/seedu/address/logic/parser/ExportCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":5,"author":{"gitID":"Caijun7"},"content":"import seedu.address.logic.commands.ExportCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":"//@@author Caijun7"},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":" * Parses input arguments and creates a new ExportCommand object"},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":" */"},{"lineNumber":12,"author":{"gitID":"Caijun7"},"content":"public class ExportCommandParser implements Parser\u003cExportCommand\u003e {"},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":"    private static final String SPLIT_TOKEN \u003d \" \";"},{"lineNumber":14,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":"     * Parses the given {@code String} of arguments in the context of the ExportCommand"},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":"     * and returns an ExportCommand object for execution."},{"lineNumber":17,"author":{"gitID":"Caijun7"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":18,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":"    public ExportCommand parse(String args) throws ParseException {"},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":21,"author":{"gitID":"Caijun7"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":22,"author":{"gitID":"Caijun7"},"content":"            throw new ParseException("},{"lineNumber":23,"author":{"gitID":"Caijun7"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"},{"lineNumber":24,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":25,"author":{"gitID":"Caijun7"},"content":"        String[] splitArgs \u003d trimmedArgs.split(SPLIT_TOKEN);"},{"lineNumber":26,"author":{"gitID":"Caijun7"},"content":"        if (splitArgs.length \u003d\u003d 1) {"},{"lineNumber":27,"author":{"gitID":"Caijun7"},"content":"            return new ExportCommand(splitArgs[0]);"},{"lineNumber":28,"author":{"gitID":"Caijun7"},"content":"        } else if (splitArgs.length \u003d\u003d 2) {"},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":"            return new ExportCommand(splitArgs[0], splitArgs[1]);"},{"lineNumber":30,"author":{"gitID":"Caijun7"},"content":"        } else {"},{"lineNumber":31,"author":{"gitID":"Caijun7"},"content":"            throw new ParseException("},{"lineNumber":32,"author":{"gitID":"Caijun7"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":35,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":31,"-":5}},{"path":"src/main/java/seedu/address/logic/parser/TimetableUnionCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.TimetableUnionCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"AzuraAiR"},"content":"//@@author AzuraAiR"},{"lineNumber":13,"author":{"gitID":"AzuraAiR"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"AzuraAiR"},"content":" * Parses input arguments and creates a new TimetableUnionCommand object"},{"lineNumber":15,"author":{"gitID":"AzuraAiR"},"content":" */"},{"lineNumber":16,"author":{"gitID":"AzuraAiR"},"content":"public class TimetableUnionCommandParser implements Parser\u003cTimetableUnionCommand\u003e {"},{"lineNumber":17,"author":{"gitID":"AzuraAiR"},"content":"    private static final String SPLIT_TOKEN \u003d \" \";"},{"lineNumber":18,"author":{"gitID":"AzuraAiR"},"content":"    private static final int ODD_EVEN_INDEX \u003d 0;"},{"lineNumber":19,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"AzuraAiR"},"content":"     * Parses the given {@code String} of arguments in the context of the TimetableUnionCommand"},{"lineNumber":21,"author":{"gitID":"AzuraAiR"},"content":"     * and returns an TimetableUnionCommand object for execution."},{"lineNumber":22,"author":{"gitID":"AzuraAiR"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":23,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"AzuraAiR"},"content":"    public TimetableUnionCommand parse(String args) throws ParseException {"},{"lineNumber":25,"author":{"gitID":"AzuraAiR"},"content":"        try {"},{"lineNumber":26,"author":{"gitID":"AzuraAiR"},"content":"            String trimmedArgs \u003d args.trim();"},{"lineNumber":27,"author":{"gitID":"AzuraAiR"},"content":"            String[] splitArgs \u003d trimmedArgs.split(SPLIT_TOKEN);"},{"lineNumber":28,"author":{"gitID":"AzuraAiR"},"content":"            if (splitArgs.length \u003c 3) {"},{"lineNumber":29,"author":{"gitID":"AzuraAiR"},"content":"                throw new ParseException("},{"lineNumber":30,"author":{"gitID":"AzuraAiR"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, TimetableUnionCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"AzuraAiR"},"content":"            }"},{"lineNumber":32,"author":{"gitID":"AzuraAiR"},"content":"            ArrayList\u003cIndex\u003e indexes \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":33,"author":{"gitID":"AzuraAiR"},"content":"            String oddEven \u003d ParserUtil.parseOddEven(splitArgs[ODD_EVEN_INDEX]);"},{"lineNumber":34,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":35,"author":{"gitID":"AzuraAiR"},"content":"            for (int i \u003d ODD_EVEN_INDEX + 1; i \u003c splitArgs.length; i++) {"},{"lineNumber":36,"author":{"gitID":"AzuraAiR"},"content":"                Index indexToAdd \u003d ParserUtil.parseIndex(splitArgs[i]);"},{"lineNumber":37,"author":{"gitID":"AzuraAiR"},"content":"                if (!indexes.contains(indexToAdd)) {"},{"lineNumber":38,"author":{"gitID":"AzuraAiR"},"content":"                    indexes.add(indexToAdd);"},{"lineNumber":39,"author":{"gitID":"AzuraAiR"},"content":"                } else {"},{"lineNumber":40,"author":{"gitID":"AzuraAiR"},"content":"                    throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":41,"author":{"gitID":"AzuraAiR"},"content":"                            TimetableUnionCommand.MESSAGE_USAGE));"},{"lineNumber":42,"author":{"gitID":"AzuraAiR"},"content":"                }"},{"lineNumber":43,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":44,"author":{"gitID":"AzuraAiR"},"content":"            }"},{"lineNumber":45,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":46,"author":{"gitID":"AzuraAiR"},"content":"            return new TimetableUnionCommand(indexes, oddEven);"},{"lineNumber":47,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":48,"author":{"gitID":"AzuraAiR"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":49,"author":{"gitID":"AzuraAiR"},"content":"            throw new ParseException("},{"lineNumber":50,"author":{"gitID":"AzuraAiR"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, TimetableUnionCommand.MESSAGE_USAGE));"},{"lineNumber":51,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":54,"author":{"gitID":"AzuraAiR"},"content":"}"},{"lineNumber":55,"author":{"gitID":"AzuraAiR"},"content":""}],"authorContributionMap":{"AzuraAiR":44,"-":11}},{"path":"src/main/java/seedu/address/logic/parser/UploadCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":5,"author":{"gitID":"Caijun7"},"content":"import seedu.address.logic.commands.UploadCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":"//@@author Caijun7"},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":" * Parses input arguments and creates a new UploadCommand object"},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":" */"},{"lineNumber":12,"author":{"gitID":"Caijun7"},"content":"public class UploadCommandParser implements Parser\u003cUploadCommand\u003e {"},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":"    private static final String SPLIT_TOKEN \u003d \" \";"},{"lineNumber":14,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":"     * Parses the given {@code String} of arguments in the context of the UploadCommand"},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":"     * and returns an UploadCommand object for execution."},{"lineNumber":17,"author":{"gitID":"Caijun7"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":18,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":"    public UploadCommand parse(String args) throws ParseException {"},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":21,"author":{"gitID":"Caijun7"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":22,"author":{"gitID":"Caijun7"},"content":"            throw new ParseException("},{"lineNumber":23,"author":{"gitID":"Caijun7"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UploadCommand.MESSAGE_USAGE));"},{"lineNumber":24,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":25,"author":{"gitID":"Caijun7"},"content":"        String[] splitArgs \u003d trimmedArgs.split(SPLIT_TOKEN);"},{"lineNumber":26,"author":{"gitID":"Caijun7"},"content":"        if (splitArgs.length \u003d\u003d 1) {"},{"lineNumber":27,"author":{"gitID":"Caijun7"},"content":"            return new UploadCommand(splitArgs[0]);"},{"lineNumber":28,"author":{"gitID":"Caijun7"},"content":"        } else if (splitArgs.length \u003d\u003d 2) {"},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":"            return new UploadCommand(splitArgs[0], splitArgs[1]);"},{"lineNumber":30,"author":{"gitID":"Caijun7"},"content":"        } else {"},{"lineNumber":31,"author":{"gitID":"Caijun7"},"content":"            throw new ParseException("},{"lineNumber":32,"author":{"gitID":"Caijun7"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UploadCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":35,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":31,"-":5}},{"path":"src/main/java/seedu/address/logic/parser/AliasCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AliasCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"jingyinno"},"content":"//@@author jingyinno"},{"lineNumber":11,"author":{"gitID":"jingyinno"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"jingyinno"},"content":" * Parses input arguments and creates a new AliasCommand object"},{"lineNumber":13,"author":{"gitID":"jingyinno"},"content":" */"},{"lineNumber":14,"author":{"gitID":"jingyinno"},"content":"public class AliasCommandParser implements Parser\u003cAliasCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"jingyinno"},"content":"    private static final String SPLIT_TOKEN \u003d \"\\\\s+\";"},{"lineNumber":16,"author":{"gitID":"jingyinno"},"content":"    private static final int CORRECT_ARGS_LENGTH \u003d 2;"},{"lineNumber":17,"author":{"gitID":"jingyinno"},"content":"    private static final int COMMAND_INDEX \u003d 0;"},{"lineNumber":18,"author":{"gitID":"jingyinno"},"content":"    private static final int ALIAS_INDEX \u003d 1;"},{"lineNumber":19,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":20,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"jingyinno"},"content":"     * Parses the given {@code String} of arguments in the context of the AliasCommand"},{"lineNumber":22,"author":{"gitID":"jingyinno"},"content":"     * and returns an AliasCommand object for execution."},{"lineNumber":23,"author":{"gitID":"jingyinno"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":24,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"jingyinno"},"content":"    public AliasCommand parse(String args) throws ParseException {"},{"lineNumber":26,"author":{"gitID":"jingyinno"},"content":"        String[] trimmedArgs \u003d validateNumberOfArgs(args);"},{"lineNumber":27,"author":{"gitID":"jingyinno"},"content":"        try {"},{"lineNumber":28,"author":{"gitID":"jingyinno"},"content":"            Alias aliasCreated \u003d ParserUtil.parseAlias(trimmedArgs[COMMAND_INDEX], trimmedArgs[ALIAS_INDEX]);"},{"lineNumber":29,"author":{"gitID":"jingyinno"},"content":"            return new AliasCommand(aliasCreated);"},{"lineNumber":30,"author":{"gitID":"jingyinno"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":31,"author":{"gitID":"jingyinno"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":32,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":35,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"jingyinno"},"content":"     * Returns a String Array of valid number of elements after slicing the user input."},{"lineNumber":37,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"jingyinno"},"content":"    private String[] validateNumberOfArgs(String args) throws ParseException {"},{"lineNumber":39,"author":{"gitID":"jingyinno"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":40,"author":{"gitID":"jingyinno"},"content":"        String[] splitArgs \u003d trimmedArgs.split(SPLIT_TOKEN);"},{"lineNumber":41,"author":{"gitID":"jingyinno"},"content":"        if (splitArgs.length !\u003d CORRECT_ARGS_LENGTH) {"},{"lineNumber":42,"author":{"gitID":"jingyinno"},"content":"            throw new ParseException("},{"lineNumber":43,"author":{"gitID":"jingyinno"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AliasCommand.MESSAGE_USAGE));"},{"lineNumber":44,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"jingyinno"},"content":"        return splitArgs;"},{"lineNumber":46,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"jingyinno"},"content":"}"}],"authorContributionMap":{"jingyinno":38,"-":9}},{"path":"src/main/java/seedu/address/logic/parser/PasswordCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.PasswordCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"yeggasd"},"content":"//@@author yeggasd"},{"lineNumber":10,"author":{"gitID":"yeggasd"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"yeggasd"},"content":" * Parses input arguments and creates a new PasswordCommand object"},{"lineNumber":12,"author":{"gitID":"yeggasd"},"content":" */"},{"lineNumber":13,"author":{"gitID":"yeggasd"},"content":"public class PasswordCommandParser implements Parser\u003cPasswordCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":15,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"yeggasd"},"content":"     * Parses the given {@code String} of arguments in the context of the PasswordCommand"},{"lineNumber":17,"author":{"gitID":"yeggasd"},"content":"     * and returns an PasswordCommand object for execution."},{"lineNumber":18,"author":{"gitID":"yeggasd"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"yeggasd"},"content":"    public PasswordCommand parse(String arguments) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"yeggasd"},"content":"        String args \u003d arguments.trim();"},{"lineNumber":22,"author":{"gitID":"yeggasd"},"content":"        if (\"\".equals(args)) {"},{"lineNumber":23,"author":{"gitID":"yeggasd"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, PasswordCommand.INVALID_PASSWORD,"},{"lineNumber":24,"author":{"gitID":"yeggasd"},"content":"                            PasswordCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitID":"yeggasd"},"content":"        }"},{"lineNumber":26,"author":{"gitID":"yeggasd"},"content":"        return new PasswordCommand(args);"},{"lineNumber":27,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"yeggasd"},"content":"}"}],"authorContributionMap":{"yeggasd":20,"-":8}},{"path":"src/main/java/seedu/address/logic/parser/BirthdaysCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.BirthdaysCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"AzuraAiR"},"content":"//@@author AzuraAiR"},{"lineNumber":10,"author":{"gitID":"AzuraAiR"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"AzuraAiR"},"content":" * Parses input arguments and creates a new BirthdaysCommand object"},{"lineNumber":12,"author":{"gitID":"AzuraAiR"},"content":" */"},{"lineNumber":13,"author":{"gitID":"AzuraAiR"},"content":"public class BirthdaysCommandParser implements Parser\u003cBirthdaysCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":15,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"AzuraAiR"},"content":"     * Parses the given {@code String} of arguments in the context of the BirthdaysCommand"},{"lineNumber":17,"author":{"gitID":"AzuraAiR"},"content":"     * and returns an BirthdaysCommand object for execution."},{"lineNumber":18,"author":{"gitID":"AzuraAiR"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"AzuraAiR"},"content":"    public BirthdaysCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"AzuraAiR"},"content":"        args \u003d args.trim();"},{"lineNumber":22,"author":{"gitID":"AzuraAiR"},"content":"        String[] trimmedArgs \u003d args.split(\"\\\\s+\");"},{"lineNumber":23,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":24,"author":{"gitID":"AzuraAiR"},"content":"        if (trimmedArgs.length \u003d\u003d 1) {   // Only birthdays alone is called"},{"lineNumber":25,"author":{"gitID":"AzuraAiR"},"content":"            if (trimmedArgs[0].equalsIgnoreCase(BirthdaysCommand.ADDITIONAL_COMMAND_PARAMETER)) {  // Check if valid"},{"lineNumber":26,"author":{"gitID":"AzuraAiR"},"content":"                return new BirthdaysCommand(true);"},{"lineNumber":27,"author":{"gitID":"AzuraAiR"},"content":"            } else if (trimmedArgs[0].equalsIgnoreCase(\"\")) {"},{"lineNumber":28,"author":{"gitID":"AzuraAiR"},"content":"                return new BirthdaysCommand(false);"},{"lineNumber":29,"author":{"gitID":"AzuraAiR"},"content":"            } else {"},{"lineNumber":30,"author":{"gitID":"AzuraAiR"},"content":"                throw new ParseException("},{"lineNumber":31,"author":{"gitID":"AzuraAiR"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, BirthdaysCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"AzuraAiR"},"content":"            }"},{"lineNumber":33,"author":{"gitID":"AzuraAiR"},"content":"        } else {"},{"lineNumber":34,"author":{"gitID":"AzuraAiR"},"content":"            throw new ParseException("},{"lineNumber":35,"author":{"gitID":"AzuraAiR"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, BirthdaysCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":38,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":40,"author":{"gitID":"AzuraAiR"},"content":"}"}],"authorContributionMap":{"AzuraAiR":32,"-":8}},{"path":"src/main/java/seedu/address/logic/parser/MapCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.MapCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"jingyinno"},"content":"//@@author jingyinno"},{"lineNumber":9,"author":{"gitID":"jingyinno"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"jingyinno"},"content":" * Parses input arguments and creates a new MapCommand object"},{"lineNumber":11,"author":{"gitID":"jingyinno"},"content":" */"},{"lineNumber":12,"author":{"gitID":"jingyinno"},"content":"public class MapCommandParser implements Parser\u003cMapCommand\u003e {"},{"lineNumber":13,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":14,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"jingyinno"},"content":"     * Parses the given {@code String} of arguments in the context of the MapCommand"},{"lineNumber":16,"author":{"gitID":"jingyinno"},"content":"     * and returns a MapCommand object for execution."},{"lineNumber":17,"author":{"gitID":"jingyinno"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":18,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"jingyinno"},"content":"    public MapCommand parse(String args) throws ParseException {"},{"lineNumber":20,"author":{"gitID":"jingyinno"},"content":"        return validateNumberOfArgs(args);"},{"lineNumber":21,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":23,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"jingyinno"},"content":"     * Returns a Map Command of not empty location argument."},{"lineNumber":25,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"jingyinno"},"content":"    private MapCommand validateNumberOfArgs(String args) throws ParseException {"},{"lineNumber":27,"author":{"gitID":"jingyinno"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":28,"author":{"gitID":"jingyinno"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":29,"author":{"gitID":"jingyinno"},"content":"            throw new ParseException("},{"lineNumber":30,"author":{"gitID":"jingyinno"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MapCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"jingyinno"},"content":"        } else {"},{"lineNumber":32,"author":{"gitID":"jingyinno"},"content":"            return new MapCommand(trimmedArgs);"},{"lineNumber":33,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"jingyinno"},"content":"}"}],"authorContributionMap":{"jingyinno":28,"-":7}},{"path":"src/main/java/seedu/address/logic/parser/UnaliasCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UnaliasCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"jingyinno"},"content":"//@@author jingyinno"},{"lineNumber":10,"author":{"gitID":"jingyinno"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"jingyinno"},"content":" * Parses input arguments and creates a new UnaliasCommand object"},{"lineNumber":12,"author":{"gitID":"jingyinno"},"content":" */"},{"lineNumber":13,"author":{"gitID":"jingyinno"},"content":"public class UnaliasCommandParser implements Parser\u003cUnaliasCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":15,"author":{"gitID":"jingyinno"},"content":"    private static final String SPLIT_TOKEN \u003d \"\\\\s+\";"},{"lineNumber":16,"author":{"gitID":"jingyinno"},"content":"    private static final int CORRECT_ARGS_LENGTH \u003d 1;"},{"lineNumber":17,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":18,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"jingyinno"},"content":"     * Parses the given {@code String} of arguments in the context of the UnaliasCommand"},{"lineNumber":20,"author":{"gitID":"jingyinno"},"content":"     * and returns an UnaliasCommand object for execution."},{"lineNumber":21,"author":{"gitID":"jingyinno"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":22,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"jingyinno"},"content":"    public UnaliasCommand parse(String args) throws ParseException {"},{"lineNumber":24,"author":{"gitID":"jingyinno"},"content":"        String unalias \u003d validateNumberOfArgs(args);"},{"lineNumber":25,"author":{"gitID":"jingyinno"},"content":"        try {"},{"lineNumber":26,"author":{"gitID":"jingyinno"},"content":"            String toBeRemoved \u003d ParserUtil.parseUnalias(unalias);"},{"lineNumber":27,"author":{"gitID":"jingyinno"},"content":"            return new UnaliasCommand(toBeRemoved);"},{"lineNumber":28,"author":{"gitID":"jingyinno"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":29,"author":{"gitID":"jingyinno"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":30,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":33,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"jingyinno"},"content":"     * Returns a non empty String of unalias."},{"lineNumber":35,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"jingyinno"},"content":"    private String validateNumberOfArgs(String args) throws ParseException {"},{"lineNumber":37,"author":{"gitID":"jingyinno"},"content":"        String unalias \u003d args.trim();"},{"lineNumber":38,"author":{"gitID":"jingyinno"},"content":"        String[] splitArgs \u003d unalias.split(SPLIT_TOKEN);"},{"lineNumber":39,"author":{"gitID":"jingyinno"},"content":"        if (unalias.isEmpty() || splitArgs.length !\u003d CORRECT_ARGS_LENGTH) {"},{"lineNumber":40,"author":{"gitID":"jingyinno"},"content":"            throw new ParseException("},{"lineNumber":41,"author":{"gitID":"jingyinno"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnaliasCommand.MESSAGE_USAGE));"},{"lineNumber":42,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"jingyinno"},"content":"        return unalias;"},{"lineNumber":44,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"jingyinno"},"content":"}"}],"authorContributionMap":{"jingyinno":37,"-":8}},{"path":"src/main/java/seedu/address/logic/commands/VacantCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.VenueTableEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.building.Building;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.building.exceptions.BuildingNotFoundException;"},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.exceptions.CorruptedVenueInformationException;"},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.exceptions.NoRoomsInBuildingException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"jingyinno"},"content":"//@@author jingyinno"},{"lineNumber":19,"author":{"gitID":"jingyinno"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"jingyinno"},"content":" * Retrieves all vacant rooms in a given building"},{"lineNumber":21,"author":{"gitID":"jingyinno"},"content":" */"},{"lineNumber":22,"author":{"gitID":"jingyinno"},"content":"public class VacantCommand extends Command {"},{"lineNumber":23,"author":{"gitID":"jingyinno"},"content":"    public static final String COMMAND_WORD \u003d \"vacant\";"},{"lineNumber":24,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":25,"author":{"gitID":"jingyinno"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds vacant study rooms in a building. \""},{"lineNumber":26,"author":{"gitID":"jingyinno"},"content":"            + \"Parameters: [BUILDING_NAME]\\n\""},{"lineNumber":27,"author":{"gitID":"jingyinno"},"content":"            + \"Example: \" + COMMAND_WORD + \" COM1\";"},{"lineNumber":28,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":29,"author":{"gitID":"jingyinno"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"List of rooms in building successfully retrieved.\";"},{"lineNumber":30,"author":{"gitID":"jingyinno"},"content":"    public static final String MESSAGE_INVALID_BUILDING \u003d"},{"lineNumber":31,"author":{"gitID":"jingyinno"},"content":"            \"Building is not in the list of NUS Buildings given below: \\n\""},{"lineNumber":32,"author":{"gitID":"jingyinno"},"content":"            + Arrays.toString(Building.NUS_BUILDINGS);"},{"lineNumber":33,"author":{"gitID":"jingyinno"},"content":"    public static final String MESSAGE_CORRUPTED_VENUE_INFORMATION_FILE \u003d"},{"lineNumber":34,"author":{"gitID":"jingyinno"},"content":"            \"Unable to read from venueinformation.json, file is corrupted. Please re-download the file.\";"},{"lineNumber":35,"author":{"gitID":"jingyinno"},"content":"    public static final String MESSAGE_NO_ROOMS_IN_BUILDING \u003d \"Building has no rooms available\";"},{"lineNumber":36,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":37,"author":{"gitID":"jingyinno"},"content":"    private final Building building;"},{"lineNumber":38,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":39,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"jingyinno"},"content":"     * Creates a VacantCommand to retrieve all the rooms in a given building"},{"lineNumber":41,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"jingyinno"},"content":"    public VacantCommand(Building building) {"},{"lineNumber":43,"author":{"gitID":"jingyinno"},"content":"        requireNonNull(building);"},{"lineNumber":44,"author":{"gitID":"jingyinno"},"content":"        this.building \u003d building;"},{"lineNumber":45,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":47,"author":{"gitID":"jingyinno"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"jingyinno"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":49,"author":{"gitID":"jingyinno"},"content":"        requireNonNull(model);"},{"lineNumber":50,"author":{"gitID":"jingyinno"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"jingyinno"},"content":"            ArrayList\u003cArrayList\u003cString\u003e\u003e allRoomsSchedule \u003d model.retrieveAllRoomsSchedule(building);"},{"lineNumber":52,"author":{"gitID":"jingyinno"},"content":"            ObservableList\u003cArrayList\u003cString\u003e\u003e schedule \u003d FXCollections.observableArrayList(allRoomsSchedule);"},{"lineNumber":53,"author":{"gitID":"jingyinno"},"content":"            EventsCenter.getInstance().post(new VenueTableEvent(schedule));"},{"lineNumber":54,"author":{"gitID":"jingyinno"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS));"},{"lineNumber":55,"author":{"gitID":"jingyinno"},"content":"        } catch (BuildingNotFoundException e) {"},{"lineNumber":56,"author":{"gitID":"jingyinno"},"content":"            throw new CommandException(MESSAGE_INVALID_BUILDING);"},{"lineNumber":57,"author":{"gitID":"jingyinno"},"content":"        } catch (CorruptedVenueInformationException e) {"},{"lineNumber":58,"author":{"gitID":"jingyinno"},"content":"            throw new CommandException(MESSAGE_CORRUPTED_VENUE_INFORMATION_FILE);"},{"lineNumber":59,"author":{"gitID":"jingyinno"},"content":"        } catch (NoRoomsInBuildingException e) {"},{"lineNumber":60,"author":{"gitID":"jingyinno"},"content":"            throw new CommandException(MESSAGE_NO_ROOMS_IN_BUILDING);"},{"lineNumber":61,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":63,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":65,"author":{"gitID":"jingyinno"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"jingyinno"},"content":"    public boolean equals(Object other) {"},{"lineNumber":67,"author":{"gitID":"jingyinno"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":68,"author":{"gitID":"jingyinno"},"content":"                || (other instanceof VacantCommand // instanceof handles nulls"},{"lineNumber":69,"author":{"gitID":"jingyinno"},"content":"                \u0026\u0026 building.equals(((VacantCommand) other).building));"},{"lineNumber":70,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"jingyinno"},"content":"}"}],"authorContributionMap":{"Caijun7":3,"jingyinno":54,"-":14}},{"path":"src/main/java/seedu/address/logic/commands/AliasCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.exceptions.DuplicateAliasException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"jingyinno"},"content":"//@@author jingyinno"},{"lineNumber":14,"author":{"gitID":"jingyinno"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"jingyinno"},"content":" * Adds an alias-command pair to the address book."},{"lineNumber":16,"author":{"gitID":"jingyinno"},"content":" */"},{"lineNumber":17,"author":{"gitID":"jingyinno"},"content":"public class AliasCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":19,"author":{"gitID":"jingyinno"},"content":"    public static final String COMMAND_WORD \u003d \"alias\";"},{"lineNumber":20,"author":{"gitID":"jingyinno"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows list of alias or creates new alias. \""},{"lineNumber":21,"author":{"gitID":"jingyinno"},"content":"            + \"Parameters for creating new alias: [COMMAND] [NEW_ALIAS] \\n\""},{"lineNumber":22,"author":{"gitID":"jingyinno"},"content":"            + \"Example: \" + COMMAND_WORD + \" add a\";"},{"lineNumber":23,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":24,"author":{"gitID":"jingyinno"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New alias added\";"},{"lineNumber":25,"author":{"gitID":"jingyinno"},"content":"    public static final String MESSAGE_DUPLICATE_ALIAS \u003d \"This alias is already used\";"},{"lineNumber":26,"author":{"gitID":"jingyinno"},"content":"    public static final String MESSAGE_INVALID_ALIAS \u003d \"Invalid alias word! \\n%1$s\";"},{"lineNumber":27,"author":{"gitID":"jingyinno"},"content":"    public static final String MESSAGE_INVALID_ALIAS_DESCRIPTION \u003d \"Alias word is a command word. \\n\""},{"lineNumber":28,"author":{"gitID":"jingyinno"},"content":"            + \"Please choose another alias\";"},{"lineNumber":29,"author":{"gitID":"jingyinno"},"content":"    public static final String MESSAGE_INVALID_COMMAND \u003d \"Invalid command word! \\n%1$s\";"},{"lineNumber":30,"author":{"gitID":"jingyinno"},"content":"    public static final String MESSAGE_INVALID_COMMAND_DESCRIPTION \u003d \"There is no such command to alias to.\";"},{"lineNumber":31,"author":{"gitID":"jingyinno"},"content":"    private static final List\u003cString\u003e commands \u003d Arrays.asList(AddCommand.COMMAND_WORD, EditCommand.COMMAND_WORD,"},{"lineNumber":32,"author":{"gitID":"jingyinno"},"content":"            SelectCommand.COMMAND_WORD, DeleteCommand.COMMAND_WORD, ClearCommand.COMMAND_WORD, FindCommand.COMMAND_WORD,"},{"lineNumber":33,"author":{"gitID":"jingyinno"},"content":"            ListCommand.COMMAND_WORD, HistoryCommand.COMMAND_WORD, ExitCommand.COMMAND_WORD, HelpCommand.COMMAND_WORD,"},{"lineNumber":34,"author":{"gitID":"jingyinno"},"content":"            UndoCommand.COMMAND_WORD, RedoCommand.COMMAND_WORD, AliasCommand.COMMAND_WORD, ImportCommand.COMMAND_WORD,"},{"lineNumber":35,"author":{"gitID":"jingyinno"},"content":"            PasswordCommand.COMMAND_WORD, BirthdaysCommand.COMMAND_WORD, ExportCommand.COMMAND_WORD,"},{"lineNumber":36,"author":{"gitID":"jingyinno"},"content":"            MapCommand.COMMAND_WORD, RemovePasswordCommand.COMMAND_WORD, UnaliasCommand.COMMAND_WORD,"},{"lineNumber":37,"author":{"gitID":"jingyinno"},"content":"            VacantCommand.COMMAND_WORD, TimetableUnionCommand.COMMAND_WORD, UploadCommand.COMMAND_WORD);"},{"lineNumber":38,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":39,"author":{"gitID":"jingyinno"},"content":"    private final Alias toAdd;"},{"lineNumber":40,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":41,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"jingyinno"},"content":"     * Creates an AliasCommand to add the specified {@code Alias}"},{"lineNumber":43,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"jingyinno"},"content":"    public AliasCommand(Alias alias) {"},{"lineNumber":45,"author":{"gitID":"jingyinno"},"content":"        requireNonNull(alias);"},{"lineNumber":46,"author":{"gitID":"jingyinno"},"content":"        toAdd \u003d alias;"},{"lineNumber":47,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":49,"author":{"gitID":"jingyinno"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"jingyinno"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":51,"author":{"gitID":"jingyinno"},"content":"        requireNonNull(model);"},{"lineNumber":52,"author":{"gitID":"jingyinno"},"content":"        checkForValidCommandAndAlias();"},{"lineNumber":53,"author":{"gitID":"jingyinno"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"jingyinno"},"content":"            model.addAlias(toAdd);"},{"lineNumber":55,"author":{"gitID":"jingyinno"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":56,"author":{"gitID":"jingyinno"},"content":"        } catch (DuplicateAliasException e) {"},{"lineNumber":57,"author":{"gitID":"jingyinno"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_ALIAS);"},{"lineNumber":58,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":61,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"jingyinno"},"content":"     * Checks if the command specified is an existent command and the alias specified is not a command word."},{"lineNumber":63,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"jingyinno"},"content":"    private void checkForValidCommandAndAlias() throws CommandException {"},{"lineNumber":65,"author":{"gitID":"jingyinno"},"content":"        if (!commands.contains(toAdd.getCommand())) {"},{"lineNumber":66,"author":{"gitID":"jingyinno"},"content":"            throw new CommandException(String.format(AliasCommand.MESSAGE_INVALID_COMMAND,"},{"lineNumber":67,"author":{"gitID":"jingyinno"},"content":"                            AliasCommand.MESSAGE_INVALID_COMMAND_DESCRIPTION));"},{"lineNumber":68,"author":{"gitID":"jingyinno"},"content":"        } else if (commands.contains(toAdd.getAlias())) {"},{"lineNumber":69,"author":{"gitID":"jingyinno"},"content":"            throw new CommandException(String.format(AliasCommand.MESSAGE_INVALID_ALIAS,"},{"lineNumber":70,"author":{"gitID":"jingyinno"},"content":"                            AliasCommand.MESSAGE_INVALID_ALIAS_DESCRIPTION));"},{"lineNumber":71,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":74,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"jingyinno"},"content":"     * Retrieve all command words sorted in alphabetical order"},{"lineNumber":76,"author":{"gitID":"jingyinno"},"content":"     * @return a list of application\u0027s command words in sorted order"},{"lineNumber":77,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"jingyinno"},"content":"    public static List\u003cString\u003e getCommands() {"},{"lineNumber":79,"author":{"gitID":"jingyinno"},"content":"        Collections.sort(commands);"},{"lineNumber":80,"author":{"gitID":"jingyinno"},"content":"        return commands;"},{"lineNumber":81,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":83,"author":{"gitID":"jingyinno"},"content":"    @Override"},{"lineNumber":84,"author":{"gitID":"jingyinno"},"content":"    public boolean equals(Object other) {"},{"lineNumber":85,"author":{"gitID":"jingyinno"},"content":"        return other \u003d\u003d this"},{"lineNumber":86,"author":{"gitID":"jingyinno"},"content":"                || (other instanceof AliasCommand // instanceof handles nulls"},{"lineNumber":87,"author":{"gitID":"jingyinno"},"content":"                \u0026\u0026 toAdd.equals(((AliasCommand) other).toAdd));"},{"lineNumber":88,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"jingyinno"},"content":"}"}],"authorContributionMap":{"jingyinno":77,"-":12}},{"path":"src/main/java/seedu/address/logic/commands/ExportCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":5,"author":{"gitID":"Caijun7"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.Password;"},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":"//@@author Caijun7"},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"Caijun7"},"content":" * Exports an address book to the existing address book."},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":" */"},{"lineNumber":14,"author":{"gitID":"Caijun7"},"content":"public class ExportCommand extends Command {"},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":"    public static final String COMMAND_WORD \u003d \"export\";"},{"lineNumber":17,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":18,"author":{"gitID":"Caijun7"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exports the current view of StardyTogether \""},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":"            + \"to specified filepath. \""},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":"            + \"Parameters: FILEPATH PASSWORD\\n\""},{"lineNumber":21,"author":{"gitID":"Caijun7"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":22,"author":{"gitID":"Caijun7"},"content":"            + \"data/addressbookbackup.xml \""},{"lineNumber":23,"author":{"gitID":"Caijun7"},"content":"            + \"testpassword\";"},{"lineNumber":24,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":25,"author":{"gitID":"Caijun7"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Current list of Persons, tags, or aliases from \""},{"lineNumber":26,"author":{"gitID":"Caijun7"},"content":"            + \"StardyTogether are successfully exported.\";"},{"lineNumber":27,"author":{"gitID":"Caijun7"},"content":"    public static final String MESSAGE_FILE_UNABLE_TO_SAVE \u003d \"Unable to save or overwrite to given filepath. \""},{"lineNumber":28,"author":{"gitID":"Caijun7"},"content":"            + \"Please give another filepath.\";"},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":30,"author":{"gitID":"Caijun7"},"content":"    private final String filepath;"},{"lineNumber":31,"author":{"gitID":"Caijun7"},"content":"    private final Password password;"},{"lineNumber":32,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":33,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"Caijun7"},"content":"     * Creates an ExportCommand to export the current view of {@code AddressBook} to the filepath without a password"},{"lineNumber":35,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"Caijun7"},"content":"    public ExportCommand(String filepath) {"},{"lineNumber":37,"author":{"gitID":"Caijun7"},"content":"        requireNonNull(filepath);"},{"lineNumber":38,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":39,"author":{"gitID":"Caijun7"},"content":"        this.filepath \u003d filepath;"},{"lineNumber":40,"author":{"gitID":"Caijun7"},"content":"        password \u003d null;"},{"lineNumber":41,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":43,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"Caijun7"},"content":"     * Creates an ExportCommand to export the current view of {@code AddressBook} to the filepath with a password"},{"lineNumber":45,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"Caijun7"},"content":"    public ExportCommand(String filepath, String password) {"},{"lineNumber":47,"author":{"gitID":"Caijun7"},"content":"        requireNonNull(filepath);"},{"lineNumber":48,"author":{"gitID":"Caijun7"},"content":"        requireNonNull(password);"},{"lineNumber":49,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":50,"author":{"gitID":"Caijun7"},"content":"        this.filepath \u003d filepath;"},{"lineNumber":51,"author":{"gitID":"Caijun7"},"content":"        this.password \u003d new Password(password);"},{"lineNumber":52,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":54,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"Caijun7"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":56,"author":{"gitID":"Caijun7"},"content":"        requireNonNull(model);"},{"lineNumber":57,"author":{"gitID":"Caijun7"},"content":"        try {"},{"lineNumber":58,"author":{"gitID":"Caijun7"},"content":"            model.exportAddressBook(filepath, password);"},{"lineNumber":59,"author":{"gitID":"Caijun7"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS));"},{"lineNumber":60,"author":{"gitID":"Caijun7"},"content":"        } catch (IOException ioe) {"},{"lineNumber":61,"author":{"gitID":"Caijun7"},"content":"            throw new CommandException(MESSAGE_FILE_UNABLE_TO_SAVE);"},{"lineNumber":62,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":65,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"Caijun7"},"content":"    public boolean equals(Object other) {"},{"lineNumber":67,"author":{"gitID":"Caijun7"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":68,"author":{"gitID":"Caijun7"},"content":"                || (other instanceof ExportCommand // instanceof handles nulls"},{"lineNumber":69,"author":{"gitID":"Caijun7"},"content":"                \u0026\u0026 filepath.equals(((ExportCommand) other).filepath));"},{"lineNumber":70,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":67,"-":4}},{"path":"src/main/java/seedu/address/logic/commands/UnaliasCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.exceptions.AliasNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"jingyinno"},"content":"//@@author jingyinno"},{"lineNumber":9,"author":{"gitID":"jingyinno"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"jingyinno"},"content":" * Removes an alias pair from the address book."},{"lineNumber":11,"author":{"gitID":"jingyinno"},"content":" */"},{"lineNumber":12,"author":{"gitID":"jingyinno"},"content":"public class UnaliasCommand extends UndoableCommand {"},{"lineNumber":13,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":14,"author":{"gitID":"jingyinno"},"content":"    public static final String COMMAND_WORD \u003d \"unalias\";"},{"lineNumber":15,"author":{"gitID":"jingyinno"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Removes the alias of a previously aliased command. \""},{"lineNumber":16,"author":{"gitID":"jingyinno"},"content":"            + \"Parameters: [CURRENT_ALIAS]\\n\""},{"lineNumber":17,"author":{"gitID":"jingyinno"},"content":"            + \"Example: \" + COMMAND_WORD + \" a\";"},{"lineNumber":18,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":19,"author":{"gitID":"jingyinno"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Alias has been removed!\";"},{"lineNumber":20,"author":{"gitID":"jingyinno"},"content":"    public static final String MESSAGE_UNKNOWN_UNALIAS \u003d \"This alias does not exist.\";"},{"lineNumber":21,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":22,"author":{"gitID":"jingyinno"},"content":"    private final String toRemove;"},{"lineNumber":23,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":24,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"jingyinno"},"content":"     * Creates an UnaliasCommand to add the specified {@code Alias}"},{"lineNumber":26,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"jingyinno"},"content":"    public UnaliasCommand(String unalias) {"},{"lineNumber":28,"author":{"gitID":"jingyinno"},"content":"        requireNonNull(unalias);"},{"lineNumber":29,"author":{"gitID":"jingyinno"},"content":"        toRemove \u003d unalias;"},{"lineNumber":30,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":32,"author":{"gitID":"jingyinno"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"jingyinno"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":34,"author":{"gitID":"jingyinno"},"content":"        requireNonNull(model);"},{"lineNumber":35,"author":{"gitID":"jingyinno"},"content":"        try {"},{"lineNumber":36,"author":{"gitID":"jingyinno"},"content":"            model.removeAlias(toRemove);"},{"lineNumber":37,"author":{"gitID":"jingyinno"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toRemove));"},{"lineNumber":38,"author":{"gitID":"jingyinno"},"content":"        } catch (AliasNotFoundException e) {"},{"lineNumber":39,"author":{"gitID":"jingyinno"},"content":"            throw new CommandException(MESSAGE_UNKNOWN_UNALIAS);"},{"lineNumber":40,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":42,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":44,"author":{"gitID":"jingyinno"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"jingyinno"},"content":"    public boolean equals(Object other) {"},{"lineNumber":46,"author":{"gitID":"jingyinno"},"content":"        return other \u003d\u003d (this)"},{"lineNumber":47,"author":{"gitID":"jingyinno"},"content":"                || (other instanceof UnaliasCommand // instanceof handles nulls"},{"lineNumber":48,"author":{"gitID":"jingyinno"},"content":"                \u0026\u0026 toRemove.equals(((UnaliasCommand) other).toRemove));"},{"lineNumber":49,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"jingyinno"},"content":"}"}],"authorContributionMap":{"jingyinno":43,"-":7}},{"path":"src/main/java/seedu/address/logic/commands/BirthdaysCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Comparator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.BirthdayListEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.BirthdayNotificationEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"AzuraAiR"},"content":"//@@author AzuraAiR"},{"lineNumber":17,"author":{"gitID":"AzuraAiR"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"AzuraAiR"},"content":" * Shows either the birthday list or notification of Persons in StardyTogether"},{"lineNumber":19,"author":{"gitID":"AzuraAiR"},"content":" */"},{"lineNumber":20,"author":{"gitID":"AzuraAiR"},"content":"public class BirthdaysCommand extends Command {"},{"lineNumber":21,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":22,"author":{"gitID":"AzuraAiR"},"content":"    public static final String COMMAND_WORD \u003d \"birthdays\";"},{"lineNumber":23,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":24,"author":{"gitID":"AzuraAiR"},"content":"    public static final String ADDITIONAL_COMMAND_PARAMETER \u003d \"today\";"},{"lineNumber":25,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":26,"author":{"gitID":"AzuraAiR"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows a list containing all persons\u0027 birthdays. \""},{"lineNumber":27,"author":{"gitID":"AzuraAiR"},"content":"            + \"Or display a list of birthdays today\""},{"lineNumber":28,"author":{"gitID":"AzuraAiR"},"content":"            + \"Optional Parameters: \""},{"lineNumber":29,"author":{"gitID":"AzuraAiR"},"content":"            + ADDITIONAL_COMMAND_PARAMETER"},{"lineNumber":30,"author":{"gitID":"AzuraAiR"},"content":"            + \"Example: \" + COMMAND_WORD + \", \" + COMMAND_WORD + \" \" + ADDITIONAL_COMMAND_PARAMETER;"},{"lineNumber":31,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":32,"author":{"gitID":"AzuraAiR"},"content":"    public static final String SHOWING_BIRTHDAY_MESSAGE \u003d \"Displaying birthday list\";"},{"lineNumber":33,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":34,"author":{"gitID":"AzuraAiR"},"content":"    public static final String SHOWING_BIRTHDAY_NOTIFICATION \u003d \"Displaying today\u0027s birthdays\";"},{"lineNumber":35,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":36,"author":{"gitID":"AzuraAiR"},"content":"    public static final String MESSAGE_NO_BIRTHDAY_TODAY \u003d \"No one is celebrating their birthdays today\";"},{"lineNumber":37,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":38,"author":{"gitID":"AzuraAiR"},"content":"    private boolean isToday;"},{"lineNumber":39,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":40,"author":{"gitID":"AzuraAiR"},"content":"    public BirthdaysCommand(boolean todays) {"},{"lineNumber":41,"author":{"gitID":"AzuraAiR"},"content":"        requireNonNull(todays);"},{"lineNumber":42,"author":{"gitID":"AzuraAiR"},"content":"        this.isToday \u003d todays;"},{"lineNumber":43,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":45,"author":{"gitID":"AzuraAiR"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"AzuraAiR"},"content":"    public boolean equals(Object other) {"},{"lineNumber":47,"author":{"gitID":"AzuraAiR"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":48,"author":{"gitID":"AzuraAiR"},"content":"                || (other instanceof BirthdaysCommand // instanceof handles nulls"},{"lineNumber":49,"author":{"gitID":"AzuraAiR"},"content":"                \u0026\u0026 isToday \u003d\u003d ((BirthdaysCommand) other).isToday);"},{"lineNumber":50,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":52,"author":{"gitID":"AzuraAiR"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"AzuraAiR"},"content":"    public CommandResult execute() {"},{"lineNumber":54,"author":{"gitID":"AzuraAiR"},"content":"        requireNonNull(model);"},{"lineNumber":55,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":56,"author":{"gitID":"AzuraAiR"},"content":"        if (isToday) {"},{"lineNumber":57,"author":{"gitID":"AzuraAiR"},"content":"            LocalDate currentDate \u003d LocalDate.now();"},{"lineNumber":58,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":59,"author":{"gitID":"AzuraAiR"},"content":"            EventsCenter.getInstance().post(new BirthdayNotificationEvent(parseBirthdaysForNotification("},{"lineNumber":60,"author":{"gitID":"AzuraAiR"},"content":"                    model.getAddressBook().getPersonList(), currentDate), currentDate));"},{"lineNumber":61,"author":{"gitID":"AzuraAiR"},"content":"            return new CommandResult(SHOWING_BIRTHDAY_NOTIFICATION);"},{"lineNumber":62,"author":{"gitID":"AzuraAiR"},"content":"        } else {"},{"lineNumber":63,"author":{"gitID":"AzuraAiR"},"content":"            EventsCenter.getInstance().post(new BirthdayListEvent(parseBirthdaysForList("},{"lineNumber":64,"author":{"gitID":"AzuraAiR"},"content":"                    model.getAddressBook().getPersonList())));"},{"lineNumber":65,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":67,"author":{"gitID":"AzuraAiR"},"content":"        return new CommandResult(SHOWING_BIRTHDAY_MESSAGE);"},{"lineNumber":68,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":70,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"AzuraAiR"},"content":"     * Parses the given list into their respective birthdays into a sorted string"},{"lineNumber":72,"author":{"gitID":"AzuraAiR"},"content":"     * @param observablelist given list of current addressBook"},{"lineNumber":73,"author":{"gitID":"AzuraAiR"},"content":"     * @return String to be displayed"},{"lineNumber":74,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"AzuraAiR"},"content":"    public static String parseBirthdaysForList(ObservableList\u003cPerson\u003e observablelist) {"},{"lineNumber":76,"author":{"gitID":"AzuraAiR"},"content":"        StringBuilder string \u003d new StringBuilder();"},{"lineNumber":77,"author":{"gitID":"AzuraAiR"},"content":"        List\u003cPerson\u003e list \u003d new ArrayList\u003cPerson\u003e();"},{"lineNumber":78,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":79,"author":{"gitID":"AzuraAiR"},"content":"        if (observablelist \u003d\u003d null) {"},{"lineNumber":80,"author":{"gitID":"AzuraAiR"},"content":"            return \"\";"},{"lineNumber":81,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":83,"author":{"gitID":"AzuraAiR"},"content":"        for (Person person: observablelist) {"},{"lineNumber":84,"author":{"gitID":"AzuraAiR"},"content":"            list.add(person);"},{"lineNumber":85,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":87,"author":{"gitID":"AzuraAiR"},"content":"        list.sort(new Comparator\u003cPerson\u003e() {"},{"lineNumber":88,"author":{"gitID":"AzuraAiR"},"content":"            @Override"},{"lineNumber":89,"author":{"gitID":"AzuraAiR"},"content":"            public int compare(Person o1, Person o2) {"},{"lineNumber":90,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":91,"author":{"gitID":"AzuraAiR"},"content":"                int o1Days \u003d o1.getBirthday().getDay();"},{"lineNumber":92,"author":{"gitID":"AzuraAiR"},"content":"                int o1Month \u003d o1.getBirthday().getMonth();"},{"lineNumber":93,"author":{"gitID":"AzuraAiR"},"content":"                int o2Days \u003d o2.getBirthday().getDay();"},{"lineNumber":94,"author":{"gitID":"AzuraAiR"},"content":"                int o2Month \u003d o2.getBirthday().getMonth();"},{"lineNumber":95,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":96,"author":{"gitID":"AzuraAiR"},"content":"                if (o1Month !\u003d o2Month) {"},{"lineNumber":97,"author":{"gitID":"AzuraAiR"},"content":"                    return o1Month - o2Month;"},{"lineNumber":98,"author":{"gitID":"AzuraAiR"},"content":"                }"},{"lineNumber":99,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":100,"author":{"gitID":"AzuraAiR"},"content":"                return o1Days - o2Days;"},{"lineNumber":101,"author":{"gitID":"AzuraAiR"},"content":"            }"},{"lineNumber":102,"author":{"gitID":"AzuraAiR"},"content":"        });"},{"lineNumber":103,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":104,"author":{"gitID":"AzuraAiR"},"content":"        for (Person person: list) {"},{"lineNumber":105,"author":{"gitID":"AzuraAiR"},"content":"            string.append(person.getBirthday().getDay());"},{"lineNumber":106,"author":{"gitID":"AzuraAiR"},"content":"            string.append(\"/\");"},{"lineNumber":107,"author":{"gitID":"AzuraAiR"},"content":"            string.append(person.getBirthday().getMonth());"},{"lineNumber":108,"author":{"gitID":"AzuraAiR"},"content":"            string.append(\"/\");"},{"lineNumber":109,"author":{"gitID":"AzuraAiR"},"content":"            string.append(person.getBirthday().getYear());"},{"lineNumber":110,"author":{"gitID":"AzuraAiR"},"content":"            string.append(\" \");"},{"lineNumber":111,"author":{"gitID":"AzuraAiR"},"content":"            string.append(person.getName().toString());"},{"lineNumber":112,"author":{"gitID":"AzuraAiR"},"content":"            string.append(\"\\n\");"},{"lineNumber":113,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":115,"author":{"gitID":"AzuraAiR"},"content":"        return string.toString();"},{"lineNumber":116,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":118,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"AzuraAiR"},"content":"     * Parses the given list into their respective birthdays into a sorted string"},{"lineNumber":120,"author":{"gitID":"AzuraAiR"},"content":"     * @param observablelist given list of current addressBook"},{"lineNumber":121,"author":{"gitID":"AzuraAiR"},"content":"     * @return String to be displayed"},{"lineNumber":122,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"AzuraAiR"},"content":"    public static String parseBirthdaysForNotification(ObservableList\u003cPerson\u003e observablelist, LocalDate currentDate) {"},{"lineNumber":124,"author":{"gitID":"AzuraAiR"},"content":"        StringBuilder string \u003d new StringBuilder();"},{"lineNumber":125,"author":{"gitID":"AzuraAiR"},"content":"        List\u003cPerson\u003e listOfPersonWithBirthdayToday \u003d new ArrayList\u003cPerson\u003e();"},{"lineNumber":126,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":127,"author":{"gitID":"AzuraAiR"},"content":"        int currentDay \u003d currentDate.getDayOfMonth();"},{"lineNumber":128,"author":{"gitID":"AzuraAiR"},"content":"        int currentMonth \u003d currentDate.getMonthValue();"},{"lineNumber":129,"author":{"gitID":"AzuraAiR"},"content":"        int currentYear \u003d currentDate.getYear();"},{"lineNumber":130,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":131,"author":{"gitID":"AzuraAiR"},"content":"        if (observablelist \u003d\u003d null) {"},{"lineNumber":132,"author":{"gitID":"AzuraAiR"},"content":"            return \" \";"},{"lineNumber":133,"author":{"gitID":"AzuraAiR"},"content":"        } else if (observablelist.size() \u003c\u003d 0) {"},{"lineNumber":134,"author":{"gitID":"AzuraAiR"},"content":"            string.append(\"StardyTogether has no contacts :(\\n\");"},{"lineNumber":135,"author":{"gitID":"AzuraAiR"},"content":"            return string.toString();"},{"lineNumber":136,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":138,"author":{"gitID":"AzuraAiR"},"content":"        for (Person person: observablelist) {"},{"lineNumber":139,"author":{"gitID":"AzuraAiR"},"content":"            if (person.getBirthday().getDay() \u003d\u003d currentDay"},{"lineNumber":140,"author":{"gitID":"AzuraAiR"},"content":"                    \u0026\u0026 person.getBirthday().getMonth() \u003d\u003d currentMonth) {"},{"lineNumber":141,"author":{"gitID":"AzuraAiR"},"content":"                listOfPersonWithBirthdayToday.add(person);"},{"lineNumber":142,"author":{"gitID":"AzuraAiR"},"content":"            }"},{"lineNumber":143,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":145,"author":{"gitID":"AzuraAiR"},"content":"        if (listOfPersonWithBirthdayToday.size() \u003d\u003d 0) {"},{"lineNumber":146,"author":{"gitID":"AzuraAiR"},"content":"            return MESSAGE_NO_BIRTHDAY_TODAY;"},{"lineNumber":147,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":149,"author":{"gitID":"AzuraAiR"},"content":"        for (Person person: listOfPersonWithBirthdayToday) {"},{"lineNumber":150,"author":{"gitID":"AzuraAiR"},"content":"            int age;"},{"lineNumber":151,"author":{"gitID":"AzuraAiR"},"content":"            age \u003d currentYear - person.getBirthday().getYear();"},{"lineNumber":152,"author":{"gitID":"AzuraAiR"},"content":"            string.append(person.getName().toString());"},{"lineNumber":153,"author":{"gitID":"AzuraAiR"},"content":"            string.append(\" (\");"},{"lineNumber":154,"author":{"gitID":"AzuraAiR"},"content":"            string.append(age);"},{"lineNumber":155,"author":{"gitID":"AzuraAiR"},"content":"            if (age !\u003d 1) {"},{"lineNumber":156,"author":{"gitID":"AzuraAiR"},"content":"                string.append(\" years old)\");"},{"lineNumber":157,"author":{"gitID":"AzuraAiR"},"content":"            } else if (age \u003e 0) {"},{"lineNumber":158,"author":{"gitID":"AzuraAiR"},"content":"                string.append(\" years old)\");"},{"lineNumber":159,"author":{"gitID":"AzuraAiR"},"content":"            }"},{"lineNumber":160,"author":{"gitID":"AzuraAiR"},"content":"            string.append(\"\\n\");"},{"lineNumber":161,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":163,"author":{"gitID":"AzuraAiR"},"content":"        return string.toString();"},{"lineNumber":164,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"AzuraAiR"},"content":"}"}],"authorContributionMap":{"AzuraAiR":150,"-":15}},{"path":"src/main/java/seedu/address/logic/commands/PasswordCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.SecurityUtil;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"yeggasd"},"content":"//@@author yeggasd"},{"lineNumber":8,"author":{"gitID":"yeggasd"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"yeggasd"},"content":" * Adds a password to the address book."},{"lineNumber":10,"author":{"gitID":"yeggasd"},"content":" */"},{"lineNumber":11,"author":{"gitID":"yeggasd"},"content":"public class PasswordCommand extends Command {"},{"lineNumber":12,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":13,"author":{"gitID":"yeggasd"},"content":"    public static final String COMMAND_WORD \u003d \"encrypt\";"},{"lineNumber":14,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":15,"author":{"gitID":"yeggasd"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Encrypts the data with the password provided. \""},{"lineNumber":16,"author":{"gitID":"yeggasd"},"content":"            + \"Parameters: encrypt PASSWORD\""},{"lineNumber":17,"author":{"gitID":"yeggasd"},"content":"            + \"Example: \" + COMMAND_WORD + \"test\";"},{"lineNumber":18,"author":{"gitID":"yeggasd"},"content":"    public static final String INVALID_PASSWORD \u003d \"Password cannot be blank!\";"},{"lineNumber":19,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":20,"author":{"gitID":"yeggasd"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Password updated.\";"},{"lineNumber":21,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":22,"author":{"gitID":"yeggasd"},"content":"    private String password;"},{"lineNumber":23,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"yeggasd"},"content":"     * Creates an PasswordCommand to add the specified password"},{"lineNumber":25,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"yeggasd"},"content":"    public PasswordCommand(String password) {"},{"lineNumber":27,"author":{"gitID":"yeggasd"},"content":"        requireNonNull(password);"},{"lineNumber":28,"author":{"gitID":"yeggasd"},"content":"        this.password \u003d password;"},{"lineNumber":29,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":31,"author":{"gitID":"yeggasd"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"yeggasd"},"content":"    public CommandResult execute() {"},{"lineNumber":33,"author":{"gitID":"yeggasd"},"content":"        requireNonNull(model);"},{"lineNumber":34,"author":{"gitID":"yeggasd"},"content":"        byte[] hashedPassword \u003d SecurityUtil.hashPassword(password);"},{"lineNumber":35,"author":{"gitID":"yeggasd"},"content":"        model.updatePassword(hashedPassword);"},{"lineNumber":36,"author":{"gitID":"yeggasd"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS));"},{"lineNumber":37,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":39,"author":{"gitID":"yeggasd"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"yeggasd"},"content":"    public boolean equals(Object other) {"},{"lineNumber":41,"author":{"gitID":"yeggasd"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":42,"author":{"gitID":"yeggasd"},"content":"                || (other instanceof PasswordCommand // instanceof handles nulls"},{"lineNumber":43,"author":{"gitID":"yeggasd"},"content":"                \u0026\u0026 password.equals(((PasswordCommand) other).password));"},{"lineNumber":44,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"yeggasd"},"content":"}"}],"authorContributionMap":{"yeggasd":39,"-":6}},{"path":"src/main/java/seedu/address/logic/commands/TimetableUnionCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"Caijun7"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.TimeTableEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.timetable.Timetable;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"AzuraAiR"},"content":"//@@author AzuraAiR"},{"lineNumber":21,"author":{"gitID":"AzuraAiR"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"AzuraAiR"},"content":" * Retrieves the unified timetable of the persons identified using it\u0027s last displayed index from StardyTogether"},{"lineNumber":23,"author":{"gitID":"AzuraAiR"},"content":" */"},{"lineNumber":24,"author":{"gitID":"AzuraAiR"},"content":"public class TimetableUnionCommand extends Command {"},{"lineNumber":25,"author":{"gitID":"AzuraAiR"},"content":"    public static final String COMMAND_WORD \u003d \"union\";"},{"lineNumber":26,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":27,"author":{"gitID":"AzuraAiR"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows the unified timetable of the persons entered\\n\""},{"lineNumber":28,"author":{"gitID":"AzuraAiR"},"content":"            + \"Parameters: INDEX ODD/EVEN INDEX1 INDEX2 [INDEX3]...\""},{"lineNumber":29,"author":{"gitID":"AzuraAiR"},"content":"            + \"(There must be a minimum number of 2 indexes, \""},{"lineNumber":30,"author":{"gitID":"AzuraAiR"},"content":"            + \"which must be unique positive integers and separated by one space)\\n\""},{"lineNumber":31,"author":{"gitID":"AzuraAiR"},"content":"            + \"Example: \" + COMMAND_WORD + \"Odd \" + \"1 \" + \"2 \" + \"3\";"},{"lineNumber":32,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":33,"author":{"gitID":"AzuraAiR"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"%1$s Combined Timetable: %2$s\";"},{"lineNumber":34,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":35,"author":{"gitID":"AzuraAiR"},"content":"    private final ArrayList\u003cIndex\u003e targetIndexes;"},{"lineNumber":36,"author":{"gitID":"AzuraAiR"},"content":"    private final String oddEven;"},{"lineNumber":37,"author":{"gitID":"AzuraAiR"},"content":"    private ArrayList\u003cPerson\u003e personsToShow;"},{"lineNumber":38,"author":{"gitID":"AzuraAiR"},"content":"    private ArrayList\u003cTimetable\u003e timetablesToShow;"},{"lineNumber":39,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":40,"author":{"gitID":"AzuraAiR"},"content":"    public TimetableUnionCommand(ArrayList\u003cIndex\u003e targetIndexes, String oddEven) {"},{"lineNumber":41,"author":{"gitID":"AzuraAiR"},"content":"        requireNonNull(targetIndexes);"},{"lineNumber":42,"author":{"gitID":"AzuraAiR"},"content":"        requireNonNull(oddEven);"},{"lineNumber":43,"author":{"gitID":"AzuraAiR"},"content":"        this.targetIndexes \u003d targetIndexes;"},{"lineNumber":44,"author":{"gitID":"AzuraAiR"},"content":"        this.oddEven \u003d oddEven;"},{"lineNumber":45,"author":{"gitID":"AzuraAiR"},"content":"        personsToShow \u003d new ArrayList\u003cPerson\u003e();"},{"lineNumber":46,"author":{"gitID":"AzuraAiR"},"content":"        timetablesToShow \u003d new ArrayList\u003cTimetable\u003e();"},{"lineNumber":47,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":49,"author":{"gitID":"AzuraAiR"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"AzuraAiR"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":51,"author":{"gitID":"AzuraAiR"},"content":"        requireNonNull(model);"},{"lineNumber":52,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":53,"author":{"gitID":"AzuraAiR"},"content":"        preprocess();"},{"lineNumber":54,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":55,"author":{"gitID":"AzuraAiR"},"content":"        int oddEvenIndex \u003d StringUtil.getOddEven(oddEven).getZeroBased();"},{"lineNumber":56,"author":{"gitID":"AzuraAiR"},"content":"        ArrayList\u003cArrayList\u003cString\u003e\u003e commonTimeTable \u003d Timetable.unionTimetable(timetablesToShow).get(oddEvenIndex);"},{"lineNumber":57,"author":{"gitID":"AzuraAiR"},"content":"        ObservableList\u003cArrayList\u003cString\u003e\u003e timeTableList \u003d FXCollections.observableArrayList(commonTimeTable);"},{"lineNumber":58,"author":{"gitID":"AzuraAiR"},"content":"        EventsCenter.getInstance().post(new TimeTableEvent(timeTableList));"},{"lineNumber":59,"author":{"gitID":"AzuraAiR"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, StringUtil.capitalize(oddEven),"},{"lineNumber":60,"author":{"gitID":"AzuraAiR"},"content":"                printNames()));"},{"lineNumber":61,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":63,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"AzuraAiR"},"content":"     * Preprocess the required data for execution."},{"lineNumber":65,"author":{"gitID":"AzuraAiR"},"content":"     * @throws CommandException when index out of bound"},{"lineNumber":66,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"AzuraAiR"},"content":"    protected void preprocess() throws CommandException {"},{"lineNumber":68,"author":{"gitID":"AzuraAiR"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":69,"author":{"gitID":"AzuraAiR"},"content":"        for (Index targetIndex : targetIndexes) {"},{"lineNumber":70,"author":{"gitID":"AzuraAiR"},"content":"            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":71,"author":{"gitID":"AzuraAiR"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":72,"author":{"gitID":"AzuraAiR"},"content":"            }"},{"lineNumber":73,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":75,"author":{"gitID":"AzuraAiR"},"content":"        for (Index targetIndex : targetIndexes) {"},{"lineNumber":76,"author":{"gitID":"AzuraAiR"},"content":"            personsToShow.add(lastShownList.get(targetIndex.getZeroBased()));"},{"lineNumber":77,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":79,"author":{"gitID":"AzuraAiR"},"content":"        for (Person person : personsToShow) {"},{"lineNumber":80,"author":{"gitID":"AzuraAiR"},"content":"            timetablesToShow.add(person.getTimetable());"},{"lineNumber":81,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":83,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":85,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"AzuraAiR"},"content":"     * Prints the names in personsToShow"},{"lineNumber":87,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"AzuraAiR"},"content":"    protected String printNames() {"},{"lineNumber":89,"author":{"gitID":"AzuraAiR"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":90,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":91,"author":{"gitID":"AzuraAiR"},"content":"        for (int i \u003d 0; i \u003c personsToShow.size(); i++) {"},{"lineNumber":92,"author":{"gitID":"AzuraAiR"},"content":"            sb.append(personsToShow.get(i).getName());"},{"lineNumber":93,"author":{"gitID":"AzuraAiR"},"content":"            if (i !\u003d personsToShow.size() - 1) {"},{"lineNumber":94,"author":{"gitID":"AzuraAiR"},"content":"                sb.append(\", \");"},{"lineNumber":95,"author":{"gitID":"AzuraAiR"},"content":"            }"},{"lineNumber":96,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":98,"author":{"gitID":"AzuraAiR"},"content":"        sb.append(\"\\n\");"},{"lineNumber":99,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":100,"author":{"gitID":"AzuraAiR"},"content":"        return sb.toString();"},{"lineNumber":101,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":103,"author":{"gitID":"AzuraAiR"},"content":"    @Override"},{"lineNumber":104,"author":{"gitID":"AzuraAiR"},"content":"    public boolean equals(Object other) {"},{"lineNumber":105,"author":{"gitID":"AzuraAiR"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":106,"author":{"gitID":"AzuraAiR"},"content":"                || (other instanceof TimetableUnionCommand // instanceof handles nulls"},{"lineNumber":107,"author":{"gitID":"AzuraAiR"},"content":"                \u0026\u0026 this.targetIndexes.equals(((TimetableUnionCommand) other).targetIndexes) // state check"},{"lineNumber":108,"author":{"gitID":"AzuraAiR"},"content":"                \u0026\u0026 this.oddEven.equals(((TimetableUnionCommand) other).oddEven)"},{"lineNumber":109,"author":{"gitID":"AzuraAiR"},"content":"                \u0026\u0026 Objects.equals(this.personsToShow, ((TimetableUnionCommand) other).personsToShow));"},{"lineNumber":110,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":111,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":113,"author":{"gitID":"AzuraAiR"},"content":"    @Override"},{"lineNumber":114,"author":{"gitID":"AzuraAiR"},"content":"    public String toString() {"},{"lineNumber":115,"author":{"gitID":"AzuraAiR"},"content":"        return targetIndexes.toString() + \" \" + oddEven + \" \" + personsToShow;"},{"lineNumber":116,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"AzuraAiR"},"content":"}"}],"authorContributionMap":{"Caijun7":1,"AzuraAiR":98,"-":18}},{"path":"src/main/java/seedu/address/logic/commands/ImportCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":5,"author":{"gitID":"Caijun7"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.WrongPasswordException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.SecurityUtil;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":12,"author":{"gitID":"Caijun7"},"content":"//@@author Caijun7"},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"Caijun7"},"content":" * Imports an address book to the existing address book."},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":" */"},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":"public class ImportCommand extends UndoableCommand {"},{"lineNumber":17,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":18,"author":{"gitID":"Caijun7"},"content":"    public static final String COMMAND_WORD \u003d \"import\";"},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Imports a StardyTogether addressbook \""},{"lineNumber":21,"author":{"gitID":"Caijun7"},"content":"            + \"from filepath to the existing address book. \""},{"lineNumber":22,"author":{"gitID":"Caijun7"},"content":"            + \"Parameters: FILEPATH PASSWORD\\n\""},{"lineNumber":23,"author":{"gitID":"Caijun7"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":24,"author":{"gitID":"Caijun7"},"content":"            + \"data/addressbook.xml \""},{"lineNumber":25,"author":{"gitID":"Caijun7"},"content":"            + \"testpassword\";"},{"lineNumber":26,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":27,"author":{"gitID":"Caijun7"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Persons, tags, and aliases from \""},{"lineNumber":28,"author":{"gitID":"Caijun7"},"content":"            + \"StardyTogether file successfully imported.\";"},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":"    public static final String MESSAGE_FILE_NOT_FOUND \u003d \"StardyTogether file is not found.\";"},{"lineNumber":30,"author":{"gitID":"Caijun7"},"content":"    public static final String MESSAGE_DATA_CONVERSION_ERROR \u003d \"StardyTogether file found is not in correct \""},{"lineNumber":31,"author":{"gitID":"Caijun7"},"content":"            + \"format or wrong password.\";"},{"lineNumber":32,"author":{"gitID":"Caijun7"},"content":"    public static final String MESSAGE_PASSWORD_WRONG \u003d \"Password wrong for StardyTogether file.\";"},{"lineNumber":33,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":34,"author":{"gitID":"Caijun7"},"content":"    private final String filepath;"},{"lineNumber":35,"author":{"gitID":"Caijun7"},"content":"    private final byte[] password;"},{"lineNumber":36,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":37,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"Caijun7"},"content":"     * Creates an ImportCommand to import the specified {@code AddressBook} from filepath to"},{"lineNumber":39,"author":{"gitID":"Caijun7"},"content":"     * current {@code AddressBook} and decrypt without password"},{"lineNumber":40,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"Caijun7"},"content":"    public ImportCommand(String filepath) {"},{"lineNumber":42,"author":{"gitID":"Caijun7"},"content":"        requireNonNull(filepath);"},{"lineNumber":43,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":44,"author":{"gitID":"Caijun7"},"content":"        this.filepath \u003d filepath;"},{"lineNumber":45,"author":{"gitID":"Caijun7"},"content":"        password \u003d null;"},{"lineNumber":46,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":48,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"Caijun7"},"content":"     * Creates an ImportCommand to import the specified {@code AddressBook} from filepath to"},{"lineNumber":50,"author":{"gitID":"Caijun7"},"content":"     * current {@code AddressBook} and decrypt with password"},{"lineNumber":51,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"Caijun7"},"content":"    public ImportCommand(String filepath, String password) {"},{"lineNumber":53,"author":{"gitID":"Caijun7"},"content":"        requireNonNull(filepath);"},{"lineNumber":54,"author":{"gitID":"Caijun7"},"content":"        requireNonNull(password);"},{"lineNumber":55,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":56,"author":{"gitID":"Caijun7"},"content":"        this.filepath \u003d filepath;"},{"lineNumber":57,"author":{"gitID":"Caijun7"},"content":"        this.password \u003d SecurityUtil.hashPassword(password);"},{"lineNumber":58,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":60,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"Caijun7"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":62,"author":{"gitID":"Caijun7"},"content":"        requireNonNull(model);"},{"lineNumber":63,"author":{"gitID":"Caijun7"},"content":"        try {"},{"lineNumber":64,"author":{"gitID":"Caijun7"},"content":"            model.importAddressBook(filepath, password);"},{"lineNumber":65,"author":{"gitID":"Caijun7"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS));"},{"lineNumber":66,"author":{"gitID":"Caijun7"},"content":"        } catch (WrongPasswordException wpe) {"},{"lineNumber":67,"author":{"gitID":"Caijun7"},"content":"            throw new CommandException(MESSAGE_PASSWORD_WRONG);"},{"lineNumber":68,"author":{"gitID":"Caijun7"},"content":"        } catch (DataConversionException dce) {"},{"lineNumber":69,"author":{"gitID":"Caijun7"},"content":"            throw new CommandException(MESSAGE_DATA_CONVERSION_ERROR);"},{"lineNumber":70,"author":{"gitID":"Caijun7"},"content":"        } catch (IOException ioe) {"},{"lineNumber":71,"author":{"gitID":"Caijun7"},"content":"            throw new CommandException(MESSAGE_FILE_NOT_FOUND);"},{"lineNumber":72,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":75,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"Caijun7"},"content":"    public boolean equals(Object other) {"},{"lineNumber":77,"author":{"gitID":"Caijun7"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":78,"author":{"gitID":"Caijun7"},"content":"                || (other instanceof ImportCommand // instanceof handles nulls"},{"lineNumber":79,"author":{"gitID":"Caijun7"},"content":"                \u0026\u0026 filepath.equals(((ImportCommand) other).filepath));"},{"lineNumber":80,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":74,"-":7}},{"path":"src/main/java/seedu/address/logic/commands/RemovePasswordCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"yeggasd"},"content":"//@@author yeggasd"},{"lineNumber":6,"author":{"gitID":"yeggasd"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"yeggasd"},"content":" * Removes password from the address book."},{"lineNumber":8,"author":{"gitID":"yeggasd"},"content":" */"},{"lineNumber":9,"author":{"gitID":"yeggasd"},"content":"public class RemovePasswordCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":11,"author":{"gitID":"yeggasd"},"content":"    public static final String COMMAND_WORD \u003d \"decrypt\";"},{"lineNumber":12,"author":{"gitID":"yeggasd"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Password removed and data decrypted.\";"},{"lineNumber":13,"author":{"gitID":"yeggasd"},"content":"    @Override"},{"lineNumber":14,"author":{"gitID":"yeggasd"},"content":"    public CommandResult execute() {"},{"lineNumber":15,"author":{"gitID":"yeggasd"},"content":"        requireNonNull(model);"},{"lineNumber":16,"author":{"gitID":"yeggasd"},"content":"        model.updatePassword(null);"},{"lineNumber":17,"author":{"gitID":"yeggasd"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS));"},{"lineNumber":18,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"yeggasd"},"content":"}"}],"authorContributionMap":{"yeggasd":15,"-":4}},{"path":"src/main/java/seedu/address/storage/Storage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.WrongPasswordException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Password;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.Building;"},{"lineNumber":14,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.Room;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * API of the Storage component"},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":"public interface Storage extends AddressBookStorage, UserPrefsStorage, ReadOnlyVenueInformation {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    String getAddressBookFilePath();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException, WrongPasswordException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"yeggasd"},"content":"    //@@author yeggasd"},{"lineNumber":34,"author":{"gitID":"yeggasd"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"yeggasd"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Password password)"},{"lineNumber":36,"author":{"gitID":"yeggasd"},"content":"            throws DataConversionException, IOException, WrongPasswordException;"},{"lineNumber":37,"author":{"gitID":"yeggasd"},"content":"    //@@author"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException, WrongPasswordException;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Saves the current version of the Address Book to the hard disk."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     *   Creates the data file if it is missing."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    void handleAddressBookChangedEvent(AddressBookChangedEvent abce);"},{"lineNumber":48,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":49,"author":{"gitID":"Caijun7"},"content":"    //@@author Caijun7"},{"lineNumber":50,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"Caijun7"},"content":"    Optional\u003cRoom\u003e readVenueInformation() throws DataConversionException, IOException;"},{"lineNumber":52,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":53,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"Caijun7"},"content":"    Optional\u003cBuilding\u003e readBuildingsAndRoomsInformation() throws DataConversionException, IOException;"},{"lineNumber":55,"author":{"gitID":"Caijun7"},"content":"    //@@author"},{"lineNumber":56,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yeggasd":5,"Caijun7":11,"-":40}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPassword.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.Password;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"yeggasd"},"content":"//@@author yeggasd"},{"lineNumber":10,"author":{"gitID":"yeggasd"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"yeggasd"},"content":" * JAXB-friendly version of the Password."},{"lineNumber":12,"author":{"gitID":"yeggasd"},"content":" */"},{"lineNumber":13,"author":{"gitID":"yeggasd"},"content":"public class XmlAdaptedPassword {"},{"lineNumber":14,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":15,"author":{"gitID":"yeggasd"},"content":"    @XmlElement"},{"lineNumber":16,"author":{"gitID":"yeggasd"},"content":"    private byte[] currPassword;"},{"lineNumber":17,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":18,"author":{"gitID":"yeggasd"},"content":"    @XmlElement"},{"lineNumber":19,"author":{"gitID":"yeggasd"},"content":"    private byte[] prevPassword;"},{"lineNumber":20,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":21,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"yeggasd"},"content":"     * Constructs an XmlAdaptedPassword."},{"lineNumber":23,"author":{"gitID":"yeggasd"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":24,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"yeggasd"},"content":"    public XmlAdaptedPassword() {}"},{"lineNumber":26,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":27,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"yeggasd"},"content":"     * Constructs an {@code XmlAdaptedPassword} with the given password."},{"lineNumber":29,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"yeggasd"},"content":"    public XmlAdaptedPassword(Password password) {"},{"lineNumber":31,"author":{"gitID":"yeggasd"},"content":"        this.currPassword \u003d password.getPassword();"},{"lineNumber":32,"author":{"gitID":"yeggasd"},"content":"        this.prevPassword \u003d password.getPrevPassword();"},{"lineNumber":33,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":35,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"yeggasd"},"content":"     * Converts this jaxb-friendly adapted password object into the model\u0027s Password object."},{"lineNumber":37,"author":{"gitID":"yeggasd"},"content":"     *"},{"lineNumber":38,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"yeggasd"},"content":"    public Password toModelType() {"},{"lineNumber":40,"author":{"gitID":"yeggasd"},"content":"        return new Password(currPassword, prevPassword);"},{"lineNumber":41,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":43,"author":{"gitID":"yeggasd"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"yeggasd"},"content":"    public boolean equals(Object other) {"},{"lineNumber":45,"author":{"gitID":"yeggasd"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":46,"author":{"gitID":"yeggasd"},"content":"            return true;"},{"lineNumber":47,"author":{"gitID":"yeggasd"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":49,"author":{"gitID":"yeggasd"},"content":"        if (!(other instanceof XmlAdaptedPassword)) {"},{"lineNumber":50,"author":{"gitID":"yeggasd"},"content":"            return false;"},{"lineNumber":51,"author":{"gitID":"yeggasd"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":53,"author":{"gitID":"yeggasd"},"content":"        XmlAdaptedPassword otherPassword \u003d (XmlAdaptedPassword) other;"},{"lineNumber":54,"author":{"gitID":"yeggasd"},"content":"        return Arrays.equals(currPassword, otherPassword.currPassword)"},{"lineNumber":55,"author":{"gitID":"yeggasd"},"content":"                \u0026\u0026 Arrays.equals(prevPassword, otherPassword.prevPassword);"},{"lineNumber":56,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"yeggasd"},"content":"}"}],"authorContributionMap":{"yeggasd":49,"-":8}},{"path":"src/main/java/seedu/address/storage/AddressBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.WrongPasswordException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Password;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Represents a storage for {@link seedu.address.model.AddressBook}."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public interface AddressBookStorage {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Returns the file path of the data file."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    String getAddressBookFilePath();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @throws WrongPasswordException if the password is wrong."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException, WrongPasswordException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * @see #getAddressBookFilePath()"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException,"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                                                                        WrongPasswordException;"},{"lineNumber":35,"author":{"gitID":"yeggasd"},"content":"    //@@author yeggasd"},{"lineNumber":36,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"yeggasd"},"content":"     * @see #getAddressBookFilePath()"},{"lineNumber":38,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"yeggasd"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Password password) throws DataConversionException,"},{"lineNumber":40,"author":{"gitID":"yeggasd"},"content":"                                                                            IOException, WrongPasswordException;"},{"lineNumber":41,"author":{"gitID":"yeggasd"},"content":"    //@@author"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * @see #getAddressBookFilePath()"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath, Password password) throws DataConversionException,"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            IOException, WrongPasswordException;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to the storage."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * @param addressBook cannot be null."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException, WrongPasswordException;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * @see #saveAddressBook(ReadOnlyAddressBook)"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException, WrongPasswordException;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Saves the given (@link ReadOnlyAddressBook) to a offline backup file"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * @param addressBook cannot be null"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * @throws IOException"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException, WrongPasswordException;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yeggasd":7,"-":60}},{"path":"src/main/java/seedu/address/storage/ReadOnlyVenueInformation.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.Building;"},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.Room;"},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":"//@@author Caijun7"},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"Caijun7"},"content":" * Represents a storage for venue information."},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":" */"},{"lineNumber":14,"author":{"gitID":"Caijun7"},"content":"public interface ReadOnlyVenueInformation {"},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"Caijun7"},"content":"     * Returns the file path of the VenueInformation data file."},{"lineNumber":18,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":"    String getVenueInformationFilePath();"},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":21,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"Caijun7"},"content":"     * Reads VenueInformation data from storage."},{"lineNumber":23,"author":{"gitID":"Caijun7"},"content":"     * Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":24,"author":{"gitID":"Caijun7"},"content":"     *"},{"lineNumber":25,"author":{"gitID":"Caijun7"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":26,"author":{"gitID":"Caijun7"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":27,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"Caijun7"},"content":"    Optional\u003cRoom\u003e readVenueInformation() throws DataConversionException, IOException;"},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":30,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"Caijun7"},"content":"     * Reads BuildingsAndRooms data from storage."},{"lineNumber":32,"author":{"gitID":"Caijun7"},"content":"     * Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":33,"author":{"gitID":"Caijun7"},"content":"     *"},{"lineNumber":34,"author":{"gitID":"Caijun7"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":35,"author":{"gitID":"Caijun7"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":36,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"Caijun7"},"content":"    Optional\u003cBuilding\u003e readBuildingsAndRoomsInformation() throws DataConversionException, IOException;"},{"lineNumber":38,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":32,"-":6}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.InfoPanelEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.WrongPasswordException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Password;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.Building;"},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.Room;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Manages storage of AddressBook data in local storage."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class StorageManager extends ComponentManager implements Storage {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private AddressBookStorage addressBookStorage;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":30,"author":{"gitID":"Caijun7"},"content":"    private ReadOnlyVenueInformation venueInformationStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"Caijun7"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage,"},{"lineNumber":34,"author":{"gitID":"Caijun7"},"content":"                          ReadOnlyVenueInformation venueInformationStorage) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":38,"author":{"gitID":"Caijun7"},"content":"        this.venueInformationStorage \u003d venueInformationStorage;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException,"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                                                                            WrongPasswordException {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException,"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                                                                            WrongPasswordException {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Password password)"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            throws DataConversionException, IOException, WrongPasswordException {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return addressBookStorage.readAddressBook(addressBookStorage.getAddressBookFilePath(), password);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath, Password password)"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            throws DataConversionException, IOException, WrongPasswordException {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return addressBookStorage.readAddressBook(filePath, password);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException, WrongPasswordException {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException,"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                                                                            WrongPasswordException {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"content":"    //@@author AzuraAiR-reused"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException, WrongPasswordException {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to backup data file: \");"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        addressBookStorage.backupAddressBook(addressBook);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"content":"    //@@author"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            saveAddressBook(event.data);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            raise(new InfoPanelEvent());"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        } catch (WrongPasswordException wpe) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            logger.severe(\"Unable to save due to wrong password. Should not happen.\");"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(wpe));"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":128,"author":{"gitID":"Caijun7"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d VenueInformation methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":129,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":130,"author":{"gitID":"Caijun7"},"content":"    //@@author Caijun7"},{"lineNumber":131,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":132,"author":{"gitID":"Caijun7"},"content":"    public String getVenueInformationFilePath() {"},{"lineNumber":133,"author":{"gitID":"Caijun7"},"content":"        return venueInformationStorage.getVenueInformationFilePath();"},{"lineNumber":134,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":136,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":137,"author":{"gitID":"Caijun7"},"content":"    public Optional\u003cRoom\u003e readVenueInformation() throws DataConversionException, IOException {"},{"lineNumber":138,"author":{"gitID":"Caijun7"},"content":"        return venueInformationStorage.readVenueInformation();"},{"lineNumber":139,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":141,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":142,"author":{"gitID":"Caijun7"},"content":"    public Optional\u003cBuilding\u003e readBuildingsAndRoomsInformation() throws DataConversionException, IOException {"},{"lineNumber":143,"author":{"gitID":"Caijun7"},"content":"        return venueInformationStorage.readBuildingsAndRoomsInformation();"},{"lineNumber":144,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"Caijun7"},"content":"    //@@author"},{"lineNumber":146,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":2,"Caijun7":26,"-":119}},{"path":"src/main/java/seedu/address/storage/XmlAddressBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.WrongPasswordException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.SecurityUtil;"},{"lineNumber":18,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Password;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":21,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":25,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * A class to access AddressBook data stored as an xml file on the hard disk."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class XmlAddressBookStorage implements AddressBookStorage {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private String filePath;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public XmlAddressBookStorage(String filePath) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException,"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                                                                WrongPasswordException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return readAddressBook(filePath);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"yeggasd"},"content":"    //@@author yeggasd"},{"lineNumber":51,"author":{"gitID":"yeggasd"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"yeggasd"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Password password) throws DataConversionException, IOException,"},{"lineNumber":53,"author":{"gitID":"yeggasd"},"content":"            WrongPasswordException {"},{"lineNumber":54,"author":{"gitID":"yeggasd"},"content":"        return readAddressBook(filePath, password);"},{"lineNumber":55,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"yeggasd"},"content":"    //@@author"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Similar to {@link #readAddressBook()}"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException,"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                                                                                 IOException, WrongPasswordException {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        File addressBookFile \u003d new File(filePath);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        if (!addressBookFile.exists()) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            logger.info(\"AddressBook file \"  + addressBookFile + \" not found\");"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        SecurityUtil.decrypt(file);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook xmlAddressBook \u003d XmlFileStorage.loadDataFromSaveFile(file);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            return Optional.of(xmlAddressBook.toModelType());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            logger.info(\"Illegal values found in \" + addressBookFile + \": \" + ive.getMessage());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"yeggasd"},"content":"    //@@author yeggasd"},{"lineNumber":85,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"yeggasd"},"content":"     * Similar to {@link #readAddressBook()}"},{"lineNumber":87,"author":{"gitID":"yeggasd"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":88,"author":{"gitID":"yeggasd"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":89,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"yeggasd"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath, Password password)"},{"lineNumber":91,"author":{"gitID":"yeggasd"},"content":"            throws DataConversionException, IOException, WrongPasswordException {"},{"lineNumber":92,"author":{"gitID":"yeggasd"},"content":"        requireNonNull(filePath);"},{"lineNumber":93,"author":{"gitID":"yeggasd"},"content":"        requireNonNull(password);"},{"lineNumber":94,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":95,"author":{"gitID":"yeggasd"},"content":"        File addressBookFile \u003d new File(filePath);"},{"lineNumber":96,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":97,"author":{"gitID":"yeggasd"},"content":"        if (!addressBookFile.exists()) {"},{"lineNumber":98,"author":{"gitID":"yeggasd"},"content":"            logger.info(\"AddressBook file \"  + addressBookFile + \" not found\");"},{"lineNumber":99,"author":{"gitID":"yeggasd"},"content":"            return Optional.empty();"},{"lineNumber":100,"author":{"gitID":"yeggasd"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"yeggasd"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":102,"author":{"gitID":"yeggasd"},"content":"        SecurityUtil.decryptFile(file, password);"},{"lineNumber":103,"author":{"gitID":"yeggasd"},"content":"        XmlSerializableAddressBook xmlAddressBook \u003d XmlFileStorage.loadDataFromSaveFile(file);"},{"lineNumber":104,"author":{"gitID":"yeggasd"},"content":"        SecurityUtil.encryptFile(file, password);"},{"lineNumber":105,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":106,"author":{"gitID":"yeggasd"},"content":"        try {"},{"lineNumber":107,"author":{"gitID":"yeggasd"},"content":"            return Optional.of(xmlAddressBook.toModelType());"},{"lineNumber":108,"author":{"gitID":"yeggasd"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":109,"author":{"gitID":"yeggasd"},"content":"            logger.info(\"Illegal values found in \" + addressBookFile + \": \" + ive.getMessage());"},{"lineNumber":110,"author":{"gitID":"yeggasd"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":111,"author":{"gitID":"yeggasd"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"yeggasd"},"content":"    //@@author"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"Caijun7"},"content":"    //@@author Caijun7"},{"lineNumber":116,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"Caijun7"},"content":"     * Imports the specified {@code AddressBook} from the filepath to the current {@code AddressBook}."},{"lineNumber":118,"author":{"gitID":"Caijun7"},"content":"     *"},{"lineNumber":119,"author":{"gitID":"Caijun7"},"content":"     * @param filePath      location of the specified AddressBook. Cannot be null"},{"lineNumber":120,"author":{"gitID":"Caijun7"},"content":"     * @param addressBook   current existing AddressBook"},{"lineNumber":121,"author":{"gitID":"Caijun7"},"content":"     * @return              modified AddressBook"},{"lineNumber":122,"author":{"gitID":"Caijun7"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":123,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"Caijun7"},"content":"    public AddressBook importAddressBook(String filePath, AddressBook addressBook, byte[] password)"},{"lineNumber":125,"author":{"gitID":"Caijun7"},"content":"            throws DataConversionException, IOException, WrongPasswordException {"},{"lineNumber":126,"author":{"gitID":"Caijun7"},"content":"        requireNonNull(filePath);"},{"lineNumber":127,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":128,"author":{"gitID":"Caijun7"},"content":"        File addressBookFile \u003d new File(filePath);"},{"lineNumber":129,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":130,"author":{"gitID":"Caijun7"},"content":"        if (!addressBookFile.exists()) {"},{"lineNumber":131,"author":{"gitID":"Caijun7"},"content":"            logger.info(\"AddressBook file \"  + addressBookFile + \" not found\");"},{"lineNumber":132,"author":{"gitID":"Caijun7"},"content":"            throw new FileNotFoundException();"},{"lineNumber":133,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"Caijun7"},"content":"        if (password !\u003d null) {"},{"lineNumber":135,"author":{"gitID":"Caijun7"},"content":"            SecurityUtil.decrypt(new File(filePath), password);"},{"lineNumber":136,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"Caijun7"},"content":"        XmlSerializableAddressBook xmlAddressBook \u003d XmlFileStorage.loadDataFromSaveFile(new File(filePath));"},{"lineNumber":138,"author":{"gitID":"Caijun7"},"content":"        try {"},{"lineNumber":139,"author":{"gitID":"Caijun7"},"content":"            return xmlAddressBook.addToAddressBook(addressBook);"},{"lineNumber":140,"author":{"gitID":"Caijun7"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":141,"author":{"gitID":"Caijun7"},"content":"            logger.info(\"Illegal values found in \" + addressBookFile + \": \" + ive.getMessage());"},{"lineNumber":142,"author":{"gitID":"Caijun7"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":143,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":146,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"Caijun7"},"content":"     * Exports the current view of {@code AddressBook} to the given filepath."},{"lineNumber":148,"author":{"gitID":"Caijun7"},"content":"     *"},{"lineNumber":149,"author":{"gitID":"Caijun7"},"content":"     * @param filePath                  location of the exported data. Cannot be null"},{"lineNumber":150,"author":{"gitID":"Caijun7"},"content":"     * @throws IOException              If the file cannot be overwritten or opened."},{"lineNumber":151,"author":{"gitID":"Caijun7"},"content":"     * @throws WrongPasswordException   If password is in wrong format"},{"lineNumber":152,"author":{"gitID":"Caijun7"},"content":"     * @throws DuplicatePersonException Impossible since AddressBook is newly created"},{"lineNumber":153,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"Caijun7"},"content":"    public void exportAddressBook(String filePath, Password password, ObservableList\u003cPerson\u003e filteredPersons,"},{"lineNumber":155,"author":{"gitID":"Caijun7"},"content":"                                  ObservableList\u003cAlias\u003e aliases, ObservableList\u003cTag\u003e tags)"},{"lineNumber":156,"author":{"gitID":"Caijun7"},"content":"            throws IOException {"},{"lineNumber":157,"author":{"gitID":"Caijun7"},"content":"        requireNonNull(filePath);"},{"lineNumber":158,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":159,"author":{"gitID":"Caijun7"},"content":"        if (UserPrefs.getUserAddressBookFilePath().equals(filePath)) {"},{"lineNumber":160,"author":{"gitID":"Caijun7"},"content":"            logger.warning(\"Filepath is same as AddressBook storage filepath, storage file should not be overwritten!\");"},{"lineNumber":161,"author":{"gitID":"Caijun7"},"content":"            throw new IOException();"},{"lineNumber":162,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"Caijun7"},"content":"        try {"},{"lineNumber":164,"author":{"gitID":"Caijun7"},"content":"            File file \u003d new File(filePath);"},{"lineNumber":165,"author":{"gitID":"Caijun7"},"content":"            FileUtil.createIfMissing(file);"},{"lineNumber":166,"author":{"gitID":"Caijun7"},"content":"            AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":167,"author":{"gitID":"Caijun7"},"content":"            addressBook.setPersons(filteredPersons);"},{"lineNumber":168,"author":{"gitID":"Caijun7"},"content":"            for (Alias alias : aliases) {"},{"lineNumber":169,"author":{"gitID":"Caijun7"},"content":"                addressBook.importAlias(alias);"},{"lineNumber":170,"author":{"gitID":"Caijun7"},"content":"            }"},{"lineNumber":171,"author":{"gitID":"Caijun7"},"content":"            for (Tag tag : tags) {"},{"lineNumber":172,"author":{"gitID":"Caijun7"},"content":"                addressBook.importTag(tag);"},{"lineNumber":173,"author":{"gitID":"Caijun7"},"content":"            }"},{"lineNumber":174,"author":{"gitID":"Caijun7"},"content":"            XmlFileStorage.saveDataToFile(file, new XmlSerializableAddressBook(addressBook));"},{"lineNumber":175,"author":{"gitID":"Caijun7"},"content":"            SecurityUtil.encryptFile(file, password);"},{"lineNumber":176,"author":{"gitID":"Caijun7"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":177,"author":{"gitID":"Caijun7"},"content":"            throw new AssertionError(\"New AddressBook should not contain duplicate persons\");"},{"lineNumber":178,"author":{"gitID":"Caijun7"},"content":"        } catch (WrongPasswordException e) {"},{"lineNumber":179,"author":{"gitID":"Caijun7"},"content":"            throw new AssertionError(\"There should not be any decryption\");"},{"lineNumber":180,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"Caijun7"},"content":"    //@@author"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException, WrongPasswordException {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, filePath);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":190,"author":{"gitID":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException,"},{"lineNumber":194,"author":{"gitID":"-"},"content":"                                                                            WrongPasswordException {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        requireNonNull(addressBook);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        Password password \u003d addressBook.getPassword();"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        SecurityUtil.decryptFile(file, password);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        XmlFileStorage.saveDataToFile(file, new XmlSerializableAddressBook(addressBook));"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        SecurityUtil.encryptFile(file, password);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"content":"    //@@author AzuraAiR-reused"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException, WrongPasswordException {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, filePath + \".backup\");"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":211,"content":"    //@@author"},{"lineNumber":212,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":2,"yeggasd":37,"Caijun7":74,"-":99}},{"path":"src/main/java/seedu/address/logic/commands/MapCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.GoogleMapsEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"jingyinno"},"content":"//@@author jingyinno"},{"lineNumber":13,"author":{"gitID":"jingyinno"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"jingyinno"},"content":" * Launches Google Maps with the specified location(s)"},{"lineNumber":15,"author":{"gitID":"jingyinno"},"content":" */"},{"lineNumber":16,"author":{"gitID":"jingyinno"},"content":"public class MapCommand extends Command {"},{"lineNumber":17,"author":{"gitID":"jingyinno"},"content":"    public static final String COMMAND_WORD \u003d \"map\";"},{"lineNumber":18,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":19,"author":{"gitID":"jingyinno"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds the location of the specified address(es). \""},{"lineNumber":20,"author":{"gitID":"jingyinno"},"content":"            + \"Parameters: [ADDRESS] or [ADDRESS_START]/[ADDRESS_DESTINATION] \\n\""},{"lineNumber":21,"author":{"gitID":"jingyinno"},"content":"            + \"Example: \" + COMMAND_WORD + \" Tampines Mall/COM2 \\n\""},{"lineNumber":22,"author":{"gitID":"jingyinno"},"content":"            + \"Example: \" + COMMAND_WORD + \" 119077/117417 \";"},{"lineNumber":23,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":24,"author":{"gitID":"jingyinno"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Launching Google Maps ...\";"},{"lineNumber":25,"author":{"gitID":"jingyinno"},"content":"    public static final String MESSAGE_NO_INTERNET \u003d \"Please check that you have internet connection\";"},{"lineNumber":26,"author":{"gitID":"jingyinno"},"content":"    public static final String SPLIT_TOKEN \u003d \"/\";"},{"lineNumber":27,"author":{"gitID":"jingyinno"},"content":"    public static final int TWO_LOCATIONS_WORD_LENGTH \u003d 2;"},{"lineNumber":28,"author":{"gitID":"jingyinno"},"content":"    public static final int FIRST_LOCATION_INDEX \u003d 0;"},{"lineNumber":29,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":30,"author":{"gitID":"jingyinno"},"content":"    private String locations;"},{"lineNumber":31,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":32,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"jingyinno"},"content":"     * Creates a MapCommand to pass locations to Google Maps"},{"lineNumber":34,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"jingyinno"},"content":"    public MapCommand(String locations) {"},{"lineNumber":36,"author":{"gitID":"jingyinno"},"content":"        requireNonNull(locations);"},{"lineNumber":37,"author":{"gitID":"jingyinno"},"content":"        this.locations \u003d locations;"},{"lineNumber":38,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":40,"author":{"gitID":"jingyinno"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"jingyinno"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":42,"author":{"gitID":"jingyinno"},"content":"        requireNonNull(model);"},{"lineNumber":43,"author":{"gitID":"jingyinno"},"content":"        locations \u003d ParserUtil.parseLocations(this.locations);"},{"lineNumber":44,"author":{"gitID":"jingyinno"},"content":"        boolean isOneLocation \u003d !locations.contains(SPLIT_TOKEN);"},{"lineNumber":45,"author":{"gitID":"jingyinno"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"jingyinno"},"content":"            EventsCenter.getInstance().post(new GoogleMapsEvent(locations, isOneLocation));"},{"lineNumber":47,"author":{"gitID":"jingyinno"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS));"},{"lineNumber":48,"author":{"gitID":"jingyinno"},"content":"        } catch (IOException e) {"},{"lineNumber":49,"author":{"gitID":"jingyinno"},"content":"            throw new CommandException(MESSAGE_NO_INTERNET);"},{"lineNumber":50,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":53,"author":{"gitID":"jingyinno"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"jingyinno"},"content":"    public boolean equals(Object other) {"},{"lineNumber":55,"author":{"gitID":"jingyinno"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":56,"author":{"gitID":"jingyinno"},"content":"                || (other instanceof MapCommand // instanceof handles nulls"},{"lineNumber":57,"author":{"gitID":"jingyinno"},"content":"                \u0026\u0026 locations.equals(((MapCommand) other).locations));"},{"lineNumber":58,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"jingyinno"},"content":"}"}],"authorContributionMap":{"jingyinno":48,"-":11}},{"path":"src/main/java/seedu/address/storage/exceptions/GoogleAuthorizationException.java","lines":[{"lineNumber":1,"author":{"gitID":"Caijun7"},"content":"package seedu.address.storage.exceptions;"},{"lineNumber":2,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":4,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":5,"author":{"gitID":"Caijun7"},"content":"//@@author Caijun7"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":" * Signals that the application is unable to gain user\u0027s authorization."},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":" */"},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":"public class GoogleAuthorizationException extends CommandException {"},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":"    public GoogleAuthorizationException() {"},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":"        super(\"Unable to access your Google Drive. Please grant authorization.\");"},{"lineNumber":12,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":12,"-":1}},{"path":"src/main/java/seedu/address/storage/exceptions/RequestTimeoutException.java","lines":[{"lineNumber":1,"author":{"gitID":"Caijun7"},"content":"package seedu.address.storage.exceptions;"},{"lineNumber":2,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":4,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":5,"author":{"gitID":"Caijun7"},"content":"//@@author Caijun7"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":" * Signals that the authorization request has timed out."},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":" */"},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":"public class RequestTimeoutException extends CommandException {"},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":"    public RequestTimeoutException() {"},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":"        super(\"Authorization request timed out. Please try again.\");"},{"lineNumber":12,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":12,"-":1}},{"path":"src/main/java/seedu/address/logic/commands/UploadCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":5,"author":{"gitID":"Caijun7"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.Password;"},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":"import seedu.address.storage.exceptions.GoogleAuthorizationException;"},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":"import seedu.address.storage.exceptions.RequestTimeoutException;"},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":12,"author":{"gitID":"Caijun7"},"content":"//@@author Caijun7"},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"Caijun7"},"content":" * Uploads an address book to the existing address book."},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":" */"},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":"public class UploadCommand extends Command {"},{"lineNumber":17,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":18,"author":{"gitID":"Caijun7"},"content":"    public static final String COMMAND_WORD \u003d \"upload\";"},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Uploads the current view of StardyTogether \""},{"lineNumber":21,"author":{"gitID":"Caijun7"},"content":"            + \"and saves it as specified filename in Google Drive. \""},{"lineNumber":22,"author":{"gitID":"Caijun7"},"content":"            + \"Parameters: FILENAME PASSWORD\\n\""},{"lineNumber":23,"author":{"gitID":"Caijun7"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":24,"author":{"gitID":"Caijun7"},"content":"            + \"addressbookbackup.xml \""},{"lineNumber":25,"author":{"gitID":"Caijun7"},"content":"            + \"testpassword\";"},{"lineNumber":26,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":27,"author":{"gitID":"Caijun7"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Current list of Persons, tags, or aliases from \""},{"lineNumber":28,"author":{"gitID":"Caijun7"},"content":"            + \"StardyTogether are successfully uploaded.\";"},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":"    public static final String MESSAGE_FILE_UNABLE_TO_SAVE \u003d \"Unable to save or overwrite to Google Drive. \";"},{"lineNumber":30,"author":{"gitID":"Caijun7"},"content":"    public static final String MESSAGE_NO_AUTHORIZATION \u003d \"Unable to access your Google Drive. \""},{"lineNumber":31,"author":{"gitID":"Caijun7"},"content":"            + \"Please grant authorization.\";"},{"lineNumber":32,"author":{"gitID":"Caijun7"},"content":"    public static final String MESSAGE_REQUEST_TIMEOUT \u003d \"Authorization request timed out. Please try again.\";"},{"lineNumber":33,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":34,"author":{"gitID":"Caijun7"},"content":"    private final String filepath;"},{"lineNumber":35,"author":{"gitID":"Caijun7"},"content":"    private final Password password;"},{"lineNumber":36,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":37,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"Caijun7"},"content":"     * Creates an UploadCommand to upload the current view of {@code AddressBook} to the filepath without a password"},{"lineNumber":39,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"Caijun7"},"content":"    public UploadCommand(String filepath) {"},{"lineNumber":41,"author":{"gitID":"Caijun7"},"content":"        requireNonNull(filepath);"},{"lineNumber":42,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":43,"author":{"gitID":"Caijun7"},"content":"        this.filepath \u003d filepath;"},{"lineNumber":44,"author":{"gitID":"Caijun7"},"content":"        password \u003d null;"},{"lineNumber":45,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":47,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"Caijun7"},"content":"     * Creates an UploadCommand to upload the current view of {@code AddressBook} to the filepath with a password"},{"lineNumber":49,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"Caijun7"},"content":"    public UploadCommand(String filepath, String password) {"},{"lineNumber":51,"author":{"gitID":"Caijun7"},"content":"        requireNonNull(filepath);"},{"lineNumber":52,"author":{"gitID":"Caijun7"},"content":"        requireNonNull(password);"},{"lineNumber":53,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":54,"author":{"gitID":"Caijun7"},"content":"        this.filepath \u003d filepath;"},{"lineNumber":55,"author":{"gitID":"Caijun7"},"content":"        this.password \u003d new Password(password);"},{"lineNumber":56,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":58,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"Caijun7"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":60,"author":{"gitID":"Caijun7"},"content":"        requireNonNull(model);"},{"lineNumber":61,"author":{"gitID":"Caijun7"},"content":"        try {"},{"lineNumber":62,"author":{"gitID":"Caijun7"},"content":"            model.uploadAddressBook(filepath, password);"},{"lineNumber":63,"author":{"gitID":"Caijun7"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS));"},{"lineNumber":64,"author":{"gitID":"Caijun7"},"content":"        } catch (GoogleAuthorizationException e) {"},{"lineNumber":65,"author":{"gitID":"Caijun7"},"content":"            throw new CommandException(MESSAGE_NO_AUTHORIZATION);"},{"lineNumber":66,"author":{"gitID":"Caijun7"},"content":"        } catch (RequestTimeoutException e) {"},{"lineNumber":67,"author":{"gitID":"Caijun7"},"content":"            throw new CommandException(MESSAGE_REQUEST_TIMEOUT);"},{"lineNumber":68,"author":{"gitID":"Caijun7"},"content":"        } catch (IOException ioe) {"},{"lineNumber":69,"author":{"gitID":"Caijun7"},"content":"            throw new CommandException(MESSAGE_FILE_UNABLE_TO_SAVE);"},{"lineNumber":70,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":73,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"Caijun7"},"content":"    public boolean equals(Object other) {"},{"lineNumber":75,"author":{"gitID":"Caijun7"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":76,"author":{"gitID":"Caijun7"},"content":"                || (other instanceof UploadCommand // instanceof handles nulls"},{"lineNumber":77,"author":{"gitID":"Caijun7"},"content":"                \u0026\u0026 filepath.equals(((UploadCommand) other).filepath));"},{"lineNumber":78,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":75,"-":4}},{"path":"src/main/java/seedu/address/storage/XmlFileStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Stores addressbook data in an XML file"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class XmlFileStorage {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Saves the given addressbook data to the specified file."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static void saveDataToFile(File file, XmlSerializableAddressBook addressBook)"},{"lineNumber":19,"author":{"gitID":"-"},"content":"            throws IOException {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            XmlUtil.saveDataToFile(file, addressBook);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":23,"author":{"gitID":"Caijun7"},"content":"            throw new IOException();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Returns address book in the file or an empty address book"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static XmlSerializableAddressBook loadDataFromSaveFile(File file) throws DataConversionException,"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                                                                            IOException {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            XmlSerializableAddressBook xmlBook \u003d  XmlUtil.getDataFromFile(file, XmlSerializableAddressBook.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            return xmlBook;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            throw new DataConversionException(e);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Caijun7":1,"-":39}},{"path":"src/main/java/seedu/address/storage/XmlSerializableAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * An Immutable AddressBook that is serializable to XML format"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"@XmlRootElement(name \u003d \"addressbook\")"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBook {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedPerson\u003e persons;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedAlias\u003e aliases;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private XmlAdaptedPassword password;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Creates an empty XmlSerializableAddressBook."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook() {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        aliases \u003d new ArrayList\u003c\u003e();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        password \u003d new XmlAdaptedPassword();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Conversion"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        aliases.addAll(src.getAliasList().stream().map(XmlAdaptedAlias::new).collect(Collectors.toList()));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        password \u003d new XmlAdaptedPassword(src.getPassword());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Converts this addressbook into the model\u0027s {@code AddressBook} object."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * {@code XmlAdaptedPerson} or {@code XmlAdaptedTag}."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag t : tags) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            addressBook.addTag(t.toModelType());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        for (XmlAdaptedPerson p : persons) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            addressBook.addPerson(p.toModelType());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        for (XmlAdaptedAlias a : aliases) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            addressBook.addAlias(a.toModelType());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        addressBook.updatePassword(password.toModelType());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"Caijun7"},"content":"    //@@author Caijun7"},{"lineNumber":73,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"Caijun7"},"content":"     * Adds {@code person}s and {@code tag}s from this addressbook into the existing {@code AddressBook}."},{"lineNumber":75,"author":{"gitID":"Caijun7"},"content":"     *"},{"lineNumber":76,"author":{"gitID":"Caijun7"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":77,"author":{"gitID":"Caijun7"},"content":"     * {@code XmlAdaptedPerson} or {@code XmlAdaptedTag}."},{"lineNumber":78,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"Caijun7"},"content":"    public AddressBook addToAddressBook(AddressBook addressBook) throws IllegalValueException {"},{"lineNumber":80,"author":{"gitID":"Caijun7"},"content":"        for (XmlAdaptedTag t : tags) {"},{"lineNumber":81,"author":{"gitID":"Caijun7"},"content":"            addressBook.importTag(t.toModelType());"},{"lineNumber":82,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"Caijun7"},"content":"        for (XmlAdaptedPerson p : persons) {"},{"lineNumber":84,"author":{"gitID":"Caijun7"},"content":"            addressBook.importPerson(p.toModelType());"},{"lineNumber":85,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"Caijun7"},"content":"        for (XmlAdaptedAlias a : aliases) {"},{"lineNumber":87,"author":{"gitID":"Caijun7"},"content":"            addressBook.importAlias(a.toModelType());"},{"lineNumber":88,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"Caijun7"},"content":"        return addressBook;"},{"lineNumber":90,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"Caijun7"},"content":"    //@@author"},{"lineNumber":92,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlSerializableAddressBook)) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook otherAb \u003d (XmlSerializableAddressBook) other;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        return persons.equals(otherAb.persons) \u0026\u0026 tags.equals(otherAb.tags) \u0026\u0026 aliases.equals(otherAb.aliases)"},{"lineNumber":105,"author":{"gitID":"-"},"content":"                \u0026\u0026 password.equals(otherAb.password);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Caijun7":21,"-":86}},{"path":"src/main/java/seedu/address/storage/ReadOnlyJsonVenueInformation.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.JsonUtil;"},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.Building;"},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.Room;"},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":"//@@author Caijun7"},{"lineNumber":12,"author":{"gitID":"Caijun7"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":" * A class to access VenueInformation stored in the hard disk as a json file"},{"lineNumber":14,"author":{"gitID":"Caijun7"},"content":" */"},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":"public class ReadOnlyJsonVenueInformation implements ReadOnlyVenueInformation {"},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":17,"author":{"gitID":"Caijun7"},"content":"    private String filePath;"},{"lineNumber":18,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":"    public ReadOnlyJsonVenueInformation(String filePath) {"},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":21,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":23,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"Caijun7"},"content":"    public String getVenueInformationFilePath() {"},{"lineNumber":25,"author":{"gitID":"Caijun7"},"content":"        return filePath;"},{"lineNumber":26,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":28,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":"    public Optional\u003cRoom\u003e readVenueInformation() throws DataConversionException, IOException {"},{"lineNumber":30,"author":{"gitID":"Caijun7"},"content":"        return readVenueInformation(filePath);"},{"lineNumber":31,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":33,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"Caijun7"},"content":"     * Converts Json file into HashMap of NUS Rooms"},{"lineNumber":35,"author":{"gitID":"Caijun7"},"content":"     *"},{"lineNumber":36,"author":{"gitID":"Caijun7"},"content":"     * @param venueInformationFilePath location of the data. Cannot be null."},{"lineNumber":37,"author":{"gitID":"Caijun7"},"content":"     * @throws DataConversionException if the file format is not as expected."},{"lineNumber":38,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"Caijun7"},"content":"    public Optional\u003cRoom\u003e readVenueInformation(String venueInformationFilePath) throws DataConversionException {"},{"lineNumber":40,"author":{"gitID":"Caijun7"},"content":"        return JsonUtil.readJsonFileFromResource(venueInformationFilePath, Room.class);"},{"lineNumber":41,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":43,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"Caijun7"},"content":"    public Optional\u003cBuilding\u003e readBuildingsAndRoomsInformation() throws DataConversionException, IOException {"},{"lineNumber":45,"author":{"gitID":"Caijun7"},"content":"        return readBuildingsAndRoomsInformation(filePath);"},{"lineNumber":46,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":48,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"Caijun7"},"content":"     * Converts Json file into HashMap of NUS Buildings and Rooms"},{"lineNumber":50,"author":{"gitID":"Caijun7"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"Caijun7"},"content":"     * @param buildingsAndRoomsInformationFilePath location of the data. Cannot be null."},{"lineNumber":52,"author":{"gitID":"Caijun7"},"content":"     * @throws DataConversionException if the file format is not as expected."},{"lineNumber":53,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"Caijun7"},"content":"    public Optional\u003cBuilding\u003e readBuildingsAndRoomsInformation(String buildingsAndRoomsInformationFilePath)"},{"lineNumber":55,"author":{"gitID":"Caijun7"},"content":"            throws DataConversionException {"},{"lineNumber":56,"author":{"gitID":"Caijun7"},"content":"        return JsonUtil.readJsonFileFromResource(buildingsAndRoomsInformationFilePath, Building.class);"},{"lineNumber":57,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":59,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":53,"-":6}},{"path":"src/main/java/seedu/address/MainApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.application.Application;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.WrongPasswordException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.Building;"},{"lineNumber":30,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.Room;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":34,"author":{"gitID":"Caijun7"},"content":"import seedu.address.storage.ReadOnlyJsonVenueInformation;"},{"lineNumber":35,"author":{"gitID":"Caijun7"},"content":"import seedu.address.storage.ReadOnlyVenueInformation;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.ui.PasswordUiManager;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":45,"author":{"gitID":"-"},"content":" * The main entry point to the application."},{"lineNumber":46,"author":{"gitID":"-"},"content":" */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final Version VERSION \u003d new Version(1, 5, 0, true);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    protected Ui ui;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    protected Logic logic;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    protected Storage storage;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    protected Config config;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    protected UserPrefs userPrefs;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private boolean passwordChanged;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        super.init();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        config \u003d initConfig(getApplicationParameter(\"config\"));"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":70,"author":{"gitID":"Caijun7"},"content":"        UserPrefs.setUserAddressBookFilePath(userPrefs.getAddressBookFilePath());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":72,"author":{"gitID":"Caijun7"},"content":"        ReadOnlyVenueInformation venueInformationStorage \u003d"},{"lineNumber":73,"author":{"gitID":"Caijun7"},"content":"                new ReadOnlyJsonVenueInformation(config.DEFAULT_VENUEINFORMATION_FILE);"},{"lineNumber":74,"author":{"gitID":"Caijun7"},"content":"        initVenueInformation(venueInformationStorage);"},{"lineNumber":75,"author":{"gitID":"Caijun7"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, venueInformationStorage);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        initLogging(config);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        ui \u003d new UiManager(logic, config, userPrefs, model);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        initEventsCenter();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    private String getApplicationParameter(String parameterName) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return applicationParameters.get(parameterName);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook initialData;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            if (!addressBookOptional.isPresent()) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        } catch (WrongPasswordException e) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            passwordChanged \u003d true;"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        Config initializedConfig;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        String configFilePathUsed;"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":148,"author":{"gitID":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        return initializedConfig;"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * reading from the file."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":176,"author":{"gitID":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        return initializedPrefs;"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"Caijun7"},"content":"    //@@author Caijun7"},{"lineNumber":194,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":195,"author":{"gitID":"Caijun7"},"content":"     * Initialize {@code nusVenues} and {@code nusBuildingsAndRooms} using the file at"},{"lineNumber":196,"author":{"gitID":"Caijun7"},"content":"     * {@code storage}\u0027s venue information file path"},{"lineNumber":197,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":198,"author":{"gitID":"Caijun7"},"content":"    private void initVenueInformation(ReadOnlyVenueInformation storage) {"},{"lineNumber":199,"author":{"gitID":"Caijun7"},"content":"        String venueInformationFilePath \u003d storage.getVenueInformationFilePath();"},{"lineNumber":200,"author":{"gitID":"Caijun7"},"content":"        logger.info(\"Using venueInformation file : \" + venueInformationFilePath);"},{"lineNumber":201,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":202,"author":{"gitID":"Caijun7"},"content":"        try {"},{"lineNumber":203,"author":{"gitID":"Caijun7"},"content":"            Optional\u003cBuilding\u003e buildingOptional \u003d storage.readBuildingsAndRoomsInformation();"},{"lineNumber":204,"author":{"gitID":"Caijun7"},"content":"            Building building \u003d buildingOptional.orElseThrow(() -\u003e new DataConversionException(new IOException()));"},{"lineNumber":205,"author":{"gitID":"Caijun7"},"content":"            Building.setNusBuildingsAndRooms(building.getBuildingsAndRooms());"},{"lineNumber":206,"author":{"gitID":"Caijun7"},"content":"            Optional\u003cRoom\u003e roomOptional \u003d storage.readVenueInformation();"},{"lineNumber":207,"author":{"gitID":"Caijun7"},"content":"            Room room \u003d roomOptional.orElseThrow(() -\u003e new DataConversionException(new IOException()));"},{"lineNumber":208,"author":{"gitID":"Caijun7"},"content":"            Room.setNusVenues(room.getNusRooms());"},{"lineNumber":209,"author":{"gitID":"Caijun7"},"content":"        } catch (DataConversionException de) {"},{"lineNumber":210,"author":{"gitID":"Caijun7"},"content":"            logger.warning(\"VenueInformation file at \" + venueInformationFilePath + \" is not in the correct format.\");"},{"lineNumber":211,"author":{"gitID":"Caijun7"},"content":"        } catch (IOException ioe) {"},{"lineNumber":212,"author":{"gitID":"Caijun7"},"content":"            logger.warning(\"Problem while reading from the file at \" + venueInformationFilePath);"},{"lineNumber":213,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":214,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":215,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"Caijun7"},"content":"    //@@author"},{"lineNumber":217,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"    private void initEventsCenter() {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"yeggasd"},"content":"    //@@author yeggasd"},{"lineNumber":223,"author":{"gitID":"yeggasd"},"content":"    @Override"},{"lineNumber":224,"author":{"gitID":"yeggasd"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":225,"author":{"gitID":"yeggasd"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"},{"lineNumber":226,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":227,"author":{"gitID":"yeggasd"},"content":"        checkPasswordChanged();"},{"lineNumber":228,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":229,"author":{"gitID":"yeggasd"},"content":"        ui.start(primaryStage); ("},{"lineNumber":230,"author":{"gitID":"yeggasd"},"content":"                (UiManager) ui).openBirthdayNotification();"},{"lineNumber":231,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":233,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":234,"author":{"gitID":"yeggasd"},"content":"     * Checks whether password is changed, if so make UI as {@code PasswordUiManager} instead"},{"lineNumber":235,"author":{"gitID":"yeggasd"},"content":"     * using polymorphism."},{"lineNumber":236,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":237,"author":{"gitID":"yeggasd"},"content":"    private void checkPasswordChanged() {"},{"lineNumber":238,"author":{"gitID":"yeggasd"},"content":"        if (passwordChanged) {"},{"lineNumber":239,"author":{"gitID":"yeggasd"},"content":"            ui \u003d new PasswordUiManager(storage, model, ui);"},{"lineNumber":240,"author":{"gitID":"yeggasd"},"content":"        }"},{"lineNumber":241,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"yeggasd"},"content":"    //@@author"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":245,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        ui.stop();"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(userPrefs);"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        System.exit(0);"},{"lineNumber":255,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        this.stop();"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yeggasd":21,"Caijun7":34,"-":212}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedAlias.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"jingyinno"},"content":"//@@author jingyinno"},{"lineNumber":11,"author":{"gitID":"jingyinno"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"jingyinno"},"content":" * JAXB-friendly adapted version of the Alias."},{"lineNumber":13,"author":{"gitID":"jingyinno"},"content":" */"},{"lineNumber":14,"author":{"gitID":"jingyinno"},"content":"public class XmlAdaptedAlias {"},{"lineNumber":15,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":16,"author":{"gitID":"jingyinno"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":17,"author":{"gitID":"jingyinno"},"content":"    private String command;"},{"lineNumber":18,"author":{"gitID":"jingyinno"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":19,"author":{"gitID":"jingyinno"},"content":"    private String aliasName;"},{"lineNumber":20,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":21,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"jingyinno"},"content":"     * Constructs an XmlAdaptedAlias."},{"lineNumber":23,"author":{"gitID":"jingyinno"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":24,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"jingyinno"},"content":"    public XmlAdaptedAlias() {}"},{"lineNumber":26,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":27,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"jingyinno"},"content":"     * Constructs a {@code XmlAdaptedAlias} with the given {@code command} and {@code aliasName}."},{"lineNumber":29,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"jingyinno"},"content":"    public XmlAdaptedAlias(String command, String aliasName) {"},{"lineNumber":31,"author":{"gitID":"jingyinno"},"content":"        this.command \u003d command;"},{"lineNumber":32,"author":{"gitID":"jingyinno"},"content":"        this.aliasName \u003d aliasName;"},{"lineNumber":33,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":35,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"jingyinno"},"content":"     * Converts a given Alias into this class for JAXB use."},{"lineNumber":37,"author":{"gitID":"jingyinno"},"content":"     *"},{"lineNumber":38,"author":{"gitID":"jingyinno"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedAlias."},{"lineNumber":39,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"jingyinno"},"content":"    public XmlAdaptedAlias(Alias source) {"},{"lineNumber":41,"author":{"gitID":"jingyinno"},"content":"        command \u003d source.getCommand();"},{"lineNumber":42,"author":{"gitID":"jingyinno"},"content":"        aliasName \u003d source.getAlias();"},{"lineNumber":43,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":45,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"jingyinno"},"content":"     * Converts this jaxb-friendly adapted alias object into the model\u0027s Alias object."},{"lineNumber":47,"author":{"gitID":"jingyinno"},"content":"     *"},{"lineNumber":48,"author":{"gitID":"jingyinno"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted alias."},{"lineNumber":49,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"jingyinno"},"content":"    public Alias toModelType() throws IllegalValueException {"},{"lineNumber":51,"author":{"gitID":"jingyinno"},"content":"        if (this.command \u003d\u003d null) {"},{"lineNumber":52,"author":{"gitID":"jingyinno"},"content":"            throw new IllegalValueException(Alias.MESSAGE_ALIAS_CONSTRAINTS);"},{"lineNumber":53,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"jingyinno"},"content":"        if (!Alias.isValidAliasParameter(command)) {"},{"lineNumber":55,"author":{"gitID":"jingyinno"},"content":"            throw new IllegalValueException(Alias.MESSAGE_ALIAS_CONSTRAINTS);"},{"lineNumber":56,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"jingyinno"},"content":"        final String command \u003d this.command;"},{"lineNumber":58,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":59,"author":{"gitID":"jingyinno"},"content":"        if (this.aliasName \u003d\u003d null) {"},{"lineNumber":60,"author":{"gitID":"jingyinno"},"content":"            throw new IllegalValueException(Alias.MESSAGE_ALIAS_CONSTRAINTS);"},{"lineNumber":61,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"jingyinno"},"content":"        if (!Alias.isValidAliasParameter(aliasName)) {"},{"lineNumber":63,"author":{"gitID":"jingyinno"},"content":"            throw new IllegalValueException(Alias.MESSAGE_ALIAS_CONSTRAINTS);"},{"lineNumber":64,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"jingyinno"},"content":"        final String aliasName \u003d this.aliasName;"},{"lineNumber":66,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":67,"author":{"gitID":"jingyinno"},"content":"        return new Alias(command, aliasName);"},{"lineNumber":68,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":70,"author":{"gitID":"jingyinno"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"jingyinno"},"content":"    public boolean equals(Object other) {"},{"lineNumber":72,"author":{"gitID":"jingyinno"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":73,"author":{"gitID":"jingyinno"},"content":"            return true;"},{"lineNumber":74,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":76,"author":{"gitID":"jingyinno"},"content":"        if (!(other instanceof XmlAdaptedAlias)) {"},{"lineNumber":77,"author":{"gitID":"jingyinno"},"content":"            return false;"},{"lineNumber":78,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":80,"author":{"gitID":"jingyinno"},"content":"        XmlAdaptedAlias otherAlias \u003d (XmlAdaptedAlias) other;"},{"lineNumber":81,"author":{"gitID":"jingyinno"},"content":"        return Objects.equals(aliasName, otherAlias.aliasName)"},{"lineNumber":82,"author":{"gitID":"jingyinno"},"content":"                \u0026\u0026 Objects.equals(command, otherAlias.command);"},{"lineNumber":83,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"jingyinno"},"content":"}"}],"authorContributionMap":{"jingyinno":75,"-":9}},{"path":"src/main/java/seedu/address/model/alias/exceptions/DuplicateAliasException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.alias.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"jingyinno"},"content":"//@@author jingyinno"},{"lineNumber":6,"author":{"gitID":"jingyinno"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"jingyinno"},"content":" * Signals that the operation will result in duplicate Alias objects."},{"lineNumber":8,"author":{"gitID":"jingyinno"},"content":" */"},{"lineNumber":9,"author":{"gitID":"jingyinno"},"content":"public class DuplicateAliasException extends DuplicateDataException {"},{"lineNumber":10,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":11,"author":{"gitID":"jingyinno"},"content":"    public static final String MESSAGE \u003d \"Operation would result in duplicate aliases\";"},{"lineNumber":12,"author":{"gitID":"jingyinno"},"content":"    public DuplicateAliasException() {"},{"lineNumber":13,"author":{"gitID":"jingyinno"},"content":"        super(MESSAGE);"},{"lineNumber":14,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"jingyinno"},"content":"}"}],"authorContributionMap":{"jingyinno":11,"-":4}},{"path":"src/main/java/seedu/address/model/alias/UniqueAliasList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.alias;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AliasCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.exceptions.AliasNotFoundException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.exceptions.DuplicateAliasException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"jingyinno"},"content":"//@@author jingyinno"},{"lineNumber":16,"author":{"gitID":"jingyinno"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"jingyinno"},"content":" * A list of aliases that enforces no nulls and uniqueness between its elements."},{"lineNumber":18,"author":{"gitID":"jingyinno"},"content":" *"},{"lineNumber":19,"author":{"gitID":"jingyinno"},"content":" * Supports minimal set of list operations for the app\u0027s features."},{"lineNumber":20,"author":{"gitID":"jingyinno"},"content":" *"},{"lineNumber":21,"author":{"gitID":"jingyinno"},"content":" * @see Alias#equals(Object)"},{"lineNumber":22,"author":{"gitID":"jingyinno"},"content":" */"},{"lineNumber":23,"author":{"gitID":"jingyinno"},"content":"public class UniqueAliasList {"},{"lineNumber":24,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":25,"author":{"gitID":"jingyinno"},"content":"    private static final String EMPTY_CELL \u003d \"\";"},{"lineNumber":26,"author":{"gitID":"jingyinno"},"content":"    private HashMap\u003cString, String\u003e aliasCommandMap \u003d new HashMap\u003cString, String\u003e();"},{"lineNumber":27,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":28,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"jingyinno"},"content":"     * Constructs an empty AliasList."},{"lineNumber":30,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"jingyinno"},"content":"    public UniqueAliasList() {}"},{"lineNumber":32,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":33,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"jingyinno"},"content":"     * Returns true if the list contains an equivalent alias as the given argument."},{"lineNumber":35,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"jingyinno"},"content":"    public boolean contains(String toCheck) {"},{"lineNumber":37,"author":{"gitID":"jingyinno"},"content":"        requireNonNull(toCheck);"},{"lineNumber":38,"author":{"gitID":"jingyinno"},"content":"        return aliasCommandMap.containsKey(toCheck);"},{"lineNumber":39,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":41,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"jingyinno"},"content":"     * Returns the command of the alias."},{"lineNumber":43,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"jingyinno"},"content":"    public String getCommandFromAlias(String alias) {"},{"lineNumber":45,"author":{"gitID":"jingyinno"},"content":"        requireNonNull(alias);"},{"lineNumber":46,"author":{"gitID":"jingyinno"},"content":"        return aliasCommandMap.get(alias);"},{"lineNumber":47,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":49,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"jingyinno"},"content":"     * Adds an Alias to the list."},{"lineNumber":51,"author":{"gitID":"jingyinno"},"content":"     *"},{"lineNumber":52,"author":{"gitID":"jingyinno"},"content":"     * @throws DuplicateAliasException if the Alias to add is a duplicate of an existing Alias in the list."},{"lineNumber":53,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"jingyinno"},"content":"    public void add(Alias toAdd) throws DuplicateAliasException {"},{"lineNumber":55,"author":{"gitID":"jingyinno"},"content":"        requireNonNull(toAdd);"},{"lineNumber":56,"author":{"gitID":"jingyinno"},"content":"        if (contains(toAdd.getAlias())) {"},{"lineNumber":57,"author":{"gitID":"jingyinno"},"content":"            throw new DuplicateAliasException();"},{"lineNumber":58,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"jingyinno"},"content":"        aliasCommandMap.put(toAdd.getAlias(), toAdd.getCommand());"},{"lineNumber":60,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":62,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"jingyinno"},"content":"     * Removes an Alias from the list."},{"lineNumber":64,"author":{"gitID":"jingyinno"},"content":"     *"},{"lineNumber":65,"author":{"gitID":"jingyinno"},"content":"     * @throws AliasNotFoundException if the Alias to remove is a does not exist in the list."},{"lineNumber":66,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"jingyinno"},"content":"    public void remove(String toRemove) throws AliasNotFoundException {"},{"lineNumber":68,"author":{"gitID":"jingyinno"},"content":"        requireNonNull(toRemove);"},{"lineNumber":69,"author":{"gitID":"jingyinno"},"content":"        if (!contains(toRemove)) {"},{"lineNumber":70,"author":{"gitID":"jingyinno"},"content":"            throw new AliasNotFoundException();"},{"lineNumber":71,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"jingyinno"},"content":"        aliasCommandMap.remove(toRemove);"},{"lineNumber":73,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":75,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"jingyinno"},"content":"     * Imports an Alias to the list if the Alias is not a duplicate of an existing Alias in the list."},{"lineNumber":77,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"jingyinno"},"content":"    public void importAlias(Alias toAdd) {"},{"lineNumber":79,"author":{"gitID":"jingyinno"},"content":"        requireNonNull(toAdd);"},{"lineNumber":80,"author":{"gitID":"jingyinno"},"content":"        if (!contains(toAdd.getAlias())) {"},{"lineNumber":81,"author":{"gitID":"jingyinno"},"content":"            aliasCommandMap.put(toAdd.getAlias(), toAdd.getCommand());"},{"lineNumber":82,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":85,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"jingyinno"},"content":"     * Replace all the current alias and command pairings with {@code aliases}"},{"lineNumber":87,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"jingyinno"},"content":"    public void setAliases(HashMap\u003cString, String\u003e aliases) {"},{"lineNumber":89,"author":{"gitID":"jingyinno"},"content":"        requireNonNull(aliases);"},{"lineNumber":90,"author":{"gitID":"jingyinno"},"content":"        this.aliasCommandMap.clear();"},{"lineNumber":91,"author":{"gitID":"jingyinno"},"content":"        this.aliasCommandMap.putAll(aliases);"},{"lineNumber":92,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":94,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"jingyinno"},"content":"     * Converts HashMap of alias and command pairing into an observable list of Alias objects"},{"lineNumber":96,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"jingyinno"},"content":"    public void convertToList(ObservableList\u003cAlias\u003e internalList) {"},{"lineNumber":98,"author":{"gitID":"jingyinno"},"content":"        for (String key : aliasCommandMap.keySet()) {"},{"lineNumber":99,"author":{"gitID":"jingyinno"},"content":"            Alias newAlias \u003d new Alias(aliasCommandMap.get(key), key);"},{"lineNumber":100,"author":{"gitID":"jingyinno"},"content":"            internalList.add(newAlias);"},{"lineNumber":101,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":104,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"jingyinno"},"content":"     * Gets an Observable alias list"},{"lineNumber":106,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"jingyinno"},"content":"    public ObservableList\u003cAlias\u003e getAliasObservableList() {"},{"lineNumber":108,"author":{"gitID":"jingyinno"},"content":"        ObservableList\u003cAlias\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":109,"author":{"gitID":"jingyinno"},"content":"        convertToList(internalList);"},{"lineNumber":110,"author":{"gitID":"jingyinno"},"content":"        return internalList;"},{"lineNumber":111,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":113,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"jingyinno"},"content":"     * Gets aliasCommandMap"},{"lineNumber":115,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"jingyinno"},"content":"    public HashMap\u003cString, String\u003e getAliasCommandMappings() {"},{"lineNumber":117,"author":{"gitID":"jingyinno"},"content":"        return aliasCommandMap;"},{"lineNumber":118,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":120,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"jingyinno"},"content":"     * Clears aliasCommandMap, for clear command."},{"lineNumber":122,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"jingyinno"},"content":"    public void resetHashmap() {"},{"lineNumber":124,"author":{"gitID":"jingyinno"},"content":"        this.aliasCommandMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":125,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":127,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"jingyinno"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":129,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"jingyinno"},"content":"    public ObservableList\u003cAlias\u003e asObservableList() {"},{"lineNumber":131,"author":{"gitID":"jingyinno"},"content":"        ObservableList\u003cAlias\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":132,"author":{"gitID":"jingyinno"},"content":"        convertToList(internalList);"},{"lineNumber":133,"author":{"gitID":"jingyinno"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":134,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":136,"author":{"gitID":"jingyinno"},"content":"    @Override"},{"lineNumber":137,"author":{"gitID":"jingyinno"},"content":"    public boolean equals(Object other) {"},{"lineNumber":138,"author":{"gitID":"jingyinno"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":139,"author":{"gitID":"jingyinno"},"content":"                || (other instanceof UniqueAliasList // instanceof handles nulls"},{"lineNumber":140,"author":{"gitID":"jingyinno"},"content":"                \u0026\u0026 this.aliasCommandMap.equals(((UniqueAliasList) other).aliasCommandMap));"},{"lineNumber":141,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":143,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"jingyinno"},"content":"     * Returns an ArrayList of ArrayList of string aliases grouped by command."},{"lineNumber":145,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"jingyinno"},"content":"    public ArrayList\u003cArrayList\u003cString\u003e\u003e extractAliasMapping() {"},{"lineNumber":147,"author":{"gitID":"jingyinno"},"content":"        requireNonNull(aliasCommandMap);"},{"lineNumber":148,"author":{"gitID":"jingyinno"},"content":"        ArrayList\u003cArrayList\u003cString\u003e\u003e aliases \u003d new ArrayList\u003c\u003e();"},{"lineNumber":149,"author":{"gitID":"jingyinno"},"content":"        convertAliasHashmapToArrayList(aliases);"},{"lineNumber":150,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":151,"author":{"gitID":"jingyinno"},"content":"        int largest \u003d findMaxCommandAliasSize(aliases);"},{"lineNumber":152,"author":{"gitID":"jingyinno"},"content":"        populateEmptyAliasCells(aliases, largest);"},{"lineNumber":153,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":154,"author":{"gitID":"jingyinno"},"content":"        ArrayList\u003cArrayList\u003cString\u003e\u003e formattedAliases \u003d formatArrayListForUi(aliases, largest);"},{"lineNumber":155,"author":{"gitID":"jingyinno"},"content":"        return formattedAliases;"},{"lineNumber":156,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":158,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"jingyinno"},"content":"     * Returns an ArrayList of ArrayList of aliases organised by rows of commands."},{"lineNumber":160,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"jingyinno"},"content":"    private ArrayList\u003cArrayList\u003cString\u003e\u003e formatArrayListForUi(ArrayList\u003cArrayList\u003cString\u003e\u003e aliases, int largest) {"},{"lineNumber":162,"author":{"gitID":"jingyinno"},"content":"        ArrayList\u003cArrayList\u003cString\u003e\u003e formattedAliases \u003d new ArrayList\u003c\u003e();"},{"lineNumber":163,"author":{"gitID":"jingyinno"},"content":"        for (int j \u003d 0; j \u003c largest; j++) {"},{"lineNumber":164,"author":{"gitID":"jingyinno"},"content":"            generateAliasColumn(aliases, formattedAliases, j);"},{"lineNumber":165,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":166,"author":{"gitID":"jingyinno"},"content":"        return formattedAliases;"},{"lineNumber":167,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":169,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":170,"author":{"gitID":"jingyinno"},"content":"     * Generates an ArrayList of a row of aliases for all the commands."},{"lineNumber":171,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":172,"author":{"gitID":"jingyinno"},"content":"    private void generateAliasColumn(ArrayList\u003cArrayList\u003cString\u003e\u003e aliases,"},{"lineNumber":173,"author":{"gitID":"jingyinno"},"content":"                                     ArrayList\u003cArrayList\u003cString\u003e\u003e formattedAliases, int j) {"},{"lineNumber":174,"author":{"gitID":"jingyinno"},"content":"        formattedAliases.add(new ArrayList\u003c\u003e());"},{"lineNumber":175,"author":{"gitID":"jingyinno"},"content":"        for (int i \u003d 0; i \u003c AliasCommand.getCommands().size(); i++) {"},{"lineNumber":176,"author":{"gitID":"jingyinno"},"content":"            formattedAliases.get(j).add(aliases.get(i).get(j));"},{"lineNumber":177,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":180,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"jingyinno"},"content":"     * Groups alias mappings by command."},{"lineNumber":182,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":183,"author":{"gitID":"jingyinno"},"content":"    private void convertAliasHashmapToArrayList(ArrayList\u003cArrayList\u003cString\u003e\u003e aliases) {"},{"lineNumber":184,"author":{"gitID":"jingyinno"},"content":"        for (int i \u003d 0; i \u003c AliasCommand.getCommands().size(); i++) {"},{"lineNumber":185,"author":{"gitID":"jingyinno"},"content":"            aliases.add(new ArrayList\u003c\u003e());"},{"lineNumber":186,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":188,"author":{"gitID":"jingyinno"},"content":"        String[] sortedKeys \u003d sortAliasKeysByAlphabeticalOrder();"},{"lineNumber":189,"author":{"gitID":"jingyinno"},"content":"        for (String key: sortedKeys) {"},{"lineNumber":190,"author":{"gitID":"jingyinno"},"content":"            String command \u003d aliasCommandMap.get(key);"},{"lineNumber":191,"author":{"gitID":"jingyinno"},"content":"            aliases.get(AliasCommand.getCommands().indexOf(command)).add(key);"},{"lineNumber":192,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":195,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":196,"author":{"gitID":"jingyinno"},"content":"     * Sorts aliases by alphabetical order."},{"lineNumber":197,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":198,"author":{"gitID":"jingyinno"},"content":"    private String[] sortAliasKeysByAlphabeticalOrder() {"},{"lineNumber":199,"author":{"gitID":"jingyinno"},"content":"        String[] sortedKeys \u003d aliasCommandMap.keySet().toArray(new String[0]);"},{"lineNumber":200,"author":{"gitID":"jingyinno"},"content":"        Arrays.sort(sortedKeys);"},{"lineNumber":201,"author":{"gitID":"jingyinno"},"content":"        return sortedKeys;"},{"lineNumber":202,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":204,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":205,"author":{"gitID":"jingyinno"},"content":"     * Finds the largest alias group among all the commands."},{"lineNumber":206,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":207,"author":{"gitID":"jingyinno"},"content":"    private int findMaxCommandAliasSize(ArrayList\u003cArrayList\u003cString\u003e\u003e aliases) {"},{"lineNumber":208,"author":{"gitID":"jingyinno"},"content":"        int largest \u003d Integer.MIN_VALUE;"},{"lineNumber":209,"author":{"gitID":"jingyinno"},"content":"        for (ArrayList\u003cString\u003e list : aliases) {"},{"lineNumber":210,"author":{"gitID":"jingyinno"},"content":"            largest \u003d Math.max(largest, list.size());"},{"lineNumber":211,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":212,"author":{"gitID":"jingyinno"},"content":"        return largest;"},{"lineNumber":213,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":215,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":216,"author":{"gitID":"jingyinno"},"content":"     * Generate empty cells in alias ArrayList."},{"lineNumber":217,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":218,"author":{"gitID":"jingyinno"},"content":"    private void populateEmptyAliasCells(ArrayList\u003cArrayList\u003cString\u003e\u003e aliases, int largest) {"},{"lineNumber":219,"author":{"gitID":"jingyinno"},"content":"        for (ArrayList\u003cString\u003e list : aliases) {"},{"lineNumber":220,"author":{"gitID":"jingyinno"},"content":"            while (list.size() \u003c largest) {"},{"lineNumber":221,"author":{"gitID":"jingyinno"},"content":"                list.add(EMPTY_CELL);"},{"lineNumber":222,"author":{"gitID":"jingyinno"},"content":"            }"},{"lineNumber":223,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":224,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"jingyinno"},"content":"}"}],"authorContributionMap":{"jingyinno":211,"-":14}},{"path":"src/main/java/seedu/address/model/alias/Alias.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.alias;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"jingyinno"},"content":"//@@author jingyinno"},{"lineNumber":7,"author":{"gitID":"jingyinno"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"jingyinno"},"content":" * Represents an Alias in the address book."},{"lineNumber":9,"author":{"gitID":"jingyinno"},"content":" * Guarantees: immutable; alias and command are valid as declared in {@link #isValidAliasParameter(String)}"},{"lineNumber":10,"author":{"gitID":"jingyinno"},"content":" */"},{"lineNumber":11,"author":{"gitID":"jingyinno"},"content":"public class Alias {"},{"lineNumber":12,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":13,"author":{"gitID":"jingyinno"},"content":"    public static final String MESSAGE_ALIAS_CONSTRAINTS \u003d \"Alias arguments should be alphanumeric\";"},{"lineNumber":14,"author":{"gitID":"jingyinno"},"content":"    public static final String ALIAS_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"},{"lineNumber":15,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":16,"author":{"gitID":"jingyinno"},"content":"    private final String command;"},{"lineNumber":17,"author":{"gitID":"jingyinno"},"content":"    private final String aliasName;"},{"lineNumber":18,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":19,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"jingyinno"},"content":"     * Constructs an {@code Alias}."},{"lineNumber":21,"author":{"gitID":"jingyinno"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"jingyinno"},"content":"     * @param command A valid command word"},{"lineNumber":23,"author":{"gitID":"jingyinno"},"content":"     * @param aliasName A valid alias name."},{"lineNumber":24,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"jingyinno"},"content":"    public Alias(String command, String aliasName) {"},{"lineNumber":26,"author":{"gitID":"jingyinno"},"content":"        requireNonNull(aliasName);"},{"lineNumber":27,"author":{"gitID":"jingyinno"},"content":"        checkArgument(isValidAliasParameter(aliasName), MESSAGE_ALIAS_CONSTRAINTS);"},{"lineNumber":28,"author":{"gitID":"jingyinno"},"content":"        checkArgument(isValidAliasParameter(command), MESSAGE_ALIAS_CONSTRAINTS);"},{"lineNumber":29,"author":{"gitID":"jingyinno"},"content":"        this.aliasName \u003d aliasName;"},{"lineNumber":30,"author":{"gitID":"jingyinno"},"content":"        this.command \u003d command;"},{"lineNumber":31,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":33,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"jingyinno"},"content":"     *"},{"lineNumber":35,"author":{"gitID":"jingyinno"},"content":"     * @return the command word"},{"lineNumber":36,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"jingyinno"},"content":"    public String getCommand() {"},{"lineNumber":38,"author":{"gitID":"jingyinno"},"content":"        return command;"},{"lineNumber":39,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":41,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"jingyinno"},"content":"     *"},{"lineNumber":43,"author":{"gitID":"jingyinno"},"content":"     * @return the alias name"},{"lineNumber":44,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"jingyinno"},"content":"    public String getAlias() {"},{"lineNumber":46,"author":{"gitID":"jingyinno"},"content":"        return aliasName;"},{"lineNumber":47,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":49,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"jingyinno"},"content":"     * Returns true if a given string is a valid Alias parameter."},{"lineNumber":51,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"jingyinno"},"content":"    public static boolean isValidAliasParameter(String test) {"},{"lineNumber":53,"author":{"gitID":"jingyinno"},"content":"        return test.matches(ALIAS_VALIDATION_REGEX);"},{"lineNumber":54,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":56,"author":{"gitID":"jingyinno"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"jingyinno"},"content":"    public boolean equals(Object other) {"},{"lineNumber":58,"author":{"gitID":"jingyinno"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":59,"author":{"gitID":"jingyinno"},"content":"                || (other instanceof Alias // instanceof handles nulls"},{"lineNumber":60,"author":{"gitID":"jingyinno"},"content":"                \u0026\u0026 this.aliasName.equals(((Alias) other).aliasName)"},{"lineNumber":61,"author":{"gitID":"jingyinno"},"content":"                \u0026\u0026 this.command.equals(((Alias) other).command)); // state check"},{"lineNumber":62,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":64,"author":{"gitID":"jingyinno"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"jingyinno"},"content":"    public int hashCode() {"},{"lineNumber":66,"author":{"gitID":"jingyinno"},"content":"        return aliasName.hashCode();"},{"lineNumber":67,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":69,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"jingyinno"},"content":"     * Format state as text for viewing."},{"lineNumber":71,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"jingyinno"},"content":"    public String toString() {"},{"lineNumber":73,"author":{"gitID":"jingyinno"},"content":"        return \u0027[\u0027 + aliasName + \u0027]\u0027;"},{"lineNumber":74,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":76,"author":{"gitID":"jingyinno"},"content":"}"}],"authorContributionMap":{"jingyinno":71,"-":5}},{"path":"src/main/java/seedu/address/storage/CancellableServerReceiver.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"Caijun7"},"content":"import java.io.PrintWriter;"},{"lineNumber":5,"author":{"gitID":"Caijun7"},"content":"import java.net.Socket;"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":"import java.util.concurrent.TimeUnit;"},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":"import java.util.concurrent.locks.Condition;"},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":"import java.util.concurrent.locks.Lock;"},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":"import java.util.concurrent.locks.ReentrantLock;"},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":"import javax.servlet.http.HttpServletRequest;"},{"lineNumber":12,"author":{"gitID":"Caijun7"},"content":"import javax.servlet.http.HttpServletResponse;"},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":14,"author":{"gitID":"Caijun7"},"content":"import org.mortbay.jetty.Connector;"},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":"import org.mortbay.jetty.Request;"},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":"import org.mortbay.jetty.Server;"},{"lineNumber":17,"author":{"gitID":"Caijun7"},"content":"import org.mortbay.jetty.handler.AbstractHandler;"},{"lineNumber":18,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":"import com.google.api.client.extensions.java6.auth.oauth2.VerificationCodeReceiver;"},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":"import com.google.api.client.repackaged.com.google.common.base.Throwables;"},{"lineNumber":21,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":22,"content":"//@@author Caijun7-reused"},{"lineNumber":23,"author":{"gitID":"Caijun7"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"Caijun7"},"content":" * A cancellable Server Receiver."},{"lineNumber":25,"author":{"gitID":"Caijun7"},"content":" */"},{"lineNumber":26,"author":{"gitID":"Caijun7"},"content":"class CancellableServerReceiver implements VerificationCodeReceiver {"},{"lineNumber":27,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":28,"author":{"gitID":"Caijun7"},"content":"    private static final String LOCALHOST \u003d \"localhost\";"},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":"    private static final String CALLBACK_PATH \u003d \"/Callback\";"},{"lineNumber":30,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":31,"author":{"gitID":"Caijun7"},"content":"    private Server server;"},{"lineNumber":32,"author":{"gitID":"Caijun7"},"content":"    private String code;"},{"lineNumber":33,"author":{"gitID":"Caijun7"},"content":"    private String error;"},{"lineNumber":34,"author":{"gitID":"Caijun7"},"content":"    private final Lock lock \u003d new ReentrantLock();"},{"lineNumber":35,"author":{"gitID":"Caijun7"},"content":"    private final Condition gotAuthorizationResponse \u003d lock.newCondition();"},{"lineNumber":36,"author":{"gitID":"Caijun7"},"content":"    private int port;"},{"lineNumber":37,"author":{"gitID":"Caijun7"},"content":"    private final String host;"},{"lineNumber":38,"author":{"gitID":"Caijun7"},"content":"    private final String callbackPath;"},{"lineNumber":39,"author":{"gitID":"Caijun7"},"content":"    private String successLandingPageUrl;"},{"lineNumber":40,"author":{"gitID":"Caijun7"},"content":"    private String failureLandingPageUrl;"},{"lineNumber":41,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":42,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"Caijun7"},"content":"     * Constructor that starts the server on {@link #LOCALHOST} and an unused port."},{"lineNumber":44,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"Caijun7"},"content":"    public CancellableServerReceiver() {"},{"lineNumber":46,"author":{"gitID":"Caijun7"},"content":"        this(LOCALHOST, -1, CALLBACK_PATH, null, null);"},{"lineNumber":47,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":49,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"Caijun7"},"content":"     * Constructor."},{"lineNumber":51,"author":{"gitID":"Caijun7"},"content":"     *"},{"lineNumber":52,"author":{"gitID":"Caijun7"},"content":"     * @param host Host name to use"},{"lineNumber":53,"author":{"gitID":"Caijun7"},"content":"     * @param port Port to use or {@code -1} to select an unused port"},{"lineNumber":54,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"Caijun7"},"content":"    CancellableServerReceiver(String host, int port, String callbackPath,"},{"lineNumber":56,"author":{"gitID":"Caijun7"},"content":"                              String successLandingPageUrl, String failureLandingPageUrl) {"},{"lineNumber":57,"author":{"gitID":"Caijun7"},"content":"        this.host \u003d host;"},{"lineNumber":58,"author":{"gitID":"Caijun7"},"content":"        this.port \u003d port;"},{"lineNumber":59,"author":{"gitID":"Caijun7"},"content":"        this.callbackPath \u003d callbackPath;"},{"lineNumber":60,"author":{"gitID":"Caijun7"},"content":"        this.successLandingPageUrl \u003d successLandingPageUrl;"},{"lineNumber":61,"author":{"gitID":"Caijun7"},"content":"        this.failureLandingPageUrl \u003d failureLandingPageUrl;"},{"lineNumber":62,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":64,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"Caijun7"},"content":"    public String getRedirectUri() throws IOException {"},{"lineNumber":66,"author":{"gitID":"Caijun7"},"content":"        if (port \u003d\u003d -1) {"},{"lineNumber":67,"author":{"gitID":"Caijun7"},"content":"            port \u003d getUnusedPort();"},{"lineNumber":68,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"Caijun7"},"content":"        server \u003d new Server(port);"},{"lineNumber":70,"author":{"gitID":"Caijun7"},"content":"        for (Connector c : server.getConnectors()) {"},{"lineNumber":71,"author":{"gitID":"Caijun7"},"content":"            c.setHost(host);"},{"lineNumber":72,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"Caijun7"},"content":"        server.addHandler(new CallbackHandler());"},{"lineNumber":74,"author":{"gitID":"Caijun7"},"content":"        try {"},{"lineNumber":75,"author":{"gitID":"Caijun7"},"content":"            server.start();"},{"lineNumber":76,"author":{"gitID":"Caijun7"},"content":"        } catch (Exception ex) {"},{"lineNumber":77,"author":{"gitID":"Caijun7"},"content":"            Throwables.propagateIfPossible(ex);"},{"lineNumber":78,"author":{"gitID":"Caijun7"},"content":"            throw new IOException(ex);"},{"lineNumber":79,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"Caijun7"},"content":"        return \"http://\" + host + \":\" + port + CALLBACK_PATH;"},{"lineNumber":81,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":83,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"Caijun7"},"content":"     * Locks the thread and wait for the authorization code"},{"lineNumber":85,"author":{"gitID":"Caijun7"},"content":"     *"},{"lineNumber":86,"author":{"gitID":"Caijun7"},"content":"     * @throws IOException      When user decline access"},{"lineNumber":87,"author":{"gitID":"Caijun7"},"content":"     * @throws RuntimeException When authorization request timed out after 10 seconds"},{"lineNumber":88,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":90,"author":{"gitID":"Caijun7"},"content":"    public String waitForCode() throws IOException {"},{"lineNumber":91,"author":{"gitID":"Caijun7"},"content":"        lock.lock();"},{"lineNumber":92,"author":{"gitID":"Caijun7"},"content":"        try {"},{"lineNumber":93,"author":{"gitID":"Caijun7"},"content":"            long startTime \u003d System.currentTimeMillis();"},{"lineNumber":94,"author":{"gitID":"Caijun7"},"content":"            while (code \u003d\u003d null \u0026\u0026 error \u003d\u003d null) {"},{"lineNumber":95,"author":{"gitID":"Caijun7"},"content":"                long elapsed \u003d System.currentTimeMillis() - startTime;"},{"lineNumber":96,"author":{"gitID":"Caijun7"},"content":"                if (elapsed \u003e 10000) {"},{"lineNumber":97,"author":{"gitID":"Caijun7"},"content":"                    throw new RuntimeException(\"Request timeout (\" + error + \")\");"},{"lineNumber":98,"author":{"gitID":"Caijun7"},"content":"                }"},{"lineNumber":99,"author":{"gitID":"Caijun7"},"content":"                gotAuthorizationResponse.await(10, TimeUnit.SECONDS);"},{"lineNumber":100,"author":{"gitID":"Caijun7"},"content":"            }"},{"lineNumber":101,"author":{"gitID":"Caijun7"},"content":"            if (error !\u003d null) {"},{"lineNumber":102,"author":{"gitID":"Caijun7"},"content":"                throw new IOException(\"User authorization failed (\" + error + \")\");"},{"lineNumber":103,"author":{"gitID":"Caijun7"},"content":"            }"},{"lineNumber":104,"author":{"gitID":"Caijun7"},"content":"            return code;"},{"lineNumber":105,"author":{"gitID":"Caijun7"},"content":"        } catch (InterruptedException e) {"},{"lineNumber":106,"author":{"gitID":"Caijun7"},"content":"            throw new RuntimeException(\"Request timeout (\" + error + \")\");"},{"lineNumber":107,"author":{"gitID":"Caijun7"},"content":"        } finally {"},{"lineNumber":108,"author":{"gitID":"Caijun7"},"content":"            lock.unlock();"},{"lineNumber":109,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":112,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":113,"author":{"gitID":"Caijun7"},"content":"    public void stop() throws IOException {"},{"lineNumber":114,"author":{"gitID":"Caijun7"},"content":"        if (server !\u003d null) {"},{"lineNumber":115,"author":{"gitID":"Caijun7"},"content":"            try {"},{"lineNumber":116,"author":{"gitID":"Caijun7"},"content":"                server.stop();"},{"lineNumber":117,"author":{"gitID":"Caijun7"},"content":"            } catch (Exception ex) {"},{"lineNumber":118,"author":{"gitID":"Caijun7"},"content":"                Throwables.propagateIfPossible(ex);"},{"lineNumber":119,"author":{"gitID":"Caijun7"},"content":"                throw new IOException(ex);"},{"lineNumber":120,"author":{"gitID":"Caijun7"},"content":"            }"},{"lineNumber":121,"author":{"gitID":"Caijun7"},"content":"            lock.lock();"},{"lineNumber":122,"author":{"gitID":"Caijun7"},"content":"            try {"},{"lineNumber":123,"author":{"gitID":"Caijun7"},"content":"                code \u003d null;"},{"lineNumber":124,"author":{"gitID":"Caijun7"},"content":"                gotAuthorizationResponse.signal();"},{"lineNumber":125,"author":{"gitID":"Caijun7"},"content":"            } finally {"},{"lineNumber":126,"author":{"gitID":"Caijun7"},"content":"                lock.unlock();"},{"lineNumber":127,"author":{"gitID":"Caijun7"},"content":"            }"},{"lineNumber":128,"author":{"gitID":"Caijun7"},"content":"            server \u003d null;"},{"lineNumber":129,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":132,"author":{"gitID":"Caijun7"},"content":"    private static int getUnusedPort() throws IOException {"},{"lineNumber":133,"author":{"gitID":"Caijun7"},"content":"        Socket socket \u003d new Socket();"},{"lineNumber":134,"author":{"gitID":"Caijun7"},"content":"        socket.bind(null);"},{"lineNumber":135,"author":{"gitID":"Caijun7"},"content":"        try {"},{"lineNumber":136,"author":{"gitID":"Caijun7"},"content":"            return socket.getLocalPort();"},{"lineNumber":137,"author":{"gitID":"Caijun7"},"content":"        } finally {"},{"lineNumber":138,"author":{"gitID":"Caijun7"},"content":"            socket.close();"},{"lineNumber":139,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":142,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"Caijun7"},"content":"     * Jetty handler that takes the verifier token passed over from the OAuth provider and stashes it"},{"lineNumber":144,"author":{"gitID":"Caijun7"},"content":"     * where {@link #waitForCode} will find it."},{"lineNumber":145,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"Caijun7"},"content":"    class CallbackHandler extends AbstractHandler {"},{"lineNumber":147,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":148,"author":{"gitID":"Caijun7"},"content":"        @Override"},{"lineNumber":149,"author":{"gitID":"Caijun7"},"content":"        public void handle(String target, HttpServletRequest request, HttpServletResponse response, int dispatch)"},{"lineNumber":150,"author":{"gitID":"Caijun7"},"content":"                throws IOException {"},{"lineNumber":151,"author":{"gitID":"Caijun7"},"content":"            if (!CALLBACK_PATH.equals(target)) {"},{"lineNumber":152,"author":{"gitID":"Caijun7"},"content":"                return;"},{"lineNumber":153,"author":{"gitID":"Caijun7"},"content":"            }"},{"lineNumber":154,"author":{"gitID":"Caijun7"},"content":"            Request requestWrapper \u003d (Request) request;"},{"lineNumber":155,"author":{"gitID":"Caijun7"},"content":"            requestWrapper.setHandled(true);"},{"lineNumber":156,"author":{"gitID":"Caijun7"},"content":"            lock.lock();"},{"lineNumber":157,"author":{"gitID":"Caijun7"},"content":"            try {"},{"lineNumber":158,"author":{"gitID":"Caijun7"},"content":"                error \u003d request.getParameter(\"error\");"},{"lineNumber":159,"author":{"gitID":"Caijun7"},"content":"                code \u003d request.getParameter(\"code\");"},{"lineNumber":160,"author":{"gitID":"Caijun7"},"content":"                gotAuthorizationResponse.signal();"},{"lineNumber":161,"author":{"gitID":"Caijun7"},"content":"            } finally {"},{"lineNumber":162,"author":{"gitID":"Caijun7"},"content":"                lock.unlock();"},{"lineNumber":163,"author":{"gitID":"Caijun7"},"content":"            }"},{"lineNumber":164,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":165,"author":{"gitID":"Caijun7"},"content":"            if (error \u003d\u003d null \u0026\u0026 successLandingPageUrl !\u003d null) {"},{"lineNumber":166,"author":{"gitID":"Caijun7"},"content":"                response.sendRedirect(successLandingPageUrl);"},{"lineNumber":167,"author":{"gitID":"Caijun7"},"content":"            } else if (error !\u003d null \u0026\u0026 failureLandingPageUrl !\u003d null) {"},{"lineNumber":168,"author":{"gitID":"Caijun7"},"content":"                response.sendRedirect(failureLandingPageUrl);"},{"lineNumber":169,"author":{"gitID":"Caijun7"},"content":"            } else {"},{"lineNumber":170,"author":{"gitID":"Caijun7"},"content":"                writeLandingHtml(response);"},{"lineNumber":171,"author":{"gitID":"Caijun7"},"content":"            }"},{"lineNumber":172,"author":{"gitID":"Caijun7"},"content":"            response.flushBuffer();"},{"lineNumber":173,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":175,"author":{"gitID":"Caijun7"},"content":"        /**"},{"lineNumber":176,"author":{"gitID":"Caijun7"},"content":"         * Produces the landing html page after user accept the authorization request"},{"lineNumber":177,"author":{"gitID":"Caijun7"},"content":"         *"},{"lineNumber":178,"author":{"gitID":"Caijun7"},"content":"         * @param response"},{"lineNumber":179,"author":{"gitID":"Caijun7"},"content":"         * @throws IOException"},{"lineNumber":180,"author":{"gitID":"Caijun7"},"content":"         */"},{"lineNumber":181,"author":{"gitID":"Caijun7"},"content":"        private void writeLandingHtml(HttpServletResponse response) throws IOException {"},{"lineNumber":182,"author":{"gitID":"Caijun7"},"content":"            response.setStatus(HttpServletResponse.SC_OK);"},{"lineNumber":183,"author":{"gitID":"Caijun7"},"content":"            response.setContentType(\"text/html\");"},{"lineNumber":184,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":185,"author":{"gitID":"Caijun7"},"content":"            PrintWriter doc \u003d response.getWriter();"},{"lineNumber":186,"author":{"gitID":"Caijun7"},"content":"            doc.println(\"\u003chtml\u003e\");"},{"lineNumber":187,"author":{"gitID":"Caijun7"},"content":"            doc.println(\"\u003chead\u003e\u003ctitle\u003eOAuth 2.0 Authentication Token Received\u003c/title\u003e\u003c/head\u003e\");"},{"lineNumber":188,"author":{"gitID":"Caijun7"},"content":"            doc.println(\"\u003cbody\u003e\");"},{"lineNumber":189,"author":{"gitID":"Caijun7"},"content":"            doc.println(\"Received verification code. You may now close this window.\");"},{"lineNumber":190,"author":{"gitID":"Caijun7"},"content":"            doc.println(\"\u003c/body\u003e\");"},{"lineNumber":191,"author":{"gitID":"Caijun7"},"content":"            doc.println(\"\u003c/html\u003e\");"},{"lineNumber":192,"author":{"gitID":"Caijun7"},"content":"            doc.flush();"},{"lineNumber":193,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"null":1,"Caijun7":191,"-":3}},{"path":"src/main/java/seedu/address/model/person/UniquePersonList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":17,"author":{"gitID":"-"},"content":" *"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":19,"author":{"gitID":"-"},"content":" *"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * @see Person#equals(Object)"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public boolean contains(Person toCheck) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Adds a person to the list."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the person to add is a duplicate of an existing person in the list."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void add(Person toAdd) throws DuplicatePersonException {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"Caijun7"},"content":"    //@@author Caijun7"},{"lineNumber":49,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"Caijun7"},"content":"     * Adds a person to the list if the person is not a duplicate of an existing person in the list"},{"lineNumber":51,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"Caijun7"},"content":"    public void importPerson(Person toAdd) {"},{"lineNumber":53,"author":{"gitID":"Caijun7"},"content":"        requireNonNull(toAdd);"},{"lineNumber":54,"author":{"gitID":"Caijun7"},"content":"        if (!contains(toAdd)) {"},{"lineNumber":55,"author":{"gitID":"Caijun7"},"content":"            internalList.add(toAdd);"},{"lineNumber":56,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"Caijun7"},"content":"    //@@author"},{"lineNumber":59,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the replacement is equivalent to another existing person in the list."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void setPerson(Person target, Person editedPerson)"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        if (!target.equals(editedPerson) \u0026\u0026 internalList.contains(editedPerson)) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        internalList.set(index, editedPerson);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Removes the equivalent person from the list."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if no such person could be found in the list."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public boolean remove(Person toRemove) throws PersonNotFoundException {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        requireNonNull(toRemove);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        final boolean personFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        if (!personFoundAndDeleted) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return personFoundAndDeleted;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public void setPersons(UniquePersonList replacement) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        requireAllNonNull(persons);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        final UniquePersonList replacement \u003d new UniquePersonList();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        for (final Person person : persons) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            replacement.add(person);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        setPersons(replacement);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e asObservableList() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                        \u0026\u0026 this.internalList.equals(((UniquePersonList) other).internalList));"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Caijun7":12,"-":120}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.timetable.Timetable;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class Person {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Phone phone;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Email email;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Address address;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Birthday birthday;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Timetable timetable;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Birthday birthday,"},{"lineNumber":32,"author":{"gitID":"-"},"content":"                  Timetable timetable, Set\u003cTag\u003e tags) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        requireAllNonNull(name, phone, email, address, birthday, timetable, tags);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.birthday \u003d birthday;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.timetable \u003d timetable;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"Caijun7"},"content":"    public Birthday getBirthday() {"},{"lineNumber":61,"author":{"gitID":"Caijun7"},"content":"        return birthday;"},{"lineNumber":62,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public Timetable getTimetable() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return timetable;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return otherPerson.getName().equals(this.getName())"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress())"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getBirthday().equals(this.getBirthday());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return Objects.hash(name, phone, email, address, birthday, timetable, tags);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":104,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":105,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":107,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                .append(\" Address: \")"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                .append(getAddress())"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                .append(\" Birthday: \")"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                .append(getBirthday())"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                .append(\" Timetable: \")"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                .append(getTimetable())"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Caijun7":3,"-":116}},{"path":"src/main/java/seedu/address/model/alias/exceptions/AliasNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.alias.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"jingyinno"},"content":"//@@author jingyinno"},{"lineNumber":6,"author":{"gitID":"jingyinno"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"jingyinno"},"content":" * Signals that the operation is unable to find the specified alias."},{"lineNumber":8,"author":{"gitID":"jingyinno"},"content":" */"},{"lineNumber":9,"author":{"gitID":"jingyinno"},"content":"public class AliasNotFoundException extends CommandException {"},{"lineNumber":10,"author":{"gitID":"jingyinno"},"content":"    public AliasNotFoundException() {"},{"lineNumber":11,"author":{"gitID":"jingyinno"},"content":"        super(\"Alias does not exist.\");"},{"lineNumber":12,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"jingyinno"},"content":"}"}],"authorContributionMap":{"jingyinno":9,"-":4}},{"path":"src/main/java/seedu/address/model/person/Birthday.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"AzuraAiR"},"content":"//@@author AzuraAiR"},{"lineNumber":8,"author":{"gitID":"AzuraAiR"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"AzuraAiR"},"content":" * Represents a Person\u0027s birthday in the address book."},{"lineNumber":10,"author":{"gitID":"AzuraAiR"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidBirthday(String)}"},{"lineNumber":11,"author":{"gitID":"AzuraAiR"},"content":" */"},{"lineNumber":12,"author":{"gitID":"AzuraAiR"},"content":"public class Birthday {"},{"lineNumber":13,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":14,"author":{"gitID":"AzuraAiR"},"content":"    public static final String MESSAGE_BIRTHDAY_CONSTRAINTS \u003d"},{"lineNumber":15,"author":{"gitID":"AzuraAiR"},"content":"            \"Birthday date can only contain numbers, and should follow the DDMMYYYY format\";"},{"lineNumber":16,"author":{"gitID":"AzuraAiR"},"content":"    public static final String MESSAGE_INVALID_BIRTHDAY \u003d"},{"lineNumber":17,"author":{"gitID":"AzuraAiR"},"content":"            \"Birthday day is invalid\";"},{"lineNumber":18,"author":{"gitID":"AzuraAiR"},"content":"    public static final String MESSAGE_INVALID_BIRTHMONTH \u003d"},{"lineNumber":19,"author":{"gitID":"AzuraAiR"},"content":"            \"Birthday month is invalid\";"},{"lineNumber":20,"author":{"gitID":"AzuraAiR"},"content":"    public static final String MESSAGE_FUTURE_BIRTHDAY \u003d"},{"lineNumber":21,"author":{"gitID":"AzuraAiR"},"content":"            \"Birthday is set in the future\";"},{"lineNumber":22,"author":{"gitID":"AzuraAiR"},"content":"    public static final String BIRTHDAY_VALIDATION_REGEX \u003d \"\\\\d{8,8}\";"},{"lineNumber":23,"author":{"gitID":"AzuraAiR"},"content":"    public final String value;"},{"lineNumber":24,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":25,"author":{"gitID":"AzuraAiR"},"content":"    private int day;"},{"lineNumber":26,"author":{"gitID":"AzuraAiR"},"content":"    private int month;"},{"lineNumber":27,"author":{"gitID":"AzuraAiR"},"content":"    private int year;"},{"lineNumber":28,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":29,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"AzuraAiR"},"content":"     * Constructs a {@code Birthday}."},{"lineNumber":31,"author":{"gitID":"AzuraAiR"},"content":"     *  @param birthday A birthday number."},{"lineNumber":32,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"AzuraAiR"},"content":"    public Birthday(String birthday) {"},{"lineNumber":34,"author":{"gitID":"AzuraAiR"},"content":"        requireNonNull(birthday);"},{"lineNumber":35,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":36,"author":{"gitID":"AzuraAiR"},"content":"        if (isValidBirthday(birthday)) {"},{"lineNumber":37,"author":{"gitID":"AzuraAiR"},"content":"            this.value \u003d birthday;"},{"lineNumber":38,"author":{"gitID":"AzuraAiR"},"content":"            this.day \u003d parseDay(birthday);"},{"lineNumber":39,"author":{"gitID":"AzuraAiR"},"content":"            this.month \u003d parseMonth(birthday);"},{"lineNumber":40,"author":{"gitID":"AzuraAiR"},"content":"            this.year \u003d parseYear(birthday);"},{"lineNumber":41,"author":{"gitID":"AzuraAiR"},"content":"        } else {"},{"lineNumber":42,"author":{"gitID":"AzuraAiR"},"content":"            this.value \u003d null;"},{"lineNumber":43,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":46,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"AzuraAiR"},"content":"     * Checks if given birthday string is valid"},{"lineNumber":48,"author":{"gitID":"AzuraAiR"},"content":"     * @param test Birthday to be tested"},{"lineNumber":49,"author":{"gitID":"AzuraAiR"},"content":"     * @return true if birthday is valid"},{"lineNumber":50,"author":{"gitID":"AzuraAiR"},"content":"     * @throws IllegalArgumentException if birthday is invalid"},{"lineNumber":51,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"AzuraAiR"},"content":"    public static boolean isValidBirthday(String test) throws IllegalArgumentException {"},{"lineNumber":53,"author":{"gitID":"AzuraAiR"},"content":"        LocalDate today \u003d LocalDate.now();"},{"lineNumber":54,"author":{"gitID":"AzuraAiR"},"content":"        int testDay;"},{"lineNumber":55,"author":{"gitID":"AzuraAiR"},"content":"        int testMonth;"},{"lineNumber":56,"author":{"gitID":"AzuraAiR"},"content":"        int testYear;"},{"lineNumber":57,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":58,"author":{"gitID":"AzuraAiR"},"content":"        // Check for DDMMYYYY format"},{"lineNumber":59,"author":{"gitID":"AzuraAiR"},"content":"        if (test.matches(BIRTHDAY_VALIDATION_REGEX)) {"},{"lineNumber":60,"author":{"gitID":"AzuraAiR"},"content":"            testDay \u003d parseDay(test);"},{"lineNumber":61,"author":{"gitID":"AzuraAiR"},"content":"            testMonth \u003d parseMonth(test);"},{"lineNumber":62,"author":{"gitID":"AzuraAiR"},"content":"            testYear \u003d parseYear(test);"},{"lineNumber":63,"author":{"gitID":"AzuraAiR"},"content":"        } else {"},{"lineNumber":64,"author":{"gitID":"AzuraAiR"},"content":"            throw new IllegalArgumentException(MESSAGE_BIRTHDAY_CONSTRAINTS);"},{"lineNumber":65,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"AzuraAiR"},"content":"        // Check for valid year"},{"lineNumber":67,"author":{"gitID":"AzuraAiR"},"content":"        if (today.getYear() \u003c testYear) {"},{"lineNumber":68,"author":{"gitID":"AzuraAiR"},"content":"            throw new IllegalArgumentException(MESSAGE_FUTURE_BIRTHDAY);"},{"lineNumber":69,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"AzuraAiR"},"content":"        // Check for valid day"},{"lineNumber":71,"author":{"gitID":"AzuraAiR"},"content":"        if (testDay \u003d\u003d 0) {"},{"lineNumber":72,"author":{"gitID":"AzuraAiR"},"content":"            throw new IllegalArgumentException(MESSAGE_INVALID_BIRTHDAY);"},{"lineNumber":73,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":75,"author":{"gitID":"AzuraAiR"},"content":"        // Check for valid month and day"},{"lineNumber":76,"author":{"gitID":"AzuraAiR"},"content":"        switch (testMonth) {"},{"lineNumber":77,"author":{"gitID":"AzuraAiR"},"content":"        case 1:     // Jan"},{"lineNumber":78,"author":{"gitID":"AzuraAiR"},"content":"        case 3:     // Mar"},{"lineNumber":79,"author":{"gitID":"AzuraAiR"},"content":"        case 5:     // May"},{"lineNumber":80,"author":{"gitID":"AzuraAiR"},"content":"        case 7:     // Jul"},{"lineNumber":81,"author":{"gitID":"AzuraAiR"},"content":"        case 8:     // Aug"},{"lineNumber":82,"author":{"gitID":"AzuraAiR"},"content":"        case 10:    // Oct"},{"lineNumber":83,"author":{"gitID":"AzuraAiR"},"content":"        case 12:    // Dec"},{"lineNumber":84,"author":{"gitID":"AzuraAiR"},"content":"            if (testDay \u003e 31) {"},{"lineNumber":85,"author":{"gitID":"AzuraAiR"},"content":"                throw new IllegalArgumentException(MESSAGE_INVALID_BIRTHDAY);"},{"lineNumber":86,"author":{"gitID":"AzuraAiR"},"content":"            }"},{"lineNumber":87,"author":{"gitID":"AzuraAiR"},"content":"            break;"},{"lineNumber":88,"author":{"gitID":"AzuraAiR"},"content":"        case 4: // Apr"},{"lineNumber":89,"author":{"gitID":"AzuraAiR"},"content":"        case 6: // Jun"},{"lineNumber":90,"author":{"gitID":"AzuraAiR"},"content":"        case 9: // Sep"},{"lineNumber":91,"author":{"gitID":"AzuraAiR"},"content":"        case 11: // Nov"},{"lineNumber":92,"author":{"gitID":"AzuraAiR"},"content":"            if (testDay \u003e 30) {"},{"lineNumber":93,"author":{"gitID":"AzuraAiR"},"content":"                throw new IllegalArgumentException(MESSAGE_INVALID_BIRTHDAY);"},{"lineNumber":94,"author":{"gitID":"AzuraAiR"},"content":"            }"},{"lineNumber":95,"author":{"gitID":"AzuraAiR"},"content":"            break;"},{"lineNumber":96,"author":{"gitID":"AzuraAiR"},"content":"        case 2: // Feb"},{"lineNumber":97,"author":{"gitID":"AzuraAiR"},"content":"            if (testDay \u003e 28) {"},{"lineNumber":98,"author":{"gitID":"AzuraAiR"},"content":"                throw new IllegalArgumentException(MESSAGE_INVALID_BIRTHDAY);"},{"lineNumber":99,"author":{"gitID":"AzuraAiR"},"content":"            }"},{"lineNumber":100,"author":{"gitID":"AzuraAiR"},"content":"            break;"},{"lineNumber":101,"author":{"gitID":"AzuraAiR"},"content":"        default:"},{"lineNumber":102,"author":{"gitID":"AzuraAiR"},"content":"            throw new IllegalArgumentException(MESSAGE_INVALID_BIRTHMONTH);"},{"lineNumber":103,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":105,"author":{"gitID":"AzuraAiR"},"content":"        // Check for future date"},{"lineNumber":106,"author":{"gitID":"AzuraAiR"},"content":"        if (today.getYear() \u003d\u003d testYear) {"},{"lineNumber":107,"author":{"gitID":"AzuraAiR"},"content":"            if (today.getMonthValue() \u003c testMonth) {"},{"lineNumber":108,"author":{"gitID":"AzuraAiR"},"content":"                throw new IllegalArgumentException(MESSAGE_FUTURE_BIRTHDAY);"},{"lineNumber":109,"author":{"gitID":"AzuraAiR"},"content":"            } else if (today.getMonthValue() \u003d\u003d testMonth \u0026\u0026 today.getDayOfMonth() \u003c testDay) {"},{"lineNumber":110,"author":{"gitID":"AzuraAiR"},"content":"                throw new IllegalArgumentException(MESSAGE_FUTURE_BIRTHDAY);"},{"lineNumber":111,"author":{"gitID":"AzuraAiR"},"content":"            }"},{"lineNumber":112,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":114,"author":{"gitID":"AzuraAiR"},"content":"        return true;"},{"lineNumber":115,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":117,"author":{"gitID":"AzuraAiR"},"content":"    @Override"},{"lineNumber":118,"author":{"gitID":"AzuraAiR"},"content":"    public String toString() {"},{"lineNumber":119,"author":{"gitID":"AzuraAiR"},"content":"        return value;"},{"lineNumber":120,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":122,"author":{"gitID":"AzuraAiR"},"content":"    @Override"},{"lineNumber":123,"author":{"gitID":"AzuraAiR"},"content":"    public boolean equals(Object other) {"},{"lineNumber":124,"author":{"gitID":"AzuraAiR"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":125,"author":{"gitID":"AzuraAiR"},"content":"                || (other instanceof Birthday // instanceof handles nulls"},{"lineNumber":126,"author":{"gitID":"AzuraAiR"},"content":"                \u0026\u0026 this.value.equals(((Birthday) other).value)); // state check"},{"lineNumber":127,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":129,"author":{"gitID":"AzuraAiR"},"content":"    @Override"},{"lineNumber":130,"author":{"gitID":"AzuraAiR"},"content":"    public int hashCode() {"},{"lineNumber":131,"author":{"gitID":"AzuraAiR"},"content":"        return value.hashCode();"},{"lineNumber":132,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":134,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"AzuraAiR"},"content":"     * Parses Day from Birthday string"},{"lineNumber":136,"author":{"gitID":"AzuraAiR"},"content":"     * isValidBirthday() should be called before this method"},{"lineNumber":137,"author":{"gitID":"AzuraAiR"},"content":"     * @param birthday assumed to be of format DDMMYYYY"},{"lineNumber":138,"author":{"gitID":"AzuraAiR"},"content":"     * @return int Day"},{"lineNumber":139,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"AzuraAiR"},"content":"    private static int parseDay(String birthday) {"},{"lineNumber":141,"author":{"gitID":"AzuraAiR"},"content":"        return Integer.parseInt(birthday.substring(0, 2));"},{"lineNumber":142,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":144,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"AzuraAiR"},"content":"     * Parses Month from Birthday string"},{"lineNumber":146,"author":{"gitID":"AzuraAiR"},"content":"     * isValidBirthday() should be called before this method"},{"lineNumber":147,"author":{"gitID":"AzuraAiR"},"content":"     * @param birthday assumed to be of format DDMMYYYY"},{"lineNumber":148,"author":{"gitID":"AzuraAiR"},"content":"     * @return integer Month"},{"lineNumber":149,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"AzuraAiR"},"content":"    private static int parseMonth(String birthday) {"},{"lineNumber":151,"author":{"gitID":"AzuraAiR"},"content":"        return Integer.parseInt(birthday.substring(2, 4));"},{"lineNumber":152,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":154,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"AzuraAiR"},"content":"     * Parses Year from Birthday string"},{"lineNumber":156,"author":{"gitID":"AzuraAiR"},"content":"     * isValidBirthday() should be called before this method"},{"lineNumber":157,"author":{"gitID":"AzuraAiR"},"content":"     * @param birthday assumed to be of format DDMMYYYY"},{"lineNumber":158,"author":{"gitID":"AzuraAiR"},"content":"     * @return integer Year"},{"lineNumber":159,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"AzuraAiR"},"content":"    private static int parseYear(String birthday) {"},{"lineNumber":161,"author":{"gitID":"AzuraAiR"},"content":"        return Integer.parseInt(birthday.substring(4, 8));"},{"lineNumber":162,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":164,"author":{"gitID":"AzuraAiR"},"content":"    public int getDay() {"},{"lineNumber":165,"author":{"gitID":"AzuraAiR"},"content":"        return day;"},{"lineNumber":166,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":168,"author":{"gitID":"AzuraAiR"},"content":"    public int getMonth() {"},{"lineNumber":169,"author":{"gitID":"AzuraAiR"},"content":"        return month;"},{"lineNumber":170,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":172,"author":{"gitID":"AzuraAiR"},"content":"    public int getYear() {"},{"lineNumber":173,"author":{"gitID":"AzuraAiR"},"content":"        return year;"},{"lineNumber":174,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"AzuraAiR"},"content":"}"},{"lineNumber":176,"author":{"gitID":"AzuraAiR"},"content":""}],"authorContributionMap":{"AzuraAiR":170,"-":6}},{"path":"src/main/java/seedu/address/model/person/timetable/TimetableDay.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person.timetable;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.timetable.Lesson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"AzuraAiR"},"content":"//@@author AzuraAiR"},{"lineNumber":9,"author":{"gitID":"AzuraAiR"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"AzuraAiR"},"content":" * Represents a day in the timetable"},{"lineNumber":11,"author":{"gitID":"AzuraAiR"},"content":" */"},{"lineNumber":12,"author":{"gitID":"AzuraAiR"},"content":"public class TimetableDay {"},{"lineNumber":13,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":14,"author":{"gitID":"AzuraAiR"},"content":"    public static final int NUM_OF_SLOTS \u003d 24;"},{"lineNumber":15,"author":{"gitID":"AzuraAiR"},"content":"    public static final String MESSAGE_INVALID_TIMESLOT \u003d \"Time slot is invalid\";"},{"lineNumber":16,"author":{"gitID":"AzuraAiR"},"content":"    public static final String TITLE_OCCUPIED \u003d \"Occupied\";"},{"lineNumber":17,"author":{"gitID":"AzuraAiR"},"content":"    public static final String EMPTY_SLOT_STRING \u003d \"\";"},{"lineNumber":18,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":19,"author":{"gitID":"AzuraAiR"},"content":"    // Cut into 24-h slots. 0000 being timetableSlots[0] and 2300 being timetableSlots[23]"},{"lineNumber":20,"author":{"gitID":"AzuraAiR"},"content":"    private TimetableSlot[] timetableSlots;"},{"lineNumber":21,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":22,"author":{"gitID":"AzuraAiR"},"content":"    public TimetableDay() {"},{"lineNumber":23,"author":{"gitID":"AzuraAiR"},"content":"        timetableSlots \u003d new TimetableSlot[NUM_OF_SLOTS];"},{"lineNumber":24,"author":{"gitID":"AzuraAiR"},"content":"        for (int i \u003d 0; i \u003c NUM_OF_SLOTS; i++) {"},{"lineNumber":25,"author":{"gitID":"AzuraAiR"},"content":"            timetableSlots[i] \u003d new TimetableSlot();"},{"lineNumber":26,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":29,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"AzuraAiR"},"content":"     * Adds a lesson at its respective slot"},{"lineNumber":31,"author":{"gitID":"AzuraAiR"},"content":"     * @param lessonToAdd lesson to be added"},{"lineNumber":32,"author":{"gitID":"AzuraAiR"},"content":"     * @throws IllegalValueException when slot is invalid"},{"lineNumber":33,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"AzuraAiR"},"content":"    public void addLessonToDay(Lesson lessonToAdd) throws IllegalValueException {"},{"lineNumber":35,"author":{"gitID":"AzuraAiR"},"content":"        int startTimeIndex \u003d parseStartEndTime(lessonToAdd.getStartTime());"},{"lineNumber":36,"author":{"gitID":"AzuraAiR"},"content":"        int endTimeIndex \u003d parseStartEndTime(lessonToAdd.getEndTime());"},{"lineNumber":37,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":38,"author":{"gitID":"AzuraAiR"},"content":"        for (int i \u003d startTimeIndex; i \u003c endTimeIndex; i++) {"},{"lineNumber":39,"author":{"gitID":"AzuraAiR"},"content":"            timetableSlots[i].addLessonToSlot(lessonToAdd);"},{"lineNumber":40,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":43,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"AzuraAiR"},"content":"     * Parses the start and time parsed from NUSMods to a index to be used for array of slots"},{"lineNumber":45,"author":{"gitID":"AzuraAiR"},"content":"     * @param time timing from NUSMods"},{"lineNumber":46,"author":{"gitID":"AzuraAiR"},"content":"     * @return index for slot array"},{"lineNumber":47,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"AzuraAiR"},"content":"    public static int parseStartEndTime(String time) throws IllegalValueException {"},{"lineNumber":49,"author":{"gitID":"AzuraAiR"},"content":"        int value \u003d Integer.parseInt(time) / 100;"},{"lineNumber":50,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":51,"author":{"gitID":"AzuraAiR"},"content":"        if (isValidTimeSlot(value)) {"},{"lineNumber":52,"author":{"gitID":"AzuraAiR"},"content":"            return value;"},{"lineNumber":53,"author":{"gitID":"AzuraAiR"},"content":"        } else {"},{"lineNumber":54,"author":{"gitID":"AzuraAiR"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_TIMESLOT);"},{"lineNumber":55,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":58,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"AzuraAiR"},"content":"     * Returns the lesson at the specified slot, null if slot is empty"},{"lineNumber":60,"author":{"gitID":"AzuraAiR"},"content":"     * @param timeSlot"},{"lineNumber":61,"author":{"gitID":"AzuraAiR"},"content":"     * @return Lesson at the specified slot, null if slot is empty"},{"lineNumber":62,"author":{"gitID":"AzuraAiR"},"content":"     * @throws IllegalValueException when timeslot is invalid value"},{"lineNumber":63,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"AzuraAiR"},"content":"    public Lesson getLessonFromSlot(int timeSlot) throws IllegalValueException {"},{"lineNumber":65,"author":{"gitID":"AzuraAiR"},"content":"        if (timeSlot \u003e 0 \u0026\u0026 timeSlot \u003c\u003d 23) {"},{"lineNumber":66,"author":{"gitID":"AzuraAiR"},"content":"            return timetableSlots[timeSlot].getLesson();"},{"lineNumber":67,"author":{"gitID":"AzuraAiR"},"content":"        } else {"},{"lineNumber":68,"author":{"gitID":"AzuraAiR"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_TIMESLOT);"},{"lineNumber":69,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":72,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"AzuraAiR"},"content":"     * Checks if the given index is valid"},{"lineNumber":74,"author":{"gitID":"AzuraAiR"},"content":"     * @param index"},{"lineNumber":75,"author":{"gitID":"AzuraAiR"},"content":"     * @return true or false"},{"lineNumber":76,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"AzuraAiR"},"content":"    private static boolean isValidTimeSlot(int index) {"},{"lineNumber":78,"author":{"gitID":"AzuraAiR"},"content":"        return (index \u003c NUM_OF_SLOTS \u0026\u0026 index \u003e\u003d 0);"},{"lineNumber":79,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":81,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"AzuraAiR"},"content":"     * Returns the Time Table for the day"},{"lineNumber":83,"author":{"gitID":"AzuraAiR"},"content":"     * @return ArrayList with the  Time Table"},{"lineNumber":84,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"AzuraAiR"},"content":"    public ArrayList\u003cString\u003e getDailyTimeTable() {"},{"lineNumber":86,"author":{"gitID":"AzuraAiR"},"content":"        ArrayList\u003cString\u003e timetable \u003d new ArrayList\u003c\u003e();"},{"lineNumber":87,"author":{"gitID":"AzuraAiR"},"content":"        for (int i \u003d 8; i \u003c 22; i++) {"},{"lineNumber":88,"author":{"gitID":"AzuraAiR"},"content":"            TimetableSlot t \u003d timetableSlots[i];"},{"lineNumber":89,"author":{"gitID":"AzuraAiR"},"content":"            timetable.add(t.toString());"},{"lineNumber":90,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"AzuraAiR"},"content":"        return timetable;"},{"lineNumber":92,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":94,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"AzuraAiR"},"content":"     * Returns the unified Timetable"},{"lineNumber":96,"author":{"gitID":"AzuraAiR"},"content":"     * @return ArrayList with the Time Table"},{"lineNumber":97,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"AzuraAiR"},"content":"    public static ArrayList\u003cString\u003e unionTimetableDay(ArrayList\u003cTimetableDay\u003e timetables) {"},{"lineNumber":99,"author":{"gitID":"AzuraAiR"},"content":"        ArrayList\u003cString\u003e commonTimetable \u003d new ArrayList\u003c\u003e();"},{"lineNumber":100,"author":{"gitID":"AzuraAiR"},"content":"        boolean checker;"},{"lineNumber":101,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":102,"author":{"gitID":"AzuraAiR"},"content":"        for (int i \u003d 8; i \u003c 22; i++) {"},{"lineNumber":103,"author":{"gitID":"AzuraAiR"},"content":"            checker \u003d false;"},{"lineNumber":104,"author":{"gitID":"AzuraAiR"},"content":"            for (TimetableDay timetable : timetables) {"},{"lineNumber":105,"author":{"gitID":"AzuraAiR"},"content":"                TimetableSlot t \u003d timetable.timetableSlots[i];"},{"lineNumber":106,"author":{"gitID":"AzuraAiR"},"content":"                if (!t.toString().equals(EMPTY_SLOT_STRING)) {"},{"lineNumber":107,"author":{"gitID":"AzuraAiR"},"content":"                    checker \u003d true;"},{"lineNumber":108,"author":{"gitID":"AzuraAiR"},"content":"                    break;"},{"lineNumber":109,"author":{"gitID":"AzuraAiR"},"content":"                }"},{"lineNumber":110,"author":{"gitID":"AzuraAiR"},"content":"            }"},{"lineNumber":111,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":112,"author":{"gitID":"AzuraAiR"},"content":"            if (checker) {"},{"lineNumber":113,"author":{"gitID":"AzuraAiR"},"content":"                commonTimetable.add(TITLE_OCCUPIED);"},{"lineNumber":114,"author":{"gitID":"AzuraAiR"},"content":"            } else {"},{"lineNumber":115,"author":{"gitID":"AzuraAiR"},"content":"                commonTimetable.add(EMPTY_SLOT_STRING);"},{"lineNumber":116,"author":{"gitID":"AzuraAiR"},"content":"            }"},{"lineNumber":117,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"AzuraAiR"},"content":"        return commonTimetable;"},{"lineNumber":119,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"AzuraAiR"},"content":"}"}],"authorContributionMap":{"AzuraAiR":113,"-":7}},{"path":"src/main/java/seedu/address/model/person/timetable/TimetableWeek.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person.timetable;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.timetable.Lesson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"AzuraAiR"},"content":"//@@author AzuraAiR"},{"lineNumber":9,"author":{"gitID":"AzuraAiR"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"AzuraAiR"},"content":" * Represents a week in the timetable"},{"lineNumber":11,"author":{"gitID":"AzuraAiR"},"content":" */"},{"lineNumber":12,"author":{"gitID":"AzuraAiR"},"content":"public class TimetableWeek {"},{"lineNumber":13,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":14,"author":{"gitID":"AzuraAiR"},"content":"    public static final int NUM_OF_DAYS \u003d 5;"},{"lineNumber":15,"author":{"gitID":"AzuraAiR"},"content":"    public static final int MONDAY_INDEX \u003d 0;"},{"lineNumber":16,"author":{"gitID":"AzuraAiR"},"content":"    public static final int TUESDAY_INDEX \u003d 1;"},{"lineNumber":17,"author":{"gitID":"AzuraAiR"},"content":"    public static final int WEDNESDAY_INDEX \u003d 2;"},{"lineNumber":18,"author":{"gitID":"AzuraAiR"},"content":"    public static final int THURSDAY_INDEX \u003d 3;"},{"lineNumber":19,"author":{"gitID":"AzuraAiR"},"content":"    public static final int FRIDAY_INDEX \u003d 4;"},{"lineNumber":20,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":21,"author":{"gitID":"AzuraAiR"},"content":"    public static final String MONDAY_IDENTIFIER \u003d \"Monday\";"},{"lineNumber":22,"author":{"gitID":"AzuraAiR"},"content":"    public static final String TUESDAY_IDENTIFIER \u003d \"Tuesday\";"},{"lineNumber":23,"author":{"gitID":"AzuraAiR"},"content":"    public static final String WEDNESDAY_IDENTIFIER \u003d \"Wednesday\";"},{"lineNumber":24,"author":{"gitID":"AzuraAiR"},"content":"    public static final String THURSDAY_IDENTIFIER \u003d \"Thursday\";"},{"lineNumber":25,"author":{"gitID":"AzuraAiR"},"content":"    public static final String FRIDAY_IDENTIFIER \u003d \"Friday\";"},{"lineNumber":26,"author":{"gitID":"AzuraAiR"},"content":"    public static final String MESSAGE_INVALID_DAY \u003d \"Day is invalid\";"},{"lineNumber":27,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":28,"author":{"gitID":"AzuraAiR"},"content":"    private TimetableDay[] timetableDays;"},{"lineNumber":29,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":30,"author":{"gitID":"AzuraAiR"},"content":"    public TimetableWeek() {"},{"lineNumber":31,"author":{"gitID":"AzuraAiR"},"content":"        timetableDays \u003d new TimetableDay[NUM_OF_DAYS];"},{"lineNumber":32,"author":{"gitID":"AzuraAiR"},"content":"        for (int i \u003d 0; i \u003c NUM_OF_DAYS; i++) {"},{"lineNumber":33,"author":{"gitID":"AzuraAiR"},"content":"            timetableDays[i] \u003d new TimetableDay();"},{"lineNumber":34,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":37,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"AzuraAiR"},"content":"     * Add lesson to its respective day"},{"lineNumber":39,"author":{"gitID":"AzuraAiR"},"content":"     * @param lesson Lesson to be added"},{"lineNumber":40,"author":{"gitID":"AzuraAiR"},"content":"     * @throws IllegalValueException when Day is invalid"},{"lineNumber":41,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"AzuraAiR"},"content":"    public void addLessonToWeek(Lesson lesson) throws IllegalValueException {"},{"lineNumber":43,"author":{"gitID":"AzuraAiR"},"content":"        switch (lesson.getDay()) {"},{"lineNumber":44,"author":{"gitID":"AzuraAiR"},"content":"        case MONDAY_IDENTIFIER:"},{"lineNumber":45,"author":{"gitID":"AzuraAiR"},"content":"            timetableDays[MONDAY_INDEX].addLessonToDay(lesson);"},{"lineNumber":46,"author":{"gitID":"AzuraAiR"},"content":"            break;"},{"lineNumber":47,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":48,"author":{"gitID":"AzuraAiR"},"content":"        case TUESDAY_IDENTIFIER:"},{"lineNumber":49,"author":{"gitID":"AzuraAiR"},"content":"            timetableDays[TUESDAY_INDEX].addLessonToDay(lesson);"},{"lineNumber":50,"author":{"gitID":"AzuraAiR"},"content":"            break;"},{"lineNumber":51,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":52,"author":{"gitID":"AzuraAiR"},"content":"        case WEDNESDAY_IDENTIFIER:"},{"lineNumber":53,"author":{"gitID":"AzuraAiR"},"content":"            timetableDays[WEDNESDAY_INDEX].addLessonToDay(lesson);"},{"lineNumber":54,"author":{"gitID":"AzuraAiR"},"content":"            break;"},{"lineNumber":55,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":56,"author":{"gitID":"AzuraAiR"},"content":"        case THURSDAY_IDENTIFIER:"},{"lineNumber":57,"author":{"gitID":"AzuraAiR"},"content":"            timetableDays[THURSDAY_INDEX].addLessonToDay(lesson);"},{"lineNumber":58,"author":{"gitID":"AzuraAiR"},"content":"            break;"},{"lineNumber":59,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":60,"author":{"gitID":"AzuraAiR"},"content":"        case FRIDAY_IDENTIFIER:"},{"lineNumber":61,"author":{"gitID":"AzuraAiR"},"content":"            timetableDays[FRIDAY_INDEX].addLessonToDay(lesson);"},{"lineNumber":62,"author":{"gitID":"AzuraAiR"},"content":"            break;"},{"lineNumber":63,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":64,"author":{"gitID":"AzuraAiR"},"content":"        default:"},{"lineNumber":65,"author":{"gitID":"AzuraAiR"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_DAY);"},{"lineNumber":66,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":69,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"AzuraAiR"},"content":"     * Returns the lesson at the specified slot, null if slot is empty"},{"lineNumber":71,"author":{"gitID":"AzuraAiR"},"content":"     * @param day"},{"lineNumber":72,"author":{"gitID":"AzuraAiR"},"content":"     * @param timeSlot"},{"lineNumber":73,"author":{"gitID":"AzuraAiR"},"content":"     * @return the Lesson at the specified day and timeslot"},{"lineNumber":74,"author":{"gitID":"AzuraAiR"},"content":"     * @throws IllegalValueException when day, timeslot are invalid values"},{"lineNumber":75,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"AzuraAiR"},"content":"    public Lesson getLessonFromSlot(String day, int timeSlot) throws IllegalValueException {"},{"lineNumber":77,"author":{"gitID":"AzuraAiR"},"content":"        switch (day) {"},{"lineNumber":78,"author":{"gitID":"AzuraAiR"},"content":"        case MONDAY_IDENTIFIER:"},{"lineNumber":79,"author":{"gitID":"AzuraAiR"},"content":"            return timetableDays[MONDAY_INDEX].getLessonFromSlot(timeSlot);"},{"lineNumber":80,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":81,"author":{"gitID":"AzuraAiR"},"content":"        case TUESDAY_IDENTIFIER:"},{"lineNumber":82,"author":{"gitID":"AzuraAiR"},"content":"            return timetableDays[TUESDAY_INDEX].getLessonFromSlot(timeSlot);"},{"lineNumber":83,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":84,"author":{"gitID":"AzuraAiR"},"content":"        case WEDNESDAY_IDENTIFIER:"},{"lineNumber":85,"author":{"gitID":"AzuraAiR"},"content":"            return timetableDays[WEDNESDAY_INDEX].getLessonFromSlot(timeSlot);"},{"lineNumber":86,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":87,"author":{"gitID":"AzuraAiR"},"content":"        case THURSDAY_IDENTIFIER:"},{"lineNumber":88,"author":{"gitID":"AzuraAiR"},"content":"            return timetableDays[THURSDAY_INDEX].getLessonFromSlot(timeSlot);"},{"lineNumber":89,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":90,"author":{"gitID":"AzuraAiR"},"content":"        case FRIDAY_IDENTIFIER:"},{"lineNumber":91,"author":{"gitID":"AzuraAiR"},"content":"            return timetableDays[FRIDAY_INDEX].getLessonFromSlot(timeSlot);"},{"lineNumber":92,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":93,"author":{"gitID":"AzuraAiR"},"content":"        default:"},{"lineNumber":94,"author":{"gitID":"AzuraAiR"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_DAY);"},{"lineNumber":95,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":98,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"AzuraAiR"},"content":"     * Returns the Time Table for the week"},{"lineNumber":100,"author":{"gitID":"AzuraAiR"},"content":"     * @return ArrayList with the  Time Table"},{"lineNumber":101,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"AzuraAiR"},"content":"    public ArrayList\u003cArrayList\u003cString\u003e\u003e getWeeklyTimeTable() {"},{"lineNumber":103,"author":{"gitID":"AzuraAiR"},"content":"        ArrayList\u003cArrayList\u003cString\u003e\u003e timetable \u003d new ArrayList\u003c\u003e();"},{"lineNumber":104,"author":{"gitID":"AzuraAiR"},"content":"        for (int i \u003d 0; i \u003c timetableDays.length; i++) {"},{"lineNumber":105,"author":{"gitID":"AzuraAiR"},"content":"            TimetableDay t \u003d timetableDays[i];"},{"lineNumber":106,"author":{"gitID":"AzuraAiR"},"content":"            ArrayList\u003cString\u003e dailyTimeTable \u003d t.getDailyTimeTable();"},{"lineNumber":107,"author":{"gitID":"AzuraAiR"},"content":"            switch (i) {"},{"lineNumber":108,"author":{"gitID":"AzuraAiR"},"content":"            case 0:"},{"lineNumber":109,"author":{"gitID":"AzuraAiR"},"content":"                dailyTimeTable.add(0, MONDAY_IDENTIFIER);"},{"lineNumber":110,"author":{"gitID":"AzuraAiR"},"content":"                break;"},{"lineNumber":111,"author":{"gitID":"AzuraAiR"},"content":"            case 1:"},{"lineNumber":112,"author":{"gitID":"AzuraAiR"},"content":"                dailyTimeTable.add(0, TUESDAY_IDENTIFIER);"},{"lineNumber":113,"author":{"gitID":"AzuraAiR"},"content":"                break;"},{"lineNumber":114,"author":{"gitID":"AzuraAiR"},"content":"            case 2:"},{"lineNumber":115,"author":{"gitID":"AzuraAiR"},"content":"                dailyTimeTable.add(0, WEDNESDAY_IDENTIFIER);"},{"lineNumber":116,"author":{"gitID":"AzuraAiR"},"content":"                break;"},{"lineNumber":117,"author":{"gitID":"AzuraAiR"},"content":"            case 3:"},{"lineNumber":118,"author":{"gitID":"AzuraAiR"},"content":"                dailyTimeTable.add(0, THURSDAY_IDENTIFIER);"},{"lineNumber":119,"author":{"gitID":"AzuraAiR"},"content":"                break;"},{"lineNumber":120,"author":{"gitID":"AzuraAiR"},"content":"            case 4:"},{"lineNumber":121,"author":{"gitID":"AzuraAiR"},"content":"                dailyTimeTable.add(0, FRIDAY_IDENTIFIER);"},{"lineNumber":122,"author":{"gitID":"AzuraAiR"},"content":"                break;"},{"lineNumber":123,"author":{"gitID":"AzuraAiR"},"content":"            default:"},{"lineNumber":124,"author":{"gitID":"AzuraAiR"},"content":"                break;"},{"lineNumber":125,"author":{"gitID":"AzuraAiR"},"content":"            }"},{"lineNumber":126,"author":{"gitID":"AzuraAiR"},"content":"            timetable.add(dailyTimeTable);"},{"lineNumber":127,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"AzuraAiR"},"content":"        return timetable;"},{"lineNumber":129,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":131,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"AzuraAiR"},"content":"     * Returns the unified Time Table for the week"},{"lineNumber":133,"author":{"gitID":"AzuraAiR"},"content":"     * @return ArrayList with the Time Table"},{"lineNumber":134,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"AzuraAiR"},"content":"    public static ArrayList\u003cArrayList\u003cString\u003e\u003e unionTimetableWeek(ArrayList\u003cTimetableWeek\u003e timetables) {"},{"lineNumber":136,"author":{"gitID":"AzuraAiR"},"content":"        ArrayList\u003cArrayList\u003cString\u003e\u003e commonTimetable \u003d new ArrayList\u003c\u003e();"},{"lineNumber":137,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":138,"author":{"gitID":"AzuraAiR"},"content":"        for (int i \u003d 0; i \u003c NUM_OF_DAYS; i++) {"},{"lineNumber":139,"author":{"gitID":"AzuraAiR"},"content":"            ArrayList\u003cTimetableDay\u003e t \u003d new ArrayList\u003cTimetableDay\u003e();"},{"lineNumber":140,"author":{"gitID":"AzuraAiR"},"content":"            for (TimetableWeek timetable : timetables) {"},{"lineNumber":141,"author":{"gitID":"AzuraAiR"},"content":"                t.add(timetable.timetableDays[i]);"},{"lineNumber":142,"author":{"gitID":"AzuraAiR"},"content":"            }"},{"lineNumber":143,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":144,"author":{"gitID":"AzuraAiR"},"content":"            ArrayList\u003cString\u003e dailyTimeTable \u003d TimetableDay.unionTimetableDay(t);"},{"lineNumber":145,"author":{"gitID":"AzuraAiR"},"content":"            switch (i) {"},{"lineNumber":146,"author":{"gitID":"AzuraAiR"},"content":"            case 0:"},{"lineNumber":147,"author":{"gitID":"AzuraAiR"},"content":"                dailyTimeTable.add(0, MONDAY_IDENTIFIER);"},{"lineNumber":148,"author":{"gitID":"AzuraAiR"},"content":"                break;"},{"lineNumber":149,"author":{"gitID":"AzuraAiR"},"content":"            case 1:"},{"lineNumber":150,"author":{"gitID":"AzuraAiR"},"content":"                dailyTimeTable.add(0, TUESDAY_IDENTIFIER);"},{"lineNumber":151,"author":{"gitID":"AzuraAiR"},"content":"                break;"},{"lineNumber":152,"author":{"gitID":"AzuraAiR"},"content":"            case 2:"},{"lineNumber":153,"author":{"gitID":"AzuraAiR"},"content":"                dailyTimeTable.add(0, WEDNESDAY_IDENTIFIER);"},{"lineNumber":154,"author":{"gitID":"AzuraAiR"},"content":"                break;"},{"lineNumber":155,"author":{"gitID":"AzuraAiR"},"content":"            case 3:"},{"lineNumber":156,"author":{"gitID":"AzuraAiR"},"content":"                dailyTimeTable.add(0, THURSDAY_IDENTIFIER);"},{"lineNumber":157,"author":{"gitID":"AzuraAiR"},"content":"                break;"},{"lineNumber":158,"author":{"gitID":"AzuraAiR"},"content":"            case 4:"},{"lineNumber":159,"author":{"gitID":"AzuraAiR"},"content":"                dailyTimeTable.add(0, FRIDAY_IDENTIFIER);"},{"lineNumber":160,"author":{"gitID":"AzuraAiR"},"content":"                break;"},{"lineNumber":161,"author":{"gitID":"AzuraAiR"},"content":"            default:"},{"lineNumber":162,"author":{"gitID":"AzuraAiR"},"content":"                break;"},{"lineNumber":163,"author":{"gitID":"AzuraAiR"},"content":"            }"},{"lineNumber":164,"author":{"gitID":"AzuraAiR"},"content":"            commonTimetable.add(dailyTimeTable);"},{"lineNumber":165,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":166,"author":{"gitID":"AzuraAiR"},"content":"        return commonTimetable;"},{"lineNumber":167,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":169,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":170,"author":{"gitID":"AzuraAiR"},"content":"}"}],"authorContributionMap":{"AzuraAiR":163,"-":7}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"jingyinno"},"content":"    //@@author jingyinno"},{"lineNumber":29,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"jingyinno"},"content":"     * Returns an unmodifiable view of the aliases list."},{"lineNumber":31,"author":{"gitID":"jingyinno"},"content":"     * This list will not contain any duplicate aliases."},{"lineNumber":32,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"jingyinno"},"content":"    ObservableList\u003cAlias\u003e getAliasList();"},{"lineNumber":34,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":35,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"jingyinno"},"content":"     * Returns the HashMap of alias list."},{"lineNumber":37,"author":{"gitID":"jingyinno"},"content":"     * This list will not contain any duplicate aliases."},{"lineNumber":38,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"jingyinno"},"content":"    HashMap\u003cString, String\u003e getAliasMapping();"},{"lineNumber":40,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":41,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"jingyinno"},"content":"     * Returns an ArrayList of ArrayList of alias strings."},{"lineNumber":43,"author":{"gitID":"jingyinno"},"content":"     * This list will not contain any duplicate aliases."},{"lineNumber":44,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"jingyinno"},"content":"    ArrayList\u003cArrayList\u003cString\u003e\u003e getUiFormattedAliasList();"},{"lineNumber":46,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":47,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"jingyinno"},"content":"     * Resets the alias list to an empty list"},{"lineNumber":49,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"jingyinno"},"content":"    void resetAliasList();"},{"lineNumber":51,"author":{"gitID":"jingyinno"},"content":"    //@@author"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"yeggasd"},"content":"    //@@author yeggasd"},{"lineNumber":54,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"yeggasd"},"content":"     * Returns the hashed password"},{"lineNumber":56,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"yeggasd"},"content":"    Password getPassword();"},{"lineNumber":58,"author":{"gitID":"yeggasd"},"content":"    //@@author"},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yeggasd":6,"jingyinno":24,"-":29}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class UserPrefs {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"Caijun7"},"content":"    private static String userAddressBookFilePath \u003d \"\";"},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private GuiSettings guiSettings;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private String addressBookFilePath \u003d \"data/addressbook.xml\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private String addressBookName \u003d \"MyAddressBook\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public UserPrefs() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        this.setGuiSettings(500, 500, 0, 0);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"Caijun7"},"content":"    //@@author Caijun7"},{"lineNumber":23,"author":{"gitID":"Caijun7"},"content":"    public static String getUserAddressBookFilePath() {"},{"lineNumber":24,"author":{"gitID":"Caijun7"},"content":"        return UserPrefs.userAddressBookFilePath;"},{"lineNumber":25,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":27,"author":{"gitID":"Caijun7"},"content":"    public static void setUserAddressBookFilePath(String userAddressBookFilePath) {"},{"lineNumber":28,"author":{"gitID":"Caijun7"},"content":"        UserPrefs.userAddressBookFilePath \u003d userAddressBookFilePath;"},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"Caijun7"},"content":"    //@@author"},{"lineNumber":31,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void setGuiSettings(double width, double height, int x, int y) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        guiSettings \u003d new GuiSettings(width, height, x, y);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return addressBookFilePath;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void setAddressBookFilePath(String addressBookFilePath) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public String getAddressBookName() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return addressBookName;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void setAddressBookName(String addressBookName) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        this.addressBookName \u003d addressBookName;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well."},{"lineNumber":66,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return Objects.equals(guiSettings, o.guiSettings)"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath)"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(addressBookName, o.addressBookName);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return Objects.hash(guiSettings, addressBookFilePath, addressBookName);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings.toString());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        sb.append(\"\\nAddressBook name : \" + addressBookName);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Caijun7":12,"-":78}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.UniqueAliasList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.exceptions.AliasNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.exceptions.DuplicateAliasException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final UniqueAliasList aliases;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private final Password password;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        aliases \u003d new UniqueAliasList();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"yeggasd"},"content":"    //@@author yeggasd"},{"lineNumber":51,"author":{"gitID":"yeggasd"},"content":"    public AddressBook() {"},{"lineNumber":52,"author":{"gitID":"yeggasd"},"content":"        password \u003d new Password();"},{"lineNumber":53,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":55,"author":{"gitID":"yeggasd"},"content":"    public AddressBook(String password) {"},{"lineNumber":56,"author":{"gitID":"yeggasd"},"content":"        this.password \u003d new Password(password);"},{"lineNumber":57,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"yeggasd"},"content":"    //@@author"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"jingyinno"},"content":"    //@@author jingyinno"},{"lineNumber":79,"author":{"gitID":"jingyinno"},"content":"    public void setAliases(HashMap\u003cString, String\u003e aliases) {"},{"lineNumber":80,"author":{"gitID":"jingyinno"},"content":"        this.aliases.setAliases(aliases);"},{"lineNumber":81,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"jingyinno"},"content":"    //@@author"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        setAliases(new HashMap\u003c\u003e(newData.getAliasMapping()));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        updatePassword(newData.getPassword());"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"jingyinno"},"content":"    //@@author jingyinno"},{"lineNumber":103,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"jingyinno"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData} and {@code newList}."},{"lineNumber":105,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"jingyinno"},"content":"    public void resetData(ReadOnlyAddressBook newData, HashMap\u003cString, String\u003e newList) {"},{"lineNumber":107,"author":{"gitID":"jingyinno"},"content":"        requireNonNull(newData);"},{"lineNumber":108,"author":{"gitID":"jingyinno"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":109,"author":{"gitID":"jingyinno"},"content":"        setAliases(new HashMap\u003c\u003e(newList));"},{"lineNumber":110,"author":{"gitID":"jingyinno"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":111,"author":{"gitID":"jingyinno"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":112,"author":{"gitID":"jingyinno"},"content":"                .collect(Collectors.toList());"},{"lineNumber":113,"author":{"gitID":"jingyinno"},"content":"        updatePassword(newData.getPassword());"},{"lineNumber":114,"author":{"gitID":"jingyinno"},"content":"        try {"},{"lineNumber":115,"author":{"gitID":"jingyinno"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":116,"author":{"gitID":"jingyinno"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":117,"author":{"gitID":"jingyinno"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"},{"lineNumber":118,"author":{"gitID":"jingyinno"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"jingyinno"},"content":"    //@@author"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":133,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":135,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"Caijun7"},"content":"    //@@author Caijun7"},{"lineNumber":139,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"Caijun7"},"content":"     * Imports a person to the address book."},{"lineNumber":141,"author":{"gitID":"Caijun7"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":142,"author":{"gitID":"Caijun7"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":143,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"Caijun7"},"content":"    public void importPerson(Person p) {"},{"lineNumber":145,"author":{"gitID":"Caijun7"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":146,"author":{"gitID":"Caijun7"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":147,"author":{"gitID":"Caijun7"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":148,"author":{"gitID":"Caijun7"},"content":"        // in the person list."},{"lineNumber":149,"author":{"gitID":"Caijun7"},"content":"        persons.importPerson(person);"},{"lineNumber":150,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"Caijun7"},"content":"    //@@author"},{"lineNumber":152,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    //// command-level operations"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"jingyinno"},"content":"    //@@author jingyinno"},{"lineNumber":156,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":157,"author":{"gitID":"jingyinno"},"content":"     * Adds an alias to the address book."},{"lineNumber":158,"author":{"gitID":"jingyinno"},"content":"     *"},{"lineNumber":159,"author":{"gitID":"jingyinno"},"content":"     * @throws DuplicateAliasException if an equivalent alias already exists."},{"lineNumber":160,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"jingyinno"},"content":"    public void addAlias(Alias alias) throws DuplicateAliasException {"},{"lineNumber":162,"author":{"gitID":"jingyinno"},"content":"        aliases.add(alias);"},{"lineNumber":163,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":165,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":166,"author":{"gitID":"jingyinno"},"content":"     * Removes an alias from the address book."},{"lineNumber":167,"author":{"gitID":"jingyinno"},"content":"     *"},{"lineNumber":168,"author":{"gitID":"jingyinno"},"content":"     * @throws AliasNotFoundException if alias to-be-removed does not exist."},{"lineNumber":169,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":170,"author":{"gitID":"jingyinno"},"content":"    public void removeAlias(String toRemove) throws AliasNotFoundException {"},{"lineNumber":171,"author":{"gitID":"jingyinno"},"content":"        aliases.remove(toRemove);"},{"lineNumber":172,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":174,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":175,"author":{"gitID":"jingyinno"},"content":"     * Retrieve the associated commandWord from the address book."},{"lineNumber":176,"author":{"gitID":"jingyinno"},"content":"     * @param aliasKey the alias keyword associated to command word"},{"lineNumber":177,"author":{"gitID":"jingyinno"},"content":"     * @return the associated command word if exists else the aliasKey"},{"lineNumber":178,"author":{"gitID":"jingyinno"},"content":"     *"},{"lineNumber":179,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"jingyinno"},"content":"    public String getCommandFromAlias(String aliasKey) {"},{"lineNumber":181,"author":{"gitID":"jingyinno"},"content":"        return aliases.contains(aliasKey) ? aliases.getCommandFromAlias(aliasKey) : aliasKey;"},{"lineNumber":182,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":184,"author":{"gitID":"jingyinno"},"content":"    //@@author"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"Caijun7"},"content":"    //@@author Caijun7"},{"lineNumber":187,"author":{"gitID":"Caijun7"},"content":"    public void importAlias(Alias alias) {"},{"lineNumber":188,"author":{"gitID":"Caijun7"},"content":"        aliases.importAlias(alias);"},{"lineNumber":189,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"Caijun7"},"content":"    //@@author"},{"lineNumber":191,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":195,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":199,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":203,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":208,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":210,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":211,"author":{"gitID":"Caijun7"},"content":"        removeUnusedTags();"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"content":"    //@@author Caijun7-reused"},{"lineNumber":215,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":216,"author":{"gitID":"Caijun7"},"content":"     * Removes all {@code tag}s that are not used by any {@code person} in this {@code AddressBook}."},{"lineNumber":217,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":218,"author":{"gitID":"Caijun7"},"content":"    private void removeUnusedTags() {"},{"lineNumber":219,"author":{"gitID":"Caijun7"},"content":"        Set\u003cTag\u003e tagsInPersons \u003d persons.asObservableList().stream()"},{"lineNumber":220,"author":{"gitID":"Caijun7"},"content":"                .map(Person::getTags)"},{"lineNumber":221,"author":{"gitID":"Caijun7"},"content":"                .flatMap(Set::stream)"},{"lineNumber":222,"author":{"gitID":"Caijun7"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":223,"author":{"gitID":"Caijun7"},"content":"        tags.setTags(tagsInPersons);"},{"lineNumber":224,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":225,"content":"    //@@author"},{"lineNumber":226,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     *  Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":229,"author":{"gitID":"-"},"content":"     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":231,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":242,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        return new Person("},{"lineNumber":245,"author":{"gitID":"-"},"content":"                person.getName(), person.getPhone(), person.getEmail(), person.getAddress(), person.getBirthday(),"},{"lineNumber":246,"author":{"gitID":"-"},"content":"                person.getTimetable(), correctTagReferences);"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":252,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":257,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":259,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"Caijun7"},"content":"    //@@author Caijun7"},{"lineNumber":268,"author":{"gitID":"Caijun7"},"content":"    public void importTag(Tag t) {"},{"lineNumber":269,"author":{"gitID":"Caijun7"},"content":"        tags.importTag(t);"},{"lineNumber":270,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":271,"author":{"gitID":"Caijun7"},"content":"    //@@author"},{"lineNumber":272,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":273,"content":"    //@@author Caijun7-reused"},{"lineNumber":274,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":275,"author":{"gitID":"Caijun7"},"content":"    * Removes {@code tag} from {@code person} in this {@code AddressBook}."},{"lineNumber":276,"author":{"gitID":"Caijun7"},"content":"    * @throws PersonNotFoundException if the {@code person} is not in this {@code AddressBook}."},{"lineNumber":277,"author":{"gitID":"Caijun7"},"content":"    */"},{"lineNumber":278,"author":{"gitID":"Caijun7"},"content":"    private void removeTagFromPerson(Tag tag, Person person) throws PersonNotFoundException {"},{"lineNumber":279,"author":{"gitID":"Caijun7"},"content":"        Set\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e(person.getTags());"},{"lineNumber":280,"author":{"gitID":"Caijun7"},"content":"        if (!newTags.remove(tag)) {"},{"lineNumber":281,"author":{"gitID":"Caijun7"},"content":"            return;"},{"lineNumber":282,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":283,"author":{"gitID":"Caijun7"},"content":"        Person newPerson \u003d"},{"lineNumber":284,"author":{"gitID":"-"},"content":"                new Person(person.getName(), person.getPhone(), person.getEmail(), person.getAddress(),"},{"lineNumber":285,"author":{"gitID":"-"},"content":"                        person.getBirthday(), person.getTimetable(), newTags);"},{"lineNumber":286,"author":{"gitID":"Caijun7"},"content":"        try {"},{"lineNumber":287,"author":{"gitID":"Caijun7"},"content":"            updatePerson(person, newPerson);"},{"lineNumber":288,"author":{"gitID":"Caijun7"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":289,"author":{"gitID":"Caijun7"},"content":"            throw new AssertionError(\"Modifying a person\u0027s tags only should not result in a duplicate. \""},{"lineNumber":290,"author":{"gitID":"Caijun7"},"content":"                    + \"See Person#equals(Object).\");"},{"lineNumber":291,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":292,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":293,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":294,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":295,"author":{"gitID":"Caijun7"},"content":"    * Removes {@code tag} from all persons in this {@code AddressBook}."},{"lineNumber":296,"author":{"gitID":"Caijun7"},"content":"    */"},{"lineNumber":297,"author":{"gitID":"Caijun7"},"content":"    public void removeTag(Tag tag) {"},{"lineNumber":298,"author":{"gitID":"Caijun7"},"content":"        try {"},{"lineNumber":299,"author":{"gitID":"Caijun7"},"content":"            for (Person person : persons) {"},{"lineNumber":300,"author":{"gitID":"Caijun7"},"content":"                removeTagFromPerson(tag, person);"},{"lineNumber":301,"author":{"gitID":"Caijun7"},"content":"            }"},{"lineNumber":302,"author":{"gitID":"Caijun7"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":303,"author":{"gitID":"Caijun7"},"content":"            throw new AssertionError(\"Impossible exception: person is obtained from the address book.\");"},{"lineNumber":304,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":305,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":306,"content":"    //@@author"},{"lineNumber":307,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":308,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":309,"author":{"gitID":"-"},"content":""},{"lineNumber":310,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":311,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":312,"author":{"gitID":"-"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags, \""},{"lineNumber":313,"author":{"gitID":"-"},"content":"                + password + \" password, \" + aliases.asObservableList().size() + \" aliases\";"},{"lineNumber":314,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":315,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":316,"author":{"gitID":"-"},"content":""},{"lineNumber":317,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":318,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":319,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":320,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":321,"author":{"gitID":"-"},"content":""},{"lineNumber":322,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":323,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":324,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":325,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":326,"author":{"gitID":"-"},"content":""},{"lineNumber":327,"author":{"gitID":"jingyinno"},"content":"    //@@author jingyinno"},{"lineNumber":328,"author":{"gitID":"jingyinno"},"content":"    @Override"},{"lineNumber":329,"author":{"gitID":"jingyinno"},"content":"    public ObservableList\u003cAlias\u003e getAliasList() {"},{"lineNumber":330,"author":{"gitID":"jingyinno"},"content":"        return aliases.getAliasObservableList();"},{"lineNumber":331,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":332,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":333,"author":{"gitID":"jingyinno"},"content":"    @Override"},{"lineNumber":334,"author":{"gitID":"jingyinno"},"content":"    public ArrayList\u003cArrayList\u003cString\u003e\u003e getUiFormattedAliasList() {"},{"lineNumber":335,"author":{"gitID":"jingyinno"},"content":"        return aliases.extractAliasMapping();"},{"lineNumber":336,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":337,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":338,"author":{"gitID":"jingyinno"},"content":"    @Override"},{"lineNumber":339,"author":{"gitID":"jingyinno"},"content":"    public HashMap\u003cString, String\u003e getAliasMapping() {"},{"lineNumber":340,"author":{"gitID":"jingyinno"},"content":"        return aliases.getAliasCommandMappings();"},{"lineNumber":341,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":342,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":343,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":344,"author":{"gitID":"jingyinno"},"content":"    @Override"},{"lineNumber":345,"author":{"gitID":"jingyinno"},"content":"    public void resetAliasList() {"},{"lineNumber":346,"author":{"gitID":"jingyinno"},"content":"        aliases.resetHashmap();"},{"lineNumber":347,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":348,"author":{"gitID":"jingyinno"},"content":"    //@@author"},{"lineNumber":349,"author":{"gitID":"-"},"content":""},{"lineNumber":350,"author":{"gitID":"yeggasd"},"content":"    //@@author yeggasd"},{"lineNumber":351,"author":{"gitID":"yeggasd"},"content":"    @Override"},{"lineNumber":352,"author":{"gitID":"yeggasd"},"content":"    public Password getPassword() {"},{"lineNumber":353,"author":{"gitID":"yeggasd"},"content":"        return password;"},{"lineNumber":354,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":355,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":356,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":357,"author":{"gitID":"yeggasd"},"content":"     * Updates the password of this {@code AddressBook}."},{"lineNumber":358,"author":{"gitID":"yeggasd"},"content":"     * @param newPassword  will be the new password."},{"lineNumber":359,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":360,"author":{"gitID":"yeggasd"},"content":"    public void updatePassword (byte[] newPassword) {"},{"lineNumber":361,"author":{"gitID":"yeggasd"},"content":"        password.updatePassword(newPassword);"},{"lineNumber":362,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":363,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":364,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":365,"author":{"gitID":"yeggasd"},"content":"     * Updates the password of this {@code AddressBook}."},{"lineNumber":366,"author":{"gitID":"yeggasd"},"content":"     * @param newPassword  will be the new password."},{"lineNumber":367,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":368,"author":{"gitID":"yeggasd"},"content":"    public void updatePassword (Password newPassword) {"},{"lineNumber":369,"author":{"gitID":"yeggasd"},"content":"        password.updatePassword(newPassword);"},{"lineNumber":370,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":371,"author":{"gitID":"yeggasd"},"content":"    //@@author"},{"lineNumber":372,"author":{"gitID":"-"},"content":""},{"lineNumber":373,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":374,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":375,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":376,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":377,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":378,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags))"},{"lineNumber":379,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.aliases.equals(((AddressBook) other).aliases)"},{"lineNumber":380,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.password.equals(((AddressBook) other).password);"},{"lineNumber":381,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":382,"author":{"gitID":"-"},"content":""},{"lineNumber":383,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":384,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":385,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":386,"author":{"gitID":"-"},"content":"        return Objects.hash(persons, tags);"},{"lineNumber":387,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":388,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":4,"yeggasd":31,"Caijun7":70,"jingyinno":76,"-":207}},{"path":"src/main/java/seedu/address/model/person/timetable/TimetableSlot.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person.timetable;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.timetable.Lesson;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"AzuraAiR"},"content":"//@@author AzuraAiR"},{"lineNumber":10,"author":{"gitID":"AzuraAiR"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"AzuraAiR"},"content":" * Represents a slot in the timetable"},{"lineNumber":12,"author":{"gitID":"AzuraAiR"},"content":" */"},{"lineNumber":13,"author":{"gitID":"AzuraAiR"},"content":"public class TimetableSlot {"},{"lineNumber":14,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":15,"author":{"gitID":"AzuraAiR"},"content":"    private ArrayList\u003cLesson\u003e lessons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":16,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":17,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"AzuraAiR"},"content":"     * Fills up the slot with the given lesson"},{"lineNumber":19,"author":{"gitID":"AzuraAiR"},"content":"     * @param lesson"},{"lineNumber":20,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"AzuraAiR"},"content":"    public void addLessonToSlot(Lesson lesson) {"},{"lineNumber":22,"author":{"gitID":"AzuraAiR"},"content":"        requireNonNull(lesson);"},{"lineNumber":23,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":24,"author":{"gitID":"AzuraAiR"},"content":"        this.lessons.add(lesson);"},{"lineNumber":25,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":27,"author":{"gitID":"AzuraAiR"},"content":"    public Lesson getLesson() {"},{"lineNumber":28,"author":{"gitID":"AzuraAiR"},"content":"        return concat(lessons);"},{"lineNumber":29,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":31,"author":{"gitID":"AzuraAiR"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"AzuraAiR"},"content":"    public String toString() {"},{"lineNumber":33,"author":{"gitID":"AzuraAiR"},"content":"        if (lessons.size() \u003d\u003d 0) {"},{"lineNumber":34,"author":{"gitID":"AzuraAiR"},"content":"            return \"\";"},{"lineNumber":35,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"AzuraAiR"},"content":"        String resultString \u003d new String();"},{"lineNumber":37,"author":{"gitID":"AzuraAiR"},"content":"        for (Lesson lesson: lessons) {"},{"lineNumber":38,"author":{"gitID":"AzuraAiR"},"content":"            resultString +\u003d lesson + \" \\n\";"},{"lineNumber":39,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"AzuraAiR"},"content":"        return resultString;"},{"lineNumber":41,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":43,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"AzuraAiR"},"content":"     * Merges all the lessons in this time slot."},{"lineNumber":45,"author":{"gitID":"AzuraAiR"},"content":"     * @return a merged Lesson"},{"lineNumber":46,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"AzuraAiR"},"content":"    private Lesson concat(ArrayList\u003cLesson\u003e lessons) {"},{"lineNumber":48,"author":{"gitID":"AzuraAiR"},"content":"        String concatModCode \u003d new String();"},{"lineNumber":49,"author":{"gitID":"AzuraAiR"},"content":"        String concatClassNo \u003d new String();"},{"lineNumber":50,"author":{"gitID":"AzuraAiR"},"content":"        String concatLessonType \u003d new String();"},{"lineNumber":51,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":52,"author":{"gitID":"AzuraAiR"},"content":"        for (Lesson lesson: lessons) {"},{"lineNumber":53,"author":{"gitID":"AzuraAiR"},"content":"            concatModCode +\u003d lesson.getModuleCode() + \" \";"},{"lineNumber":54,"author":{"gitID":"AzuraAiR"},"content":"            concatClassNo +\u003d lesson.getClassNo() + \" \";"},{"lineNumber":55,"author":{"gitID":"AzuraAiR"},"content":"            concatLessonType +\u003d lesson.getLessonType() + \" \";"},{"lineNumber":56,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"AzuraAiR"},"content":"        Lesson lesson \u003d lessons.get(0);"},{"lineNumber":58,"author":{"gitID":"AzuraAiR"},"content":"        Lesson concatLesson \u003d new Lesson(concatModCode, concatClassNo, concatLessonType, lesson.getWeekType(),"},{"lineNumber":59,"author":{"gitID":"AzuraAiR"},"content":"                lesson.getDay(), lesson.getStartTime(), lesson.getEndTime());"},{"lineNumber":60,"author":{"gitID":"AzuraAiR"},"content":"        return concatLesson;"},{"lineNumber":61,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"AzuraAiR"},"content":"}"}],"authorContributionMap":{"AzuraAiR":54,"-":8}},{"path":"src/main/java/seedu/address/model/person/timetable/TimetableData.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person.timetable;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.timetable.Lesson;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"AzuraAiR"},"content":"//@@author AzuraAiR"},{"lineNumber":12,"author":{"gitID":"AzuraAiR"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"AzuraAiR"},"content":" * Represents the data of the timetable"},{"lineNumber":14,"author":{"gitID":"AzuraAiR"},"content":" */"},{"lineNumber":15,"author":{"gitID":"AzuraAiR"},"content":"public class TimetableData {"},{"lineNumber":16,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":17,"author":{"gitID":"AzuraAiR"},"content":"    public static final int NUM_OF_WEEKS \u003d 2;"},{"lineNumber":18,"author":{"gitID":"AzuraAiR"},"content":"    public static final int EVEN_WEEK_INDEX \u003d 0;"},{"lineNumber":19,"author":{"gitID":"AzuraAiR"},"content":"    public static final int ODD_WEEK_INDEX \u003d 1;"},{"lineNumber":20,"author":{"gitID":"AzuraAiR"},"content":"    public static final String EVEN_WEEK_IDENTIFIER \u003d \"Even Week\";"},{"lineNumber":21,"author":{"gitID":"AzuraAiR"},"content":"    public static final String ODD_WEEK_IDENTIFIER \u003d \"Odd Week\";"},{"lineNumber":22,"author":{"gitID":"AzuraAiR"},"content":"    public static final String EVERY_WEEK_IDENTIFIER \u003d \"Every Week\";"},{"lineNumber":23,"author":{"gitID":"AzuraAiR"},"content":"    public static final String MESSAGE_INVALID_WEEK \u003d \"Week is invalid\";"},{"lineNumber":24,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":25,"author":{"gitID":"AzuraAiR"},"content":"    private TimetableWeek[] timetableWeeks;"},{"lineNumber":26,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":27,"author":{"gitID":"AzuraAiR"},"content":"    // Constructs empty data"},{"lineNumber":28,"author":{"gitID":"AzuraAiR"},"content":"    public TimetableData() {"},{"lineNumber":29,"author":{"gitID":"AzuraAiR"},"content":"        constructEmptyData();"},{"lineNumber":30,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":32,"author":{"gitID":"AzuraAiR"},"content":"    // Constructs with ArrayList of {@Lesson}"},{"lineNumber":33,"author":{"gitID":"AzuraAiR"},"content":"    public TimetableData(ArrayList\u003cLesson\u003e lessonsToAdd) throws ParseException {"},{"lineNumber":34,"author":{"gitID":"AzuraAiR"},"content":"        constructEmptyData();"},{"lineNumber":35,"author":{"gitID":"AzuraAiR"},"content":"        requireNonNull(lessonsToAdd);"},{"lineNumber":36,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":37,"author":{"gitID":"AzuraAiR"},"content":"        // Immediate adding of lessons"},{"lineNumber":38,"author":{"gitID":"AzuraAiR"},"content":"        for (Lesson lessonToAdd: lessonsToAdd) {"},{"lineNumber":39,"author":{"gitID":"AzuraAiR"},"content":"            try {"},{"lineNumber":40,"author":{"gitID":"AzuraAiR"},"content":"                addLessonToSlot(lessonToAdd);"},{"lineNumber":41,"author":{"gitID":"AzuraAiR"},"content":"            } catch (IllegalValueException ie) {"},{"lineNumber":42,"author":{"gitID":"AzuraAiR"},"content":"                throw new ParseException(ie.getMessage());"},{"lineNumber":43,"author":{"gitID":"AzuraAiR"},"content":"            }"},{"lineNumber":44,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":47,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"AzuraAiR"},"content":"     * Constructs a empty structure for Timetable"},{"lineNumber":49,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"AzuraAiR"},"content":"    private void constructEmptyData() {"},{"lineNumber":51,"author":{"gitID":"AzuraAiR"},"content":"        timetableWeeks \u003d new TimetableWeek[NUM_OF_WEEKS];"},{"lineNumber":52,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":53,"author":{"gitID":"AzuraAiR"},"content":"        for (int i \u003d 0; i \u003c NUM_OF_WEEKS; i++) {"},{"lineNumber":54,"author":{"gitID":"AzuraAiR"},"content":"            timetableWeeks[i] \u003d new TimetableWeek();"},{"lineNumber":55,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":58,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"AzuraAiR"},"content":"     * Returns the lesson at the specified slot, null if slot is empty"},{"lineNumber":60,"author":{"gitID":"AzuraAiR"},"content":"     * @param week"},{"lineNumber":61,"author":{"gitID":"AzuraAiR"},"content":"     * @param day"},{"lineNumber":62,"author":{"gitID":"AzuraAiR"},"content":"     * @param timeSlot"},{"lineNumber":63,"author":{"gitID":"AzuraAiR"},"content":"     * @return Lesson at the specified week, day and slot, null if slot is empty"},{"lineNumber":64,"author":{"gitID":"AzuraAiR"},"content":"     * @throws IllegalValueException when week, day, timeslot are invalid values"},{"lineNumber":65,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"AzuraAiR"},"content":"    public Lesson getLessonFromSlot(String week, String day, int timeSlot) throws IllegalValueException {"},{"lineNumber":67,"author":{"gitID":"AzuraAiR"},"content":"        if (week.equalsIgnoreCase(EVEN_WEEK_IDENTIFIER)) {"},{"lineNumber":68,"author":{"gitID":"AzuraAiR"},"content":"            return timetableWeeks[EVEN_WEEK_INDEX].getLessonFromSlot(day, timeSlot);"},{"lineNumber":69,"author":{"gitID":"AzuraAiR"},"content":"        } else if (week.equalsIgnoreCase(ODD_WEEK_IDENTIFIER)) {"},{"lineNumber":70,"author":{"gitID":"AzuraAiR"},"content":"            return timetableWeeks[ODD_WEEK_INDEX].getLessonFromSlot(day, timeSlot);"},{"lineNumber":71,"author":{"gitID":"AzuraAiR"},"content":"        } else {"},{"lineNumber":72,"author":{"gitID":"AzuraAiR"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_WEEK);"},{"lineNumber":73,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":76,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"AzuraAiR"},"content":"     * Adds a lesson at its respective week"},{"lineNumber":78,"author":{"gitID":"AzuraAiR"},"content":"     * @param lessonToAdd lesson to be added"},{"lineNumber":79,"author":{"gitID":"AzuraAiR"},"content":"     * @throws IllegalValueException when week, day, timeslot are invalid values"},{"lineNumber":80,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"AzuraAiR"},"content":"    public void addLessonToSlot(Lesson lessonToAdd) throws IllegalValueException {"},{"lineNumber":82,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":83,"author":{"gitID":"AzuraAiR"},"content":"        if (lessonToAdd.getWeekType().equalsIgnoreCase(EVEN_WEEK_IDENTIFIER)) {"},{"lineNumber":84,"author":{"gitID":"AzuraAiR"},"content":"            timetableWeeks[EVEN_WEEK_INDEX].addLessonToWeek(lessonToAdd);"},{"lineNumber":85,"author":{"gitID":"AzuraAiR"},"content":"        } else if (lessonToAdd.getWeekType().equalsIgnoreCase(ODD_WEEK_IDENTIFIER)) {"},{"lineNumber":86,"author":{"gitID":"AzuraAiR"},"content":"            timetableWeeks[ODD_WEEK_INDEX].addLessonToWeek(lessonToAdd);"},{"lineNumber":87,"author":{"gitID":"AzuraAiR"},"content":"        } else if (lessonToAdd.getWeekType().equalsIgnoreCase(EVERY_WEEK_IDENTIFIER)) {"},{"lineNumber":88,"author":{"gitID":"AzuraAiR"},"content":"            timetableWeeks[EVEN_WEEK_INDEX].addLessonToWeek(lessonToAdd);"},{"lineNumber":89,"author":{"gitID":"AzuraAiR"},"content":"            timetableWeeks[ODD_WEEK_INDEX].addLessonToWeek(lessonToAdd);"},{"lineNumber":90,"author":{"gitID":"AzuraAiR"},"content":"        } else {"},{"lineNumber":91,"author":{"gitID":"AzuraAiR"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_WEEK);"},{"lineNumber":92,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":95,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"AzuraAiR"},"content":"     * Returns the Time Table"},{"lineNumber":97,"author":{"gitID":"AzuraAiR"},"content":"     * @return ArrayList with the  Time Table"},{"lineNumber":98,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"AzuraAiR"},"content":"    public ArrayList\u003cArrayList\u003cArrayList\u003cString\u003e\u003e\u003e getTimeTable() {"},{"lineNumber":100,"author":{"gitID":"AzuraAiR"},"content":"        ArrayList\u003cArrayList\u003cArrayList\u003cString\u003e\u003e\u003e timetable \u003d new ArrayList\u003c\u003e();"},{"lineNumber":101,"author":{"gitID":"AzuraAiR"},"content":"        for (TimetableWeek t : timetableWeeks) {"},{"lineNumber":102,"author":{"gitID":"AzuraAiR"},"content":"            timetable.add(t.getWeeklyTimeTable());"},{"lineNumber":103,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"AzuraAiR"},"content":"        return timetable;"},{"lineNumber":105,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":107,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"AzuraAiR"},"content":"     * Returns the unified Time Table"},{"lineNumber":109,"author":{"gitID":"AzuraAiR"},"content":"     * @return ArrayList with the  Time Table"},{"lineNumber":110,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"AzuraAiR"},"content":"    public static ArrayList\u003cArrayList\u003cArrayList\u003cString\u003e\u003e\u003e unionTimeTable(ArrayList\u003cTimetableData\u003e timetables) {"},{"lineNumber":112,"author":{"gitID":"AzuraAiR"},"content":"        ArrayList\u003cArrayList\u003cArrayList\u003cString\u003e\u003e\u003e commonTimetable \u003d new ArrayList\u003c\u003e();"},{"lineNumber":113,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":114,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":115,"author":{"gitID":"AzuraAiR"},"content":"        for (int i \u003d 0; i \u003c NUM_OF_WEEKS; i++) {"},{"lineNumber":116,"author":{"gitID":"AzuraAiR"},"content":"            ArrayList\u003cTimetableWeek\u003e t \u003d new ArrayList\u003cTimetableWeek\u003e();"},{"lineNumber":117,"author":{"gitID":"AzuraAiR"},"content":"            for (TimetableData timetable : timetables) {"},{"lineNumber":118,"author":{"gitID":"AzuraAiR"},"content":"                t.add(timetable.timetableWeeks[i]);"},{"lineNumber":119,"author":{"gitID":"AzuraAiR"},"content":"            }"},{"lineNumber":120,"author":{"gitID":"AzuraAiR"},"content":"            commonTimetable.add(TimetableWeek.unionTimetableWeek(t));"},{"lineNumber":121,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":123,"author":{"gitID":"AzuraAiR"},"content":"        return commonTimetable;"},{"lineNumber":124,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":126,"author":{"gitID":"AzuraAiR"},"content":"}"}],"authorContributionMap":{"AzuraAiR":116,"-":10}},{"path":"src/main/java/seedu/address/model/tag/UniqueTagList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A list of tags that enforces no nulls and uniqueness between its elements."},{"lineNumber":17,"author":{"gitID":"-"},"content":" *"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Supports minimal set of list operations for the app\u0027s features."},{"lineNumber":19,"author":{"gitID":"-"},"content":" *"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * @see Tag#equals(Object)"},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class UniqueTagList implements Iterable\u003cTag\u003e {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cTag\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Constructs empty TagList."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public UniqueTagList() {}"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Creates a UniqueTagList using given tags."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Enforces no nulls."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public UniqueTagList(Set\u003cTag\u003e tags) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        requireAllNonNull(tags);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        internalList.addAll(tags);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Returns all tags in this list as a Set."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * This set is mutable and change-insulated against the internal list."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e toSet() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return new HashSet\u003c\u003e(internalList);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Replaces the Tags in this list with those in the argument tag list."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        requireAllNonNull(tags);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        internalList.setAll(tags);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Ensures every tag in the argument list exists in this object."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void mergeFrom(UniqueTagList from) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e alreadyInside \u003d this.toSet();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        from.internalList.stream()"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                .filter(tag -\u003e !alreadyInside.contains(tag))"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .forEach(internalList::add);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an equivalent Tag as the given argument."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public boolean contains(Tag toCheck) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Adds a Tag to the list."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * @throws DuplicateTagException if the Tag to add is a duplicate of an existing Tag in the list."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void add(Tag toAdd) throws DuplicateTagException {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            throw new DuplicateTagException();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"Caijun7"},"content":"    //@@author Caijun7"},{"lineNumber":96,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"Caijun7"},"content":"     * Adds a Tag to the list if the Tag is not a duplicate of an existing Tag in the list"},{"lineNumber":98,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"Caijun7"},"content":"    public void importTag(Tag toAdd) {"},{"lineNumber":100,"author":{"gitID":"Caijun7"},"content":"        requireNonNull(toAdd);"},{"lineNumber":101,"author":{"gitID":"Caijun7"},"content":"        if (!contains(toAdd)) {"},{"lineNumber":102,"author":{"gitID":"Caijun7"},"content":"            internalList.add(toAdd);"},{"lineNumber":103,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":105,"author":{"gitID":"Caijun7"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":106,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"Caijun7"},"content":"    //@@author"},{"lineNumber":108,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public Iterator\u003cTag\u003e iterator() {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e asObservableList() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":127,"author":{"gitID":"-"},"content":"                || (other instanceof UniqueTagList // instanceof handles nulls"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                        \u0026\u0026 this.internalList.equals(((UniqueTagList) other).internalList));"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * Returns true if the element in this list is equal to the elements in {@code other}."},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * The elements do not have to be in the same order."},{"lineNumber":134,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    public boolean equalsOrderInsensitive(UniqueTagList other) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(other.internalList);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        return this \u003d\u003d other || new HashSet\u003c\u003e(this.internalList).equals(new HashSet\u003c\u003e(other.internalList));"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    public static class DuplicateTagException extends DuplicateDataException {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        protected DuplicateTagException() {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            super(\"Operation would result in duplicate tags\");"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Caijun7":14,"-":142}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Caijun7"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"Caijun7"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.WrongPasswordException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.exceptions.AliasNotFoundException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.exceptions.DuplicateAliasException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.building.Building;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.building.exceptions.BuildingNotFoundException;"},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.exceptions.CorruptedVenueInformationException;"},{"lineNumber":17,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.exceptions.NoRoomsInBuildingException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":21,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"Caijun7"},"content":"import seedu.address.storage.exceptions.GoogleAuthorizationException;"},{"lineNumber":23,"author":{"gitID":"Caijun7"},"content":"import seedu.address.storage.exceptions.RequestTimeoutException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"jingyinno"},"content":"    //@@author jingyinno"},{"lineNumber":36,"author":{"gitID":"jingyinno"},"content":"    /** Clears existing backing model and replaces with the provided new data and new list. */"},{"lineNumber":37,"author":{"gitID":"jingyinno"},"content":"    void resetData(ReadOnlyAddressBook newData, HashMap\u003cString, String\u003e newAliasList);"},{"lineNumber":38,"author":{"gitID":"jingyinno"},"content":"    //@@author"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    void deletePerson(Person target) throws PersonNotFoundException;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    void addPerson(Person person) throws DuplicatePersonException;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"jingyinno"},"content":"    //@@author jingyinno"},{"lineNumber":50,"author":{"gitID":"jingyinno"},"content":"    /** Adds the given alias */"},{"lineNumber":51,"author":{"gitID":"jingyinno"},"content":"    void addAlias(Alias alias) throws DuplicateAliasException;"},{"lineNumber":52,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":53,"author":{"gitID":"jingyinno"},"content":"    /** Returns a HashMap of alias-command mappings */"},{"lineNumber":54,"author":{"gitID":"jingyinno"},"content":"    HashMap\u003cString, String\u003e getAliasList();"},{"lineNumber":55,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":56,"author":{"gitID":"jingyinno"},"content":"    /** Returns a the associated command word that is mapped to aliasKey */"},{"lineNumber":57,"author":{"gitID":"jingyinno"},"content":"    String getCommandFromAlias(String aliasKey);"},{"lineNumber":58,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":59,"author":{"gitID":"jingyinno"},"content":"    /** Returns an ArrayList of ArrayList of alias strings formatted for the UI */"},{"lineNumber":60,"author":{"gitID":"jingyinno"},"content":"    ArrayList\u003cArrayList\u003cString\u003e\u003e getUiFormattedAliasList();"},{"lineNumber":61,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":62,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"jingyinno"},"content":"     * Replaces the alias mapping by the given {@code aliases}."},{"lineNumber":64,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"jingyinno"},"content":"    void updateAliasesMapping(HashMap\u003cString, String\u003e aliases);"},{"lineNumber":66,"author":{"gitID":"jingyinno"},"content":"    //@@author"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    void updatePerson(Person target, Person editedPerson)"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"content":"    //@@author Caijun7-reused"},{"lineNumber":88,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"Caijun7"},"content":"     * Remove {@code tag} from all {@code person}s in the {@code AddressBook}."},{"lineNumber":90,"author":{"gitID":"Caijun7"},"content":"     * @param tag"},{"lineNumber":91,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"Caijun7"},"content":"    void deleteTag(Tag tag);"},{"lineNumber":93,"content":"    //@@author"},{"lineNumber":94,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":95,"author":{"gitID":"Caijun7"},"content":"    //@@author Caijun7"},{"lineNumber":96,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"Caijun7"},"content":"     * Imports the specified {@code AddressBook} from the filepath to the current {@code AddressBook}."},{"lineNumber":98,"author":{"gitID":"Caijun7"},"content":"     * And decrypts the imported file with the {@code password} if password is not null."},{"lineNumber":99,"author":{"gitID":"Caijun7"},"content":"     *"},{"lineNumber":100,"author":{"gitID":"Caijun7"},"content":"     * @param filepath"},{"lineNumber":101,"author":{"gitID":"Caijun7"},"content":"     * @param password"},{"lineNumber":102,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"Caijun7"},"content":"    void importAddressBook(String filepath, byte[] password) throws DataConversionException, IOException,"},{"lineNumber":104,"author":{"gitID":"Caijun7"},"content":"                                                                    WrongPasswordException;"},{"lineNumber":105,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":106,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"Caijun7"},"content":"     * Exports the current view of {@code AddressBook} to the filepath."},{"lineNumber":108,"author":{"gitID":"Caijun7"},"content":"     * And encrypts the exported file with the {@code password} if the password is not null"},{"lineNumber":109,"author":{"gitID":"Caijun7"},"content":"     *"},{"lineNumber":110,"author":{"gitID":"Caijun7"},"content":"     * @param filepath"},{"lineNumber":111,"author":{"gitID":"Caijun7"},"content":"     * @param password"},{"lineNumber":112,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"Caijun7"},"content":"    void exportAddressBook(String filepath, Password password) throws IOException;"},{"lineNumber":114,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":115,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"Caijun7"},"content":"     * Exports the current view of {@code AddressBook} to the googledrive folder of local storage."},{"lineNumber":117,"author":{"gitID":"Caijun7"},"content":"     * And encrypts the exported file with the {@code password} if the password is not null."},{"lineNumber":118,"author":{"gitID":"Caijun7"},"content":"     * Uploads the exported file to the specified filepath in Google Drive."},{"lineNumber":119,"author":{"gitID":"Caijun7"},"content":"     *"},{"lineNumber":120,"author":{"gitID":"Caijun7"},"content":"     * @param filepath"},{"lineNumber":121,"author":{"gitID":"Caijun7"},"content":"     * @param password"},{"lineNumber":122,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"Caijun7"},"content":"    void uploadAddressBook(String filepath, Password password) throws IOException,"},{"lineNumber":124,"author":{"gitID":"Caijun7"},"content":"            GoogleAuthorizationException, RequestTimeoutException;"},{"lineNumber":125,"author":{"gitID":"Caijun7"},"content":"    //@@author"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"yeggasd"},"content":"    //@@author yeggasd"},{"lineNumber":128,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"yeggasd"},"content":"     * Updates the password with the given password."},{"lineNumber":130,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"yeggasd"},"content":"    void updatePassword(byte[] password);"},{"lineNumber":132,"author":{"gitID":"yeggasd"},"content":"    //@@author"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"jingyinno"},"content":"    //@@author jingyinno"},{"lineNumber":135,"author":{"gitID":"jingyinno"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"jingyinno"},"content":"     * Removes alias given the alias string to remove."},{"lineNumber":137,"author":{"gitID":"jingyinno"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"jingyinno"},"content":"    void removeAlias(String toRemove) throws AliasNotFoundException;"},{"lineNumber":139,"author":{"gitID":"jingyinno"},"content":"    //@@author"},{"lineNumber":140,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":141,"author":{"gitID":"Caijun7"},"content":"    //@@author Caijun7"},{"lineNumber":142,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"Caijun7"},"content":"     * Retrieves weekday schedule of all {@code Room}s in the {@code Building} in an ArrayList of ArrayList"},{"lineNumber":144,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"Caijun7"},"content":"    ArrayList\u003cArrayList\u003cString\u003e\u003e retrieveAllRoomsSchedule(Building building)"},{"lineNumber":146,"author":{"gitID":"Caijun7"},"content":"            throws BuildingNotFoundException, CorruptedVenueInformationException, NoRoomsInBuildingException;"},{"lineNumber":147,"author":{"gitID":"Caijun7"},"content":"    //@@author"},{"lineNumber":148,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":2,"yeggasd":6,"Caijun7":52,"jingyinno":28,"-":60}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.WrongPasswordException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.Alias;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.exceptions.AliasNotFoundException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.alias.exceptions.DuplicateAliasException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.building.Building;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.building.exceptions.BuildingNotFoundException;"},{"lineNumber":25,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.exceptions.CorruptedVenueInformationException;"},{"lineNumber":26,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.exceptions.NoRoomsInBuildingException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":30,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":31,"author":{"gitID":"Caijun7"},"content":"import seedu.address.storage.GoogleDriveStorage;"},{"lineNumber":32,"author":{"gitID":"Caijun7"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":33,"author":{"gitID":"Caijun7"},"content":"import seedu.address.storage.exceptions.GoogleAuthorizationException;"},{"lineNumber":34,"author":{"gitID":"Caijun7"},"content":"import seedu.address.storage.exceptions.RequestTimeoutException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":37,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":38,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":39,"author":{"gitID":"-"},"content":" */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        this(addressBook, new UserPrefs());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        addressBook.updatePassword(newData.getPassword());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"jingyinno"},"content":"    //@@author jingyinno"},{"lineNumber":75,"author":{"gitID":"jingyinno"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"jingyinno"},"content":"    public void resetData(ReadOnlyAddressBook newData, HashMap\u003cString, String\u003e newAliasList) {"},{"lineNumber":77,"author":{"gitID":"jingyinno"},"content":"        addressBook.resetData(newData, newAliasList);"},{"lineNumber":78,"author":{"gitID":"jingyinno"},"content":"        addressBook.updatePassword(newData.getPassword());"},{"lineNumber":79,"author":{"gitID":"jingyinno"},"content":"        indicateAddressBookChanged();"},{"lineNumber":80,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"jingyinno"},"content":"    //@@author"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"jingyinno"},"content":"    //@@author jingyinno"},{"lineNumber":107,"author":{"gitID":"jingyinno"},"content":"    @Override"},{"lineNumber":108,"author":{"gitID":"jingyinno"},"content":"    public synchronized void addAlias(Alias alias) throws DuplicateAliasException {"},{"lineNumber":109,"author":{"gitID":"jingyinno"},"content":"        addressBook.addAlias(alias);"},{"lineNumber":110,"author":{"gitID":"jingyinno"},"content":"        indicateAddressBookChanged();"},{"lineNumber":111,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":113,"author":{"gitID":"jingyinno"},"content":"    @Override"},{"lineNumber":114,"author":{"gitID":"jingyinno"},"content":"    public void updateAliasesMapping(HashMap\u003cString, String\u003e aliases) {"},{"lineNumber":115,"author":{"gitID":"jingyinno"},"content":"        requireNonNull(aliases);"},{"lineNumber":116,"author":{"gitID":"jingyinno"},"content":"        addressBook.setAliases(aliases);"},{"lineNumber":117,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":119,"author":{"gitID":"jingyinno"},"content":"    @Override"},{"lineNumber":120,"author":{"gitID":"jingyinno"},"content":"    public synchronized HashMap\u003cString, String\u003e getAliasList() {"},{"lineNumber":121,"author":{"gitID":"jingyinno"},"content":"        return addressBook.getAliasMapping();"},{"lineNumber":122,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":124,"author":{"gitID":"jingyinno"},"content":"    @Override"},{"lineNumber":125,"author":{"gitID":"jingyinno"},"content":"    public synchronized String getCommandFromAlias(String aliasKey) {"},{"lineNumber":126,"author":{"gitID":"jingyinno"},"content":"        return addressBook.getCommandFromAlias(aliasKey);"},{"lineNumber":127,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"jingyinno"},"content":""},{"lineNumber":129,"author":{"gitID":"jingyinno"},"content":"    @Override"},{"lineNumber":130,"author":{"gitID":"jingyinno"},"content":"    public synchronized ArrayList\u003cArrayList\u003cString\u003e\u003e getUiFormattedAliasList() {"},{"lineNumber":131,"author":{"gitID":"jingyinno"},"content":"        return addressBook.getUiFormattedAliasList();"},{"lineNumber":132,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"jingyinno"},"content":"    //@@author"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"yeggasd"},"content":"    //@@author yeggasd"},{"lineNumber":145,"author":{"gitID":"yeggasd"},"content":"    @Override"},{"lineNumber":146,"author":{"gitID":"yeggasd"},"content":"    public void updatePassword(byte[] password) {"},{"lineNumber":147,"author":{"gitID":"yeggasd"},"content":"        addressBook.updatePassword(password);"},{"lineNumber":148,"author":{"gitID":"yeggasd"},"content":"        indicateAddressBookChanged();"},{"lineNumber":149,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"yeggasd"},"content":"    //@@author"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"jingyinno"},"content":"    //@@author jingyinno"},{"lineNumber":153,"author":{"gitID":"jingyinno"},"content":"    @Override"},{"lineNumber":154,"author":{"gitID":"jingyinno"},"content":"    public void removeAlias(String toRemove) throws AliasNotFoundException {"},{"lineNumber":155,"author":{"gitID":"jingyinno"},"content":"        addressBook.removeAlias(toRemove);"},{"lineNumber":156,"author":{"gitID":"jingyinno"},"content":"        indicateAddressBookChanged();"},{"lineNumber":157,"author":{"gitID":"jingyinno"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"jingyinno"},"content":"    //@@author"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"content":"    //@@author Caijun7-reused"},{"lineNumber":161,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":162,"author":{"gitID":"Caijun7"},"content":"    public void deleteTag(Tag tag) {"},{"lineNumber":163,"author":{"gitID":"Caijun7"},"content":"        addressBook.removeTag(tag);"},{"lineNumber":164,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":165,"content":"    //@@author"},{"lineNumber":166,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":167,"author":{"gitID":"Caijun7"},"content":"    //@@author Caijun7"},{"lineNumber":168,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":169,"author":{"gitID":"Caijun7"},"content":"     * Imports the specified {@code AddressBook} from the filepath to the current {@code AddressBook}."},{"lineNumber":170,"author":{"gitID":"Caijun7"},"content":"     * And decrypts the imported file with the {@code password} if password is not null."},{"lineNumber":171,"author":{"gitID":"Caijun7"},"content":"     *"},{"lineNumber":172,"author":{"gitID":"Caijun7"},"content":"     * @param filepath"},{"lineNumber":173,"author":{"gitID":"Caijun7"},"content":"     * @param password"},{"lineNumber":174,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":175,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":176,"author":{"gitID":"Caijun7"},"content":"    public void importAddressBook(String filepath, byte[] password) throws DataConversionException, IOException,"},{"lineNumber":177,"author":{"gitID":"Caijun7"},"content":"                                                                           WrongPasswordException {"},{"lineNumber":178,"author":{"gitID":"Caijun7"},"content":"        requireNonNull(filepath);"},{"lineNumber":179,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":180,"author":{"gitID":"Caijun7"},"content":"        XmlAddressBookStorage xmlAddressBook \u003d new XmlAddressBookStorage(filepath);"},{"lineNumber":181,"author":{"gitID":"Caijun7"},"content":"        xmlAddressBook.importAddressBook(filepath, this.addressBook, password);"},{"lineNumber":182,"author":{"gitID":"Caijun7"},"content":"        indicateAddressBookChanged();"},{"lineNumber":183,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":185,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":186,"author":{"gitID":"Caijun7"},"content":"     * Exports the current view of {@code AddressBook} to the filepath."},{"lineNumber":187,"author":{"gitID":"Caijun7"},"content":"     * And encrypts the exported file with the {@code password} if the password is not null"},{"lineNumber":188,"author":{"gitID":"Caijun7"},"content":"     *"},{"lineNumber":189,"author":{"gitID":"Caijun7"},"content":"     * @param filepath"},{"lineNumber":190,"author":{"gitID":"Caijun7"},"content":"     * @param password"},{"lineNumber":191,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":192,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":193,"author":{"gitID":"Caijun7"},"content":"    public void exportAddressBook(String filepath, Password password) throws IOException {"},{"lineNumber":194,"author":{"gitID":"Caijun7"},"content":"        requireNonNull(filepath);"},{"lineNumber":195,"author":{"gitID":"Caijun7"},"content":"        XmlAddressBookStorage xmlAddressBook \u003d new XmlAddressBookStorage(filepath);"},{"lineNumber":196,"author":{"gitID":"Caijun7"},"content":"        xmlAddressBook.exportAddressBook(filepath, password, filteredPersons, addressBook.getAliasList(),"},{"lineNumber":197,"author":{"gitID":"Caijun7"},"content":"                                         addressBook.getTagList());"},{"lineNumber":198,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":200,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":201,"author":{"gitID":"Caijun7"},"content":"     * Exports the current view of {@code AddressBook} to the googledrive folder of local storage."},{"lineNumber":202,"author":{"gitID":"Caijun7"},"content":"     * And encrypts the exported file with the {@code password} if the password is not null."},{"lineNumber":203,"author":{"gitID":"Caijun7"},"content":"     * Uploads the exported file to the specified filepath in Google Drive."},{"lineNumber":204,"author":{"gitID":"Caijun7"},"content":"     *"},{"lineNumber":205,"author":{"gitID":"Caijun7"},"content":"     * @param filepath"},{"lineNumber":206,"author":{"gitID":"Caijun7"},"content":"     * @param password"},{"lineNumber":207,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":208,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":209,"author":{"gitID":"Caijun7"},"content":"    public void uploadAddressBook(String filepath, Password password) throws IOException,"},{"lineNumber":210,"author":{"gitID":"Caijun7"},"content":"            GoogleAuthorizationException, RequestTimeoutException {"},{"lineNumber":211,"author":{"gitID":"Caijun7"},"content":"        GoogleDriveStorage googleDriveStorage \u003d new GoogleDriveStorage(filepath);"},{"lineNumber":212,"author":{"gitID":"Caijun7"},"content":"        String exportFilePath \u003d googleDriveStorage.getUploadFilePath();"},{"lineNumber":213,"author":{"gitID":"Caijun7"},"content":"        exportAddressBook(exportFilePath, password);"},{"lineNumber":214,"author":{"gitID":"Caijun7"},"content":"        googleDriveStorage.uploadFile();"},{"lineNumber":215,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"Caijun7"},"content":"    //@@author"},{"lineNumber":217,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"Caijun7"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Vacant Room Finder \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":236,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":237,"author":{"gitID":"Caijun7"},"content":"    //@@author Caijun7"},{"lineNumber":238,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":239,"author":{"gitID":"Caijun7"},"content":"     * Retrieves weekday schedule of all {@code Room}s in the {@code Building} in an ArrayList of ArrayList."},{"lineNumber":240,"author":{"gitID":"Caijun7"},"content":"     *"},{"lineNumber":241,"author":{"gitID":"Caijun7"},"content":"     * @param building"},{"lineNumber":242,"author":{"gitID":"Caijun7"},"content":"     * @return"},{"lineNumber":243,"author":{"gitID":"Caijun7"},"content":"     * @throws BuildingNotFoundException"},{"lineNumber":244,"author":{"gitID":"Caijun7"},"content":"     * @throws CorruptedVenueInformationException"},{"lineNumber":245,"author":{"gitID":"Caijun7"},"content":"     * @throws NoRoomsInBuildingException"},{"lineNumber":246,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":247,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":248,"author":{"gitID":"Caijun7"},"content":"    public ArrayList\u003cArrayList\u003cString\u003e\u003e retrieveAllRoomsSchedule(Building building) throws BuildingNotFoundException,"},{"lineNumber":249,"author":{"gitID":"Caijun7"},"content":"            CorruptedVenueInformationException, NoRoomsInBuildingException {"},{"lineNumber":250,"author":{"gitID":"Caijun7"},"content":"        if (!Building.isValidBuilding(building)) {"},{"lineNumber":251,"author":{"gitID":"Caijun7"},"content":"            throw new BuildingNotFoundException();"},{"lineNumber":252,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":253,"author":{"gitID":"Caijun7"},"content":"        return building.retrieveAllRoomsSchedule();"},{"lineNumber":254,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":255,"author":{"gitID":"Caijun7"},"content":"    //@@author"},{"lineNumber":256,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":261,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":266,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":272,"author":{"gitID":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":273,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":2,"yeggasd":7,"Caijun7":87,"jingyinno":43,"-":136}},{"path":"src/main/java/seedu/address/model/building/exceptions/CorruptedVenueInformationException.java","lines":[{"lineNumber":1,"author":{"gitID":"Caijun7"},"content":"package seedu.address.model.building.exceptions;"},{"lineNumber":2,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":3,"author":{"gitID":"Caijun7"},"content":"//@@author Caijun7"},{"lineNumber":4,"author":{"gitID":"Caijun7"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"Caijun7"},"content":" * Signals that some data in venueinformation.json file is corrupted"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":" */"},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":"public class CorruptedVenueInformationException extends Exception {"},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":"    public CorruptedVenueInformationException() {"},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":"        super(\"Unable to read from venueinformation.json, file is corrupted. Please re-download the file.\");"},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":11}},{"path":"src/main/java/seedu/address/storage/GoogleDriveStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"Caijun7"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":3,"author":{"gitID":"Caijun7"},"content":"import static com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp.browse;"},{"lineNumber":4,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":5,"author":{"gitID":"Caijun7"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":"import java.io.InputStreamReader;"},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":"import com.google.api.client.auth.oauth2.AuthorizationCodeRequestUrl;"},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":"import com.google.api.client.auth.oauth2.Credential;"},{"lineNumber":12,"author":{"gitID":"Caijun7"},"content":"import com.google.api.client.auth.oauth2.TokenResponse;"},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":"import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;"},{"lineNumber":14,"author":{"gitID":"Caijun7"},"content":"import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;"},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":"import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;"},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":"import com.google.api.client.googleapis.media.MediaHttpUploader;"},{"lineNumber":17,"author":{"gitID":"Caijun7"},"content":"import com.google.api.client.http.FileContent;"},{"lineNumber":18,"author":{"gitID":"Caijun7"},"content":"import com.google.api.client.http.HttpTransport;"},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":"import com.google.api.client.json.JsonFactory;"},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":"import com.google.api.client.json.jackson2.JacksonFactory;"},{"lineNumber":21,"author":{"gitID":"Caijun7"},"content":"import com.google.api.client.util.Preconditions;"},{"lineNumber":22,"author":{"gitID":"Caijun7"},"content":"import com.google.api.client.util.store.FileDataStoreFactory;"},{"lineNumber":23,"author":{"gitID":"Caijun7"},"content":"import com.google.api.services.drive.Drive;"},{"lineNumber":24,"author":{"gitID":"Caijun7"},"content":"import com.google.api.services.drive.DriveScopes;"},{"lineNumber":25,"author":{"gitID":"Caijun7"},"content":"import com.google.api.services.drive.model.File;"},{"lineNumber":26,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":27,"author":{"gitID":"Caijun7"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":28,"author":{"gitID":"Caijun7"},"content":"import seedu.address.storage.exceptions.GoogleAuthorizationException;"},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":"import seedu.address.storage.exceptions.RequestTimeoutException;"},{"lineNumber":30,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":31,"content":"//@@author Caijun7-reused"},{"lineNumber":32,"author":{"gitID":"Caijun7"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"Caijun7"},"content":" * A class to read and write files stored in the user\u0027s Google Drive storage."},{"lineNumber":34,"author":{"gitID":"Caijun7"},"content":" */"},{"lineNumber":35,"author":{"gitID":"Caijun7"},"content":"public class GoogleDriveStorage {"},{"lineNumber":36,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":37,"author":{"gitID":"Caijun7"},"content":"    private static final String APPLICATION_NAME \u003d \"StardyTogether\";"},{"lineNumber":38,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":39,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"Caijun7"},"content":"     * Directory to store user credentials."},{"lineNumber":41,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"Caijun7"},"content":"    private static java.io.File dataStoreDir \u003d"},{"lineNumber":43,"author":{"gitID":"Caijun7"},"content":"            new java.io.File(System.getProperty(\"user.home\"), \".google-credentials/google-drive-storage\");"},{"lineNumber":44,"author":{"gitID":"Caijun7"},"content":"    private static String uploadFileFolder \u003d \"./googledrive/\";"},{"lineNumber":45,"author":{"gitID":"Caijun7"},"content":"    private static String user \u003d \"user\";"},{"lineNumber":46,"author":{"gitID":"Caijun7"},"content":"    private static FileDataStoreFactory dataStoreFactory;"},{"lineNumber":47,"author":{"gitID":"Caijun7"},"content":"    private static HttpTransport httpTransport;"},{"lineNumber":48,"author":{"gitID":"Caijun7"},"content":"    private static final JsonFactory JSON_FACTORY \u003d JacksonFactory.getDefaultInstance();"},{"lineNumber":49,"author":{"gitID":"Caijun7"},"content":"    private static Credential credential;"},{"lineNumber":50,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":51,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"Caijun7"},"content":"     * Google Drive API client."},{"lineNumber":53,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"Caijun7"},"content":"    private static Drive drive;"},{"lineNumber":55,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":56,"author":{"gitID":"Caijun7"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(GoogleDriveStorage.class);"},{"lineNumber":57,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":58,"author":{"gitID":"Caijun7"},"content":"    private final String uploadFilePath;"},{"lineNumber":59,"author":{"gitID":"Caijun7"},"content":"    private final java.io.File uploadFile;"},{"lineNumber":60,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":61,"author":{"gitID":"Caijun7"},"content":"    public GoogleDriveStorage(String uploadFilePath) throws GoogleAuthorizationException, RequestTimeoutException {"},{"lineNumber":62,"author":{"gitID":"Caijun7"},"content":"        this.uploadFilePath \u003d uploadFileFolder + uploadFilePath;"},{"lineNumber":63,"author":{"gitID":"Caijun7"},"content":"        uploadFile \u003d new java.io.File(this.uploadFilePath);"},{"lineNumber":64,"author":{"gitID":"Caijun7"},"content":"        userAuthorize();"},{"lineNumber":65,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":67,"author":{"gitID":"Caijun7"},"content":"    public String getUploadFilePath() {"},{"lineNumber":68,"author":{"gitID":"Caijun7"},"content":"        return uploadFilePath;"},{"lineNumber":69,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":71,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"Caijun7"},"content":"     * Sets the variables for test environment"},{"lineNumber":73,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"Caijun7"},"content":"    public static void setTestEnvironment() {"},{"lineNumber":75,"author":{"gitID":"Caijun7"},"content":"        uploadFileFolder \u003d \"\";"},{"lineNumber":76,"author":{"gitID":"Caijun7"},"content":"        user \u003d \"test\";"},{"lineNumber":77,"author":{"gitID":"Caijun7"},"content":"        dataStoreDir \u003d new java.io.File(\"./src/test/resources/GoogleCredentials/\");"},{"lineNumber":78,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":80,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"Caijun7"},"content":"     * Resets the variables for user environment"},{"lineNumber":82,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"Caijun7"},"content":"    public static void resetTestEnvironment() {"},{"lineNumber":84,"author":{"gitID":"Caijun7"},"content":"        uploadFileFolder \u003d \"./googledrive/\";"},{"lineNumber":85,"author":{"gitID":"Caijun7"},"content":"        user \u003d \"user\";"},{"lineNumber":86,"author":{"gitID":"Caijun7"},"content":"        dataStoreDir \u003d new java.io.File(System.getProperty(\"user.home\"), \".google-credentials/google-drive-storage\");"},{"lineNumber":87,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":89,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"Caijun7"},"content":"     * Opens Google authentication link in user\u0027s default browser and request for authorization."},{"lineNumber":91,"author":{"gitID":"Caijun7"},"content":"     * Sets up an instance of Google Drive API client after user authorized the application."},{"lineNumber":92,"author":{"gitID":"Caijun7"},"content":"     *"},{"lineNumber":93,"author":{"gitID":"Caijun7"},"content":"     * @throws GoogleAuthorizationException When application is unable to gain user\u0027s authorization"},{"lineNumber":94,"author":{"gitID":"Caijun7"},"content":"     * @throws RequestTimeoutException      When authorization request timed out"},{"lineNumber":95,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"Caijun7"},"content":"    private void userAuthorize() throws GoogleAuthorizationException, RequestTimeoutException {"},{"lineNumber":97,"author":{"gitID":"Caijun7"},"content":"        Preconditions.checkArgument("},{"lineNumber":98,"author":{"gitID":"Caijun7"},"content":"                !uploadFilePath.startsWith(\"Enter \"),"},{"lineNumber":99,"author":{"gitID":"Caijun7"},"content":"                \"Please enter the upload file path in %s\", GoogleDriveStorage.class);"},{"lineNumber":100,"author":{"gitID":"Caijun7"},"content":"        try {"},{"lineNumber":101,"author":{"gitID":"Caijun7"},"content":"            httpTransport \u003d GoogleNetHttpTransport.newTrustedTransport();"},{"lineNumber":102,"author":{"gitID":"Caijun7"},"content":"            dataStoreFactory \u003d new FileDataStoreFactory(dataStoreDir);"},{"lineNumber":103,"author":{"gitID":"Caijun7"},"content":"            credential \u003d authorizationRequest();"},{"lineNumber":104,"author":{"gitID":"Caijun7"},"content":"            drive \u003d new Drive.Builder(httpTransport, JSON_FACTORY, credential).setApplicationName("},{"lineNumber":105,"author":{"gitID":"Caijun7"},"content":"                    APPLICATION_NAME).build();"},{"lineNumber":106,"author":{"gitID":"Caijun7"},"content":"            return;"},{"lineNumber":107,"author":{"gitID":"Caijun7"},"content":"        } catch (IOException e) {"},{"lineNumber":108,"author":{"gitID":"Caijun7"},"content":"            logger.warning(e.getMessage());"},{"lineNumber":109,"author":{"gitID":"Caijun7"},"content":"            throw new GoogleAuthorizationException();"},{"lineNumber":110,"author":{"gitID":"Caijun7"},"content":"        } catch (RuntimeException e) {"},{"lineNumber":111,"author":{"gitID":"Caijun7"},"content":"            logger.warning(e.getMessage());"},{"lineNumber":112,"author":{"gitID":"Caijun7"},"content":"            throw new RequestTimeoutException();"},{"lineNumber":113,"author":{"gitID":"Caijun7"},"content":"        } catch (Exception e) {"},{"lineNumber":114,"author":{"gitID":"Caijun7"},"content":"            logger.warning(e.getMessage());"},{"lineNumber":115,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":118,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"Caijun7"},"content":"     * Authorizes the installed application to access user\u0027s protected data."},{"lineNumber":120,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"Caijun7"},"content":"    private Credential authorizationRequest() throws IOException {"},{"lineNumber":122,"author":{"gitID":"Caijun7"},"content":"        GoogleClientSecrets clientSecrets \u003d retrieveClientSecrets();"},{"lineNumber":123,"author":{"gitID":"Caijun7"},"content":"        GoogleAuthorizationCodeFlow flow \u003d buildFlow(clientSecrets);"},{"lineNumber":124,"author":{"gitID":"Caijun7"},"content":"        CancellableServerReceiver receiver \u003d new CancellableServerReceiver();"},{"lineNumber":125,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":126,"author":{"gitID":"Caijun7"},"content":"        Credential credential \u003d getUserCredential(flow, receiver);"},{"lineNumber":127,"author":{"gitID":"Caijun7"},"content":"        return credential;"},{"lineNumber":128,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":130,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"Caijun7"},"content":"     * Retrieves application\u0027s client secrets in resource file folder"},{"lineNumber":132,"author":{"gitID":"Caijun7"},"content":"     *"},{"lineNumber":133,"author":{"gitID":"Caijun7"},"content":"     * @throws IOException When client secrets is not found"},{"lineNumber":134,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"Caijun7"},"content":"    private GoogleClientSecrets retrieveClientSecrets() throws IOException {"},{"lineNumber":136,"author":{"gitID":"Caijun7"},"content":"        GoogleClientSecrets clientSecrets \u003d GoogleClientSecrets.load(JSON_FACTORY,"},{"lineNumber":137,"author":{"gitID":"Caijun7"},"content":"                new InputStreamReader(GoogleDriveStorage.class.getResourceAsStream(\"/json/client_secret.json\")));"},{"lineNumber":138,"author":{"gitID":"Caijun7"},"content":"        if (clientSecrets.getDetails().getClientId().startsWith(\"Enter\")"},{"lineNumber":139,"author":{"gitID":"Caijun7"},"content":"                || clientSecrets.getDetails().getClientSecret().startsWith(\"Enter \")) {"},{"lineNumber":140,"author":{"gitID":"Caijun7"},"content":"            System.out.println("},{"lineNumber":141,"author":{"gitID":"Caijun7"},"content":"                    \"Enter Client ID and Secret from https://code.google.com/apis/console/?api\u003ddrive \""},{"lineNumber":142,"author":{"gitID":"Caijun7"},"content":"                            + \"into /src/main/resources/json/client_secret.json\");"},{"lineNumber":143,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"Caijun7"},"content":"        return clientSecrets;"},{"lineNumber":145,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":147,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"Caijun7"},"content":"     * Builds {@code GoogleAuthorizationCodeFlow} object from client secrets"},{"lineNumber":149,"author":{"gitID":"Caijun7"},"content":"     *"},{"lineNumber":150,"author":{"gitID":"Caijun7"},"content":"     * @param clientSecrets Application\u0027s client secrets"},{"lineNumber":151,"author":{"gitID":"Caijun7"},"content":"     * @throws IOException"},{"lineNumber":152,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"Caijun7"},"content":"    private GoogleAuthorizationCodeFlow buildFlow(GoogleClientSecrets clientSecrets) throws IOException {"},{"lineNumber":154,"author":{"gitID":"Caijun7"},"content":"        GoogleAuthorizationCodeFlow flow \u003d new GoogleAuthorizationCodeFlow.Builder("},{"lineNumber":155,"author":{"gitID":"Caijun7"},"content":"                httpTransport, JSON_FACTORY, clientSecrets,"},{"lineNumber":156,"author":{"gitID":"Caijun7"},"content":"                Collections.singleton(DriveScopes.DRIVE_FILE)).setDataStoreFactory(dataStoreFactory)"},{"lineNumber":157,"author":{"gitID":"Caijun7"},"content":"                .setAccessType(\"offline\")"},{"lineNumber":158,"author":{"gitID":"Caijun7"},"content":"                .setApprovalPrompt(\"force\")"},{"lineNumber":159,"author":{"gitID":"Caijun7"},"content":"                .build();"},{"lineNumber":160,"author":{"gitID":"Caijun7"},"content":"        return flow;"},{"lineNumber":161,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":163,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"Caijun7"},"content":"     * Creates user\u0027s {@code Credential} by redirecting user to authorization request url and get access token"},{"lineNumber":165,"author":{"gitID":"Caijun7"},"content":"     *"},{"lineNumber":166,"author":{"gitID":"Caijun7"},"content":"     * @param flow          Authorization request flow"},{"lineNumber":167,"author":{"gitID":"Caijun7"},"content":"     * @param receiver      Server receiver to receive access token"},{"lineNumber":168,"author":{"gitID":"Caijun7"},"content":"     * @throws IOException  If user rejects access to his/her Google Drive"},{"lineNumber":169,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":170,"author":{"gitID":"Caijun7"},"content":"    private Credential getUserCredential(GoogleAuthorizationCodeFlow flow, CancellableServerReceiver receiver)"},{"lineNumber":171,"author":{"gitID":"Caijun7"},"content":"            throws IOException {"},{"lineNumber":172,"author":{"gitID":"Caijun7"},"content":"        try {"},{"lineNumber":173,"author":{"gitID":"Caijun7"},"content":"            Credential credential \u003d flow.loadCredential(user);"},{"lineNumber":174,"author":{"gitID":"Caijun7"},"content":"            if (credential !\u003d null"},{"lineNumber":175,"author":{"gitID":"Caijun7"},"content":"                    \u0026\u0026 (credential.getRefreshToken() !\u003d null"},{"lineNumber":176,"author":{"gitID":"Caijun7"},"content":"                    || credential.getExpiresInSeconds() \u003d\u003d null"},{"lineNumber":177,"author":{"gitID":"Caijun7"},"content":"                    || credential.getExpiresInSeconds() \u003e 60)) {"},{"lineNumber":178,"author":{"gitID":"Caijun7"},"content":"                return credential;"},{"lineNumber":179,"author":{"gitID":"Caijun7"},"content":"            }"},{"lineNumber":180,"author":{"gitID":"Caijun7"},"content":"            // open in browser"},{"lineNumber":181,"author":{"gitID":"Caijun7"},"content":"            String redirectUri \u003d receiver.getRedirectUri();"},{"lineNumber":182,"author":{"gitID":"Caijun7"},"content":"            AuthorizationCodeRequestUrl authorizationUrl \u003d"},{"lineNumber":183,"author":{"gitID":"Caijun7"},"content":"                    flow.newAuthorizationUrl().setRedirectUri(redirectUri);"},{"lineNumber":184,"author":{"gitID":"Caijun7"},"content":"            browse(authorizationUrl.build());"},{"lineNumber":185,"author":{"gitID":"Caijun7"},"content":"            // receive authorization code and exchange it for an access token"},{"lineNumber":186,"author":{"gitID":"Caijun7"},"content":"            String code \u003d receiver.waitForCode();"},{"lineNumber":187,"author":{"gitID":"Caijun7"},"content":"            TokenResponse response \u003d flow.newTokenRequest(code).setRedirectUri(redirectUri).execute();"},{"lineNumber":188,"author":{"gitID":"Caijun7"},"content":"            // store credential and return it"},{"lineNumber":189,"author":{"gitID":"Caijun7"},"content":"            return flow.createAndStoreCredential(response, user);"},{"lineNumber":190,"author":{"gitID":"Caijun7"},"content":"        } finally {"},{"lineNumber":191,"author":{"gitID":"Caijun7"},"content":"            receiver.stop();"},{"lineNumber":192,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":195,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":196,"author":{"gitID":"Caijun7"},"content":"     * Uploads a file using direct media upload."},{"lineNumber":197,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":198,"author":{"gitID":"Caijun7"},"content":"    public File uploadFile() throws IOException {"},{"lineNumber":199,"author":{"gitID":"Caijun7"},"content":"        File fileMetadata \u003d new File();"},{"lineNumber":200,"author":{"gitID":"Caijun7"},"content":"        fileMetadata.setTitle(uploadFile.getName());"},{"lineNumber":201,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":202,"author":{"gitID":"Caijun7"},"content":"        FileContent mediaContent \u003d new FileContent(\"image/jpeg\", uploadFile);"},{"lineNumber":203,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":204,"author":{"gitID":"Caijun7"},"content":"        Drive.Files.Insert insert \u003d drive.files().insert(fileMetadata, mediaContent);"},{"lineNumber":205,"author":{"gitID":"Caijun7"},"content":"        MediaHttpUploader uploader \u003d insert.getMediaHttpUploader();"},{"lineNumber":206,"author":{"gitID":"Caijun7"},"content":"        uploader.setDirectUploadEnabled(true);"},{"lineNumber":207,"author":{"gitID":"Caijun7"},"content":"        return insert.execute();"},{"lineNumber":208,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"null":1,"Caijun7":208}},{"path":"src/main/java/seedu/address/model/building/Room.java","lines":[{"lineNumber":1,"author":{"gitID":"Caijun7"},"content":"package seedu.address.model.building;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":"import java.util.HashMap;"},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.exceptions.CorruptedVenueInformationException;"},{"lineNumber":12,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":"//@@author Caijun7"},{"lineNumber":14,"author":{"gitID":"Caijun7"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":" * Represents a Room in National University of Singapore."},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidRoom(String)}"},{"lineNumber":17,"author":{"gitID":"Caijun7"},"content":" */"},{"lineNumber":18,"author":{"gitID":"Caijun7"},"content":"public class Room {"},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":"    public static final String MESSAGE_ROOM_CONSTRAINTS \u003d"},{"lineNumber":21,"author":{"gitID":"Caijun7"},"content":"            \"Room names can take any values, and it should not be blank\";"},{"lineNumber":22,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":23,"author":{"gitID":"Caijun7"},"content":"    public static final String ROOM_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":24,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":25,"author":{"gitID":"Caijun7"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(Room.class);"},{"lineNumber":26,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":27,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"Caijun7"},"content":"     * Represents all rooms in National University of Singapore"},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"Caijun7"},"content":"    private static HashMap\u003cString, Week\u003e nusVenues \u003d null;"},{"lineNumber":31,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":32,"author":{"gitID":"Caijun7"},"content":"    private final String roomName;"},{"lineNumber":33,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":34,"author":{"gitID":"Caijun7"},"content":"    private HashMap\u003cString, Week\u003e nusRooms \u003d null;"},{"lineNumber":35,"author":{"gitID":"Caijun7"},"content":"    private Week week \u003d null;"},{"lineNumber":36,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":37,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"Caijun7"},"content":"     * Uses a private {@code Room} constructor for Jackson JSON API to instantiate an object"},{"lineNumber":39,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"Caijun7"},"content":"    private Room() {"},{"lineNumber":41,"author":{"gitID":"Caijun7"},"content":"        roomName \u003d \"\";"},{"lineNumber":42,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":44,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"Caijun7"},"content":"     * Constructs a {@code Room}."},{"lineNumber":46,"author":{"gitID":"Caijun7"},"content":"     *"},{"lineNumber":47,"author":{"gitID":"Caijun7"},"content":"     * @param roomName A valid room name."},{"lineNumber":48,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"Caijun7"},"content":"    public Room(String roomName) {"},{"lineNumber":50,"author":{"gitID":"Caijun7"},"content":"        requireNonNull(roomName);"},{"lineNumber":51,"author":{"gitID":"Caijun7"},"content":"        checkArgument(isValidRoom(roomName), MESSAGE_ROOM_CONSTRAINTS);"},{"lineNumber":52,"author":{"gitID":"Caijun7"},"content":"        this.roomName \u003d roomName;"},{"lineNumber":53,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":55,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"Caijun7"},"content":"     * Returns true if a given string is a valid room name."},{"lineNumber":57,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"Caijun7"},"content":"    private static boolean isValidRoom(String test) {"},{"lineNumber":59,"author":{"gitID":"Caijun7"},"content":"        return test.matches(ROOM_VALIDATION_REGEX);"},{"lineNumber":60,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":62,"author":{"gitID":"Caijun7"},"content":"    public static HashMap\u003cString, Week\u003e getNusVenues() {"},{"lineNumber":63,"author":{"gitID":"Caijun7"},"content":"        return nusVenues;"},{"lineNumber":64,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":66,"author":{"gitID":"Caijun7"},"content":"    public static void setNusVenues(HashMap\u003cString, Week\u003e nusVenues) {"},{"lineNumber":67,"author":{"gitID":"Caijun7"},"content":"        Room.nusVenues \u003d nusVenues;"},{"lineNumber":68,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":70,"author":{"gitID":"Caijun7"},"content":"    public HashMap\u003cString, Week\u003e getNusRooms() {"},{"lineNumber":71,"author":{"gitID":"Caijun7"},"content":"        return nusRooms;"},{"lineNumber":72,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":74,"author":{"gitID":"Caijun7"},"content":"    public void setNusRooms(HashMap\u003cString, Week\u003e nusRooms) {"},{"lineNumber":75,"author":{"gitID":"Caijun7"},"content":"        this.nusRooms \u003d nusRooms;"},{"lineNumber":76,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":78,"author":{"gitID":"Caijun7"},"content":"    public String getRoomName() {"},{"lineNumber":79,"author":{"gitID":"Caijun7"},"content":"        return roomName;"},{"lineNumber":80,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":82,"author":{"gitID":"Caijun7"},"content":"    public Week getWeek() {"},{"lineNumber":83,"author":{"gitID":"Caijun7"},"content":"        return week;"},{"lineNumber":84,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":86,"author":{"gitID":"Caijun7"},"content":"    public void setWeek(Week week) {"},{"lineNumber":87,"author":{"gitID":"Caijun7"},"content":"        this.week \u003d week;"},{"lineNumber":88,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":90,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"Caijun7"},"content":"     * Retrieves the {@code Room}\u0027s weekday schedule in an ArrayList"},{"lineNumber":92,"author":{"gitID":"Caijun7"},"content":"     *"},{"lineNumber":93,"author":{"gitID":"Caijun7"},"content":"     * @throws CorruptedVenueInformationException if the room schedule format is not as expected."},{"lineNumber":94,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"Caijun7"},"content":"    public ArrayList\u003cString\u003e retrieveWeekDaySchedule() throws CorruptedVenueInformationException {"},{"lineNumber":96,"author":{"gitID":"Caijun7"},"content":"        initializeWeek();"},{"lineNumber":97,"author":{"gitID":"Caijun7"},"content":"        ArrayList\u003cString\u003e schedules \u003d week.retrieveWeekDaySchedule();"},{"lineNumber":98,"author":{"gitID":"Caijun7"},"content":"        schedules.add(0, roomName);"},{"lineNumber":99,"author":{"gitID":"Caijun7"},"content":"        return schedules;"},{"lineNumber":100,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":102,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"Caijun7"},"content":"     * Initialize the {@code Week} schedule of the room"},{"lineNumber":104,"author":{"gitID":"Caijun7"},"content":"     *"},{"lineNumber":105,"author":{"gitID":"Caijun7"},"content":"     * @throws CorruptedVenueInformationException if the NUS Venues format is not as expected."},{"lineNumber":106,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"Caijun7"},"content":"    public void initializeWeek() throws CorruptedVenueInformationException {"},{"lineNumber":108,"author":{"gitID":"Caijun7"},"content":"        if (nusVenues \u003d\u003d null) {"},{"lineNumber":109,"author":{"gitID":"Caijun7"},"content":"            logger.warning(\"NUS Venues is null, venueinformation.json file is corrupted.\");"},{"lineNumber":110,"author":{"gitID":"Caijun7"},"content":"            throw new CorruptedVenueInformationException();"},{"lineNumber":111,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"Caijun7"},"content":"        week \u003d nusVenues.get(roomName);"},{"lineNumber":113,"author":{"gitID":"Caijun7"},"content":"        if (week \u003d\u003d null) {"},{"lineNumber":114,"author":{"gitID":"Caijun7"},"content":"            logger.warning(roomName + \" data is null, venueinformation.json file is corrupted.\");"},{"lineNumber":115,"author":{"gitID":"Caijun7"},"content":"            throw new CorruptedVenueInformationException();"},{"lineNumber":116,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"Caijun7"},"content":"        week.setRoomName(roomName);"},{"lineNumber":118,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":120,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":121,"author":{"gitID":"Caijun7"},"content":"    public String toString() {"},{"lineNumber":122,"author":{"gitID":"Caijun7"},"content":"        return roomName;"},{"lineNumber":123,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":125,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":126,"author":{"gitID":"Caijun7"},"content":"    public boolean equals(Object other) {"},{"lineNumber":127,"author":{"gitID":"Caijun7"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":128,"author":{"gitID":"Caijun7"},"content":"                || (other instanceof Room // instanceof handles nulls"},{"lineNumber":129,"author":{"gitID":"Caijun7"},"content":"                \u0026\u0026 roomName.equals(((Room) other).roomName)); // state check"},{"lineNumber":130,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":132,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":133,"author":{"gitID":"Caijun7"},"content":"    public int hashCode() {"},{"lineNumber":134,"author":{"gitID":"Caijun7"},"content":"        return roomName.hashCode();"},{"lineNumber":135,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":137,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":133,"-":4}},{"path":"src/main/java/seedu/address/model/building/exceptions/InvalidWeekScheduleException.java","lines":[{"lineNumber":1,"author":{"gitID":"Caijun7"},"content":"package seedu.address.model.building.exceptions;"},{"lineNumber":2,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":3,"author":{"gitID":"Caijun7"},"content":"//@@author Caijun7"},{"lineNumber":4,"author":{"gitID":"Caijun7"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"Caijun7"},"content":" * Signals that week schedule is in incorrect format"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":" */"},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":"public class InvalidWeekScheduleException extends Exception {"},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":"    public InvalidWeekScheduleException() {"},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":"        super(\"Week Schedule is in incorrect format, venueinformation.json file is corrupted.\");"},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":11}},{"path":"src/main/java/seedu/address/model/building/Week.java","lines":[{"lineNumber":1,"author":{"gitID":"Caijun7"},"content":"package seedu.address.model.building;"},{"lineNumber":2,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":3,"author":{"gitID":"Caijun7"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"Caijun7"},"content":"import java.util.Calendar;"},{"lineNumber":5,"author":{"gitID":"Caijun7"},"content":"import java.util.TimeZone;"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.exceptions.CorruptedVenueInformationException;"},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.exceptions.InvalidWeekScheduleException;"},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":12,"author":{"gitID":"Caijun7"},"content":"//@@author Caijun7"},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"Caijun7"},"content":" * Represents a Week schedule of a Room in National University of Singapore."},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":" */"},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":"public class Week {"},{"lineNumber":17,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":18,"author":{"gitID":"Caijun7"},"content":"    public static final int NUMBER_OF_DAYS \u003d 6;"},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":"    public static final int SUNDAY \u003d -1;"},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":21,"author":{"gitID":"Caijun7"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(Week.class);"},{"lineNumber":22,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":23,"author":{"gitID":"Caijun7"},"content":"    private static final int NUMBER_OF_CLASSES \u003d 13;"},{"lineNumber":24,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":25,"author":{"gitID":"Caijun7"},"content":"    private ArrayList\u003cWeekDay\u003e weekSchedule \u003d null;"},{"lineNumber":26,"author":{"gitID":"Caijun7"},"content":"    private String roomName;"},{"lineNumber":27,"author":{"gitID":"Caijun7"},"content":"    private int weekday;"},{"lineNumber":28,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":"    public ArrayList\u003cWeekDay\u003e getWeekSchedule() {"},{"lineNumber":30,"author":{"gitID":"Caijun7"},"content":"        return weekSchedule;"},{"lineNumber":31,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":33,"author":{"gitID":"Caijun7"},"content":"    public void setWeekSchedule(ArrayList\u003cWeekDay\u003e weekSchedule) {"},{"lineNumber":34,"author":{"gitID":"Caijun7"},"content":"        this.weekSchedule \u003d weekSchedule;"},{"lineNumber":35,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":37,"author":{"gitID":"Caijun7"},"content":"    public String getRoomName() {"},{"lineNumber":38,"author":{"gitID":"Caijun7"},"content":"        return roomName;"},{"lineNumber":39,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":41,"author":{"gitID":"Caijun7"},"content":"    public void setRoomName(String roomName) {"},{"lineNumber":42,"author":{"gitID":"Caijun7"},"content":"        this.roomName \u003d roomName;"},{"lineNumber":43,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":45,"author":{"gitID":"Caijun7"},"content":"    public int getWeekday() {"},{"lineNumber":46,"author":{"gitID":"Caijun7"},"content":"        return weekday;"},{"lineNumber":47,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":49,"author":{"gitID":"Caijun7"},"content":"    public void setWeekday(int weekday) {"},{"lineNumber":50,"author":{"gitID":"Caijun7"},"content":"        this.weekday \u003d weekday;"},{"lineNumber":51,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":53,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"Caijun7"},"content":"     * Retrieves the {@code Room}\u0027s weekday schedule in an ArrayList"},{"lineNumber":55,"author":{"gitID":"Caijun7"},"content":"     *"},{"lineNumber":56,"author":{"gitID":"Caijun7"},"content":"     * @throws CorruptedVenueInformationException if the room schedule format is not as expected."},{"lineNumber":57,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"Caijun7"},"content":"    public ArrayList\u003cString\u003e retrieveWeekDaySchedule() throws CorruptedVenueInformationException {"},{"lineNumber":59,"author":{"gitID":"Caijun7"},"content":"        try {"},{"lineNumber":60,"author":{"gitID":"Caijun7"},"content":"            isValidWeekSchedule();"},{"lineNumber":61,"author":{"gitID":"Caijun7"},"content":"            weekday \u003d getDayOfWeek();"},{"lineNumber":62,"author":{"gitID":"Caijun7"},"content":"            if (weekday \u003d\u003d SUNDAY) {"},{"lineNumber":63,"author":{"gitID":"Caijun7"},"content":"                return getNoClassSchedule();"},{"lineNumber":64,"author":{"gitID":"Caijun7"},"content":"            }"},{"lineNumber":65,"author":{"gitID":"Caijun7"},"content":"            WeekDay weekDay \u003d initializeWeekDay();"},{"lineNumber":66,"author":{"gitID":"Caijun7"},"content":"            return weekDay.retrieveWeekDaySchedule();"},{"lineNumber":67,"author":{"gitID":"Caijun7"},"content":"        } catch (InvalidWeekScheduleException e) {"},{"lineNumber":68,"author":{"gitID":"Caijun7"},"content":"            throw new CorruptedVenueInformationException();"},{"lineNumber":69,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":72,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"Caijun7"},"content":"     * Checks for null instance in week schedule list"},{"lineNumber":74,"author":{"gitID":"Caijun7"},"content":"     *"},{"lineNumber":75,"author":{"gitID":"Caijun7"},"content":"     * @throws InvalidWeekScheduleException if the week schedule format is not as expected."},{"lineNumber":76,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"Caijun7"},"content":"    public boolean isValidWeekSchedule() throws InvalidWeekScheduleException {"},{"lineNumber":78,"author":{"gitID":"Caijun7"},"content":"        if (weekSchedule \u003d\u003d null) {"},{"lineNumber":79,"author":{"gitID":"Caijun7"},"content":"            logger.warning(\"Week Schedule is null, venueinformation.json file is corrupted.\");"},{"lineNumber":80,"author":{"gitID":"Caijun7"},"content":"            throw new InvalidWeekScheduleException();"},{"lineNumber":81,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"Caijun7"},"content":"        if (weekSchedule.size() !\u003d NUMBER_OF_DAYS) {"},{"lineNumber":83,"author":{"gitID":"Caijun7"},"content":"            logger.warning(\"Week Schedule has incorrect data, venueinformation.json file is corrupted.\");"},{"lineNumber":84,"author":{"gitID":"Caijun7"},"content":"            throw new InvalidWeekScheduleException();"},{"lineNumber":85,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"Caijun7"},"content":"        return true;"},{"lineNumber":87,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":89,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"Caijun7"},"content":"     * Gets the current weekday, weekday starts from Monday which is 0, which is offset by 2 from calendar API"},{"lineNumber":91,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"Caijun7"},"content":"    private int getDayOfWeek() {"},{"lineNumber":93,"author":{"gitID":"Caijun7"},"content":"        Calendar calendar \u003d Calendar.getInstance();"},{"lineNumber":94,"author":{"gitID":"Caijun7"},"content":"        calendar.setTimeZone(TimeZone.getTimeZone(\"Asia/Singapore\"));"},{"lineNumber":95,"author":{"gitID":"Caijun7"},"content":"        int day \u003d calendar.get(Calendar.DAY_OF_WEEK);"},{"lineNumber":96,"author":{"gitID":"Caijun7"},"content":"        return day - 2;"},{"lineNumber":97,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":99,"author":{"gitID":"Caijun7"},"content":"    private WeekDay initializeWeekDay() {"},{"lineNumber":100,"author":{"gitID":"Caijun7"},"content":"        WeekDay weekDay \u003d weekSchedule.get(weekday);"},{"lineNumber":101,"author":{"gitID":"Caijun7"},"content":"        weekDay.setRoomName(roomName);"},{"lineNumber":102,"author":{"gitID":"Caijun7"},"content":"        return weekDay;"},{"lineNumber":103,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":105,"author":{"gitID":"Caijun7"},"content":"    private ArrayList\u003cString\u003e getNoClassSchedule() {"},{"lineNumber":106,"author":{"gitID":"Caijun7"},"content":"        ArrayList\u003cString\u003e noClassSchedule \u003d new ArrayList\u003c\u003e();"},{"lineNumber":107,"author":{"gitID":"Caijun7"},"content":"        for (int i \u003d 0; i \u003c NUMBER_OF_CLASSES; i++) {"},{"lineNumber":108,"author":{"gitID":"Caijun7"},"content":"            noClassSchedule.add(\"vacant\");"},{"lineNumber":109,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"Caijun7"},"content":"        return noClassSchedule;"},{"lineNumber":111,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":113,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":114,"author":{"gitID":"Caijun7"},"content":"    public String toString() {"},{"lineNumber":115,"author":{"gitID":"Caijun7"},"content":"        return roomName + \"Week Schedule\";"},{"lineNumber":116,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":118,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":119,"author":{"gitID":"Caijun7"},"content":"    public boolean equals(Object other) {"},{"lineNumber":120,"author":{"gitID":"Caijun7"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":121,"author":{"gitID":"Caijun7"},"content":"                || (other instanceof Week // instanceof handles nulls"},{"lineNumber":122,"author":{"gitID":"Caijun7"},"content":"                \u0026\u0026 weekSchedule.equals(((Week) other).weekSchedule)); // state check"},{"lineNumber":123,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":125,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":126,"author":{"gitID":"Caijun7"},"content":"    public int hashCode() {"},{"lineNumber":127,"author":{"gitID":"Caijun7"},"content":"        return weekSchedule.hashCode();"},{"lineNumber":128,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":130,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":130}},{"path":"src/main/java/seedu/address/model/building/exceptions/InvalidWeekDayScheduleException.java","lines":[{"lineNumber":1,"author":{"gitID":"Caijun7"},"content":"package seedu.address.model.building.exceptions;"},{"lineNumber":2,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":3,"author":{"gitID":"Caijun7"},"content":"//@@author Caijun7"},{"lineNumber":4,"author":{"gitID":"Caijun7"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"Caijun7"},"content":" * Signals that weekday schedule is in incorrect format"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":" */"},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":"public class InvalidWeekDayScheduleException extends Exception {"},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":"    public InvalidWeekDayScheduleException() {"},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":"        super(\"Weekday Schedule is in incorrect format, venueinformation.json file is corrupted.\");"},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":11}},{"path":"src/main/java/seedu/address/model/person/timetable/Timetable.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person.timetable;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.timetable.TimetableParserUtil.parseUrl;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.timetable.Lesson;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"AzuraAiR"},"content":"//@@author AzuraAiR"},{"lineNumber":16,"author":{"gitID":"AzuraAiR"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"AzuraAiR"},"content":" * Represents a Person\u0027s timetable in the address book"},{"lineNumber":18,"author":{"gitID":"AzuraAiR"},"content":" */"},{"lineNumber":19,"author":{"gitID":"AzuraAiR"},"content":"public class Timetable {"},{"lineNumber":20,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":21,"author":{"gitID":"AzuraAiR"},"content":"    public static final String EMPTY_LINK \u003d \"\";"},{"lineNumber":22,"author":{"gitID":"AzuraAiR"},"content":"    public static final String DUMMY_LINK_ONE \u003d \"http://modsn.us/aaaaa\";"},{"lineNumber":23,"author":{"gitID":"AzuraAiR"},"content":"    public static final String DUMMY_LINK_TWO \u003d \"http://modsn.us/bbbbb\";"},{"lineNumber":24,"author":{"gitID":"AzuraAiR"},"content":"    public static final String NUSMODS_SHORT \u003d \"modsn.us\";"},{"lineNumber":25,"author":{"gitID":"AzuraAiR"},"content":"    public static final String URL_HOST_REGEX \u003d \"\\\\/\\\\/.*?\\\\/\";"},{"lineNumber":26,"author":{"gitID":"AzuraAiR"},"content":"    public static final String MESSAGE_URL_CONSTRAINTS \u003d"},{"lineNumber":27,"author":{"gitID":"AzuraAiR"},"content":"            \"Timetable URL should only be NUSMods shortened URLs\";"},{"lineNumber":28,"author":{"gitID":"AzuraAiR"},"content":"    public static final String MESSAGE_INVALID_URL \u003d"},{"lineNumber":29,"author":{"gitID":"AzuraAiR"},"content":"            \"The given NUSMods URL is invalid\";"},{"lineNumber":30,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":31,"author":{"gitID":"AzuraAiR"},"content":"    public final String value;"},{"lineNumber":32,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":33,"author":{"gitID":"AzuraAiR"},"content":"    private TimetableData data;"},{"lineNumber":34,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":35,"author":{"gitID":"AzuraAiR"},"content":"    public Timetable(String url) {"},{"lineNumber":36,"author":{"gitID":"AzuraAiR"},"content":"        requireNonNull(url);"},{"lineNumber":37,"author":{"gitID":"AzuraAiR"},"content":"        String trimmedUrl \u003d url.trim();"},{"lineNumber":38,"author":{"gitID":"AzuraAiR"},"content":"        this.value \u003d trimmedUrl;"},{"lineNumber":39,"author":{"gitID":"AzuraAiR"},"content":"        // Create new empty timetable if url is empty or a dummy link"},{"lineNumber":40,"author":{"gitID":"AzuraAiR"},"content":"        if (trimmedUrl.equals(EMPTY_LINK) || trimmedUrl.equals(DUMMY_LINK_ONE) || trimmedUrl.equals(DUMMY_LINK_TWO)) {"},{"lineNumber":41,"author":{"gitID":"AzuraAiR"},"content":"            this.data \u003d new TimetableData();"},{"lineNumber":42,"author":{"gitID":"AzuraAiR"},"content":"            return;"},{"lineNumber":43,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":45,"author":{"gitID":"AzuraAiR"},"content":"        checkArgument(isValidUrl(trimmedUrl), MESSAGE_URL_CONSTRAINTS);"},{"lineNumber":46,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":47,"author":{"gitID":"AzuraAiR"},"content":"        try {"},{"lineNumber":48,"author":{"gitID":"AzuraAiR"},"content":"            this.data \u003d parseUrl(trimmedUrl);"},{"lineNumber":49,"author":{"gitID":"AzuraAiR"},"content":"        } catch (ParseException pe) {"},{"lineNumber":50,"author":{"gitID":"AzuraAiR"},"content":"            this.data \u003d new TimetableData(); // Create new empty timetable if url fails"},{"lineNumber":51,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":54,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"AzuraAiR"},"content":"     * Checks if string is a valid shortened NUSMods url"},{"lineNumber":56,"author":{"gitID":"AzuraAiR"},"content":"     * @param test"},{"lineNumber":57,"author":{"gitID":"AzuraAiR"},"content":"     * @return true if it follows the format of a valid shortened NUSMods url"},{"lineNumber":58,"author":{"gitID":"AzuraAiR"},"content":"     *         false if it doesn\u0027t"},{"lineNumber":59,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"AzuraAiR"},"content":"    public static boolean isValidUrl(String test) {"},{"lineNumber":61,"author":{"gitID":"AzuraAiR"},"content":"        Matcher matcher \u003d Pattern.compile(URL_HOST_REGEX).matcher(test);"},{"lineNumber":62,"author":{"gitID":"AzuraAiR"},"content":"        if (!matcher.find()) {"},{"lineNumber":63,"author":{"gitID":"AzuraAiR"},"content":"            return false;"},{"lineNumber":64,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":66,"author":{"gitID":"AzuraAiR"},"content":"        String hostName \u003d matcher.group()"},{"lineNumber":67,"author":{"gitID":"AzuraAiR"},"content":"                .substring(2, matcher.group().length() - 1);"},{"lineNumber":68,"author":{"gitID":"AzuraAiR"},"content":"        return hostName.equals(NUSMODS_SHORT);"},{"lineNumber":69,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":71,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"AzuraAiR"},"content":"     * Returns the lesson at the specified slot, null if empty"},{"lineNumber":73,"author":{"gitID":"AzuraAiR"},"content":"     * @param week the week the lesson is found at"},{"lineNumber":74,"author":{"gitID":"AzuraAiR"},"content":"     * @param day the day the lesson is found at"},{"lineNumber":75,"author":{"gitID":"AzuraAiR"},"content":"     * @param timeSlot the timeslot the lesson is found at"},{"lineNumber":76,"author":{"gitID":"AzuraAiR"},"content":"     * @return Lesson found at that slot, null if slot is empty"},{"lineNumber":77,"author":{"gitID":"AzuraAiR"},"content":"     * @throws IllegalValueException when week,day,timeslot are invalid values"},{"lineNumber":78,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"AzuraAiR"},"content":"    public Lesson getLessonFromSlot(String week, String day, int timeSlot) throws IllegalValueException {"},{"lineNumber":80,"author":{"gitID":"AzuraAiR"},"content":"        return data.getLessonFromSlot(week, day, timeSlot);"},{"lineNumber":81,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":83,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"AzuraAiR"},"content":"     * Adds a lesson to the timetable"},{"lineNumber":85,"author":{"gitID":"AzuraAiR"},"content":"     * @param lessonToAdd lesson to be added"},{"lineNumber":86,"author":{"gitID":"AzuraAiR"},"content":"     * @throws IllegalValueException when week,day,timeslot are invalid values"},{"lineNumber":87,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"AzuraAiR"},"content":"    public void addLessonToSlot(Lesson lessonToAdd) throws IllegalValueException {"},{"lineNumber":89,"author":{"gitID":"AzuraAiR"},"content":"        data.addLessonToSlot(lessonToAdd);"},{"lineNumber":90,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":92,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"AzuraAiR"},"content":"     * Returns the timetable"},{"lineNumber":94,"author":{"gitID":"AzuraAiR"},"content":"     * @return Timetable as an Array"},{"lineNumber":95,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"AzuraAiR"},"content":"    public ArrayList\u003cArrayList\u003cArrayList\u003cString\u003e\u003e\u003e getTimetable() {"},{"lineNumber":97,"author":{"gitID":"AzuraAiR"},"content":"        return data.getTimeTable();"},{"lineNumber":98,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":100,"author":{"gitID":"AzuraAiR"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"AzuraAiR"},"content":"     * Returns the unified timetable"},{"lineNumber":102,"author":{"gitID":"AzuraAiR"},"content":"     * @return Timetable as an Array"},{"lineNumber":103,"author":{"gitID":"AzuraAiR"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"AzuraAiR"},"content":"    public static ArrayList\u003cArrayList\u003cArrayList\u003cString\u003e\u003e\u003e unionTimetable(ArrayList\u003cTimetable\u003e timetables) {"},{"lineNumber":105,"author":{"gitID":"AzuraAiR"},"content":"        ArrayList\u003cTimetableData\u003e t \u003d new ArrayList\u003cTimetableData\u003e();"},{"lineNumber":106,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":107,"author":{"gitID":"AzuraAiR"},"content":"        for (Timetable timetable : timetables) {"},{"lineNumber":108,"author":{"gitID":"AzuraAiR"},"content":"            t.add(timetable.data);"},{"lineNumber":109,"author":{"gitID":"AzuraAiR"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"AzuraAiR"},"content":"        return TimetableData.unionTimeTable(t);"},{"lineNumber":111,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":113,"author":{"gitID":"AzuraAiR"},"content":"    @Override"},{"lineNumber":114,"author":{"gitID":"AzuraAiR"},"content":"    public String toString() {"},{"lineNumber":115,"author":{"gitID":"AzuraAiR"},"content":"        return value;"},{"lineNumber":116,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":118,"author":{"gitID":"AzuraAiR"},"content":"    @Override"},{"lineNumber":119,"author":{"gitID":"AzuraAiR"},"content":"    public boolean equals(Object other) {"},{"lineNumber":120,"author":{"gitID":"AzuraAiR"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":121,"author":{"gitID":"AzuraAiR"},"content":"                || (other instanceof Timetable // instanceof handles nulls"},{"lineNumber":122,"author":{"gitID":"AzuraAiR"},"content":"                \u0026\u0026 this.value.equals(((Timetable) other).value)); // state check"},{"lineNumber":123,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":125,"author":{"gitID":"AzuraAiR"},"content":"    @Override"},{"lineNumber":126,"author":{"gitID":"AzuraAiR"},"content":"    public int hashCode() {"},{"lineNumber":127,"author":{"gitID":"AzuraAiR"},"content":"        return value.hashCode();"},{"lineNumber":128,"author":{"gitID":"AzuraAiR"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"AzuraAiR"},"content":""},{"lineNumber":130,"author":{"gitID":"AzuraAiR"},"content":"}"}],"authorContributionMap":{"AzuraAiR":116,"-":14}},{"path":"src/main/java/seedu/address/model/building/exceptions/BuildingNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"Caijun7"},"content":"package seedu.address.model.building.exceptions;"},{"lineNumber":2,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":3,"author":{"gitID":"Caijun7"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.Building;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":"//@@author Caijun7"},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":" * Signals that the operation is unable to find the specified building."},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":" */"},{"lineNumber":12,"author":{"gitID":"Caijun7"},"content":"public class BuildingNotFoundException extends CommandException {"},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":"    public BuildingNotFoundException() {"},{"lineNumber":14,"author":{"gitID":"Caijun7"},"content":"        super(\"Building is not in the list of NUS Buildings given below: \\n\""},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":"                + Arrays.toString(Building.NUS_BUILDINGS));"},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":15,"-":2}},{"path":"src/main/java/seedu/address/model/building/exceptions/NoRoomsInBuildingException.java","lines":[{"lineNumber":1,"author":{"gitID":"Caijun7"},"content":"package seedu.address.model.building.exceptions;"},{"lineNumber":2,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":4,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":5,"author":{"gitID":"Caijun7"},"content":"//@@author Caijun7"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":" * Signals that there is no rooms available in the building."},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":" */"},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":"public class NoRoomsInBuildingException extends CommandException {"},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":"    public NoRoomsInBuildingException() {"},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":"        super(\"Building has no rooms available.\");"},{"lineNumber":12,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":12,"-":1}},{"path":"src/main/java/seedu/address/model/building/Building.java","lines":[{"lineNumber":1,"author":{"gitID":"Caijun7"},"content":"package seedu.address.model.building;"},{"lineNumber":2,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":"import java.util.HashMap;"},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.exceptions.CorruptedVenueInformationException;"},{"lineNumber":12,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.exceptions.NoRoomsInBuildingException;"},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":14,"author":{"gitID":"Caijun7"},"content":"//@@author Caijun7"},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":" * Represents a Building in National University of Singapore."},{"lineNumber":17,"author":{"gitID":"Caijun7"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidBuilding(String)}"},{"lineNumber":18,"author":{"gitID":"Caijun7"},"content":" */"},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":"public class Building {"},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":21,"author":{"gitID":"Caijun7"},"content":"    public static final String MESSAGE_BUILDING_CONSTRAINTS \u003d"},{"lineNumber":22,"author":{"gitID":"Caijun7"},"content":"            \"Building names should only contain alphanumeric characters and it should not be blank\";"},{"lineNumber":23,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":24,"author":{"gitID":"Caijun7"},"content":"    public static final String BUILDING_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"},{"lineNumber":25,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":26,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"Caijun7"},"content":"     * Represents an array of Buildings in National University of Singapore"},{"lineNumber":28,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":"    public static final String[] NUS_BUILDINGS \u003d {"},{"lineNumber":30,"author":{"gitID":"Caijun7"},"content":"        \"AS1\", \"AS2\", \"AS3\", \"AS4\", \"AS5\", \"AS6\", \"AS7\", \"AS8\", \"COM1\", \"COM2\", \"I3\", \"BIZ1\", \"BIZ2\","},{"lineNumber":31,"author":{"gitID":"Caijun7"},"content":"        \"SDE\", \"S1\", \"S1A\", \"S2\", \"S3\", \"S4\", \"S4A\", \"S5\", \"S8\", \"S10\", \"S11\", \"S12\", \"S13\", \"S14\", \"S15\","},{"lineNumber":32,"author":{"gitID":"Caijun7"},"content":"        \"S16\", \"S17\", \"E1\", \"E1A\", \"E2\", \"E2A\", \"E3\", \"E3A\", \"E4\", \"E4A\", \"E5\", \"E6\", \"EA\", \"ERC\", \"UTSRC\""},{"lineNumber":33,"author":{"gitID":"Caijun7"},"content":"    };"},{"lineNumber":34,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":35,"author":{"gitID":"Caijun7"},"content":"    public static final String[] NUS_BUILDINGS_ADDRESSES \u003d {"},{"lineNumber":36,"author":{"gitID":"Caijun7"},"content":"        \"117570\", \"117570\", \"117570\", \"117570\", \"117570\", \"117416\", \"117570\", \"119260\", \"117417\", \"117417\","},{"lineNumber":37,"author":{"gitID":"Caijun7"},"content":"        \"119613\", \"119245\", \"119245\", \"117592\", \"117546\", \"117546\", \"117546\", \"117558\", \"117543\", \"117543\","},{"lineNumber":38,"author":{"gitID":"Caijun7"},"content":"        \"117543\", \"117548\", \"117546\", \"117553\", \"117550\", \"117550\", \"117542\", \"117541\", \"117546\", \"119076 S17\","},{"lineNumber":39,"author":{"gitID":"Caijun7"},"content":"        \"117575\", \"117575\", \"117575\", \"117361\", \"117581\", \"117574\", \"117583\", \"117583\", \"117583\", \"117608\","},{"lineNumber":40,"author":{"gitID":"Caijun7"},"content":"        \"117575\", \"139599\", \"138607\""},{"lineNumber":41,"author":{"gitID":"Caijun7"},"content":"    };"},{"lineNumber":42,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":43,"author":{"gitID":"Caijun7"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(Building.class);"},{"lineNumber":44,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":45,"author":{"gitID":"Caijun7"},"content":"    private static HashMap\u003cString, ArrayList\u003cString\u003e\u003e nusBuildingsAndRooms \u003d null;"},{"lineNumber":46,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":47,"author":{"gitID":"Caijun7"},"content":"    private final String buildingName;"},{"lineNumber":48,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":49,"author":{"gitID":"Caijun7"},"content":"    private HashMap\u003cString, ArrayList\u003cString\u003e\u003e buildingsAndRooms \u003d null;"},{"lineNumber":50,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":51,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"Caijun7"},"content":"     * Uses a private {@code Building} constructor for Jackson JSON API to instantiate an object"},{"lineNumber":53,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"Caijun7"},"content":"    private Building() {"},{"lineNumber":55,"author":{"gitID":"Caijun7"},"content":"        buildingName \u003d \"\";"},{"lineNumber":56,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":58,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"Caijun7"},"content":"     * Constructs a {@code Building}."},{"lineNumber":60,"author":{"gitID":"Caijun7"},"content":"     *"},{"lineNumber":61,"author":{"gitID":"Caijun7"},"content":"     * @param buildingName A valid building name."},{"lineNumber":62,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"Caijun7"},"content":"    public Building(String buildingName) {"},{"lineNumber":64,"author":{"gitID":"Caijun7"},"content":"        requireNonNull(buildingName);"},{"lineNumber":65,"author":{"gitID":"Caijun7"},"content":"        checkArgument(isValidBuilding(buildingName), MESSAGE_BUILDING_CONSTRAINTS);"},{"lineNumber":66,"author":{"gitID":"Caijun7"},"content":"        this.buildingName \u003d buildingName;"},{"lineNumber":67,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":69,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"Caijun7"},"content":"     * Returns true if a given string is a valid building name."},{"lineNumber":71,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"Caijun7"},"content":"    public static boolean isValidBuilding(String test) {"},{"lineNumber":73,"author":{"gitID":"Caijun7"},"content":"        return test.matches(BUILDING_VALIDATION_REGEX);"},{"lineNumber":74,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":76,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"Caijun7"},"content":"     * Returns true if a given string is a valid building name."},{"lineNumber":78,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"Caijun7"},"content":"    public static boolean isValidBuilding(Building test) {"},{"lineNumber":80,"author":{"gitID":"Caijun7"},"content":"        for (String building : NUS_BUILDINGS) {"},{"lineNumber":81,"author":{"gitID":"Caijun7"},"content":"            if (building.equals(test.buildingName)) {"},{"lineNumber":82,"author":{"gitID":"Caijun7"},"content":"                return true;"},{"lineNumber":83,"author":{"gitID":"Caijun7"},"content":"            }"},{"lineNumber":84,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"Caijun7"},"content":"        return false;"},{"lineNumber":86,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":88,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"Caijun7"},"content":"     * Returns the postal code if building is an NUS building."},{"lineNumber":90,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"Caijun7"},"content":"    public static String retrieveNusBuildingIfExist(String test) {"},{"lineNumber":92,"author":{"gitID":"Caijun7"},"content":"        for (int i \u003d 0; i \u003c NUS_BUILDINGS.length; i++) {"},{"lineNumber":93,"author":{"gitID":"Caijun7"},"content":"            if (NUS_BUILDINGS[i].equalsIgnoreCase(test)) {"},{"lineNumber":94,"author":{"gitID":"Caijun7"},"content":"                return NUS_BUILDINGS_ADDRESSES[i];"},{"lineNumber":95,"author":{"gitID":"Caijun7"},"content":"            }"},{"lineNumber":96,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"Caijun7"},"content":"        return test;"},{"lineNumber":98,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":100,"author":{"gitID":"Caijun7"},"content":"    public static HashMap\u003cString, ArrayList\u003cString\u003e\u003e getNusBuildingsAndRooms() {"},{"lineNumber":101,"author":{"gitID":"Caijun7"},"content":"        return nusBuildingsAndRooms;"},{"lineNumber":102,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":104,"author":{"gitID":"Caijun7"},"content":"    public static void setNusBuildingsAndRooms(HashMap\u003cString, ArrayList\u003cString\u003e\u003e nusBuildingsAndRooms) {"},{"lineNumber":105,"author":{"gitID":"Caijun7"},"content":"        Building.nusBuildingsAndRooms \u003d nusBuildingsAndRooms;"},{"lineNumber":106,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":108,"author":{"gitID":"Caijun7"},"content":"    public String getBuildingName() {"},{"lineNumber":109,"author":{"gitID":"Caijun7"},"content":"        return buildingName;"},{"lineNumber":110,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":112,"author":{"gitID":"Caijun7"},"content":"    public HashMap\u003cString, ArrayList\u003cString\u003e\u003e getBuildingsAndRooms() {"},{"lineNumber":113,"author":{"gitID":"Caijun7"},"content":"        return buildingsAndRooms;"},{"lineNumber":114,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":116,"author":{"gitID":"Caijun7"},"content":"    public void setBuildingsAndRooms(HashMap\u003cString, ArrayList\u003cString\u003e\u003e buildingsAndRooms) {"},{"lineNumber":117,"author":{"gitID":"Caijun7"},"content":"        this.buildingsAndRooms \u003d buildingsAndRooms;"},{"lineNumber":118,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":120,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"Caijun7"},"content":"     * Retrieves weekday schedule of all {@code Room}s in the {@code Building} in an ArrayList of ArrayList"},{"lineNumber":122,"author":{"gitID":"Caijun7"},"content":"     *"},{"lineNumber":123,"author":{"gitID":"Caijun7"},"content":"     * @throws CorruptedVenueInformationException if the room schedule format is not as expected."},{"lineNumber":124,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"Caijun7"},"content":"    public ArrayList\u003cArrayList\u003cString\u003e\u003e retrieveAllRoomsSchedule() throws CorruptedVenueInformationException,"},{"lineNumber":126,"author":{"gitID":"Caijun7"},"content":"                                                                          NoRoomsInBuildingException {"},{"lineNumber":127,"author":{"gitID":"Caijun7"},"content":"        ArrayList\u003cArrayList\u003cString\u003e\u003e allRoomsSchedule \u003d new ArrayList\u003c\u003e();"},{"lineNumber":128,"author":{"gitID":"Caijun7"},"content":"        ArrayList\u003cString\u003e allRoomsInBuilding \u003d retrieveAllRoomsInBuilding();"},{"lineNumber":129,"author":{"gitID":"Caijun7"},"content":"        for (String roomName : allRoomsInBuilding) {"},{"lineNumber":130,"author":{"gitID":"Caijun7"},"content":"            Room room \u003d new Room(roomName);"},{"lineNumber":131,"author":{"gitID":"Caijun7"},"content":"            ArrayList\u003cString\u003e weekDayRoomSchedule \u003d room.retrieveWeekDaySchedule();"},{"lineNumber":132,"author":{"gitID":"Caijun7"},"content":"            allRoomsSchedule.add(weekDayRoomSchedule);"},{"lineNumber":133,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"Caijun7"},"content":"        return allRoomsSchedule;"},{"lineNumber":135,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":137,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"Caijun7"},"content":"     * Retrieves all {@code Room}s in the {@code Building} in an ArrayList"},{"lineNumber":139,"author":{"gitID":"Caijun7"},"content":"     *"},{"lineNumber":140,"author":{"gitID":"Caijun7"},"content":"     * @throws CorruptedVenueInformationException if the NUS Buildings and Rooms format is not as expected."},{"lineNumber":141,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"Caijun7"},"content":"    public ArrayList\u003cString\u003e retrieveAllRoomsInBuilding() throws CorruptedVenueInformationException,"},{"lineNumber":143,"author":{"gitID":"Caijun7"},"content":"                                                                 NoRoomsInBuildingException {"},{"lineNumber":144,"author":{"gitID":"Caijun7"},"content":"        checkArgument(isValidBuilding(this));"},{"lineNumber":145,"author":{"gitID":"Caijun7"},"content":"        if (nusBuildingsAndRooms \u003d\u003d null) {"},{"lineNumber":146,"author":{"gitID":"Caijun7"},"content":"            logger.warning(\"NUS buildings and rooms is null, venueinformation.json file is corrupted.\");"},{"lineNumber":147,"author":{"gitID":"Caijun7"},"content":"            throw new CorruptedVenueInformationException();"},{"lineNumber":148,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"Caijun7"},"content":"        if (nusBuildingsAndRooms.get(buildingName) \u003d\u003d null) {"},{"lineNumber":150,"author":{"gitID":"Caijun7"},"content":"            logger.warning(buildingName + \" has no rooms.\");"},{"lineNumber":151,"author":{"gitID":"Caijun7"},"content":"            throw new NoRoomsInBuildingException();"},{"lineNumber":152,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"Caijun7"},"content":"        return nusBuildingsAndRooms.get(buildingName);"},{"lineNumber":154,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":156,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":157,"author":{"gitID":"Caijun7"},"content":"    public String toString() {"},{"lineNumber":158,"author":{"gitID":"Caijun7"},"content":"        return buildingName;"},{"lineNumber":159,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":161,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":162,"author":{"gitID":"Caijun7"},"content":"    public boolean equals(Object other) {"},{"lineNumber":163,"author":{"gitID":"Caijun7"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":164,"author":{"gitID":"Caijun7"},"content":"                || (other instanceof Building // instanceof handles nulls"},{"lineNumber":165,"author":{"gitID":"Caijun7"},"content":"                \u0026\u0026 buildingName.equals(((Building) other).buildingName)); // state check"},{"lineNumber":166,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":168,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":169,"author":{"gitID":"Caijun7"},"content":"    public int hashCode() {"},{"lineNumber":170,"author":{"gitID":"Caijun7"},"content":"        return buildingName.hashCode();"},{"lineNumber":171,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":173,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":170,"-":3}},{"path":"src/main/java/seedu/address/model/building/WeekDay.java","lines":[{"lineNumber":1,"author":{"gitID":"Caijun7"},"content":"package seedu.address.model.building;"},{"lineNumber":2,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":3,"author":{"gitID":"Caijun7"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"Caijun7"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitID":"Caijun7"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":7,"author":{"gitID":"Caijun7"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":8,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.exceptions.CorruptedVenueInformationException;"},{"lineNumber":9,"author":{"gitID":"Caijun7"},"content":"import seedu.address.model.building.exceptions.InvalidWeekDayScheduleException;"},{"lineNumber":10,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":11,"author":{"gitID":"Caijun7"},"content":"//@@author Caijun7"},{"lineNumber":12,"author":{"gitID":"Caijun7"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"Caijun7"},"content":" * Represents a WeekDay schedule of a Room in National University of Singapore."},{"lineNumber":14,"author":{"gitID":"Caijun7"},"content":" */"},{"lineNumber":15,"author":{"gitID":"Caijun7"},"content":"public class WeekDay {"},{"lineNumber":16,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":17,"author":{"gitID":"Caijun7"},"content":"    public static final int NUMBER_OF_CLASSES \u003d 13;"},{"lineNumber":18,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":19,"author":{"gitID":"Caijun7"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(WeekDay.class);"},{"lineNumber":20,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":21,"author":{"gitID":"Caijun7"},"content":"    private static final int START_TIME \u003d 800;"},{"lineNumber":22,"author":{"gitID":"Caijun7"},"content":"    private static final int END_TIME \u003d 2000;"},{"lineNumber":23,"author":{"gitID":"Caijun7"},"content":"    private static final int FOUR_DIGIT_24_HOUR_FORMAT \u003d 1000;"},{"lineNumber":24,"author":{"gitID":"Caijun7"},"content":"    private static final int ONE_HOUR_IN_24_HOUR_FORMAT \u003d 100;"},{"lineNumber":25,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":26,"author":{"gitID":"Caijun7"},"content":"    private HashMap\u003cString, String\u003e weekDaySchedule \u003d null;"},{"lineNumber":27,"author":{"gitID":"Caijun7"},"content":"    private String weekday;"},{"lineNumber":28,"author":{"gitID":"Caijun7"},"content":"    private String roomName;"},{"lineNumber":29,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":30,"author":{"gitID":"Caijun7"},"content":"    public HashMap\u003cString, String\u003e getWeekDaySchedule() {"},{"lineNumber":31,"author":{"gitID":"Caijun7"},"content":"        return weekDaySchedule;"},{"lineNumber":32,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":34,"author":{"gitID":"Caijun7"},"content":"    public void setWeekDaySchedule(HashMap\u003cString, String\u003e weekDaySchedule) {"},{"lineNumber":35,"author":{"gitID":"Caijun7"},"content":"        this.weekDaySchedule \u003d weekDaySchedule;"},{"lineNumber":36,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":38,"author":{"gitID":"Caijun7"},"content":"    public String getRoomName() {"},{"lineNumber":39,"author":{"gitID":"Caijun7"},"content":"        return roomName;"},{"lineNumber":40,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":42,"author":{"gitID":"Caijun7"},"content":"    public void setRoomName(String roomName) {"},{"lineNumber":43,"author":{"gitID":"Caijun7"},"content":"        this.roomName \u003d roomName;"},{"lineNumber":44,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":46,"author":{"gitID":"Caijun7"},"content":"    public String getWeekday() {"},{"lineNumber":47,"author":{"gitID":"Caijun7"},"content":"        return weekday;"},{"lineNumber":48,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":50,"author":{"gitID":"Caijun7"},"content":"    public void setWeekday(String weekday) {"},{"lineNumber":51,"author":{"gitID":"Caijun7"},"content":"        this.weekday \u003d weekday;"},{"lineNumber":52,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":54,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"Caijun7"},"content":"     * Retrieves the {@code Room}\u0027s weekday schedule in an ArrayList"},{"lineNumber":56,"author":{"gitID":"Caijun7"},"content":"     *"},{"lineNumber":57,"author":{"gitID":"Caijun7"},"content":"     * @throws CorruptedVenueInformationException if the weekday schedule format is not as expected."},{"lineNumber":58,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"Caijun7"},"content":"    public ArrayList\u003cString\u003e retrieveWeekDaySchedule() throws CorruptedVenueInformationException {"},{"lineNumber":60,"author":{"gitID":"Caijun7"},"content":"        try {"},{"lineNumber":61,"author":{"gitID":"Caijun7"},"content":"            isValidWeekDaySchedule();"},{"lineNumber":62,"author":{"gitID":"Caijun7"},"content":"            ArrayList\u003cString\u003e weekDayScheduleList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":63,"author":{"gitID":"Caijun7"},"content":"            int time \u003d START_TIME;"},{"lineNumber":64,"author":{"gitID":"Caijun7"},"content":"            while (time \u003c\u003d END_TIME) {"},{"lineNumber":65,"author":{"gitID":"Caijun7"},"content":"                String timeString \u003d \"\" + time;"},{"lineNumber":66,"author":{"gitID":"Caijun7"},"content":"                if (time \u003c FOUR_DIGIT_24_HOUR_FORMAT) {"},{"lineNumber":67,"author":{"gitID":"Caijun7"},"content":"                    timeString \u003d \"0\" + time;"},{"lineNumber":68,"author":{"gitID":"Caijun7"},"content":"                }"},{"lineNumber":69,"author":{"gitID":"Caijun7"},"content":"                String roomStatus \u003d this.weekDaySchedule.get(timeString);"},{"lineNumber":70,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":71,"author":{"gitID":"Caijun7"},"content":"                weekDayScheduleList.add(roomStatus);"},{"lineNumber":72,"author":{"gitID":"Caijun7"},"content":"                time \u003d incrementOneHour(time);"},{"lineNumber":73,"author":{"gitID":"Caijun7"},"content":"            }"},{"lineNumber":74,"author":{"gitID":"Caijun7"},"content":"            return weekDayScheduleList;"},{"lineNumber":75,"author":{"gitID":"Caijun7"},"content":"        } catch (InvalidWeekDayScheduleException e) {"},{"lineNumber":76,"author":{"gitID":"Caijun7"},"content":"            throw new CorruptedVenueInformationException();"},{"lineNumber":77,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":80,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"Caijun7"},"content":"     * Checks for null instance in week day schedule hash map"},{"lineNumber":82,"author":{"gitID":"Caijun7"},"content":"     *"},{"lineNumber":83,"author":{"gitID":"Caijun7"},"content":"     * @throws InvalidWeekDayScheduleException if the weekday schedule format is not as expected."},{"lineNumber":84,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"Caijun7"},"content":"    public boolean isValidWeekDaySchedule() throws InvalidWeekDayScheduleException {"},{"lineNumber":86,"author":{"gitID":"Caijun7"},"content":"        if (weekDaySchedule \u003d\u003d null) {"},{"lineNumber":87,"author":{"gitID":"Caijun7"},"content":"            logger.warning(\"Weekday Schedule is null, venueinformation.json file is corrupted.\");"},{"lineNumber":88,"author":{"gitID":"Caijun7"},"content":"            throw new InvalidWeekDayScheduleException();"},{"lineNumber":89,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"Caijun7"},"content":"        int time \u003d START_TIME;"},{"lineNumber":91,"author":{"gitID":"Caijun7"},"content":"        while (time \u003c\u003d END_TIME) {"},{"lineNumber":92,"author":{"gitID":"Caijun7"},"content":"            String timeString \u003d \"\" + time;"},{"lineNumber":93,"author":{"gitID":"Caijun7"},"content":"            if (time \u003c FOUR_DIGIT_24_HOUR_FORMAT) {"},{"lineNumber":94,"author":{"gitID":"Caijun7"},"content":"                timeString \u003d \"0\" + time;"},{"lineNumber":95,"author":{"gitID":"Caijun7"},"content":"            }"},{"lineNumber":96,"author":{"gitID":"Caijun7"},"content":"            String roomStatus \u003d this.weekDaySchedule.get(timeString);"},{"lineNumber":97,"author":{"gitID":"Caijun7"},"content":"            if (roomStatus \u003d\u003d null) {"},{"lineNumber":98,"author":{"gitID":"Caijun7"},"content":"                logger.warning(\"Weekday Schedule contains some null data, venueinformation.json file is corrupted.\");"},{"lineNumber":99,"author":{"gitID":"Caijun7"},"content":"                throw new InvalidWeekDayScheduleException();"},{"lineNumber":100,"author":{"gitID":"Caijun7"},"content":"            }"},{"lineNumber":101,"author":{"gitID":"Caijun7"},"content":"            if (!\"vacant\".equals(roomStatus) \u0026\u0026 !\"occupied\".equals(roomStatus)) {"},{"lineNumber":102,"author":{"gitID":"Caijun7"},"content":"                logger.warning(\"Weekday Schedule contains some incorrect data, \""},{"lineNumber":103,"author":{"gitID":"Caijun7"},"content":"                        + \"venueinformation.json file is corrupted.\");"},{"lineNumber":104,"author":{"gitID":"Caijun7"},"content":"                throw new InvalidWeekDayScheduleException();"},{"lineNumber":105,"author":{"gitID":"Caijun7"},"content":"            }"},{"lineNumber":106,"author":{"gitID":"Caijun7"},"content":"            time \u003d incrementOneHour(time);"},{"lineNumber":107,"author":{"gitID":"Caijun7"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"Caijun7"},"content":"        return true;"},{"lineNumber":109,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":111,"author":{"gitID":"Caijun7"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"Caijun7"},"content":"     * Increments the time in 24 hour format by one hour"},{"lineNumber":113,"author":{"gitID":"Caijun7"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"Caijun7"},"content":"    private int incrementOneHour(int time) {"},{"lineNumber":115,"author":{"gitID":"Caijun7"},"content":"        int timeAfterHalfHour \u003d time + ONE_HOUR_IN_24_HOUR_FORMAT;"},{"lineNumber":116,"author":{"gitID":"Caijun7"},"content":"        return timeAfterHalfHour;"},{"lineNumber":117,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":119,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":120,"author":{"gitID":"Caijun7"},"content":"    public String toString() {"},{"lineNumber":121,"author":{"gitID":"Caijun7"},"content":"        return roomName + \" \" + weekday + \" Schedule\";"},{"lineNumber":122,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":124,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":125,"author":{"gitID":"Caijun7"},"content":"    public boolean equals(Object other) {"},{"lineNumber":126,"author":{"gitID":"Caijun7"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":127,"author":{"gitID":"Caijun7"},"content":"                || (other instanceof WeekDay // instanceof handles nulls"},{"lineNumber":128,"author":{"gitID":"Caijun7"},"content":"                \u0026\u0026 weekDaySchedule.equals(((WeekDay) other).weekDaySchedule)); // state check"},{"lineNumber":129,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":131,"author":{"gitID":"Caijun7"},"content":"    @Override"},{"lineNumber":132,"author":{"gitID":"Caijun7"},"content":"    public int hashCode() {"},{"lineNumber":133,"author":{"gitID":"Caijun7"},"content":"        return weekDaySchedule.hashCode();"},{"lineNumber":134,"author":{"gitID":"Caijun7"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"Caijun7"},"content":""},{"lineNumber":136,"author":{"gitID":"Caijun7"},"content":"}"}],"authorContributionMap":{"Caijun7":136}},{"path":"src/main/java/seedu/address/model/Password.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.SecurityUtil;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"yeggasd"},"content":"//@@author yeggasd"},{"lineNumber":10,"author":{"gitID":"yeggasd"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"yeggasd"},"content":" * Represents the password of the address book"},{"lineNumber":12,"author":{"gitID":"yeggasd"},"content":" * Guarantees: current and previous password are present."},{"lineNumber":13,"author":{"gitID":"yeggasd"},"content":" */"},{"lineNumber":14,"author":{"gitID":"yeggasd"},"content":"public class Password {"},{"lineNumber":15,"author":{"gitID":"yeggasd"},"content":"    private byte[] currentPassword;"},{"lineNumber":16,"author":{"gitID":"yeggasd"},"content":"    private byte[] prevPassword;"},{"lineNumber":17,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":18,"author":{"gitID":"yeggasd"},"content":"    public Password() {"},{"lineNumber":19,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":21,"author":{"gitID":"yeggasd"},"content":"    public Password(String password) {"},{"lineNumber":22,"author":{"gitID":"yeggasd"},"content":"        currentPassword \u003d SecurityUtil.hashPassword(password);"},{"lineNumber":23,"author":{"gitID":"yeggasd"},"content":"        prevPassword \u003d currentPassword;"},{"lineNumber":24,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":26,"author":{"gitID":"yeggasd"},"content":"    public Password(byte[] password, byte[] prevPassword) {"},{"lineNumber":27,"author":{"gitID":"yeggasd"},"content":"        currentPassword \u003d password;"},{"lineNumber":28,"author":{"gitID":"yeggasd"},"content":"        this.prevPassword \u003d prevPassword;"},{"lineNumber":29,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":31,"author":{"gitID":"yeggasd"},"content":"    public byte[] getPassword() {"},{"lineNumber":32,"author":{"gitID":"yeggasd"},"content":"        return currentPassword;"},{"lineNumber":33,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":35,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"yeggasd"},"content":"     * Getter for previous password."},{"lineNumber":37,"author":{"gitID":"yeggasd"},"content":"     * @return prevPassword."},{"lineNumber":38,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"yeggasd"},"content":"    public byte[] getPrevPassword() {"},{"lineNumber":40,"author":{"gitID":"yeggasd"},"content":"        return prevPassword;"},{"lineNumber":41,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":43,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"yeggasd"},"content":"     * Updates the password."},{"lineNumber":45,"author":{"gitID":"yeggasd"},"content":"     * @param password is the password to be used. Cannot be null."},{"lineNumber":46,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"yeggasd"},"content":"    public void updatePassword(Password password) {"},{"lineNumber":48,"author":{"gitID":"yeggasd"},"content":"        requireNonNull(password);"},{"lineNumber":49,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":50,"author":{"gitID":"yeggasd"},"content":"        prevPassword \u003d password.getPrevPassword();"},{"lineNumber":51,"author":{"gitID":"yeggasd"},"content":"        currentPassword \u003d password.getPassword();"},{"lineNumber":52,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":54,"author":{"gitID":"yeggasd"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"yeggasd"},"content":"     * Similar to {@link #updatePassword(Password)}."},{"lineNumber":56,"author":{"gitID":"yeggasd"},"content":"     * @param password is the password to be used."},{"lineNumber":57,"author":{"gitID":"yeggasd"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"yeggasd"},"content":"    public void updatePassword(byte[] password) {"},{"lineNumber":59,"author":{"gitID":"yeggasd"},"content":"        prevPassword \u003d currentPassword;"},{"lineNumber":60,"author":{"gitID":"yeggasd"},"content":"        currentPassword \u003d password;"},{"lineNumber":61,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":63,"author":{"gitID":"yeggasd"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"yeggasd"},"content":"    public String toString() {"},{"lineNumber":65,"author":{"gitID":"yeggasd"},"content":"        if (currentPassword !\u003d null) {"},{"lineNumber":66,"author":{"gitID":"yeggasd"},"content":"            return new String(currentPassword);"},{"lineNumber":67,"author":{"gitID":"yeggasd"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"yeggasd"},"content":"        return null;"},{"lineNumber":69,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":71,"author":{"gitID":"yeggasd"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"yeggasd"},"content":"    public boolean equals(Object other) {"},{"lineNumber":73,"author":{"gitID":"yeggasd"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":74,"author":{"gitID":"yeggasd"},"content":"                || (other instanceof Password // instanceof handles nulls"},{"lineNumber":75,"author":{"gitID":"yeggasd"},"content":"                \u0026\u0026 Arrays.equals(this.currentPassword, (((Password) other).currentPassword))"},{"lineNumber":76,"author":{"gitID":"yeggasd"},"content":"                \u0026\u0026 Arrays.equals(this.prevPassword, (((Password) other).prevPassword))); // state check"},{"lineNumber":77,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"yeggasd"},"content":""},{"lineNumber":79,"author":{"gitID":"yeggasd"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"yeggasd"},"content":"    public int hashCode() {"},{"lineNumber":81,"author":{"gitID":"yeggasd"},"content":"        return currentPassword.hashCode();"},{"lineNumber":82,"author":{"gitID":"yeggasd"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"yeggasd"},"content":"}"}],"authorContributionMap":{"yeggasd":75,"-":8}}]
