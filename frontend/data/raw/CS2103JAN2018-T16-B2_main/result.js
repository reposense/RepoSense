var resultJson = [{"path":"docs/ContactUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Contact Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"* *Bug reports, Suggestions* : Post in our https://github.com/CS2103JAN2018-T16-B2/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."},{"lineNumber":5,"author":{"gitID":"-"},"content":"* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"},{"lineNumber":6,"author":{"gitID":"mattbuot"},"content":"* *Email us* : You can also reach us at `pigeonscs2103@gmail.com`"}],"authorContributionMap":{"mattbuot":1,"-":5}},{"path":"docs/team/meerakanani.adoc","lines":[{"lineNumber":1,"author":{"gitID":"meerakanani10"},"content":"\u003d Meera Kanani - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"meerakanani10"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"meerakanani10"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":5,"author":{"gitID":"meerakanani10"},"content":"\u003d\u003d PROJECT: Pigeons"},{"lineNumber":6,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":7,"author":{"gitID":"meerakanani10"},"content":"---"},{"lineNumber":8,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":9,"author":{"gitID":"meerakanani10"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":11,"author":{"gitID":"meerakanani10"},"content":"Pigeons is a desktop level application created for delivery companies to better assign and"},{"lineNumber":12,"author":{"gitID":"meerakanani10"},"content":"organize deliveries for the delivery people."},{"lineNumber":13,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":14,"author":{"gitID":"meerakanani10"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":15,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":16,"author":{"gitID":"meerakanani10"},"content":"* *Major enhancement*: added *the ability to create an optimal delivery route when filtering the data"},{"lineNumber":17,"author":{"gitID":"meerakanani10"},"content":" by delivery date*"},{"lineNumber":18,"author":{"gitID":"meerakanani10"},"content":"** What it does: allows the user to filter all the data by date of delivery and then creates an optimized route from the headquarters to all the delivery points for that day."},{"lineNumber":19,"author":{"gitID":"meerakanani10"},"content":"** Justification: This feature improves the product significantly because the user is meant to be someone who delivers packages and this make it easy for the user to determine where he has to go that day and what the best route is from his"},{"lineNumber":20,"author":{"gitID":"meerakanani10"},"content":"starting location. This optimized route will be outputed as a map on the UI by another team member."},{"lineNumber":21,"author":{"gitID":"meerakanani10"},"content":"** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands but more importantly required creating new classes and methods that"},{"lineNumber":22,"author":{"gitID":"meerakanani10"},"content":"could be referenced by other team members and would be usable for the UI."},{"lineNumber":23,"author":{"gitID":"meerakanani10"},"content":"** Credits: The Google API was used to get the distance between addresses, the java code was written around using this API."},{"lineNumber":24,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":25,"author":{"gitID":"meerakanani10"},"content":"* *Minor enhancement*: added a filter command that allows the user to filter the data by date (delivery date)."},{"lineNumber":26,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":27,"author":{"gitID":"meerakanani10"},"content":"* *Minor enhancement*: added a getTime function that gets the time of the entire journey for the delivery man and can be displayed on the UI."},{"lineNumber":28,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":29,"author":{"gitID":"meerakanani10"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-T16-B2/main/blob/master/collated/functional/meerakanani10.md[Functional code]] [https://github.com/CS2103JAN2018-T16-B2/main/blob/master/collated/test/meerakanani10.md[Test code]]"},{"lineNumber":30,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":31,"author":{"gitID":"meerakanani10"},"content":"* *Other contributions*:"},{"lineNumber":32,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":33,"author":{"gitID":"meerakanani10"},"content":"** Project management:"},{"lineNumber":34,"author":{"gitID":"meerakanani10"},"content":"*** Kept team on track on TODO\u0027s before each tutorial"},{"lineNumber":35,"author":{"gitID":"meerakanani10"},"content":"** Enhancements to existing features:"},{"lineNumber":36,"author":{"gitID":"meerakanani10"},"content":"*** Wrote additional tests for existing features to increase coverage"},{"lineNumber":37,"author":{"gitID":"-"},"content":"** Documentation:"},{"lineNumber":38,"author":{"gitID":"-"},"content":"*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"},{"lineNumber":39,"author":{"gitID":"meerakanani10"},"content":"*** Modified existing guides to include the premises of our project"},{"lineNumber":40,"author":{"gitID":"meerakanani10"},"content":"*** Removed items of the user guide, developer guide etc that were relevant for our project]"},{"lineNumber":41,"author":{"gitID":"meerakanani10"},"content":"*** Added documentation for all the features I added in the dev guide and user guide."},{"lineNumber":42,"author":{"gitID":"meerakanani10"},"content":"*** Modifed the README doc"},{"lineNumber":43,"author":{"gitID":"meerakanani10"},"content":"** Community:"},{"lineNumber":44,"author":{"gitID":"meerakanani10"},"content":"*** PRs reviewed (with non-trivial review comments)"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":50,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":51,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"meerakanani10"},"content":"\u003d\u003d\u003d Filtering person by date: `filter`"},{"lineNumber":54,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":55,"author":{"gitID":"meerakanani10"},"content":"Filers the list of people by date (only one date)"},{"lineNumber":56,"author":{"gitID":"meerakanani10"},"content":"Format: `filter DATE`"},{"lineNumber":57,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":58,"author":{"gitID":"meerakanani10"},"content":"****"},{"lineNumber":59,"author":{"gitID":"meerakanani10"},"content":"* Recommended date format is YYYY-MM-DD"},{"lineNumber":60,"author":{"gitID":"meerakanani10"},"content":"****"},{"lineNumber":61,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":62,"author":{"gitID":"meerakanani10"},"content":"When you filter by date the back end of the program will create an optimized route"},{"lineNumber":63,"author":{"gitID":"meerakanani10"},"content":"for all the people on that date and display the route on the map."},{"lineNumber":64,"author":{"gitID":"meerakanani10"},"content":"****"},{"lineNumber":65,"author":{"gitID":"meerakanani10"},"content":"* The search can only look for one date"},{"lineNumber":66,"author":{"gitID":"meerakanani10"},"content":"* Persons with the delivery date matching the argument will be returned"},{"lineNumber":67,"author":{"gitID":"meerakanani10"},"content":"* This filter can be used to obtain a delivery route for a day"},{"lineNumber":68,"author":{"gitID":"meerakanani10"},"content":"****"},{"lineNumber":69,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":70,"author":{"gitID":"meerakanani10"},"content":"\u003d\u003d User Testing"},{"lineNumber":71,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":72,"author":{"gitID":"meerakanani10"},"content":"When testing and using our system for the first time, here are some commands you can try to get the full experience."},{"lineNumber":73,"author":{"gitID":"meerakanani10"},"content":"Feel free to try other commands outlined above when you get the feel of our program as well."},{"lineNumber":74,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":75,"author":{"gitID":"meerakanani10"},"content":"*1.* add n/John Doa a/321 Clementi Ave p/67340028 e/pigeonscs2103@gmail.com d/2018-03-24"},{"lineNumber":76,"author":{"gitID":"meerakanani10"},"content":"****"},{"lineNumber":77,"author":{"gitID":"meerakanani10"},"content":"* John Doa should be added to the list of addressees."},{"lineNumber":78,"author":{"gitID":"meerakanani10"},"content":"****"},{"lineNumber":79,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":80,"author":{"gitID":"meerakanani10"},"content":"*2.* filter 2018-03-24"},{"lineNumber":81,"author":{"gitID":"meerakanani10"},"content":"****"},{"lineNumber":82,"author":{"gitID":"meerakanani10"},"content":"* All addressees with 2018-03-24 in their delivery date should be listed."},{"lineNumber":83,"author":{"gitID":"meerakanani10"},"content":"* Additionally, a map routing all the shown addressees should be generated."},{"lineNumber":84,"author":{"gitID":"meerakanani10"},"content":"****"},{"lineNumber":85,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":86,"author":{"gitID":"meerakanani10"},"content":"*3.* find John"},{"lineNumber":87,"author":{"gitID":"meerakanani10"},"content":"****"},{"lineNumber":88,"author":{"gitID":"meerakanani10"},"content":"* All addressees with John in their name should be listed."},{"lineNumber":89,"author":{"gitID":"meerakanani10"},"content":"****"},{"lineNumber":90,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":91,"author":{"gitID":"meerakanani10"},"content":"*4.* delete 1"},{"lineNumber":92,"author":{"gitID":"meerakanani10"},"content":"****"},{"lineNumber":93,"author":{"gitID":"meerakanani10"},"content":"* John, which we added at the start, should be removed."},{"lineNumber":94,"author":{"gitID":"meerakanani10"},"content":"* 1-index numbering system (i.e. the first addressee has index 1)"},{"lineNumber":95,"author":{"gitID":"meerakanani10"},"content":"****"},{"lineNumber":96,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":101,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":102,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"meerakanani10"},"content":"\u003d\u003d\u003d Filter Command"},{"lineNumber":105,"author":{"gitID":"meerakanani10"},"content":"To add to the many commands necessary for users, filtering by date will be essential when trying to optimize the route per day."},{"lineNumber":106,"author":{"gitID":"meerakanani10"},"content":"The filter command was added similar to how the find command has been implemented."},{"lineNumber":107,"author":{"gitID":"meerakanani10"},"content":"When the user enters filter by a date in the UI the model with the list of data is updated using the date predicate."},{"lineNumber":108,"author":{"gitID":"meerakanani10"},"content":"This updated model is then executed via the CommandResult class and output on the UI. It is stores as a readonly list in the model."},{"lineNumber":109,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":110,"author":{"gitID":"meerakanani10"},"content":"\u003d\u003d\u003d Route Optimization feature"},{"lineNumber":111,"author":{"gitID":"meerakanani10"},"content":"Since this program is meant for deliveries the route for the daily delivery must be optimized for the user."},{"lineNumber":112,"author":{"gitID":"meerakanani10"},"content":"The RouteOptimization class will get the distance (getDistance function in GetDistance class) between all the addresses for the day."},{"lineNumber":113,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":114,"author":{"gitID":"meerakanani10"},"content":"The addresses will then be sorted based on optimal sortest route."},{"lineNumber":115,"author":{"gitID":"meerakanani10"},"content":"Example:"},{"lineNumber":116,"author":{"gitID":"meerakanani10"},"content":"3 deliveries for a day at Point A, B, C"},{"lineNumber":117,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":118,"author":{"gitID":"meerakanani10"},"content":"Point A --\u003e Point B \u003d 14km (12min)"},{"lineNumber":119,"author":{"gitID":"meerakanani10"},"content":"Point A --\u003e Point C \u003d 13km (13min)"},{"lineNumber":120,"author":{"gitID":"meerakanani10"},"content":"Point C --\u003e Point B \u003d 12km (10min)"},{"lineNumber":121,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":122,"author":{"gitID":"meerakanani10"},"content":"Optimal Route \u003d Point A --\u003e Point C --\u003e Point B (based on least about of km travelled)"},{"lineNumber":123,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":124,"author":{"gitID":"meerakanani10"},"content":"In the RouteOptimization class the sorting function will be responsible to determine the optimal route once the distances are obtained"},{"lineNumber":125,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":126,"author":{"gitID":"meerakanani10"},"content":"To getDistance - google API is required to get the geocodes for the locations. Once the geocode for each address is obtained"},{"lineNumber":127,"author":{"gitID":"meerakanani10"},"content":"the distance between the two points is calculated and a matrix is returned with a distance property."},{"lineNumber":128,"author":{"gitID":"meerakanani10"},"content":"The distance property gives the distance in kilometers from the origin to destination. The function operates recursively determining the shortest"},{"lineNumber":129,"author":{"gitID":"meerakanani10"},"content":"distances from the starting point onwards and then from the next point onwards. This recursive nature ensures that the driver is following a seamless route."},{"lineNumber":130,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":131,"author":{"gitID":"meerakanani10"},"content":"For example:"},{"lineNumber":132,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":133,"author":{"gitID":"meerakanani10"},"content":"* Start at A (first address in the list of addresses)"},{"lineNumber":134,"author":{"gitID":"meerakanani10"},"content":"* Find all the distances from point A to the rest of the destinations"},{"lineNumber":135,"author":{"gitID":"meerakanani10"},"content":"* Choose the shortest distance from the bunch (ex. A-B is the shortest)"},{"lineNumber":136,"author":{"gitID":"meerakanani10"},"content":"* Add B to the list of addresses for the optimized route"},{"lineNumber":137,"author":{"gitID":"meerakanani10"},"content":"* Now repeat using B as the starting point and calculating the distance to all remaining destinations (omitting A)"},{"lineNumber":138,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":139,"author":{"gitID":"meerakanani10"},"content":"The optimized route will the be fed into a mapping function to display the route and get the directions for the driver."},{"lineNumber":140,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":141,"author":{"gitID":"meerakanani10"},"content":"\u003d\u003d\u003d\u003d Sorting addresses"},{"lineNumber":142,"author":{"gitID":"meerakanani10"},"content":"Once the distances have been found for all combinations of addresses on that filtered day they get stored in a Map with key: \"String address1_address2\" and"},{"lineNumber":143,"author":{"gitID":"meerakanani10"},"content":"value: \"Double distance (in km)\". This hashmap gets sorted in order of distances and any irrelevant or duplicate calculations are removed. For example if the distance from"},{"lineNumber":144,"author":{"gitID":"meerakanani10"},"content":"A to B is stored and B to A is stored, the second stored duplicate will be removed"},{"lineNumber":145,"author":{"gitID":"meerakanani10"},"content":"This sorted Hashmap now contains the key with the orign and destination address as well as the distance between the two. The sortByComparator function is"},{"lineNumber":146,"author":{"gitID":"meerakanani10"},"content":"constantly used to make sure the addresses are sorted by distances as the distances are being calculated. It is important that the distances are not only"},{"lineNumber":147,"author":{"gitID":"meerakanani10"},"content":"sorted by distance but also in an optimal route. If the shortest distance is from A to B the next part of the route has to be starting from B. Therefore,"},{"lineNumber":148,"author":{"gitID":"meerakanani10"},"content":"the distances are measured recursively from the new starting point, sorted by distance and then added to the final route."},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Filtering person by date"},{"lineNumber":151,"author":{"gitID":"-"},"content":".. Prerequisites: There list is not empty."},{"lineNumber":152,"author":{"gitID":"-"},"content":".. Test case: `filter 2018-03-03` (assuming that there is at least 1 person has the delivery date 2018-03-03) +"},{"lineNumber":153,"author":{"gitID":"-"},"content":"   Expected: The command result panel shows the number of persons with the delivery date \"2018-03-03\" and have valid, existing address. If there is any invalid, non-existing address then the"},{"lineNumber":154,"author":{"gitID":"-"},"content":"   command result panel also shows message saying that there is at least 1 invalid or non-existing address. The main display panel loads the \"optimized route\" on Google Map from the `Headquarter`"},{"lineNumber":155,"author":{"gitID":"-"},"content":"   to all the \"findable\" address. Status bar remains the same."},{"lineNumber":156,"author":{"gitID":"-"},"content":".. Test case: `filter 2018-02-30` (assuming that there is no person with this delivery date)"},{"lineNumber":157,"author":{"gitID":"-"},"content":"   Expected: The command result panel shows message saying that no person is listed. Status bar remains the same."},{"lineNumber":158,"author":{"gitID":"-"},"content":".. Other incorrect filter commands to try: `filter`, `filter 2018 03 03` +"},{"lineNumber":159,"author":{"gitID":"-"},"content":"   Expected: Error message from command result pane. Status bar remains the same."}],"authorContributionMap":{"meerakanani10":131,"-":28}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Pigeons - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"ngshikang"},"content":":repoURL: https://github.com/CS2103JAN2018-T16-B2/main"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"meerakanani10"},"content":"By: `T16-B2`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"ngshikang"},"content":"// tag::introductionSK[]"},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"ngshikang"},"content":"Pigeons is a delivery-tracking tool for both business-owners and delivery drivers who *prefer to use a desktop app for managing their delivery process*."},{"lineNumber":22,"author":{"gitID":"ngshikang"},"content":"Pigeons is *optimized for those who prefer to work with a Command Line Interface* (CLI)"},{"lineNumber":23,"author":{"gitID":"ngshikang"},"content":"while still having the benefits of a Graphical User Interface (GUI)."},{"lineNumber":24,"author":{"gitID":"ngshikang"},"content":"If you can type fast, Pigeons can get your delivery management tasks done faster than traditional GUI apps."},{"lineNumber":25,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":26,"author":{"gitID":"ngshikang"},"content":"The recommended way to use Pigeons is to first load in the delivery data by a centralised administrator for each delivery driver,"},{"lineNumber":27,"author":{"gitID":"ngshikang"},"content":"and then allow each driver to login to their own account and filter by today\u0027s date to retrieve the route for the deliveries"},{"lineNumber":28,"author":{"gitID":"ngshikang"},"content":"they have for the day."},{"lineNumber":29,"author":{"gitID":"ngshikang"},"content":"// end::introductionSK[]"},{"lineNumber":30,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":31,"author":{"gitID":"meerakanani10"},"content":"* Users will be able to add individuals to the address book and route out deliveries based on the day"},{"lineNumber":32,"author":{"gitID":"meerakanani10"},"content":"* The program will return attributes that will make the delivery mans life easier such as distance to destination and best time to leave"},{"lineNumber":33,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":34,"author":{"gitID":"ngshikang"},"content":"Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":39,"author":{"gitID":"-"},"content":"+"},{"lineNumber":40,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":41,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":42,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":43,"author":{"gitID":"-"},"content":"+"},{"lineNumber":44,"author":{"gitID":"ngshikang"},"content":"// tag::quickStartModification[]"},{"lineNumber":45,"author":{"gitID":"ngshikang"},"content":".  Run the MainApp scripts / jar file and await for the GUI to open"},{"lineNumber":46,"author":{"gitID":"ngshikang"},"content":".  A login screen such as the one below should appear."},{"lineNumber":47,"author":{"gitID":"ngshikang"},"content":"+"},{"lineNumber":48,"author":{"gitID":"ngshikang"},"content":"image::LoginScreen2.PNG[width\u003d\"300\"]"},{"lineNumber":49,"author":{"gitID":"ngshikang"},"content":"+"},{"lineNumber":50,"author":{"gitID":"ngshikang"},"content":". Create a profile with desired username and password (non case-sensitive) if using for the first time."},{"lineNumber":51,"author":{"gitID":"ngshikang"},"content":"If profile has previously already been created, or after creation of profile, click login."},{"lineNumber":52,"author":{"gitID":"ngshikang"},"content":"+"},{"lineNumber":53,"author":{"gitID":"ngshikang"},"content":"[NOTE]"},{"lineNumber":54,"author":{"gitID":"ngshikang"},"content":"You can use `Tab` to switch to the next field/button and `Enter` to submit/create/exit. `Enter` will not work on the"},{"lineNumber":55,"author":{"gitID":"ngshikang"},"content":"username field but only on the password field and buttons."},{"lineNumber":56,"author":{"gitID":"ngshikang"},"content":"+"},{"lineNumber":57,"author":{"gitID":"ngshikang"},"content":"The application should open into the following screen:"},{"lineNumber":58,"author":{"gitID":"-"},"content":"+"},{"lineNumber":59,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":60,"author":{"gitID":"-"},"content":"+"},{"lineNumber":61,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":62,"author":{"gitID":"ngshikang"},"content":"// end::quickStartModification[]"},{"lineNumber":63,"author":{"gitID":"-"},"content":".  Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":64,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":65,"author":{"gitID":"-"},"content":".  Some example commands you can try:"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"* *`list`* : lists all contacts"},{"lineNumber":68,"author":{"gitID":"-"},"content":"* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 d/2018-06-14` : adds a contact named `John Doe` to the Address Book."},{"lineNumber":69,"author":{"gitID":"-"},"content":"* **`delete`**`3` : deletes the 3rd contact shown in the current list"},{"lineNumber":70,"author":{"gitID":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."},{"lineNumber":73,"author":{"gitID":"ngshikang"},"content":".  Refer to \u003c\u003cUser Testing\u003e\u003e for a quick list of the sequence of commands you can try in this app."},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":76,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":79,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":82,"author":{"gitID":"-"},"content":"* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":83,"author":{"gitID":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":84,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":85,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"Format: `help`"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a person: `add`"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"Adds a person to the address book +"},{"lineNumber":94,"author":{"gitID":"meerakanani10"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS d/DELIVERY_DATE [t/TAG]...`"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":97,"author":{"gitID":"-"},"content":"A person can have any number of tags (including 0)"},{"lineNumber":98,"author":{"gitID":"meerakanani10"},"content":"[TIP]"},{"lineNumber":99,"author":{"gitID":"mattbuot"},"content":"Tags are used to categorize the different deliveries, some are already used by default like `repeat` which corresponds to a delivery that wasn\u0027t completed earlier and has been rescheduled"},{"lineNumber":100,"author":{"gitID":"mattbuot"},"content":"[TIP]"},{"lineNumber":101,"author":{"gitID":"meerakanani10"},"content":"The date must be in the format \"YYYY-MM-DD\""},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"meerakanani10"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 d/2018-03-24`"},{"lineNumber":106,"author":{"gitID":"meerakanani10"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 d/2018-06-17 t/criminal`"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing all persons : `list`"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"Shows a list of all persons in the address book. +"},{"lineNumber":111,"author":{"gitID":"-"},"content":"Format: `list`"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing a person : `edit`"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"Edits an existing person in the address book. +"},{"lineNumber":116,"author":{"gitID":"-"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"****"},{"lineNumber":119,"author":{"gitID":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the last person listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":120,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":121,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":122,"author":{"gitID":"-"},"content":"* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."},{"lineNumber":123,"author":{"gitID":"-"},"content":"* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":124,"author":{"gitID":"-"},"content":"****"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"* `edit 1 p/91234567 e/johndoe@example.com` +"},{"lineNumber":129,"author":{"gitID":"-"},"content":"Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":130,"author":{"gitID":"-"},"content":"* `edit 2 n/Betsy Crower t/` +"},{"lineNumber":131,"author":{"gitID":"-"},"content":"Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Locating persons by name: `find`"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"Finds persons whose names contain any of the given keywords. +"},{"lineNumber":136,"author":{"gitID":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"****"},{"lineNumber":139,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":140,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":141,"author":{"gitID":"-"},"content":"* Only the name is searched."},{"lineNumber":142,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":143,"author":{"gitID":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":144,"author":{"gitID":"-"},"content":"****"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"* `find John` +"},{"lineNumber":149,"author":{"gitID":"-"},"content":"Returns `john` and `John Doe`"},{"lineNumber":150,"author":{"gitID":"-"},"content":"* `find Betsy Tim John` +"},{"lineNumber":151,"author":{"gitID":"-"},"content":"Returns any person having names `Betsy`, `Tim`, or `John`"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"meerakanani10"},"content":"// tag::filter[]"},{"lineNumber":154,"author":{"gitID":"meerakanani10"},"content":"\u003d\u003d\u003d Filtering person by date: `filter`"},{"lineNumber":155,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":156,"author":{"gitID":"meerakanani10"},"content":"Filers the list of people by date (only one date)"},{"lineNumber":157,"author":{"gitID":"meerakanani10"},"content":"Format: `filter DATE`"},{"lineNumber":158,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":159,"author":{"gitID":"ngshikang"},"content":"****"},{"lineNumber":160,"author":{"gitID":"ngshikang"},"content":"* Recommended date format is YYYY-MM-DD"},{"lineNumber":161,"author":{"gitID":"ngshikang"},"content":"****"},{"lineNumber":162,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":163,"author":{"gitID":"meerakanani10"},"content":"When you filter by date the back end of the program will create an optimized route"},{"lineNumber":164,"author":{"gitID":"meerakanani10"},"content":"for all the people on that date and display the route on the map."},{"lineNumber":165,"author":{"gitID":"meerakanani10"},"content":"****"},{"lineNumber":166,"author":{"gitID":"meerakanani10"},"content":"* The search can only look for one date"},{"lineNumber":167,"author":{"gitID":"meerakanani10"},"content":"* Persons with the delivery date matching the argument will be returned"},{"lineNumber":168,"author":{"gitID":"meerakanani10"},"content":"* This filter can be used to obtain a delivery route for a day"},{"lineNumber":169,"author":{"gitID":"meerakanani10"},"content":"****"},{"lineNumber":170,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":171,"author":{"gitID":"meerakanani10"},"content":"// end::filter[]"},{"lineNumber":172,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person : `delete`"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"Deletes the specified person from the address book. +"},{"lineNumber":176,"author":{"gitID":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"****"},{"lineNumber":179,"author":{"gitID":"-"},"content":"* Deletes the person at the specified `INDEX`."},{"lineNumber":180,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":181,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":182,"author":{"gitID":"-"},"content":"****"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":187,"author":{"gitID":"-"},"content":"`delete 2` +"},{"lineNumber":188,"author":{"gitID":"-"},"content":"Deletes the 2nd person in the address book."},{"lineNumber":189,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":190,"author":{"gitID":"-"},"content":"`delete 1` +"},{"lineNumber":191,"author":{"gitID":"-"},"content":"Deletes the 1st person in the results of the `find` command."},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Selecting a person : `select`"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"Selects the person identified by the index number used in the last person listing. +"},{"lineNumber":196,"author":{"gitID":"-"},"content":"Format: `select INDEX`"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"****"},{"lineNumber":199,"author":{"gitID":"-"},"content":"* Selects the person and loads the Google search page the person at the specified `INDEX`."},{"lineNumber":200,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":201,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":202,"author":{"gitID":"-"},"content":"****"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":207,"author":{"gitID":"-"},"content":"`select 2` +"},{"lineNumber":208,"author":{"gitID":"-"},"content":"Selects the 2nd person in the address book."},{"lineNumber":209,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":210,"author":{"gitID":"-"},"content":"`select 1` +"},{"lineNumber":211,"author":{"gitID":"-"},"content":"Selects the 1st person in the results of the `find` command."},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing entered commands : `history`"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":216,"author":{"gitID":"-"},"content":"Format: `history`"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":219,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":220,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":221,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":224,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"Restores the address book to the state before the previous _undoable_ command was executed. +"},{"lineNumber":227,"author":{"gitID":"-"},"content":"Format: `undo`"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":230,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":231,"author":{"gitID":"-"},"content":"Undoable commands: those commands that modify the address book\u0027s content (`add`, `delete`, `edit` and `clear`)."},{"lineNumber":232,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":237,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":238,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"* `select 1` +"},{"lineNumber":241,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":242,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":243,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":246,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":247,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":248,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo`"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":253,"author":{"gitID":"-"},"content":"Format: `redo`"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":258,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":259,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":262,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":263,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":266,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":267,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":268,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":269,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":270,"author":{"gitID":"-"},"content":"`redo` (reapplies the `clear` command) +"},{"lineNumber":271,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Clearing all entries : `clear`"},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"-"},"content":"Clears all entries from the address book. +"},{"lineNumber":276,"author":{"gitID":"-"},"content":"Format: `clear`"},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"// tag::distance[]"},{"lineNumber":279,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Finding distance : `distance`"},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"Finds the distance from the headquarter to the person address. +"},{"lineNumber":282,"author":{"gitID":"-"},"content":"Format: `distance INDEX (INDEX)`"},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"****"},{"lineNumber":285,"author":{"gitID":"-"},"content":"* Selects the person and loads the distance from the headquarter to the person address `INDEX`. Or selects 2 person and"},{"lineNumber":286,"author":{"gitID":"-"},"content":"load the distance from the first person to the second person."},{"lineNumber":287,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":288,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":289,"author":{"gitID":"-"},"content":"* **The person(s) address(es) should be valid, existing. Else, the program might auto-generated some other address(ed).**"},{"lineNumber":290,"author":{"gitID":"-"},"content":"****"},{"lineNumber":291,"author":{"gitID":"-"},"content":""},{"lineNumber":292,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":293,"author":{"gitID":"-"},"content":""},{"lineNumber":294,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":295,"author":{"gitID":"-"},"content":"`distance 2 3` +"},{"lineNumber":296,"author":{"gitID":"-"},"content":"Return the distance from the 2nd person to the 3rd person in the address book."},{"lineNumber":297,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":298,"author":{"gitID":"-"},"content":"`distance 1` +"},{"lineNumber":299,"author":{"gitID":"-"},"content":"Return the distance from the headquarter to the 1st person name Betsy in the address book."},{"lineNumber":300,"author":{"gitID":"-"},"content":""},{"lineNumber":301,"author":{"gitID":"-"},"content":"// end::distance[]"},{"lineNumber":302,"author":{"gitID":"-"},"content":""},{"lineNumber":303,"author":{"gitID":"meerakanani10"},"content":"\u003d\u003d\u003d Setting the HeadQuarters `[coming in v2.0]`"},{"lineNumber":304,"author":{"gitID":"ngshikang"},"content":"User is able to set the address of the headquarters with `sethq` command"},{"lineNumber":305,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":306,"author":{"gitID":"mattbuot"},"content":"// tag::email[]"},{"lineNumber":307,"author":{"gitID":"mattbuot"},"content":"\u003d\u003d\u003d Emailing the customers : `email`"},{"lineNumber":308,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":309,"author":{"gitID":"mattbuot"},"content":"Sends an email to the filtered list of customers to remind them when their delivery is coming"},{"lineNumber":310,"author":{"gitID":"mattbuot"},"content":"and the itinerary to the driver with the list of all the addresses"},{"lineNumber":311,"author":{"gitID":"mattbuot"},"content":"ordered so that it corresponds to the shortest journey. +"},{"lineNumber":312,"author":{"gitID":"mattbuot"},"content":"Format: `email`"},{"lineNumber":313,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":314,"author":{"gitID":"mattbuot"},"content":"This command will email every user listed on the UI screen when the email command is run. +"},{"lineNumber":315,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":316,"author":{"gitID":"mattbuot"},"content":"[NOTE]"},{"lineNumber":317,"author":{"gitID":"mattbuot"},"content":"Remind to first filter the customers by date."},{"lineNumber":318,"author":{"gitID":"mattbuot"},"content":"// end::email[]"},{"lineNumber":319,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":320,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":321,"author":{"gitID":"-"},"content":""},{"lineNumber":322,"author":{"gitID":"-"},"content":"Exits the program. +"},{"lineNumber":323,"author":{"gitID":"-"},"content":"Format: `exit`"},{"lineNumber":324,"author":{"gitID":"-"},"content":""},{"lineNumber":325,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":326,"author":{"gitID":"-"},"content":""},{"lineNumber":327,"author":{"gitID":"-"},"content":"Address book data are saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":328,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":329,"author":{"gitID":"-"},"content":""},{"lineNumber":330,"author":{"gitID":"ngshikang"},"content":"[NOTE]"},{"lineNumber":331,"author":{"gitID":"ngshikang"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":332,"author":{"gitID":"ngshikang"},"content":"All data are saved to files unique to the user  logged in. +"},{"lineNumber":333,"author":{"gitID":"ngshikang"},"content":"You will not see data from that of another user profile."},{"lineNumber":334,"author":{"gitID":"ngshikang"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":335,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":336,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":337,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"},{"lineNumber":338,"author":{"gitID":"-"},"content":""},{"lineNumber":339,"author":{"gitID":"ngshikang"},"content":"Users may be able to encrypt/decrypt their Pigeons addressbook files from v2.0 onwards."},{"lineNumber":340,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"ngshikang"},"content":"// tag::centralisedLoading[]"},{"lineNumber":343,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":344,"author":{"gitID":"ngshikang"},"content":"\u003d\u003d\u003d Centralised loading in of data `[coming in v2.0]`"},{"lineNumber":345,"author":{"gitID":"ngshikang"},"content":"Users may be able to load in large amounts of addressees into their Pigeons addressbook files from v2.0 onwards."},{"lineNumber":346,"author":{"gitID":"ngshikang"},"content":"// end::centralisedLoading[]"},{"lineNumber":347,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":348,"author":{"gitID":"meerakanani10"},"content":"\u003d\u003d\u003d Drivers can edit the route to match their needs `[coming in v2.0]`"},{"lineNumber":349,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":350,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":351,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":352,"author":{"gitID":"-"},"content":""},{"lineNumber":353,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":354,"author":{"gitID":"-"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."},{"lineNumber":355,"author":{"gitID":"-"},"content":""},{"lineNumber":356,"author":{"gitID":"meerakanani10"},"content":"// tag::testing[]"},{"lineNumber":357,"author":{"gitID":"meerakanani10"},"content":"\u003d\u003d User Testing"},{"lineNumber":358,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":359,"author":{"gitID":"meerakanani10"},"content":"When testing and using our system for the first time, here are some commands you can try to get the full experience."},{"lineNumber":360,"author":{"gitID":"meerakanani10"},"content":"Feel free to try other commands outlined above when you get the feel of our program as well."},{"lineNumber":361,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":362,"author":{"gitID":"ngshikang"},"content":"*1.* add n/John Doa a/321 Clementi Ave p/67340028 e/pigeonscs2103@gmail.com d/2018-03-24"},{"lineNumber":363,"author":{"gitID":"ngshikang"},"content":"****"},{"lineNumber":364,"author":{"gitID":"ngshikang"},"content":"* John Doa should be added to the list of addressees."},{"lineNumber":365,"author":{"gitID":"ngshikang"},"content":"****"},{"lineNumber":366,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":367,"author":{"gitID":"ngshikang"},"content":"*2.* filter 2018-03-24"},{"lineNumber":368,"author":{"gitID":"ngshikang"},"content":"****"},{"lineNumber":369,"author":{"gitID":"ngshikang"},"content":"* All addressees with 2018-03-24 in their delivery date should be listed."},{"lineNumber":370,"author":{"gitID":"ngshikang"},"content":"* Additionally, a map routing all the shown addressees should be generated."},{"lineNumber":371,"author":{"gitID":"ngshikang"},"content":"****"},{"lineNumber":372,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":373,"author":{"gitID":"ngshikang"},"content":"*3.* find John"},{"lineNumber":374,"author":{"gitID":"ngshikang"},"content":"****"},{"lineNumber":375,"author":{"gitID":"ngshikang"},"content":"* All addressees with John in their name should be listed."},{"lineNumber":376,"author":{"gitID":"ngshikang"},"content":"****"},{"lineNumber":377,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":378,"author":{"gitID":"ngshikang"},"content":"*4.* delete 1"},{"lineNumber":379,"author":{"gitID":"ngshikang"},"content":"****"},{"lineNumber":380,"author":{"gitID":"ngshikang"},"content":"* John, which we added at the start, should be removed."},{"lineNumber":381,"author":{"gitID":"ngshikang"},"content":"* 1-index numbering system (i.e. the first addressee has index 1)"},{"lineNumber":382,"author":{"gitID":"ngshikang"},"content":"****"},{"lineNumber":383,"author":{"gitID":"meerakanani10"},"content":"// end::testing[]"},{"lineNumber":384,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":385,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":386,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":387,"author":{"gitID":"-"},"content":""},{"lineNumber":388,"author":{"gitID":"-"},"content":"* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"},{"lineNumber":389,"author":{"gitID":"-"},"content":"e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"},{"lineNumber":390,"author":{"gitID":"-"},"content":"* *Clear* : `clear`"},{"lineNumber":391,"author":{"gitID":"-"},"content":"* *Delete* : `delete INDEX` +"},{"lineNumber":392,"author":{"gitID":"-"},"content":"e.g. `delete 3`"},{"lineNumber":393,"author":{"gitID":"-"},"content":"* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"},{"lineNumber":394,"author":{"gitID":"-"},"content":"e.g. `edit 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":395,"author":{"gitID":"-"},"content":"* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":396,"author":{"gitID":"-"},"content":"e.g. `find James Jake`"},{"lineNumber":397,"author":{"gitID":"-"},"content":"* *List* : `list`"},{"lineNumber":398,"author":{"gitID":"-"},"content":"* *Help* : `help`"},{"lineNumber":399,"author":{"gitID":"-"},"content":"* *Select* : `select INDEX` +"},{"lineNumber":400,"author":{"gitID":"-"},"content":"e.g.`select 2`"},{"lineNumber":401,"author":{"gitID":"-"},"content":"* *Distance* : `distance INDEX (INDEX)` +"},{"lineNumber":402,"author":{"gitID":"-"},"content":"e.g.`distance 2`"},{"lineNumber":403,"author":{"gitID":"-"},"content":"* *History* : `history`"},{"lineNumber":404,"author":{"gitID":"-"},"content":"* *Undo* : `undo`"},{"lineNumber":405,"author":{"gitID":"-"},"content":"* *Redo* : `redo`"},{"lineNumber":406,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":407,"author":{"gitID":"mattbuot"},"content":"// tag::shortcuts[]"},{"lineNumber":408,"author":{"gitID":"mattbuot"},"content":"\u003d\u003d Shortcuts"},{"lineNumber":409,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":410,"author":{"gitID":"mattbuot"},"content":"* kbd:[tab] : autocomplete a command or a field"},{"lineNumber":411,"author":{"gitID":"mattbuot"},"content":"* kbd:[\u0026uarr;] : previous input"},{"lineNumber":412,"author":{"gitID":"mattbuot"},"content":"* kbd:[\u0026darr;] : next input"},{"lineNumber":413,"author":{"gitID":"mattbuot"},"content":"// end::shortcuts[]"}],"authorContributionMap":{"mattbuot":22,"ngshikang":66,"meerakanani10":44,"-":281}},{"path":"docs/team/mattbuot.adoc","lines":[{"lineNumber":1,"author":{"gitID":"mattbuot"},"content":"\u003d Matthieu Buot de l\u0027Epine - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"mattbuot"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"mattbuot"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"mattbuot"},"content":":experimental:"},{"lineNumber":5,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":6,"author":{"gitID":"meerakanani10"},"content":"\u003d\u003d PROJECT: Pigeons"},{"lineNumber":7,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":8,"author":{"gitID":"meerakanani10"},"content":"---"},{"lineNumber":9,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":10,"author":{"gitID":"meerakanani10"},"content":"\u003d\u003d Overview"},{"lineNumber":11,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":12,"author":{"gitID":"meerakanani10"},"content":"Pigeons is a desktop level application created for delivery companies to better assign and"},{"lineNumber":13,"author":{"gitID":"meerakanani10"},"content":"organize deliveries for the delivery people."},{"lineNumber":14,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":15,"author":{"gitID":"meerakanani10"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":16,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":17,"author":{"gitID":"mattbuot"},"content":"* *Major enhancement*: added *the ability to send automatic emails to customers and drivers.*"},{"lineNumber":18,"author":{"gitID":"mattbuot"},"content":"** What it does: allow the user to send an automatic recap email to the driver with all the deliveries scheduled on a specific day. And at the same time a reminder email to each customers which indicates the day on which their delivery is coming."},{"lineNumber":19,"author":{"gitID":"mattbuot"},"content":"** Justification: This feature improves the product significantly because a user can communicate with both the drivers and the customers in an effective manner."},{"lineNumber":20,"author":{"gitID":"mattbuot"},"content":"** Highlights: This enhancement is very dependent on the other commands and features as the `filter` command has to be ran before the `email` and as it is supposed to send an itinerary which is computed by another component. It required an in-depth analysis of the communication ways between drivers and customers and a good understanding of the whole application purpose."},{"lineNumber":21,"author":{"gitID":"mattbuot"},"content":"** Credits: The JavaMail API (optional package from the Java SE platform) is used to send the emails through a Gmail account,"},{"lineNumber":22,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":23,"author":{"gitID":"mattbuot"},"content":"* *Minor enhancement*: added an autocompletion functionality which is able to complete many possible inputs in the CLI interface by pressing the kbd:[tab] key"},{"lineNumber":24,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":25,"author":{"gitID":"mattbuot"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-T16-B2/main/blob/master/collated/functional/mattbuot.md[Functional code]] [https://github.com/CS2103JAN2018-T16-B2/main/blob/master/collated/test/mattbuot.md[Test code]]"},{"lineNumber":26,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":27,"author":{"gitID":"mattbuot"},"content":"* *Other contributions*:"},{"lineNumber":28,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":29,"author":{"gitID":"mattbuot"},"content":"** Project management:"},{"lineNumber":30,"author":{"gitID":"mattbuot"},"content":"*** Managed releases `v1.2` - `v1.4.1` (4 releases) on GitHub"},{"lineNumber":31,"author":{"gitID":"mattbuot"},"content":"** Documentation:"},{"lineNumber":32,"author":{"gitID":"mattbuot"},"content":"*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com/CS2103JAN2018-T16-B2/main/pull/3[#3], https://github.com/CS2103JAN2018-T16-B2/main/pull/8[#8], https://github.com/CS2103JAN2018-T16-B2/main/pull/106[#106], https://github.com/CS2103JAN2018-T16-B2/main/pull/120[#120]"},{"lineNumber":33,"author":{"gitID":"mattbuot"},"content":"** Community:"},{"lineNumber":34,"author":{"gitID":"mattbuot"},"content":"*** Contributed to forum discussions (https://github.com/nus-cs2103-AY1718S2/forum/issues/25#issuecomment-374913188[1])"},{"lineNumber":35,"author":{"gitID":"mattbuot"},"content":"*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com/CS2103JAN2018-T15-B3/main/issues/88[1])"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":41,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":42,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"mattbuot"},"content":"include::../UserGuide.adoc[tag\u003demail]"},{"lineNumber":45,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":46,"author":{"gitID":"mattbuot"},"content":"include::../UserGuide.adoc[tag\u003dshortcuts]"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":52,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"mattbuot"},"content":"include::../DeveloperGuide.adoc[tag\u003dmailer]"},{"lineNumber":55,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":56,"author":{"gitID":"mattbuot"},"content":"include::../DeveloperGuide.adoc[tag\u003dautocompletion]"},{"lineNumber":57,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":58,"author":{"gitID":"mattbuot"},"content":"include::../DeveloperGuide.adoc[tag\u003dusecases]"}],"authorContributionMap":{"mattbuot":31,"meerakanani10":12,"-":15}},{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"ngshikang"},"content":"Pigeons is a delivery-tracking tool for both business-owners and delivery drivers,"},{"lineNumber":7,"author":{"gitID":"ngshikang"},"content":" developed by T16-B2 from the CS2103 course. We are a team comprised of students from NUS as well as"},{"lineNumber":8,"author":{"gitID":"-"},"content":"students doing exchange from around the world."},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"ngshikang"},"content":"\u003d\u003d\u003d MEERA KANANI"},{"lineNumber":13,"author":{"gitID":"ngshikang"},"content":"image::meerakanani10.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":14,"author":{"gitID":"meerakanani10"},"content":"{empty}[https://github.com/meerakanani[github]] [https://github.com/CS2103JAN2018-T16-B2/main/blob/master/docs/team/meerakanani.adoc[porfolio]]"},{"lineNumber":15,"author":{"gitID":"meerakanani10"},"content":"{empty}"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"ngshikang"},"content":"Main Role: Route Logic Developer"},{"lineNumber":18,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":19,"author":{"gitID":"ngshikang"},"content":"Also in charge of: Team lead; Code quality"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"ngshikang"},"content":"\u003d\u003d\u003d NG SHI KANG"},{"lineNumber":24,"author":{"gitID":"ngshikang"},"content":"image::ngshikang.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":25,"author":{"gitID":"meerakanani10"},"content":"{empty}[http://github.com/ngshikang[github]] [https://github.com/CS2103JAN2018-T16-B2/main/blob/master/docs/team/ngshikang.adoc[portfolio]]"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"ngshikang"},"content":"Main Role: User Profile Developer"},{"lineNumber":28,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":29,"author":{"gitID":"ngshikang"},"content":"Also in charge of: Deliverables and deadlines; Scheduling and tracking"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"ngshikang"},"content":"\u003d\u003d\u003d MATTHIEU MARIE EMMANUEL BUOT DE L\u0027EPINE"},{"lineNumber":34,"author":{"gitID":"ngshikang"},"content":"image::mattbuot.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":35,"author":{"gitID":"meerakanani10"},"content":"{empty}[http://github.com/mattbuot[github]] [https://github.com/CS2103JAN2018-T16-B2/main/blob/master/docs/team/mattbuot.adoc[portfolio]]"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"ngshikang"},"content":"Main Role: Communication Developer"},{"lineNumber":38,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":39,"author":{"gitID":"ngshikang"},"content":"Also in charge of: Integration; Documentation"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"ngshikang"},"content":"\u003d\u003d\u003d NGO CHANH ANH MINH"},{"lineNumber":44,"author":{"gitID":"ngshikang"},"content":"image::ncaminh.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":45,"author":{"gitID":"ngshikang"},"content":"{empty}[http://github.com/ncaminh[github]] [https://github.com/CS2103JAN2018-T16-B2/main/blob/master/docs/team/ncaminh.adoc[portfolio]]"},{"lineNumber":46,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":47,"author":{"gitID":"ngshikang"},"content":"Main Role: Mapping Visualization Developer"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"ngshikang"},"content":"Also in charge of: Maps API Expert; Testing"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":52,"author":{"gitID":"-"},"content":""}],"authorContributionMap":{"ngshikang":23,"meerakanani10":4,"-":25}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d PIGEONS"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"ngshikang"},"content":"https://travis-ci.org/CS2103JAN2018-T16-B2/main[image:https://travis-ci.org/CS2103JAN2018-T16-B2/main.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":5,"author":{"gitID":"ngshikang"},"content":"https://ci.appveyor.com/project/ngshikang/main-mxx9w[image:https://ci.appveyor.com/api/projects/status/rg7h02nd59k71f38?svg\u003dtrue[Build status]]"},{"lineNumber":6,"author":{"gitID":"ngshikang"},"content":"[https://coveralls.io/github/CS2103JAN2018-T16-B2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-T16-B2/main/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":9,"author":{"gitID":"-"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":10,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":"image::images/Ui.png[width\u003d\"600\"]"},{"lineNumber":14,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"* This is a desktop delivery address book application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":17,"author":{"gitID":"-"},"content":"* Users will be able to add individuals to the address book and route out deliveries based on the day"},{"lineNumber":18,"author":{"gitID":"-"},"content":"* The program will return attributes that will make the delivery mans life easier such as distance to destination and best time to leave"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":23,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":24,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":25,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":30,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":31,"author":{"gitID":"-"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4]"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"* Code is developed from AddressBook-Level4 project created by SE-EDU initiative at https://github.com/se-edu/"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"ngshikang":3,"-":32}},{"path":"docs/team/ngshikang.adoc","lines":[{"lineNumber":1,"author":{"gitID":"ngshikang"},"content":"\u003d Ng Shi Kang - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"meerakanani10"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"meerakanani10"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":5,"author":{"gitID":"meerakanani10"},"content":"\u003d\u003d PROJECT: Pigeons"},{"lineNumber":6,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":7,"author":{"gitID":"meerakanani10"},"content":"---"},{"lineNumber":8,"author":{"gitID":"meerakanani10"},"content":"\u003d\u003d Overview"},{"lineNumber":9,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":10,"author":{"gitID":"meerakanani10"},"content":"Pigeons is a desktop level application created for delivery companies to better assign and"},{"lineNumber":11,"author":{"gitID":"meerakanani10"},"content":"organize deliveries for the delivery people."},{"lineNumber":12,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":13,"author":{"gitID":"meerakanani10"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":14,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":15,"author":{"gitID":"ngshikang"},"content":"* *Major enhancement*: added *the ability to log in to a customised profile and address book instance*"},{"lineNumber":16,"author":{"gitID":"ngshikang"},"content":"** What it does: allows the user to log in to a customised profile, with each user profile linked to its own customised address book instance and user preferences"},{"lineNumber":17,"author":{"gitID":"ngshikang"},"content":"** Justification: This feature improves the product significantly because it provides the option for users to use different profiles (many users can continue to share one profile if preferred). It is more conceivable that different users would have different addressees to send deliveries to and hence having a customised list of addressees would help each user have a better overview of their addressees and perform their deliveries more effectively."},{"lineNumber":18,"author":{"gitID":"ngshikang"},"content":"** Highlights: This enhancement introduces a whole new component that initiates even before the start of the main application, denying access to existing addressee lists to users who do not possess valid login details. It also has GUI components which accept keyboard inputs in a user-friendly manner (\"Tab\" \u0026 \"Enter\") in line with the CLI focus of the main application."},{"lineNumber":19,"author":{"gitID":"ngshikang"},"content":"** Credits: AddressBook-Level4 project created by SE-EDU initiative at https://github.com/se-edu/"},{"lineNumber":20,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":21,"author":{"gitID":"ngshikang"},"content":"* *Minor enhancement*: Enhanced user interface for application overall by adding useful labels in the main application and instructions to the login screen."},{"lineNumber":22,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":23,"author":{"gitID":"ngshikang"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-T16-B2/main/blob/master/collated/functional/ngshikang.md[Functional code]] [https://github.com/CS2103JAN2018-T16-B2/main/blob/master/collated/test/ngshikang.md[Test code]]"},{"lineNumber":24,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":25,"author":{"gitID":"ngshikang"},"content":"* *Other contributions*:"},{"lineNumber":26,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":27,"author":{"gitID":"ngshikang"},"content":"** Documentation:"},{"lineNumber":28,"author":{"gitID":"ngshikang"},"content":"*** Set up Travis, AppVeyor and Coveralls, as well as the badges for Travis and AppVeyor (https://github.com/CS2103JAN2018-T16-B2/main/pull/5[#5], https://github.com/CS2103JAN2018-T16-B2/main/pull/7[#7])"},{"lineNumber":29,"author":{"gitID":"ngshikang"},"content":"*** Modified existing guides to include the premises of our project (https://github.com/CS2103JAN2018-T16-B2/main/pull/15[#15], https://github.com/CS2103JAN2018-T16-B2/main/pull/44[#44], https://github.com/CS2103JAN2018-T16-B2/main/pull/126[#126], https://github.com/CS2103JAN2018-T16-B2/main/pull/148[#148])"},{"lineNumber":30,"author":{"gitID":"ngshikang"},"content":"*** Added documentation for all the features I added in the dev guide and user guide. (https://github.com/CS2103JAN2018-T16-B2/main/pull/32[#32], https://github.com/CS2103JAN2018-T16-B2/main/pull/47[#47], https://github.com/CS2103JAN2018-T16-B2/main/pull/107[#107])"},{"lineNumber":31,"author":{"gitID":"ngshikang"},"content":"** Community:"},{"lineNumber":32,"author":{"gitID":"ngshikang"},"content":"*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com/CS2103JAN2018-T15-B1/main/issues/44[1], https://github.com/CS2103JAN2018-T15-B1/main/issues/66[2], https://github.com/CS2103JAN2018-T15-B1/main/issues/53[3], https://github.com/CS2103JAN2018-T15-B1/main/issues/59[4], https://github.com/CS2103JAN2018-T15-B1/main/issues/70[5], https://github.com/CS2103JAN2018-T15-B1/main/issues/51[6], https://github.com/CS2103JAN2018-T15-B1/main/issues/48[7])"},{"lineNumber":33,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":34,"author":{"gitID":"ngshikang"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":35,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":37,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":38,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"ngshikang"},"content":"\u003d\u003d Introduction"},{"lineNumber":41,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":42,"author":{"gitID":"ngshikang"},"content":"Pigeons is a delivery-tracking tool for both business-owners and delivery drivers who *prefer to use a desktop app for managing their delivery process*."},{"lineNumber":43,"author":{"gitID":"ngshikang"},"content":"Pigeons is *optimized for those who prefer to work with a Command Line Interface* (CLI)"},{"lineNumber":44,"author":{"gitID":"ngshikang"},"content":"while still having the benefits of a Graphical User Interface (GUI)."},{"lineNumber":45,"author":{"gitID":"ngshikang"},"content":"If you can type fast, Pigeons can get your delivery management tasks done faster than traditional GUI apps."},{"lineNumber":46,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":47,"author":{"gitID":"ngshikang"},"content":"The recommended way to use Pigeons is to first load in the delivery data by a centralised administrator for each delivery driver,"},{"lineNumber":48,"author":{"gitID":"ngshikang"},"content":"and then allow each driver to login to their own account and filter by today\u0027s date to retrieve the route for the deliveries"},{"lineNumber":49,"author":{"gitID":"ngshikang"},"content":"they have for the day."},{"lineNumber":50,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":51,"author":{"gitID":"ngshikang"},"content":"\u003d\u003d Quick Start"},{"lineNumber":52,"author":{"gitID":"ngshikang"},"content":".  Run the MainApp scripts / jar file and await for the GUI to open"},{"lineNumber":53,"author":{"gitID":"ngshikang"},"content":".  A login screen such as the one below should appear."},{"lineNumber":54,"author":{"gitID":"ngshikang"},"content":"+"},{"lineNumber":55,"author":{"gitID":"ngshikang"},"content":"image::LoginScreen2.PNG[width\u003d\"300\"]"},{"lineNumber":56,"author":{"gitID":"ngshikang"},"content":"+"},{"lineNumber":57,"author":{"gitID":"ngshikang"},"content":". Create a profile with desired username and password if using for the first time."},{"lineNumber":58,"author":{"gitID":"ngshikang"},"content":"If profile has previously already been created, or after creation of profile, click login."},{"lineNumber":59,"author":{"gitID":"ngshikang"},"content":"+"},{"lineNumber":60,"author":{"gitID":"ngshikang"},"content":"[NOTE]"},{"lineNumber":61,"author":{"gitID":"ngshikang"},"content":"You can use `Tab` to switch to the next field/button and `Enter` to submit/create/exit. `Enter` will not work on the"},{"lineNumber":62,"author":{"gitID":"ngshikang"},"content":"username field but only on the password field and buttons."},{"lineNumber":63,"author":{"gitID":"ngshikang"},"content":"+"},{"lineNumber":64,"author":{"gitID":"ngshikang"},"content":"The application should open into the following screen:"},{"lineNumber":65,"author":{"gitID":"ngshikang"},"content":"+"},{"lineNumber":66,"author":{"gitID":"ngshikang"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":67,"author":{"gitID":"ngshikang"},"content":"+"},{"lineNumber":68,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":69,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":70,"author":{"gitID":"ngshikang"},"content":"\u003d\u003d\u003d Centralised loading in of data `[coming in v2.0]`"},{"lineNumber":71,"author":{"gitID":"ngshikang"},"content":"Users may be able to load in large amounts of addressees into their Pigeons addressbook files from v2.0 onwards."},{"lineNumber":72,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":73,"author":{"gitID":"ngshikang"},"content":"|\u003d\u003d\u003d"},{"lineNumber":74,"author":{"gitID":"ngshikang"},"content":"| The section below on user testing is co-authored with meerakanani"},{"lineNumber":75,"author":{"gitID":"ngshikang"},"content":"|\u003d\u003d\u003d"},{"lineNumber":76,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":77,"author":{"gitID":"ngshikang"},"content":"\u003d\u003d User Testing"},{"lineNumber":78,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":79,"author":{"gitID":"ngshikang"},"content":"When testing and using our system for the first time, here are some commands you can try to get the full experience."},{"lineNumber":80,"author":{"gitID":"ngshikang"},"content":"Feel free to try other commands outlined above when you get the feel of our program as well."},{"lineNumber":81,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":82,"author":{"gitID":"ngshikang"},"content":"*1.* add n/John Doa a/321 Clementi Ave p/67340028 e/pigeonscs2103@gmail.com d/2018-03-24"},{"lineNumber":83,"author":{"gitID":"ngshikang"},"content":"****"},{"lineNumber":84,"author":{"gitID":"ngshikang"},"content":"* John Doa should be added to the list of addressees."},{"lineNumber":85,"author":{"gitID":"ngshikang"},"content":"****"},{"lineNumber":86,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":87,"author":{"gitID":"ngshikang"},"content":"*2.* filter 2018-03-24"},{"lineNumber":88,"author":{"gitID":"ngshikang"},"content":"****"},{"lineNumber":89,"author":{"gitID":"ngshikang"},"content":"* All addressees with 2018-03-24 in their delivery date should be listed."},{"lineNumber":90,"author":{"gitID":"ngshikang"},"content":"* Additionally, a map routing all the shown addressees should be generated."},{"lineNumber":91,"author":{"gitID":"ngshikang"},"content":"****"},{"lineNumber":92,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":93,"author":{"gitID":"ngshikang"},"content":"*3.* find John"},{"lineNumber":94,"author":{"gitID":"ngshikang"},"content":"****"},{"lineNumber":95,"author":{"gitID":"ngshikang"},"content":"* All addressees with John in their name should be listed."},{"lineNumber":96,"author":{"gitID":"ngshikang"},"content":"****"},{"lineNumber":97,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":98,"author":{"gitID":"ngshikang"},"content":"*4.* delete 1"},{"lineNumber":99,"author":{"gitID":"ngshikang"},"content":"****"},{"lineNumber":100,"author":{"gitID":"ngshikang"},"content":"* John, which we added at the start, should be removed."},{"lineNumber":101,"author":{"gitID":"ngshikang"},"content":"* 1-index numbering system (i.e. the first addressee has index 1)"},{"lineNumber":102,"author":{"gitID":"ngshikang"},"content":"****"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":107,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":108,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"ngshikang"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":111,"author":{"gitID":"ngshikang"},"content":"[NOTE]"},{"lineNumber":112,"author":{"gitID":"ngshikang"},"content":"A fifth component, the `Login` component, is omitted in the above diagram to reduce the complexity of the diagram. This component is also run by the `MainApp` class as further explained below, but will only be run at app launch and subsequently will have limited interaction with the other components, leaving the general architecture of the main application as depicted in the diagram above."},{"lineNumber":113,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":114,"author":{"gitID":"ngshikang"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":115,"author":{"gitID":"ngshikang"},"content":"[NOTE]"},{"lineNumber":116,"author":{"gitID":"ngshikang"},"content":"The `login` component has its own independently running user interface, but the classes used for the `login` feature are maintained together with those of the main application in the `UI` component package."},{"lineNumber":117,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":121,"author":{"gitID":"ngshikang"},"content":"image::StorageClassUpdated.png[width\u003d\"800\"]"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"ngshikang"},"content":"* can save the `UserPass` data in json format and read it back."},{"lineNumber":124,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":125,"author":{"gitID":"ngshikang"},"content":"\u003d\u003d\u003d Login component"},{"lineNumber":126,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":127,"author":{"gitID":"ngshikang"},"content":"The `Login` component,"},{"lineNumber":128,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":129,"author":{"gitID":"ngshikang"},"content":"* allows for users to login to a specific instance of the Pigeons address book,"},{"lineNumber":130,"author":{"gitID":"ngshikang"},"content":"such that each user (Pigeon/Delivery Driver) can have a personalised list of customers to deliver to."},{"lineNumber":131,"author":{"gitID":"ngshikang"},"content":"* provides an interface for managing the entire login process with usernames and passwords"},{"lineNumber":132,"author":{"gitID":"ngshikang"},"content":"in a paired structure `UserPass` stored in a json file in the implemented class `JsonUserPassStorage`"},{"lineNumber":133,"author":{"gitID":"ngshikang"},"content":"which implements `UserPassStorage`."},{"lineNumber":134,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":135,"author":{"gitID":"ngshikang"},"content":"With regards to the implementation of the structures described above, `UserPass` consists of two Strings, the first being the username and the second being the password."},{"lineNumber":136,"author":{"gitID":"ngshikang"},"content":"The password is automatically hashed by the SHA-256 algorithm upon `UserPass` creation. A static `hash` method"},{"lineNumber":137,"author":{"gitID":"ngshikang"},"content":"is provided in the `UserPass` class if SHA-256 hashing is required for any password verification."},{"lineNumber":138,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":139,"author":{"gitID":"ngshikang"},"content":"A class diagram depicting the behaviours and relationships for `UserPass`, `UserPassStorage` and `JsonUserPassStorage` are shown below."},{"lineNumber":140,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":141,"author":{"gitID":"ngshikang"},"content":"image::login_class_diagram.png[width\u003d\"800\"]"},{"lineNumber":142,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":143,"author":{"gitID":"ngshikang"},"content":"\u003d\u003d\u003d Login feature"},{"lineNumber":144,"author":{"gitID":"ngshikang"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":145,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":146,"author":{"gitID":"ngshikang"},"content":"The login feature is facilitated by a `UserPassStorage` that stores all `UserPass` (username and password pair of Strings) created before in the application."},{"lineNumber":147,"author":{"gitID":"ngshikang"},"content":"Each time a user attempts a login, a `UserPass` is created based on their inputs for username and password, and verified against the `UserPassStorage`."},{"lineNumber":148,"author":{"gitID":"ngshikang"},"content":"Upon successful verification, the user will be brought to a user-customised version of the application."},{"lineNumber":149,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":150,"author":{"gitID":"ngshikang"},"content":"The following sequence diagram shows how the checkLoginDetails method works:"},{"lineNumber":151,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":152,"author":{"gitID":"ngshikang"},"content":"image::LoginDetails.png[width\u003d\"800\"]"},{"lineNumber":153,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":154,"author":{"gitID":"ngshikang"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":155,"author":{"gitID":"ngshikang"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":156,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":157,"author":{"gitID":"ngshikang"},"content":". Login settings"},{"lineNumber":158,"author":{"gitID":"ngshikang"},"content":".. Create an account for the same username more than once (not case-sensitive). +"},{"lineNumber":159,"author":{"gitID":"ngshikang"},"content":"    Expected: Creation of a profile for the same username as one that exists already should not be allowed."},{"lineNumber":160,"author":{"gitID":"ngshikang"},"content":".. Try a different password than the one used for creating the account (not case-sensitive). +"},{"lineNumber":161,"author":{"gitID":"ngshikang"},"content":"    Expected: It should deny you entry into the application until the correct password is keyed in."}],"authorContributionMap":{"ngshikang":133,"meerakanani10":13,"-":15}},{"path":"docs/team/ncaminh.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Ngo Chanh Anh Minh - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"meerakanani10"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"meerakanani10"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":5,"author":{"gitID":"meerakanani10"},"content":"\u003d\u003d PROJECT: Pigeons"},{"lineNumber":6,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":7,"author":{"gitID":"meerakanani10"},"content":"---"},{"lineNumber":8,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":9,"author":{"gitID":"meerakanani10"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"Pigeons is a desktop delivery planning application"},{"lineNumber":12,"author":{"gitID":"-"},"content":"used by delivery companies to plan for their delivery services effectively."},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"* *Major enhancement*: *use Google Map Distance Matrix API as the backbones to create optimized routes, to plan for trips*"},{"lineNumber":17,"author":{"gitID":"-"},"content":"** Application: apply to various parts of one of my minor enhancement(distance command) and one of my friend enhancement(filter command)."},{"lineNumber":18,"author":{"gitID":"-"},"content":"** Justification: This enhancement is used to calculate distance between locations,"},{"lineNumber":19,"author":{"gitID":"-"},"content":"providing data for us determine whether a specific address is exist or not. Then we can create the optimized route for the driver."},{"lineNumber":20,"author":{"gitID":"-"},"content":"** Highlights: This enhancement affects existing commands and commands to be added in future."},{"lineNumber":21,"author":{"gitID":"-"},"content":"Moreover, there are many more useful data that we can extract from the Distance Matrix such as estimated durations for different vehicles."},{"lineNumber":22,"author":{"gitID":"-"},"content":"** Credits: Google Map Distance Matrix API for Java."},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"* *Major enhancement*: *created events to handle all possible cases related to the main display panel*"},{"lineNumber":25,"author":{"gitID":"-"},"content":"** What it does: load the needed route(s) on Google Map if possible(there is at least one existed address) or display errors on result display panel."},{"lineNumber":26,"author":{"gitID":"-"},"content":"** Justification: This enhancement help the drivers visualising the locations on the map as well as show them possible routes and which are the optimized routes."},{"lineNumber":27,"author":{"gitID":"-"},"content":"** Highlights: This enhancement is affected a lot by many existing commands and commands to be added in future."},{"lineNumber":28,"author":{"gitID":"-"},"content":"Therefore, any future commands, which create events to change the display of the main display panel, require carefulness from the developer(s)."},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"* *Minor enhancement*: added *Distance Command* to calculate distance from 2 locations so that the driver can plan his trip better."},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"* *Minor enhancement*: added *Sound system* to welcome user after login and read person card name."},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"//TODO add links for collation"},{"lineNumber":35,"author":{"gitID":"-"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-T16-B2/main/tree/master/collated/functional/ncaminh.md[Functional code]] [https://github.com/CS2103JAN2018-T16-B2/main/tree/master/collated/test/ncaminh.md[Test code]] [https://github.com/CS2103JAN2018-T16-B2/main/tree/master/collated/unused[Unused code]] _{give links to collated code files}_"},{"lineNumber":36,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":37,"author":{"gitID":"meerakanani10"},"content":"* *Other contributions*:"},{"lineNumber":38,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":39,"author":{"gitID":"meerakanani10"},"content":"** Project management:"},{"lineNumber":40,"author":{"gitID":"meerakanani10"},"content":"*** Kept team on track on TODO\u0027s before each tutorial"},{"lineNumber":41,"author":{"gitID":"meerakanani10"},"content":"** Enhancements to existing features:"},{"lineNumber":42,"author":{"gitID":"-"},"content":"*** Updated the labels color (Listed in collated file)"},{"lineNumber":43,"author":{"gitID":"-"},"content":"*** Added zoom effect for labels (Listed in collated file)"},{"lineNumber":44,"author":{"gitID":"-"},"content":"*** Rewrote some part of the for existing features and existing tests(Browser panel, Select Command,...) (Listed in collated file)"},{"lineNumber":45,"author":{"gitID":"-"},"content":"** Changes to some small parts of my teammate features:"},{"lineNumber":46,"author":{"gitID":"-"},"content":"*** Made changes, added more methods to the Optimized java and Filter command written by my teammate (Listed in collated file)"},{"lineNumber":47,"author":{"gitID":"-"},"content":"** Documentation:"},{"lineNumber":48,"author":{"gitID":"-"},"content":"*** Added related document related to my enhancements to the User Guide"},{"lineNumber":49,"author":{"gitID":"meerakanani10"},"content":"** Community:"},{"lineNumber":50,"author":{"gitID":"meerakanani10"},"content":"*** PRs reviewed (with non-trivial review comments)"},{"lineNumber":51,"author":{"gitID":"-"},"content":"** Tools:"},{"lineNumber":52,"author":{"gitID":"-"},"content":"*** Tools: Integrated a new Github plugin (Google Map API service) to the team repo"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":58,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":59,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Finding distance : `distance`"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"Finds the distance from the headquarter to the person address. +"},{"lineNumber":64,"author":{"gitID":"-"},"content":"Format: `distance INDEX (INDEX)`"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"****"},{"lineNumber":67,"author":{"gitID":"-"},"content":"* Selects the person and loads the distance from the headquarter to the person address `INDEX`. Or selects 2 person and"},{"lineNumber":68,"author":{"gitID":"-"},"content":"load the distance from the first person to the second person."},{"lineNumber":69,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":70,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":71,"author":{"gitID":"-"},"content":"* **The person(s) address(es) should be valid, existing. Else, the program might auto-generated some other address(ed).**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"****"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":77,"author":{"gitID":"-"},"content":"`distance 2 3` +"},{"lineNumber":78,"author":{"gitID":"-"},"content":"Return the distance from the 2nd person to the 3rd person in the address book."},{"lineNumber":79,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":80,"author":{"gitID":"-"},"content":"`distance 1` +"},{"lineNumber":81,"author":{"gitID":"-"},"content":"Return the distance from the headquarter to the 1st person name Betsy in the address book."},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":87,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":88,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Retrieving distance from a person address to another person address"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"Like other commands, distance command uses the `AddressBookParser` class to parse the user command. The result of the command execution is encapsulated as a CommandResult object which is passed back to the Ui."},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"The distance command execution won\u0027t affect the `Model` or raise any events since it only return the distance result."},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"However, the result is depend on the `GetDistance` class which will using the `Google Map API` to calculate the distance from the HQ to the person address."},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the `distance` command works:"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"image::getDistanceOfPersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Virtual assistant (script based reader)"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Running scripts:"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"If the user operating system is either `Window` or `Mac OS` then every time, right after logging in, the system will run a script says \"Welcome user\". Moreover, whenever the user click on"},{"lineNumber":107,"author":{"gitID":"-"},"content":"a person card or use `Select command` to prefer to a person card, the system will read out \"This is + `the person name` \"."},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"We use `Runtime.java` in `java.lang` package to `execute` the scripts via the corresponding executor (`osascript` for `Mac` and `wscript` for `Window`."},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Creating scripts"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"* For Window:"},{"lineNumber":114,"author":{"gitID":"-"},"content":"** First, the program will create folder `script` if it is not existed."},{"lineNumber":115,"author":{"gitID":"-"},"content":"** Then in the `script` folder, the program will look for the corresponding `vbs` script. If the script is not existed,"},{"lineNumber":116,"author":{"gitID":"-"},"content":"*** Our system will use `File.java` to automatically create a `text` file and fill in the needed info for the `vbs` script file."},{"lineNumber":117,"author":{"gitID":"-"},"content":"*** After that, we will convert the `text` file into the `vbs` file using `File.java`."},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"* For Mac:"},{"lineNumber":120,"author":{"gitID":"-"},"content":"** The program will not need to create any folder or script file but rather initialize a `String` array with"},{"lineNumber":121,"author":{"gitID":"-"},"content":"all the contents of the script."},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"image::RunScriptAD.png[width\u003d\"800\"]"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Virtual assistant"},{"lineNumber":126,"author":{"gitID":"-"},"content":". Reads out a person name and shows route from the Headquarter to the person address:"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":".. Prerequisites: The last shown list is not empty. The first person in the last shown list has a valid, existing address."},{"lineNumber":129,"author":{"gitID":"-"},"content":".. Test case: `click on the first person card` or use command `select 1` +"},{"lineNumber":130,"author":{"gitID":"-"},"content":"   Expected: The system reads out \"This is + `the first person name` \" and the main display panel loads the route on Google Map from the `Headquarter`"},{"lineNumber":131,"author":{"gitID":"-"},"content":"   to the `first person address`. Status bar remains the same."},{"lineNumber":132,"author":{"gitID":"-"},"content":".. Test case: `click on a person card` or use command `select` to select a person with an invalid address (such as: \"Dummy Address\") +"},{"lineNumber":133,"author":{"gitID":"-"},"content":"   Expected: The system reads out \"This is + `the person name` \" and the main display panel either loads only the location on Google Map of the `Headquarter`"},{"lineNumber":134,"author":{"gitID":"-"},"content":"   or the route from the `Headquarter` to an address which might sounds alike (auto generated by Google Map). Status bar remains the same."},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Retrieving distance from 2 end points"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":". Retrieving distance from `Headquarter` to a `person address`  :"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":".. Prerequisites: The last shown list is not empty. The first person in the last shown list has a valid, existing address."},{"lineNumber":141,"author":{"gitID":"-"},"content":".. Test case: `distance 1` +"},{"lineNumber":142,"author":{"gitID":"-"},"content":"   Expected: The command result panel shows the distance from the `Headquarter` to the `first person address` and the main display panel loads the route on Google Map from the `Headquarter`"},{"lineNumber":143,"author":{"gitID":"-"},"content":"   to the `first person address`. Status bar remains the same."},{"lineNumber":144,"author":{"gitID":"-"},"content":".. Test case: `distance x` with x is the index of a person with invalid or non-existing address +"},{"lineNumber":145,"author":{"gitID":"-"},"content":"   Expected: The command result panel shows \"Unable to find + `person name` + address\" and the main display panel either loads only the location on Google Map of the `Headquarter`"},{"lineNumber":146,"author":{"gitID":"-"},"content":"   or the route from the `Headquarter` to an address which might sounds alike (auto generated by Google Map). Status bar remains the same."},{"lineNumber":147,"author":{"gitID":"-"},"content":".. Test case: `distance 0` +"},{"lineNumber":148,"author":{"gitID":"-"},"content":"   Expected: Error details shown in the command result panel. Status bar remains the same."},{"lineNumber":149,"author":{"gitID":"-"},"content":".. Other incorrect distance commands to try: `distance`, `distance x` (where x is larger than the list size) +"},{"lineNumber":150,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":". Retrieving distance from a `person address` to another `person address` :"},{"lineNumber":153,"author":{"gitID":"-"},"content":".. Prerequisites: The last shown list has more than 1 person. The first person and the second in the last shown list have valid, existing addresses."},{"lineNumber":154,"author":{"gitID":"-"},"content":".. Test case: `distance 1 2` +"},{"lineNumber":155,"author":{"gitID":"-"},"content":"   Expected: The command result panel shows the distance from the `first person address` to the `second person address` and the main display panel loads the route on Google Map from the `first person address`"},{"lineNumber":156,"author":{"gitID":"-"},"content":"   to the `second person address`. Status bar remains the same."},{"lineNumber":157,"author":{"gitID":"-"},"content":".. Test case: `distance 1 x` with x is the index of a person with invalid or non-existing address +"},{"lineNumber":158,"author":{"gitID":"-"},"content":"   Expected: The command result panel shows \"Unable to find at least on address\" and the main display panel either loads only the location on Google Map of one of the addresses or the route from the addressed which might sound alike (auto generated by Google Map). Status bar remains the same."},{"lineNumber":159,"author":{"gitID":"-"},"content":".. Test case: `distance 0 1` +"},{"lineNumber":160,"author":{"gitID":"-"},"content":"   Expected: Error details shown in the command result panel. Status bar remains the same."},{"lineNumber":161,"author":{"gitID":"-"},"content":".. Other incorrect distance commands to try: `distance`, `distance 0 x`, `distance x y` (where x and y are larger than the list size) +"},{"lineNumber":162,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."}],"authorContributionMap":{"meerakanani10":17,"-":145}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"meerakanani10"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":10,"author":{"gitID":"meerakanani10"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":23,"author":{"gitID":"meerakanani10"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":49,"author":{"gitID":"meerakanani10"},"content":"import seedu.address.model.person.DelivDate;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":68,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":69,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        Person toAdd \u003d AMY;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":72,"author":{"gitID":"meerakanani10"},"content":"                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + DATE_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":88,"author":{"gitID":"meerakanani10"},"content":"                .withAddress(VALID_ADDRESS_AMY).withDate(VALID_DATE_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":90,"author":{"gitID":"meerakanani10"},"content":"                + DATE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except phone -\u003e added */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":95,"author":{"gitID":"meerakanani10"},"content":"                .withAddress(VALID_ADDRESS_AMY).withDate(VALID_DATE_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":97,"author":{"gitID":"meerakanani10"},"content":"                + DATE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except email -\u003e added */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":101,"author":{"gitID":"meerakanani10"},"content":"                .withAddress(VALID_ADDRESS_AMY).withDate(VALID_DATE_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":102,"author":{"gitID":"meerakanani10"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":103,"author":{"gitID":"meerakanani10"},"content":"                + DATE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except address -\u003e added */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":107,"author":{"gitID":"meerakanani10"},"content":"                .withAddress(VALID_ADDRESS_BOB).withDate(VALID_DATE_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_BOB"},{"lineNumber":109,"author":{"gitID":"meerakanani10"},"content":"                + DATE_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        /* Case: add a person with tags, command with parameters in random order -\u003e added */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":118,"author":{"gitID":"meerakanani10"},"content":"        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"},{"lineNumber":119,"author":{"gitID":"meerakanani10"},"content":"                + DATE_DESC_AMY + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        /* Case: add a person, missing tags -\u003e added */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person -\u003e rejected */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person except with different tags -\u003e rejected */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        // AddressBook#addPerson(Person)"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":151,"author":{"gitID":"meerakanani10"},"content":"        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + DATE_DESC_AMY;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":155,"author":{"gitID":"meerakanani10"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + DATE_DESC_AMY;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":159,"author":{"gitID":"meerakanani10"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY + DATE_DESC_AMY;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        /* Case: missing address -\u003e rejected */"},{"lineNumber":163,"author":{"gitID":"meerakanani10"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + DATE_DESC_AMY;"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"meerakanani10"},"content":"        /* Case: missing date -\u003e rejected */"},{"lineNumber":167,"author":{"gitID":"meerakanani10"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":175,"author":{"gitID":"meerakanani10"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":176,"author":{"gitID":"meerakanani10"},"content":"                + DATE_DESC_AMY;"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":180,"author":{"gitID":"meerakanani10"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":181,"author":{"gitID":"meerakanani10"},"content":"                + DATE_DESC_AMY;"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":185,"author":{"gitID":"meerakanani10"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY"},{"lineNumber":186,"author":{"gitID":"meerakanani10"},"content":"                + DATE_DESC_AMY;"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":190,"author":{"gitID":"meerakanani10"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC"},{"lineNumber":191,"author":{"gitID":"meerakanani10"},"content":"                + DATE_DESC_AMY;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"meerakanani10"},"content":"        /*Case: invalid date -\u003e rejected */"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":196,"author":{"gitID":"meerakanani10"},"content":"                + INVALID_DATE_DESC;"},{"lineNumber":197,"author":{"gitID":"meerakanani10"},"content":"        assertCommandFailure(command, DelivDate.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":198,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":201,"author":{"gitID":"meerakanani10"},"content":"                + DATE_DESC_AMY + INVALID_TAG_DESC;"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":216,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Person toAdd) {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"},{"lineNumber":225,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Person)"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Person toAdd) {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":262,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":265,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":267,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":275,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":276,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"meerakanani10":35,"-":241}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Pigeons - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"ngshikang"},"content":":repoURL: https://github.com/CS2103JAN2018-T16-B2/main"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"By: `Team T16-B2`      Since: `Mar 2018`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"Special Credits to: AddressBook-Level4 project created by SE-EDU initiative at https://github.com/se-edu/"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":24,"author":{"gitID":"-"},"content":"+"},{"lineNumber":25,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":26,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":27,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":28,"author":{"gitID":"-"},"content":"+"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":31,"author":{"gitID":"-"},"content":"+"},{"lineNumber":32,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":33,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":34,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":40,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":41,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":42,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":43,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":44,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":45,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":46,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":47,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":48,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":49,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":54,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":63,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":64,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":67,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level4` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level4`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":82,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":87,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":94,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":99,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":102,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"ngshikang"},"content":"[NOTE]"},{"lineNumber":107,"author":{"gitID":"ngshikang"},"content":"A fifth component, the `Login` component, is omitted in the above diagram to reduce the complexity of the diagram. This component is also run by the `MainApp` class as further explained below, but will only be run at app launch and subsequently will have limited interaction with the other components, leaving the general architecture of the main application as depicted in the diagram above."},{"lineNumber":108,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":110,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":115,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":120,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":125,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":126,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":127,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":132,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":137,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":140,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":145,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":148,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":153,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":156,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":161,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":164,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":175,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":176,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"ngshikang"},"content":"[NOTE]"},{"lineNumber":179,"author":{"gitID":"ngshikang"},"content":"The `login` component has its own independently running user interface, but the classes used for the `login` feature are maintained together with those of the main application in the `UI` component package."},{"lineNumber":180,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":182,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":185,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":186,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":189,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":192,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":195,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":196,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events. Especially, the distance command also depend on the Google Map API."},{"lineNumber":197,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":202,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":205,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":209,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":216,"author":{"gitID":"-"},"content":"* stores the Address Book data."},{"lineNumber":217,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":218,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":221,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":224,"author":{"gitID":"ngshikang"},"content":"image::StorageClassUpdated.png[width\u003d\"800\"]"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":231,"author":{"gitID":"-"},"content":"* can save the Address Book data in xml format and read it back."},{"lineNumber":232,"author":{"gitID":"ngshikang"},"content":"* can save the `UserPass` data in json format and read it back."},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"ngshikang"},"content":"[[Design-Login]]"},{"lineNumber":235,"author":{"gitID":"ngshikang"},"content":"// tag::login[]"},{"lineNumber":236,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":237,"author":{"gitID":"ngshikang"},"content":"\u003d\u003d\u003d Login component"},{"lineNumber":238,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":239,"author":{"gitID":"ngshikang"},"content":"The `Login` component,"},{"lineNumber":240,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":241,"author":{"gitID":"ngshikang"},"content":"* allows for users to login to a specific instance of the Pigeons address book,"},{"lineNumber":242,"author":{"gitID":"ngshikang"},"content":"such that each user (Pigeon/Delivery Driver) can have a personalised list of customers to deliver to."},{"lineNumber":243,"author":{"gitID":"ngshikang"},"content":"* provides an interface for managing the entire login process with usernames and passwords"},{"lineNumber":244,"author":{"gitID":"ngshikang"},"content":"in a paired structure `UserPass` stored in a json file in the implemented class `JsonUserPassStorage`"},{"lineNumber":245,"author":{"gitID":"ngshikang"},"content":"which implements `UserPassStorage`."},{"lineNumber":246,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":247,"author":{"gitID":"ngshikang"},"content":"With regards to the implementation of the structures described above, `UserPass` consists of two Strings, the first being the username and the second being the password."},{"lineNumber":248,"author":{"gitID":"ngshikang"},"content":"The password is automatically hashed by the SHA-256 algorithm upon `UserPass` creation. A static `hash` method"},{"lineNumber":249,"author":{"gitID":"ngshikang"},"content":"is provided in the `UserPass` class if SHA-256 hashing is required for any password verification."},{"lineNumber":250,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":251,"author":{"gitID":"ngshikang"},"content":"A class diagram depicting the behaviours and relationships for `UserPass`, `UserPassStorage` and `JsonUserPassStorage` are shown below."},{"lineNumber":252,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":253,"author":{"gitID":"ngshikang"},"content":"image::login_class_diagram.png[width\u003d\"800\"]"},{"lineNumber":254,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":255,"author":{"gitID":"ngshikang"},"content":"// end::login[]"},{"lineNumber":256,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":258,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":265,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":266,"author":{"gitID":"meerakanani10"},"content":"// tag::filter[]"},{"lineNumber":267,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Filter Command"},{"lineNumber":268,"author":{"gitID":"-"},"content":"To add to the many commands necessary for users, filtering by date will be essential when trying to optimize the route per day."},{"lineNumber":269,"author":{"gitID":"-"},"content":"The filter command was added similar to how the find command has been implemented."},{"lineNumber":270,"author":{"gitID":"-"},"content":"When the user enters filter by a date in the UI the model with the list of data is updated using the date predicate."},{"lineNumber":271,"author":{"gitID":"-"},"content":"This updated model is then executed via the CommandResult class and output on the UI. It is stores as a readonly list in the model."},{"lineNumber":272,"author":{"gitID":"meerakanani10"},"content":"// end::filter[]"},{"lineNumber":273,"author":{"gitID":"-"},"content":""},{"lineNumber":274,"author":{"gitID":"meerakanani10"},"content":"// tag::optimize[]"},{"lineNumber":275,"author":{"gitID":"meerakanani10"},"content":"\u003d\u003d\u003d Route Optimization feature"},{"lineNumber":276,"author":{"gitID":"meerakanani10"},"content":"Since this program is meant for deliveries the route for the daily delivery must be optimized for the user."},{"lineNumber":277,"author":{"gitID":"meerakanani10"},"content":"The RouteOptimization class will get the distance (getDistance function in GetDistance class) between all the addresses for the day."},{"lineNumber":278,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":279,"author":{"gitID":"meerakanani10"},"content":"The addresses will then be sorted based on optimal sortest route."},{"lineNumber":280,"author":{"gitID":"meerakanani10"},"content":"Example:"},{"lineNumber":281,"author":{"gitID":"meerakanani10"},"content":"3 deliveries for a day at Point A, B, C"},{"lineNumber":282,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":283,"author":{"gitID":"meerakanani10"},"content":"Point A --\u003e Point B \u003d 14km (12min)"},{"lineNumber":284,"author":{"gitID":"meerakanani10"},"content":"Point A --\u003e Point C \u003d 13km (13min)"},{"lineNumber":285,"author":{"gitID":"meerakanani10"},"content":"Point C --\u003e Point B \u003d 12km (10min)"},{"lineNumber":286,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":287,"author":{"gitID":"meerakanani10"},"content":"Optimal Route \u003d Point A --\u003e Point C --\u003e Point B (based on least about of km travelled)"},{"lineNumber":288,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":289,"author":{"gitID":"meerakanani10"},"content":"In the RouteOptimization class the sorting function will be responsible to determine the optimal route once the distances are obtained"},{"lineNumber":290,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":291,"author":{"gitID":"meerakanani10"},"content":"To getDistance - google API is required to get the geocodes for the locations. Once the geocode for each address is obtained"},{"lineNumber":292,"author":{"gitID":"meerakanani10"},"content":"the distance between the two points is calculated and a matrix is returned with a distance property."},{"lineNumber":293,"author":{"gitID":"meerakanani10"},"content":"The distance property gives the distance in kilometers from the origin to destination. The function operates recursively determining the shortest"},{"lineNumber":294,"author":{"gitID":"meerakanani10"},"content":"distances from the starting point onwards and then from the next point onwards. This recursive nature ensures that the driver is following a seamless route."},{"lineNumber":295,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":296,"author":{"gitID":"meerakanani10"},"content":"For example:"},{"lineNumber":297,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":298,"author":{"gitID":"meerakanani10"},"content":"* Start at A (first address in the list of addresses)"},{"lineNumber":299,"author":{"gitID":"meerakanani10"},"content":"* Find all the distances from point A to the rest of the destinations"},{"lineNumber":300,"author":{"gitID":"meerakanani10"},"content":"* Choose the shortest distance from the bunch (ex. A-B is the shortest)"},{"lineNumber":301,"author":{"gitID":"meerakanani10"},"content":"* Add B to the list of addresses for the optimized route"},{"lineNumber":302,"author":{"gitID":"meerakanani10"},"content":"* Now repeat using B as the starting point and calculating the distance to all remaining destinations (omitting A)"},{"lineNumber":303,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":304,"author":{"gitID":"meerakanani10"},"content":"The optimized route will the be fed into a mapping function to display the route and get the directions for the driver."},{"lineNumber":305,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":306,"author":{"gitID":"meerakanani10"},"content":"// end::optimize[]"},{"lineNumber":307,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":308,"author":{"gitID":"meerakanani10"},"content":"// tag::sort[]"},{"lineNumber":309,"author":{"gitID":"meerakanani10"},"content":"\u003d\u003d\u003d\u003d Sorting addresses"},{"lineNumber":310,"author":{"gitID":"meerakanani10"},"content":"Once the distances have been found for all combinations of addresses on that filtered day they get stored in a Map with key: \"String address1_address2\" and"},{"lineNumber":311,"author":{"gitID":"meerakanani10"},"content":"value: \"Double distance (in km)\". This hashmap gets sorted in order of distances and any irrelevant or duplicate calculations are removed. For example if the distance from"},{"lineNumber":312,"author":{"gitID":"meerakanani10"},"content":"A to B is stored and B to A is stored, the second stored duplicate will be removed"},{"lineNumber":313,"author":{"gitID":"meerakanani10"},"content":"This sorted Hashmap now contains the key with the orign and destination address as well as the distance between the two. The sortByComparator function is"},{"lineNumber":314,"author":{"gitID":"meerakanani10"},"content":"constantly used to make sure the addresses are sorted by distances as the distances are being calculated. It is important that the distances are not only"},{"lineNumber":315,"author":{"gitID":"meerakanani10"},"content":"sorted by distance but also in an optimal route. If the shortest distance is from A to B the next part of the route has to be starting from B. Therefore,"},{"lineNumber":316,"author":{"gitID":"meerakanani10"},"content":"the distances are measured recursively from the new starting point, sorted by distance and then added to the final route."},{"lineNumber":317,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":318,"author":{"gitID":"meerakanani10"},"content":"// end::sort[]"},{"lineNumber":319,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":320,"author":{"gitID":"ngshikang"},"content":"// tag::loginFeature[]"},{"lineNumber":321,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":322,"author":{"gitID":"ngshikang"},"content":"\u003d\u003d\u003d Login feature"},{"lineNumber":323,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":324,"author":{"gitID":"-"},"content":""},{"lineNumber":325,"author":{"gitID":"ngshikang"},"content":"The login feature is facilitated by a `UserPassStorage` that stores all `UserPass` (username and password pair of Strings) created before in the application."},{"lineNumber":326,"author":{"gitID":"ngshikang"},"content":"Each time a user attempts a login, a `UserPass` is created based on their inputs for username and password, and verified against the `UserPassStorage`."},{"lineNumber":327,"author":{"gitID":"ngshikang"},"content":"Upon successful verification, the user will be brought to a user-customised version of the application."},{"lineNumber":328,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":329,"author":{"gitID":"ngshikang"},"content":"The following sequence diagram shows how the checkLoginDetails method works:"},{"lineNumber":330,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":331,"author":{"gitID":"ngshikang"},"content":"image::LoginDetails.png[width\u003d\"800\"]"},{"lineNumber":332,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":333,"author":{"gitID":"ngshikang"},"content":"The `login` feature thus has limited interactions with the other components of the application after successful verification."},{"lineNumber":334,"author":{"gitID":"ngshikang"},"content":"This, however, may change in v2.0 when encryption of the Pigeons address book is built in and integrated with the profile created by the `login` component."},{"lineNumber":335,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":336,"author":{"gitID":"ngshikang"},"content":"// end::loginFeature[]"},{"lineNumber":337,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":338,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":339,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":340,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":343,"author":{"gitID":"-"},"content":""},{"lineNumber":344,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":345,"author":{"gitID":"-"},"content":""},{"lineNumber":346,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":347,"author":{"gitID":"-"},"content":""},{"lineNumber":348,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":349,"author":{"gitID":"-"},"content":""},{"lineNumber":350,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":351,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":352,"author":{"gitID":"-"},"content":"----"},{"lineNumber":353,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":354,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":355,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":356,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":357,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":358,"author":{"gitID":"-"},"content":"}"},{"lineNumber":359,"author":{"gitID":"-"},"content":"----"},{"lineNumber":360,"author":{"gitID":"-"},"content":""},{"lineNumber":361,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":362,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":363,"author":{"gitID":"-"},"content":"----"},{"lineNumber":364,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":365,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":366,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":367,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":368,"author":{"gitID":"-"},"content":""},{"lineNumber":369,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":370,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":371,"author":{"gitID":"-"},"content":"}"},{"lineNumber":372,"author":{"gitID":"-"},"content":""},{"lineNumber":373,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":374,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":375,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":376,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":377,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":378,"author":{"gitID":"-"},"content":"}"},{"lineNumber":379,"author":{"gitID":"-"},"content":"----"},{"lineNumber":380,"author":{"gitID":"-"},"content":""},{"lineNumber":381,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":382,"author":{"gitID":"-"},"content":""},{"lineNumber":383,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":384,"author":{"gitID":"-"},"content":""},{"lineNumber":385,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":386,"author":{"gitID":"-"},"content":""},{"lineNumber":387,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."},{"lineNumber":388,"author":{"gitID":"-"},"content":""},{"lineNumber":389,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":390,"author":{"gitID":"-"},"content":""},{"lineNumber":391,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":392,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":393,"author":{"gitID":"-"},"content":""},{"lineNumber":394,"author":{"gitID":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":395,"author":{"gitID":"-"},"content":""},{"lineNumber":396,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."},{"lineNumber":397,"author":{"gitID":"-"},"content":""},{"lineNumber":398,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":399,"author":{"gitID":"-"},"content":""},{"lineNumber":400,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":401,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":402,"author":{"gitID":"-"},"content":""},{"lineNumber":403,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":404,"author":{"gitID":"-"},"content":""},{"lineNumber":405,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":406,"author":{"gitID":"-"},"content":""},{"lineNumber":407,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."},{"lineNumber":408,"author":{"gitID":"-"},"content":""},{"lineNumber":409,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":410,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":411,"author":{"gitID":"-"},"content":""},{"lineNumber":412,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":413,"author":{"gitID":"-"},"content":""},{"lineNumber":414,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":415,"author":{"gitID":"-"},"content":""},{"lineNumber":416,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":417,"author":{"gitID":"-"},"content":""},{"lineNumber":418,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":419,"author":{"gitID":"-"},"content":""},{"lineNumber":420,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":421,"author":{"gitID":"-"},"content":""},{"lineNumber":422,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":423,"author":{"gitID":"-"},"content":""},{"lineNumber":424,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":425,"author":{"gitID":"-"},"content":""},{"lineNumber":426,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":427,"author":{"gitID":"-"},"content":""},{"lineNumber":428,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":429,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":430,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":431,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":432,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":433,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":434,"author":{"gitID":"-"},"content":""},{"lineNumber":435,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":436,"author":{"gitID":"-"},"content":""},{"lineNumber":437,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":438,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":439,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":440,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":441,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":442,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":443,"author":{"gitID":"-"},"content":""},{"lineNumber":444,"author":{"gitID":"-"},"content":""},{"lineNumber":445,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":446,"author":{"gitID":"-"},"content":""},{"lineNumber":447,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the address book (`add`, `clear`, `edit`)."},{"lineNumber":448,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":449,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":450,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":451,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":452,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."},{"lineNumber":453,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":454,"author":{"gitID":"-"},"content":""},{"lineNumber":455,"author":{"gitID":"-"},"content":""},{"lineNumber":456,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":457,"author":{"gitID":"-"},"content":""},{"lineNumber":458,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":459,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":460,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":461,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":462,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":463,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":464,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":465,"author":{"gitID":"-"},"content":""},{"lineNumber":466,"author":{"gitID":"mattbuot"},"content":"// tag::autocompletion[]"},{"lineNumber":467,"author":{"gitID":"mattbuot"},"content":"\u003d\u003d\u003d Autocompletion feature"},{"lineNumber":468,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":469,"author":{"gitID":"mattbuot"},"content":"We use an `Autocompleter` class which stores the list of `Command` and all the different fields (`Name`, `Address`, etc) created in the `LogicManager`."},{"lineNumber":470,"author":{"gitID":"mattbuot"},"content":"The `Autocompleter` can complete:"},{"lineNumber":471,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":472,"author":{"gitID":"mattbuot"},"content":"* a command word, if it\u0027s the first of a query"},{"lineNumber":473,"author":{"gitID":"mattbuot"},"content":"* an option, starting by \"n/\" for example"},{"lineNumber":474,"author":{"gitID":"mattbuot"},"content":"* a name, if the current query doesn\u0027t match the first two cases: if we only have \"John Doe\" in the `AddressBook` we can complete the query by either \"John\" or \"Doe\" (this is useful to complete the `FindCommand`)."},{"lineNumber":475,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":476,"author":{"gitID":"mattbuot"},"content":"After having chosen between one this three cases, we generate a set of all possible suffixes that can be append to the current query. And from this set, we extract the longest common prefix which is the returned `String` of `Autocompleter.autocomplete()`. +"},{"lineNumber":477,"author":{"gitID":"mattbuot"},"content":"For example : if we want to complete the query `find J` and we have two persons in the address book called `John` and `Jonathan`, the set of possible suffixes will be {`ohn`, `onathan`} and the longest common prefix is `o`."},{"lineNumber":478,"author":{"gitID":"mattbuot"},"content":"So the completed query will be `find Jo`."},{"lineNumber":479,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":480,"author":{"gitID":"mattbuot"},"content":"This class is used in `CommandBox` which sends the content of the command line and then append the result of the autocomplete operation."},{"lineNumber":481,"author":{"gitID":"mattbuot"},"content":"// end::autocompletion[]"},{"lineNumber":482,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":483,"author":{"gitID":"mattbuot"},"content":"//tag::mailer[]"},{"lineNumber":484,"author":{"gitID":"mattbuot"},"content":"\u003d\u003d\u003d Mailer feature"},{"lineNumber":485,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":486,"author":{"gitID":"mattbuot"},"content":"We use an abstract `Mailer` class which provide a method that sends an email to a list of `Person`"},{"lineNumber":487,"author":{"gitID":"mattbuot"},"content":"and another which sends an itinerary to the driver. +"},{"lineNumber":488,"author":{"gitID":"mattbuot"},"content":"This class uses the JavaMail API to send emails from the address : pigeonscs2103@gmail.com. +"},{"lineNumber":489,"author":{"gitID":"mattbuot"},"content":"We also created a new `EmailCommand` which directly uses the `Mailer` class in its redefinition of `super.execute()`."},{"lineNumber":490,"author":{"gitID":"mattbuot"},"content":"The information related to the itinerary are collected by the `EmailCommand` which creates an instance of `RouteOptimization`."},{"lineNumber":491,"author":{"gitID":"mattbuot"},"content":"//end::mailer[]"},{"lineNumber":492,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":493,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":494,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Proposed] Data Encryption"},{"lineNumber":495,"author":{"gitID":"-"},"content":""},{"lineNumber":496,"author":{"gitID":"-"},"content":"_{Explain here how the data encryption feature will be implemented}_"},{"lineNumber":497,"author":{"gitID":"-"},"content":""},{"lineNumber":498,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":499,"author":{"gitID":"-"},"content":""},{"lineNumber":500,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":501,"author":{"gitID":"-"},"content":""},{"lineNumber":502,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":503,"author":{"gitID":"-"},"content":""},{"lineNumber":504,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":505,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":506,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":507,"author":{"gitID":"-"},"content":""},{"lineNumber":508,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":509,"author":{"gitID":"-"},"content":""},{"lineNumber":510,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":511,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":512,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":513,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":514,"author":{"gitID":"-"},"content":""},{"lineNumber":515,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":516,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":517,"author":{"gitID":"-"},"content":""},{"lineNumber":518,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":519,"author":{"gitID":"-"},"content":""},{"lineNumber":520,"author":{"gitID":"-"},"content":"// tag::distance[]"},{"lineNumber":521,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Retrieving distance from a person address to another person address"},{"lineNumber":522,"author":{"gitID":"-"},"content":""},{"lineNumber":523,"author":{"gitID":"-"},"content":"Like other commands, distance command uses the `AddressBookParser` class to parse the user command. The result of the command execution is encapsulated as a CommandResult object which is passed back to the Ui."},{"lineNumber":524,"author":{"gitID":"-"},"content":""},{"lineNumber":525,"author":{"gitID":"-"},"content":"The distance command execution won\u0027t affect the `Model` or raise any events since it only return the distance result."},{"lineNumber":526,"author":{"gitID":"-"},"content":""},{"lineNumber":527,"author":{"gitID":"-"},"content":"However, the result is depend on the `GetDistance` class which will using the `Google Map API` to calculate the distance from the HQ to the person address."},{"lineNumber":528,"author":{"gitID":"-"},"content":""},{"lineNumber":529,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the `distance` command works:"},{"lineNumber":530,"author":{"gitID":"-"},"content":""},{"lineNumber":531,"author":{"gitID":"-"},"content":"image::getDistanceOfPersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":532,"author":{"gitID":"-"},"content":""},{"lineNumber":533,"author":{"gitID":"-"},"content":"// end::distance[]"},{"lineNumber":534,"author":{"gitID":"-"},"content":""},{"lineNumber":535,"author":{"gitID":"-"},"content":"// tag::script[]"},{"lineNumber":536,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Virtual assistant (script based reader)"},{"lineNumber":537,"author":{"gitID":"-"},"content":""},{"lineNumber":538,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Running scripts:"},{"lineNumber":539,"author":{"gitID":"-"},"content":""},{"lineNumber":540,"author":{"gitID":"-"},"content":"If the user operating system is either `Window` or `Mac OS` then every time, right after logging in, the system will run a script says \"Welcome user\". Moreover, whenever the user click on"},{"lineNumber":541,"author":{"gitID":"-"},"content":"a person card or use `Select command` to prefer to a person card, the system will read out \"This is + `the person name` \"."},{"lineNumber":542,"author":{"gitID":"-"},"content":""},{"lineNumber":543,"author":{"gitID":"-"},"content":"We use `Runtime.java` in `java.lang` package to `execute` the scripts via the corresponding executor (`osascript` for `Mac` and `wscript` for `Window`."},{"lineNumber":544,"author":{"gitID":"-"},"content":""},{"lineNumber":545,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Creating scripts"},{"lineNumber":546,"author":{"gitID":"-"},"content":""},{"lineNumber":547,"author":{"gitID":"-"},"content":"* For Window:"},{"lineNumber":548,"author":{"gitID":"-"},"content":"** First, the program will create folder `script` if it is not existed."},{"lineNumber":549,"author":{"gitID":"-"},"content":"** Then in the `script` folder, the program will look for the corresponding `vbs` script. If the script is not existed,"},{"lineNumber":550,"author":{"gitID":"-"},"content":"*** Our system will use `File.java` to automatically create a `text` file and fill in the needed info for the `vbs` script file."},{"lineNumber":551,"author":{"gitID":"-"},"content":"*** After that, we will convert the `text` file into the `vbs` file using `File.java`."},{"lineNumber":552,"author":{"gitID":"-"},"content":""},{"lineNumber":553,"author":{"gitID":"-"},"content":"* For Mac:"},{"lineNumber":554,"author":{"gitID":"-"},"content":"** The program will not need to create any folder or script file but rather initialize a `String` array with"},{"lineNumber":555,"author":{"gitID":"-"},"content":"all the contents of the script."},{"lineNumber":556,"author":{"gitID":"-"},"content":""},{"lineNumber":557,"author":{"gitID":"-"},"content":"image::RunScriptAD.png[width\u003d\"800\"]"},{"lineNumber":558,"author":{"gitID":"-"},"content":"// end::script[]"},{"lineNumber":559,"author":{"gitID":"-"},"content":""},{"lineNumber":560,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":561,"author":{"gitID":"-"},"content":""},{"lineNumber":562,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":563,"author":{"gitID":"-"},"content":""},{"lineNumber":564,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":565,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":566,"author":{"gitID":"-"},"content":""},{"lineNumber":567,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":568,"author":{"gitID":"-"},"content":""},{"lineNumber":569,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":570,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":571,"author":{"gitID":"-"},"content":""},{"lineNumber":572,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":573,"author":{"gitID":"-"},"content":""},{"lineNumber":574,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":575,"author":{"gitID":"-"},"content":""},{"lineNumber":576,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":577,"author":{"gitID":"-"},"content":""},{"lineNumber":578,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":579,"author":{"gitID":"-"},"content":""},{"lineNumber":580,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":581,"author":{"gitID":"-"},"content":""},{"lineNumber":582,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":583,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":584,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":585,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":586,"author":{"gitID":"-"},"content":""},{"lineNumber":587,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":588,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":589,"author":{"gitID":"-"},"content":""},{"lineNumber":590,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":591,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":592,"author":{"gitID":"-"},"content":""},{"lineNumber":593,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":594,"author":{"gitID":"-"},"content":""},{"lineNumber":595,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":596,"author":{"gitID":"-"},"content":""},{"lineNumber":597,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":598,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":599,"author":{"gitID":"-"},"content":""},{"lineNumber":600,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":601,"author":{"gitID":"-"},"content":""},{"lineNumber":602,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":603,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":604,"author":{"gitID":"-"},"content":""},{"lineNumber":605,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":606,"author":{"gitID":"-"},"content":""},{"lineNumber":607,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":608,"author":{"gitID":"-"},"content":""},{"lineNumber":609,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":610,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":611,"author":{"gitID":"-"},"content":""},{"lineNumber":612,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":613,"author":{"gitID":"-"},"content":""},{"lineNumber":614,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":615,"author":{"gitID":"-"},"content":""},{"lineNumber":616,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":617,"author":{"gitID":"-"},"content":""},{"lineNumber":618,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":619,"author":{"gitID":"-"},"content":""},{"lineNumber":620,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":621,"author":{"gitID":"-"},"content":""},{"lineNumber":622,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":623,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":624,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":625,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":626,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":627,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":628,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":629,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":630,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":631,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":632,"author":{"gitID":"-"},"content":""},{"lineNumber":633,"author":{"gitID":"-"},"content":""},{"lineNumber":634,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":635,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":636,"author":{"gitID":"-"},"content":""},{"lineNumber":637,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":638,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":639,"author":{"gitID":"-"},"content":""},{"lineNumber":640,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":641,"author":{"gitID":"-"},"content":""},{"lineNumber":642,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":643,"author":{"gitID":"-"},"content":""},{"lineNumber":644,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":645,"author":{"gitID":"-"},"content":""},{"lineNumber":646,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":647,"author":{"gitID":"-"},"content":""},{"lineNumber":648,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":649,"author":{"gitID":"-"},"content":""},{"lineNumber":650,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":651,"author":{"gitID":"-"},"content":""},{"lineNumber":652,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":653,"author":{"gitID":"-"},"content":""},{"lineNumber":654,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":655,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":656,"author":{"gitID":"-"},"content":""},{"lineNumber":657,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":658,"author":{"gitID":"-"},"content":""},{"lineNumber":659,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":660,"author":{"gitID":"-"},"content":""},{"lineNumber":661,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":662,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":663,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":664,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":665,"author":{"gitID":"-"},"content":""},{"lineNumber":666,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":667,"author":{"gitID":"-"},"content":""},{"lineNumber":668,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":669,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":670,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":671,"author":{"gitID":"-"},"content":""},{"lineNumber":672,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":673,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":674,"author":{"gitID":"-"},"content":"\u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":675,"author":{"gitID":"-"},"content":""},{"lineNumber":676,"author":{"gitID":"-"},"content":"Suggested path for new programmers:"},{"lineNumber":677,"author":{"gitID":"-"},"content":""},{"lineNumber":678,"author":{"gitID":"-"},"content":"1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":679,"author":{"gitID":"-"},"content":""},{"lineNumber":680,"author":{"gitID":"-"},"content":"2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":681,"author":{"gitID":"-"},"content":""},{"lineNumber":682,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-EachComponent]]"},{"lineNumber":683,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Improving each component"},{"lineNumber":684,"author":{"gitID":"-"},"content":""},{"lineNumber":685,"author":{"gitID":"-"},"content":"Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."},{"lineNumber":686,"author":{"gitID":"-"},"content":""},{"lineNumber":687,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":688,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Logic` component"},{"lineNumber":689,"author":{"gitID":"-"},"content":""},{"lineNumber":690,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."},{"lineNumber":691,"author":{"gitID":"-"},"content":""},{"lineNumber":692,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":693,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."},{"lineNumber":694,"author":{"gitID":"-"},"content":""},{"lineNumber":695,"author":{"gitID":"-"},"content":". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."},{"lineNumber":696,"author":{"gitID":"-"},"content":"+"},{"lineNumber":697,"author":{"gitID":"-"},"content":"****"},{"lineNumber":698,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":699,"author":{"gitID":"-"},"content":"** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."},{"lineNumber":700,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."},{"lineNumber":701,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":702,"author":{"gitID":"-"},"content":"** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."},{"lineNumber":703,"author":{"gitID":"-"},"content":"** Add new tests for each of the aliases that you have added."},{"lineNumber":704,"author":{"gitID":"-"},"content":"** Update the user guide to document the new aliases."},{"lineNumber":705,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."},{"lineNumber":706,"author":{"gitID":"-"},"content":"****"},{"lineNumber":707,"author":{"gitID":"-"},"content":""},{"lineNumber":708,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":709,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Model` component"},{"lineNumber":710,"author":{"gitID":"-"},"content":""},{"lineNumber":711,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."},{"lineNumber":712,"author":{"gitID":"-"},"content":""},{"lineNumber":713,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":714,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."},{"lineNumber":715,"author":{"gitID":"-"},"content":""},{"lineNumber":716,"author":{"gitID":"-"},"content":". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."},{"lineNumber":717,"author":{"gitID":"-"},"content":"+"},{"lineNumber":718,"author":{"gitID":"-"},"content":"****"},{"lineNumber":719,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":720,"author":{"gitID":"-"},"content":"** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."},{"lineNumber":721,"author":{"gitID":"-"},"content":"** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"},{"lineNumber":722,"author":{"gitID":"-"},"content":"**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."},{"lineNumber":723,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":724,"author":{"gitID":"-"},"content":"** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."},{"lineNumber":725,"author":{"gitID":"-"},"content":"** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."},{"lineNumber":726,"author":{"gitID":"-"},"content":"** Add new tests for each of the new public methods that you have added."},{"lineNumber":727,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."},{"lineNumber":728,"author":{"gitID":"-"},"content":"*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."},{"lineNumber":729,"author":{"gitID":"-"},"content":"*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."},{"lineNumber":730,"author":{"gitID":"-"},"content":"****"},{"lineNumber":731,"author":{"gitID":"-"},"content":""},{"lineNumber":732,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":733,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Ui` component"},{"lineNumber":734,"author":{"gitID":"-"},"content":""},{"lineNumber":735,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."},{"lineNumber":736,"author":{"gitID":"-"},"content":""},{"lineNumber":737,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":738,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."},{"lineNumber":739,"author":{"gitID":"-"},"content":""},{"lineNumber":740,"author":{"gitID":"-"},"content":". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."},{"lineNumber":741,"author":{"gitID":"-"},"content":"+"},{"lineNumber":742,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":743,"author":{"gitID":"-"},"content":"+"},{"lineNumber":744,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-before.png[width\u003d\"300\"]"},{"lineNumber":745,"author":{"gitID":"-"},"content":"+"},{"lineNumber":746,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":747,"author":{"gitID":"-"},"content":"+"},{"lineNumber":748,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-after.png[width\u003d\"300\"]"},{"lineNumber":749,"author":{"gitID":"-"},"content":"+"},{"lineNumber":750,"author":{"gitID":"-"},"content":"****"},{"lineNumber":751,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":752,"author":{"gitID":"-"},"content":"** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."},{"lineNumber":753,"author":{"gitID":"-"},"content":"** Use the .css attribute `-fx-background-color` to add a color."},{"lineNumber":754,"author":{"gitID":"-"},"content":"** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."},{"lineNumber":755,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":756,"author":{"gitID":"-"},"content":"** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."},{"lineNumber":757,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."},{"lineNumber":758,"author":{"gitID":"-"},"content":"*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."},{"lineNumber":759,"author":{"gitID":"-"},"content":"****"},{"lineNumber":760,"author":{"gitID":"-"},"content":""},{"lineNumber":761,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."},{"lineNumber":762,"author":{"gitID":"-"},"content":"+"},{"lineNumber":763,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":764,"author":{"gitID":"-"},"content":"+"},{"lineNumber":765,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-before.png[width\u003d\"200\"]"},{"lineNumber":766,"author":{"gitID":"-"},"content":"+"},{"lineNumber":767,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":768,"author":{"gitID":"-"},"content":"+"},{"lineNumber":769,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-after.png[width\u003d\"200\"]"},{"lineNumber":770,"author":{"gitID":"-"},"content":"+"},{"lineNumber":771,"author":{"gitID":"-"},"content":"****"},{"lineNumber":772,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":773,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."},{"lineNumber":774,"author":{"gitID":"-"},"content":"** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."},{"lineNumber":775,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":776,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."},{"lineNumber":777,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."},{"lineNumber":778,"author":{"gitID":"-"},"content":"** You can write two different kinds of tests to ensure that the functionality works:"},{"lineNumber":779,"author":{"gitID":"-"},"content":"*** The unit tests for `ResultDisplay` can be modified to include verification of the color."},{"lineNumber":780,"author":{"gitID":"-"},"content":"*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."},{"lineNumber":781,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."},{"lineNumber":782,"author":{"gitID":"-"},"content":"*** Do read the commits one at a time if you feel overwhelmed."},{"lineNumber":783,"author":{"gitID":"-"},"content":"****"},{"lineNumber":784,"author":{"gitID":"-"},"content":""},{"lineNumber":785,"author":{"gitID":"-"},"content":". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."},{"lineNumber":786,"author":{"gitID":"-"},"content":"+"},{"lineNumber":787,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":788,"author":{"gitID":"-"},"content":"+"},{"lineNumber":789,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-before.png[width\u003d\"500\"]"},{"lineNumber":790,"author":{"gitID":"-"},"content":"+"},{"lineNumber":791,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":792,"author":{"gitID":"-"},"content":"+"},{"lineNumber":793,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-after.png[width\u003d\"500\"]"},{"lineNumber":794,"author":{"gitID":"-"},"content":"+"},{"lineNumber":795,"author":{"gitID":"-"},"content":"****"},{"lineNumber":796,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":797,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"},{"lineNumber":798,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."},{"lineNumber":799,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":800,"author":{"gitID":"-"},"content":"** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."},{"lineNumber":801,"author":{"gitID":"-"},"content":"** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."},{"lineNumber":802,"author":{"gitID":"-"},"content":"** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."},{"lineNumber":803,"author":{"gitID":"-"},"content":"** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."},{"lineNumber":804,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."},{"lineNumber":805,"author":{"gitID":"-"},"content":"****"},{"lineNumber":806,"author":{"gitID":"-"},"content":""},{"lineNumber":807,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":808,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Storage` component"},{"lineNumber":809,"author":{"gitID":"-"},"content":""},{"lineNumber":810,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."},{"lineNumber":811,"author":{"gitID":"-"},"content":""},{"lineNumber":812,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":813,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."},{"lineNumber":814,"author":{"gitID":"-"},"content":""},{"lineNumber":815,"author":{"gitID":"-"},"content":". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."},{"lineNumber":816,"author":{"gitID":"-"},"content":"+"},{"lineNumber":817,"author":{"gitID":"-"},"content":"****"},{"lineNumber":818,"author":{"gitID":"-"},"content":"* Hint"},{"lineNumber":819,"author":{"gitID":"-"},"content":"** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."},{"lineNumber":820,"author":{"gitID":"-"},"content":"** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."},{"lineNumber":821,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":822,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."},{"lineNumber":823,"author":{"gitID":"-"},"content":"****"},{"lineNumber":824,"author":{"gitID":"-"},"content":""},{"lineNumber":825,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":826,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":827,"author":{"gitID":"-"},"content":""},{"lineNumber":828,"author":{"gitID":"-"},"content":"By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":829,"author":{"gitID":"-"},"content":""},{"lineNumber":830,"author":{"gitID":"-"},"content":"*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":831,"author":{"gitID":"-"},"content":""},{"lineNumber":832,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Description"},{"lineNumber":833,"author":{"gitID":"-"},"content":"Edits the remark for a person specified in the `INDEX`. +"},{"lineNumber":834,"author":{"gitID":"-"},"content":"Format: `remark INDEX r/[REMARK]`"},{"lineNumber":835,"author":{"gitID":"-"},"content":""},{"lineNumber":836,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":837,"author":{"gitID":"-"},"content":""},{"lineNumber":838,"author":{"gitID":"-"},"content":"* `remark 1 r/Likes to drink coffee.` +"},{"lineNumber":839,"author":{"gitID":"-"},"content":"Edits the remark for the first person to `Likes to drink coffee.`"},{"lineNumber":840,"author":{"gitID":"-"},"content":"* `remark 1 r/` +"},{"lineNumber":841,"author":{"gitID":"-"},"content":"Removes the remark for the first person."},{"lineNumber":842,"author":{"gitID":"-"},"content":""},{"lineNumber":843,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":844,"author":{"gitID":"-"},"content":""},{"lineNumber":845,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"},{"lineNumber":846,"author":{"gitID":"-"},"content":"Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":847,"author":{"gitID":"-"},"content":""},{"lineNumber":848,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":849,"author":{"gitID":"-"},"content":""},{"lineNumber":850,"author":{"gitID":"-"},"content":". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."},{"lineNumber":851,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."},{"lineNumber":852,"author":{"gitID":"-"},"content":""},{"lineNumber":853,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":854,"author":{"gitID":"-"},"content":""},{"lineNumber":855,"author":{"gitID":"-"},"content":". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":856,"author":{"gitID":"-"},"content":". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."},{"lineNumber":857,"author":{"gitID":"-"},"content":""},{"lineNumber":858,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"},{"lineNumber":859,"author":{"gitID":"-"},"content":"Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"},{"lineNumber":860,"author":{"gitID":"-"},"content":""},{"lineNumber":861,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":862,"author":{"gitID":"-"},"content":""},{"lineNumber":863,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."},{"lineNumber":864,"author":{"gitID":"-"},"content":". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":865,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."},{"lineNumber":866,"author":{"gitID":"-"},"content":""},{"lineNumber":867,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":868,"author":{"gitID":"-"},"content":""},{"lineNumber":869,"author":{"gitID":"-"},"content":". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."},{"lineNumber":870,"author":{"gitID":"-"},"content":". Add `RemarkCommandParserTest` that tests different boundary values"},{"lineNumber":871,"author":{"gitID":"-"},"content":"for `RemarkCommandParser`."},{"lineNumber":872,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."},{"lineNumber":873,"author":{"gitID":"-"},"content":""},{"lineNumber":874,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"},{"lineNumber":875,"author":{"gitID":"-"},"content":"Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."},{"lineNumber":876,"author":{"gitID":"-"},"content":""},{"lineNumber":877,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":878,"author":{"gitID":"-"},"content":""},{"lineNumber":879,"author":{"gitID":"-"},"content":". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."},{"lineNumber":880,"author":{"gitID":"-"},"content":". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."},{"lineNumber":881,"author":{"gitID":"-"},"content":""},{"lineNumber":882,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":883,"author":{"gitID":"-"},"content":""},{"lineNumber":884,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."},{"lineNumber":885,"author":{"gitID":"-"},"content":""},{"lineNumber":886,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"},{"lineNumber":887,"author":{"gitID":"-"},"content":"We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."},{"lineNumber":888,"author":{"gitID":"-"},"content":""},{"lineNumber":889,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":890,"author":{"gitID":"-"},"content":""},{"lineNumber":891,"author":{"gitID":"-"},"content":". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."},{"lineNumber":892,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."},{"lineNumber":893,"author":{"gitID":"-"},"content":""},{"lineNumber":894,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":895,"author":{"gitID":"-"},"content":""},{"lineNumber":896,"author":{"gitID":"-"},"content":". Add test for `Remark`, to test the `Remark#equals()` method."},{"lineNumber":897,"author":{"gitID":"-"},"content":""},{"lineNumber":898,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"},{"lineNumber":899,"author":{"gitID":"-"},"content":"Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":900,"author":{"gitID":"-"},"content":""},{"lineNumber":901,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":902,"author":{"gitID":"-"},"content":""},{"lineNumber":903,"author":{"gitID":"-"},"content":". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":904,"author":{"gitID":"-"},"content":". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."},{"lineNumber":905,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"},{"lineNumber":906,"author":{"gitID":"-"},"content":""},{"lineNumber":907,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"},{"lineNumber":908,"author":{"gitID":"-"},"content":"We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."},{"lineNumber":909,"author":{"gitID":"-"},"content":""},{"lineNumber":910,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":911,"author":{"gitID":"-"},"content":""},{"lineNumber":912,"author":{"gitID":"-"},"content":". Add a new Xml field for `Remark`."},{"lineNumber":913,"author":{"gitID":"-"},"content":""},{"lineNumber":914,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":915,"author":{"gitID":"-"},"content":""},{"lineNumber":916,"author":{"gitID":"-"},"content":". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":917,"author":{"gitID":"-"},"content":""},{"lineNumber":918,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"},{"lineNumber":919,"author":{"gitID":"-"},"content":"Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":920,"author":{"gitID":"-"},"content":""},{"lineNumber":921,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":922,"author":{"gitID":"-"},"content":""},{"lineNumber":923,"author":{"gitID":"-"},"content":". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."},{"lineNumber":924,"author":{"gitID":"-"},"content":". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."},{"lineNumber":925,"author":{"gitID":"-"},"content":""},{"lineNumber":926,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"},{"lineNumber":927,"author":{"gitID":"-"},"content":"Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":928,"author":{"gitID":"-"},"content":""},{"lineNumber":929,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":930,"author":{"gitID":"-"},"content":""},{"lineNumber":931,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."},{"lineNumber":932,"author":{"gitID":"-"},"content":""},{"lineNumber":933,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":934,"author":{"gitID":"-"},"content":""},{"lineNumber":935,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":936,"author":{"gitID":"-"},"content":""},{"lineNumber":937,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"},{"lineNumber":938,"author":{"gitID":"-"},"content":"We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":939,"author":{"gitID":"-"},"content":""},{"lineNumber":940,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":941,"author":{"gitID":"-"},"content":""},{"lineNumber":942,"author":{"gitID":"-"},"content":". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."},{"lineNumber":943,"author":{"gitID":"-"},"content":""},{"lineNumber":944,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":945,"author":{"gitID":"-"},"content":""},{"lineNumber":946,"author":{"gitID":"-"},"content":". Update `RemarkCommandTest` to test that the `execute()` logic works."},{"lineNumber":947,"author":{"gitID":"-"},"content":""},{"lineNumber":948,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Full Solution"},{"lineNumber":949,"author":{"gitID":"-"},"content":""},{"lineNumber":950,"author":{"gitID":"-"},"content":"See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."},{"lineNumber":951,"author":{"gitID":"-"},"content":""},{"lineNumber":952,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":953,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":954,"author":{"gitID":"-"},"content":""},{"lineNumber":955,"author":{"gitID":"ngshikang"},"content":"Delivery system for drivers with a database of deliveries and locations to map the optimal route in a handsfree offline system."},{"lineNumber":956,"author":{"gitID":"-"},"content":""},{"lineNumber":957,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":958,"author":{"gitID":"-"},"content":""},{"lineNumber":959,"author":{"gitID":"-"},"content":"* has a need to manage deliveries"},{"lineNumber":960,"author":{"gitID":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":961,"author":{"gitID":"-"},"content":"* requires audio cues while driving and using the program"},{"lineNumber":962,"author":{"gitID":"-"},"content":"* prefers typing over mouse input"},{"lineNumber":963,"author":{"gitID":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":964,"author":{"gitID":"ngshikang"},"content":"* visually-oriented so prefers to see maps instead of addresses"},{"lineNumber":965,"author":{"gitID":"ngshikang"},"content":"* may take on different user profiles for different users with different contact lists"},{"lineNumber":966,"author":{"gitID":"ngshikang"},"content":"* may require to add contacts on the go occasionally quickly"},{"lineNumber":967,"author":{"gitID":"-"},"content":"* may like to be able to communicate with addresses"},{"lineNumber":968,"author":{"gitID":"-"},"content":""},{"lineNumber":969,"author":{"gitID":"-"},"content":"*Value proposition*: manage deliveries faster than a typical GUI driven app while being accessible easily on the go and"},{"lineNumber":970,"author":{"gitID":"-"},"content":"maps out ideal routes for drivers"},{"lineNumber":971,"author":{"gitID":"-"},"content":""},{"lineNumber":972,"author":{"gitID":"-"},"content":""},{"lineNumber":973,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Feature contribution"},{"lineNumber":974,"author":{"gitID":"-"},"content":""},{"lineNumber":975,"author":{"gitID":"-"},"content":"*Shi Kang*"},{"lineNumber":976,"author":{"gitID":"-"},"content":""},{"lineNumber":977,"author":{"gitID":"ngshikang"},"content":"Minor: UI for overall application"},{"lineNumber":978,"author":{"gitID":"-"},"content":""},{"lineNumber":979,"author":{"gitID":"ngshikang"},"content":"Major: Login for each delivery driver to own a separate list of addresses in his customised address book"},{"lineNumber":980,"author":{"gitID":"-"},"content":""},{"lineNumber":981,"author":{"gitID":"-"},"content":"*Meera*"},{"lineNumber":982,"author":{"gitID":"-"},"content":""},{"lineNumber":983,"author":{"gitID":"-"},"content":"Minor: adding delivery date field"},{"lineNumber":984,"author":{"gitID":"-"},"content":""},{"lineNumber":985,"author":{"gitID":"-"},"content":"Major:  Route optimization for the deliveries on each date"},{"lineNumber":986,"author":{"gitID":"-"},"content":""},{"lineNumber":987,"author":{"gitID":"-"},"content":"*Matthieu*"},{"lineNumber":988,"author":{"gitID":"-"},"content":""},{"lineNumber":989,"author":{"gitID":"ngshikang"},"content":"Minor : simplifying the input"},{"lineNumber":990,"author":{"gitID":"-"},"content":""},{"lineNumber":991,"author":{"gitID":"-"},"content":"Major: Email updates/correspond with the users that are awaiting a delivery"},{"lineNumber":992,"author":{"gitID":"-"},"content":""},{"lineNumber":993,"author":{"gitID":"-"},"content":"*Minh*"},{"lineNumber":994,"author":{"gitID":"-"},"content":""},{"lineNumber":995,"author":{"gitID":"ngshikang"},"content":"Minor: Adding google maps and handsfree sound feature"},{"lineNumber":996,"author":{"gitID":"-"},"content":""},{"lineNumber":997,"author":{"gitID":"-"},"content":"Major: Mapping out the routes for delivery and displaying on google maps"},{"lineNumber":998,"author":{"gitID":"-"},"content":""},{"lineNumber":999,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1000,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":1001,"author":{"gitID":"-"},"content":""},{"lineNumber":1002,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":1003,"author":{"gitID":"-"},"content":""},{"lineNumber":1004,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":1005,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1006,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":1007,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":1008,"author":{"gitID":"-"},"content":"|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"},{"lineNumber":1009,"author":{"gitID":"-"},"content":""},{"lineNumber":1010,"author":{"gitID":"ngshikang"},"content":"|`* * *` |user |add a new person | add entry into my address book"},{"lineNumber":1011,"author":{"gitID":"-"},"content":""},{"lineNumber":1012,"author":{"gitID":"-"},"content":"|`* * *` |user |delete a person |remove entries that I no longer need"},{"lineNumber":1013,"author":{"gitID":"-"},"content":""},{"lineNumber":1014,"author":{"gitID":"-"},"content":"|`* * *` |user |find a person by name |locate details of persons without having to go through the entire list"},{"lineNumber":1015,"author":{"gitID":"-"},"content":""},{"lineNumber":1016,"author":{"gitID":"ngshikang"},"content":"|`* * *` |user |*have a separate address book for different user profiles* |minimize chance of someone else seeing my address book by accident"},{"lineNumber":1017,"author":{"gitID":"-"},"content":""},{"lineNumber":1018,"author":{"gitID":"mattbuot"},"content":"|`* * *` |user with many persons in the address book |sort persons by name, address |locate a person easily"},{"lineNumber":1019,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":1020,"author":{"gitID":"mattbuot"},"content":"|`* * *` |user with many deliveries in the address book |sort deliveries by date, priority |make my planning"},{"lineNumber":1021,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":1022,"author":{"gitID":"mattbuot"},"content":"|`* * *` |driver |quickly indicate that I have completed a delivery |always know which are the remaining parcels that I have to deliver"},{"lineNumber":1023,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":1024,"author":{"gitID":"ngshikang"},"content":"|`* * *` |driver |*have a map view of the route to my next customer* | easily figure out the way I should take"},{"lineNumber":1025,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":1026,"author":{"gitID":"ngshikang"},"content":"|`* * *` |driver |*be able to communicate with the customer* |resolve any delivery issues I face"},{"lineNumber":1027,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":1028,"author":{"gitID":"mattbuot"},"content":"|`* * *` |customer |receive updates about my parcel |know when it\u0027s gonna come"},{"lineNumber":1029,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":1030,"author":{"gitID":"ngshikang"},"content":"|`* * *` |driver |*be able to find the optimal route to the next destination easily* |focus on just driving to the next location"},{"lineNumber":1031,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":1032,"author":{"gitID":"ngshikang"},"content":"|`* *` |driver| schedule my whole day by ordering the deliveries I want to do |avoid losing time during the day"},{"lineNumber":1033,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":1034,"author":{"gitID":"ngshikang"},"content":"|`* *` |driver |have users automatically downloaded from a central database |avoid having to add users one by one myself"},{"lineNumber":1035,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":1036,"author":{"gitID":"ngshikang"},"content":"|`* *` |driver |get traffic updates |follow my schedule"},{"lineNumber":1037,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":1038,"author":{"gitID":"ngshikang"},"content":"|`*` |customer |real-time geo-locate my delivery | to have a better idea of when my delivery will arrive"},{"lineNumber":1039,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1040,"author":{"gitID":"-"},"content":""},{"lineNumber":1041,"author":{"gitID":"ngshikang"},"content":"_{User stories are added/updated subsequently through issues in GitHub as the project develops through iterative feedback}_"},{"lineNumber":1042,"author":{"gitID":"-"},"content":""},{"lineNumber":1043,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1044,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1045,"author":{"gitID":"-"},"content":""},{"lineNumber":1046,"author":{"gitID":"-"},"content":"(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":1047,"author":{"gitID":"-"},"content":""},{"lineNumber":1048,"author":{"gitID":"mattbuot"},"content":"// tag::usecases[]"},{"lineNumber":1049,"author":{"gitID":"mattbuot"},"content":"[discrete]"},{"lineNumber":1050,"author":{"gitID":"mattbuot"},"content":"\u003d\u003d\u003d Use case: Deliver a package to a specific customer"},{"lineNumber":1051,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":1052,"author":{"gitID":"mattbuot"},"content":"*MSS*"},{"lineNumber":1053,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":1054,"author":{"gitID":"mattbuot"},"content":"1. User enters the package reference"},{"lineNumber":1055,"author":{"gitID":"mattbuot"},"content":"2. Address book outputs the customer\u0027s information (availabilities, address)"},{"lineNumber":1056,"author":{"gitID":"mattbuot"},"content":"3. User clicks on the customer’s address"},{"lineNumber":1057,"author":{"gitID":"mattbuot"},"content":"4. Address book open the itinerary to the customer’s address on Google Maps"},{"lineNumber":1058,"author":{"gitID":"mattbuot"},"content":"5. User can drive to the customer’s location"},{"lineNumber":1059,"author":{"gitID":"mattbuot"},"content":"+"},{"lineNumber":1060,"author":{"gitID":"mattbuot"},"content":"Use case ends."},{"lineNumber":1061,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":1062,"author":{"gitID":"mattbuot"},"content":"*Extensions*"},{"lineNumber":1063,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":1064,"author":{"gitID":"mattbuot"},"content":"* 2a. The given package reference is invalid."},{"lineNumber":1065,"author":{"gitID":"mattbuot"},"content":"+"},{"lineNumber":1066,"author":{"gitID":"mattbuot"},"content":"[none]"},{"lineNumber":1067,"author":{"gitID":"mattbuot"},"content":"** 2a1. AddressBook shows an error message."},{"lineNumber":1068,"author":{"gitID":"mattbuot"},"content":"+"},{"lineNumber":1069,"author":{"gitID":"mattbuot"},"content":"Use case resumes at step 1."},{"lineNumber":1070,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":1071,"author":{"gitID":"mattbuot"},"content":"[discrete]"},{"lineNumber":1072,"author":{"gitID":"mattbuot"},"content":"\u003d\u003d\u003d Use case: Mapping the route for the day"},{"lineNumber":1073,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":1074,"author":{"gitID":"mattbuot"},"content":"*MSS*"},{"lineNumber":1075,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":1076,"author":{"gitID":"mattbuot"},"content":"1. User requests to list the database ordered by date of delivery"},{"lineNumber":1077,"author":{"gitID":"mattbuot"},"content":"2. Address book outputs the list of deliveries"},{"lineNumber":1078,"author":{"gitID":"mattbuot"},"content":"3. User selects all the addresses and runs the “map” command on the selected addresses"},{"lineNumber":1079,"author":{"gitID":"mattbuot"},"content":"4. Address book displays a mapped out route for the day with an ideal time to begin the route"},{"lineNumber":1080,"author":{"gitID":"mattbuot"},"content":"5. User can start the delivery"},{"lineNumber":1081,"author":{"gitID":"mattbuot"},"content":"+"},{"lineNumber":1082,"author":{"gitID":"mattbuot"},"content":"Use case ends."},{"lineNumber":1083,"author":{"gitID":"mattbuot"},"content":"// end::usecases[]"},{"lineNumber":1084,"author":{"gitID":"-"},"content":""},{"lineNumber":1085,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1086,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1087,"author":{"gitID":"-"},"content":""},{"lineNumber":1088,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1089,"author":{"gitID":"-"},"content":".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1090,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1091,"author":{"gitID":"ngshikang"},"content":".  Need to have access to the app while driving, needs to work offline and have internet access for any updates during the day"},{"lineNumber":1092,"author":{"gitID":"ngshikang"},"content":".  Driver needs to be trained in the tool so it should be user-friendly"},{"lineNumber":1093,"author":{"gitID":"-"},"content":""},{"lineNumber":1094,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1095,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1096,"author":{"gitID":"-"},"content":""},{"lineNumber":1097,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1098,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1099,"author":{"gitID":"-"},"content":""},{"lineNumber":1100,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":1101,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":1102,"author":{"gitID":"-"},"content":""},{"lineNumber":1103,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1104,"author":{"gitID":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":1105,"author":{"gitID":"ngshikang"},"content":"Below is a sample of how a product survey may be documented:"},{"lineNumber":1106,"author":{"gitID":"-"},"content":""},{"lineNumber":1107,"author":{"gitID":"ngshikang"},"content":"*Pigeons*"},{"lineNumber":1108,"author":{"gitID":"-"},"content":""},{"lineNumber":1109,"author":{"gitID":"-"},"content":"Author: ..."},{"lineNumber":1110,"author":{"gitID":"-"},"content":""},{"lineNumber":1111,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":1112,"author":{"gitID":"-"},"content":""},{"lineNumber":1113,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1114,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1115,"author":{"gitID":"-"},"content":""},{"lineNumber":1116,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":1117,"author":{"gitID":"-"},"content":""},{"lineNumber":1118,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1119,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1120,"author":{"gitID":"-"},"content":""},{"lineNumber":1121,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1122,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1123,"author":{"gitID":"-"},"content":""},{"lineNumber":1124,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1125,"author":{"gitID":"-"},"content":""},{"lineNumber":1126,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1127,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1128,"author":{"gitID":"-"},"content":""},{"lineNumber":1129,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1130,"author":{"gitID":"-"},"content":""},{"lineNumber":1131,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1132,"author":{"gitID":"-"},"content":""},{"lineNumber":1133,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1134,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1135,"author":{"gitID":"ngshikang"},"content":"   Expected: Shows the login screen GUI, and after successful login, it shows GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1136,"author":{"gitID":"ngshikang"},"content":".. Key in the username and password. Create a new account if you don\u0027t have one. +"},{"lineNumber":1137,"author":{"gitID":"-"},"content":"   Expected after logging in: The system speaks out \"Welcome user\" (for Window and Mac only) and the Pigeon application is now ready to be used."},{"lineNumber":1138,"author":{"gitID":"-"},"content":""},{"lineNumber":1139,"author":{"gitID":"ngshikang"},"content":". Login settings"},{"lineNumber":1140,"author":{"gitID":"ngshikang"},"content":".. Create an account for the same username more than once (not case-sensitive). +"},{"lineNumber":1141,"author":{"gitID":"ngshikang"},"content":"    Expected: Creation of a profile for the same username as one that exists already should not be allowed."},{"lineNumber":1142,"author":{"gitID":"ngshikang"},"content":".. Try a different password than the one used for creating the account (not case-sensitive). +"},{"lineNumber":1143,"author":{"gitID":"ngshikang"},"content":"    Expected: It should deny you entry into the application until the correct password is keyed in."},{"lineNumber":1144,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":1145,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1146,"author":{"gitID":"-"},"content":""},{"lineNumber":1147,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1148,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1149,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1150,"author":{"gitID":"-"},"content":""},{"lineNumber":1151,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person"},{"lineNumber":1152,"author":{"gitID":"-"},"content":""},{"lineNumber":1153,"author":{"gitID":"-"},"content":". Deleting a person while all persons are listed"},{"lineNumber":1154,"author":{"gitID":"-"},"content":""},{"lineNumber":1155,"author":{"gitID":"-"},"content":".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":1156,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1157,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1158,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1159,"author":{"gitID":"-"},"content":"   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1160,"author":{"gitID":"ngshikang"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) +"},{"lineNumber":1161,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1162,"author":{"gitID":"-"},"content":""},{"lineNumber":1163,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1164,"author":{"gitID":"-"},"content":""},{"lineNumber":1165,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1166,"author":{"gitID":"-"},"content":""},{"lineNumber":1167,"author":{"gitID":"ngshikang"},"content":".. Delete the data folder or corrupted file and repeat commands. A new data folder/file should be auto-generated and auto-saved again."},{"lineNumber":1168,"author":{"gitID":"-"},"content":""},{"lineNumber":1169,"author":{"gitID":"-"},"content":"// tag::testScript[]"},{"lineNumber":1170,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Virtual assistant"},{"lineNumber":1171,"author":{"gitID":"-"},"content":". Reads out a person name and show route from the Headquarter to the person address:"},{"lineNumber":1172,"author":{"gitID":"-"},"content":""},{"lineNumber":1173,"author":{"gitID":"-"},"content":".. Prerequisites: The last shown list is not empty. The first person in the last shown list has a valid, existing address."},{"lineNumber":1174,"author":{"gitID":"-"},"content":".. Test case: `click on the first person card` or use command `select 1` +"},{"lineNumber":1175,"author":{"gitID":"-"},"content":"   Expected: The system reads out \"This is + `the first person name` \" and the main display panel loads the route on Google Map from the `Headquarter`"},{"lineNumber":1176,"author":{"gitID":"-"},"content":"   to the `first person address`. Status bar remains the same."},{"lineNumber":1177,"author":{"gitID":"-"},"content":".. Test case: `click on a person card` or use command `select` to select a person with an invalid address (such as: \"Dummy Address\") +"},{"lineNumber":1178,"author":{"gitID":"-"},"content":"   Expected: The system reads out \"This is + `the person name` \" and the main display panel either loads only the location on Google Map of the `Headquarter`"},{"lineNumber":1179,"author":{"gitID":"-"},"content":"   or the route from the `Headquarter` to an address which might sounds alike (auto generated by Google Map). Status bar remains the same."},{"lineNumber":1180,"author":{"gitID":"-"},"content":""},{"lineNumber":1181,"author":{"gitID":"-"},"content":"// end::testScript[]"},{"lineNumber":1182,"author":{"gitID":"-"},"content":""},{"lineNumber":1183,"author":{"gitID":"-"},"content":"// tag::testDistance[]"},{"lineNumber":1184,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Retrieving distance from 2 end points"},{"lineNumber":1185,"author":{"gitID":"-"},"content":""},{"lineNumber":1186,"author":{"gitID":"-"},"content":". Retrieving distance from `Headquarter` to a `person address`  :"},{"lineNumber":1187,"author":{"gitID":"-"},"content":""},{"lineNumber":1188,"author":{"gitID":"-"},"content":".. Prerequisites: The last shown list is not empty. The first person in the last shown list has a valid, existing address."},{"lineNumber":1189,"author":{"gitID":"-"},"content":".. Test case: `distance 1` +"},{"lineNumber":1190,"author":{"gitID":"-"},"content":"   Expected: The command result panel shows the distance from the `Headquarter` to the `first person address` and the main display panel loads the route on Google Map from the `Headquarter`"},{"lineNumber":1191,"author":{"gitID":"-"},"content":"   to the `first person address`. Status bar remains the same."},{"lineNumber":1192,"author":{"gitID":"-"},"content":".. Test case: `distance x` with x is the index of a person with invalid or non-existing address +"},{"lineNumber":1193,"author":{"gitID":"-"},"content":"   Expected: The command result panel shows \"Unable to find + `person name` + address\" and the main display panel either loads only the location on Google Map of the `Headquarter`"},{"lineNumber":1194,"author":{"gitID":"-"},"content":"   or the route from the `Headquarter` to an address which might sounds alike (auto generated by Google Map). Status bar remains the same."},{"lineNumber":1195,"author":{"gitID":"-"},"content":".. Test case: `distance 0` +"},{"lineNumber":1196,"author":{"gitID":"-"},"content":"   Expected: Error details shown in the command result panel. Status bar remains the same."},{"lineNumber":1197,"author":{"gitID":"-"},"content":".. Other incorrect distance commands to try: `distance`, `distance x` (where x is larger than the list size) +"},{"lineNumber":1198,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1199,"author":{"gitID":"-"},"content":""},{"lineNumber":1200,"author":{"gitID":"-"},"content":". Retrieving distance from a `person address` to another `person address` :"},{"lineNumber":1201,"author":{"gitID":"-"},"content":".. Prerequisites: The last shown list has more than 1 person. The first person and the second in the last shown list have valid, existing addresses."},{"lineNumber":1202,"author":{"gitID":"-"},"content":".. Test case: `distance 1 2` +"},{"lineNumber":1203,"author":{"gitID":"-"},"content":"   Expected: The command result panel shows the distance from the `first person address` to the `second person address` and the main display panel loads the route on Google Map from the `first person address`"},{"lineNumber":1204,"author":{"gitID":"-"},"content":"   to the `second person address`. Status bar remains the same."},{"lineNumber":1205,"author":{"gitID":"-"},"content":".. Test case: `distance 1 x` with x is the index of a person with invalid or non-existing address +"},{"lineNumber":1206,"author":{"gitID":"-"},"content":"   Expected: The command result panel shows \"Unable to find at least on address\" and the main display panel either loads only the location on Google Map of one of the addresses or the route from the addressed which might sound alike (auto generated by Google Map). Status bar remains the same."},{"lineNumber":1207,"author":{"gitID":"-"},"content":".. Test case: `distance 0 1` +"},{"lineNumber":1208,"author":{"gitID":"-"},"content":"   Expected: Error details shown in the command result panel. Status bar remains the same."},{"lineNumber":1209,"author":{"gitID":"-"},"content":".. Other incorrect distance commands to try: `distance`, `distance 0 x`, `distance x y` (where x and y are larger than the list size) +"},{"lineNumber":1210,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1211,"author":{"gitID":"-"},"content":""},{"lineNumber":1212,"author":{"gitID":"-"},"content":"// end::testDistance[]"},{"lineNumber":1213,"author":{"gitID":"-"},"content":""},{"lineNumber":1214,"author":{"gitID":"-"},"content":"// tag::testFilter[]"},{"lineNumber":1215,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Filtering person by date"},{"lineNumber":1216,"author":{"gitID":"-"},"content":".. Prerequisites: There list is not empty."},{"lineNumber":1217,"author":{"gitID":"-"},"content":".. Test case: `filter 2018-03-03` (assuming that there is at least 1 person has the delivery date 2018-03-03) +"},{"lineNumber":1218,"author":{"gitID":"-"},"content":"   Expected: The command result panel shows the number of persons with the delivery date \"2018-03-03\" and have valid, existing address. If there is any invalid, non-existing address then the"},{"lineNumber":1219,"author":{"gitID":"-"},"content":"   command result panel also shows message saying that there is at least 1 invalid or non-existing address. The main display panel loads the \"optimized route\" on Google Map from the `Headquarter`"},{"lineNumber":1220,"author":{"gitID":"-"},"content":"   to all the \"findable\" address. Status bar remains the same."},{"lineNumber":1221,"author":{"gitID":"-"},"content":".. Test case: `filter 2018-02-30` (assuming that there is no person with this delivery date)"},{"lineNumber":1222,"author":{"gitID":"-"},"content":"   Expected: The command result panel shows message saying that no person is listed. Status bar remains the same."},{"lineNumber":1223,"author":{"gitID":"-"},"content":".. Other incorrect filter commands to try: `filter`, `filter 2018 03 03` +"},{"lineNumber":1224,"author":{"gitID":"-"},"content":"   Expected: Error message from command result pane. Status bar remains the same."},{"lineNumber":1225,"author":{"gitID":"-"},"content":"// end::testFilter[]"}],"authorContributionMap":{"mattbuot":76,"ngshikang":83,"meerakanani10":49,"-":1017}},{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":36,"author":{"gitID":"meerakanani10"},"content":"import seedu.address.logic.commands.FilterCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.ui.BrowserPanel;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":47,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":48,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":49,"author":{"gitID":"-"},"content":" */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return TypicalPersons.getTypicalAddressBook();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getBrowserPanel();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":133,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"meerakanani10"},"content":"    protected void showPersonsWithDate(String keyword) {"},{"lineNumber":157,"author":{"gitID":"meerakanani10"},"content":"        executeCommand(FilterCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * Selects the person at {@code index} of the displayed list."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * Deletes all persons in the address book."},{"lineNumber":170,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    protected void deleteAllPersons() {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertEquals(0, getModel().getAddressBook().getPersonList().size());"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":180,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":182,"author":{"gitID":"-"},"content":"                                                     Model expectedModel) {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        //assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        //assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":194,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        getBrowserPanel().rememberUrl();"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * of the previously selected person."},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":216,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getAddress();"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        URL expectedUrl;"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        int stringCutIndex;"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        String addressWithoutUnit;"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"        if (selectedCardName.indexOf(\u0027#\u0027) \u003e 2) {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"            stringCutIndex \u003d selectedCardName.indexOf(\u0027#\u0027) - 2;"},{"lineNumber":227,"author":{"gitID":"-"},"content":"            addressWithoutUnit \u003d selectedCardName.substring(0, stringCutIndex);"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"            addressWithoutUnit \u003d selectedCardName;"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL"},{"lineNumber":234,"author":{"gitID":"-"},"content":"                    + addressWithoutUnit.replaceAll(\" \", \"%20\") + \"?dg\u003ddbrw\u0026newdg\u003d1\");"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"URL expected to be valid.\");"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."},{"lineNumber":245,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":254,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":255,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":262,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":268,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":269,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":277,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":278,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":279,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":280,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":286,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":289,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":290,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":291,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":292,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":293,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":294,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":295,"author":{"gitID":"-"},"content":"            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":296,"author":{"gitID":"-"},"content":"            assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"},{"lineNumber":297,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":298,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":299,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":300,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":301,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":302,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":305,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":306,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":307,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":308,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":309,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":310,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"meerakanani10":3,"-":307}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.ui.PersonCard;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String LABEL_DEFAULT_STYLE \u003d \"label\";"},{"lineNumber":20,"author":{"gitID":"ngshikang"},"content":"    private static final String[] TAG_COLOR \u003d {\"red\", \"green\", \"blue\"};"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        expectedCard.getTags().forEach(tag -\u003e"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                assertEquals(expectedCard.getTagStyleClasses(tag), actualCard.getTagStyleClasses(tag)));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertTagsEqual(expectedPerson, actualCard);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Asserts that the tags in {@code actualCard} matches all the tags in {@code expectedPerson} with the correct"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * color."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private static void assertTagsEqual(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        List\u003cString\u003e expectedTags \u003d expectedPerson.getTags().stream()"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                .map(tag -\u003e tag.tagName).collect(Collectors.toList());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertEquals(expectedTags, actualCard.getTags());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        expectedTags.forEach(tag -\u003e"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                assertEquals(Arrays.asList(LABEL_DEFAULT_STYLE, getTagColorStyleFor(tag)),"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                        actualCard.getTagStyleClasses(tag)));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Returns the color style for {@code tagName}\u0027s label. The tag\u0027s color is determined by looking up the color"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * in {@code PersonCard#TAG_COLOR_STYLES}, using an index generated by the hash code of the tag\u0027s content."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * @see PersonCard#fromTagNameToColor(String)"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private static String getTagColorStyleFor(String tag) {"},{"lineNumber":68,"author":{"gitID":"ngshikang"},"content":"        return TAG_COLOR[Math.abs(tag.toLowerCase().hashCode()) % TAG_COLOR.length];"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c persons.length; i++) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ngshikang":2,"-":101}},{"path":"src/test/java/seedu/address/ui/BrowserPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class BrowserPanelTest extends GuiUnitTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private PersonPanelSelectionChangedEvent selectionChangedEventStub;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private BrowserPanelHandle browserPanelHandle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        selectionChangedEventStub \u003d new PersonPanelSelectionChangedEvent(new PersonCard(ALICE, 0));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(browserPanel);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void display() throws Exception {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // default web page"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        // associated web page of a person"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        postNow(selectionChangedEventStub);"},{"lineNumber":43,"author":{"gitID":"ncaminh"},"content":"        //@@author ncaminh"},{"lineNumber":44,"author":{"gitID":"ncaminh"},"content":"        String addressValue \u003d ALICE.getAddress().value;"},{"lineNumber":45,"author":{"gitID":"ncaminh"},"content":"        String addressWithoutUnit \u003d addressValue.substring(0, addressValue.indexOf(\u0027#\u0027) - 2);"},{"lineNumber":46,"author":{"gitID":"ncaminh"},"content":"        URL expectedPersonUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL"},{"lineNumber":47,"author":{"gitID":"ncaminh"},"content":"                + addressWithoutUnit.replaceAll(\" \", \"%20\") + \"?dg\u003ddbrw\u0026newdg\u003d1\");"},{"lineNumber":48,"author":{"gitID":"ncaminh"},"content":"        //@@author"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(browserPanelHandle);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ncaminh":6,"-":46}},{"path":"src/test/java/seedu/address/ui/UiManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"ngshikang"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":3,"author":{"gitID":"ngshikang"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":5,"author":{"gitID":"ngshikang"},"content":"import org.junit.Before;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":14,"author":{"gitID":"ngshikang"},"content":"import seedu.address.login.Login;"},{"lineNumber":15,"author":{"gitID":"ngshikang"},"content":"import seedu.address.login.LoginManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"ngshikang"},"content":"import seedu.address.storage.JsonUserPassStorage;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":21,"author":{"gitID":"ngshikang"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":23,"author":{"gitID":"ngshikang"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":24,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":25,"author":{"gitID":"ngshikang"},"content":"//@@author ngshikang"},{"lineNumber":26,"author":{"gitID":"ngshikang"},"content":"public class UiManagerTest {"},{"lineNumber":27,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":28,"author":{"gitID":"ngshikang"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"ngshikang"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":30,"author":{"gitID":"ngshikang"},"content":"    @Rule"},{"lineNumber":31,"author":{"gitID":"ngshikang"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":32,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":33,"author":{"gitID":"ngshikang"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":34,"author":{"gitID":"ngshikang"},"content":"    private Logic logic \u003d new LogicManager(model);"},{"lineNumber":35,"author":{"gitID":"ngshikang"},"content":"    private Config config \u003d new Config();"},{"lineNumber":36,"author":{"gitID":"ngshikang"},"content":"    private UserPrefs prefs \u003d new UserPrefs();"},{"lineNumber":37,"author":{"gitID":"ngshikang"},"content":"    private StorageManager storage;"},{"lineNumber":38,"author":{"gitID":"ngshikang"},"content":"    private Login login;"},{"lineNumber":39,"author":{"gitID":"ngshikang"},"content":"    private Ui ui;"},{"lineNumber":40,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":41,"author":{"gitID":"ngshikang"},"content":"    @Before"},{"lineNumber":42,"author":{"gitID":"ngshikang"},"content":"    public void setUp() {"},{"lineNumber":43,"author":{"gitID":"ngshikang"},"content":"        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"},{"lineNumber":44,"author":{"gitID":"ngshikang"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":45,"author":{"gitID":"ngshikang"},"content":"        JsonUserPassStorage userPassStorage \u003d new JsonUserPassStorage(getTempFilePath(\"tempUserPass\"));"},{"lineNumber":46,"author":{"gitID":"ngshikang"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, userPassStorage);"},{"lineNumber":47,"author":{"gitID":"ngshikang"},"content":"        login \u003d new LoginManager(storage);"},{"lineNumber":48,"author":{"gitID":"ngshikang"},"content":"        ui \u003d new UiManager(logic, config, prefs, login);"},{"lineNumber":49,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":51,"author":{"gitID":"ngshikang"},"content":"    private String getTempFilePath(String fileName) {"},{"lineNumber":52,"author":{"gitID":"ngshikang"},"content":"        return testFolder.getRoot().getPath() + fileName;"},{"lineNumber":53,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":55,"author":{"gitID":"ngshikang"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"ngshikang"},"content":"    public void checkUiValidity() {"},{"lineNumber":57,"author":{"gitID":"ngshikang"},"content":"        assertNotNull(ui);"},{"lineNumber":58,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":60,"author":{"gitID":"ngshikang"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"ngshikang"},"content":"    public void checkStartLogin() {"},{"lineNumber":62,"author":{"gitID":"ngshikang"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ui.startLogin(null));"},{"lineNumber":63,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":65,"author":{"gitID":"ngshikang"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"ngshikang"},"content":"    public void checkStopLogin() {"},{"lineNumber":67,"author":{"gitID":"ngshikang"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ui.stopLogin());"},{"lineNumber":68,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":70,"author":{"gitID":"ngshikang"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"ngshikang"},"content":"    public void checkAppStart() {"},{"lineNumber":72,"author":{"gitID":"ngshikang"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ui.start(null));"},{"lineNumber":73,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":75,"author":{"gitID":"ngshikang"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"ngshikang"},"content":"    public void checkAppStop() {"},{"lineNumber":77,"author":{"gitID":"ngshikang"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ui.stop());"},{"lineNumber":78,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":80,"author":{"gitID":"ngshikang"},"content":"}"}],"authorContributionMap":{"ngshikang":67,"-":13}},{"path":"src/test/java/seedu/address/commons/core/MailerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"mattbuot"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":3,"author":{"gitID":"mattbuot"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"mattbuot"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":6,"author":{"gitID":"mattbuot"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"mattbuot"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":9,"author":{"gitID":"mattbuot"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":11,"author":{"gitID":"mattbuot"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":12,"author":{"gitID":"mattbuot"},"content":"import seedu.address.model.person.DelivDate;"},{"lineNumber":13,"author":{"gitID":"mattbuot"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":14,"author":{"gitID":"mattbuot"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":15,"author":{"gitID":"mattbuot"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"mattbuot"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":17,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":18,"author":{"gitID":"mattbuot"},"content":"//@@author mattbuot"},{"lineNumber":19,"author":{"gitID":"mattbuot"},"content":"public class MailerTest {"},{"lineNumber":20,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":21,"author":{"gitID":"mattbuot"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"mattbuot"},"content":"    public void sendCustomersEmail() {"},{"lineNumber":23,"author":{"gitID":"mattbuot"},"content":"        boolean test \u003d Mailer.emailCustomers(Arrays.asList(new Person("},{"lineNumber":24,"author":{"gitID":"mattbuot"},"content":"                new Name(\"John\"),"},{"lineNumber":25,"author":{"gitID":"mattbuot"},"content":"                new Phone(\"98765432\"),"},{"lineNumber":26,"author":{"gitID":"mattbuot"},"content":"                new Email(\"pigeonscs2103@gmail.com\"),"},{"lineNumber":27,"author":{"gitID":"mattbuot"},"content":"                new Address(\"NUS\"),"},{"lineNumber":28,"author":{"gitID":"mattbuot"},"content":"                new DelivDate(\"2018-03-24\"),"},{"lineNumber":29,"author":{"gitID":"mattbuot"},"content":"                Collections.emptySet())));"},{"lineNumber":30,"author":{"gitID":"mattbuot"},"content":"        assertTrue(test);"},{"lineNumber":31,"author":{"gitID":"mattbuot"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":33,"author":{"gitID":"mattbuot"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"mattbuot"},"content":"    public void sendDriverEmail() {"},{"lineNumber":35,"author":{"gitID":"mattbuot"},"content":"        boolean test \u003d Mailer.emailDriver(Arrays.asList(\"NUS\"), \"45.0 min\", \"2018-05-04\");"},{"lineNumber":36,"author":{"gitID":"mattbuot"},"content":"        assertTrue(test);"},{"lineNumber":37,"author":{"gitID":"mattbuot"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":39,"author":{"gitID":"mattbuot"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"mattbuot"},"content":"    public void sendDriverEmailWithNoAddresses() {"},{"lineNumber":41,"author":{"gitID":"mattbuot"},"content":"        boolean test \u003d Mailer.emailDriver(Collections.emptyList(), \"45.0 min\", \"2018-05-24\");"},{"lineNumber":42,"author":{"gitID":"mattbuot"},"content":"        assertFalse(test);"},{"lineNumber":43,"author":{"gitID":"mattbuot"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"mattbuot"},"content":"}"}],"authorContributionMap":{"mattbuot":44}},{"path":"src/test/java/seedu/address/commons/core/ConfigTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class ConfigTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public void toString_defaultObject_stringReturned() {"},{"lineNumber":17,"author":{"gitID":"ngshikang"},"content":"        String defaultConfigAsString \u003d \"App title : Your Trustworthy Pigeons AddressBook brought to you by T16-B2\\n\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"                + \"Current log level : INFO\\n\""},{"lineNumber":19,"author":{"gitID":"ngshikang"},"content":"                + \"Preference file Location : preferences.json\\n\""},{"lineNumber":20,"author":{"gitID":"ngshikang"},"content":"                + \"UserPass file Location : userpass.json\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        Config defaultConfig \u003d new Config();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertNotNull(defaultConfig);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ngshikang":3,"-":30}},{"path":"src/test/java/seedu/address/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedPerson;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedTag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validAddressBook.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final File MISSING_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingPersonField.xml\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonField.xml\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final File VALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"validPerson.xml\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"9482asf424\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Hans Muster\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"9482424\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"hans@example\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"4th street\";"},{"lineNumber":42,"author":{"gitID":"meerakanani10"},"content":"    private static final String VALID_DATE \u003d \"2018-03-23\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(null, AddressBook.class);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertEquals(9, dataFromFile.getPersonList().size());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertEquals(0, dataFromFile.getTagList().size());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":82,"author":{"gitID":"-"},"content":"                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":84,"author":{"gitID":"meerakanani10"},"content":"                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DATE, VALID_TAGS);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":91,"author":{"gitID":"-"},"content":"                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":93,"author":{"gitID":"meerakanani10"},"content":"                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DATE, VALID_TAGS);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":100,"author":{"gitID":"-"},"content":"                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":102,"author":{"gitID":"meerakanani10"},"content":"                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DATE, VALID_TAGS);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(null, new AddressBook());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        dataToWrite \u003d new XmlSerializableAddressBook("},{"lineNumber":134,"author":{"gitID":"-"},"content":"                builder.withPerson(new PersonBuilder().build()).withTag(\"Friends\").build());"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    @XmlRootElement(name \u003d \"person\")"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"},{"lineNumber":147,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"meerakanani10":4,"-":143}},{"path":"src/test/java/seedu/address/logic/SortAddressesTest.java","lines":[{"lineNumber":1,"author":{"gitID":"meerakanani10"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":3,"author":{"gitID":"meerakanani10"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitID":"meerakanani10"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":6,"author":{"gitID":"ngshikang"},"content":"import org.junit.Assert;"},{"lineNumber":7,"author":{"gitID":"ngshikang"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"meerakanani10"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":10,"author":{"gitID":"meerakanani10"},"content":"//@@author meerakanani10"},{"lineNumber":11,"author":{"gitID":"meerakanani10"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"meerakanani10"},"content":" * Test for the SortAddresses Class"},{"lineNumber":13,"author":{"gitID":"meerakanani10"},"content":" */"},{"lineNumber":14,"author":{"gitID":"meerakanani10"},"content":"public class SortAddressesTest {"},{"lineNumber":15,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":16,"author":{"gitID":"meerakanani10"},"content":"    private Map\u003cString, Double\u003e unsortMap \u003d new HashMap\u003cString, Double\u003e();"},{"lineNumber":17,"author":{"gitID":"meerakanani10"},"content":"    private Map\u003cString, Double\u003e sortMap \u003d new HashMap\u003cString, Double\u003e();"},{"lineNumber":18,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":19,"author":{"gitID":"meerakanani10"},"content":"    @Before"},{"lineNumber":20,"author":{"gitID":"meerakanani10"},"content":"    public void setUp() {"},{"lineNumber":21,"author":{"gitID":"meerakanani10"},"content":"        unsortMap.put(\"27 Prince George\u0027s Park\", 3.0);"},{"lineNumber":22,"author":{"gitID":"meerakanani10"},"content":"        unsortMap.put(\"Blk 30 Geylang Street 29\", 5.0);"},{"lineNumber":23,"author":{"gitID":"meerakanani10"},"content":"        unsortMap.put(\"Blk 436 Serangoon Gardens Street 26\", 6.0);"},{"lineNumber":24,"author":{"gitID":"meerakanani10"},"content":"        unsortMap.put(\"Blk 45 Aljunied Street 85\", 2.0);"},{"lineNumber":25,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":26,"author":{"gitID":"meerakanani10"},"content":"        sortMap.put(\"Blk 45 Aljunied Street 85\", 2.0);"},{"lineNumber":27,"author":{"gitID":"meerakanani10"},"content":"        sortMap.put(\"27 Prince George\u0027s Park\", 3.0);"},{"lineNumber":28,"author":{"gitID":"meerakanani10"},"content":"        sortMap.put(\"Blk 30 Geylang Street 29\", 5.0);"},{"lineNumber":29,"author":{"gitID":"meerakanani10"},"content":"        sortMap.put(\"Blk 436 Serangoon Gardens Street 26\", 6.0);"},{"lineNumber":30,"author":{"gitID":"meerakanani10"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":32,"author":{"gitID":"meerakanani10"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"meerakanani10"},"content":"    public void execute_sorting() {"},{"lineNumber":34,"author":{"gitID":"meerakanani10"},"content":"        SortAddresses sortAddresses \u003d new SortAddresses();"},{"lineNumber":35,"author":{"gitID":"meerakanani10"},"content":"        Map\u003cString, Double\u003e sorted \u003d new HashMap\u003c\u003e();"},{"lineNumber":36,"author":{"gitID":"meerakanani10"},"content":"        sorted \u003d sortAddresses.sortByComparator(unsortMap);"},{"lineNumber":37,"author":{"gitID":"meerakanani10"},"content":"        sortAddresses.printMap(sorted);"},{"lineNumber":38,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":39,"author":{"gitID":"meerakanani10"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":41,"author":{"gitID":"meerakanani10"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"meerakanani10"},"content":"     *"},{"lineNumber":43,"author":{"gitID":"meerakanani10"},"content":"     * @param sorted"},{"lineNumber":44,"author":{"gitID":"meerakanani10"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"meerakanani10"},"content":"    public void assertCorrectlySorted(Map\u003cString, Double\u003e sorted) {"},{"lineNumber":46,"author":{"gitID":"meerakanani10"},"content":"        Assert.assertTrue(sorted.equals(sortMap));"},{"lineNumber":47,"author":{"gitID":"meerakanani10"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":49,"author":{"gitID":"meerakanani10"},"content":"}"}],"authorContributionMap":{"ngshikang":3,"meerakanani10":46}},{"path":"src/test/java/seedu/address/ui/LoginPaneTest.java","lines":[{"lineNumber":1,"author":{"gitID":"ngshikang"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":3,"author":{"gitID":"ngshikang"},"content":"import org.junit.Assert;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"ngshikang"},"content":"import guitests.guihandles.LoginPaneHandle;"},{"lineNumber":10,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":11,"author":{"gitID":"ngshikang"},"content":"import seedu.address.login.Login;"},{"lineNumber":12,"author":{"gitID":"ngshikang"},"content":"import seedu.address.login.LoginManager;"},{"lineNumber":13,"author":{"gitID":"ngshikang"},"content":"import seedu.address.storage.JsonUserPassStorage;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":15,"author":{"gitID":"ngshikang"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":17,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":18,"author":{"gitID":"ngshikang"},"content":"//@@author ngshikang"},{"lineNumber":19,"author":{"gitID":"ngshikang"},"content":"public class LoginPaneTest extends GuiUnitTest {"},{"lineNumber":20,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":21,"author":{"gitID":"ngshikang"},"content":"    @Rule"},{"lineNumber":22,"author":{"gitID":"ngshikang"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":23,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":24,"author":{"gitID":"ngshikang"},"content":"    private Login login;"},{"lineNumber":25,"author":{"gitID":"ngshikang"},"content":"    private StorageManager storage;"},{"lineNumber":26,"author":{"gitID":"ngshikang"},"content":"    private LoginPane loginPane;"},{"lineNumber":27,"author":{"gitID":"ngshikang"},"content":"    private LoginPaneHandle loginPaneHandle;"},{"lineNumber":28,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":29,"author":{"gitID":"ngshikang"},"content":"    @Before"},{"lineNumber":30,"author":{"gitID":"ngshikang"},"content":"    public void setUp() {"},{"lineNumber":31,"author":{"gitID":"ngshikang"},"content":"        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"},{"lineNumber":32,"author":{"gitID":"ngshikang"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":33,"author":{"gitID":"ngshikang"},"content":"        JsonUserPassStorage userPassStorage \u003d new JsonUserPassStorage(getTempFilePath(\"tempUserPass.json\"));"},{"lineNumber":34,"author":{"gitID":"ngshikang"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, userPassStorage);"},{"lineNumber":35,"author":{"gitID":"ngshikang"},"content":"        login \u003d new LoginManager(storage);"},{"lineNumber":36,"author":{"gitID":"ngshikang"},"content":"        loginPane \u003d new LoginPane(login);"},{"lineNumber":37,"author":{"gitID":"ngshikang"},"content":"        loginPaneHandle \u003d new LoginPaneHandle(getChildNode(loginPane.getRoot(),"},{"lineNumber":38,"author":{"gitID":"ngshikang"},"content":"                LoginPaneHandle.LOGIN_PANE_ID));"},{"lineNumber":39,"author":{"gitID":"ngshikang"},"content":"        uiPartRule.setUiPart(loginPane);"},{"lineNumber":40,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"ngshikang"},"content":"    private String getTempFilePath(String fileName) {"},{"lineNumber":42,"author":{"gitID":"ngshikang"},"content":"        return testFolder.getRoot().getPath() + fileName;"},{"lineNumber":43,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":45,"author":{"gitID":"ngshikang"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"ngshikang"},"content":"    public void loginPane_checkInitialAccessPermission() {"},{"lineNumber":47,"author":{"gitID":"ngshikang"},"content":"        Assert.assertFalse(loginPane.isAccessPermitted());"},{"lineNumber":48,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":50,"author":{"gitID":"ngshikang"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"ngshikang"},"content":"    public void loginPane_checkSuccessfulLoginAccess() {"},{"lineNumber":52,"author":{"gitID":"ngshikang"},"content":"        loginPaneHandle.getTextField().setText(\"user\");"},{"lineNumber":53,"author":{"gitID":"ngshikang"},"content":"        loginPaneHandle.getPasswordField().setText(\"pass\");"},{"lineNumber":54,"author":{"gitID":"ngshikang"},"content":"        loginPaneHandle.getCreateButton().fire();"},{"lineNumber":55,"author":{"gitID":"ngshikang"},"content":"        loginPaneHandle.getLoginButton().fire();"},{"lineNumber":56,"author":{"gitID":"ngshikang"},"content":"        Assert.assertTrue(loginPane.isAccessPermitted());"},{"lineNumber":57,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":59,"author":{"gitID":"ngshikang"},"content":"}"}],"authorContributionMap":{"ngshikang":52,"-":7}},{"path":"src/test/java/systemtests/FilterCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"meerakanani10"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":7,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"meerakanani10"},"content":"import seedu.address.logic.commands.FilterCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":17,"author":{"gitID":"meerakanani10"},"content":"//@@author meerakanani10"},{"lineNumber":18,"author":{"gitID":"meerakanani10"},"content":"public class FilterCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":19,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":20,"author":{"gitID":"meerakanani10"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"meerakanani10"},"content":"    public void filter() {"},{"lineNumber":22,"author":{"gitID":"meerakanani10"},"content":"        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"},{"lineNumber":23,"author":{"gitID":"meerakanani10"},"content":"         * -\u003e 2 persons found"},{"lineNumber":24,"author":{"gitID":"meerakanani10"},"content":"         */"},{"lineNumber":25,"author":{"gitID":"meerakanani10"},"content":"        String command \u003d \"   \" + FilterCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"},{"lineNumber":26,"author":{"gitID":"meerakanani10"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":27,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":28,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":29,"author":{"gitID":"meerakanani10"},"content":"        /* Case: filter person where person list is not displaying the person we are finding -\u003e 1 person found */"},{"lineNumber":30,"author":{"gitID":"meerakanani10"},"content":"        command \u003d FilterCommand.COMMAND_WORD + \" 2018-03-29\";"},{"lineNumber":31,"author":{"gitID":"meerakanani10"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON);"},{"lineNumber":32,"author":{"gitID":"meerakanani10"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":33,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":34,"author":{"gitID":"meerakanani10"},"content":"        /* Case: filter multiple persons in address book, 1 keywords -\u003e 2 persons found */"},{"lineNumber":35,"author":{"gitID":"meerakanani10"},"content":"        command \u003d FilterCommand.COMMAND_WORD + \" 2018-03-24\";"},{"lineNumber":36,"author":{"gitID":"meerakanani10"},"content":"        ModelHelper.setFilteredList(expectedModel, FIONA, ELLE);"},{"lineNumber":37,"author":{"gitID":"meerakanani10"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":38,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":39,"author":{"gitID":"meerakanani10"},"content":"        /* Case: filter multiple persons in address book 1 non-matching keyword"},{"lineNumber":40,"author":{"gitID":"meerakanani10"},"content":"         * -\u003e 0 persons found"},{"lineNumber":41,"author":{"gitID":"meerakanani10"},"content":"         */"},{"lineNumber":42,"author":{"gitID":"meerakanani10"},"content":"        command \u003d FilterCommand.COMMAND_WORD + \" 2017-03-23\";"},{"lineNumber":43,"author":{"gitID":"meerakanani10"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":44,"author":{"gitID":"meerakanani10"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":45,"author":{"gitID":"meerakanani10"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":46,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":47,"author":{"gitID":"meerakanani10"},"content":"        /* Case: undo previous filter command -\u003e rejected */"},{"lineNumber":48,"author":{"gitID":"meerakanani10"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":49,"author":{"gitID":"meerakanani10"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":50,"author":{"gitID":"meerakanani10"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":51,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":52,"author":{"gitID":"meerakanani10"},"content":"        /* Case: redo previous filter command -\u003e rejected */"},{"lineNumber":53,"author":{"gitID":"meerakanani10"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":54,"author":{"gitID":"meerakanani10"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":55,"author":{"gitID":"meerakanani10"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":56,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":57,"author":{"gitID":"meerakanani10"},"content":"        /* Case: filter person in address book, keyword is substring of date -\u003e 0 persons found */"},{"lineNumber":58,"author":{"gitID":"meerakanani10"},"content":"        command \u003d FilterCommand.COMMAND_WORD + \" 2018\";"},{"lineNumber":59,"author":{"gitID":"meerakanani10"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":60,"author":{"gitID":"meerakanani10"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":61,"author":{"gitID":"meerakanani10"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":62,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":63,"author":{"gitID":"meerakanani10"},"content":"        /* Case: filter person in address book, date is substring of keyword -\u003e 0 persons found */"},{"lineNumber":64,"author":{"gitID":"meerakanani10"},"content":"        command \u003d FilterCommand.COMMAND_WORD + \" 03-23\";"},{"lineNumber":65,"author":{"gitID":"meerakanani10"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":66,"author":{"gitID":"meerakanani10"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":67,"author":{"gitID":"meerakanani10"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":68,"author":{"gitID":"meerakanani10"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":70,"author":{"gitID":"meerakanani10"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"meerakanani10"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":72,"author":{"gitID":"meerakanani10"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":73,"author":{"gitID":"meerakanani10"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":74,"author":{"gitID":"meerakanani10"},"content":"     * These verifications are done by"},{"lineNumber":75,"author":{"gitID":"meerakanani10"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":76,"author":{"gitID":"meerakanani10"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":77,"author":{"gitID":"meerakanani10"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":78,"author":{"gitID":"meerakanani10"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":79,"author":{"gitID":"meerakanani10"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"meerakanani10"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":81,"author":{"gitID":"meerakanani10"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":82,"author":{"gitID":"meerakanani10"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":83,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":84,"author":{"gitID":"meerakanani10"},"content":"        executeCommand(command);"},{"lineNumber":85,"author":{"gitID":"meerakanani10"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":86,"author":{"gitID":"meerakanani10"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":87,"author":{"gitID":"meerakanani10"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":89,"author":{"gitID":"meerakanani10"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"meerakanani10"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":91,"author":{"gitID":"meerakanani10"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":92,"author":{"gitID":"meerakanani10"},"content":"     * These verifications are done by"},{"lineNumber":93,"author":{"gitID":"meerakanani10"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":94,"author":{"gitID":"meerakanani10"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":95,"author":{"gitID":"meerakanani10"},"content":"     * error style."},{"lineNumber":96,"author":{"gitID":"meerakanani10"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":97,"author":{"gitID":"meerakanani10"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"meerakanani10"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":99,"author":{"gitID":"meerakanani10"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":100,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":101,"author":{"gitID":"meerakanani10"},"content":"        executeCommand(command);"},{"lineNumber":102,"author":{"gitID":"meerakanani10"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":103,"author":{"gitID":"meerakanani10"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":104,"author":{"gitID":"meerakanani10"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":105,"author":{"gitID":"meerakanani10"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":106,"author":{"gitID":"meerakanani10"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"meerakanani10"},"content":"}"}],"authorContributionMap":{"meerakanani10":96,"-":11}},{"path":"src/test/java/seedu/address/logic/parser/FilterCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"meerakanani10"},"content":"import seedu.address.logic.commands.FilterCommand;"},{"lineNumber":12,"author":{"gitID":"meerakanani10"},"content":"import seedu.address.model.person.DatePredicate;"},{"lineNumber":13,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":14,"author":{"gitID":"meerakanani10"},"content":"//@@author meerakanani10"},{"lineNumber":15,"author":{"gitID":"meerakanani10"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"meerakanani10"},"content":" * Filter Command Parser Tests"},{"lineNumber":17,"author":{"gitID":"meerakanani10"},"content":" */"},{"lineNumber":18,"author":{"gitID":"meerakanani10"},"content":"public class FilterCommandParserTest {"},{"lineNumber":19,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":20,"author":{"gitID":"meerakanani10"},"content":"    private FilterCommandParser parser \u003d new FilterCommandParser();"},{"lineNumber":21,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":22,"author":{"gitID":"meerakanani10"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"meerakanani10"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":24,"author":{"gitID":"meerakanani10"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitID":"meerakanani10"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":27,"author":{"gitID":"meerakanani10"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"meerakanani10"},"content":"    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":29,"author":{"gitID":"meerakanani10"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":30,"author":{"gitID":"meerakanani10"},"content":"        FilterCommand expectedFilterCommand \u003d"},{"lineNumber":31,"author":{"gitID":"meerakanani10"},"content":"                new FilterCommand(new DatePredicate(Arrays.asList(\"2018-03-23\", \"2018-03-24\")));"},{"lineNumber":32,"author":{"gitID":"meerakanani10"},"content":"        assertParseSuccess(parser, \"2018-03-23 2018-03-24\", expectedFilterCommand);"},{"lineNumber":33,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":34,"author":{"gitID":"meerakanani10"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":35,"author":{"gitID":"meerakanani10"},"content":"        assertParseSuccess(parser, \" \\n 2018-03-23 \\n \\t 2018-03-24  \\t\", expectedFilterCommand);"},{"lineNumber":36,"author":{"gitID":"meerakanani10"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":38,"author":{"gitID":"meerakanani10"},"content":"}"}],"authorContributionMap":{"meerakanani10":28,"-":10}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":24,"author":{"gitID":"meerakanani10"},"content":"import seedu.address.logic.commands.FilterCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":33,"author":{"gitID":"meerakanani10"},"content":"import seedu.address.model.person.DatePredicate;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":62,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":71,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":85,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"meerakanani10"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"meerakanani10"},"content":"    public void parseCommand_filter() throws Exception {"},{"lineNumber":91,"author":{"gitID":"meerakanani10"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"2018-03-23\", \"2018-03-24\");"},{"lineNumber":92,"author":{"gitID":"meerakanani10"},"content":"        FilterCommand command \u003d (FilterCommand) parser.parseCommand(FilterCommand.COMMAND_WORD + \" \""},{"lineNumber":93,"author":{"gitID":"meerakanani10"},"content":"                + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":94,"author":{"gitID":"meerakanani10"},"content":"        assertEquals(new FilterCommand(new DatePredicate(keywords)), command);"},{"lineNumber":95,"author":{"gitID":"meerakanani10"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":124,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"meerakanani10":9,"-":144}},{"path":"src/test/java/seedu/address/logic/parser/DistanceCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DistanceCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"ncaminh"},"content":"//@@author ncaminh"},{"lineNumber":13,"author":{"gitID":"ncaminh"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"ncaminh"},"content":" * Test scope: similar to {@code DeleteCommandParserTest}."},{"lineNumber":15,"author":{"gitID":"ncaminh"},"content":" * @see DeleteCommandParserTest"},{"lineNumber":16,"author":{"gitID":"ncaminh"},"content":" */"},{"lineNumber":17,"author":{"gitID":"ncaminh"},"content":"public class DistanceCommandParserTest {"},{"lineNumber":18,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":19,"author":{"gitID":"ncaminh"},"content":"    private DistanceCommandParser parser \u003d new DistanceCommandParser();"},{"lineNumber":20,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":21,"author":{"gitID":"ncaminh"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"ncaminh"},"content":"    public void parse_validArgs_returnsDistanceCommand() {"},{"lineNumber":23,"author":{"gitID":"ncaminh"},"content":"        assertParseSuccess(parser, \"1\", new DistanceCommand(INDEX_FIRST_PERSON));"},{"lineNumber":24,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":26,"author":{"gitID":"ncaminh"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"ncaminh"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":28,"author":{"gitID":"ncaminh"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DistanceCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"ncaminh"},"content":"}"}],"authorContributionMap":{"ncaminh":19,"-":11}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"meerakanani10"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"meerakanani10"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":25,"author":{"gitID":"meerakanani10"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_AMY;"},{"lineNumber":26,"author":{"gitID":"meerakanani10"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":55,"author":{"gitID":"meerakanani10"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withDate(VALID_DATE_BOB)"},{"lineNumber":56,"author":{"gitID":"meerakanani10"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":60,"author":{"gitID":"meerakanani10"},"content":"                + ADDRESS_DESC_BOB + DATE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":64,"author":{"gitID":"meerakanani10"},"content":"                + ADDRESS_DESC_BOB + DATE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":68,"author":{"gitID":"meerakanani10"},"content":"                + ADDRESS_DESC_BOB + DATE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":72,"author":{"gitID":"meerakanani10"},"content":"                + ADDRESS_DESC_BOB + DATE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":76,"author":{"gitID":"meerakanani10"},"content":"                + ADDRESS_DESC_BOB + DATE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":80,"author":{"gitID":"meerakanani10"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withDate(VALID_DATE_BOB)"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":83,"author":{"gitID":"meerakanani10"},"content":"                + DATE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // zero tags"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":90,"author":{"gitID":"meerakanani10"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withDate(VALID_DATE_AMY).withTags().build();"},{"lineNumber":91,"author":{"gitID":"meerakanani10"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":92,"author":{"gitID":"meerakanani10"},"content":"                        + DATE_DESC_AMY,"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":101,"author":{"gitID":"meerakanani10"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":102,"author":{"gitID":"meerakanani10"},"content":"                        + DATE_DESC_BOB, expectedMessage);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        // missing phone prefix"},{"lineNumber":105,"author":{"gitID":"meerakanani10"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":106,"author":{"gitID":"meerakanani10"},"content":"                        + DATE_DESC_BOB, expectedMessage);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        // missing email prefix"},{"lineNumber":109,"author":{"gitID":"meerakanani10"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB"},{"lineNumber":110,"author":{"gitID":"meerakanani10"},"content":"                        + DATE_DESC_BOB, expectedMessage);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // missing address prefix"},{"lineNumber":113,"author":{"gitID":"meerakanani10"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB"},{"lineNumber":114,"author":{"gitID":"meerakanani10"},"content":"                        + DATE_DESC_BOB, expectedMessage);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":117,"author":{"gitID":"meerakanani10"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB"},{"lineNumber":118,"author":{"gitID":"meerakanani10"},"content":"                        + VALID_DATE_BOB, expectedMessage);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":125,"author":{"gitID":"meerakanani10"},"content":"                + DATE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // invalid phone"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":129,"author":{"gitID":"meerakanani10"},"content":"                + DATE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // invalid email"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"},{"lineNumber":133,"author":{"gitID":"meerakanani10"},"content":"                + DATE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        // invalid address"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":137,"author":{"gitID":"meerakanani10"},"content":"                + DATE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        // invalid tag"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":141,"author":{"gitID":"meerakanani10"},"content":"                + DATE_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":144,"author":{"gitID":"meerakanani10"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":145,"author":{"gitID":"meerakanani10"},"content":"                        + DATE_DESC_BOB, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        // non-empty preamble"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":149,"author":{"gitID":"meerakanani10"},"content":"                + ADDRESS_DESC_BOB + DATE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":150,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"meerakanani10":34,"-":118}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":7,"author":{"gitID":"meerakanani10"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DELIV_DATE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import com.google.maps.errors.ApiException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":44,"author":{"gitID":"meerakanani10"},"content":"    public static final String VALID_DATE_BOB \u003d \"2018-03-23\";"},{"lineNumber":45,"author":{"gitID":"meerakanani10"},"content":"    public static final String VALID_DATE_AMY \u003d \"2018-03-23\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":59,"author":{"gitID":"meerakanani10"},"content":"    public static final String DATE_DESC_BOB \u003d \" \" + PREFIX_DELIV_DATE + VALID_DATE_BOB;"},{"lineNumber":60,"author":{"gitID":"meerakanani10"},"content":"    public static final String DATE_DESC_AMY \u003d \" \" + PREFIX_DELIV_DATE + VALID_DATE_AMY;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":67,"author":{"gitID":"meerakanani10"},"content":"    public static final String INVALID_DATE_DESC \u003d \"2018-30-30\";"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":78,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        } catch (InterruptedException | IOException | ApiException e) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            e.printStackTrace();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":111,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }  catch (InterruptedException | IOException | ApiException e) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            e.printStackTrace();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":163,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"meerakanani10":6,"-":163}},{"path":"src/test/java/seedu/address/logic/commands/EmailCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":5,"author":{"gitID":"mattbuot"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":7,"author":{"gitID":"mattbuot"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":13,"author":{"gitID":"mattbuot"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":14,"author":{"gitID":"mattbuot"},"content":"import seedu.address.model.person.DelivDate;"},{"lineNumber":15,"author":{"gitID":"mattbuot"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":16,"author":{"gitID":"mattbuot"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitID":"mattbuot"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"mattbuot"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":20,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":21,"author":{"gitID":"mattbuot"},"content":"//@@author mattbuot"},{"lineNumber":22,"author":{"gitID":"mattbuot"},"content":"public class EmailCommandTest {"},{"lineNumber":23,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":24,"author":{"gitID":"mattbuot"},"content":"    private EmailCommand command;"},{"lineNumber":25,"author":{"gitID":"mattbuot"},"content":"    private Model model;"},{"lineNumber":26,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":27,"author":{"gitID":"mattbuot"},"content":"    @Before"},{"lineNumber":28,"author":{"gitID":"mattbuot"},"content":"    public void setup() {"},{"lineNumber":29,"author":{"gitID":"mattbuot"},"content":"        model \u003d new ModelManager();"},{"lineNumber":30,"author":{"gitID":"mattbuot"},"content":"        command \u003d new EmailCommand();"},{"lineNumber":31,"author":{"gitID":"mattbuot"},"content":"        command.setData(model, null, null);"},{"lineNumber":32,"author":{"gitID":"mattbuot"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":34,"author":{"gitID":"mattbuot"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"mattbuot"},"content":"    public void executeWithEmptyModel() {"},{"lineNumber":36,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":37,"author":{"gitID":"mattbuot"},"content":"        assertCommandFailure(command, \"Empty filtered list!\");"},{"lineNumber":38,"author":{"gitID":"mattbuot"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":40,"author":{"gitID":"mattbuot"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"mattbuot"},"content":"    public void executeWithInvalidAddress()"},{"lineNumber":42,"author":{"gitID":"mattbuot"},"content":"        throws DuplicatePersonException {"},{"lineNumber":43,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":44,"author":{"gitID":"mattbuot"},"content":"        model.addPerson(new Person("},{"lineNumber":45,"author":{"gitID":"mattbuot"},"content":"                new Name(\"Alice\"),"},{"lineNumber":46,"author":{"gitID":"mattbuot"},"content":"                new Phone(\"98765432\"),"},{"lineNumber":47,"author":{"gitID":"mattbuot"},"content":"                new Email(\"alice@gmail.com\"),"},{"lineNumber":48,"author":{"gitID":"mattbuot"},"content":"                new Address(\"apskefzjozdked\"),"},{"lineNumber":49,"author":{"gitID":"mattbuot"},"content":"                new DelivDate(\"2018-03-24\"),"},{"lineNumber":50,"author":{"gitID":"mattbuot"},"content":"                Collections.emptySet()));"},{"lineNumber":51,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":52,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":53,"author":{"gitID":"mattbuot"},"content":"        command.setData(model, null, null);"},{"lineNumber":54,"author":{"gitID":"mattbuot"},"content":"        assertCommandFailure(command, \"No address has be found, email not sent!\");"},{"lineNumber":55,"author":{"gitID":"mattbuot"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":57,"author":{"gitID":"mattbuot"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"mattbuot"},"content":"    public void executeWithoutFilter()"},{"lineNumber":59,"author":{"gitID":"mattbuot"},"content":"            throws DuplicatePersonException {"},{"lineNumber":60,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":61,"author":{"gitID":"mattbuot"},"content":"        model.addPerson(new Person("},{"lineNumber":62,"author":{"gitID":"mattbuot"},"content":"                new Name(\"Alice\"),"},{"lineNumber":63,"author":{"gitID":"mattbuot"},"content":"                new Phone(\"98765432\"),"},{"lineNumber":64,"author":{"gitID":"mattbuot"},"content":"                new Email(\"alice@gmail.com\"),"},{"lineNumber":65,"author":{"gitID":"mattbuot"},"content":"                new Address(\"NUS\"),"},{"lineNumber":66,"author":{"gitID":"mattbuot"},"content":"                new DelivDate(\"2018-03-24\"),"},{"lineNumber":67,"author":{"gitID":"mattbuot"},"content":"                Collections.emptySet()));"},{"lineNumber":68,"author":{"gitID":"mattbuot"},"content":"        model.addPerson(new Person("},{"lineNumber":69,"author":{"gitID":"mattbuot"},"content":"                new Name(\"Bob\"),"},{"lineNumber":70,"author":{"gitID":"mattbuot"},"content":"                new Phone(\"98765432\"),"},{"lineNumber":71,"author":{"gitID":"mattbuot"},"content":"                new Email(\"bob@gmail.com\"),"},{"lineNumber":72,"author":{"gitID":"mattbuot"},"content":"                new Address(\"NTU\"),"},{"lineNumber":73,"author":{"gitID":"mattbuot"},"content":"                new DelivDate(\"2018-03-25\"),"},{"lineNumber":74,"author":{"gitID":"mattbuot"},"content":"                Collections.emptySet()));"},{"lineNumber":75,"author":{"gitID":"mattbuot"},"content":"        command.setData(model, null, null);"},{"lineNumber":76,"author":{"gitID":"mattbuot"},"content":"        assertCommandFailure(command, \"The list is not filtered!\");"},{"lineNumber":77,"author":{"gitID":"mattbuot"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":79,"author":{"gitID":"mattbuot"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"mattbuot"},"content":"    public void execute()"},{"lineNumber":81,"author":{"gitID":"mattbuot"},"content":"            throws DuplicatePersonException, CommandException {"},{"lineNumber":82,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":83,"author":{"gitID":"mattbuot"},"content":"        model.addPerson(new Person("},{"lineNumber":84,"author":{"gitID":"mattbuot"},"content":"                new Name(\"Alice\"),"},{"lineNumber":85,"author":{"gitID":"mattbuot"},"content":"                new Phone(\"98765432\"),"},{"lineNumber":86,"author":{"gitID":"mattbuot"},"content":"                new Email(\"alice@gmail.com\"),"},{"lineNumber":87,"author":{"gitID":"mattbuot"},"content":"                new Address(\"NUS\"),"},{"lineNumber":88,"author":{"gitID":"mattbuot"},"content":"                new DelivDate(\"2018-03-24\"),"},{"lineNumber":89,"author":{"gitID":"mattbuot"},"content":"                Collections.emptySet()));"},{"lineNumber":90,"author":{"gitID":"mattbuot"},"content":"        model.addPerson(new Person("},{"lineNumber":91,"author":{"gitID":"mattbuot"},"content":"                new Name(\"Bob\"),"},{"lineNumber":92,"author":{"gitID":"mattbuot"},"content":"                new Phone(\"98765432\"),"},{"lineNumber":93,"author":{"gitID":"mattbuot"},"content":"                new Email(\"bob@gmail.com\"),"},{"lineNumber":94,"author":{"gitID":"mattbuot"},"content":"                new Address(\"NTU\"),"},{"lineNumber":95,"author":{"gitID":"mattbuot"},"content":"                new DelivDate(\"2018-03-24\"),"},{"lineNumber":96,"author":{"gitID":"mattbuot"},"content":"                Collections.emptySet()));"},{"lineNumber":97,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":98,"author":{"gitID":"mattbuot"},"content":"        command.setData(model, null, null);"},{"lineNumber":99,"author":{"gitID":"mattbuot"},"content":"        assertCommandResult(command, EmailCommand.MESSAGE_SUCCESS);"},{"lineNumber":100,"author":{"gitID":"mattbuot"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":102,"author":{"gitID":"mattbuot"},"content":"    //@@author"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * Asserts that the result message from the execution of {@code historyCommand} equals to {@code expectedMessage}"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"mattbuot"},"content":"    private void assertCommandResult(EmailCommand emailCommand, String expectedMessage) throws CommandException {"},{"lineNumber":107,"author":{"gitID":"mattbuot"},"content":"        assertEquals(expectedMessage, emailCommand.execute().feedbackToUser);"},{"lineNumber":108,"author":{"gitID":"mattbuot"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":110,"author":{"gitID":"mattbuot"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"mattbuot"},"content":"     * Asserts that an exception is thrown and that the message is the same as {@code expectedMessage}."},{"lineNumber":112,"author":{"gitID":"mattbuot"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"mattbuot"},"content":"    public static void assertCommandFailure(EmailCommand command, String expectedMessage) {"},{"lineNumber":114,"author":{"gitID":"mattbuot"},"content":"        try {"},{"lineNumber":115,"author":{"gitID":"mattbuot"},"content":"            command.execute();"},{"lineNumber":116,"author":{"gitID":"mattbuot"},"content":"        } catch (CommandException pe) {"},{"lineNumber":117,"author":{"gitID":"mattbuot"},"content":"            assertEquals(expectedMessage, pe.getMessage());"},{"lineNumber":118,"author":{"gitID":"mattbuot"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"mattbuot"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"mattbuot"},"content":"}"}],"authorContributionMap":{"mattbuot":108,"-":12}},{"path":"src/test/java/seedu/address/logic/commands/SelectCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code SelectCommand}."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class SelectCommandTest {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"ncaminh"},"content":"        //@@author ncaminh"},{"lineNumber":48,"author":{"gitID":"ncaminh"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":49,"author":{"gitID":"ncaminh"},"content":"        Person thirdPerson \u003d model.getFilteredPersonList().get(2);"},{"lineNumber":50,"author":{"gitID":"ncaminh"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(lastPersonIndex.getZeroBased());"},{"lineNumber":51,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":52,"author":{"gitID":"ncaminh"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON, firstPerson);"},{"lineNumber":53,"author":{"gitID":"ncaminh"},"content":"        assertExecutionSuccess(INDEX_THIRD_PERSON, thirdPerson);"},{"lineNumber":54,"author":{"gitID":"ncaminh"},"content":"        assertExecutionSuccess(lastPersonIndex, lastPerson);"},{"lineNumber":55,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"ncaminh"},"content":"    //@@author"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"ncaminh"},"content":"    //@@author ncaminh"},{"lineNumber":66,"author":{"gitID":"ncaminh"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"ncaminh"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":68,"author":{"gitID":"ncaminh"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":69,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":70,"author":{"gitID":"ncaminh"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":71,"author":{"gitID":"ncaminh"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON, firstPerson);"},{"lineNumber":72,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"ncaminh"},"content":"    //@@author"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PERSON);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PERSON);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommand));"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PERSON);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(1));"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(null));"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(selectSecondCommand));"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"ncaminh"},"content":"    //@@author ncaminh"},{"lineNumber":109,"author":{"gitID":"ncaminh"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"ncaminh"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"},{"lineNumber":111,"author":{"gitID":"ncaminh"},"content":"     * is raised with the correct index."},{"lineNumber":112,"author":{"gitID":"ncaminh"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"ncaminh"},"content":"    private void assertExecutionSuccess(Index index, Person person) {"},{"lineNumber":114,"author":{"gitID":"ncaminh"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":115,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":116,"author":{"gitID":"ncaminh"},"content":"        String personName \u003d person.getName().toString();"},{"lineNumber":117,"author":{"gitID":"ncaminh"},"content":"        try {"},{"lineNumber":118,"author":{"gitID":"ncaminh"},"content":"            CommandResult commandResult \u003d selectCommand.execute();"},{"lineNumber":119,"author":{"gitID":"ncaminh"},"content":"            assertEquals(String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, personName),"},{"lineNumber":120,"author":{"gitID":"ncaminh"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":121,"author":{"gitID":"ncaminh"},"content":"        } catch (CommandException ce) {"},{"lineNumber":122,"author":{"gitID":"ncaminh"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":123,"author":{"gitID":"ncaminh"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":125,"author":{"gitID":"ncaminh"},"content":"        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":126,"author":{"gitID":"ncaminh"},"content":"        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"},{"lineNumber":127,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"ncaminh"},"content":"    //@@author"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            selectCommand.execute();"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * Returns a {@code SelectCommand} with parameters {@code index}."},{"lineNumber":148,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    private SelectCommand prepareCommand(Index index) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d new SelectCommand(index);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        selectCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        return selectCommand;"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ncaminh":40,"-":114}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":35,"author":{"gitID":"ngshikang"},"content":"        JsonUserPassStorage userPassStorage \u003d new JsonUserPassStorage(getTempFilePath(\"tempUserPass\"));"},{"lineNumber":36,"author":{"gitID":"ngshikang"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage, userPassStorage);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private String getTempFilePath(String fileName) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return testFolder.getRoot().getPath() + fileName;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":47,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":48,"author":{"gitID":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":49,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":50,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        original.setGuiSettings(300, 600, 4, 6);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void addressBookReadSave() throws Exception {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":61,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":62,"author":{"gitID":"-"},"content":"         * {@link XmlAddressBookStorage} class."},{"lineNumber":63,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."},{"lineNumber":64,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        storageManager.saveAddressBook(original);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void getAddressBookFilePath() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(\"dummy\"),"},{"lineNumber":80,"author":{"gitID":"ngshikang"},"content":"                                             new JsonUserPrefsStorage(\"dummy\"),"},{"lineNumber":81,"author":{"gitID":"ngshikang"},"content":"                                             new JsonUserPassStorage(getTempFilePath(\"dummy\")));"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new AddressBook()));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * A Stub class to throw an exception when the save method is called"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    class XmlAddressBookStorageExceptionThrowingStub extends XmlAddressBookStorage {"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        public XmlAddressBookStorageExceptionThrowingStub(String filePath) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            super(filePath);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            throw new IOException(\"dummy exception\");"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ngshikang":4,"-":99}},{"path":"src/test/java/seedu/address/logic/commands/FilterCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"meerakanani10"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.Command.getMessageForPersonListShownSummary;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitID":"meerakanani10"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"meerakanani10"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"meerakanani10"},"content":"import seedu.address.model.person.DatePredicate;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":24,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":25,"author":{"gitID":"meerakanani10"},"content":"//@@author meerakanani10"},{"lineNumber":26,"author":{"gitID":"meerakanani10"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"meerakanani10"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":28,"author":{"gitID":"meerakanani10"},"content":" */"},{"lineNumber":29,"author":{"gitID":"meerakanani10"},"content":"public class FilterCommandTest {"},{"lineNumber":30,"author":{"gitID":"meerakanani10"},"content":"    @Rule"},{"lineNumber":31,"author":{"gitID":"meerakanani10"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":32,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":33,"author":{"gitID":"meerakanani10"},"content":"    private Model model;"},{"lineNumber":34,"author":{"gitID":"meerakanani10"},"content":"    @Before"},{"lineNumber":35,"author":{"gitID":"meerakanani10"},"content":"    public void setUp() {"},{"lineNumber":36,"author":{"gitID":"meerakanani10"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"meerakanani10"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":39,"author":{"gitID":"meerakanani10"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"meerakanani10"},"content":"    public void equals() {"},{"lineNumber":41,"author":{"gitID":"meerakanani10"},"content":"        DatePredicate firstPredicate \u003d"},{"lineNumber":42,"author":{"gitID":"meerakanani10"},"content":"                new DatePredicate(Collections.singletonList(\"2018-03-23\"));"},{"lineNumber":43,"author":{"gitID":"meerakanani10"},"content":"        DatePredicate secondPredicate \u003d"},{"lineNumber":44,"author":{"gitID":"meerakanani10"},"content":"                new DatePredicate(Collections.singletonList(\"2018-03-24\"));"},{"lineNumber":45,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":46,"author":{"gitID":"meerakanani10"},"content":"        FilterCommand filterFirstCommand \u003d new FilterCommand(firstPredicate);"},{"lineNumber":47,"author":{"gitID":"meerakanani10"},"content":"        FilterCommand filterSecondCommand \u003d new FilterCommand(secondPredicate);"},{"lineNumber":48,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":49,"author":{"gitID":"meerakanani10"},"content":"        // same object -\u003e returns true"},{"lineNumber":50,"author":{"gitID":"meerakanani10"},"content":"        assertTrue(filterFirstCommand.equals(filterFirstCommand));"},{"lineNumber":51,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":52,"author":{"gitID":"meerakanani10"},"content":"        // same values -\u003e returns true"},{"lineNumber":53,"author":{"gitID":"meerakanani10"},"content":"        FilterCommand filterFirstCommandCopy \u003d new FilterCommand(firstPredicate);"},{"lineNumber":54,"author":{"gitID":"meerakanani10"},"content":"        assertTrue(filterFirstCommand.equals(filterFirstCommandCopy));"},{"lineNumber":55,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":56,"author":{"gitID":"meerakanani10"},"content":"        // different types -\u003e returns false"},{"lineNumber":57,"author":{"gitID":"meerakanani10"},"content":"        assertFalse(filterFirstCommand.equals(1));"},{"lineNumber":58,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":59,"author":{"gitID":"meerakanani10"},"content":"        // null -\u003e returns false"},{"lineNumber":60,"author":{"gitID":"meerakanani10"},"content":"        assertFalse(filterFirstCommand.equals(null));"},{"lineNumber":61,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":62,"author":{"gitID":"meerakanani10"},"content":"        // different person -\u003e returns false"},{"lineNumber":63,"author":{"gitID":"meerakanani10"},"content":"        assertFalse(filterFirstCommand.equals(filterSecondCommand));"},{"lineNumber":64,"author":{"gitID":"meerakanani10"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":66,"author":{"gitID":"ncaminh"},"content":"    //@@author ncaminh"},{"lineNumber":67,"author":{"gitID":"ncaminh"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"ncaminh"},"content":"    public void execute_noPersonMatchesDate() {"},{"lineNumber":69,"author":{"gitID":"ncaminh"},"content":"        DatePredicate datePredicate \u003d"},{"lineNumber":70,"author":{"gitID":"ncaminh"},"content":"                new DatePredicate(Collections.singletonList(\"2019-03-23\"));"},{"lineNumber":71,"author":{"gitID":"ncaminh"},"content":"        FilterCommand filterCommand \u003d prepareFilterCommand(datePredicate);"},{"lineNumber":72,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":73,"author":{"gitID":"ncaminh"},"content":"        try {"},{"lineNumber":74,"author":{"gitID":"ncaminh"},"content":"            CommandResult actualCommandResult \u003d filterCommand.execute();"},{"lineNumber":75,"author":{"gitID":"ncaminh"},"content":"            CommandResult expectedCommandResult \u003d"},{"lineNumber":76,"author":{"gitID":"ncaminh"},"content":"                    new CommandResult(getMessageForPersonListShownSummary(0));"},{"lineNumber":77,"author":{"gitID":"ncaminh"},"content":"            assertEquals(actualCommandResult.feedbackToUser, expectedCommandResult.feedbackToUser);"},{"lineNumber":78,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":79,"author":{"gitID":"ncaminh"},"content":"        } catch (CommandException | IOException ce) {"},{"lineNumber":80,"author":{"gitID":"ncaminh"},"content":"            ce.printStackTrace();"},{"lineNumber":81,"author":{"gitID":"ncaminh"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":82,"author":{"gitID":"ncaminh"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":85,"author":{"gitID":"ncaminh"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"ncaminh"},"content":"    public void execute_allAddressesCannotBeFound() {"},{"lineNumber":87,"author":{"gitID":"ncaminh"},"content":"        DatePredicate datePredicate \u003d"},{"lineNumber":88,"author":{"gitID":"ncaminh"},"content":"                new DatePredicate(Collections.singletonList(\"2018-03-25\"));"},{"lineNumber":89,"author":{"gitID":"ncaminh"},"content":"        FilterCommand filterCommand \u003d prepareFilterCommand(datePredicate);"},{"lineNumber":90,"author":{"gitID":"ncaminh"},"content":"        model.updateFilteredPersonList(datePredicate);"},{"lineNumber":91,"author":{"gitID":"ncaminh"},"content":"        int numberOfPersonsListed \u003d model.getFilteredPersonList().size();"},{"lineNumber":92,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":93,"author":{"gitID":"ncaminh"},"content":"        try {"},{"lineNumber":94,"author":{"gitID":"ncaminh"},"content":"            CommandResult actualCommandResult \u003d filterCommand.execute();"},{"lineNumber":95,"author":{"gitID":"ncaminh"},"content":"            String shown \u003d getMessageForPersonListShownSummary(numberOfPersonsListed)"},{"lineNumber":96,"author":{"gitID":"ncaminh"},"content":"                    + \"\\nAll the addresses on \""},{"lineNumber":97,"author":{"gitID":"ncaminh"},"content":"                    + model.getFilteredPersonList().get(0).getDate().toString()"},{"lineNumber":98,"author":{"gitID":"ncaminh"},"content":"                    + \" cannot be found.\";"},{"lineNumber":99,"author":{"gitID":"ncaminh"},"content":"            CommandResult expectedCommandResult \u003d"},{"lineNumber":100,"author":{"gitID":"ncaminh"},"content":"                    new CommandResult(shown);"},{"lineNumber":101,"author":{"gitID":"ncaminh"},"content":"            assertEquals(actualCommandResult.feedbackToUser, expectedCommandResult.feedbackToUser);"},{"lineNumber":102,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":103,"author":{"gitID":"ncaminh"},"content":"        } catch (CommandException | IOException ce) {"},{"lineNumber":104,"author":{"gitID":"ncaminh"},"content":"            ce.printStackTrace();"},{"lineNumber":105,"author":{"gitID":"ncaminh"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":106,"author":{"gitID":"ncaminh"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":109,"author":{"gitID":"ncaminh"},"content":"    @Test"},{"lineNumber":110,"author":{"gitID":"ncaminh"},"content":"    public void execute_someAddressesCannotBeFound() {"},{"lineNumber":111,"author":{"gitID":"ncaminh"},"content":"        DatePredicate datePredicate \u003d"},{"lineNumber":112,"author":{"gitID":"ncaminh"},"content":"                new DatePredicate(Collections.singletonList(\"2018-03-23\"));"},{"lineNumber":113,"author":{"gitID":"ncaminh"},"content":"        FilterCommand filterCommand \u003d prepareFilterCommand(datePredicate);"},{"lineNumber":114,"author":{"gitID":"ncaminh"},"content":"        model.updateFilteredPersonList(datePredicate);"},{"lineNumber":115,"author":{"gitID":"ncaminh"},"content":"        int numberOfPersonsListed \u003d model.getFilteredPersonList().size();"},{"lineNumber":116,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":117,"author":{"gitID":"ncaminh"},"content":"        try {"},{"lineNumber":118,"author":{"gitID":"ncaminh"},"content":"            CommandResult actualCommandResult \u003d filterCommand.execute();"},{"lineNumber":119,"author":{"gitID":"ncaminh"},"content":"            String shown \u003d getMessageForPersonListShownSummary(numberOfPersonsListed)"},{"lineNumber":120,"author":{"gitID":"ncaminh"},"content":"                    + \"\\nAt least one address on \""},{"lineNumber":121,"author":{"gitID":"ncaminh"},"content":"                    + model.getFilteredPersonList().get(0).getDate().toString()"},{"lineNumber":122,"author":{"gitID":"ncaminh"},"content":"                    + \" cannot be found.\";"},{"lineNumber":123,"author":{"gitID":"ncaminh"},"content":"            CommandResult expectedCommandResult \u003d"},{"lineNumber":124,"author":{"gitID":"ncaminh"},"content":"                    new CommandResult(shown);"},{"lineNumber":125,"author":{"gitID":"ncaminh"},"content":"            assertEquals(actualCommandResult.feedbackToUser, expectedCommandResult.feedbackToUser);"},{"lineNumber":126,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":127,"author":{"gitID":"ncaminh"},"content":"        } catch (CommandException | IOException ce) {"},{"lineNumber":128,"author":{"gitID":"ncaminh"},"content":"            ce.printStackTrace();"},{"lineNumber":129,"author":{"gitID":"ncaminh"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":130,"author":{"gitID":"ncaminh"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":133,"author":{"gitID":"ncaminh"},"content":"    @Test"},{"lineNumber":134,"author":{"gitID":"ncaminh"},"content":"    public void execute_allAddressesCanBeFound() {"},{"lineNumber":135,"author":{"gitID":"ncaminh"},"content":"        DatePredicate datePredicate \u003d"},{"lineNumber":136,"author":{"gitID":"ncaminh"},"content":"                new DatePredicate(Collections.singletonList(\"2018-03-28\"));"},{"lineNumber":137,"author":{"gitID":"ncaminh"},"content":"        FilterCommand filterCommand \u003d prepareFilterCommand(datePredicate);"},{"lineNumber":138,"author":{"gitID":"ncaminh"},"content":"        model.updateFilteredPersonList(datePredicate);"},{"lineNumber":139,"author":{"gitID":"ncaminh"},"content":"        int numberOfPersonsListed \u003d model.getFilteredPersonList().size();"},{"lineNumber":140,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":141,"author":{"gitID":"ncaminh"},"content":"        try {"},{"lineNumber":142,"author":{"gitID":"ncaminh"},"content":"            CommandResult actualCommandResult \u003d filterCommand.execute();"},{"lineNumber":143,"author":{"gitID":"ncaminh"},"content":"            CommandResult expectedCommandResult \u003d"},{"lineNumber":144,"author":{"gitID":"ncaminh"},"content":"                    new CommandResult(getMessageForPersonListShownSummary(numberOfPersonsListed));"},{"lineNumber":145,"author":{"gitID":"ncaminh"},"content":"            assertEquals(actualCommandResult.feedbackToUser, expectedCommandResult.feedbackToUser);"},{"lineNumber":146,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":147,"author":{"gitID":"ncaminh"},"content":"        } catch (CommandException | IOException ce) {"},{"lineNumber":148,"author":{"gitID":"ncaminh"},"content":"            ce.printStackTrace();"},{"lineNumber":149,"author":{"gitID":"ncaminh"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":150,"author":{"gitID":"ncaminh"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":153,"author":{"gitID":"ncaminh"},"content":"    private FilterCommand prepareFilterCommand(DatePredicate datePredicate) {"},{"lineNumber":154,"author":{"gitID":"ncaminh"},"content":"        FilterCommand filterCommand \u003d new FilterCommand(datePredicate);"},{"lineNumber":155,"author":{"gitID":"ncaminh"},"content":"        filterCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":156,"author":{"gitID":"ncaminh"},"content":"        return filterCommand;"},{"lineNumber":157,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"ncaminh"},"content":"}"}],"authorContributionMap":{"ncaminh":93,"meerakanani10":49,"-":16}},{"path":"src/test/java/seedu/address/logic/AutocompleterTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":5,"author":{"gitID":"mattbuot"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":7,"author":{"gitID":"mattbuot"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"mattbuot"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":13,"author":{"gitID":"mattbuot"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":14,"author":{"gitID":"mattbuot"},"content":"import seedu.address.model.person.DelivDate;"},{"lineNumber":15,"author":{"gitID":"mattbuot"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":16,"author":{"gitID":"mattbuot"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitID":"mattbuot"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"mattbuot"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":20,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":21,"author":{"gitID":"mattbuot"},"content":"//@@author mattbuot"},{"lineNumber":22,"author":{"gitID":"mattbuot"},"content":"public class AutocompleterTest {"},{"lineNumber":23,"author":{"gitID":"mattbuot"},"content":"    private Model model;"},{"lineNumber":24,"author":{"gitID":"mattbuot"},"content":"    private Autocompleter autocompleter;"},{"lineNumber":25,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":26,"author":{"gitID":"mattbuot"},"content":"    @Before"},{"lineNumber":27,"author":{"gitID":"mattbuot"},"content":"    public void setUp() {"},{"lineNumber":28,"author":{"gitID":"mattbuot"},"content":"        model \u003d new ModelManager();"},{"lineNumber":29,"author":{"gitID":"mattbuot"},"content":"        autocompleter \u003d new Autocompleter(model.getAddressBook().getPersonList());"},{"lineNumber":30,"author":{"gitID":"mattbuot"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":32,"author":{"gitID":"mattbuot"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"mattbuot"},"content":"    public void completeCommand() {"},{"lineNumber":34,"author":{"gitID":"mattbuot"},"content":"        if (SelectCommand.COMMAND_WORD.length() \u003e 2) {"},{"lineNumber":35,"author":{"gitID":"mattbuot"},"content":"            String commandPrefix \u003d SelectCommand.COMMAND_WORD.substring(0, SelectCommand.COMMAND_WORD.length() - 1);"},{"lineNumber":36,"author":{"gitID":"mattbuot"},"content":"            assertEquals(SelectCommand.COMMAND_WORD.substring(SelectCommand.COMMAND_WORD.length() - 1),"},{"lineNumber":37,"author":{"gitID":"mattbuot"},"content":"                    autocompleter.autocomplete(commandPrefix));"},{"lineNumber":38,"author":{"gitID":"mattbuot"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"mattbuot"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":41,"author":{"gitID":"mattbuot"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"mattbuot"},"content":"    public void completeField() throws DuplicatePersonException {"},{"lineNumber":43,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":44,"author":{"gitID":"mattbuot"},"content":"        model.addPerson("},{"lineNumber":45,"author":{"gitID":"mattbuot"},"content":"                new Person("},{"lineNumber":46,"author":{"gitID":"mattbuot"},"content":"                        new Name(\"John\"),"},{"lineNumber":47,"author":{"gitID":"mattbuot"},"content":"                        new Phone(\"98765432\"),"},{"lineNumber":48,"author":{"gitID":"mattbuot"},"content":"                        new Email(\"johndoe@test.com\"),"},{"lineNumber":49,"author":{"gitID":"mattbuot"},"content":"                        new Address(\"NUS\"),"},{"lineNumber":50,"author":{"gitID":"mattbuot"},"content":"                        new DelivDate(\"2018-03-24\"),"},{"lineNumber":51,"author":{"gitID":"mattbuot"},"content":"                        Collections.emptySet()));"},{"lineNumber":52,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":53,"author":{"gitID":"mattbuot"},"content":"        autocompleter \u003d new Autocompleter(model.getAddressBook().getPersonList());"},{"lineNumber":54,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":55,"author":{"gitID":"mattbuot"},"content":"        String query \u003d \"find John\";"},{"lineNumber":56,"author":{"gitID":"mattbuot"},"content":"        String prefix \u003d query.substring(0, query.length() - 3);"},{"lineNumber":57,"author":{"gitID":"mattbuot"},"content":"        assertEquals(query.substring(query.length() - 3), autocompleter.autocomplete(prefix));"},{"lineNumber":58,"author":{"gitID":"mattbuot"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":60,"author":{"gitID":"mattbuot"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"mattbuot"},"content":"    public void completeOptions() throws DuplicatePersonException {"},{"lineNumber":62,"author":{"gitID":"mattbuot"},"content":"        model.addPerson("},{"lineNumber":63,"author":{"gitID":"mattbuot"},"content":"                new Person("},{"lineNumber":64,"author":{"gitID":"mattbuot"},"content":"                        new Name(\"John\"),"},{"lineNumber":65,"author":{"gitID":"mattbuot"},"content":"                        new Phone(\"98765432\"),"},{"lineNumber":66,"author":{"gitID":"mattbuot"},"content":"                        new Email(\"johndoe@test.com\"),"},{"lineNumber":67,"author":{"gitID":"mattbuot"},"content":"                        new Address(\"NUS\"),"},{"lineNumber":68,"author":{"gitID":"mattbuot"},"content":"                        new DelivDate(\"2018-03-24\"),"},{"lineNumber":69,"author":{"gitID":"mattbuot"},"content":"                        Collections.emptySet()));"},{"lineNumber":70,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":71,"author":{"gitID":"mattbuot"},"content":"        autocompleter \u003d new Autocompleter(model.getAddressBook().getPersonList());"},{"lineNumber":72,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":73,"author":{"gitID":"mattbuot"},"content":"        String query \u003d \"add n/\";"},{"lineNumber":74,"author":{"gitID":"mattbuot"},"content":"        query +\u003d autocompleter.autocomplete(query);"},{"lineNumber":75,"author":{"gitID":"mattbuot"},"content":"        query +\u003d \" p/\";"},{"lineNumber":76,"author":{"gitID":"mattbuot"},"content":"        query +\u003d autocompleter.autocomplete(query);"},{"lineNumber":77,"author":{"gitID":"mattbuot"},"content":"        query +\u003d \" e/\";"},{"lineNumber":78,"author":{"gitID":"mattbuot"},"content":"        query +\u003d autocompleter.autocomplete(query);"},{"lineNumber":79,"author":{"gitID":"mattbuot"},"content":"        query +\u003d \" a/\";"},{"lineNumber":80,"author":{"gitID":"mattbuot"},"content":"        query +\u003d autocompleter.autocomplete(query);"},{"lineNumber":81,"author":{"gitID":"mattbuot"},"content":"        query +\u003d \" d/\";"},{"lineNumber":82,"author":{"gitID":"mattbuot"},"content":"        query +\u003d autocompleter.autocomplete(query);"},{"lineNumber":83,"author":{"gitID":"mattbuot"},"content":"        assertEquals(\"add n/John p/98765432 e/johndoe@test.com a/NUS d/2018-03-24\", query);"},{"lineNumber":84,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":85,"author":{"gitID":"mattbuot"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"mattbuot"},"content":"}"}],"authorContributionMap":{"mattbuot":79,"-":7}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class XmlAdaptedPersonTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":31,"author":{"gitID":"meerakanani10"},"content":"    private static final String VALID_DATE \u003d BENSON.getDate().toString();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":45,"author":{"gitID":"meerakanani10"},"content":"                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DATE, VALID_TAGS);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":52,"author":{"gitID":"meerakanani10"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DATE,"},{"lineNumber":53,"author":{"gitID":"meerakanani10"},"content":"                VALID_TAGS);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":61,"author":{"gitID":"meerakanani10"},"content":"                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DATE, VALID_TAGS);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":68,"author":{"gitID":"meerakanani10"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":69,"author":{"gitID":"meerakanani10"},"content":"                VALID_DATE, VALID_TAGS);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":77,"author":{"gitID":"meerakanani10"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_DATE, VALID_TAGS);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":84,"author":{"gitID":"meerakanani10"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_DATE,"},{"lineNumber":85,"author":{"gitID":"meerakanani10"},"content":"                VALID_TAGS);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":93,"author":{"gitID":"meerakanani10"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_DATE, VALID_TAGS);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":100,"author":{"gitID":"meerakanani10"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_DATE,"},{"lineNumber":101,"author":{"gitID":"meerakanani10"},"content":"                VALID_TAGS);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":111,"author":{"gitID":"meerakanani10"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DATE, invalidTags);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"meerakanani10":14,"-":101}},{"path":"src/test/java/seedu/address/storage/XmlSerializableAddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBookTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlSerializableAddressBookTest/\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final File TYPICAL_PERSONS_FILE \u003d new File(TEST_DATA_FOLDER + \"typicalPersonsAddressBook.xml\");"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonAddressBook.xml\");"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final File INVALID_TAG_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidTagAddressBook.xml\");"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void toModelType_typicalPersonsFile_success() throws Exception {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_PERSONS_FILE,"},{"lineNumber":30,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"},{"lineNumber":33,"author":{"gitID":"meerakanani10"},"content":"        // error due to extra white space at the end of expected therefore compare as strings"},{"lineNumber":34,"author":{"gitID":"meerakanani10"},"content":"        assertEquals(addressBookFromFile.toString(), typicalPersonsAddressBook.toString());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_PERSON_FILE,"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTagFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_TAG_FILE,"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"meerakanani10":2,"-":50}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        descriptor.setPhone(person.getPhone());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        descriptor.setEmail(person.getEmail());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        descriptor.setAddress(person.getAddress());"},{"lineNumber":39,"author":{"gitID":"meerakanani10"},"content":"        descriptor.setDate(person.getDate());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        descriptor.setTags(person.getTags());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * that we are building."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return descriptor;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"meerakanani10":1,"-":87}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitID":"meerakanani10"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DELIV_DATE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * A utility class for Person."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class PersonUtil {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static String getAddCommand(Person person) {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static String getPersonDetails(Person person) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"},{"lineNumber":34,"author":{"gitID":"meerakanani10"},"content":"        sb.append(PREFIX_DELIV_DATE + person.getDate().value + \" \");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":36,"author":{"gitID":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"meerakanani10":2,"-":38}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":7,"author":{"gitID":"meerakanani10"},"content":"import seedu.address.model.person.DelivDate;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class PersonBuilder {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":24,"author":{"gitID":"meerakanani10"},"content":"    public static final String DEFAULT_DATE \u003d \"2018-03-23\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private Email email;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private Address address;"},{"lineNumber":31,"author":{"gitID":"meerakanani10"},"content":"    private DelivDate date;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":39,"author":{"gitID":"meerakanani10"},"content":"        date \u003d new DelivDate(DEFAULT_DATE);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":51,"author":{"gitID":"meerakanani10"},"content":"        date \u003d personToCopy.getDate();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"meerakanani10"},"content":"    public PersonBuilder withDate(String date) {"},{"lineNumber":99,"author":{"gitID":"meerakanani10"},"content":"        this.date \u003d new DelivDate(date);"},{"lineNumber":100,"author":{"gitID":"meerakanani10"},"content":"        return this;"},{"lineNumber":101,"author":{"gitID":"meerakanani10"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":103,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public Person build() {"},{"lineNumber":105,"author":{"gitID":"meerakanani10"},"content":"        return new Person(name, phone, email, address, date, tags);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"meerakanani10":12,"-":96}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"meerakanani10"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_AMY;"},{"lineNumber":6,"author":{"gitID":"meerakanani10"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class TypicalPersons {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            .withAddress(\"313, Clementi Ave 2, #02-25\").withEmail(\"alice@example.com\")"},{"lineNumber":31,"author":{"gitID":"meerakanani10"},"content":"            .withPhone(\"85355255\").withDate(\"2018-03-23\")"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            .withTags(\"friends\").build();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":35,"author":{"gitID":"meerakanani10"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\").withDate(\"2018-03-29\")"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").build();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":38,"author":{"gitID":"meerakanani10"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withDate(\"2018-03-25\").build();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":40,"author":{"gitID":"meerakanani10"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withDate(\"2018-03-23\").build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":42,"author":{"gitID":"meerakanani10"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withDate(\"2018-03-24\").build();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":44,"author":{"gitID":"meerakanani10"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withDate(\"2018-03-24\").build();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"50 Nanyang Ave, 639798\").withDate(\"2018-03-28\").build();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":50,"author":{"gitID":"meerakanani10"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withDate(\"2018-03-24\").build();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":52,"author":{"gitID":"meerakanani10"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withDate(\"2018-03-25\").build();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":56,"author":{"gitID":"meerakanani10"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withDate(VALID_DATE_AMY)"},{"lineNumber":57,"author":{"gitID":"meerakanani10"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":59,"author":{"gitID":"meerakanani10"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withDate(VALID_DATE_BOB)"},{"lineNumber":60,"author":{"gitID":"meerakanani10"},"content":"            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"meerakanani10":14,"-":70}},{"path":"src/test/java/seedu/address/login/UserPassTest.java","lines":[{"lineNumber":1,"author":{"gitID":"ngshikang"},"content":"package seedu.address.login;"},{"lineNumber":2,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":3,"author":{"gitID":"ngshikang"},"content":"import org.junit.Assert;"},{"lineNumber":4,"author":{"gitID":"ngshikang"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":6,"author":{"gitID":"ngshikang"},"content":"//@@author ngshikang"},{"lineNumber":7,"author":{"gitID":"ngshikang"},"content":"public class UserPassTest {"},{"lineNumber":8,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":9,"author":{"gitID":"ngshikang"},"content":"    @Test"},{"lineNumber":10,"author":{"gitID":"ngshikang"},"content":"    public void createUserPass() {"},{"lineNumber":11,"author":{"gitID":"ngshikang"},"content":"        UserPass testProfile \u003d new UserPass(\"user\", \"pass\");"},{"lineNumber":12,"author":{"gitID":"ngshikang"},"content":"        Assert.assertEquals(testProfile.getUsername(), \"user\");"},{"lineNumber":13,"author":{"gitID":"ngshikang"},"content":"        Assert.assertEquals(testProfile.getPassword(), UserPass.hash(\"pass\"));"},{"lineNumber":14,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":16,"author":{"gitID":"ngshikang"},"content":"}"}],"authorContributionMap":{"ngshikang":16}},{"path":"src/test/java/seedu/address/login/UserPassStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"ngshikang"},"content":"package seedu.address.login;"},{"lineNumber":2,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":3,"author":{"gitID":"ngshikang"},"content":"import org.junit.Assert;"},{"lineNumber":4,"author":{"gitID":"ngshikang"},"content":"import org.junit.Rule;"},{"lineNumber":5,"author":{"gitID":"ngshikang"},"content":"import org.junit.Test;"},{"lineNumber":6,"author":{"gitID":"ngshikang"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":7,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":8,"author":{"gitID":"ngshikang"},"content":"import seedu.address.storage.JsonUserPassStorage;"},{"lineNumber":9,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":10,"author":{"gitID":"ngshikang"},"content":"//@@author ngshikang"},{"lineNumber":11,"author":{"gitID":"ngshikang"},"content":"public class UserPassStorageTest {"},{"lineNumber":12,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":13,"author":{"gitID":"ngshikang"},"content":"    @Rule"},{"lineNumber":14,"author":{"gitID":"ngshikang"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":15,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":16,"author":{"gitID":"ngshikang"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"ngshikang"},"content":"    public void addUserPassToStorage() {"},{"lineNumber":18,"author":{"gitID":"ngshikang"},"content":"        UserPass testProfile \u003d new UserPass(\"user\", \"pass\");"},{"lineNumber":19,"author":{"gitID":"ngshikang"},"content":"        JsonUserPassStorage userPassStorage \u003d new JsonUserPassStorage(getTempFilePath(\"tempUserPass\"));"},{"lineNumber":20,"author":{"gitID":"ngshikang"},"content":"        userPassStorage.put(testProfile);"},{"lineNumber":21,"author":{"gitID":"ngshikang"},"content":"        Assert.assertTrue(userPassStorage.containsKey(testProfile.getUsername()));"},{"lineNumber":22,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":24,"author":{"gitID":"ngshikang"},"content":"    private String getTempFilePath(String fileName) {"},{"lineNumber":25,"author":{"gitID":"ngshikang"},"content":"        return testFolder.getRoot().getPath() + fileName;"},{"lineNumber":26,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":28,"author":{"gitID":"ngshikang"},"content":"}"}],"authorContributionMap":{"ngshikang":28}},{"path":"src/test/java/seedu/address/logic/commands/DistanceCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowRouteFromHeadQuarterToOneEvent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowRouteFromOneToAnotherEvent;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.GetDistance;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"ncaminh"},"content":"//@@author ncaminh"},{"lineNumber":34,"author":{"gitID":"ncaminh"},"content":"/**"},{"lineNumber":35,"author":{"gitID":"ncaminh"},"content":" * Contains integration tests (interaction with the Model) for {@code DistanceCommand}."},{"lineNumber":36,"author":{"gitID":"ncaminh"},"content":" */"},{"lineNumber":37,"author":{"gitID":"ncaminh"},"content":"public class DistanceCommandTest {"},{"lineNumber":38,"author":{"gitID":"ncaminh"},"content":"    @Rule"},{"lineNumber":39,"author":{"gitID":"ncaminh"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":40,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":41,"author":{"gitID":"ncaminh"},"content":"    private Model model;"},{"lineNumber":42,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":43,"author":{"gitID":"ncaminh"},"content":"    @Before"},{"lineNumber":44,"author":{"gitID":"ncaminh"},"content":"    public void setUp() {"},{"lineNumber":45,"author":{"gitID":"ncaminh"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":46,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":48,"author":{"gitID":"ncaminh"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"ncaminh"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":50,"author":{"gitID":"ncaminh"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":51,"author":{"gitID":"ncaminh"},"content":"        Index lastPersonIndex \u003d Index.fromOneBased(lastShownList.size());"},{"lineNumber":52,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":53,"author":{"gitID":"ncaminh"},"content":"        Person firstPerson \u003d lastShownList.get(0);"},{"lineNumber":54,"author":{"gitID":"ncaminh"},"content":"        Person secondPerson \u003d lastShownList.get(1);"},{"lineNumber":55,"author":{"gitID":"ncaminh"},"content":"        Person lastPerson \u003d lastShownList.get(lastPersonIndex.getZeroBased());"},{"lineNumber":56,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":57,"author":{"gitID":"ncaminh"},"content":"        assertOnePersonExecutionSuccess(firstPerson, INDEX_FIRST_PERSON);"},{"lineNumber":58,"author":{"gitID":"ncaminh"},"content":"        assertOnePersonExecutionSuccess(secondPerson, INDEX_SECOND_PERSON);"},{"lineNumber":59,"author":{"gitID":"ncaminh"},"content":"        assertOnePersonExecutionSuccess(lastPerson, lastPersonIndex);"},{"lineNumber":60,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":61,"author":{"gitID":"ncaminh"},"content":"        assertTwoPersonExecutionSuccess(firstPerson, INDEX_FIRST_PERSON, secondPerson, INDEX_SECOND_PERSON);"},{"lineNumber":62,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":64,"author":{"gitID":"ncaminh"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"ncaminh"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":66,"author":{"gitID":"ncaminh"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":67,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":68,"author":{"gitID":"ncaminh"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":69,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":71,"author":{"gitID":"ncaminh"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"ncaminh"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":73,"author":{"gitID":"ncaminh"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":74,"author":{"gitID":"ncaminh"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":75,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":76,"author":{"gitID":"ncaminh"},"content":"        assertOnePersonExecutionSuccess(lastShownList.get(0), INDEX_FIRST_PERSON);"},{"lineNumber":77,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":79,"author":{"gitID":"ncaminh"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"ncaminh"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":81,"author":{"gitID":"ncaminh"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":82,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":83,"author":{"gitID":"ncaminh"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":84,"author":{"gitID":"ncaminh"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":85,"author":{"gitID":"ncaminh"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":86,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":87,"author":{"gitID":"ncaminh"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":88,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":90,"author":{"gitID":"ncaminh"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"ncaminh"},"content":"    public void equals() {"},{"lineNumber":92,"author":{"gitID":"ncaminh"},"content":"        DistanceCommand distanceFirstCommand \u003d new DistanceCommand(INDEX_FIRST_PERSON);"},{"lineNumber":93,"author":{"gitID":"ncaminh"},"content":"        DistanceCommand distanceSecondCommand \u003d new DistanceCommand(INDEX_SECOND_PERSON);"},{"lineNumber":94,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":95,"author":{"gitID":"ncaminh"},"content":"        // same object -\u003e returns true"},{"lineNumber":96,"author":{"gitID":"ncaminh"},"content":"        assertTrue(distanceFirstCommand.equals(distanceFirstCommand));"},{"lineNumber":97,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":98,"author":{"gitID":"ncaminh"},"content":"        // same values -\u003e returns true"},{"lineNumber":99,"author":{"gitID":"ncaminh"},"content":"        DistanceCommand distanceFirstCommandCopy \u003d new DistanceCommand(INDEX_FIRST_PERSON);"},{"lineNumber":100,"author":{"gitID":"ncaminh"},"content":"        assertTrue(distanceFirstCommand.equals(distanceFirstCommandCopy));"},{"lineNumber":101,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":102,"author":{"gitID":"ncaminh"},"content":"        // different types -\u003e returns false"},{"lineNumber":103,"author":{"gitID":"ncaminh"},"content":"        assertFalse(distanceFirstCommand.equals(1));"},{"lineNumber":104,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":105,"author":{"gitID":"ncaminh"},"content":"        // null -\u003e returns false"},{"lineNumber":106,"author":{"gitID":"ncaminh"},"content":"        assertFalse(distanceFirstCommand.equals(null));"},{"lineNumber":107,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":108,"author":{"gitID":"ncaminh"},"content":"        // different person -\u003e returns false"},{"lineNumber":109,"author":{"gitID":"ncaminh"},"content":"        assertFalse(distanceFirstCommand.equals(distanceSecondCommand));"},{"lineNumber":110,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":112,"author":{"gitID":"ncaminh"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"ncaminh"},"content":"     * Executes a {@code DistanceCommand} with the given {@code person and index}"},{"lineNumber":114,"author":{"gitID":"ncaminh"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"ncaminh"},"content":"    private void assertOnePersonExecutionSuccess(Person person, Index index) {"},{"lineNumber":116,"author":{"gitID":"ncaminh"},"content":"        DistanceCommand distanceCommand \u003d prepareOnePersonCommand(index);"},{"lineNumber":117,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":118,"author":{"gitID":"ncaminh"},"content":"        try {"},{"lineNumber":119,"author":{"gitID":"ncaminh"},"content":"            CommandResult commandResult \u003d distanceCommand.execute();"},{"lineNumber":120,"author":{"gitID":"ncaminh"},"content":"            String address \u003d person.getAddress().toString();"},{"lineNumber":121,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":122,"author":{"gitID":"ncaminh"},"content":"            //Trim address"},{"lineNumber":123,"author":{"gitID":"ncaminh"},"content":"            address \u003d trimAddress(address);"},{"lineNumber":124,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":125,"author":{"gitID":"ncaminh"},"content":"            String personName \u003d person.getName().toString();"},{"lineNumber":126,"author":{"gitID":"ncaminh"},"content":"            String headQuarterAddress \u003d \"Kent Ridge MRT\";"},{"lineNumber":127,"author":{"gitID":"ncaminh"},"content":"            GetDistance route \u003d new GetDistance();"},{"lineNumber":128,"author":{"gitID":"ncaminh"},"content":"            Double distance \u003d route.getDistance(headQuarterAddress, address);"},{"lineNumber":129,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":130,"author":{"gitID":"ncaminh"},"content":"            ShowRouteFromHeadQuarterToOneEvent lastEvent \u003d"},{"lineNumber":131,"author":{"gitID":"ncaminh"},"content":"                    (ShowRouteFromHeadQuarterToOneEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":132,"author":{"gitID":"ncaminh"},"content":"            assertEquals(address, lastEvent.destination);"},{"lineNumber":133,"author":{"gitID":"ncaminh"},"content":"            assertEquals(String.format(DistanceCommand.MESSAGE_DISTANCE_FROM_HQ_SUCCESS, personName, distance),"},{"lineNumber":134,"author":{"gitID":"ncaminh"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":135,"author":{"gitID":"ncaminh"},"content":"        } catch (Exception ce) {"},{"lineNumber":136,"author":{"gitID":"ncaminh"},"content":"            System.out.println(ce.getMessage());"},{"lineNumber":137,"author":{"gitID":"ncaminh"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":138,"author":{"gitID":"ncaminh"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":141,"author":{"gitID":"ncaminh"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"ncaminh"},"content":"     * Executes a {@code DistanceCommand} with the given {@code persons and indexes}"},{"lineNumber":143,"author":{"gitID":"ncaminh"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"ncaminh"},"content":"    private void assertTwoPersonExecutionSuccess(Person personAtOrigin, Index originIndex,"},{"lineNumber":145,"author":{"gitID":"ncaminh"},"content":"                                                 Person personAtDestination, Index destinationIndex) {"},{"lineNumber":146,"author":{"gitID":"ncaminh"},"content":"        DistanceCommand distanceCommand \u003d prepareTwoPersonsCommand(originIndex, destinationIndex);"},{"lineNumber":147,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":148,"author":{"gitID":"ncaminh"},"content":"        try {"},{"lineNumber":149,"author":{"gitID":"ncaminh"},"content":"            CommandResult commandResult \u003d distanceCommand.execute();"},{"lineNumber":150,"author":{"gitID":"ncaminh"},"content":"            String addressOrigin \u003d personAtOrigin.getAddress().toString();"},{"lineNumber":151,"author":{"gitID":"ncaminh"},"content":"            String addressDestination \u003d personAtDestination.getAddress().toString();"},{"lineNumber":152,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":153,"author":{"gitID":"ncaminh"},"content":"            //Trim addresses"},{"lineNumber":154,"author":{"gitID":"ncaminh"},"content":"            addressOrigin \u003d trimAddress(addressOrigin);"},{"lineNumber":155,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":156,"author":{"gitID":"ncaminh"},"content":"            addressDestination \u003d trimAddress(addressDestination);"},{"lineNumber":157,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":158,"author":{"gitID":"ncaminh"},"content":"            String nameOrigin \u003d personAtOrigin.getName().fullName;"},{"lineNumber":159,"author":{"gitID":"ncaminh"},"content":"            String nameDestination \u003d personAtDestination.getName().fullName;"},{"lineNumber":160,"author":{"gitID":"ncaminh"},"content":"            GetDistance route \u003d new GetDistance();"},{"lineNumber":161,"author":{"gitID":"ncaminh"},"content":"            Double distance \u003d route.getDistance(addressOrigin, addressDestination);"},{"lineNumber":162,"author":{"gitID":"ncaminh"},"content":"            List\u003cString\u003e addressesList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":163,"author":{"gitID":"ncaminh"},"content":"            addressesList.add(addressOrigin);"},{"lineNumber":164,"author":{"gitID":"ncaminh"},"content":"            addressesList.add(addressDestination);"},{"lineNumber":165,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":166,"author":{"gitID":"ncaminh"},"content":"            ShowRouteFromOneToAnotherEvent lastEvent \u003d"},{"lineNumber":167,"author":{"gitID":"ncaminh"},"content":"                    (ShowRouteFromOneToAnotherEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":168,"author":{"gitID":"ncaminh"},"content":"            assertEquals(addressesList, lastEvent.sortedList);"},{"lineNumber":169,"author":{"gitID":"ncaminh"},"content":"            assertEquals(String.format(DistanceCommand.MESSAGE_DISTANCE_FROM_PERSON_SUCCESS,"},{"lineNumber":170,"author":{"gitID":"ncaminh"},"content":"                    nameOrigin, nameDestination, distance),"},{"lineNumber":171,"author":{"gitID":"ncaminh"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":172,"author":{"gitID":"ncaminh"},"content":"        } catch (Exception ce) {"},{"lineNumber":173,"author":{"gitID":"ncaminh"},"content":"            System.out.println(ce.getMessage());"},{"lineNumber":174,"author":{"gitID":"ncaminh"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":175,"author":{"gitID":"ncaminh"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":178,"author":{"gitID":"ncaminh"},"content":"    /**"},{"lineNumber":179,"author":{"gitID":"ncaminh"},"content":"     * Trim address"},{"lineNumber":180,"author":{"gitID":"ncaminh"},"content":"     */"},{"lineNumber":181,"author":{"gitID":"ncaminh"},"content":"    private String trimAddress(String address) {"},{"lineNumber":182,"author":{"gitID":"ncaminh"},"content":"        if (address.indexOf(\u0027#\u0027) \u003e 2) {"},{"lineNumber":183,"author":{"gitID":"ncaminh"},"content":"            int stringCutIndex;"},{"lineNumber":184,"author":{"gitID":"ncaminh"},"content":"            stringCutIndex \u003d address.indexOf(\u0027#\u0027) - 2;"},{"lineNumber":185,"author":{"gitID":"ncaminh"},"content":"            address \u003d address.substring(0, stringCutIndex);"},{"lineNumber":186,"author":{"gitID":"ncaminh"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"ncaminh"},"content":"        return address;"},{"lineNumber":188,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":190,"author":{"gitID":"ncaminh"},"content":"    /**"},{"lineNumber":191,"author":{"gitID":"ncaminh"},"content":"     * Executes a {@code DistanceCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":192,"author":{"gitID":"ncaminh"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":193,"author":{"gitID":"ncaminh"},"content":"     */"},{"lineNumber":194,"author":{"gitID":"ncaminh"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":195,"author":{"gitID":"ncaminh"},"content":"        DistanceCommand distanceCommand \u003d prepareOnePersonCommand(index);"},{"lineNumber":196,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":197,"author":{"gitID":"ncaminh"},"content":"        try {"},{"lineNumber":198,"author":{"gitID":"ncaminh"},"content":"            distanceCommand.execute();"},{"lineNumber":199,"author":{"gitID":"ncaminh"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":200,"author":{"gitID":"ncaminh"},"content":"        } catch (CommandException ce) {"},{"lineNumber":201,"author":{"gitID":"ncaminh"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":202,"author":{"gitID":"ncaminh"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":203,"author":{"gitID":"ncaminh"},"content":"        }"},{"lineNumber":204,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":206,"author":{"gitID":"ncaminh"},"content":"    /**"},{"lineNumber":207,"author":{"gitID":"ncaminh"},"content":"     * Returns a {@code DistanceCommand} with one parameter {@code index}."},{"lineNumber":208,"author":{"gitID":"ncaminh"},"content":"     */"},{"lineNumber":209,"author":{"gitID":"ncaminh"},"content":"    private DistanceCommand prepareOnePersonCommand(Index index) {"},{"lineNumber":210,"author":{"gitID":"ncaminh"},"content":"        DistanceCommand distanceCommand \u003d new DistanceCommand(index);"},{"lineNumber":211,"author":{"gitID":"ncaminh"},"content":"        distanceCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":212,"author":{"gitID":"ncaminh"},"content":"        return distanceCommand;"},{"lineNumber":213,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":215,"author":{"gitID":"ncaminh"},"content":"    /**"},{"lineNumber":216,"author":{"gitID":"ncaminh"},"content":"     * Returns a {@code DistanceCommand} with two parameters {@code index}."},{"lineNumber":217,"author":{"gitID":"ncaminh"},"content":"     */"},{"lineNumber":218,"author":{"gitID":"ncaminh"},"content":"    private DistanceCommand prepareTwoPersonsCommand(Index originIndex, Index destinationIndex) {"},{"lineNumber":219,"author":{"gitID":"ncaminh"},"content":"        DistanceCommand distanceCommand \u003d new DistanceCommand(originIndex, destinationIndex);"},{"lineNumber":220,"author":{"gitID":"ncaminh"},"content":"        distanceCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":221,"author":{"gitID":"ncaminh"},"content":"        return distanceCommand;"},{"lineNumber":222,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"ncaminh"},"content":"}"}],"authorContributionMap":{"ncaminh":191,"-":32}},{"path":"src/main/java/seedu/address/ui/CommandBox.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.google.maps.errors.ApiException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.ListElementPointer;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":18,"author":{"gitID":"mattbuot"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final Logic logic;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private ListElementPointer historySnapshot;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private TextField commandTextField;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public CommandBox(Logic logic) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box."},{"lineNumber":41,"author":{"gitID":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Handles the key press event, {@code keyEvent}."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        switch (keyEvent.getCode()) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        case UP:"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            // As up and down buttons will alter the position of the caret,"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            // consuming it causes the caret\u0027s position to remain unchanged"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"            navigateToPreviousInput();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        case DOWN:"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            navigateToNextInput();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":62,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":63,"author":{"gitID":"mattbuot"},"content":"        case TAB:"},{"lineNumber":64,"author":{"gitID":"mattbuot"},"content":"            keyEvent.consume();"},{"lineNumber":65,"author":{"gitID":"mattbuot"},"content":"            commandTextField.appendText(logic.autocomplete(commandTextField.getText()));"},{"lineNumber":66,"author":{"gitID":"mattbuot"},"content":"            break;"},{"lineNumber":67,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            // let JavaFx handle the keypress"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Updates the text field with the previous input in {@code historySnapshot},"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * if there exists a previous input in {@code historySnapshot}"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private void navigateToPreviousInput() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasPrevious()) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.previous());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Updates the text field with the next input in {@code historySnapshot},"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * if there exists a next input in {@code historySnapshot}"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    private void navigateToNextInput() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasNext()) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.next());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Sets {@code CommandBox}\u0027s text field with {@code text} and"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * positions the caret to the end of the {@code text}."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    private void replaceText(String text) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        commandTextField.setText(text);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        commandTextField.positionCaret(commandTextField.getText().length());"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":110,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    private void handleCommandInputChanged() throws InterruptedException, ApiException, IOException {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            historySnapshot.next();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            // process result of the command"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            commandTextField.setText(\"\");"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            // handle command failure"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            logger.info(\"Invalid command: \" + commandTextField.getText());"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(e.getMessage()));"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * Initializes the history snapshot."},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    private void initHistory() {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        // the user if she tries to navigate past the most-recent end of the historySnapshot."},{"lineNumber":138,"author":{"gitID":"-"},"content":"        historySnapshot.add(\"\");"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * Sets the command box style to use the default style."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    private void setStyleToDefault() {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"mattbuot":8,"-":153}},{"path":"src/test/java/guitests/guihandles/LoginPaneHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"ngshikang"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":3,"author":{"gitID":"ngshikang"},"content":"import javafx.scene.control.Button;"},{"lineNumber":4,"author":{"gitID":"ngshikang"},"content":"import javafx.scene.control.PasswordField;"},{"lineNumber":5,"author":{"gitID":"ngshikang"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":6,"author":{"gitID":"ngshikang"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":7,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":8,"author":{"gitID":"ngshikang"},"content":"//@@author ngshikang"},{"lineNumber":9,"author":{"gitID":"ngshikang"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"ngshikang"},"content":" * Provides a handle for {@code LoginPane}."},{"lineNumber":11,"author":{"gitID":"ngshikang"},"content":" */"},{"lineNumber":12,"author":{"gitID":"ngshikang"},"content":"public class LoginPaneHandle extends NodeHandle\u003cAnchorPane\u003e  {"},{"lineNumber":13,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":14,"author":{"gitID":"ngshikang"},"content":"    public static final String LOGIN_PANE_ID \u003d \"#loginPanePlaceholder\";"},{"lineNumber":15,"author":{"gitID":"ngshikang"},"content":"    private static final String PASSWORD_FIELD_ID \u003d \"#passwordField\";"},{"lineNumber":16,"author":{"gitID":"ngshikang"},"content":"    private static final String USERNAME_FIELD_ID \u003d \"#usernameTextField\";"},{"lineNumber":17,"author":{"gitID":"ngshikang"},"content":"    private static final String LOGIN_BUTTON_ID \u003d \"#loginButton\";"},{"lineNumber":18,"author":{"gitID":"ngshikang"},"content":"    private static final String CREATE_BUTTON_ID \u003d \"#createButton\";"},{"lineNumber":19,"author":{"gitID":"ngshikang"},"content":"    private static final String EXIT_BUTTON_ID \u003d \"#exitButton\";"},{"lineNumber":20,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":21,"author":{"gitID":"ngshikang"},"content":"    private final PasswordField passwordField;"},{"lineNumber":22,"author":{"gitID":"ngshikang"},"content":"    private final TextField textField;"},{"lineNumber":23,"author":{"gitID":"ngshikang"},"content":"    private final Button loginButton;"},{"lineNumber":24,"author":{"gitID":"ngshikang"},"content":"    private final Button createButton;"},{"lineNumber":25,"author":{"gitID":"ngshikang"},"content":"    private final Button exitButton;"},{"lineNumber":26,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":27,"author":{"gitID":"ngshikang"},"content":"    public LoginPaneHandle(AnchorPane mainLoginNode) {"},{"lineNumber":28,"author":{"gitID":"ngshikang"},"content":"        super(mainLoginNode);"},{"lineNumber":29,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":30,"author":{"gitID":"ngshikang"},"content":"        this.passwordField \u003d getChildNode(PASSWORD_FIELD_ID);"},{"lineNumber":31,"author":{"gitID":"ngshikang"},"content":"        this.textField \u003d getChildNode(USERNAME_FIELD_ID);"},{"lineNumber":32,"author":{"gitID":"ngshikang"},"content":"        this.loginButton \u003d getChildNode(LOGIN_BUTTON_ID);"},{"lineNumber":33,"author":{"gitID":"ngshikang"},"content":"        this.createButton \u003d getChildNode(CREATE_BUTTON_ID);"},{"lineNumber":34,"author":{"gitID":"ngshikang"},"content":"        this.exitButton \u003d getChildNode(EXIT_BUTTON_ID);"},{"lineNumber":35,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":36,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":38,"author":{"gitID":"ngshikang"},"content":"    public PasswordField getPasswordField() {"},{"lineNumber":39,"author":{"gitID":"ngshikang"},"content":"        return passwordField;"},{"lineNumber":40,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":42,"author":{"gitID":"ngshikang"},"content":"    public TextField getTextField() {"},{"lineNumber":43,"author":{"gitID":"ngshikang"},"content":"        return textField;"},{"lineNumber":44,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":46,"author":{"gitID":"ngshikang"},"content":"    public Button getLoginButton() {"},{"lineNumber":47,"author":{"gitID":"ngshikang"},"content":"        return loginButton;"},{"lineNumber":48,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":50,"author":{"gitID":"ngshikang"},"content":"    public Button getCreateButton() {"},{"lineNumber":51,"author":{"gitID":"ngshikang"},"content":"        return createButton;"},{"lineNumber":52,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":54,"author":{"gitID":"ngshikang"},"content":"    public Button getExitButton() {"},{"lineNumber":55,"author":{"gitID":"ngshikang"},"content":"        return exitButton;"},{"lineNumber":56,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":58,"author":{"gitID":"ngshikang"},"content":"}"}],"authorContributionMap":{"ngshikang":58}},{"path":"src/main/java/seedu/address/ui/BrowserPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.PrintWriter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.event.Event;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":18,"author":{"gitID":"ngshikang"},"content":"import javafx.scene.text.Text;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":20,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.GameEvent;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowDefaultPageEvent;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowMultiLocationFromHeadQuarterEvent;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowRouteFromHeadQuarterToOneEvent;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowRouteFromOneToAnotherEvent;"},{"lineNumber":31,"author":{"gitID":"meerakanani10"},"content":"import seedu.address.logic.GetDistance;"},{"lineNumber":32,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":33,"author":{"gitID":"ngshikang"},"content":"import seedu.address.logic.commands.FilterCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":37,"author":{"gitID":"-"},"content":" * The Browser Panel of the App."},{"lineNumber":38,"author":{"gitID":"-"},"content":" */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"public class BrowserPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PAGE \u003d \"default.html\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String HQ_ADDRESS \u003d \"Kent Ridge MRT\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String SEARCH_PAGE_URL \u003d"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            \"https://www.google.com.sg/maps/dir/Kent%20Ridge%20MRT%20Station/\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"BrowserPanel.fxml\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"ngshikang"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitID":"ngshikang"},"content":"    private Text additionalInfo;"},{"lineNumber":52,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private WebView browser;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public BrowserPanel() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":60,"author":{"gitID":"-"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        loadDefaultPage();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"ncaminh"},"content":"    //@@author ncaminh"},{"lineNumber":67,"author":{"gitID":"ncaminh"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"ncaminh"},"content":"     * Show direction from Kent Ridge MRT to the person address"},{"lineNumber":69,"author":{"gitID":"ncaminh"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"ncaminh"},"content":"    private void loadPersonDirection(Person person) {"},{"lineNumber":71,"author":{"gitID":"ncaminh"},"content":"        String addressValue \u003d person.getAddress().value.trim();"},{"lineNumber":72,"author":{"gitID":"ncaminh"},"content":"        int stringCutIndex;"},{"lineNumber":73,"author":{"gitID":"ncaminh"},"content":"        String addressWithoutUnit;"},{"lineNumber":74,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":75,"author":{"gitID":"ncaminh"},"content":"        if (addressValue.indexOf(\u0027#\u0027) \u003e 2) {"},{"lineNumber":76,"author":{"gitID":"ncaminh"},"content":"            stringCutIndex \u003d addressValue.indexOf(\u0027#\u0027) - 2;"},{"lineNumber":77,"author":{"gitID":"ncaminh"},"content":"            addressWithoutUnit \u003d addressValue.substring(0, stringCutIndex);"},{"lineNumber":78,"author":{"gitID":"ncaminh"},"content":"        } else {"},{"lineNumber":79,"author":{"gitID":"ncaminh"},"content":"            addressWithoutUnit \u003d addressValue;"},{"lineNumber":80,"author":{"gitID":"ncaminh"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":82,"author":{"gitID":"ncaminh"},"content":"        readPersonName(person);"},{"lineNumber":83,"author":{"gitID":"ncaminh"},"content":"        loadPage(SEARCH_PAGE_URL + addressWithoutUnit.replaceAll(\" \", \"%20\") + \"?dg\u003ddbrw\u0026newdg\u003d1\");"},{"lineNumber":84,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":86,"author":{"gitID":"ncaminh"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"ncaminh"},"content":"     * Run script that read person\u0027s name"},{"lineNumber":88,"author":{"gitID":"ncaminh"},"content":"     * @param person"},{"lineNumber":89,"author":{"gitID":"ncaminh"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"ncaminh"},"content":"    private void readPersonName(Person person) {"},{"lineNumber":91,"author":{"gitID":"ncaminh"},"content":"        try {"},{"lineNumber":92,"author":{"gitID":"ncaminh"},"content":"            readPersonNameScriptForMac(person);"},{"lineNumber":93,"author":{"gitID":"ncaminh"},"content":"        } catch (IOException notMac) {"},{"lineNumber":94,"author":{"gitID":"ncaminh"},"content":"            try {"},{"lineNumber":95,"author":{"gitID":"ncaminh"},"content":"                createFolderIfNeeded();"},{"lineNumber":96,"author":{"gitID":"ncaminh"},"content":"                createScriptIfNeeded();"},{"lineNumber":97,"author":{"gitID":"ncaminh"},"content":"                readPersonNameScript(person);"},{"lineNumber":98,"author":{"gitID":"ncaminh"},"content":"            } catch (IOException e) {"},{"lineNumber":99,"author":{"gitID":"ncaminh"},"content":"                logger.warning(\"Unable to read person name script\");"},{"lineNumber":100,"author":{"gitID":"ncaminh"},"content":"            }"},{"lineNumber":101,"author":{"gitID":"ncaminh"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":104,"author":{"gitID":"ncaminh"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"ncaminh"},"content":"     * Read script for Mac"},{"lineNumber":106,"author":{"gitID":"ncaminh"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"ncaminh"},"content":"    private void readPersonNameScriptForMac(Person person) throws IOException {"},{"lineNumber":108,"author":{"gitID":"ncaminh"},"content":"        String personName \u003d person.getName().toString();"},{"lineNumber":109,"author":{"gitID":"ncaminh"},"content":"        String script \u003d \"say \\\"\" + personName + \"\\\" using \\\"Alex\\\" speaking rate 150 pitch 42 modulation 60\";"},{"lineNumber":110,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":111,"author":{"gitID":"ncaminh"},"content":"        Runtime runtime \u003d Runtime.getRuntime();"},{"lineNumber":112,"author":{"gitID":"ncaminh"},"content":"        String[] argument \u003d { \"osascript\", \"-e\", script };"},{"lineNumber":113,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":114,"author":{"gitID":"ncaminh"},"content":"        Process process \u003d runtime.exec(argument);"},{"lineNumber":115,"author":{"gitID":"ncaminh"},"content":"        logger.info(\"Running read person name script on Mac\");"},{"lineNumber":116,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":118,"author":{"gitID":"ncaminh"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"ncaminh"},"content":"     * Read script for Window"},{"lineNumber":120,"author":{"gitID":"ncaminh"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"ncaminh"},"content":"    private void readPersonNameScript(Person person) throws IOException {"},{"lineNumber":122,"author":{"gitID":"ncaminh"},"content":"        logger.info(\"Running read person name script on Window\");"},{"lineNumber":123,"author":{"gitID":"ncaminh"},"content":"        Runtime.getRuntime().exec(\"wscript.exe script\\\\ReadPersonName.vbs\""},{"lineNumber":124,"author":{"gitID":"ncaminh"},"content":"                + \" \" + person.getName().fullName);"},{"lineNumber":125,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":127,"author":{"gitID":"ncaminh"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"ncaminh"},"content":"     * create script file if not exist"},{"lineNumber":129,"author":{"gitID":"ncaminh"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"ncaminh"},"content":"    private void createScriptIfNeeded() throws IOException {"},{"lineNumber":131,"author":{"gitID":"ncaminh"},"content":"        File f \u003d new File(\"script\\\\ReadPersonName.vbs\");"},{"lineNumber":132,"author":{"gitID":"ncaminh"},"content":"        if (!f.exists()) {"},{"lineNumber":133,"author":{"gitID":"ncaminh"},"content":"            File file1 \u003d new File(\"script\\\\ReadPersonName.txt\");"},{"lineNumber":134,"author":{"gitID":"ncaminh"},"content":"            logger.info(\"Creating script ReadPersonName.txt\");"},{"lineNumber":135,"author":{"gitID":"ncaminh"},"content":"            file1.createNewFile();"},{"lineNumber":136,"author":{"gitID":"ncaminh"},"content":"            logger.info(\"Writing to ReadPersonName.txt\");"},{"lineNumber":137,"author":{"gitID":"ncaminh"},"content":"            PrintWriter writer \u003d new PrintWriter(\"script\\\\ReadPersonName.txt\", \"UTF-8\");"},{"lineNumber":138,"author":{"gitID":"ncaminh"},"content":"            writer.println(\"name \u003d WScript.Arguments(0)\");"},{"lineNumber":139,"author":{"gitID":"ncaminh"},"content":"            writer.println(\"speaks\u003d\\\"This is \\\" + name\");"},{"lineNumber":140,"author":{"gitID":"ncaminh"},"content":"            writer.println(\"CreateObject(\\\"sapi.spvoice\\\").Speak speaks\");"},{"lineNumber":141,"author":{"gitID":"ncaminh"},"content":"            writer.close();"},{"lineNumber":142,"author":{"gitID":"ncaminh"},"content":"            logger.info(\"Converting ReadPersonName.txt to ReadPersonName.vbs\");"},{"lineNumber":143,"author":{"gitID":"ncaminh"},"content":"            File file2 \u003d new File(\"script\\\\ReadPersonName.vbs\");"},{"lineNumber":144,"author":{"gitID":"ncaminh"},"content":"            file1.renameTo(file2);"},{"lineNumber":145,"author":{"gitID":"ncaminh"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":148,"author":{"gitID":"ncaminh"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"ncaminh"},"content":"     * create script folder if not exist"},{"lineNumber":150,"author":{"gitID":"ncaminh"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"ncaminh"},"content":"    private void createFolderIfNeeded() {"},{"lineNumber":152,"author":{"gitID":"ncaminh"},"content":"        File dir \u003d new File(\"script\");"},{"lineNumber":153,"author":{"gitID":"ncaminh"},"content":"        if (!dir.exists()) {"},{"lineNumber":154,"author":{"gitID":"ncaminh"},"content":"            logger.info(\"Creating script directory\");"},{"lineNumber":155,"author":{"gitID":"ncaminh"},"content":"            boolean successful \u003d dir.mkdirs();"},{"lineNumber":156,"author":{"gitID":"ncaminh"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"ncaminh"},"content":"    //@@author"},{"lineNumber":159,"author":{"gitID":"ngshikang"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"ngshikang"},"content":"     * Loads a HTML file based on given URL."},{"lineNumber":161,"author":{"gitID":"ngshikang"},"content":"     * @param url"},{"lineNumber":162,"author":{"gitID":"ngshikang"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    public void loadPage(String url) {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e browser.getEngine().load(url));"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        logger.info(\"Loaded \" + url);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * Loads a default HTML file has pigeon-icon at the center and has background that matches the general theme."},{"lineNumber":170,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    private void loadDefaultPage() {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        loadPage(defaultPage.toExternalForm());"},{"lineNumber":174,"author":{"gitID":"ngshikang"},"content":"        additionalInfo.setText(\"+ Additional information will be displayed here.\");"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * Frees resources allocated to the browser."},{"lineNumber":179,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    public void freeResources() {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        browser \u003d null;"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        String destination \u003d event.getNewSelection().person.getAddress().toString();"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"meerakanani10"},"content":"        GetDistance distance \u003d new GetDistance();"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"            Double duration \u003d distance.getTime(HQ_ADDRESS, destination);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"            additionalInfo.setText(\"Estimated Required Time for Deliveries: \""},{"lineNumber":193,"author":{"gitID":"-"},"content":"                    + duration + \"mins\");"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            additionalInfo.setText(\"This person address cannot be found.\");"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        String personName \u003d event.getNewSelection().person.getName().toString();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new NewResultAvailableEvent(String.format(MESSAGE_SELECT_PERSON_SUCCESS,"},{"lineNumber":200,"author":{"gitID":"-"},"content":"                personName)));"},{"lineNumber":201,"author":{"gitID":"meerakanani10"},"content":"        loadPersonDirection(event.getNewSelection().person);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"ncaminh"},"content":"    //@@author ncaminh"},{"lineNumber":205,"author":{"gitID":"ncaminh"},"content":"    @Subscribe"},{"lineNumber":206,"author":{"gitID":"ncaminh"},"content":"    public void handleShowMultiLocationEvent(ShowMultiLocationFromHeadQuarterEvent event) {"},{"lineNumber":207,"author":{"gitID":"ncaminh"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":208,"author":{"gitID":"ncaminh"},"content":"        StringBuilder url \u003d new StringBuilder(SEARCH_PAGE_URL);"},{"lineNumber":209,"author":{"gitID":"ncaminh"},"content":"        for (String address: event.sortedList) {"},{"lineNumber":210,"author":{"gitID":"ncaminh"},"content":"            url.append(address);"},{"lineNumber":211,"author":{"gitID":"ncaminh"},"content":"            url.append(\"/\");"},{"lineNumber":212,"author":{"gitID":"ncaminh"},"content":"        }"},{"lineNumber":213,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":214,"author":{"gitID":"ncaminh"},"content":"        List\u003cString\u003e temp \u003d event.sortedList;"},{"lineNumber":215,"author":{"gitID":"ncaminh"},"content":"        temp.add(0, HQ_ADDRESS);"},{"lineNumber":216,"author":{"gitID":"ncaminh"},"content":"        additionalInfo.setText(\"Estimated Required Time for Deliveries: \""},{"lineNumber":217,"author":{"gitID":"ncaminh"},"content":"                + FilterCommand.getDuration(event.sortedList));"},{"lineNumber":218,"author":{"gitID":"ncaminh"},"content":"        loadPage(url.toString().replaceAll(\" \", \"%20\"));"},{"lineNumber":219,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":221,"author":{"gitID":"ncaminh"},"content":"    @Subscribe"},{"lineNumber":222,"author":{"gitID":"ncaminh"},"content":"    public void handleShowDefaultPageEvent(ShowDefaultPageEvent event) {"},{"lineNumber":223,"author":{"gitID":"ncaminh"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":224,"author":{"gitID":"ncaminh"},"content":"        loadDefaultPage();"},{"lineNumber":225,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":227,"author":{"gitID":"ncaminh"},"content":"    @Subscribe"},{"lineNumber":228,"author":{"gitID":"ncaminh"},"content":"    public void handleShowFromHeadQuaterToOneEvent(ShowRouteFromHeadQuarterToOneEvent event) {"},{"lineNumber":229,"author":{"gitID":"ncaminh"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":230,"author":{"gitID":"ncaminh"},"content":"        StringBuilder url \u003d new StringBuilder(SEARCH_PAGE_URL);"},{"lineNumber":231,"author":{"gitID":"ncaminh"},"content":"        url.append(event.destination);"},{"lineNumber":232,"author":{"gitID":"ncaminh"},"content":"        loadPage(url.toString().replaceAll(\" \", \"%20\") + \"?dg\u003ddbrw\u0026newdg\u003d1\");"},{"lineNumber":233,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":235,"author":{"gitID":"ncaminh"},"content":"    @Subscribe"},{"lineNumber":236,"author":{"gitID":"ncaminh"},"content":"    public void handleShowFromOneToAnotherEvent(ShowRouteFromOneToAnotherEvent event) {"},{"lineNumber":237,"author":{"gitID":"ncaminh"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":238,"author":{"gitID":"ncaminh"},"content":"        StringBuilder url \u003d new StringBuilder(\"https://www.google.com.sg/maps/dir/\");"},{"lineNumber":239,"author":{"gitID":"ncaminh"},"content":"        for (String address: event.sortedList) {"},{"lineNumber":240,"author":{"gitID":"ncaminh"},"content":"            url.append(address);"},{"lineNumber":241,"author":{"gitID":"ncaminh"},"content":"            url.append(\"/\");"},{"lineNumber":242,"author":{"gitID":"ncaminh"},"content":"        }"},{"lineNumber":243,"author":{"gitID":"ncaminh"},"content":"        url.deleteCharAt(url.length() - 1);"},{"lineNumber":244,"author":{"gitID":"ncaminh"},"content":"        additionalInfo.setText(\"Estimated Required Time for Deliveries: \""},{"lineNumber":245,"author":{"gitID":"ncaminh"},"content":"                + FilterCommand.getDuration(event.sortedList));"},{"lineNumber":246,"author":{"gitID":"ncaminh"},"content":"        loadPage(url.toString().replaceAll(\" \", \"%20\") + \"?dg\u003ddbrw\u0026newdg\u003d1\");"},{"lineNumber":247,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":249,"author":{"gitID":"ncaminh"},"content":"    @Subscribe"},{"lineNumber":250,"author":{"gitID":"ncaminh"},"content":"    public void handleGameEvent(GameEvent event) {"},{"lineNumber":251,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":252,"author":{"gitID":"ncaminh"},"content":"        URL gamePath \u003d MainApp.class.getResource(\"/unused/games/Snake.html\");"},{"lineNumber":253,"author":{"gitID":"ncaminh"},"content":"        loadPage(gamePath.toExternalForm());"},{"lineNumber":254,"author":{"gitID":"ncaminh"},"content":"        additionalInfo.setText(\"+ Additional information will be displayed here.\");"},{"lineNumber":255,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":256,"author":{"gitID":"ncaminh"},"content":"}"}],"authorContributionMap":{"ngshikang":10,"ncaminh":146,"meerakanani10":5,"-":95}},{"path":"src/main/java/seedu/address/ui/Ui.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * API of UI component"},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public interface Ui {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    /** Starts the UI (and the App).  */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    void start(Stage primaryStage);"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"ngshikang"},"content":"    /** Stops the UI for the App. */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    void stop();"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"ngshikang"},"content":"    /** Starts the UI for Login.  */"},{"lineNumber":17,"author":{"gitID":"ngshikang"},"content":"    void startLogin(Stage primaryStage);"},{"lineNumber":18,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":19,"author":{"gitID":"ngshikang"},"content":"    /** Stops the UI for the login. */"},{"lineNumber":20,"author":{"gitID":"ngshikang"},"content":"    void stopLogin();"},{"lineNumber":21,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ngshikang":7,"-":15}},{"path":"src/test/java/seedu/address/login/LoginManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"ngshikang"},"content":"package seedu.address.login;"},{"lineNumber":2,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":3,"author":{"gitID":"ngshikang"},"content":"import org.junit.Before;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":8,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":9,"author":{"gitID":"ngshikang"},"content":"import seedu.address.storage.JsonUserPassStorage;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":11,"author":{"gitID":"ngshikang"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":13,"author":{"gitID":"ngshikang"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":14,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":15,"author":{"gitID":"ngshikang"},"content":"//@@author ngshikang"},{"lineNumber":16,"author":{"gitID":"ngshikang"},"content":"public class LoginManagerTest {"},{"lineNumber":17,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":18,"author":{"gitID":"ngshikang"},"content":"    @Rule"},{"lineNumber":19,"author":{"gitID":"ngshikang"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":20,"author":{"gitID":"ngshikang"},"content":"    @Rule"},{"lineNumber":21,"author":{"gitID":"ngshikang"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":22,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":23,"author":{"gitID":"ngshikang"},"content":"    private Login login;"},{"lineNumber":24,"author":{"gitID":"ngshikang"},"content":"    private StorageManager storage;"},{"lineNumber":25,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":26,"author":{"gitID":"ngshikang"},"content":"    @Before"},{"lineNumber":27,"author":{"gitID":"ngshikang"},"content":"    public void setUp() {"},{"lineNumber":28,"author":{"gitID":"ngshikang"},"content":"        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"},{"lineNumber":29,"author":{"gitID":"ngshikang"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":30,"author":{"gitID":"ngshikang"},"content":"        JsonUserPassStorage userPassStorage \u003d new JsonUserPassStorage(getTempFilePath(\"tempUserPass\"));"},{"lineNumber":31,"author":{"gitID":"ngshikang"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, userPassStorage);"},{"lineNumber":32,"author":{"gitID":"ngshikang"},"content":"        login \u003d new LoginManager(storage);"},{"lineNumber":33,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":35,"author":{"gitID":"ngshikang"},"content":"    private String getTempFilePath(String fileName) {"},{"lineNumber":36,"author":{"gitID":"ngshikang"},"content":"        return testFolder.getRoot().getPath() + fileName;"},{"lineNumber":37,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":39,"author":{"gitID":"ngshikang"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"ngshikang"},"content":"    public void execute_invalidUserPass_throwsInvalidException() {"},{"lineNumber":41,"author":{"gitID":"ngshikang"},"content":"        String invalidUsername \u003d \"\";"},{"lineNumber":42,"author":{"gitID":"ngshikang"},"content":"        String invalidPassword \u003d \"\";"},{"lineNumber":43,"author":{"gitID":"ngshikang"},"content":"        Assert.assertThrows(InvalidUsernameException.class, () -\u003e login.checkLoginDetails("},{"lineNumber":44,"author":{"gitID":"ngshikang"},"content":"                new UserPass(invalidUsername, \"pass\")));"},{"lineNumber":45,"author":{"gitID":"ngshikang"},"content":"        Assert.assertThrows(InvalidUsernameException.class, () -\u003e login.checkLoginDetails("},{"lineNumber":46,"author":{"gitID":"ngshikang"},"content":"                new UserPass(\"user\", invalidPassword)));"},{"lineNumber":47,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":49,"author":{"gitID":"ngshikang"},"content":"}"}],"authorContributionMap":{"ngshikang":43,"-":6}},{"path":"src/main/java/seedu/address/ui/UiManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":19,"author":{"gitID":"ngshikang"},"content":"import seedu.address.login.Login;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * The manager of the UI component."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class UiManager extends ComponentManager implements Ui {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":39,"author":{"gitID":"ngshikang"},"content":"    private Login login;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private MainWindow mainWindow;"},{"lineNumber":41,"author":{"gitID":"ngshikang"},"content":"    private LoginWindow loginWindow;"},{"lineNumber":42,"author":{"gitID":"ngshikang"},"content":"    private Stage primaryStage;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"ngshikang"},"content":"    public UiManager(Logic logic, Config config, UserPrefs prefs, Login login) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":49,"author":{"gitID":"ngshikang"},"content":"        this.login \u003d login;"},{"lineNumber":50,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":52,"author":{"gitID":"ngshikang"},"content":"    //@@author ngshikang"},{"lineNumber":53,"author":{"gitID":"ngshikang"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"ngshikang"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":55,"author":{"gitID":"ngshikang"},"content":"        logger.info(\"Starting UI...\");"},{"lineNumber":56,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":57,"author":{"gitID":"ngshikang"},"content":"        //Set the application icon."},{"lineNumber":58,"author":{"gitID":"ngshikang"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"},{"lineNumber":59,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":60,"author":{"gitID":"ngshikang"},"content":"        try {"},{"lineNumber":61,"author":{"gitID":"ngshikang"},"content":"            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"},{"lineNumber":62,"author":{"gitID":"ngshikang"},"content":"            mainWindow.show(); //This should be called before creating other UI parts"},{"lineNumber":63,"author":{"gitID":"ngshikang"},"content":"            mainWindow.fillInnerParts();"},{"lineNumber":64,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":65,"author":{"gitID":"ngshikang"},"content":"        } catch (Throwable e) {"},{"lineNumber":66,"author":{"gitID":"ngshikang"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":67,"author":{"gitID":"ngshikang"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"},{"lineNumber":68,"author":{"gitID":"ngshikang"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":71,"author":{"gitID":"ngshikang"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"ngshikang"},"content":"    public void stop() {"},{"lineNumber":73,"author":{"gitID":"ngshikang"},"content":"        try {"},{"lineNumber":74,"author":{"gitID":"ngshikang"},"content":"            prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"},{"lineNumber":75,"author":{"gitID":"ngshikang"},"content":"            mainWindow.hide();"},{"lineNumber":76,"author":{"gitID":"ngshikang"},"content":"            mainWindow.releaseResources();"},{"lineNumber":77,"author":{"gitID":"ngshikang"},"content":"        } catch (NullPointerException e) {"},{"lineNumber":78,"author":{"gitID":"ngshikang"},"content":"            logger.info(\"Illegal exit occurred. Please click proper exit button in the future.\");"},{"lineNumber":79,"author":{"gitID":"ngshikang"},"content":"            throw new NullPointerException();"},{"lineNumber":80,"author":{"gitID":"ngshikang"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":83,"author":{"gitID":"ngshikang"},"content":"    @Override"},{"lineNumber":84,"author":{"gitID":"ngshikang"},"content":"    public void startLogin(Stage primaryStage) {"},{"lineNumber":85,"author":{"gitID":"ngshikang"},"content":"        logger.info(\"Starting Login...\");"},{"lineNumber":86,"author":{"gitID":"ngshikang"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":87,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":88,"author":{"gitID":"ngshikang"},"content":"        try {"},{"lineNumber":89,"author":{"gitID":"ngshikang"},"content":"            primaryStage.setHeight(600);"},{"lineNumber":90,"author":{"gitID":"ngshikang"},"content":"            primaryStage.setWidth(400);"},{"lineNumber":91,"author":{"gitID":"ngshikang"},"content":"            loginWindow \u003d new LoginWindow(primaryStage, login);"},{"lineNumber":92,"author":{"gitID":"ngshikang"},"content":"            loginWindow.show();"},{"lineNumber":93,"author":{"gitID":"ngshikang"},"content":"            loginWindow.fillPane();"},{"lineNumber":94,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":95,"author":{"gitID":"ngshikang"},"content":"        } catch (Throwable e) {"},{"lineNumber":96,"author":{"gitID":"ngshikang"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":97,"author":{"gitID":"ngshikang"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"},{"lineNumber":98,"author":{"gitID":"ngshikang"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":101,"author":{"gitID":"ngshikang"},"content":"    @Override"},{"lineNumber":102,"author":{"gitID":"ngshikang"},"content":"    public void stopLogin() {"},{"lineNumber":103,"author":{"gitID":"ngshikang"},"content":"        loginWindow.hide();"},{"lineNumber":104,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":106,"author":{"gitID":"ngshikang"},"content":"    //@@author"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        final String content \u003d details + \":\\n\" + cause.toString();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    private Image getImage(String imagePath) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters."},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * This method only returns after the user has closed the alert dialog."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                                               String contentText) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        final Alert alert \u003d new Alert(type);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        alert.initOwner(owner);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        alert.setTitle(title);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        alert.setHeaderText(headerText);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        alert.setContentText(contentText);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        alert.showAndWait();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * and exits the application after the user has closed the alert dialog."},{"lineNumber":139,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        System.exit(1);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"},{"lineNumber":153,"author":{"gitID":"-"},"content":"                event.exception);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ngshikang":63,"-":92}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private StackPane browserPlaceholder;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":93,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":94,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":95,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":96,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":97,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":98,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":99,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":100,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":101,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":102,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":103,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":104,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":105,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":106,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        browserPanel \u003d new BrowserPanel();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        browserPlaceholder.getChildren().add(browserPanel.getRoot());"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"ngshikang"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":157,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":160,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":178,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        return this.personListPanel;"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    void releaseResources() {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        browserPanel.freeResources();"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ngshikang":1,"-":196}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.event.EventHandler;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.input.MouseEvent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String[] TAG_COLOR \u003d {\"red\", \"green\", \"blue\"};"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public final Person person;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"meerakanani10"},"content":"    private Label date;"},{"lineNumber":44,"author":{"gitID":"meerakanani10"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":55,"author":{"gitID":"meerakanani10"},"content":"        date.setText(person.getDate().value);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        labelTag(person);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"ncaminh"},"content":"    //@@author ncaminh"},{"lineNumber":59,"author":{"gitID":"ncaminh"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"ncaminh"},"content":"     * Set the label for the tag"},{"lineNumber":61,"author":{"gitID":"ncaminh"},"content":"     * @param p"},{"lineNumber":62,"author":{"gitID":"ncaminh"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"ncaminh"},"content":"    private void labelTag(Person p) {"},{"lineNumber":64,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":65,"author":{"gitID":"ncaminh"},"content":"        p.getTags().forEach(tag -\u003e {"},{"lineNumber":66,"author":{"gitID":"ncaminh"},"content":"            Label showLabel \u003d new Label(tag.tagName);"},{"lineNumber":67,"author":{"gitID":"ncaminh"},"content":"            showLabel.getStyleClass().add(fromTagNameToColor(tag.tagName));"},{"lineNumber":68,"author":{"gitID":"ncaminh"},"content":"            //Zoom effect on the label when the mouse is on the label"},{"lineNumber":69,"author":{"gitID":"ncaminh"},"content":"            labelZoomEffect(showLabel);"},{"lineNumber":70,"author":{"gitID":"ncaminh"},"content":"            tags.getChildren().add(showLabel);"},{"lineNumber":71,"author":{"gitID":"ncaminh"},"content":"        });"},{"lineNumber":72,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":74,"author":{"gitID":"ncaminh"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"ncaminh"},"content":"     * Zoom effect on the label when the mouse is on the label"},{"lineNumber":76,"author":{"gitID":"ncaminh"},"content":"     * @param label"},{"lineNumber":77,"author":{"gitID":"ncaminh"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"ncaminh"},"content":"    private void labelZoomEffect(Label label) {"},{"lineNumber":79,"author":{"gitID":"ncaminh"},"content":"        label.setOnMouseEntered(new EventHandler\u003cMouseEvent\u003e() {"},{"lineNumber":80,"author":{"gitID":"ncaminh"},"content":"            @Override"},{"lineNumber":81,"author":{"gitID":"ncaminh"},"content":"            public void handle(MouseEvent e) {"},{"lineNumber":82,"author":{"gitID":"ncaminh"},"content":"                label.setScaleX(1.5);"},{"lineNumber":83,"author":{"gitID":"ncaminh"},"content":"                label.setScaleY(1.5);"},{"lineNumber":84,"author":{"gitID":"ncaminh"},"content":"            }"},{"lineNumber":85,"author":{"gitID":"ncaminh"},"content":"        });"},{"lineNumber":86,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":87,"author":{"gitID":"ncaminh"},"content":"        label.setOnMouseExited(new EventHandler\u003cMouseEvent\u003e() {"},{"lineNumber":88,"author":{"gitID":"ncaminh"},"content":"            @Override"},{"lineNumber":89,"author":{"gitID":"ncaminh"},"content":"            public void handle(MouseEvent e) {"},{"lineNumber":90,"author":{"gitID":"ncaminh"},"content":"                label.setScaleX(1);"},{"lineNumber":91,"author":{"gitID":"ncaminh"},"content":"                label.setScaleY(1);"},{"lineNumber":92,"author":{"gitID":"ncaminh"},"content":"            }"},{"lineNumber":93,"author":{"gitID":"ncaminh"},"content":"        });"},{"lineNumber":94,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":96,"author":{"gitID":"ncaminh"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"ncaminh"},"content":"     *"},{"lineNumber":98,"author":{"gitID":"ncaminh"},"content":"     * @param tagName"},{"lineNumber":99,"author":{"gitID":"ncaminh"},"content":"     * @return the color for the label."},{"lineNumber":100,"author":{"gitID":"ncaminh"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"ncaminh"},"content":"    private String fromTagNameToColor(String tagName) {"},{"lineNumber":102,"author":{"gitID":"ncaminh"},"content":"        // use hashCode to hash the tagName into an integer"},{"lineNumber":103,"author":{"gitID":"ncaminh"},"content":"        // this help keeping the label colors consistency through every run"},{"lineNumber":104,"author":{"gitID":"ncaminh"},"content":"        return TAG_COLOR[Math.abs(tagName.toLowerCase().hashCode()) % TAG_COLOR.length];"},{"lineNumber":105,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"ncaminh"},"content":"    //@@author"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ncaminh":49,"meerakanani10":3,"-":72}},{"path":"src/main/java/seedu/address/commons/core/Config.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Config values used by the app"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class Config {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_CONFIG_FILE \u003d \"config.json\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    // Config values customizable through config file"},{"lineNumber":14,"author":{"gitID":"ngshikang"},"content":"    private String appTitle \u003d \"Your Trustworthy Pigeons AddressBook brought to you by T16-B2\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private Level logLevel \u003d Level.INFO;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private String userPrefsFilePath \u003d \"preferences.json\";"},{"lineNumber":17,"author":{"gitID":"ngshikang"},"content":"    private String userPassFilePath \u003d \"userpass.json\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public String getAppTitle() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return appTitle;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void setAppTitle(String appTitle) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        this.appTitle \u003d appTitle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public Level getLogLevel() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        return logLevel;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void setLogLevel(Level logLevel) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.logLevel \u003d logLevel;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return userPrefsFilePath;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void setUserPrefsFilePath(String userPrefsFilePath) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"ngshikang"},"content":"    public String getUserPassFilePath() {"},{"lineNumber":44,"author":{"gitID":"ngshikang"},"content":"        return userPassFilePath;"},{"lineNumber":45,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":47,"author":{"gitID":"ngshikang"},"content":"    public void setUserPassFilePath(String userPassFilePath) {"},{"lineNumber":48,"author":{"gitID":"ngshikang"},"content":"        this.userPassFilePath \u003d userPassFilePath;"},{"lineNumber":49,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well."},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        Config o \u003d (Config) other;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return Objects.equals(appTitle, o.appTitle)"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"},{"lineNumber":64,"author":{"gitID":"ngshikang"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath)"},{"lineNumber":65,"author":{"gitID":"ngshikang"},"content":"                \u0026\u0026 Objects.equals(userPassFilePath, o.userPassFilePath);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":70,"author":{"gitID":"ngshikang"},"content":"        return Objects.hash(appTitle, logLevel, userPrefsFilePath, userPassFilePath);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        sb.append(\"App title : \" + appTitle);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        sb.append(\"\\nCurrent log level : \" + logLevel);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"},{"lineNumber":79,"author":{"gitID":"ngshikang"},"content":"        sb.append(\"\\nUserPass file Location : \" + userPassFilePath);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ngshikang":14,"-":69}},{"path":"src/main/java/seedu/address/ui/LoginWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"ngshikang"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":3,"author":{"gitID":"ngshikang"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":5,"author":{"gitID":"ngshikang"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":7,"author":{"gitID":"ngshikang"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":8,"author":{"gitID":"ngshikang"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitID":"ngshikang"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":10,"author":{"gitID":"ngshikang"},"content":"import seedu.address.login.Login;"},{"lineNumber":11,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":12,"author":{"gitID":"ngshikang"},"content":"//@@author ngshikang"},{"lineNumber":13,"author":{"gitID":"ngshikang"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"ngshikang"},"content":" * The Login Window. Provides the layout for user login before accessing the main program."},{"lineNumber":15,"author":{"gitID":"ngshikang"},"content":" */"},{"lineNumber":16,"author":{"gitID":"ngshikang"},"content":"public class LoginWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":17,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":18,"author":{"gitID":"ngshikang"},"content":"    private static final String FXML \u003d \"LoginWindow.fxml\";"},{"lineNumber":19,"author":{"gitID":"ngshikang"},"content":"    private Stage primaryStage;"},{"lineNumber":20,"author":{"gitID":"ngshikang"},"content":"    private Login login;"},{"lineNumber":21,"author":{"gitID":"ngshikang"},"content":"    private LoginPane loginPane;"},{"lineNumber":22,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":23,"author":{"gitID":"ngshikang"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":24,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":25,"author":{"gitID":"ngshikang"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitID":"ngshikang"},"content":"    private AnchorPane loginPanePlaceholder;"},{"lineNumber":27,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":28,"author":{"gitID":"ngshikang"},"content":"    public LoginWindow(Stage primaryStage, Login login) {"},{"lineNumber":29,"author":{"gitID":"ngshikang"},"content":"        super(FXML, primaryStage);"},{"lineNumber":30,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":31,"author":{"gitID":"ngshikang"},"content":"        // Set dependencies"},{"lineNumber":32,"author":{"gitID":"ngshikang"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":33,"author":{"gitID":"ngshikang"},"content":"        this.login \u003d login;"},{"lineNumber":34,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":35,"author":{"gitID":"ngshikang"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":36,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":38,"author":{"gitID":"ngshikang"},"content":"    void fillPane() {"},{"lineNumber":39,"author":{"gitID":"ngshikang"},"content":"        loginPane \u003d new LoginPane(login);"},{"lineNumber":40,"author":{"gitID":"ngshikang"},"content":"        loginPanePlaceholder.getChildren().add(loginPane.getRoot());"},{"lineNumber":41,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":43,"author":{"gitID":"ngshikang"},"content":"    boolean checkAccess() {"},{"lineNumber":44,"author":{"gitID":"ngshikang"},"content":"        return loginPane.isAccessPermitted();"},{"lineNumber":45,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":47,"author":{"gitID":"ngshikang"},"content":"    void show() {"},{"lineNumber":48,"author":{"gitID":"ngshikang"},"content":"        primaryStage.show();"},{"lineNumber":49,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":51,"author":{"gitID":"ngshikang"},"content":"    void hide() {"},{"lineNumber":52,"author":{"gitID":"ngshikang"},"content":"        primaryStage.hide();"},{"lineNumber":53,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":55,"author":{"gitID":"ngshikang"},"content":"}"}],"authorContributionMap":{"ngshikang":55}},{"path":"src/main/java/seedu/address/ui/LoginPane.java","lines":[{"lineNumber":1,"author":{"gitID":"ngshikang"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":3,"author":{"gitID":"ngshikang"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":5,"author":{"gitID":"ngshikang"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":7,"author":{"gitID":"ngshikang"},"content":"import javafx.scene.control.Button;"},{"lineNumber":8,"author":{"gitID":"ngshikang"},"content":"import javafx.scene.control.PasswordField;"},{"lineNumber":9,"author":{"gitID":"ngshikang"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":10,"author":{"gitID":"ngshikang"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":11,"author":{"gitID":"ngshikang"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":12,"author":{"gitID":"ngshikang"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitID":"ngshikang"},"content":"import javafx.scene.text.Text;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":15,"author":{"gitID":"ngshikang"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"ngshikang"},"content":"import seedu.address.commons.events.ui.ExitLoginRequestEvent;"},{"lineNumber":17,"author":{"gitID":"ngshikang"},"content":"import seedu.address.login.Login;"},{"lineNumber":18,"author":{"gitID":"ngshikang"},"content":"import seedu.address.login.UserPass;"},{"lineNumber":19,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":20,"author":{"gitID":"ngshikang"},"content":"//@@author ngshikang"},{"lineNumber":21,"author":{"gitID":"ngshikang"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"ngshikang"},"content":" * A ui for the login screen"},{"lineNumber":23,"author":{"gitID":"ngshikang"},"content":" */"},{"lineNumber":24,"author":{"gitID":"ngshikang"},"content":"public class LoginPane extends UiPart\u003cRegion\u003e {"},{"lineNumber":25,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":26,"author":{"gitID":"ngshikang"},"content":"    private static final String FXML \u003d \"LoginPane.fxml\";"},{"lineNumber":27,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":28,"author":{"gitID":"ngshikang"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":29,"author":{"gitID":"ngshikang"},"content":"    private Login login;"},{"lineNumber":30,"author":{"gitID":"ngshikang"},"content":"    private boolean isAccessPermitted \u003d false;"},{"lineNumber":31,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":32,"author":{"gitID":"ngshikang"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"ngshikang"},"content":"    private TextField usernameTextField;"},{"lineNumber":34,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":35,"author":{"gitID":"ngshikang"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"ngshikang"},"content":"    private PasswordField passwordField;"},{"lineNumber":37,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":38,"author":{"gitID":"ngshikang"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"ngshikang"},"content":"    private Button loginButton;"},{"lineNumber":40,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":41,"author":{"gitID":"ngshikang"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"ngshikang"},"content":"    private Button createButton;"},{"lineNumber":43,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":44,"author":{"gitID":"ngshikang"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"ngshikang"},"content":"    private Button exitButton;"},{"lineNumber":46,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":47,"author":{"gitID":"ngshikang"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitID":"ngshikang"},"content":"    private Button helpButton;"},{"lineNumber":49,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":50,"author":{"gitID":"ngshikang"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitID":"ngshikang"},"content":"    private Text loginStatus;"},{"lineNumber":52,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":53,"author":{"gitID":"ngshikang"},"content":"    public LoginPane(Login login) {"},{"lineNumber":54,"author":{"gitID":"ngshikang"},"content":"        super(FXML);"},{"lineNumber":55,"author":{"gitID":"ngshikang"},"content":"        this.login \u003d login;"},{"lineNumber":56,"author":{"gitID":"ngshikang"},"content":"        usernameTextField.requestFocus();"},{"lineNumber":57,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":59,"author":{"gitID":"ngshikang"},"content":"    @FXML"},{"lineNumber":60,"author":{"gitID":"ngshikang"},"content":"    private void checkLoginDetails() {"},{"lineNumber":61,"author":{"gitID":"ngshikang"},"content":"        if (checkLoginDetails(login)) {"},{"lineNumber":62,"author":{"gitID":"ngshikang"},"content":"            login.accessPermitted();"},{"lineNumber":63,"author":{"gitID":"ngshikang"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":66,"author":{"gitID":"ngshikang"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"ngshikang"},"content":"     * Returns a boolean for checking login details"},{"lineNumber":68,"author":{"gitID":"ngshikang"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"ngshikang"},"content":"    private boolean checkLoginDetails(Login login) {"},{"lineNumber":70,"author":{"gitID":"ngshikang"},"content":"        try {"},{"lineNumber":71,"author":{"gitID":"ngshikang"},"content":"            isAccessPermitted \u003d login.checkLoginDetails("},{"lineNumber":72,"author":{"gitID":"ngshikang"},"content":"                    new UserPass(usernameTextField.getText().toLowerCase(),"},{"lineNumber":73,"author":{"gitID":"ngshikang"},"content":"                            passwordField.getText().toLowerCase()));"},{"lineNumber":74,"author":{"gitID":"ngshikang"},"content":"        } catch (Exception e) {"},{"lineNumber":75,"author":{"gitID":"ngshikang"},"content":"            loginStatus.setText(\"Login Failed. \");"},{"lineNumber":76,"author":{"gitID":"ngshikang"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"ngshikang"},"content":"        if (isAccessPermitted) {"},{"lineNumber":78,"author":{"gitID":"ngshikang"},"content":"            loginStatus.setText(\"Login Successful.\");"},{"lineNumber":79,"author":{"gitID":"ngshikang"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"ngshikang"},"content":"        return isAccessPermitted;"},{"lineNumber":81,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":83,"author":{"gitID":"ngshikang"},"content":"    @FXML"},{"lineNumber":84,"author":{"gitID":"ngshikang"},"content":"    private void createNewAccount() {"},{"lineNumber":85,"author":{"gitID":"ngshikang"},"content":"        createNewAccount(login);"},{"lineNumber":86,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":88,"author":{"gitID":"ngshikang"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"ngshikang"},"content":"     * Stores new profile\u0027s UserPass into UserPassStorage"},{"lineNumber":90,"author":{"gitID":"ngshikang"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"ngshikang"},"content":"    private void createNewAccount(Login login) {"},{"lineNumber":92,"author":{"gitID":"ngshikang"},"content":"        try {"},{"lineNumber":93,"author":{"gitID":"ngshikang"},"content":"            login.storeUserPass("},{"lineNumber":94,"author":{"gitID":"ngshikang"},"content":"                    new UserPass("},{"lineNumber":95,"author":{"gitID":"ngshikang"},"content":"                            usernameTextField.getText().toLowerCase(),"},{"lineNumber":96,"author":{"gitID":"ngshikang"},"content":"                            passwordField.getText().toLowerCase()));"},{"lineNumber":97,"author":{"gitID":"ngshikang"},"content":"            loginStatus.setText(\"Profile for \" + usernameTextField.getText().toLowerCase()"},{"lineNumber":98,"author":{"gitID":"ngshikang"},"content":"                    + \" is created. You may now log in.\");"},{"lineNumber":99,"author":{"gitID":"ngshikang"},"content":"        } catch (Exception e) {"},{"lineNumber":100,"author":{"gitID":"ngshikang"},"content":"            loginStatus.setText(\"Username \" + usernameTextField.getText().toLowerCase()"},{"lineNumber":101,"author":{"gitID":"ngshikang"},"content":"                    + \" is taken. Try another.\");"},{"lineNumber":102,"author":{"gitID":"ngshikang"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":105,"author":{"gitID":"ngshikang"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"ngshikang"},"content":"     * Handles the key press event, {@code keyEvent}."},{"lineNumber":107,"author":{"gitID":"ngshikang"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"ngshikang"},"content":"    @FXML"},{"lineNumber":109,"author":{"gitID":"ngshikang"},"content":"    private void handleKeyPress (KeyEvent keyEvent) {"},{"lineNumber":110,"author":{"gitID":"ngshikang"},"content":"        if (keyEvent.getCode().equals(KeyCode.ENTER)) {"},{"lineNumber":111,"author":{"gitID":"ngshikang"},"content":"            keyEvent.consume();"},{"lineNumber":112,"author":{"gitID":"ngshikang"},"content":"            if (loginButton.isFocused() || passwordField.isFocused()) {"},{"lineNumber":113,"author":{"gitID":"ngshikang"},"content":"                loginButton.fire();"},{"lineNumber":114,"author":{"gitID":"ngshikang"},"content":"            } else if (createButton.isFocused()) {"},{"lineNumber":115,"author":{"gitID":"ngshikang"},"content":"                createButton.fire();"},{"lineNumber":116,"author":{"gitID":"ngshikang"},"content":"            } else if (exitButton.isFocused()) {"},{"lineNumber":117,"author":{"gitID":"ngshikang"},"content":"                exitButton.fire();"},{"lineNumber":118,"author":{"gitID":"ngshikang"},"content":"            } else if (helpButton.isFocused()) {"},{"lineNumber":119,"author":{"gitID":"ngshikang"},"content":"                helpButton.fire();"},{"lineNumber":120,"author":{"gitID":"ngshikang"},"content":"            }"},{"lineNumber":121,"author":{"gitID":"ngshikang"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":124,"author":{"gitID":"ngshikang"},"content":"    @FXML"},{"lineNumber":125,"author":{"gitID":"ngshikang"},"content":"    private void openHelp () {"},{"lineNumber":126,"author":{"gitID":"ngshikang"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":127,"author":{"gitID":"ngshikang"},"content":"        helpWindow.show();"},{"lineNumber":128,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":130,"author":{"gitID":"ngshikang"},"content":"    @FXML"},{"lineNumber":131,"author":{"gitID":"ngshikang"},"content":"    private void closeApplication() {"},{"lineNumber":132,"author":{"gitID":"ngshikang"},"content":"        EventsCenter.getInstance().post(new ExitLoginRequestEvent());"},{"lineNumber":133,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":135,"author":{"gitID":"ngshikang"},"content":"    public boolean isAccessPermitted() {"},{"lineNumber":136,"author":{"gitID":"ngshikang"},"content":"        return isAccessPermitted;"},{"lineNumber":137,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"ngshikang"},"content":"}"}],"authorContributionMap":{"ngshikang":137,"-":1}},{"path":"src/main/java/seedu/address/commons/events/ui/ExitLoginRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"ngshikang"},"content":" * Indicates a request for Login termination"},{"lineNumber":7,"author":{"gitID":"ngshikang"},"content":" */"},{"lineNumber":8,"author":{"gitID":"ngshikang"},"content":"public class ExitLoginRequestEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"ngshikang"},"content":"}"}],"authorContributionMap":{"ngshikang":4,"-":10}},{"path":"src/main/java/seedu/address/commons/events/ui/LoginAccessGrantedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"ngshikang"},"content":" * Indicates a request for App initialisation following login details verification"},{"lineNumber":7,"author":{"gitID":"ngshikang"},"content":" */"},{"lineNumber":8,"author":{"gitID":"ngshikang"},"content":"public class LoginAccessGrantedEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"ngshikang"},"content":"}"}],"authorContributionMap":{"ngshikang":4,"-":10}},{"path":"src/main/java/seedu/address/commons/core/Mailer.java","lines":[{"lineNumber":1,"author":{"gitID":"mattbuot"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":3,"author":{"gitID":"mattbuot"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"mattbuot"},"content":"import java.util.Properties;"},{"lineNumber":5,"author":{"gitID":"mattbuot"},"content":"import javax.mail.Message;"},{"lineNumber":6,"author":{"gitID":"mattbuot"},"content":"import javax.mail.MessagingException;"},{"lineNumber":7,"author":{"gitID":"mattbuot"},"content":"import javax.mail.Session;"},{"lineNumber":8,"author":{"gitID":"mattbuot"},"content":"import javax.mail.Transport;"},{"lineNumber":9,"author":{"gitID":"mattbuot"},"content":"import javax.mail.internet.InternetAddress;"},{"lineNumber":10,"author":{"gitID":"mattbuot"},"content":"import javax.mail.internet.MimeMessage;"},{"lineNumber":11,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":12,"author":{"gitID":"mattbuot"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":14,"author":{"gitID":"mattbuot"},"content":"//@@author mattbuot"},{"lineNumber":15,"author":{"gitID":"mattbuot"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"mattbuot"},"content":" * Send personalized emails to drivers and customers"},{"lineNumber":17,"author":{"gitID":"mattbuot"},"content":" */"},{"lineNumber":18,"author":{"gitID":"mattbuot"},"content":"public class Mailer {"},{"lineNumber":19,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":20,"author":{"gitID":"mattbuot"},"content":"    private static String pigeonsMail \u003d \"pigeonscs2103@gmail.com\";"},{"lineNumber":21,"author":{"gitID":"mattbuot"},"content":"    private static String password \u003d \"Pigeons2103\";"},{"lineNumber":22,"author":{"gitID":"mattbuot"},"content":"    private static String host \u003d \"smtp.gmail.com\";"},{"lineNumber":23,"author":{"gitID":"mattbuot"},"content":"    private static String defaultRecipient \u003d pigeonsMail;"},{"lineNumber":24,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":25,"author":{"gitID":"mattbuot"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"mattbuot"},"content":"     * Send an email to the"},{"lineNumber":27,"author":{"gitID":"mattbuot"},"content":"     * @param recipients"},{"lineNumber":28,"author":{"gitID":"mattbuot"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"mattbuot"},"content":"    public static boolean emailCustomers(List\u003cPerson\u003e recipients) {"},{"lineNumber":30,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":31,"author":{"gitID":"mattbuot"},"content":"        Session session \u003d getSession();"},{"lineNumber":32,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":33,"author":{"gitID":"mattbuot"},"content":"        MimeMessage message \u003d new MimeMessage(session);"},{"lineNumber":34,"author":{"gitID":"mattbuot"},"content":"        try {"},{"lineNumber":35,"author":{"gitID":"mattbuot"},"content":"            message.setFrom(new InternetAddress(pigeonsMail));"},{"lineNumber":36,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":37,"author":{"gitID":"mattbuot"},"content":"            for (Person p: recipients) {"},{"lineNumber":38,"author":{"gitID":"mattbuot"},"content":"                message.addRecipient(Message.RecipientType.TO, new InternetAddress(p.getEmail().toString()));"},{"lineNumber":39,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":40,"author":{"gitID":"mattbuot"},"content":"                String subject \u003d \"Your delivery with Pigeons\";"},{"lineNumber":41,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":42,"author":{"gitID":"mattbuot"},"content":"                String body \u003d \"Dear \""},{"lineNumber":43,"author":{"gitID":"mattbuot"},"content":"                        + p.getName().toString() + \", your delivery is arriving on \""},{"lineNumber":44,"author":{"gitID":"mattbuot"},"content":"                        + p.getDate().toString()"},{"lineNumber":45,"author":{"gitID":"mattbuot"},"content":"                        + \" please be at your place some pigeons may visit you :)\""},{"lineNumber":46,"author":{"gitID":"mattbuot"},"content":"                        + \"\u003cimg src\u003d\\\"https://i.imgur.com/Eg6CDss.jpg\\\" \""},{"lineNumber":47,"author":{"gitID":"mattbuot"},"content":"                        + \"alt\u003d\\\"Pigeons Logo\\\" style\u003d\\\"display: block\\\"\u003e\u003cbr\u003e\";"},{"lineNumber":48,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":49,"author":{"gitID":"mattbuot"},"content":"                message.setSubject(subject);"},{"lineNumber":50,"author":{"gitID":"mattbuot"},"content":"                message.setContent(body, \"text/html\");"},{"lineNumber":51,"author":{"gitID":"mattbuot"},"content":"            }"},{"lineNumber":52,"author":{"gitID":"mattbuot"},"content":"            Transport transport \u003d session.getTransport(\"smtp\");"},{"lineNumber":53,"author":{"gitID":"mattbuot"},"content":"            transport.connect(host, pigeonsMail, password);"},{"lineNumber":54,"author":{"gitID":"mattbuot"},"content":"            transport.sendMessage(message, message.getAllRecipients());"},{"lineNumber":55,"author":{"gitID":"mattbuot"},"content":"            transport.close();"},{"lineNumber":56,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":57,"author":{"gitID":"mattbuot"},"content":"        } catch (MessagingException ae) {"},{"lineNumber":58,"author":{"gitID":"mattbuot"},"content":"            return false;"},{"lineNumber":59,"author":{"gitID":"mattbuot"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"mattbuot"},"content":"        return true;"},{"lineNumber":61,"author":{"gitID":"mattbuot"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":63,"author":{"gitID":"mattbuot"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"mattbuot"},"content":"     *"},{"lineNumber":65,"author":{"gitID":"mattbuot"},"content":"     * Sends an email to the driver with a recap of the itinerary including the following information"},{"lineNumber":66,"author":{"gitID":"mattbuot"},"content":"     * @param addresses"},{"lineNumber":67,"author":{"gitID":"mattbuot"},"content":"     * @param duration"},{"lineNumber":68,"author":{"gitID":"mattbuot"},"content":"     * @param date"},{"lineNumber":69,"author":{"gitID":"mattbuot"},"content":"     * @return false if an error occured, true otherwise"},{"lineNumber":70,"author":{"gitID":"mattbuot"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"mattbuot"},"content":"    public static boolean emailDriver(List\u003cString\u003e addresses, String duration, String date) {"},{"lineNumber":72,"author":{"gitID":"mattbuot"},"content":"        if (addresses.size() \u003d\u003d 0) {"},{"lineNumber":73,"author":{"gitID":"mattbuot"},"content":"            return false;"},{"lineNumber":74,"author":{"gitID":"mattbuot"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"mattbuot"},"content":"        Session session \u003d getSession();"},{"lineNumber":76,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":77,"author":{"gitID":"mattbuot"},"content":"        MimeMessage message \u003d new MimeMessage(session);"},{"lineNumber":78,"author":{"gitID":"mattbuot"},"content":"        try {"},{"lineNumber":79,"author":{"gitID":"mattbuot"},"content":"            message.setFrom(new InternetAddress(pigeonsMail));"},{"lineNumber":80,"author":{"gitID":"mattbuot"},"content":"            message.setSubject(\"Your itinerary on \" + date);"},{"lineNumber":81,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":82,"author":{"gitID":"mattbuot"},"content":"            String body \u003d \"\u003ch2\u003eThe estimated duration for this itinerary is : \""},{"lineNumber":83,"author":{"gitID":"mattbuot"},"content":"                    + duration"},{"lineNumber":84,"author":{"gitID":"mattbuot"},"content":"                    + \" (\""},{"lineNumber":85,"author":{"gitID":"mattbuot"},"content":"                    + addresses.size()"},{"lineNumber":86,"author":{"gitID":"mattbuot"},"content":"                    + \" deliveries)\""},{"lineNumber":87,"author":{"gitID":"mattbuot"},"content":"                    + \"\u003c/h2\u003e\""},{"lineNumber":88,"author":{"gitID":"mattbuot"},"content":"                    + \"\u003col\u003e\";"},{"lineNumber":89,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":90,"author":{"gitID":"mattbuot"},"content":"            for (String address: addresses) {"},{"lineNumber":91,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":92,"author":{"gitID":"mattbuot"},"content":"                body +\u003d \"\u003cli\u003e\" + address + \"\u003c/li\u003e\";"},{"lineNumber":93,"author":{"gitID":"mattbuot"},"content":"            }"},{"lineNumber":94,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":95,"author":{"gitID":"mattbuot"},"content":"            body +\u003d \"\u003c/ol\u003e\""},{"lineNumber":96,"author":{"gitID":"mattbuot"},"content":"                    + \"\u003cimg src\u003d\\\"https://i.imgur.com/Eg6CDss.jpg\\\" \""},{"lineNumber":97,"author":{"gitID":"mattbuot"},"content":"                    + \"alt\u003d\\\"Pigeons Logo\\\" style\u003d\\\"display: block\\\"\u003e\";"},{"lineNumber":98,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":99,"author":{"gitID":"mattbuot"},"content":"            message.setContent(body, \"text/html\");"},{"lineNumber":100,"author":{"gitID":"mattbuot"},"content":"            message.addRecipient(Message.RecipientType.TO, new InternetAddress(pigeonsMail));"},{"lineNumber":101,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":102,"author":{"gitID":"mattbuot"},"content":"            Transport transport \u003d session.getTransport(\"smtp\");"},{"lineNumber":103,"author":{"gitID":"mattbuot"},"content":"            transport.connect(host, pigeonsMail, password);"},{"lineNumber":104,"author":{"gitID":"mattbuot"},"content":"            transport.sendMessage(message, message.getAllRecipients());"},{"lineNumber":105,"author":{"gitID":"mattbuot"},"content":"            transport.close();"},{"lineNumber":106,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":107,"author":{"gitID":"mattbuot"},"content":"        } catch (MessagingException ae) {"},{"lineNumber":108,"author":{"gitID":"mattbuot"},"content":"            return false;"},{"lineNumber":109,"author":{"gitID":"mattbuot"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"mattbuot"},"content":"        return true;"},{"lineNumber":111,"author":{"gitID":"mattbuot"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":113,"author":{"gitID":"mattbuot"},"content":"    private static Session getSession() {"},{"lineNumber":114,"author":{"gitID":"mattbuot"},"content":"        Properties props \u003d System.getProperties();"},{"lineNumber":115,"author":{"gitID":"mattbuot"},"content":"        props.put(\"mail.smtp.starttls.enable\", \"true\");"},{"lineNumber":116,"author":{"gitID":"mattbuot"},"content":"        props.put(\"mail.smtp.host\", host);"},{"lineNumber":117,"author":{"gitID":"mattbuot"},"content":"        props.put(\"mail.smtp.user\", pigeonsMail);"},{"lineNumber":118,"author":{"gitID":"mattbuot"},"content":"        props.put(\"mail.smtp.password\", password);"},{"lineNumber":119,"author":{"gitID":"mattbuot"},"content":"        props.put(\"mail.smtp.port\", \"587\");"},{"lineNumber":120,"author":{"gitID":"mattbuot"},"content":"        props.put(\"mail.smtp.auth\", \"true\");"},{"lineNumber":121,"author":{"gitID":"mattbuot"},"content":"        props.put(\"mail.smtp.ssl.trust\", host);"},{"lineNumber":122,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":123,"author":{"gitID":"mattbuot"},"content":"        return Session.getDefaultInstance(props);"},{"lineNumber":124,"author":{"gitID":"mattbuot"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"mattbuot"},"content":"}"}],"authorContributionMap":{"mattbuot":125}},{"path":"src/main/java/seedu/address/commons/events/ui/ShowDefaultPageEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"ncaminh"},"content":"//@@author ncaminh"},{"lineNumber":6,"author":{"gitID":"ncaminh"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"ncaminh"},"content":" * Show default page"},{"lineNumber":8,"author":{"gitID":"ncaminh"},"content":" */"},{"lineNumber":9,"author":{"gitID":"ncaminh"},"content":"public class ShowDefaultPageEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":11,"author":{"gitID":"ncaminh"},"content":"    @Override"},{"lineNumber":12,"author":{"gitID":"ncaminh"},"content":"    public String toString() {"},{"lineNumber":13,"author":{"gitID":"ncaminh"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":14,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"ncaminh"},"content":"}"}],"authorContributionMap":{"ncaminh":11,"-":4}},{"path":"src/main/java/seedu/address/commons/events/ui/ShowRouteFromOneToAnotherEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"ncaminh"},"content":"//@@author ncaminh"},{"lineNumber":8,"author":{"gitID":"ncaminh"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"ncaminh"},"content":" * Show Google map route from HQ to many locations"},{"lineNumber":10,"author":{"gitID":"ncaminh"},"content":" */"},{"lineNumber":11,"author":{"gitID":"ncaminh"},"content":"public class ShowRouteFromOneToAnotherEvent extends BaseEvent {"},{"lineNumber":12,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":13,"author":{"gitID":"ncaminh"},"content":"    public final List\u003cString\u003e sortedList;"},{"lineNumber":14,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":15,"author":{"gitID":"ncaminh"},"content":"    public ShowRouteFromOneToAnotherEvent(List\u003cString\u003e sortedList) {"},{"lineNumber":16,"author":{"gitID":"ncaminh"},"content":"        this.sortedList \u003d sortedList;"},{"lineNumber":17,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":19,"author":{"gitID":"ncaminh"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"ncaminh"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitID":"ncaminh"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":22,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"ncaminh"},"content":"}"}],"authorContributionMap":{"ncaminh":17,"-":6}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.maps.errors.ApiException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException,"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            InterruptedException, ApiException, IOException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":32,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":33,"author":{"gitID":"mattbuot"},"content":"    /** Returns a suffix to complete the input query */"},{"lineNumber":34,"author":{"gitID":"mattbuot"},"content":"    String autocomplete(String query);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"mattbuot":3,"-":32}},{"path":"src/main/java/seedu/address/commons/events/ui/ShowRouteFromHeadQuarterToOneEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"ncaminh"},"content":"//@@author ncaminh"},{"lineNumber":6,"author":{"gitID":"ncaminh"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"ncaminh"},"content":" * Show Google map route from HQ to many locations"},{"lineNumber":8,"author":{"gitID":"ncaminh"},"content":" */"},{"lineNumber":9,"author":{"gitID":"ncaminh"},"content":"public class ShowRouteFromHeadQuarterToOneEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":11,"author":{"gitID":"ncaminh"},"content":"    public final String destination;"},{"lineNumber":12,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":13,"author":{"gitID":"ncaminh"},"content":"    public ShowRouteFromHeadQuarterToOneEvent(String destination) {"},{"lineNumber":14,"author":{"gitID":"ncaminh"},"content":"        this.destination \u003d destination;"},{"lineNumber":15,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":17,"author":{"gitID":"ncaminh"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"ncaminh"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"ncaminh"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":20,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"ncaminh"},"content":"}"}],"authorContributionMap":{"ncaminh":17,"-":4}},{"path":"src/main/java/seedu/address/commons/events/ui/ShowMultiLocationFromHeadQuarterEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"ncaminh"},"content":"//@@author ncaminh"},{"lineNumber":8,"author":{"gitID":"ncaminh"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"ncaminh"},"content":" * Show Google map route from HQ to many locations"},{"lineNumber":10,"author":{"gitID":"ncaminh"},"content":" */"},{"lineNumber":11,"author":{"gitID":"ncaminh"},"content":"public class ShowMultiLocationFromHeadQuarterEvent extends BaseEvent {"},{"lineNumber":12,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":13,"author":{"gitID":"ncaminh"},"content":"    public final List\u003cString\u003e sortedList;"},{"lineNumber":14,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":15,"author":{"gitID":"ncaminh"},"content":"    public ShowMultiLocationFromHeadQuarterEvent(List\u003cString\u003e sortedList) {"},{"lineNumber":16,"author":{"gitID":"ncaminh"},"content":"        this.sortedList \u003d sortedList;"},{"lineNumber":17,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":19,"author":{"gitID":"ncaminh"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"ncaminh"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitID":"ncaminh"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":22,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"ncaminh"},"content":"}"}],"authorContributionMap":{"ncaminh":17,"-":6}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_ADDRESS_CANNOT_AT_HQ;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"meerakanani10"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DELIV_DATE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.GetDistance;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":20,"author":{"gitID":"meerakanani10"},"content":"import seedu.address.model.person.DelivDate;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String HQ_ADDRESS \u003d \"Kent Ridge MRT\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":40,"author":{"gitID":"meerakanani10"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":41,"author":{"gitID":"meerakanani10"},"content":"                        PREFIX_DELIV_DATE, PREFIX_TAG);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"meerakanani10"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_DELIV_DATE)"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":53,"author":{"gitID":"meerakanani10"},"content":"            DelivDate date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DELIV_DATE)).get();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"            //check whether the person address is different from the HQ"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            String addressToString \u003d  address.toString();"},{"lineNumber":58,"author":{"gitID":"meerakanani10"},"content":"            Double checkDistanceFromHq \u003d new GetDistance().getDistance(HQ_ADDRESS, addressToString);"},{"lineNumber":59,"author":{"gitID":"meerakanani10"},"content":"            if (checkDistanceFromHq \u003d\u003d 0) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                throw new ParseException(MESSAGE_ADDRESS_CANNOT_AT_HQ);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"meerakanani10"},"content":"            Person person \u003d new Person(name, phone, email, address, date, tagList);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"            return new AddCommand(person);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":69,"author":{"gitID":"meerakanani10"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":70,"author":{"gitID":"meerakanani10"},"content":"            throw new ParseException(e.getMessage(), e);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"meerakanani10":11,"-":71}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":14,"author":{"gitID":"meerakanani10"},"content":"    public static final Prefix PREFIX_DELIV_DATE \u003d new Prefix(\"d/\");"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"meerakanani10":1,"-":15}},{"path":"src/main/java/seedu/address/logic/SortAddresses.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":4,"author":{"gitID":"meerakanani10"},"content":"import java.util.Comparator;"},{"lineNumber":5,"author":{"gitID":"meerakanani10"},"content":"import java.util.LinkedHashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.LinkedList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"meerakanani10"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"meerakanani10"},"content":"import java.util.Map.Entry;"},{"lineNumber":10,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":11,"author":{"gitID":"meerakanani10"},"content":"//@@author meerakanani10"},{"lineNumber":12,"author":{"gitID":"meerakanani10"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"meerakanani10"},"content":" * Sorts a hashmap of addresses and distances based on the distances"},{"lineNumber":14,"author":{"gitID":"meerakanani10"},"content":" */"},{"lineNumber":15,"author":{"gitID":"meerakanani10"},"content":"public class SortAddresses {"},{"lineNumber":16,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":17,"author":{"gitID":"meerakanani10"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"meerakanani10"},"content":"     *"},{"lineNumber":19,"author":{"gitID":"meerakanani10"},"content":"     * @param unsortMap"},{"lineNumber":20,"author":{"gitID":"meerakanani10"},"content":"     * @return"},{"lineNumber":21,"author":{"gitID":"meerakanani10"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"meerakanani10"},"content":"    public Map\u003cString, Double\u003e sortByComparator(Map\u003cString, Double\u003e unsortMap) {"},{"lineNumber":23,"author":{"gitID":"meerakanani10"},"content":"        List\u003cEntry\u003cString, Double\u003e\u003e list \u003d new LinkedList\u003cEntry\u003cString, Double\u003e\u003e(unsortMap.entrySet());"},{"lineNumber":24,"author":{"gitID":"meerakanani10"},"content":"        boolean order \u003d true;"},{"lineNumber":25,"author":{"gitID":"meerakanani10"},"content":"        // Sorting the list based on values"},{"lineNumber":26,"author":{"gitID":"meerakanani10"},"content":"        Collections.sort(list, new Comparator\u003cEntry\u003cString, Double\u003e\u003e() {"},{"lineNumber":27,"author":{"gitID":"meerakanani10"},"content":"            public int compare(Entry\u003cString, Double\u003e val1, Entry\u003cString, Double\u003e val2) {"},{"lineNumber":28,"author":{"gitID":"meerakanani10"},"content":"                if (order) {"},{"lineNumber":29,"author":{"gitID":"meerakanani10"},"content":"                    return val1.getValue().compareTo(val2.getValue());"},{"lineNumber":30,"author":{"gitID":"meerakanani10"},"content":"                } else {"},{"lineNumber":31,"author":{"gitID":"meerakanani10"},"content":"                    return val2.getValue().compareTo(val1.getValue());"},{"lineNumber":32,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":33,"author":{"gitID":"meerakanani10"},"content":"                }"},{"lineNumber":34,"author":{"gitID":"meerakanani10"},"content":"            }"},{"lineNumber":35,"author":{"gitID":"meerakanani10"},"content":"        });"},{"lineNumber":36,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":37,"author":{"gitID":"meerakanani10"},"content":"        // Maintaining insertion order with the help of LinkedList"},{"lineNumber":38,"author":{"gitID":"meerakanani10"},"content":"        Map\u003cString, Double\u003e sortedMap \u003d new LinkedHashMap\u003cString, Double\u003e();"},{"lineNumber":39,"author":{"gitID":"meerakanani10"},"content":"        Map\u003cString, Double\u003e cleanSortedMap \u003d new LinkedHashMap\u003cString, Double\u003e();"},{"lineNumber":40,"author":{"gitID":"meerakanani10"},"content":"        for (Entry\u003cString, Double\u003e entry : list) {"},{"lineNumber":41,"author":{"gitID":"meerakanani10"},"content":"            sortedMap.put(entry.getKey(), entry.getValue());"},{"lineNumber":42,"author":{"gitID":"meerakanani10"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":44,"author":{"gitID":"meerakanani10"},"content":"        cleanSortedMap \u003d cleanSorted(sortedMap);"},{"lineNumber":45,"author":{"gitID":"meerakanani10"},"content":"        return cleanSortedMap;"},{"lineNumber":46,"author":{"gitID":"meerakanani10"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":48,"author":{"gitID":"meerakanani10"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"meerakanani10"},"content":"     *"},{"lineNumber":50,"author":{"gitID":"meerakanani10"},"content":"     * @param map"},{"lineNumber":51,"author":{"gitID":"meerakanani10"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"meerakanani10"},"content":"    public void printMap(Map\u003cString, Double\u003e map) {"},{"lineNumber":53,"author":{"gitID":"meerakanani10"},"content":"        for (Entry\u003cString, Double\u003e entry : map.entrySet()) {"},{"lineNumber":54,"author":{"gitID":"meerakanani10"},"content":"            System.out.println(\"Key : \" + entry.getKey() + \" Value : \" + entry.getValue());"},{"lineNumber":55,"author":{"gitID":"meerakanani10"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"meerakanani10"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":58,"author":{"gitID":"meerakanani10"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"meerakanani10"},"content":"     *"},{"lineNumber":60,"author":{"gitID":"meerakanani10"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"meerakanani10"},"content":"    public Map\u003cString, Double\u003e cleanSorted(Map\u003cString, Double\u003e sortedMap) {"},{"lineNumber":62,"author":{"gitID":"meerakanani10"},"content":"        for (Entry\u003cString, Double\u003e entry : sortedMap.entrySet()) {"},{"lineNumber":63,"author":{"gitID":"meerakanani10"},"content":"            String pairAddresses \u003d entry.getKey();"},{"lineNumber":64,"author":{"gitID":"meerakanani10"},"content":"            String[] addresses \u003d pairAddresses.split(\"_\");"},{"lineNumber":65,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":66,"author":{"gitID":"meerakanani10"},"content":"            if (addresses.length \u003e 1 \u0026\u0026 addresses[0].equals(addresses[1])) {"},{"lineNumber":67,"author":{"gitID":"meerakanani10"},"content":"                sortedMap.remove(entry.getKey());"},{"lineNumber":68,"author":{"gitID":"meerakanani10"},"content":"            }"},{"lineNumber":69,"author":{"gitID":"meerakanani10"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":71,"author":{"gitID":"meerakanani10"},"content":"        return sortedMap;"},{"lineNumber":72,"author":{"gitID":"meerakanani10"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"meerakanani10"},"content":"}"}],"authorContributionMap":{"meerakanani10":68,"-":5}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DistanceCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":15,"author":{"gitID":"mattbuot"},"content":"import seedu.address.logic.commands.EmailCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":17,"author":{"gitID":"meerakanani10"},"content":"import seedu.address.logic.commands.FilterCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"meerakanani10"},"content":"        case FilterCommand.COMMAND_WORD:"},{"lineNumber":73,"author":{"gitID":"meerakanani10"},"content":"            return new FilterCommandParser().parse(arguments);"},{"lineNumber":74,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"mattbuot"},"content":"        case EmailCommand.COMMAND_WORD:"},{"lineNumber":82,"author":{"gitID":"mattbuot"},"content":"            return new EmailCommand();"},{"lineNumber":83,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        case DistanceCommand.COMMAND_WORD:"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            return new DistanceCommandParser().parse(arguments);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"mattbuot":4,"meerakanani10":4,"-":96}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":14,"author":{"gitID":"meerakanani10"},"content":"import seedu.address.model.person.DelivDate;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":22,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"meerakanani10"},"content":"     * Parses a {@code String date} into an {@code Date}."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":122,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":123,"author":{"gitID":"meerakanani10"},"content":"     * @throws IllegalValueException if the given {@code date} is invalid."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"meerakanani10"},"content":"    public static DelivDate parseDate(String date) throws IllegalValueException {"},{"lineNumber":126,"author":{"gitID":"meerakanani10"},"content":"        requireNonNull(date);"},{"lineNumber":127,"author":{"gitID":"meerakanani10"},"content":"        String trimmedAddress \u003d date.trim();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"meerakanani10"},"content":"        return new DelivDate(trimmedAddress);"},{"lineNumber":132,"author":{"gitID":"meerakanani10"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"meerakanani10"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"meerakanani10"},"content":"     * Parses a {@code Optional\u003cString\u003e date} into an {@code Optional\u003cDelivDate\u003e} if {@code date} is present."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"meerakanani10"},"content":"    public static Optional\u003cDelivDate\u003e parseDate(Optional\u003cString\u003e date) throws IllegalValueException {"},{"lineNumber":138,"author":{"gitID":"meerakanani10"},"content":"        requireNonNull(date);"},{"lineNumber":139,"author":{"gitID":"meerakanani10"},"content":"        return date.isPresent() ? Optional.of(parseDate(date.get())) : Optional.empty();"},{"lineNumber":140,"author":{"gitID":"meerakanani10"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":142,"author":{"gitID":"meerakanani10"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"meerakanani10"},"content":"     * Parses a {@code String date} into an {@code Date}."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":146,"author":{"gitID":"meerakanani10"},"content":"     * @throws IllegalValueException if the given {@code date} is invalid."},{"lineNumber":147,"author":{"gitID":"meerakanani10"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":169,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":170,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":171,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":183,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"meerakanani10":19,"-":173}},{"path":"src/main/java/seedu/address/logic/RouteOptimization.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"meerakanani10"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"meerakanani10"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitID":"meerakanani10"},"content":"import java.util.LinkedHashMap;"},{"lineNumber":6,"author":{"gitID":"meerakanani10"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"meerakanani10"},"content":"import java.util.Map;"},{"lineNumber":8,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":9,"author":{"gitID":"meerakanani10"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitID":"meerakanani10"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":11,"author":{"gitID":"meerakanani10"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"meerakanani10"},"content":"//@@author meerakanani10"},{"lineNumber":14,"author":{"gitID":"meerakanani10"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"meerakanani10"},"content":" * logic for the shortest delivery route"},{"lineNumber":16,"author":{"gitID":"meerakanani10"},"content":" */"},{"lineNumber":17,"author":{"gitID":"meerakanani10"},"content":"public class RouteOptimization {"},{"lineNumber":18,"author":{"gitID":"meerakanani10"},"content":"    public static final String HQ_ADDRESS \u003d \"Kent Ridge MRT\";"},{"lineNumber":19,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":20,"author":{"gitID":"meerakanani10"},"content":"    //@@author meerakanani10"},{"lineNumber":21,"author":{"gitID":"meerakanani10"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"meerakanani10"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"meerakanani10"},"content":"     * @param model"},{"lineNumber":24,"author":{"gitID":"meerakanani10"},"content":"     * @return"},{"lineNumber":25,"author":{"gitID":"meerakanani10"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"meerakanani10"},"content":"    public List\u003cString\u003e getAddresses(Model model) {"},{"lineNumber":27,"author":{"gitID":"meerakanani10"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":28,"author":{"gitID":"meerakanani10"},"content":"        List\u003cString\u003e filteredAddresses \u003d new ArrayList\u003c\u003e();"},{"lineNumber":29,"author":{"gitID":"meerakanani10"},"content":"        List\u003cString\u003e optimizedRoute \u003d new ArrayList\u003c\u003e();"},{"lineNumber":30,"author":{"gitID":"meerakanani10"},"content":"        String addressWithoutUnit;"},{"lineNumber":31,"author":{"gitID":"meerakanani10"},"content":"        String startingPoint;"},{"lineNumber":32,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":33,"author":{"gitID":"meerakanani10"},"content":"        if (lastShownList.size() \u003d\u003d 1) {"},{"lineNumber":34,"author":{"gitID":"meerakanani10"},"content":"            Address address \u003d lastShownList.get(0).getAddress();"},{"lineNumber":35,"author":{"gitID":"meerakanani10"},"content":"            if (isFindableAddress(address)) {"},{"lineNumber":36,"author":{"gitID":"meerakanani10"},"content":"                String name \u003d lastShownList.get(0).getName().toString();"},{"lineNumber":37,"author":{"gitID":"meerakanani10"},"content":"                addressWithoutUnit \u003d removeUnit(address);"},{"lineNumber":38,"author":{"gitID":"meerakanani10"},"content":"                optimizedRoute.add(addressWithoutUnit);"},{"lineNumber":39,"author":{"gitID":"meerakanani10"},"content":"            }"},{"lineNumber":40,"author":{"gitID":"meerakanani10"},"content":"        } else {"},{"lineNumber":41,"author":{"gitID":"meerakanani10"},"content":"            for (int i \u003d 0; i \u003c lastShownList.size(); i++) {"},{"lineNumber":42,"author":{"gitID":"meerakanani10"},"content":"                Address address \u003d lastShownList.get(i).getAddress();"},{"lineNumber":43,"author":{"gitID":"meerakanani10"},"content":"                if (isFindableAddress(address)) {"},{"lineNumber":44,"author":{"gitID":"meerakanani10"},"content":"                    addressWithoutUnit \u003d removeUnit(address);"},{"lineNumber":45,"author":{"gitID":"meerakanani10"},"content":"                    filteredAddresses.add(addressWithoutUnit);"},{"lineNumber":46,"author":{"gitID":"meerakanani10"},"content":"                }"},{"lineNumber":47,"author":{"gitID":"meerakanani10"},"content":"            }"},{"lineNumber":48,"author":{"gitID":"meerakanani10"},"content":"            if (!filteredAddresses.isEmpty()) {"},{"lineNumber":49,"author":{"gitID":"meerakanani10"},"content":"                optimizedRoute \u003d getStartingAddress(filteredAddresses, optimizedRoute);"},{"lineNumber":50,"author":{"gitID":"meerakanani10"},"content":"                filteredAddresses \u003d removeAddress(optimizedRoute.get(0), filteredAddresses);"},{"lineNumber":51,"author":{"gitID":"meerakanani10"},"content":"                if (!filteredAddresses.isEmpty()) {"},{"lineNumber":52,"author":{"gitID":"meerakanani10"},"content":"                    optimizedRoute \u003d getDistances(filteredAddresses, optimizedRoute.get(0), optimizedRoute);"},{"lineNumber":53,"author":{"gitID":"meerakanani10"},"content":"                }"},{"lineNumber":54,"author":{"gitID":"meerakanani10"},"content":"            }"},{"lineNumber":55,"author":{"gitID":"meerakanani10"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"meerakanani10"},"content":"        return optimizedRoute;"},{"lineNumber":57,"author":{"gitID":"meerakanani10"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":59,"author":{"gitID":"ncaminh"},"content":"    //@@author ncaminh"},{"lineNumber":60,"author":{"gitID":"ncaminh"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"ncaminh"},"content":"     * Check whether the address can be found by Google Map API or not"},{"lineNumber":62,"author":{"gitID":"ncaminh"},"content":"     * @param address"},{"lineNumber":63,"author":{"gitID":"ncaminh"},"content":"     * @return"},{"lineNumber":64,"author":{"gitID":"ncaminh"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"ncaminh"},"content":"    private boolean isFindableAddress(Address address) {"},{"lineNumber":66,"author":{"gitID":"ncaminh"},"content":"        String addressUnderCheck \u003d address.toString();"},{"lineNumber":67,"author":{"gitID":"ncaminh"},"content":"        GetDistance distance \u003d new GetDistance();"},{"lineNumber":68,"author":{"gitID":"ncaminh"},"content":"        if (distance.getDistance(HQ_ADDRESS, addressUnderCheck) \u003d\u003d -1.0) {"},{"lineNumber":69,"author":{"gitID":"ncaminh"},"content":"            return false;"},{"lineNumber":70,"author":{"gitID":"ncaminh"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"ncaminh"},"content":"        return true;"},{"lineNumber":72,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":74,"author":{"gitID":"meerakanani10"},"content":"    //@@author meerakanani10"},{"lineNumber":75,"author":{"gitID":"meerakanani10"},"content":"    public List\u003cString\u003e getStartingAddress(List\u003cString\u003e filteredAddresses, List\u003cString\u003e optimizedRoute) {"},{"lineNumber":76,"author":{"gitID":"meerakanani10"},"content":"        Map\u003cString, Double\u003e startingRoute \u003d new LinkedHashMap\u003c\u003e();"},{"lineNumber":77,"author":{"gitID":"meerakanani10"},"content":"        GetDistance distance \u003d new GetDistance();"},{"lineNumber":78,"author":{"gitID":"meerakanani10"},"content":"        SortAddresses sort \u003d new SortAddresses();"},{"lineNumber":79,"author":{"gitID":"meerakanani10"},"content":"        Map\u003cString, Double\u003e dummy;"},{"lineNumber":80,"author":{"gitID":"meerakanani10"},"content":"        String first;"},{"lineNumber":81,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":82,"author":{"gitID":"meerakanani10"},"content":"        for (int i \u003d 0; i \u003c filteredAddresses.size(); i++) {"},{"lineNumber":83,"author":{"gitID":"meerakanani10"},"content":"            String destination \u003d filteredAddresses.get(i);"},{"lineNumber":84,"author":{"gitID":"meerakanani10"},"content":"            String origin \u003d HQ_ADDRESS;"},{"lineNumber":85,"author":{"gitID":"meerakanani10"},"content":"            startingRoute.put(labelRoutes(origin, destination), distance.getDistance(origin, destination));"},{"lineNumber":86,"author":{"gitID":"meerakanani10"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"meerakanani10"},"content":"        dummy \u003d sort.cleanSorted(sort.sortByComparator(startingRoute));"},{"lineNumber":88,"author":{"gitID":"meerakanani10"},"content":"        Map.Entry\u003cString, Double\u003e entry \u003d dummy.entrySet().iterator().next();"},{"lineNumber":89,"author":{"gitID":"meerakanani10"},"content":"        first \u003d entry.getKey().split(\"_\")[1];"},{"lineNumber":90,"author":{"gitID":"meerakanani10"},"content":"        optimizedRoute.add(first);"},{"lineNumber":91,"author":{"gitID":"meerakanani10"},"content":"        return optimizedRoute;"},{"lineNumber":92,"author":{"gitID":"meerakanani10"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":94,"author":{"gitID":"meerakanani10"},"content":"    //@@author meerakanani10"},{"lineNumber":95,"author":{"gitID":"meerakanani10"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"meerakanani10"},"content":"     *"},{"lineNumber":97,"author":{"gitID":"meerakanani10"},"content":"     * @param address"},{"lineNumber":98,"author":{"gitID":"meerakanani10"},"content":"     * @param filteredAddresses"},{"lineNumber":99,"author":{"gitID":"meerakanani10"},"content":"     * @return"},{"lineNumber":100,"author":{"gitID":"meerakanani10"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"meerakanani10"},"content":"    public List\u003cString\u003e removeAddress(String address, List\u003cString\u003e filteredAddresses) {"},{"lineNumber":102,"author":{"gitID":"meerakanani10"},"content":"        for (int i \u003d 0; i \u003c filteredAddresses.size(); i++) {"},{"lineNumber":103,"author":{"gitID":"meerakanani10"},"content":"            if (filteredAddresses.get(i).equals(address)) {"},{"lineNumber":104,"author":{"gitID":"meerakanani10"},"content":"                filteredAddresses.remove(i);"},{"lineNumber":105,"author":{"gitID":"meerakanani10"},"content":"                i--;"},{"lineNumber":106,"author":{"gitID":"meerakanani10"},"content":"            }"},{"lineNumber":107,"author":{"gitID":"meerakanani10"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"meerakanani10"},"content":"        return filteredAddresses;"},{"lineNumber":109,"author":{"gitID":"meerakanani10"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":111,"author":{"gitID":"meerakanani10"},"content":"    //@@author meerakanani10"},{"lineNumber":112,"author":{"gitID":"meerakanani10"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"meerakanani10"},"content":"     * Recursive function to get the distance between addresses"},{"lineNumber":114,"author":{"gitID":"meerakanani10"},"content":"     * @param filteredAddresses - list of addresses"},{"lineNumber":115,"author":{"gitID":"meerakanani10"},"content":"     * @param origin - starting point"},{"lineNumber":116,"author":{"gitID":"meerakanani10"},"content":"     * @param optimizedRoute - optimized route that recursively get modified until completely optimized"},{"lineNumber":117,"author":{"gitID":"meerakanani10"},"content":"     * @return"},{"lineNumber":118,"author":{"gitID":"meerakanani10"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"meerakanani10"},"content":"    public List\u003cString\u003e getDistances(List\u003cString\u003e filteredAddresses, String origin, List\u003cString\u003e optimizedRoute) {"},{"lineNumber":120,"author":{"gitID":"meerakanani10"},"content":"        Map\u003cString, Double\u003e paths \u003d new LinkedHashMap\u003c\u003e();"},{"lineNumber":121,"author":{"gitID":"meerakanani10"},"content":"        Map\u003cString, Double\u003e dummy \u003d new HashMap\u003c\u003e();"},{"lineNumber":122,"author":{"gitID":"meerakanani10"},"content":"        SortAddresses sort \u003d new SortAddresses();"},{"lineNumber":123,"author":{"gitID":"meerakanani10"},"content":"        String next;"},{"lineNumber":124,"author":{"gitID":"meerakanani10"},"content":"        GetDistance distance \u003d new GetDistance();"},{"lineNumber":125,"author":{"gitID":"meerakanani10"},"content":"        for (int i \u003d 0; i \u003c filteredAddresses.size(); i++) {"},{"lineNumber":126,"author":{"gitID":"meerakanani10"},"content":"            String destination \u003d filteredAddresses.get(i);"},{"lineNumber":127,"author":{"gitID":"meerakanani10"},"content":"            paths.put(labelRoutes(origin, destination), distance.getDistance(origin, destination));"},{"lineNumber":128,"author":{"gitID":"meerakanani10"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"meerakanani10"},"content":"        dummy \u003d sort.cleanSorted(sort.sortByComparator(paths));"},{"lineNumber":130,"author":{"gitID":"meerakanani10"},"content":"        if (dummy.entrySet().iterator().hasNext()) {"},{"lineNumber":131,"author":{"gitID":"meerakanani10"},"content":"            Map.Entry\u003cString, Double\u003e entry \u003d dummy.entrySet().iterator().next();"},{"lineNumber":132,"author":{"gitID":"meerakanani10"},"content":"            next \u003d entry.getKey().split(\"_\")[1];"},{"lineNumber":133,"author":{"gitID":"meerakanani10"},"content":"            optimizedRoute.add(next);"},{"lineNumber":134,"author":{"gitID":"meerakanani10"},"content":"            filteredAddresses \u003d removeAddress(next, filteredAddresses);"},{"lineNumber":135,"author":{"gitID":"meerakanani10"},"content":"            if (filteredAddresses.size() !\u003d 0) {"},{"lineNumber":136,"author":{"gitID":"meerakanani10"},"content":"                optimizedRoute \u003d getDistances(filteredAddresses, next, optimizedRoute);"},{"lineNumber":137,"author":{"gitID":"meerakanani10"},"content":"            }"},{"lineNumber":138,"author":{"gitID":"meerakanani10"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"meerakanani10"},"content":"        return optimizedRoute;"},{"lineNumber":140,"author":{"gitID":"meerakanani10"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"meerakanani10"},"content":"    //@@author meerakanani10"},{"lineNumber":142,"author":{"gitID":"meerakanani10"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"meerakanani10"},"content":"     * @param origin - starting point"},{"lineNumber":144,"author":{"gitID":"meerakanani10"},"content":"     * @param destination - ending point"},{"lineNumber":145,"author":{"gitID":"meerakanani10"},"content":"     * @return"},{"lineNumber":146,"author":{"gitID":"meerakanani10"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"meerakanani10"},"content":"    public String labelRoutes(String origin, String destination) {"},{"lineNumber":148,"author":{"gitID":"meerakanani10"},"content":"        String routeKey;"},{"lineNumber":149,"author":{"gitID":"meerakanani10"},"content":"        routeKey \u003d origin + \"_\" + destination;"},{"lineNumber":150,"author":{"gitID":"meerakanani10"},"content":"        return routeKey;"},{"lineNumber":151,"author":{"gitID":"meerakanani10"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":153,"author":{"gitID":"meerakanani10"},"content":"    //@@author meerakanani10"},{"lineNumber":154,"author":{"gitID":"meerakanani10"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"meerakanani10"},"content":"     * @param combinedAddresses - the key from the hashmaps"},{"lineNumber":156,"author":{"gitID":"meerakanani10"},"content":"     * @return the addresses split, in an array."},{"lineNumber":157,"author":{"gitID":"meerakanani10"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"meerakanani10"},"content":"    public String[] splitLabel(String combinedAddresses) {"},{"lineNumber":159,"author":{"gitID":"meerakanani10"},"content":"        String[] addresses \u003d combinedAddresses.split(\"_\");"},{"lineNumber":160,"author":{"gitID":"meerakanani10"},"content":"        return addresses;"},{"lineNumber":161,"author":{"gitID":"meerakanani10"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":163,"author":{"gitID":"meerakanani10"},"content":"    //@@author meerakanani10"},{"lineNumber":164,"author":{"gitID":"meerakanani10"},"content":"    /**"},{"lineNumber":165,"author":{"gitID":"meerakanani10"},"content":"     * @param address address to be edited"},{"lineNumber":166,"author":{"gitID":"meerakanani10"},"content":"     * @return"},{"lineNumber":167,"author":{"gitID":"meerakanani10"},"content":"     */"},{"lineNumber":168,"author":{"gitID":"meerakanani10"},"content":"    public String removeUnit(Address address) {"},{"lineNumber":169,"author":{"gitID":"meerakanani10"},"content":"        String addressValue \u003d address.value.trim();"},{"lineNumber":170,"author":{"gitID":"meerakanani10"},"content":"        int stringCutIndex;"},{"lineNumber":171,"author":{"gitID":"meerakanani10"},"content":"        String addressWithoutUnit;"},{"lineNumber":172,"author":{"gitID":"meerakanani10"},"content":"        if (addressValue.indexOf(\u0027#\u0027) \u003e 2) {"},{"lineNumber":173,"author":{"gitID":"meerakanani10"},"content":"            stringCutIndex \u003d addressValue.indexOf(\u0027#\u0027) - 2;"},{"lineNumber":174,"author":{"gitID":"meerakanani10"},"content":"            addressWithoutUnit \u003d addressValue.substring(0, stringCutIndex);"},{"lineNumber":175,"author":{"gitID":"meerakanani10"},"content":"        } else {"},{"lineNumber":176,"author":{"gitID":"meerakanani10"},"content":"            addressWithoutUnit \u003d addressValue;"},{"lineNumber":177,"author":{"gitID":"meerakanani10"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"meerakanani10"},"content":"        return addressWithoutUnit;"},{"lineNumber":179,"author":{"gitID":"meerakanani10"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"meerakanani10"},"content":"}"},{"lineNumber":181,"author":{"gitID":"meerakanani10"},"content":""}],"authorContributionMap":{"ncaminh":15,"meerakanani10":163,"-":3}},{"path":"src/main/java/seedu/address/logic/commands/EmailCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"mattbuot"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":3,"author":{"gitID":"mattbuot"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":5,"author":{"gitID":"mattbuot"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"mattbuot"},"content":"import seedu.address.commons.core.Mailer;"},{"lineNumber":7,"author":{"gitID":"mattbuot"},"content":"import seedu.address.logic.RouteOptimization;"},{"lineNumber":8,"author":{"gitID":"mattbuot"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"mattbuot"},"content":"import seedu.address.model.person.DelivDate;"},{"lineNumber":10,"author":{"gitID":"mattbuot"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":12,"author":{"gitID":"mattbuot"},"content":"//@@author mattbuot"},{"lineNumber":13,"author":{"gitID":"mattbuot"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"mattbuot"},"content":" * Send an email to the persons listed"},{"lineNumber":15,"author":{"gitID":"mattbuot"},"content":" */"},{"lineNumber":16,"author":{"gitID":"mattbuot"},"content":"public class EmailCommand extends Command {"},{"lineNumber":17,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":18,"author":{"gitID":"mattbuot"},"content":"    public static final String COMMAND_WORD \u003d \"email\";"},{"lineNumber":19,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":20,"author":{"gitID":"mattbuot"},"content":"    public static final String MESSAGE_USAGE \u003d"},{"lineNumber":21,"author":{"gitID":"mattbuot"},"content":"            COMMAND_WORD + \": Send an email to list of persons and the optimized itinerary to the driver.\";"},{"lineNumber":22,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":23,"author":{"gitID":"mattbuot"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Emails sent successfully.\";"},{"lineNumber":24,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":25,"author":{"gitID":"mattbuot"},"content":"    public static final String MESSAGE_ERROR \u003d \"An error occurred, emails not sent.\";"},{"lineNumber":26,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":27,"author":{"gitID":"mattbuot"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"mattbuot"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":29,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":30,"author":{"gitID":"mattbuot"},"content":"        //we check that the customers listed have their delivery on the same date"},{"lineNumber":31,"author":{"gitID":"mattbuot"},"content":"        String delivDate \u003d getDate().toString();"},{"lineNumber":32,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":33,"author":{"gitID":"mattbuot"},"content":"        RouteOptimization route \u003d new RouteOptimization();"},{"lineNumber":34,"author":{"gitID":"mattbuot"},"content":"        List\u003cString\u003e optimizedRoute;"},{"lineNumber":35,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":36,"author":{"gitID":"mattbuot"},"content":"        optimizedRoute \u003d route.getAddresses(model);"},{"lineNumber":37,"author":{"gitID":"mattbuot"},"content":"        String duration \u003d FilterCommand.getStringDuration();"},{"lineNumber":38,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":39,"author":{"gitID":"mattbuot"},"content":"        if (optimizedRoute.size() \u003d\u003d 0) {"},{"lineNumber":40,"author":{"gitID":"mattbuot"},"content":"            throw new CommandException(\"No address has be found, email not sent!\");"},{"lineNumber":41,"author":{"gitID":"mattbuot"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":43,"author":{"gitID":"mattbuot"},"content":"        boolean result \u003d"},{"lineNumber":44,"author":{"gitID":"mattbuot"},"content":"                Mailer.emailDriver(optimizedRoute, duration, delivDate)"},{"lineNumber":45,"author":{"gitID":"mattbuot"},"content":"                        \u0026\u0026  Mailer.emailCustomers(model.getFilteredPersonList());"},{"lineNumber":46,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":47,"author":{"gitID":"mattbuot"},"content":"        String message \u003d result ? MESSAGE_SUCCESS : MESSAGE_ERROR;"},{"lineNumber":48,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":49,"author":{"gitID":"mattbuot"},"content":"        return new CommandResult(message);"},{"lineNumber":50,"author":{"gitID":"mattbuot"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":52,"author":{"gitID":"mattbuot"},"content":"    private DelivDate getDate() throws CommandException {"},{"lineNumber":53,"author":{"gitID":"mattbuot"},"content":"        ObservableList\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();"},{"lineNumber":54,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":55,"author":{"gitID":"mattbuot"},"content":"        if (filteredPersonList.size() \u003e 0) {"},{"lineNumber":56,"author":{"gitID":"mattbuot"},"content":"            DelivDate date \u003d filteredPersonList.get(0).getDate();"},{"lineNumber":57,"author":{"gitID":"mattbuot"},"content":"            for (Person p : filteredPersonList) {"},{"lineNumber":58,"author":{"gitID":"mattbuot"},"content":"                if (!date.equals(p.getDate())) {"},{"lineNumber":59,"author":{"gitID":"mattbuot"},"content":"                    throw new CommandException(\"The list is not filtered!\");"},{"lineNumber":60,"author":{"gitID":"mattbuot"},"content":"                }"},{"lineNumber":61,"author":{"gitID":"mattbuot"},"content":"            }"},{"lineNumber":62,"author":{"gitID":"mattbuot"},"content":"            return date;"},{"lineNumber":63,"author":{"gitID":"mattbuot"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"mattbuot"},"content":"        throw new CommandException(\"Empty filtered list!\");"},{"lineNumber":65,"author":{"gitID":"mattbuot"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"mattbuot"},"content":"}"}],"authorContributionMap":{"mattbuot":66}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"meerakanani10"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DELIV_DATE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":37,"author":{"gitID":"meerakanani10"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":38,"author":{"gitID":"meerakanani10"},"content":"                        PREFIX_DELIV_DATE, PREFIX_TAG);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        Index index;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editPersonDescriptor::setPhone);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editPersonDescriptor::setEmail);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editPersonDescriptor::setAddress);"},{"lineNumber":54,"author":{"gitID":"meerakanani10"},"content":"            ParserUtil.parseDate(argMultimap.getValue(PREFIX_DELIV_DATE)).ifPresent(editPersonDescriptor::setDate);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":58,"author":{"gitID":"meerakanani10"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":59,"author":{"gitID":"meerakanani10"},"content":"            throw new ParseException(e.getMessage(), e);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"meerakanani10":6,"-":78}},{"path":"src/main/java/seedu/address/logic/parser/DistanceCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DistanceCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"ncaminh"},"content":"//@@author ncaminh"},{"lineNumber":11,"author":{"gitID":"ncaminh"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"ncaminh"},"content":" * Parses input arguments and creates a new SelectCommand object"},{"lineNumber":13,"author":{"gitID":"ncaminh"},"content":" */"},{"lineNumber":14,"author":{"gitID":"ncaminh"},"content":"public class DistanceCommandParser implements Parser\u003cDistanceCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":16,"author":{"gitID":"ncaminh"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"ncaminh"},"content":"     * Parses the given {@code String} of arguments in the context of the DistanceCommand"},{"lineNumber":18,"author":{"gitID":"ncaminh"},"content":"     * and returns an DistanceCommand object for execution."},{"lineNumber":19,"author":{"gitID":"ncaminh"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"ncaminh"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"ncaminh"},"content":"    public DistanceCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"ncaminh"},"content":"        String[] selectedIndexes \u003d args.split(\" \");"},{"lineNumber":23,"author":{"gitID":"ncaminh"},"content":"        try {"},{"lineNumber":24,"author":{"gitID":"ncaminh"},"content":"            if (selectedIndexes.length \u003d\u003d 3) {"},{"lineNumber":25,"author":{"gitID":"ncaminh"},"content":"                Index firstIndex \u003d ParserUtil.parseIndex(selectedIndexes[1].trim());"},{"lineNumber":26,"author":{"gitID":"ncaminh"},"content":"                Index secondIndex \u003d ParserUtil.parseIndex(selectedIndexes[2].trim());"},{"lineNumber":27,"author":{"gitID":"ncaminh"},"content":"                return new DistanceCommand(firstIndex, secondIndex);"},{"lineNumber":28,"author":{"gitID":"ncaminh"},"content":"            } else {"},{"lineNumber":29,"author":{"gitID":"ncaminh"},"content":"                Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":30,"author":{"gitID":"ncaminh"},"content":"                return new DistanceCommand(index);"},{"lineNumber":31,"author":{"gitID":"ncaminh"},"content":"            }"},{"lineNumber":32,"author":{"gitID":"ncaminh"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":33,"author":{"gitID":"ncaminh"},"content":"            throw new ParseException("},{"lineNumber":34,"author":{"gitID":"ncaminh"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DistanceCommand.MESSAGE_USAGE));"},{"lineNumber":35,"author":{"gitID":"ncaminh"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"ncaminh"},"content":"}"}],"authorContributionMap":{"ncaminh":28,"-":9}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"meerakanani10"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DELIV_DATE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Adds a person to the address book."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":28,"author":{"gitID":"meerakanani10"},"content":"            + PREFIX_DELIV_DATE + \"DATE \""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + \"For the address, it cannot be at the Head Quarter\\n\""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":32,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":34,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":35,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":36,"author":{"gitID":"meerakanani10"},"content":"            + PREFIX_DELIV_DATE + \"2018-03-24 \""},{"lineNumber":37,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":38,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private final Person toAdd;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        requireNonNull(person);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"meerakanani10":4,"-":68}},{"path":"src/main/java/seedu/address/logic/parser/FilterCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"meerakanani10"},"content":"import seedu.address.logic.commands.FilterCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"meerakanani10"},"content":"import seedu.address.model.person.DatePredicate;"},{"lineNumber":10,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":11,"author":{"gitID":"meerakanani10"},"content":"//@@author meerakanani10"},{"lineNumber":12,"author":{"gitID":"meerakanani10"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"meerakanani10"},"content":" * Parses input arguments and creates a new FindCommand object"},{"lineNumber":14,"author":{"gitID":"meerakanani10"},"content":" */"},{"lineNumber":15,"author":{"gitID":"meerakanani10"},"content":"public class FilterCommandParser implements Parser\u003cFilterCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":17,"author":{"gitID":"meerakanani10"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"meerakanani10"},"content":"     * Parses the given {@code String} of arguments in the context of the FilterCommand"},{"lineNumber":19,"author":{"gitID":"meerakanani10"},"content":"     * and returns an FilterCommand object for execution."},{"lineNumber":20,"author":{"gitID":"meerakanani10"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"meerakanani10"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"meerakanani10"},"content":"    public FilterCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"meerakanani10"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":24,"author":{"gitID":"meerakanani10"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":25,"author":{"gitID":"meerakanani10"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"meerakanani10"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"meerakanani10"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":29,"author":{"gitID":"meerakanani10"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":30,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":31,"author":{"gitID":"meerakanani10"},"content":"        return new FilterCommand(new DatePredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":32,"author":{"gitID":"meerakanani10"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":34,"author":{"gitID":"meerakanani10"},"content":"}"}],"authorContributionMap":{"meerakanani10":27,"-":7}},{"path":"src/main/java/seedu/address/logic/commands/FilterCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"meerakanani10"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"meerakanani10"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowDefaultPageEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowMultiLocationFromHeadQuarterEvent;"},{"lineNumber":9,"author":{"gitID":"meerakanani10"},"content":"import seedu.address.logic.GetDistance;"},{"lineNumber":10,"author":{"gitID":"meerakanani10"},"content":"import seedu.address.logic.RouteOptimization;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"meerakanani10"},"content":"import seedu.address.model.person.DatePredicate;"},{"lineNumber":13,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":14,"author":{"gitID":"meerakanani10"},"content":"//@@author meerakanani10"},{"lineNumber":15,"author":{"gitID":"meerakanani10"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"meerakanani10"},"content":" * Filters and lists all persons in address book whose date contains any of the argument dates."},{"lineNumber":17,"author":{"gitID":"meerakanani10"},"content":" * Keyword matching is case sensitive."},{"lineNumber":18,"author":{"gitID":"meerakanani10"},"content":" */"},{"lineNumber":19,"author":{"gitID":"meerakanani10"},"content":"public class FilterCommand extends Command {"},{"lineNumber":20,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":21,"author":{"gitID":"meerakanani10"},"content":"    public static final String COMMAND_WORD \u003d \"filter\";"},{"lineNumber":22,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":23,"author":{"gitID":"meerakanani10"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":24,"author":{"gitID":"meerakanani10"},"content":"            + \": Filters the list based on the specifed field and given value.\";"},{"lineNumber":25,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":26,"author":{"gitID":"meerakanani10"},"content":"    private static String stringDuration;"},{"lineNumber":27,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":28,"author":{"gitID":"meerakanani10"},"content":"    private final DatePredicate predicate;"},{"lineNumber":29,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":30,"author":{"gitID":"meerakanani10"},"content":"    public FilterCommand(DatePredicate predicate) {"},{"lineNumber":31,"author":{"gitID":"meerakanani10"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":32,"author":{"gitID":"meerakanani10"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":34,"author":{"gitID":"meerakanani10"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"meerakanani10"},"content":"    public CommandResult execute() throws CommandException, IOException {"},{"lineNumber":36,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":37,"author":{"gitID":"meerakanani10"},"content":"        //@@author meerakanani10"},{"lineNumber":38,"author":{"gitID":"meerakanani10"},"content":"        RouteOptimization route \u003d new RouteOptimization();"},{"lineNumber":39,"author":{"gitID":"meerakanani10"},"content":"        List\u003cString\u003e optimizedRoute;"},{"lineNumber":40,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":41,"author":{"gitID":"meerakanani10"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":42,"author":{"gitID":"meerakanani10"},"content":"        optimizedRoute \u003d route.getAddresses(model);"},{"lineNumber":43,"author":{"gitID":"meerakanani10"},"content":"        stringDuration \u003d getDuration(optimizedRoute);"},{"lineNumber":44,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":45,"author":{"gitID":"ncaminh"},"content":"        //@@author ncaminh"},{"lineNumber":46,"author":{"gitID":"ncaminh"},"content":"        int numberOfPersonsListed \u003d model.getFilteredPersonList().size();"},{"lineNumber":47,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":48,"author":{"gitID":"ncaminh"},"content":"        //no person matches date"},{"lineNumber":49,"author":{"gitID":"ncaminh"},"content":"        if (numberOfPersonsListed \u003d\u003d 0) {"},{"lineNumber":50,"author":{"gitID":"ncaminh"},"content":"            EventsCenter.getInstance().post(new ShowDefaultPageEvent());"},{"lineNumber":51,"author":{"gitID":"ncaminh"},"content":"            return new CommandResult(getMessageForPersonListShownSummary(numberOfPersonsListed));"},{"lineNumber":52,"author":{"gitID":"ncaminh"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":54,"author":{"gitID":"ncaminh"},"content":"        //all addresses cannot be found"},{"lineNumber":55,"author":{"gitID":"ncaminh"},"content":"        if (optimizedRoute.size() \u003d\u003d 0) {"},{"lineNumber":56,"author":{"gitID":"ncaminh"},"content":"            EventsCenter.getInstance().post(new ShowDefaultPageEvent());"},{"lineNumber":57,"author":{"gitID":"ncaminh"},"content":"            String shown \u003d getMessageForPersonListShownSummary(numberOfPersonsListed)"},{"lineNumber":58,"author":{"gitID":"ncaminh"},"content":"                    + \"\\nAll the addresses on \""},{"lineNumber":59,"author":{"gitID":"ncaminh"},"content":"                    + model.getFilteredPersonList().get(0).getDate().toString()"},{"lineNumber":60,"author":{"gitID":"ncaminh"},"content":"                    + \" cannot be found.\";"},{"lineNumber":61,"author":{"gitID":"ncaminh"},"content":"            return new CommandResult(shown);"},{"lineNumber":62,"author":{"gitID":"ncaminh"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":64,"author":{"gitID":"ncaminh"},"content":"        //some addresses are invalid"},{"lineNumber":65,"author":{"gitID":"ncaminh"},"content":"        if (optimizedRoute.size() \u003c numberOfPersonsListed) {"},{"lineNumber":66,"author":{"gitID":"ncaminh"},"content":"            String shown \u003d getMessageForPersonListShownSummary(numberOfPersonsListed)"},{"lineNumber":67,"author":{"gitID":"ncaminh"},"content":"                    + \"\\nAt least one address on \""},{"lineNumber":68,"author":{"gitID":"ncaminh"},"content":"                    + model.getFilteredPersonList().get(0).getDate().toString()"},{"lineNumber":69,"author":{"gitID":"ncaminh"},"content":"                    + \" cannot be found.\";"},{"lineNumber":70,"author":{"gitID":"ncaminh"},"content":"            EventsCenter.getInstance().post(new ShowMultiLocationFromHeadQuarterEvent(optimizedRoute));"},{"lineNumber":71,"author":{"gitID":"ncaminh"},"content":"            return new CommandResult(shown);"},{"lineNumber":72,"author":{"gitID":"ncaminh"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":74,"author":{"gitID":"ncaminh"},"content":"        //all addresses can be found"},{"lineNumber":75,"author":{"gitID":"ncaminh"},"content":"        EventsCenter.getInstance().post(new ShowMultiLocationFromHeadQuarterEvent(optimizedRoute));"},{"lineNumber":76,"author":{"gitID":"ncaminh"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(numberOfPersonsListed));"},{"lineNumber":77,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":79,"author":{"gitID":"meerakanani10"},"content":"    //@@author meerakanani10"},{"lineNumber":80,"author":{"gitID":"meerakanani10"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"meerakanani10"},"content":"    public boolean equals(Object other) {"},{"lineNumber":82,"author":{"gitID":"meerakanani10"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":83,"author":{"gitID":"meerakanani10"},"content":"                || (other instanceof FilterCommand // instanceof handles nulls"},{"lineNumber":84,"author":{"gitID":"meerakanani10"},"content":"                \u0026\u0026 this.predicate.equals(((FilterCommand) other).predicate)); // state check"},{"lineNumber":85,"author":{"gitID":"meerakanani10"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":87,"author":{"gitID":"meerakanani10"},"content":"    //@@author meerakanani10"},{"lineNumber":88,"author":{"gitID":"meerakanani10"},"content":"    public static String getDuration(List\u003cString\u003e route) {"},{"lineNumber":89,"author":{"gitID":"meerakanani10"},"content":"        Double duration;"},{"lineNumber":90,"author":{"gitID":"meerakanani10"},"content":"        GetDistance distance \u003d new GetDistance();"},{"lineNumber":91,"author":{"gitID":"meerakanani10"},"content":"        Double totalDuration \u003d 0.0;"},{"lineNumber":92,"author":{"gitID":"meerakanani10"},"content":"        for (int  i \u003d 0; i \u003c route.size() - 1; i++) {"},{"lineNumber":93,"author":{"gitID":"meerakanani10"},"content":"            duration \u003d distance.getTime(route.get(i), route.get(i + 1));"},{"lineNumber":94,"author":{"gitID":"meerakanani10"},"content":"            totalDuration \u003d totalDuration + duration;"},{"lineNumber":95,"author":{"gitID":"meerakanani10"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"meerakanani10"},"content":"        String stringDuration \u003d totalDuration.toString() + \" mins\";"},{"lineNumber":97,"author":{"gitID":"meerakanani10"},"content":"        return stringDuration;"},{"lineNumber":98,"author":{"gitID":"meerakanani10"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":100,"author":{"gitID":"meerakanani10"},"content":"    public static String getStringDuration() {"},{"lineNumber":101,"author":{"gitID":"meerakanani10"},"content":"        return stringDuration;"},{"lineNumber":102,"author":{"gitID":"meerakanani10"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"meerakanani10"},"content":"}"}],"authorContributionMap":{"ncaminh":34,"meerakanani10":64,"-":5}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.google.maps.errors.ApiException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":29,"author":{"gitID":"mattbuot"},"content":"    private final Autocompleter autocompleter;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        addressBookParser \u003d new AddressBookParser();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":36,"author":{"gitID":"mattbuot"},"content":"        autocompleter \u003d new Autocompleter(model.getAddressBook().getPersonList());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException,"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            InterruptedException, ApiException, IOException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":64,"author":{"gitID":"mattbuot"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"mattbuot"},"content":"    public String autocomplete(String query) {"},{"lineNumber":66,"author":{"gitID":"mattbuot"},"content":"        autocompleter.updateFields(model.getAddressBook().getPersonList());"},{"lineNumber":67,"author":{"gitID":"mattbuot"},"content":"        return autocompleter.autocomplete(query);"},{"lineNumber":68,"author":{"gitID":"mattbuot"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"mattbuot":8,"-":61}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"meerakanani10"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DELIV_DATE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":24,"author":{"gitID":"meerakanani10"},"content":"import seedu.address.model.person.DelivDate;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":35,"author":{"gitID":"-"},"content":" */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":41,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":42,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":43,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":48,"author":{"gitID":"meerakanani10"},"content":"            + \"[\" + PREFIX_DELIV_DATE + \"DATE] \""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":51,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private Person personToEdit;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private Person editedPerson;"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":112,"author":{"gitID":"meerakanani10"},"content":"        DelivDate updatedDate \u003d editPersonDescriptor.getDate().orElse(personToEdit.getDate());"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"meerakanani10"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedDate, updatedTags);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":133,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":134,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":146,"author":{"gitID":"meerakanani10"},"content":"        private DelivDate date;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":152,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":153,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":154,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":160,"author":{"gitID":"meerakanani10"},"content":"            setDate(toCopy.date);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":165,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":166,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":168,"author":{"gitID":"meerakanani10"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address, this.date, this.tags);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"            this.address \u003d address;"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"meerakanani10"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":200,"author":{"gitID":"meerakanani10"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":201,"author":{"gitID":"meerakanani10"},"content":"        }"},{"lineNumber":202,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":203,"author":{"gitID":"meerakanani10"},"content":"        public void setDate(DelivDate date) {"},{"lineNumber":204,"author":{"gitID":"meerakanani10"},"content":"            this.date \u003d date;"},{"lineNumber":205,"author":{"gitID":"meerakanani10"},"content":"        }"},{"lineNumber":206,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":207,"author":{"gitID":"meerakanani10"},"content":"        public Optional\u003cDelivDate\u003e getDate() {"},{"lineNumber":208,"author":{"gitID":"meerakanani10"},"content":"            return Optional.ofNullable(date);"},{"lineNumber":209,"author":{"gitID":"meerakanani10"},"content":"        }"},{"lineNumber":210,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":212,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":213,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":214,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":220,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":221,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":222,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":223,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":231,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":233,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":236,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":238,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":241,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":244,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":245,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":246,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":247,"author":{"gitID":"meerakanani10"},"content":"                    \u0026\u0026 getDate().equals(e.getDate())"},{"lineNumber":248,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"meerakanani10":21,"-":230}},{"path":"src/main/java/seedu/address/storage/Storage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":9,"author":{"gitID":"ngshikang"},"content":"import seedu.address.login.UserPassStorage;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * API of the Storage component"},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public interface Storage extends AddressBookStorage, UserPrefsStorage {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    String getAddressBookFilePath();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Saves the current version of the Address Book to the hard disk."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     *   Creates the data file if it is missing."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    void handleAddressBookChangedEvent(AddressBookChangedEvent abce);"},{"lineNumber":39,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":40,"author":{"gitID":"ngshikang"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPass methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":41,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":42,"author":{"gitID":"ngshikang"},"content":"    public UserPassStorage getUserPassStorage();"},{"lineNumber":43,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":44,"author":{"gitID":"ngshikang"},"content":"    public void setUserPassStorage(UserPassStorage userPassStorage);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ngshikang":7,"-":38}},{"path":"src/main/java/seedu/address/logic/commands/DistanceCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowRouteFromHeadQuarterToOneEvent;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowRouteFromOneToAnotherEvent;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.GetDistance;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"ncaminh"},"content":"//@@author ncaminh"},{"lineNumber":16,"author":{"gitID":"ncaminh"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"ncaminh"},"content":" * Finds the distance from the headquarter to a person address"},{"lineNumber":18,"author":{"gitID":"ncaminh"},"content":" * using his or her last displayed index from the address book."},{"lineNumber":19,"author":{"gitID":"ncaminh"},"content":" */"},{"lineNumber":20,"author":{"gitID":"ncaminh"},"content":"public class DistanceCommand extends Command {"},{"lineNumber":21,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":22,"author":{"gitID":"ncaminh"},"content":"    public static final String COMMAND_WORD \u003d \"distance\";"},{"lineNumber":23,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":24,"author":{"gitID":"ncaminh"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":25,"author":{"gitID":"ncaminh"},"content":"            + \": Finds the distance from the headquarter to a person address \""},{"lineNumber":26,"author":{"gitID":"ncaminh"},"content":"            + \"or the distance from a person address to another person address \""},{"lineNumber":27,"author":{"gitID":"ncaminh"},"content":"            + \"by the index number(s) used in the last person listing.\\n\""},{"lineNumber":28,"author":{"gitID":"ncaminh"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":29,"author":{"gitID":"ncaminh"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\\n\""},{"lineNumber":30,"author":{"gitID":"ncaminh"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 2\";"},{"lineNumber":31,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":32,"author":{"gitID":"ncaminh"},"content":"    public static final String MESSAGE_DISTANCE_FROM_HQ_FAILURE \u003d \"Unable to find %1$s\u0027s address\";"},{"lineNumber":33,"author":{"gitID":"ncaminh"},"content":"    public static final String MESSAGE_DISTANCE_FROM_HQ_SUCCESS \u003d \"Distance from Head quarter to %1$s: %2$s km\";"},{"lineNumber":34,"author":{"gitID":"ncaminh"},"content":"    public static final String MESSAGE_DISTANCE_FROM_PERSON_FAILURE \u003d \"Unable to find at least one person\u0027s address\";"},{"lineNumber":35,"author":{"gitID":"ncaminh"},"content":"    public static final String MESSAGE_DISTANCE_FROM_PERSON_SUCCESS \u003d \"Distance from %1$s to %2$s: %3$s km\";"},{"lineNumber":36,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":37,"author":{"gitID":"ncaminh"},"content":"    private Index targetIndexOrigin \u003d null;"},{"lineNumber":38,"author":{"gitID":"ncaminh"},"content":"    private Index targetIndexDestination;"},{"lineNumber":39,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":40,"author":{"gitID":"ncaminh"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"ncaminh"},"content":"     * constructor for DistanceCommand calculating distance from HQ to a person"},{"lineNumber":42,"author":{"gitID":"ncaminh"},"content":"     * @param targetIndex"},{"lineNumber":43,"author":{"gitID":"ncaminh"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"ncaminh"},"content":"    public DistanceCommand(Index targetIndex) {"},{"lineNumber":45,"author":{"gitID":"ncaminh"},"content":"        this.targetIndexDestination \u003d targetIndex;"},{"lineNumber":46,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":48,"author":{"gitID":"ncaminh"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"ncaminh"},"content":"     * constructor for DistanceCommand calculating distance from a person to another person"},{"lineNumber":50,"author":{"gitID":"ncaminh"},"content":"     * @param targetIndexOrigin"},{"lineNumber":51,"author":{"gitID":"ncaminh"},"content":"     * @param targetIndexDestination"},{"lineNumber":52,"author":{"gitID":"ncaminh"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"ncaminh"},"content":"    public DistanceCommand(Index targetIndexOrigin, Index targetIndexDestination) {"},{"lineNumber":54,"author":{"gitID":"ncaminh"},"content":"        this.targetIndexOrigin \u003d targetIndexOrigin;"},{"lineNumber":55,"author":{"gitID":"ncaminh"},"content":"        this.targetIndexDestination \u003d targetIndexDestination;"},{"lineNumber":56,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":58,"author":{"gitID":"ncaminh"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"ncaminh"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":60,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":61,"author":{"gitID":"ncaminh"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":62,"author":{"gitID":"ncaminh"},"content":"        String origin;"},{"lineNumber":63,"author":{"gitID":"ncaminh"},"content":"        String destination;"},{"lineNumber":64,"author":{"gitID":"ncaminh"},"content":"        String personNameOrigin \u003d \"\";"},{"lineNumber":65,"author":{"gitID":"ncaminh"},"content":"        String personNameDestination \u003d \"\";"},{"lineNumber":66,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":67,"author":{"gitID":"ncaminh"},"content":"        //case 1: get distance from HQ to a person address"},{"lineNumber":68,"author":{"gitID":"ncaminh"},"content":"        if (targetIndexOrigin \u003d\u003d null) {"},{"lineNumber":69,"author":{"gitID":"ncaminh"},"content":"            if (targetIndexDestination.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":70,"author":{"gitID":"ncaminh"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":71,"author":{"gitID":"ncaminh"},"content":"            }"},{"lineNumber":72,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":73,"author":{"gitID":"ncaminh"},"content":"            int indexZeroBasedDestination \u003d targetIndexDestination.getZeroBased();"},{"lineNumber":74,"author":{"gitID":"ncaminh"},"content":"            Person person \u003d lastShownList.get(indexZeroBasedDestination);"},{"lineNumber":75,"author":{"gitID":"ncaminh"},"content":"            String personName \u003d person.getName().toString();"},{"lineNumber":76,"author":{"gitID":"ncaminh"},"content":"            origin \u003d \"Kent Ridge MRT\";"},{"lineNumber":77,"author":{"gitID":"ncaminh"},"content":"            destination \u003d person.getAddress().toString();"},{"lineNumber":78,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":79,"author":{"gitID":"ncaminh"},"content":"            //Trim address"},{"lineNumber":80,"author":{"gitID":"ncaminh"},"content":"            destination \u003d trimAddress(destination);"},{"lineNumber":81,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":82,"author":{"gitID":"ncaminh"},"content":"            GetDistance route \u003d new GetDistance();"},{"lineNumber":83,"author":{"gitID":"ncaminh"},"content":"            Double distance \u003d route.getDistance(origin, destination);"},{"lineNumber":84,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":85,"author":{"gitID":"ncaminh"},"content":"            EventsCenter.getInstance().post(new ShowRouteFromHeadQuarterToOneEvent(destination));"},{"lineNumber":86,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":87,"author":{"gitID":"ncaminh"},"content":"            if (distance \u003d\u003d -1) {"},{"lineNumber":88,"author":{"gitID":"ncaminh"},"content":"                return new CommandResult(String.format(MESSAGE_DISTANCE_FROM_HQ_FAILURE,"},{"lineNumber":89,"author":{"gitID":"ncaminh"},"content":"                        personName));"},{"lineNumber":90,"author":{"gitID":"ncaminh"},"content":"            }"},{"lineNumber":91,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":92,"author":{"gitID":"ncaminh"},"content":"            return new CommandResult(String.format"},{"lineNumber":93,"author":{"gitID":"ncaminh"},"content":"                    (MESSAGE_DISTANCE_FROM_HQ_SUCCESS, personName, distance));"},{"lineNumber":94,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":95,"author":{"gitID":"ncaminh"},"content":"        } else {"},{"lineNumber":96,"author":{"gitID":"ncaminh"},"content":"            //case 2: get distance from a person address to another person address"},{"lineNumber":97,"author":{"gitID":"ncaminh"},"content":"            if (targetIndexOrigin.getZeroBased() \u003e\u003d lastShownList.size()"},{"lineNumber":98,"author":{"gitID":"ncaminh"},"content":"                    || targetIndexDestination.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":99,"author":{"gitID":"ncaminh"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":100,"author":{"gitID":"ncaminh"},"content":"            }"},{"lineNumber":101,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":102,"author":{"gitID":"ncaminh"},"content":"            int indexZeroBasedOrigin \u003d targetIndexOrigin.getZeroBased();"},{"lineNumber":103,"author":{"gitID":"ncaminh"},"content":"            int indexZeroBasedDestination \u003d targetIndexDestination.getZeroBased();"},{"lineNumber":104,"author":{"gitID":"ncaminh"},"content":"            Person personOrigin \u003d lastShownList.get(indexZeroBasedOrigin);"},{"lineNumber":105,"author":{"gitID":"ncaminh"},"content":"            Person personDestination \u003d lastShownList.get(indexZeroBasedDestination);"},{"lineNumber":106,"author":{"gitID":"ncaminh"},"content":"            origin \u003d personOrigin.getAddress().toString();"},{"lineNumber":107,"author":{"gitID":"ncaminh"},"content":"            destination \u003d personDestination.getAddress().toString();"},{"lineNumber":108,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":109,"author":{"gitID":"ncaminh"},"content":"            //Trim addresses"},{"lineNumber":110,"author":{"gitID":"ncaminh"},"content":"            origin \u003d trimAddress(origin);"},{"lineNumber":111,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":112,"author":{"gitID":"ncaminh"},"content":"            destination \u003d trimAddress(destination);"},{"lineNumber":113,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":114,"author":{"gitID":"ncaminh"},"content":"            personNameOrigin \u003d personOrigin.getName().toString();"},{"lineNumber":115,"author":{"gitID":"ncaminh"},"content":"            personNameDestination \u003d personDestination.getName().toString();"},{"lineNumber":116,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":117,"author":{"gitID":"ncaminh"},"content":"            GetDistance route \u003d new GetDistance();"},{"lineNumber":118,"author":{"gitID":"ncaminh"},"content":"            Double distance \u003d route.getDistance(origin, destination);"},{"lineNumber":119,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":120,"author":{"gitID":"ncaminh"},"content":"            List\u003cString\u003e addressesList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":121,"author":{"gitID":"ncaminh"},"content":"            addressesList.add(origin);"},{"lineNumber":122,"author":{"gitID":"ncaminh"},"content":"            addressesList.add(destination);"},{"lineNumber":123,"author":{"gitID":"ncaminh"},"content":"            EventsCenter.getInstance().post(new ShowRouteFromOneToAnotherEvent(addressesList));"},{"lineNumber":124,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":125,"author":{"gitID":"ncaminh"},"content":"            if (distance \u003d\u003d -1) {"},{"lineNumber":126,"author":{"gitID":"ncaminh"},"content":"                return new CommandResult(String.format(MESSAGE_DISTANCE_FROM_PERSON_FAILURE));"},{"lineNumber":127,"author":{"gitID":"ncaminh"},"content":"            }"},{"lineNumber":128,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":129,"author":{"gitID":"ncaminh"},"content":"            return new CommandResult(String.format("},{"lineNumber":130,"author":{"gitID":"ncaminh"},"content":"                    MESSAGE_DISTANCE_FROM_PERSON_SUCCESS, personNameOrigin, personNameDestination, distance));"},{"lineNumber":131,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":132,"author":{"gitID":"ncaminh"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":135,"author":{"gitID":"ncaminh"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"ncaminh"},"content":"     * Trim address"},{"lineNumber":137,"author":{"gitID":"ncaminh"},"content":"     * @param address"},{"lineNumber":138,"author":{"gitID":"ncaminh"},"content":"     * @return"},{"lineNumber":139,"author":{"gitID":"ncaminh"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"ncaminh"},"content":"    private String trimAddress(String address) {"},{"lineNumber":141,"author":{"gitID":"ncaminh"},"content":"        if (address.indexOf(\u0027#\u0027) \u003e 2) {"},{"lineNumber":142,"author":{"gitID":"ncaminh"},"content":"            int stringCutIndex;"},{"lineNumber":143,"author":{"gitID":"ncaminh"},"content":"            stringCutIndex \u003d address.indexOf(\u0027#\u0027) - 2;"},{"lineNumber":144,"author":{"gitID":"ncaminh"},"content":"            address \u003d address.substring(0, stringCutIndex);"},{"lineNumber":145,"author":{"gitID":"ncaminh"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"ncaminh"},"content":"        return address;"},{"lineNumber":147,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":149,"author":{"gitID":"ncaminh"},"content":"    @Override"},{"lineNumber":150,"author":{"gitID":"ncaminh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":151,"author":{"gitID":"ncaminh"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":152,"author":{"gitID":"ncaminh"},"content":"                || (other instanceof DistanceCommand // instanceof handles nulls"},{"lineNumber":153,"author":{"gitID":"ncaminh"},"content":"                \u0026\u0026 this.targetIndexDestination.equals(((DistanceCommand) other).targetIndexDestination)); // state check"},{"lineNumber":154,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"ncaminh"},"content":"}"}],"authorContributionMap":{"ncaminh":141,"-":14}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitID":"ngshikang"},"content":"import seedu.address.login.UserPassStorage;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Manages storage of AddressBook data in local storage."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class StorageManager extends ComponentManager implements Storage {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private AddressBookStorage addressBookStorage;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":26,"author":{"gitID":"ngshikang"},"content":"    private UserPassStorage userPassStorage;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"ngshikang"},"content":"    //@@author ngshikang"},{"lineNumber":29,"author":{"gitID":"ngshikang"},"content":"    public StorageManager(AddressBookStorage addressBookStorage,"},{"lineNumber":30,"author":{"gitID":"ngshikang"},"content":"                          UserPrefsStorage userPrefsStorage,"},{"lineNumber":31,"author":{"gitID":"ngshikang"},"content":"                          UserPassStorage userPassStorage) {"},{"lineNumber":32,"author":{"gitID":"ngshikang"},"content":"        super();"},{"lineNumber":33,"author":{"gitID":"ngshikang"},"content":"        this.addressBookStorage \u003d addressBookStorage;"},{"lineNumber":34,"author":{"gitID":"ngshikang"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":35,"author":{"gitID":"ngshikang"},"content":"        this.userPassStorage \u003d userPassStorage;"},{"lineNumber":36,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":38,"author":{"gitID":"ngshikang"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPass methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":39,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":40,"author":{"gitID":"ngshikang"},"content":"    public UserPassStorage getUserPassStorage() {"},{"lineNumber":41,"author":{"gitID":"ngshikang"},"content":"        return userPassStorage;"},{"lineNumber":42,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"ngshikang"},"content":"    public void setUserPassStorage(UserPassStorage userPassStorage) {"},{"lineNumber":44,"author":{"gitID":"ngshikang"},"content":"        this.userPassStorage \u003d userPassStorage;"},{"lineNumber":45,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":47,"author":{"gitID":"ngshikang"},"content":"    //@@author"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            saveAddressBook(event.data);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ngshikang":22,"-":85}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":13,"author":{"gitID":"meerakanani10"},"content":"import seedu.address.model.person.DelivDate;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class XmlAdaptedPerson {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private String address;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":36,"author":{"gitID":"meerakanani10"},"content":"    private String date;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson() {}"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Constructs an {@code XmlAdaptedPerson} with the given person details."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"meerakanani10"},"content":"    public XmlAdaptedPerson(String name, String phone, String email, String address, String date,"},{"lineNumber":51,"author":{"gitID":"meerakanani10"},"content":"                            List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":56,"author":{"gitID":"meerakanani10"},"content":"        this.date \u003d date;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(Person source) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":72,"author":{"gitID":"meerakanani10"},"content":"        date \u003d source.getDate().value;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        if (this.email \u003d\u003d null) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(this.email)) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        if (this.address \u003d\u003d null) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(this.address)) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"meerakanani10"},"content":"        if (this.date \u003d\u003d null) {"},{"lineNumber":123,"author":{"gitID":"meerakanani10"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":124,"author":{"gitID":"meerakanani10"},"content":"                    DelivDate.class.getSimpleName()));"},{"lineNumber":125,"author":{"gitID":"meerakanani10"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"meerakanani10"},"content":"        if (!DelivDate.isValidDate(this.date)) {"},{"lineNumber":127,"author":{"gitID":"meerakanani10"},"content":"            throw new IllegalValueException(DelivDate.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":128,"author":{"gitID":"meerakanani10"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"meerakanani10"},"content":"        final DelivDate date \u003d new DelivDate(this.date);"},{"lineNumber":130,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":132,"author":{"gitID":"meerakanani10"},"content":"        return new Person(name, phone, email, address, date, tags);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedPerson)) {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        return Objects.equals(name, otherPerson.name)"},{"lineNumber":147,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"},{"lineNumber":148,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(email, otherPerson.email)"},{"lineNumber":149,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(address, otherPerson.address)"},{"lineNumber":150,"author":{"gitID":"meerakanani10"},"content":"                \u0026\u0026 Objects.equals(date, otherPerson.date)"},{"lineNumber":151,"author":{"gitID":"-"},"content":"                \u0026\u0026 tagged.equals(otherPerson.tagged);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"meerakanani10":17,"-":136}},{"path":"src/main/java/seedu/address/logic/Autocompleter.java","lines":[{"lineNumber":1,"author":{"gitID":"mattbuot"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":3,"author":{"gitID":"mattbuot"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitID":"mattbuot"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"mattbuot"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"mattbuot"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"mattbuot"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":9,"author":{"gitID":"mattbuot"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"mattbuot"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitID":"mattbuot"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":12,"author":{"gitID":"mattbuot"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":13,"author":{"gitID":"mattbuot"},"content":"import seedu.address.logic.commands.EmailCommand;"},{"lineNumber":14,"author":{"gitID":"mattbuot"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":15,"author":{"gitID":"meerakanani10"},"content":"import seedu.address.logic.commands.FilterCommand;"},{"lineNumber":16,"author":{"gitID":"mattbuot"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":17,"author":{"gitID":"mattbuot"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":18,"author":{"gitID":"mattbuot"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":19,"author":{"gitID":"mattbuot"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":20,"author":{"gitID":"mattbuot"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":21,"author":{"gitID":"mattbuot"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":22,"author":{"gitID":"mattbuot"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":23,"author":{"gitID":"mattbuot"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":25,"author":{"gitID":"mattbuot"},"content":"//@@author mattbuot"},{"lineNumber":26,"author":{"gitID":"mattbuot"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"mattbuot"},"content":" * Implements methods to autocomplete commands and fields in a user query"},{"lineNumber":28,"author":{"gitID":"mattbuot"},"content":" */"},{"lineNumber":29,"author":{"gitID":"mattbuot"},"content":"public class Autocompleter {"},{"lineNumber":30,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":31,"author":{"gitID":"mattbuot"},"content":"    private final Set\u003cString\u003e commandsList \u003d new HashSet\u003c\u003e();"},{"lineNumber":32,"author":{"gitID":"mattbuot"},"content":"    private Set\u003cString\u003e names;"},{"lineNumber":33,"author":{"gitID":"mattbuot"},"content":"    private Set\u003cString\u003e phones;"},{"lineNumber":34,"author":{"gitID":"mattbuot"},"content":"    private Set\u003cString\u003e emails;"},{"lineNumber":35,"author":{"gitID":"mattbuot"},"content":"    private Set\u003cString\u003e addresses;"},{"lineNumber":36,"author":{"gitID":"mattbuot"},"content":"    private Set\u003cString\u003e dates;"},{"lineNumber":37,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":38,"author":{"gitID":"mattbuot"},"content":"    public Autocompleter(List\u003cPerson\u003e data) {"},{"lineNumber":39,"author":{"gitID":"mattbuot"},"content":"        updateCommands();"},{"lineNumber":40,"author":{"gitID":"mattbuot"},"content":"        updateFields(data);"},{"lineNumber":41,"author":{"gitID":"mattbuot"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":43,"author":{"gitID":"mattbuot"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"mattbuot"},"content":"     * @param input the user query"},{"lineNumber":45,"author":{"gitID":"mattbuot"},"content":"     * @return the longest possible prefix to append to the last word of the query"},{"lineNumber":46,"author":{"gitID":"mattbuot"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"mattbuot"},"content":"    public String autocomplete(String input) {"},{"lineNumber":48,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":49,"author":{"gitID":"mattbuot"},"content":"        String[] words \u003d input.trim().split(\" \");"},{"lineNumber":50,"author":{"gitID":"mattbuot"},"content":"        //List\u003cString\u003e"},{"lineNumber":51,"author":{"gitID":"mattbuot"},"content":"        Set\u003cString\u003e possibilities \u003d new HashSet\u003c\u003e();"},{"lineNumber":52,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":53,"author":{"gitID":"mattbuot"},"content":"        //trying to complete a command"},{"lineNumber":54,"author":{"gitID":"mattbuot"},"content":"        if (words.length \u003d\u003d 1 \u0026\u0026 words[0].length() \u003e 0) {"},{"lineNumber":55,"author":{"gitID":"mattbuot"},"content":"            possibilities \u003d generatePossibleSuffixes(words[0], commandsList);"},{"lineNumber":56,"author":{"gitID":"mattbuot"},"content":"        } else if (words.length \u003e 1) { //trying to complete a field"},{"lineNumber":57,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":58,"author":{"gitID":"mattbuot"},"content":"            int lastFieldIndex \u003d input.lastIndexOf(\u0027/\u0027);"},{"lineNumber":59,"author":{"gitID":"mattbuot"},"content":"            //testing whether the field is an option starting by \u0027x/\u0027"},{"lineNumber":60,"author":{"gitID":"mattbuot"},"content":"            if (lastFieldIndex \u003e 0 \u0026\u0026 input.substring(lastFieldIndex).length() \u003e 0) {"},{"lineNumber":61,"author":{"gitID":"mattbuot"},"content":"                String field \u003d input.substring(lastFieldIndex + 1);"},{"lineNumber":62,"author":{"gitID":"mattbuot"},"content":"                Set\u003cString\u003e fieldsList;"},{"lineNumber":63,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":64,"author":{"gitID":"mattbuot"},"content":"                switch (input.charAt(lastFieldIndex - 1)) {"},{"lineNumber":65,"author":{"gitID":"mattbuot"},"content":"                case \u0027n\u0027:"},{"lineNumber":66,"author":{"gitID":"mattbuot"},"content":"                    fieldsList \u003d names;"},{"lineNumber":67,"author":{"gitID":"mattbuot"},"content":"                    break;"},{"lineNumber":68,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":69,"author":{"gitID":"mattbuot"},"content":"                case \u0027p\u0027:"},{"lineNumber":70,"author":{"gitID":"mattbuot"},"content":"                    fieldsList \u003d phones;"},{"lineNumber":71,"author":{"gitID":"mattbuot"},"content":"                    break;"},{"lineNumber":72,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":73,"author":{"gitID":"mattbuot"},"content":"                case \u0027e\u0027:"},{"lineNumber":74,"author":{"gitID":"mattbuot"},"content":"                    fieldsList \u003d emails;"},{"lineNumber":75,"author":{"gitID":"mattbuot"},"content":"                    break;"},{"lineNumber":76,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":77,"author":{"gitID":"mattbuot"},"content":"                case \u0027a\u0027:"},{"lineNumber":78,"author":{"gitID":"mattbuot"},"content":"                    fieldsList \u003d addresses;"},{"lineNumber":79,"author":{"gitID":"mattbuot"},"content":"                    break;"},{"lineNumber":80,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":81,"author":{"gitID":"mattbuot"},"content":"                case \u0027d\u0027:"},{"lineNumber":82,"author":{"gitID":"mattbuot"},"content":"                    fieldsList \u003d dates;"},{"lineNumber":83,"author":{"gitID":"mattbuot"},"content":"                    break;"},{"lineNumber":84,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":85,"author":{"gitID":"mattbuot"},"content":"                default:"},{"lineNumber":86,"author":{"gitID":"mattbuot"},"content":"                    fieldsList \u003d new HashSet\u003c\u003e();"},{"lineNumber":87,"author":{"gitID":"mattbuot"},"content":"                    break;"},{"lineNumber":88,"author":{"gitID":"mattbuot"},"content":"                }"},{"lineNumber":89,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":90,"author":{"gitID":"mattbuot"},"content":"                possibilities \u003d generatePossibleSuffixes(field, fieldsList);"},{"lineNumber":91,"author":{"gitID":"mattbuot"},"content":"            } else {"},{"lineNumber":92,"author":{"gitID":"mattbuot"},"content":"                //trying to match the last word to a name of the address book"},{"lineNumber":93,"author":{"gitID":"mattbuot"},"content":"                possibilities \u003d generatePossibleSuffixes(words[words.length - 1], generateNames());"},{"lineNumber":94,"author":{"gitID":"mattbuot"},"content":"            }"},{"lineNumber":95,"author":{"gitID":"mattbuot"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"mattbuot"},"content":"        return getLongestCommonPrefix(possibilities);"},{"lineNumber":97,"author":{"gitID":"mattbuot"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":99,"author":{"gitID":"mattbuot"},"content":"    private String getLongestCommonPrefix(Set\u003cString\u003e possibilities) {"},{"lineNumber":100,"author":{"gitID":"mattbuot"},"content":"        String longestCommonPrefix \u003d \"\";"},{"lineNumber":101,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":102,"author":{"gitID":"mattbuot"},"content":"        if (possibilities.size() \u003e 0) {"},{"lineNumber":103,"author":{"gitID":"mattbuot"},"content":"            String p \u003d (String) possibilities.toArray()[0];"},{"lineNumber":104,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":105,"author":{"gitID":"mattbuot"},"content":"            for (int i \u003d 0; i \u003c p.length(); i++) {"},{"lineNumber":106,"author":{"gitID":"mattbuot"},"content":"                boolean isPrefixOkay \u003d true;"},{"lineNumber":107,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":108,"author":{"gitID":"mattbuot"},"content":"                for (String possibility : possibilities) {"},{"lineNumber":109,"author":{"gitID":"mattbuot"},"content":"                    if (!possibility.startsWith(longestCommonPrefix + p.charAt(i))) {"},{"lineNumber":110,"author":{"gitID":"mattbuot"},"content":"                        isPrefixOkay \u003d false;"},{"lineNumber":111,"author":{"gitID":"mattbuot"},"content":"                    }"},{"lineNumber":112,"author":{"gitID":"mattbuot"},"content":"                }"},{"lineNumber":113,"author":{"gitID":"mattbuot"},"content":"                if (!isPrefixOkay) {"},{"lineNumber":114,"author":{"gitID":"mattbuot"},"content":"                    break;"},{"lineNumber":115,"author":{"gitID":"mattbuot"},"content":"                }"},{"lineNumber":116,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":117,"author":{"gitID":"mattbuot"},"content":"                longestCommonPrefix +\u003d p.charAt(i);"},{"lineNumber":118,"author":{"gitID":"mattbuot"},"content":"            }"},{"lineNumber":119,"author":{"gitID":"mattbuot"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"mattbuot"},"content":"        return longestCommonPrefix;"},{"lineNumber":121,"author":{"gitID":"mattbuot"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":123,"author":{"gitID":"mattbuot"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"mattbuot"},"content":"     *"},{"lineNumber":125,"author":{"gitID":"mattbuot"},"content":"     * @param lastWord the last word of the query we\u0027re trying to complete"},{"lineNumber":126,"author":{"gitID":"mattbuot"},"content":"     * @param possibleWords the set of all possible words according to the query type"},{"lineNumber":127,"author":{"gitID":"mattbuot"},"content":"     * @return the set of all possible suffixes to the last word"},{"lineNumber":128,"author":{"gitID":"mattbuot"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"mattbuot"},"content":"    private Set\u003cString\u003e generatePossibleSuffixes(String lastWord, Set\u003cString\u003e possibleWords) {"},{"lineNumber":130,"author":{"gitID":"mattbuot"},"content":"        Set\u003cString\u003e suffixes \u003d new HashSet\u003c\u003e();"},{"lineNumber":131,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":132,"author":{"gitID":"mattbuot"},"content":"        for (String word : possibleWords) {"},{"lineNumber":133,"author":{"gitID":"mattbuot"},"content":"            if (word.startsWith(lastWord)) {"},{"lineNumber":134,"author":{"gitID":"mattbuot"},"content":"                //we only append the end of the command"},{"lineNumber":135,"author":{"gitID":"mattbuot"},"content":"                suffixes.add(word.substring(lastWord.length()));"},{"lineNumber":136,"author":{"gitID":"mattbuot"},"content":"            }"},{"lineNumber":137,"author":{"gitID":"mattbuot"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"mattbuot"},"content":"        return suffixes;"},{"lineNumber":139,"author":{"gitID":"mattbuot"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":141,"author":{"gitID":"mattbuot"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"mattbuot"},"content":"     * Update the sets of fields"},{"lineNumber":143,"author":{"gitID":"mattbuot"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"mattbuot"},"content":"    public void updateFields(List\u003cPerson\u003e data) {"},{"lineNumber":145,"author":{"gitID":"mattbuot"},"content":"        names \u003d data.stream()"},{"lineNumber":146,"author":{"gitID":"mattbuot"},"content":"                .map(person -\u003e person.getName().toString()).collect(Collectors.toSet());"},{"lineNumber":147,"author":{"gitID":"mattbuot"},"content":"        phones \u003d data.stream()"},{"lineNumber":148,"author":{"gitID":"mattbuot"},"content":"                .map(person -\u003e person.getPhone().toString()).collect(Collectors.toSet());"},{"lineNumber":149,"author":{"gitID":"mattbuot"},"content":"        emails \u003d data.stream()"},{"lineNumber":150,"author":{"gitID":"mattbuot"},"content":"                .map(person -\u003e person.getEmail().toString()).collect(Collectors.toSet());"},{"lineNumber":151,"author":{"gitID":"mattbuot"},"content":"        addresses \u003d data.stream()"},{"lineNumber":152,"author":{"gitID":"mattbuot"},"content":"                .map(person -\u003e person.getAddress().toString()).collect(Collectors.toSet());"},{"lineNumber":153,"author":{"gitID":"mattbuot"},"content":"        dates \u003d data.stream()"},{"lineNumber":154,"author":{"gitID":"mattbuot"},"content":"                .map(person -\u003e person.getDate().toString()).collect(Collectors.toSet());"},{"lineNumber":155,"author":{"gitID":"mattbuot"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":157,"author":{"gitID":"mattbuot"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"mattbuot"},"content":"     * Updates the set of commands"},{"lineNumber":159,"author":{"gitID":"mattbuot"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"mattbuot"},"content":"    private void updateCommands() {"},{"lineNumber":161,"author":{"gitID":"mattbuot"},"content":"        commandsList.addAll(Arrays.asList(AddCommand.COMMAND_WORD,"},{"lineNumber":162,"author":{"gitID":"mattbuot"},"content":"                ClearCommand.COMMAND_WORD,"},{"lineNumber":163,"author":{"gitID":"mattbuot"},"content":"                DeleteCommand.COMMAND_WORD,"},{"lineNumber":164,"author":{"gitID":"mattbuot"},"content":"                EditCommand.COMMAND_WORD,"},{"lineNumber":165,"author":{"gitID":"mattbuot"},"content":"                EmailCommand.COMMAND_WORD,"},{"lineNumber":166,"author":{"gitID":"mattbuot"},"content":"                ExitCommand.COMMAND_WORD,"},{"lineNumber":167,"author":{"gitID":"mattbuot"},"content":"                FindCommand.COMMAND_WORD,"},{"lineNumber":168,"author":{"gitID":"mattbuot"},"content":"                FilterCommand.COMMAND_WORD,"},{"lineNumber":169,"author":{"gitID":"mattbuot"},"content":"                HelpCommand.COMMAND_WORD,"},{"lineNumber":170,"author":{"gitID":"mattbuot"},"content":"                HistoryCommand.COMMAND_WORD,"},{"lineNumber":171,"author":{"gitID":"mattbuot"},"content":"                ListCommand.COMMAND_WORD,"},{"lineNumber":172,"author":{"gitID":"mattbuot"},"content":"                RedoCommand.COMMAND_WORD,"},{"lineNumber":173,"author":{"gitID":"mattbuot"},"content":"                SelectCommand.COMMAND_WORD,"},{"lineNumber":174,"author":{"gitID":"mattbuot"},"content":"                UndoCommand.COMMAND_WORD));"},{"lineNumber":175,"author":{"gitID":"mattbuot"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":177,"author":{"gitID":"mattbuot"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"mattbuot"},"content":"     *"},{"lineNumber":179,"author":{"gitID":"mattbuot"},"content":"     * @return the set of all the different words included in the set of names"},{"lineNumber":180,"author":{"gitID":"mattbuot"},"content":"     */"},{"lineNumber":181,"author":{"gitID":"mattbuot"},"content":"    private Set\u003cString\u003e generateNames() {"},{"lineNumber":182,"author":{"gitID":"mattbuot"},"content":"        Set\u003cString\u003e names \u003d new HashSet\u003c\u003e();"},{"lineNumber":183,"author":{"gitID":"mattbuot"},"content":""},{"lineNumber":184,"author":{"gitID":"mattbuot"},"content":"        for (String fullName : this.names) {"},{"lineNumber":185,"author":{"gitID":"mattbuot"},"content":"            String[] words \u003d fullName.split(\" \");"},{"lineNumber":186,"author":{"gitID":"mattbuot"},"content":"            names.addAll(Arrays.asList(words));"},{"lineNumber":187,"author":{"gitID":"mattbuot"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"mattbuot"},"content":"        return names;"},{"lineNumber":189,"author":{"gitID":"mattbuot"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"mattbuot"},"content":"}"}],"authorContributionMap":{"mattbuot":189,"meerakanani10":1}},{"path":"src/main/java/seedu/address/MainApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.PrintWriter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.application.Application;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":20,"author":{"gitID":"ngshikang"},"content":"import seedu.address.commons.events.ui.ExitLoginRequestEvent;"},{"lineNumber":21,"author":{"gitID":"ngshikang"},"content":"import seedu.address.commons.events.ui.LoginAccessGrantedEvent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":27,"author":{"gitID":"ngshikang"},"content":"import seedu.address.login.Login;"},{"lineNumber":28,"author":{"gitID":"ngshikang"},"content":"import seedu.address.login.LoginManager;"},{"lineNumber":29,"author":{"gitID":"ngshikang"},"content":"import seedu.address.login.UserPassStorage;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":36,"author":{"gitID":"ngshikang"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":37,"author":{"gitID":"ngshikang"},"content":"import seedu.address.storage.JsonUserPassStorage;"},{"lineNumber":38,"author":{"gitID":"ngshikang"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":39,"author":{"gitID":"ngshikang"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":40,"author":{"gitID":"ngshikang"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":41,"author":{"gitID":"ngshikang"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":42,"author":{"gitID":"ngshikang"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":48,"author":{"gitID":"-"},"content":" * The main entry point to the application."},{"lineNumber":49,"author":{"gitID":"-"},"content":" */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"ngshikang"},"content":"    public static final Version VERSION \u003d new Version(1, 5, 2, true);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    protected Ui ui;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    protected Logic logic;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    protected Storage storage;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    protected Config config;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    protected UserPrefs userPrefs;"},{"lineNumber":62,"author":{"gitID":"ngshikang"},"content":"    protected Login login;"},{"lineNumber":63,"author":{"gitID":"ngshikang"},"content":"    protected UserPassStorage userPassStorage;"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        super.init();"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        config \u003d initConfig(getApplicationParameter(\"config\"));"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":75,"author":{"gitID":"ngshikang"},"content":"        UserPassStorage userPassStorage \u003d new JsonUserPassStorage(config.getUserPassFilePath());"},{"lineNumber":76,"author":{"gitID":"ngshikang"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, userPassStorage);"},{"lineNumber":77,"author":{"gitID":"ngshikang"},"content":"        StorageManager storageManager \u003d (StorageManager) storage;"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        initLogging(config);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"ngshikang"},"content":"        login \u003d new LoginManager(storageManager);"},{"lineNumber":86,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":87,"author":{"gitID":"ngshikang"},"content":"        ui \u003d new UiManager(logic, config, userPrefs, login);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        initEventsCenter();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"ngshikang"},"content":"    //@@author ngshikang"},{"lineNumber":93,"author":{"gitID":"ngshikang"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"ngshikang"},"content":"     * Reinitialises components to match previous state of specific user profile"},{"lineNumber":95,"author":{"gitID":"ngshikang"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"ngshikang"},"content":"    private void reInit(Login login) {"},{"lineNumber":97,"author":{"gitID":"ngshikang"},"content":"        String profile \u003d login.getUsername();"},{"lineNumber":98,"author":{"gitID":"ngshikang"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(profile + config.getUserPrefsFilePath());"},{"lineNumber":99,"author":{"gitID":"ngshikang"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":100,"author":{"gitID":"ngshikang"},"content":"        userPrefs.setAddressBookFileName(profile);"},{"lineNumber":101,"author":{"gitID":"ngshikang"},"content":"        AddressBookStorage addressBookStorage \u003d"},{"lineNumber":102,"author":{"gitID":"ngshikang"},"content":"                new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":103,"author":{"gitID":"ngshikang"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, userPassStorage);"},{"lineNumber":104,"author":{"gitID":"ngshikang"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":105,"author":{"gitID":"ngshikang"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":106,"author":{"gitID":"ngshikang"},"content":"        ui \u003d new UiManager(logic, config, userPrefs, login);"},{"lineNumber":107,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":109,"author":{"gitID":"ngshikang"},"content":"    //@@author"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    private String getApplicationParameter(String parameterName) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return applicationParameters.get(parameterName);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook initialData;"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            if (!addressBookOptional.isPresent()) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":148,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        Config initializedConfig;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        String configFilePathUsed;"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":167,"author":{"gitID":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        return initializedConfig;"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * reading from the file."},{"lineNumber":184,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":195,"author":{"gitID":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":196,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":199,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"        return initializedPrefs;"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"    private void initEventsCenter() {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"ngshikang"},"content":"    //@@author ngshikang"},{"lineNumber":217,"author":{"gitID":"ngshikang"},"content":"    @Override"},{"lineNumber":218,"author":{"gitID":"ngshikang"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":219,"author":{"gitID":"ngshikang"},"content":"        logger.info(\"Starting Login to Pigeons AddressBook \" + MainApp.VERSION);"},{"lineNumber":220,"author":{"gitID":"ngshikang"},"content":"        ui.startLogin(primaryStage);"},{"lineNumber":221,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":223,"author":{"gitID":"ngshikang"},"content":"    /**"},{"lineNumber":224,"author":{"gitID":"ngshikang"},"content":"     * Starts Application after login success"},{"lineNumber":225,"author":{"gitID":"ngshikang"},"content":"     */"},{"lineNumber":226,"author":{"gitID":"ngshikang"},"content":"    public void startApp(Stage primaryStage) {"},{"lineNumber":227,"author":{"gitID":"ngshikang"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"},{"lineNumber":228,"author":{"gitID":"ngshikang"},"content":"        reInit(login);"},{"lineNumber":229,"author":{"gitID":"ngshikang"},"content":"        readWelcomeMessage();"},{"lineNumber":230,"author":{"gitID":"ngshikang"},"content":"        ui.start(primaryStage);"},{"lineNumber":231,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":233,"author":{"gitID":"ncaminh"},"content":"    //@@author ncaminh"},{"lineNumber":234,"author":{"gitID":"ncaminh"},"content":"    /**"},{"lineNumber":235,"author":{"gitID":"ncaminh"},"content":"     * read welcome \"username\" message"},{"lineNumber":236,"author":{"gitID":"ncaminh"},"content":"     */"},{"lineNumber":237,"author":{"gitID":"ncaminh"},"content":"    private void readWelcomeMessage() {"},{"lineNumber":238,"author":{"gitID":"ncaminh"},"content":"        try {"},{"lineNumber":239,"author":{"gitID":"ncaminh"},"content":"            readWelcomeScriptForMac();"},{"lineNumber":240,"author":{"gitID":"ncaminh"},"content":"        } catch (IOException notMac) {"},{"lineNumber":241,"author":{"gitID":"ncaminh"},"content":"            try {"},{"lineNumber":242,"author":{"gitID":"ncaminh"},"content":"                createFolderIfNeeded();"},{"lineNumber":243,"author":{"gitID":"ncaminh"},"content":"                createScriptIfNeeded();"},{"lineNumber":244,"author":{"gitID":"ncaminh"},"content":"                readWelcomeScript();"},{"lineNumber":245,"author":{"gitID":"ncaminh"},"content":"            } catch (IOException e) {"},{"lineNumber":246,"author":{"gitID":"ncaminh"},"content":"                logger.warning(\"Unable to read Welcome script\");"},{"lineNumber":247,"author":{"gitID":"ncaminh"},"content":"            }"},{"lineNumber":248,"author":{"gitID":"ncaminh"},"content":"        }"},{"lineNumber":249,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":251,"author":{"gitID":"ncaminh"},"content":"    /**"},{"lineNumber":252,"author":{"gitID":"ncaminh"},"content":"     * Read welcome script for Mac"},{"lineNumber":253,"author":{"gitID":"ncaminh"},"content":"     */"},{"lineNumber":254,"author":{"gitID":"ncaminh"},"content":"    private void readWelcomeScriptForMac() throws IOException {"},{"lineNumber":255,"author":{"gitID":"ncaminh"},"content":"        Runtime runtime \u003d Runtime.getRuntime();"},{"lineNumber":256,"author":{"gitID":"ncaminh"},"content":"        String[] argument \u003d { \"osascript\", \"-e\", \"say \\\"Welcome user\\\" using \\\"Alex\\\" \""},{"lineNumber":257,"author":{"gitID":"ncaminh"},"content":"                + \"speaking rate 180 pitch 42 modulation 60\" };"},{"lineNumber":258,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":259,"author":{"gitID":"ncaminh"},"content":"        Process process \u003d runtime.exec(argument);"},{"lineNumber":260,"author":{"gitID":"ncaminh"},"content":"        logger.info(\"Running welcome script on Mac\");"},{"lineNumber":261,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":262,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":263,"author":{"gitID":"ncaminh"},"content":"    /**"},{"lineNumber":264,"author":{"gitID":"ncaminh"},"content":"     * Read welcome script for Window"},{"lineNumber":265,"author":{"gitID":"ncaminh"},"content":"     */"},{"lineNumber":266,"author":{"gitID":"ncaminh"},"content":"    private void readWelcomeScript() throws IOException {"},{"lineNumber":267,"author":{"gitID":"ncaminh"},"content":"        Runtime.getRuntime().exec(\"wscript.exe script\\\\Welcome.vbs\");"},{"lineNumber":268,"author":{"gitID":"ncaminh"},"content":"        logger.info(\"Running welcome script on Window\");"},{"lineNumber":269,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":271,"author":{"gitID":"ncaminh"},"content":"    /**"},{"lineNumber":272,"author":{"gitID":"ncaminh"},"content":"     * create script file if not exist"},{"lineNumber":273,"author":{"gitID":"ncaminh"},"content":"     */"},{"lineNumber":274,"author":{"gitID":"ncaminh"},"content":"    private void createScriptIfNeeded() throws IOException {"},{"lineNumber":275,"author":{"gitID":"ncaminh"},"content":"        File f \u003d new File(\"script\\\\Welcome.vbs\");"},{"lineNumber":276,"author":{"gitID":"ncaminh"},"content":"        if (!f.exists()) {"},{"lineNumber":277,"author":{"gitID":"ncaminh"},"content":"            File file1 \u003d new File(\"script\\\\Welcome.txt\");"},{"lineNumber":278,"author":{"gitID":"ncaminh"},"content":"            logger.info(\"Creating script Welcome.txt\");"},{"lineNumber":279,"author":{"gitID":"ncaminh"},"content":"            file1.createNewFile();"},{"lineNumber":280,"author":{"gitID":"ncaminh"},"content":"            logger.info(\"Writing to Welcome.txt\");"},{"lineNumber":281,"author":{"gitID":"ncaminh"},"content":"            PrintWriter writer \u003d new PrintWriter(\"script\\\\Welcome.txt\", \"UTF-8\");"},{"lineNumber":282,"author":{"gitID":"ncaminh"},"content":"            writer.println(\"CreateObject(\\\"sapi.spvoice\\\").Speak \\\"Welcome back user\\\"\");"},{"lineNumber":283,"author":{"gitID":"ncaminh"},"content":"            writer.close();"},{"lineNumber":284,"author":{"gitID":"ncaminh"},"content":"            logger.info(\"Converting Welcome.txt to Welcome.vbs\");"},{"lineNumber":285,"author":{"gitID":"ncaminh"},"content":"            File file2 \u003d new File(\"script\\\\Welcome.vbs\");"},{"lineNumber":286,"author":{"gitID":"ncaminh"},"content":"            file1.renameTo(file2);"},{"lineNumber":287,"author":{"gitID":"ncaminh"},"content":"        }"},{"lineNumber":288,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":289,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":290,"author":{"gitID":"ncaminh"},"content":"    /**"},{"lineNumber":291,"author":{"gitID":"ncaminh"},"content":"     * create script folder if not exist"},{"lineNumber":292,"author":{"gitID":"ncaminh"},"content":"     */"},{"lineNumber":293,"author":{"gitID":"ncaminh"},"content":"    private void createFolderIfNeeded() {"},{"lineNumber":294,"author":{"gitID":"ncaminh"},"content":"        File dir \u003d new File(\"script\");"},{"lineNumber":295,"author":{"gitID":"ncaminh"},"content":"        if (!dir.exists()) {"},{"lineNumber":296,"author":{"gitID":"ncaminh"},"content":"            logger.info(\"Creating script directory\");"},{"lineNumber":297,"author":{"gitID":"ncaminh"},"content":"            boolean successful \u003d dir.mkdirs();"},{"lineNumber":298,"author":{"gitID":"ncaminh"},"content":"        }"},{"lineNumber":299,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":300,"author":{"gitID":"ncaminh"},"content":"    //@@author"},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":303,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":304,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":305,"author":{"gitID":"-"},"content":"        ui.stop();"},{"lineNumber":306,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":307,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(userPrefs);"},{"lineNumber":308,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":309,"author":{"gitID":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":310,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":311,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":312,"author":{"gitID":"-"},"content":"        System.exit(0);"},{"lineNumber":313,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":316,"author":{"gitID":"-"},"content":"    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"},{"lineNumber":317,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":318,"author":{"gitID":"-"},"content":"        this.stop();"},{"lineNumber":319,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"ngshikang"},"content":"    //@@author ngshikang"},{"lineNumber":322,"author":{"gitID":"ngshikang"},"content":"    @Subscribe"},{"lineNumber":323,"author":{"gitID":"ngshikang"},"content":"    public void handleExitLoginRequestEvent(ExitLoginRequestEvent event) {"},{"lineNumber":324,"author":{"gitID":"ngshikang"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":325,"author":{"gitID":"ngshikang"},"content":"        Platform.exit();"},{"lineNumber":326,"author":{"gitID":"ngshikang"},"content":"        System.exit(0);"},{"lineNumber":327,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":328,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":329,"author":{"gitID":"ngshikang"},"content":"    @Subscribe"},{"lineNumber":330,"author":{"gitID":"ngshikang"},"content":"    public void handleAccessGrantedEvent(LoginAccessGrantedEvent event) {"},{"lineNumber":331,"author":{"gitID":"ngshikang"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":332,"author":{"gitID":"ngshikang"},"content":"        ui.stopLogin();"},{"lineNumber":333,"author":{"gitID":"ngshikang"},"content":"        this.startApp(new Stage());"},{"lineNumber":334,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":335,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":336,"author":{"gitID":"ngshikang"},"content":"    //@@author"},{"lineNumber":337,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":338,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":339,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":340,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ngshikang":72,"ncaminh":68,"-":200}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitID":"meerakanani10"},"content":"import seedu.address.model.person.DelivDate;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return new Person[] {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":24,"author":{"gitID":"-"},"content":"                new Address(\"20 Hongkong Street, Singapore, #06-02\"), new DelivDate(\"2018-03-22\"),"},{"lineNumber":25,"author":{"gitID":"meerakanani10"},"content":"                getTagSet(\"priority\")),"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":27,"author":{"gitID":"-"},"content":"                new Address(\"33 Middle Road, Singapore, #07-18\"), new DelivDate(\"2018-03-23\"),"},{"lineNumber":28,"author":{"gitID":"meerakanani10"},"content":"                getTagSet(\"fragile\")),"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":30,"author":{"gitID":"-"},"content":"                new Address(\"183 Selegie Road, Singapore, #11-04\"), new DelivDate(\"2018-03-24\"),"},{"lineNumber":31,"author":{"gitID":"meerakanani10"},"content":"                getTagSet(\"fragile\")),"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":33,"author":{"gitID":"-"},"content":"                new Address(\"50 Lorong 18 Geylang, #16-43\"), new DelivDate(\"2018-03-22\"),"},{"lineNumber":34,"author":{"gitID":"meerakanani10"},"content":"                getTagSet(\"priority\")),"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                new Address(\"51 Lavender Street, #17-35\"), new DelivDate(\"2018-03-25\"),"},{"lineNumber":37,"author":{"gitID":"meerakanani10"},"content":"                getTagSet(\"repeat\")),"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                new Address(\"231 Pasir Panjang Road, #11-31\"), new DelivDate(\"2018-03-25\"),"},{"lineNumber":40,"author":{"gitID":"meerakanani10"},"content":"                getTagSet(\"fragile\", \"priority\"))"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"meerakanani10":7,"-":61}},{"path":"src/main/java/seedu/address/model/person/Address.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a Person\u0027s address in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Address {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"-"},"content":"            \"Person addresses can take any values, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Constructs an {@code Address}."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @param address A valid address."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public Address(String address) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        checkArgument(isValidAddress(address), MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.value \u003d address;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"meerakanani10"},"content":"     * Returns true if a given string is a valid person address."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static boolean isValidAddress(String test) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return test.matches(ADDRESS_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                || (other instanceof Address // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Address) other).value)); // state check"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"meerakanani10":1,"-":57}},{"path":"src/main/java/seedu/address/logic/GetDistance.java","lines":[{"lineNumber":1,"author":{"gitID":"meerakanani10"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":3,"author":{"gitID":"meerakanani10"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.google.maps.DistanceMatrixApi;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.maps.GeoApiContext;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.maps.errors.ApiException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.maps.model.DistanceMatrix;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":13,"author":{"gitID":"meerakanani10"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"meerakanani10"},"content":" * Testing retrieve distance data"},{"lineNumber":15,"author":{"gitID":"meerakanani10"},"content":" */"},{"lineNumber":16,"author":{"gitID":"meerakanani10"},"content":"public class GetDistance {"},{"lineNumber":17,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":18,"author":{"gitID":"ncaminh"},"content":"    //@@author ncaminh"},{"lineNumber":19,"author":{"gitID":"ncaminh"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(GetDistance.class);"},{"lineNumber":20,"author":{"gitID":"ncaminh"},"content":"    public DistanceMatrix getMatrix(String origin, String destination) {"},{"lineNumber":21,"author":{"gitID":"ncaminh"},"content":"        GeoApiContext context \u003d new GeoApiContext.Builder()"},{"lineNumber":22,"author":{"gitID":"ncaminh"},"content":"                .apiKey(\"AIzaSyBWyCJkCym1dSouzHX_FxLk6Tj11C7F0Ao\")"},{"lineNumber":23,"author":{"gitID":"ncaminh"},"content":"                .build();"},{"lineNumber":24,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":25,"author":{"gitID":"ncaminh"},"content":"        String[] origins \u003d {origin};"},{"lineNumber":26,"author":{"gitID":"ncaminh"},"content":"        String[] destinations \u003d {destination};"},{"lineNumber":27,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":28,"author":{"gitID":"ncaminh"},"content":"        DistanceMatrix matrix \u003d null;"},{"lineNumber":29,"author":{"gitID":"ncaminh"},"content":"        try {"},{"lineNumber":30,"author":{"gitID":"ncaminh"},"content":"            matrix \u003d DistanceMatrixApi.getDistanceMatrix(context, origins, destinations).await();"},{"lineNumber":31,"author":{"gitID":"ncaminh"},"content":"        } catch (ApiException e) {"},{"lineNumber":32,"author":{"gitID":"ncaminh"},"content":"            e.printStackTrace();"},{"lineNumber":33,"author":{"gitID":"ncaminh"},"content":"        } catch (InterruptedException e) {"},{"lineNumber":34,"author":{"gitID":"ncaminh"},"content":"            e.printStackTrace();"},{"lineNumber":35,"author":{"gitID":"ncaminh"},"content":"        } catch (IOException e) {"},{"lineNumber":36,"author":{"gitID":"ncaminh"},"content":"            logger.warning(\"Out of API quota\");"},{"lineNumber":37,"author":{"gitID":"ncaminh"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"ncaminh"},"content":"        return matrix;"},{"lineNumber":39,"author":{"gitID":"ncaminh"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":41,"author":{"gitID":"ncaminh"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"ncaminh"},"content":"     * get driving distance from origin to destination"},{"lineNumber":43,"author":{"gitID":"ncaminh"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"ncaminh"},"content":"    public double getDistance(String origin, String destination) {"},{"lineNumber":45,"author":{"gitID":"ncaminh"},"content":"        if (origin.equals(destination)) {"},{"lineNumber":46,"author":{"gitID":"ncaminh"},"content":"            return 0;"},{"lineNumber":47,"author":{"gitID":"ncaminh"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"ncaminh"},"content":"        String distanceWithoutUnit \u003d \"\";"},{"lineNumber":49,"author":{"gitID":"ncaminh"},"content":"        DistanceMatrix matrix \u003d null;"},{"lineNumber":50,"author":{"gitID":"ncaminh"},"content":"        matrix \u003d getMatrix(origin, destination);"},{"lineNumber":51,"author":{"gitID":"ncaminh"},"content":"        String distance;"},{"lineNumber":52,"author":{"gitID":"ncaminh"},"content":""},{"lineNumber":53,"author":{"gitID":"ncaminh"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"ncaminh"},"content":"            distance \u003d matrix.rows[0].elements[0].distance.toString();"},{"lineNumber":55,"author":{"gitID":"ncaminh"},"content":"        } catch (NullPointerException e) {"},{"lineNumber":56,"author":{"gitID":"ncaminh"},"content":"            return -1.0;"},{"lineNumber":57,"author":{"gitID":"ncaminh"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"meerakanani10"},"content":"        //@@author meerakanani10"},{"lineNumber":59,"author":{"gitID":"meerakanani10"},"content":"        int space \u003d distance.indexOf(\" \");"},{"lineNumber":60,"author":{"gitID":"meerakanani10"},"content":"        String units \u003d distance.substring(space + 1, distance.length());"},{"lineNumber":61,"author":{"gitID":"meerakanani10"},"content":"        double metres;"},{"lineNumber":62,"author":{"gitID":"meerakanani10"},"content":"        distanceWithoutUnit \u003d distance.substring(0, space);"},{"lineNumber":63,"author":{"gitID":"meerakanani10"},"content":"        if (units.equals(\"m\")) {"},{"lineNumber":64,"author":{"gitID":"meerakanani10"},"content":"            metres \u003d Double.parseDouble(distanceWithoutUnit) / 1000.0;"},{"lineNumber":65,"author":{"gitID":"meerakanani10"},"content":"            return metres;"},{"lineNumber":66,"author":{"gitID":"meerakanani10"},"content":"        } else {"},{"lineNumber":67,"author":{"gitID":"meerakanani10"},"content":"            return Double.parseDouble(distanceWithoutUnit);"},{"lineNumber":68,"author":{"gitID":"meerakanani10"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"meerakanani10"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":71,"author":{"gitID":"meerakanani10"},"content":"    //@@author meerakanani10"},{"lineNumber":72,"author":{"gitID":"meerakanani10"},"content":"    public double getTime(String origin, String destination) {"},{"lineNumber":73,"author":{"gitID":"meerakanani10"},"content":"        String durationWithoutUnit \u003d \"\";"},{"lineNumber":74,"author":{"gitID":"meerakanani10"},"content":"        DistanceMatrix matrix \u003d null;"},{"lineNumber":75,"author":{"gitID":"meerakanani10"},"content":"        matrix \u003d getMatrix(origin, destination);"},{"lineNumber":76,"author":{"gitID":"meerakanani10"},"content":"        String duration \u003d matrix.rows[0].elements[0].duration.toString();"},{"lineNumber":77,"author":{"gitID":"meerakanani10"},"content":"        int space \u003d duration.indexOf(\" \");"},{"lineNumber":78,"author":{"gitID":"meerakanani10"},"content":"        String units \u003d duration.substring(space + 1, duration.length());"},{"lineNumber":79,"author":{"gitID":"meerakanani10"},"content":"        durationWithoutUnit \u003d duration.substring(0, space);"},{"lineNumber":80,"author":{"gitID":"meerakanani10"},"content":"        return Double.parseDouble(durationWithoutUnit);"},{"lineNumber":81,"author":{"gitID":"meerakanani10"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"meerakanani10"},"content":"}"}],"authorContributionMap":{"ncaminh":40,"meerakanani10":34,"-":8}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class Person {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final Phone phone;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Email email;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Address address;"},{"lineNumber":22,"author":{"gitID":"meerakanani10"},"content":"    private final DelivDate date;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"meerakanani10"},"content":"    public Person(Name name, Phone phone, Email email, Address address, DelivDate date, Set\u003cTag\u003e tags) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":33,"author":{"gitID":"meerakanani10"},"content":"        this.date \u003d date;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"meerakanani10"},"content":"    public DelivDate getDate() {"},{"lineNumber":55,"author":{"gitID":"meerakanani10"},"content":"        return date;"},{"lineNumber":56,"author":{"gitID":"meerakanani10"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return otherPerson.getName().equals(this.getName())"},{"lineNumber":78,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"},{"lineNumber":80,"author":{"gitID":"meerakanani10"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress())"},{"lineNumber":81,"author":{"gitID":"meerakanani10"},"content":"                \u0026\u0026 otherPerson.getDate().equals(this.getDate());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":87,"author":{"gitID":"meerakanani10"},"content":"        return Objects.hash(name, phone, email, address, date, tags);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                .append(\" Address: \")"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                .append(getAddress())"},{"lineNumber":100,"author":{"gitID":"meerakanani10"},"content":"                .append(\" Delivery Date: \")"},{"lineNumber":101,"author":{"gitID":"meerakanani10"},"content":"                .append(getDate())"},{"lineNumber":102,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"meerakanani10":12,"-":95}},{"path":"src/main/java/seedu/address/storage/JsonUserPassStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"ngshikang"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":3,"author":{"gitID":"ngshikang"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"ngshikang"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitID":"ngshikang"},"content":"import java.util.NoSuchElementException;"},{"lineNumber":6,"author":{"gitID":"ngshikang"},"content":"import java.util.Optional;"},{"lineNumber":7,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.JsonUtil;"},{"lineNumber":10,"author":{"gitID":"ngshikang"},"content":"import seedu.address.login.UserPass;"},{"lineNumber":11,"author":{"gitID":"ngshikang"},"content":"import seedu.address.login.UserPassStorage;"},{"lineNumber":12,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":13,"author":{"gitID":"ngshikang"},"content":"//@@author ngshikang"},{"lineNumber":14,"author":{"gitID":"ngshikang"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"ngshikang"},"content":" * A class to access UserPass stored in the hard disk as a json file"},{"lineNumber":16,"author":{"gitID":"ngshikang"},"content":" */"},{"lineNumber":17,"author":{"gitID":"ngshikang"},"content":"public class JsonUserPassStorage implements UserPassStorage {"},{"lineNumber":18,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":19,"author":{"gitID":"ngshikang"},"content":"    private String filePath;"},{"lineNumber":20,"author":{"gitID":"ngshikang"},"content":"    private HashMap userPassHashmap;"},{"lineNumber":21,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":22,"author":{"gitID":"ngshikang"},"content":"    public JsonUserPassStorage(String filePath) {"},{"lineNumber":23,"author":{"gitID":"ngshikang"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":24,"author":{"gitID":"ngshikang"},"content":"        try {"},{"lineNumber":25,"author":{"gitID":"ngshikang"},"content":"            userPassHashmap \u003d readUserPassMap().get();"},{"lineNumber":26,"author":{"gitID":"ngshikang"},"content":"        } catch (DataConversionException | IOException e) {"},{"lineNumber":27,"author":{"gitID":"ngshikang"},"content":"            e.printStackTrace();"},{"lineNumber":28,"author":{"gitID":"ngshikang"},"content":"        } catch (NullPointerException | NoSuchElementException e) {"},{"lineNumber":29,"author":{"gitID":"ngshikang"},"content":"            userPassHashmap \u003d new HashMap\u003c\u003e();"},{"lineNumber":30,"author":{"gitID":"ngshikang"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":33,"author":{"gitID":"ngshikang"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"ngshikang"},"content":"    public String getUserPassFilePath() {"},{"lineNumber":35,"author":{"gitID":"ngshikang"},"content":"        return filePath;"},{"lineNumber":36,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":38,"author":{"gitID":"ngshikang"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"ngshikang"},"content":"    public Optional\u003cHashMap\u003e readUserPassMap() throws DataConversionException, IOException {"},{"lineNumber":40,"author":{"gitID":"ngshikang"},"content":"        return readUserPassMap(filePath);"},{"lineNumber":41,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":43,"author":{"gitID":"ngshikang"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"ngshikang"},"content":"     * Similar to {@link #readUserPassMap()}"},{"lineNumber":45,"author":{"gitID":"ngshikang"},"content":"     * @param userpassFilePath location of the data. Cannot be null."},{"lineNumber":46,"author":{"gitID":"ngshikang"},"content":"     * @throws DataConversionException if the file format is not as expected."},{"lineNumber":47,"author":{"gitID":"ngshikang"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"ngshikang"},"content":"    public Optional\u003cHashMap\u003e readUserPassMap(String userpassFilePath) throws DataConversionException {"},{"lineNumber":49,"author":{"gitID":"ngshikang"},"content":"        return JsonUtil.readJsonFile(userpassFilePath, HashMap.class);"},{"lineNumber":50,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":52,"author":{"gitID":"ngshikang"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"ngshikang"},"content":"    public void saveUserPassMap() throws IOException {"},{"lineNumber":54,"author":{"gitID":"ngshikang"},"content":"        JsonUtil.saveJsonFile(userPassHashmap, filePath);"},{"lineNumber":55,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":57,"author":{"gitID":"ngshikang"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"ngshikang"},"content":"    public void put(UserPass userPass) {"},{"lineNumber":59,"author":{"gitID":"ngshikang"},"content":"        userPassHashmap.put(userPass.getUsername(), userPass.getPassword());"},{"lineNumber":60,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":62,"author":{"gitID":"ngshikang"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"ngshikang"},"content":"    public boolean containsKey(String username) {"},{"lineNumber":64,"author":{"gitID":"ngshikang"},"content":"        return userPassHashmap.containsKey(username);"},{"lineNumber":65,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":67,"author":{"gitID":"ngshikang"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"ngshikang"},"content":"    public String get(String username) {"},{"lineNumber":69,"author":{"gitID":"ngshikang"},"content":"        return userPassHashmap.get(username).toString();"},{"lineNumber":70,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":72,"author":{"gitID":"ngshikang"},"content":"}"}],"authorContributionMap":{"ngshikang":70,"-":2}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class UserPrefs {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private GuiSettings guiSettings;"},{"lineNumber":13,"author":{"gitID":"ngshikang"},"content":"    private String addressBookFolderPath \u003d \"data/\";"},{"lineNumber":14,"author":{"gitID":"ngshikang"},"content":"    private String addressBookFileName \u003d \"\";"},{"lineNumber":15,"author":{"gitID":"ngshikang"},"content":"    private String addressBookFilePath \u003d addressBookFolderPath + addressBookFileName + \"addressbook.xml\";"},{"lineNumber":16,"author":{"gitID":"ngshikang"},"content":"    private String addressBookName \u003d \"Address Book\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public UserPrefs() {"},{"lineNumber":19,"author":{"gitID":"ngshikang"},"content":"        this.setGuiSettings(1200, 800, 0, 0);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setGuiSettings(double width, double height, int x, int y) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        guiSettings \u003d new GuiSettings(width, height, x, y);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"ngshikang"},"content":"    public String getAddressBookFolderPath() {"},{"lineNumber":35,"author":{"gitID":"ngshikang"},"content":"        return addressBookFolderPath;"},{"lineNumber":36,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":38,"author":{"gitID":"ngshikang"},"content":"    public void setAddressBookFolderPath(String addressBookFolderPath) {"},{"lineNumber":39,"author":{"gitID":"ngshikang"},"content":"        this.addressBookFolderPath \u003d addressBookFolderPath;"},{"lineNumber":40,"author":{"gitID":"ngshikang"},"content":"        addressBookFilePath \u003d addressBookFolderPath + addressBookFileName + \"addressbook.xml\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public String getAddressBookName() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return addressBookName;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void setAddressBookName(String addressBookName) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        this.addressBookName \u003d addressBookName;"},{"lineNumber":49,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return addressBookFilePath;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void setAddressBookFilePath(String addressBookFilePath) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"ngshikang"},"content":"    public String getAddressBookFileName() {"},{"lineNumber":60,"author":{"gitID":"ngshikang"},"content":"        return addressBookFileName;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"ngshikang"},"content":"    public void setAddressBookFileName(String addressBookFileName) {"},{"lineNumber":64,"author":{"gitID":"ngshikang"},"content":"        this.addressBookFileName \u003d addressBookFileName;"},{"lineNumber":65,"author":{"gitID":"ngshikang"},"content":"        addressBookFilePath \u003d addressBookFolderPath + addressBookFileName + \"addressbook.xml\";"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well."},{"lineNumber":74,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return Objects.equals(guiSettings, o.guiSettings)"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath)"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(addressBookName, o.addressBookName);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return Objects.hash(guiSettings, addressBookFilePath, addressBookName);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings.toString());"},{"lineNumber":93,"author":{"gitID":"ngshikang"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFolderPath + addressBookName + addressBookFilePath);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        sb.append(\"\\nAddressBook name : \" + addressBookName);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ngshikang":20,"-":78}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":93,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":114,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     *  Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":132,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        return new Person("},{"lineNumber":135,"author":{"gitID":"meerakanani10"},"content":"                person.getName(), person.getPhone(), person.getEmail(), person.getAddress(), person.getDate(),"},{"lineNumber":136,"author":{"gitID":"meerakanani10"},"content":"                correctTagReferences);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags\";"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":178,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":179,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":180,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        return Objects.hash(persons, tags);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"meerakanani10":2,"-":186}},{"path":"src/main/java/seedu/address/login/UserPassStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"ngshikang"},"content":"package seedu.address.login;"},{"lineNumber":2,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":3,"author":{"gitID":"ngshikang"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"ngshikang"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitID":"ngshikang"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":9,"author":{"gitID":"ngshikang"},"content":"//@@author ngshikang"},{"lineNumber":10,"author":{"gitID":"ngshikang"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"ngshikang"},"content":" * Storage for UserPass"},{"lineNumber":12,"author":{"gitID":"ngshikang"},"content":" */"},{"lineNumber":13,"author":{"gitID":"ngshikang"},"content":"public interface UserPassStorage {"},{"lineNumber":14,"author":{"gitID":"ngshikang"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"ngshikang"},"content":"     * Returns the file path of the UserPass data file."},{"lineNumber":16,"author":{"gitID":"ngshikang"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"ngshikang"},"content":"    String getUserPassFilePath();"},{"lineNumber":18,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":19,"author":{"gitID":"ngshikang"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"ngshikang"},"content":"     * Returns UserPass data from storage."},{"lineNumber":21,"author":{"gitID":"ngshikang"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":22,"author":{"gitID":"ngshikang"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":23,"author":{"gitID":"ngshikang"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":24,"author":{"gitID":"ngshikang"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"ngshikang"},"content":"    Optional\u003cHashMap\u003e readUserPassMap() throws DataConversionException, IOException;"},{"lineNumber":26,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":27,"author":{"gitID":"ngshikang"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"ngshikang"},"content":"     * Saves the given {@link seedu.address.login.UserPass} to the storage."},{"lineNumber":29,"author":{"gitID":"ngshikang"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":30,"author":{"gitID":"ngshikang"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"ngshikang"},"content":"    void saveUserPassMap() throws IOException;"},{"lineNumber":32,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":33,"author":{"gitID":"ngshikang"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"ngshikang"},"content":"     * Provide similar functionality as \"put\" in underlying HashMap to insert new UserPass to storage"},{"lineNumber":35,"author":{"gitID":"ngshikang"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"ngshikang"},"content":"    void put(UserPass userPass);"},{"lineNumber":37,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":38,"author":{"gitID":"ngshikang"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"ngshikang"},"content":"     * Provide similar functionality as \"containsKey\" in underlying HashMap to insert new UserPass to storage"},{"lineNumber":40,"author":{"gitID":"ngshikang"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"ngshikang"},"content":"    boolean containsKey(String username);"},{"lineNumber":42,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":43,"author":{"gitID":"ngshikang"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"ngshikang"},"content":"     * Provide similar functionality as \"get\" in underlying HashMap to insert new UserPass to storage"},{"lineNumber":45,"author":{"gitID":"ngshikang"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"ngshikang"},"content":"    String get(String username);"},{"lineNumber":47,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":48,"author":{"gitID":"ngshikang"},"content":"}"}],"authorContributionMap":{"ngshikang":47,"-":1}},{"path":"src/main/java/seedu/address/login/UserPass.java","lines":[{"lineNumber":1,"author":{"gitID":"ngshikang"},"content":"package seedu.address.login;"},{"lineNumber":2,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":3,"author":{"gitID":"ngshikang"},"content":"import java.nio.charset.StandardCharsets;"},{"lineNumber":4,"author":{"gitID":"ngshikang"},"content":"import java.security.MessageDigest;"},{"lineNumber":5,"author":{"gitID":"ngshikang"},"content":"import java.security.NoSuchAlgorithmException;"},{"lineNumber":6,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":7,"author":{"gitID":"ngshikang"},"content":"//@@author ngshikang"},{"lineNumber":8,"author":{"gitID":"ngshikang"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"ngshikang"},"content":" * Represents a profile\u0027s username and password"},{"lineNumber":10,"author":{"gitID":"ngshikang"},"content":" */"},{"lineNumber":11,"author":{"gitID":"ngshikang"},"content":"public class UserPass {"},{"lineNumber":12,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":13,"author":{"gitID":"ngshikang"},"content":"    private String username;"},{"lineNumber":14,"author":{"gitID":"ngshikang"},"content":"    private String password;"},{"lineNumber":15,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":16,"author":{"gitID":"ngshikang"},"content":"    public UserPass(String username, String password) {"},{"lineNumber":17,"author":{"gitID":"ngshikang"},"content":"        this.username \u003d username;"},{"lineNumber":18,"author":{"gitID":"ngshikang"},"content":"        this.password \u003d hash(password.trim());"},{"lineNumber":19,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":21,"author":{"gitID":"ngshikang"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"ngshikang"},"content":"     * Returns a String containing the SHA-256 encrypted form of input password String"},{"lineNumber":23,"author":{"gitID":"ngshikang"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"ngshikang"},"content":"    public static String hash(String password) {"},{"lineNumber":25,"author":{"gitID":"ngshikang"},"content":"        byte[] encodedPassword \u003d new byte[0];"},{"lineNumber":26,"author":{"gitID":"ngshikang"},"content":"        try {"},{"lineNumber":27,"author":{"gitID":"ngshikang"},"content":"            MessageDigest digest \u003d MessageDigest.getInstance(\"SHA-256\");"},{"lineNumber":28,"author":{"gitID":"ngshikang"},"content":"            encodedPassword \u003d digest.digest(password.getBytes(StandardCharsets.UTF_8));"},{"lineNumber":29,"author":{"gitID":"ngshikang"},"content":"        } catch (NoSuchAlgorithmException e) {"},{"lineNumber":30,"author":{"gitID":"ngshikang"},"content":"            e.printStackTrace();"},{"lineNumber":31,"author":{"gitID":"ngshikang"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":33,"author":{"gitID":"ngshikang"},"content":"        return bytesToHex(encodedPassword);"},{"lineNumber":34,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":35,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":37,"author":{"gitID":"ngshikang"},"content":"    public String getUsername() {"},{"lineNumber":38,"author":{"gitID":"ngshikang"},"content":"        return username;"},{"lineNumber":39,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":41,"author":{"gitID":"ngshikang"},"content":"    public String getPassword() {"},{"lineNumber":42,"author":{"gitID":"ngshikang"},"content":"        return password;"},{"lineNumber":43,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":45,"author":{"gitID":"ngshikang"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"ngshikang"},"content":"     * Utility function returning hexadecimal string from hashed password in byte array"},{"lineNumber":47,"author":{"gitID":"ngshikang"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"ngshikang"},"content":"    private static String bytesToHex(byte[] hash) {"},{"lineNumber":49,"author":{"gitID":"ngshikang"},"content":"        StringBuffer hexString \u003d new StringBuffer();"},{"lineNumber":50,"author":{"gitID":"ngshikang"},"content":"        for (int i \u003d 0; i \u003c hash.length; i++) {"},{"lineNumber":51,"author":{"gitID":"ngshikang"},"content":"            String hex \u003d Integer.toHexString(0xff \u0026 hash[i]);"},{"lineNumber":52,"author":{"gitID":"ngshikang"},"content":"            if (hex.length() \u003d\u003d 1) {"},{"lineNumber":53,"author":{"gitID":"ngshikang"},"content":"                hexString.append(\u00270\u0027);"},{"lineNumber":54,"author":{"gitID":"ngshikang"},"content":"            }"},{"lineNumber":55,"author":{"gitID":"ngshikang"},"content":"            hexString.append(hex);"},{"lineNumber":56,"author":{"gitID":"ngshikang"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"ngshikang"},"content":"        return hexString.toString();"},{"lineNumber":58,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":60,"author":{"gitID":"ngshikang"},"content":"}"},{"lineNumber":61,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":62,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":63,"author":{"gitID":"ngshikang"},"content":""}],"authorContributionMap":{"ngshikang":63}},{"path":"src/main/java/seedu/address/login/Login.java","lines":[{"lineNumber":1,"author":{"gitID":"ngshikang"},"content":"package seedu.address.login;"},{"lineNumber":2,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":3,"author":{"gitID":"ngshikang"},"content":"//@@author ngshikang"},{"lineNumber":4,"author":{"gitID":"ngshikang"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"ngshikang"},"content":" * API of the Login component"},{"lineNumber":6,"author":{"gitID":"ngshikang"},"content":" */"},{"lineNumber":7,"author":{"gitID":"ngshikang"},"content":"public interface Login {"},{"lineNumber":8,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":9,"author":{"gitID":"ngshikang"},"content":"    /** Returns a boolean indicating if access can be allowed to user given login inputs */"},{"lineNumber":10,"author":{"gitID":"ngshikang"},"content":"    boolean checkLoginDetails(UserPass userpass) throws InvalidUsernameException, InvalidPasswordException;"},{"lineNumber":11,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":12,"author":{"gitID":"ngshikang"},"content":"    /** Returns a boolean indicating if username input is valid */"},{"lineNumber":13,"author":{"gitID":"ngshikang"},"content":"    boolean checkUsername();"},{"lineNumber":14,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":15,"author":{"gitID":"ngshikang"},"content":"    /** Returns a boolean indicating if password input corresponds to given username */"},{"lineNumber":16,"author":{"gitID":"ngshikang"},"content":"    boolean checkPassword();"},{"lineNumber":17,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":18,"author":{"gitID":"ngshikang"},"content":"    /** Stores a new username and password pair */"},{"lineNumber":19,"author":{"gitID":"ngshikang"},"content":"    void storeUserPass(UserPass userpass) throws UsernameTakenException;"},{"lineNumber":20,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":21,"author":{"gitID":"ngshikang"},"content":"    /** Initiates App for successful login **/"},{"lineNumber":22,"author":{"gitID":"ngshikang"},"content":"    void accessPermitted();"},{"lineNumber":23,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":24,"author":{"gitID":"ngshikang"},"content":"    /** Returns String that represents profile ID **/"},{"lineNumber":25,"author":{"gitID":"ngshikang"},"content":"    String getUsername();"},{"lineNumber":26,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":27,"author":{"gitID":"ngshikang"},"content":"}"}],"authorContributionMap":{"ngshikang":27}},{"path":"src/main/java/seedu/address/login/InvalidUsernameException.java","lines":[{"lineNumber":1,"author":{"gitID":"ngshikang"},"content":"package seedu.address.login;"},{"lineNumber":2,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":3,"author":{"gitID":"ngshikang"},"content":"//@@author ngshikang"},{"lineNumber":4,"author":{"gitID":"ngshikang"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"ngshikang"},"content":" * Returns an exception for invalid username in login"},{"lineNumber":6,"author":{"gitID":"ngshikang"},"content":" */"},{"lineNumber":7,"author":{"gitID":"ngshikang"},"content":"public class InvalidUsernameException extends Exception{"},{"lineNumber":8,"author":{"gitID":"ngshikang"},"content":"}"}],"authorContributionMap":{"ngshikang":8}},{"path":"src/main/java/seedu/address/model/person/DatePredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"meerakanani10"},"content":" * Tests that a {@code Person}\u0027s {@code deliver date} matches any of the keywords given."},{"lineNumber":10,"author":{"gitID":"meerakanani10"},"content":" */"},{"lineNumber":11,"author":{"gitID":"meerakanani10"},"content":"public class DatePredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":12,"author":{"gitID":"meerakanani10"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":14,"author":{"gitID":"meerakanani10"},"content":"    public DatePredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public boolean test(Person person) {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return keywords.stream()"},{"lineNumber":21,"author":{"gitID":"meerakanani10"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getDate().toString(), keyword));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":27,"author":{"gitID":"meerakanani10"},"content":"                || (other instanceof DatePredicate // instanceof handles nulls"},{"lineNumber":28,"author":{"gitID":"meerakanani10"},"content":"                \u0026\u0026 this.keywords.equals(((DatePredicate) other).keywords)); // state check"},{"lineNumber":29,"author":{"gitID":"meerakanani10"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":31,"author":{"gitID":"meerakanani10"},"content":"}"}],"authorContributionMap":{"meerakanani10":12,"-":19}},{"path":"src/main/java/seedu/address/model/person/DelivDate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"meerakanani10"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"meerakanani10"},"content":" * Represents a Person\u0027s delivery date in the address book."},{"lineNumber":8,"author":{"gitID":"meerakanani10"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"},{"lineNumber":9,"author":{"gitID":"meerakanani10"},"content":" */"},{"lineNumber":10,"author":{"gitID":"meerakanani10"},"content":"public class DelivDate {"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":12,"author":{"gitID":"-"},"content":"     * Represents a Person\u0027s address in the address book."},{"lineNumber":13,"author":{"gitID":"meerakanani10"},"content":"     * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"},{"lineNumber":14,"author":{"gitID":"meerakanani10"},"content":"     */"},{"lineNumber":15,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":16,"author":{"gitID":"meerakanani10"},"content":"    public static final String MESSAGE_DATE_CONSTRAINTS \u003d"},{"lineNumber":17,"author":{"gitID":"meerakanani10"},"content":"            \"Person delivery date can take dates in the form YYYY-MM-DD, \""},{"lineNumber":18,"author":{"gitID":"meerakanani10"},"content":"                    + \"in only the valid date range, and it should not be blank\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"meerakanani10"},"content":"    //public static final String DATE_VALIDATION_REGEX \u003d \"\\\\d{4}-\\\\d{2}-\\\\d{2}\";"},{"lineNumber":24,"author":{"gitID":"meerakanani10"},"content":"    public static final String DATE_VALIDATION_REGEX \u003d \"((19|2[0-9])[0-9]{2})-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Constructs an {@code Address}."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":31,"author":{"gitID":"meerakanani10"},"content":"     * @param date A valid date."},{"lineNumber":32,"author":{"gitID":"meerakanani10"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"meerakanani10"},"content":"    public DelivDate(String date) {"},{"lineNumber":34,"author":{"gitID":"meerakanani10"},"content":"        requireNonNull(date);"},{"lineNumber":35,"author":{"gitID":"meerakanani10"},"content":"        checkArgument(isValidDate(date), MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":36,"author":{"gitID":"meerakanani10"},"content":"        this.value \u003d date;"},{"lineNumber":37,"author":{"gitID":"meerakanani10"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":39,"author":{"gitID":"meerakanani10"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"meerakanani10"},"content":"     * Returns true if a given string is a valid person date."},{"lineNumber":41,"author":{"gitID":"meerakanani10"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"meerakanani10"},"content":"    public static boolean isValidDate(String test) {"},{"lineNumber":43,"author":{"gitID":"meerakanani10"},"content":"        boolean itMatches \u003d test.matches(DATE_VALIDATION_REGEX);"},{"lineNumber":44,"author":{"gitID":"meerakanani10"},"content":"        return itMatches;"},{"lineNumber":45,"author":{"gitID":"meerakanani10"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":55,"author":{"gitID":"meerakanani10"},"content":"                || (other instanceof seedu.address.model.person.DelivDate // instanceof handles nulls"},{"lineNumber":56,"author":{"gitID":"meerakanani10"},"content":"                \u0026\u0026 this.value.equals(((seedu.address.model.person.DelivDate) other).value)); // state check"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"}"},{"lineNumber":65,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":66,"author":{"gitID":"meerakanani10"},"content":""},{"lineNumber":67,"author":{"gitID":"meerakanani10"},"content":""}],"authorContributionMap":{"meerakanani10":33,"-":34}},{"path":"src/main/java/seedu/address/login/InvalidPasswordException.java","lines":[{"lineNumber":1,"author":{"gitID":"ngshikang"},"content":"package seedu.address.login;"},{"lineNumber":2,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":3,"author":{"gitID":"ngshikang"},"content":"//@@author ngshikang"},{"lineNumber":4,"author":{"gitID":"ngshikang"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"ngshikang"},"content":" * Returns an exception for wrong password in login"},{"lineNumber":6,"author":{"gitID":"ngshikang"},"content":" */"},{"lineNumber":7,"author":{"gitID":"ngshikang"},"content":"public class InvalidPasswordException extends Exception {"},{"lineNumber":8,"author":{"gitID":"ngshikang"},"content":"}"}],"authorContributionMap":{"ngshikang":8}},{"path":"src/main/java/seedu/address/login/UsernameTakenException.java","lines":[{"lineNumber":1,"author":{"gitID":"ngshikang"},"content":"package seedu.address.login;"},{"lineNumber":2,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":3,"author":{"gitID":"ngshikang"},"content":"//@@author ngshikang"},{"lineNumber":4,"author":{"gitID":"ngshikang"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"ngshikang"},"content":" * Exception disallowing creation of username that already exists in storage"},{"lineNumber":6,"author":{"gitID":"ngshikang"},"content":" */"},{"lineNumber":7,"author":{"gitID":"ngshikang"},"content":"public class UsernameTakenException extends Exception {"},{"lineNumber":8,"author":{"gitID":"ngshikang"},"content":"}"}],"authorContributionMap":{"ngshikang":8}},{"path":"src/main/java/seedu/address/login/LoginManager.java","lines":[{"lineNumber":1,"author":{"gitID":"ngshikang"},"content":"package seedu.address.login;"},{"lineNumber":2,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":3,"author":{"gitID":"ngshikang"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"ngshikang"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":8,"author":{"gitID":"ngshikang"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":9,"author":{"gitID":"ngshikang"},"content":"import seedu.address.commons.events.ui.LoginAccessGrantedEvent;"},{"lineNumber":10,"author":{"gitID":"ngshikang"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":11,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":12,"author":{"gitID":"ngshikang"},"content":"//@@author ngshikang"},{"lineNumber":13,"author":{"gitID":"ngshikang"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"ngshikang"},"content":" * Manages login to a specific Pigeons driver profile and customised storage."},{"lineNumber":15,"author":{"gitID":"ngshikang"},"content":" */"},{"lineNumber":16,"author":{"gitID":"ngshikang"},"content":"public class LoginManager extends ComponentManager implements Login {"},{"lineNumber":17,"author":{"gitID":"ngshikang"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(LoginManager.class);"},{"lineNumber":18,"author":{"gitID":"ngshikang"},"content":"    private static final boolean CHECK_SUCCESS \u003d true;"},{"lineNumber":19,"author":{"gitID":"ngshikang"},"content":"    private UserPassStorage userPassStorage;"},{"lineNumber":20,"author":{"gitID":"ngshikang"},"content":"    private StorageManager storage;"},{"lineNumber":21,"author":{"gitID":"ngshikang"},"content":"    private UserPass userpass;"},{"lineNumber":22,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":23,"author":{"gitID":"ngshikang"},"content":"    public LoginManager(StorageManager storage) {"},{"lineNumber":24,"author":{"gitID":"ngshikang"},"content":"        this.storage \u003d storage;"},{"lineNumber":25,"author":{"gitID":"ngshikang"},"content":"        this.userPassStorage \u003d storage.getUserPassStorage();"},{"lineNumber":26,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":28,"author":{"gitID":"ngshikang"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"ngshikang"},"content":"     * Returns a boolean to signify login success and throws exceptions when it fails"},{"lineNumber":30,"author":{"gitID":"ngshikang"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"ngshikang"},"content":"    public boolean checkLoginDetails(UserPass userpass) throws InvalidUsernameException, InvalidPasswordException {"},{"lineNumber":32,"author":{"gitID":"ngshikang"},"content":"        logger.info(\"----------------[USER/PASS CHECK][\" + userpass.getUsername() + \"]\");"},{"lineNumber":33,"author":{"gitID":"ngshikang"},"content":"        this.userpass \u003d userpass;"},{"lineNumber":34,"author":{"gitID":"ngshikang"},"content":"        if (!checkUsername()) {"},{"lineNumber":35,"author":{"gitID":"ngshikang"},"content":"            throw new InvalidUsernameException();"},{"lineNumber":36,"author":{"gitID":"ngshikang"},"content":"        } else if   (!checkPassword()) {"},{"lineNumber":37,"author":{"gitID":"ngshikang"},"content":"            throw new InvalidPasswordException();"},{"lineNumber":38,"author":{"gitID":"ngshikang"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"ngshikang"},"content":"        return CHECK_SUCCESS;"},{"lineNumber":40,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":42,"author":{"gitID":"ngshikang"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"ngshikang"},"content":"     * Returns a boolean to verify username is valid"},{"lineNumber":44,"author":{"gitID":"ngshikang"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"ngshikang"},"content":"    public boolean checkUsername() {"},{"lineNumber":46,"author":{"gitID":"ngshikang"},"content":"        String username \u003d userpass.getUsername();"},{"lineNumber":47,"author":{"gitID":"ngshikang"},"content":"        if (username.equals(\"\") || username.isEmpty()) {"},{"lineNumber":48,"author":{"gitID":"ngshikang"},"content":"            return false;"},{"lineNumber":49,"author":{"gitID":"ngshikang"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"ngshikang"},"content":"        return userPassStorage.containsKey(username);"},{"lineNumber":51,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":53,"author":{"gitID":"ngshikang"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"ngshikang"},"content":"     * Returns a boolean to verify password is valid"},{"lineNumber":55,"author":{"gitID":"ngshikang"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"ngshikang"},"content":"    public boolean checkPassword() {"},{"lineNumber":57,"author":{"gitID":"ngshikang"},"content":"        String username \u003d userpass.getUsername().toLowerCase();"},{"lineNumber":58,"author":{"gitID":"ngshikang"},"content":"        String passwordInput \u003d userpass.getPassword().toLowerCase();"},{"lineNumber":59,"author":{"gitID":"ngshikang"},"content":"        String passwordExpected \u003d userPassStorage.get(username).toLowerCase();"},{"lineNumber":60,"author":{"gitID":"ngshikang"},"content":"        return passwordInput.equals(passwordExpected);"},{"lineNumber":61,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":63,"author":{"gitID":"ngshikang"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"ngshikang"},"content":"     * Stores new username and password into storage"},{"lineNumber":65,"author":{"gitID":"ngshikang"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"ngshikang"},"content":"    public void storeUserPass(UserPass userpass) throws UsernameTakenException {"},{"lineNumber":67,"author":{"gitID":"ngshikang"},"content":"        if (userPassStorage.containsKey(userpass.getUsername())) {"},{"lineNumber":68,"author":{"gitID":"ngshikang"},"content":"            throw new UsernameTakenException();"},{"lineNumber":69,"author":{"gitID":"ngshikang"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"ngshikang"},"content":"        userPassStorage.put(userpass);"},{"lineNumber":71,"author":{"gitID":"ngshikang"},"content":"        try {"},{"lineNumber":72,"author":{"gitID":"ngshikang"},"content":"            userPassStorage.saveUserPassMap();"},{"lineNumber":73,"author":{"gitID":"ngshikang"},"content":"        } catch (IOException e) {"},{"lineNumber":74,"author":{"gitID":"ngshikang"},"content":"            e.printStackTrace();"},{"lineNumber":75,"author":{"gitID":"ngshikang"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"ngshikang"},"content":"        storage.setUserPassStorage(userPassStorage);"},{"lineNumber":77,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":78,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":80,"author":{"gitID":"ngshikang"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"ngshikang"},"content":"     * Posts new event to signify login success"},{"lineNumber":82,"author":{"gitID":"ngshikang"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"ngshikang"},"content":"    public void accessPermitted() {"},{"lineNumber":84,"author":{"gitID":"ngshikang"},"content":"        EventsCenter.getInstance().post(new LoginAccessGrantedEvent());"},{"lineNumber":85,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":87,"author":{"gitID":"ngshikang"},"content":"    public String getUsername() {"},{"lineNumber":88,"author":{"gitID":"ngshikang"},"content":"        return userpass.getUsername();"},{"lineNumber":89,"author":{"gitID":"ngshikang"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"ngshikang"},"content":""},{"lineNumber":91,"author":{"gitID":"ngshikang"},"content":"}"}],"authorContributionMap":{"ngshikang":89,"-":2}}]
