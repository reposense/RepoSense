var resultJson = [{"path":"docs/ContactUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Contact Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"* *Bug reports, Suggestions* : Post in our https://github.com/se-edu/addressbook-level4/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."},{"lineNumber":5,"author":{"gitID":"-"},"content":"* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"},{"lineNumber":6,"author":{"gitID":"a-shakra"},"content":"* *Email us* : You can also reach us at `tuitionconnect [at] comp.nus.edu.sg`"}],"authorContributionMap":{"a-shakra":1,"-":5}},{"path":"docs/team/ashakra.adoc","lines":[{"lineNumber":1,"author":{"gitID":"a-shakra"},"content":"\u003d Anas Shakra - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"a-shakra"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"a-shakra"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":5,"author":{"gitID":"a-shakra"},"content":"\u003d\u003d PROJECT: Tuition Connect (TC)"},{"lineNumber":6,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":7,"author":{"gitID":"a-shakra"},"content":"---"},{"lineNumber":8,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":9,"author":{"gitID":"a-shakra"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":11,"author":{"gitID":"a-shakra"},"content":"TuitionConnect is a desktop address book application used by private tuition teacher. +"},{"lineNumber":12,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":13,"author":{"gitID":"a-shakra"},"content":"TuitionConnect aims to help the tutors to manage their busy schedule more efficiently and effectively. +"},{"lineNumber":14,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":15,"author":{"gitID":"a-shakra"},"content":"TuitionConnect has many functionality catered to the tutors - adding and deleting a tutee, creating a schedule, rescheduling and many more. +"},{"lineNumber":16,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":17,"author":{"gitID":"a-shakra"},"content":"The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 20 kLoC."},{"lineNumber":18,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":19,"author":{"gitID":"a-shakra"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":20,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":21,"author":{"gitID":"a-shakra"},"content":"* *Major enhancement*: Integrated *a new Task class into the application*"},{"lineNumber":22,"author":{"gitID":"a-shakra"},"content":"** What it does: The addressbook application is now able to interact, in various ways, with the newly created task object. In doing so, tutors are capable of generating and manipulating their various appointments at will. This enhancment inclues the ability to store the task object in the addressbook."},{"lineNumber":23,"author":{"gitID":"a-shakra"},"content":"** Justification: This feature forms the foundation of the application as the app is based on a tutor\u0027s ability to create and interact with a task object in an addressbook environemnt."},{"lineNumber":24,"author":{"gitID":"a-shakra"},"content":"** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to almost every aspect of the codebase."},{"lineNumber":25,"author":{"gitID":"a-shakra"},"content":"** Credits: While no outside code was used, it was useful to look over how the Person class interacted with the addressbook and see how that can be adjusted to allow the pre-existing codebase to accomodate the Task object."},{"lineNumber":26,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":27,"author":{"gitID":"a-shakra"},"content":"* *Minor enhancement*: added a listTask command that allows the user to view all tasks stored in the addressbook."},{"lineNumber":28,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":29,"author":{"gitID":"a-shakra"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-T11-B1/main/blob/master/collated/functional/a-shakra.md[Functional code]] [https://github.com/CS2103JAN2018-T11-B1/main/blob/master/collated/test/a-shakra.md[Test code]]"},{"lineNumber":30,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":31,"author":{"gitID":"a-shakra"},"content":"* *Other contributions*:"},{"lineNumber":32,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":33,"author":{"gitID":"a-shakra"},"content":"** Project management:"},{"lineNumber":34,"author":{"gitID":"a-shakra"},"content":"*** Managed releases `v1.2` - `v1.4` (3 releases) on GitHub"},{"lineNumber":35,"author":{"gitID":"a-shakra"},"content":"** Enhancements to existing features:"},{"lineNumber":36,"author":{"gitID":"a-shakra"},"content":"*** Wrote additional tests for existing features (https://github.com[#68], https://github.com[#140])"},{"lineNumber":37,"author":{"gitID":"a-shakra"},"content":"** Documentation:"},{"lineNumber":38,"author":{"gitID":"a-shakra"},"content":"*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#68]"},{"lineNumber":39,"author":{"gitID":"a-shakra"},"content":"*** Updated Developer Guide to explain features: https://github.com[#68]"},{"lineNumber":40,"author":{"gitID":"a-shakra"},"content":"** Community:"},{"lineNumber":41,"author":{"gitID":"a-shakra"},"content":"*** PRs reviewed (with non-trivial review comments): https://github.com[#128]"},{"lineNumber":42,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":43,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":44,"author":{"gitID":"a-shakra"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":45,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":46,"author":{"gitID":"a-shakra"},"content":"include::../UserGuide.adoc[tag\u003dlistTask]"},{"lineNumber":47,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":48,"author":{"gitID":"a-shakra"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":49,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":50,"author":{"gitID":"a-shakra"},"content":"include::../DeveloperGuide.adoc[tag\u003dtaskClass]"},{"lineNumber":51,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":52,"author":{"gitID":"a-shakra"},"content":"include::../DeveloperGuide.adoc[tag\u003dlistCommand]"}],"authorContributionMap":{"a-shakra":52}},{"path":"docs/team/ekabuyunglienadi.adoc","lines":[{"lineNumber":1,"author":{"gitID":"yungyung04"},"content":"\u003d Eka Buyung Lienadi - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"yungyung04"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"yungyung04"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":5,"author":{"gitID":"yungyung04"},"content":"\u003d\u003d PROJECT: Development of Address Book Level 4 : Tuition Connect"},{"lineNumber":6,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":7,"author":{"gitID":"yungyung04"},"content":"---"},{"lineNumber":8,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":9,"author":{"gitID":"yungyung04"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":11,"author":{"gitID":"yungyung04"},"content":"TuitionConnect is an integration of address book and task manager optimized to be used by private tuition teacher for managing their busy schedule efficiently and effectively."},{"lineNumber":12,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":13,"author":{"gitID":"yungyung04"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":14,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":15,"author":{"gitID":"yungyung04"},"content":"* *Major enhancement*: added *scheduling features"},{"lineNumber":16,"author":{"gitID":"yungyung04"},"content":"** What it does: allows the users to organize their activities neatly by creating and deleting tasks."},{"lineNumber":17,"author":{"gitID":"yungyung04"},"content":"Also, allows users to browse through their schedule with ease using the find and sort utilities."},{"lineNumber":18,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":19,"author":{"gitID":"yungyung04"},"content":"* *Minor enhancements*"},{"lineNumber":20,"author":{"gitID":"yungyung04"},"content":"** Implemented tutee listing, filtering and sorting features."},{"lineNumber":21,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":22,"author":{"gitID":"yungyung04"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-T11-B1/main/blob/master/collated/functional/yungyung04.md[Functional code]] [https://github.com/CS2103JAN2018-T11-B1/main/blob/master/collated/test/yungyung04.md[Test code]]"},{"lineNumber":23,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":24,"author":{"gitID":"yungyung04"},"content":"* *Other contributions*:"},{"lineNumber":25,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":26,"author":{"gitID":"yungyung04"},"content":"** Project management:"},{"lineNumber":27,"author":{"gitID":"yungyung04"},"content":"*** Managed releases `v1.2` - `v1.4` (3 releases) on GitHub"},{"lineNumber":28,"author":{"gitID":"yungyung04"},"content":"*** Created the team organization in GitHub."},{"lineNumber":29,"author":{"gitID":"yungyung04"},"content":"** Community:"},{"lineNumber":30,"author":{"gitID":"yungyung04"},"content":"*** PRs reviewed (with non-trivial review comments): (https://github.com/CS2103JAN2018-T11-B1/main[#60], https://github.com/CS2103JAN2018-T11-B1/main/pull/42[#42])"},{"lineNumber":31,"author":{"gitID":"yungyung04"},"content":"*** Contributed to forum discussions (examples:  https://github.com/CS2103JAN2018-T11-B1/main/pull/7[#7])"},{"lineNumber":32,"author":{"gitID":"yungyung04"},"content":"** Tools:"},{"lineNumber":33,"author":{"gitID":"yungyung04"},"content":"*** Integrated a new Github plugin (TravisCI) to the team repo"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":39,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":40,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"yungyung04"},"content":"include::../UserGuide.adoc[tag\u003dui_overview]"},{"lineNumber":43,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":44,"author":{"gitID":"yungyung04"},"content":"include::../UserGuide.adoc[tag\u003dconceptintro]"},{"lineNumber":45,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":46,"author":{"gitID":"yungyung04"},"content":"include::../UserGuide.adoc[tag\u003daddtuition]"},{"lineNumber":47,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":48,"author":{"gitID":"yungyung04"},"content":"include::../UserGuide.adoc[tag\u003dsorttask]"},{"lineNumber":49,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":53,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":54,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"yungyung04"},"content":"include::../DeveloperGuide.adoc[tag\u003dclassDiagram]"},{"lineNumber":57,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":58,"author":{"gitID":"yungyung04"},"content":"include::../DeveloperGuide.adoc[tag\u003dstorageDiagram]"},{"lineNumber":59,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":60,"author":{"gitID":"yungyung04"},"content":"include::../DeveloperGuide.adoc[tag\u003dsortpersoncommand]"},{"lineNumber":61,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":62,"author":{"gitID":"yungyung04"},"content":"include::../DeveloperGuide.adoc[tag\u003dnatural]"}],"authorContributionMap":{"yungyung04":48,"-":14}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"ChoChihTun"},"content":"\u003d TuitionConnect (TC) - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"raymond511"},"content":":repoURL: https://github.com/CS2103JAN2018-T11-B1/main"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"ChoChihTun"},"content":"By: `Team MarvelousBook`      Since: `Feb 2018`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"ChoChihTun"},"content":"// tag::introduction[]"},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"yungyung04"},"content":"TuitionConnect (TC) is an integration of a personalised address book, task manager and income tracker for private home tutors. +"},{"lineNumber":22,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":23,"author":{"gitID":"yungyung04"},"content":"Stems from our strong passion in simplifying the life of tutors, TuitionConnect introduces features"},{"lineNumber":24,"author":{"gitID":"yungyung04"},"content":"to aid management of tutee contacts, tuition schedule and income tracking. Moreover, we believe that a thorough connectivity is the"},{"lineNumber":25,"author":{"gitID":"ChoChihTun"},"content":"root of simplicity. Hence, there are also features which support the management of your personal contacts and tasks. +"},{"lineNumber":26,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":27,"author":{"gitID":"ChoChihTun"},"content":"TuitionConnect is primarily for tutors who *prefer to use a desktop app for managing contacts and tasks*."},{"lineNumber":28,"author":{"gitID":"ChoChihTun"},"content":"More importantly, TuitionConnect is *optimized for those who prefer to work with a Command Line Interface*"},{"lineNumber":29,"author":{"gitID":"ChoChihTun"},"content":"(CLI) while still having the benefits of a Graphical User Interface (GUI). +"},{"lineNumber":30,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":31,"author":{"gitID":"ChoChihTun"},"content":"With TuitionConnect\u0027s keyboard shortcuts and productive features, TuitionConnect can get your contact and task management done faster than traditional GUI apps. Interested?"},{"lineNumber":32,"author":{"gitID":"ChoChihTun"},"content":"Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"},{"lineNumber":33,"author":{"gitID":"ChoChihTun"},"content":"// end::introduction[]"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":38,"author":{"gitID":"-"},"content":"+"},{"lineNumber":39,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":40,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":41,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":42,"author":{"gitID":"-"},"content":"+"},{"lineNumber":43,"author":{"gitID":"ChoChihTun"},"content":".  Download the latest `TuitionConnect.jar` link:{https://github.com/CS2103JAN2018-T11-B1/main/releases}/releases[here]."},{"lineNumber":44,"author":{"gitID":"yungyung04"},"content":".  Copy the file to the folder you want to use as the home folder for TuitionConnect."},{"lineNumber":45,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. The GUI should appear in a few seconds."},{"lineNumber":46,"author":{"gitID":"-"},"content":"+"},{"lineNumber":47,"author":{"gitID":"yungyung04"},"content":"// tag::ui_overview[]"},{"lineNumber":48,"author":{"gitID":"yungyung04"},"content":"image::Ui_with_overview.jpg[width\u003d\"650\"]"},{"lineNumber":49,"author":{"gitID":"yungyung04"},"content":"// end::ui_overview[]"},{"lineNumber":50,"author":{"gitID":"ChoChihTun"},"content":"[NOTE]"},{"lineNumber":51,"author":{"gitID":"ChoChihTun"},"content":"If \"license check has failed\" message pops up, simply click \"OK\"."},{"lineNumber":52,"author":{"gitID":"-"},"content":"+"},{"lineNumber":53,"author":{"gitID":"-"},"content":".  Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":54,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":55,"author":{"gitID":"-"},"content":".  Some example commands you can try:"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"* *`list`* : lists all contacts"},{"lineNumber":58,"author":{"gitID":"yungyung04"},"content":"* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the address book."},{"lineNumber":59,"author":{"gitID":"-"},"content":"* **`delete`**`3` : deletes the 3rd contact shown in the current list"},{"lineNumber":60,"author":{"gitID":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."},{"lineNumber":63,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":64,"author":{"gitID":"yungyung04"},"content":"// tag::conceptintro[]"},{"lineNumber":65,"author":{"gitID":"yungyung04"},"content":"\u003d\u003d Concepts Introduction"},{"lineNumber":66,"author":{"gitID":"ChoChihTun"},"content":"* Contact : This refers to both the tutee and person."},{"lineNumber":67,"author":{"gitID":"ChoChihTun"},"content":"* Tutee  : This refers to the students you are teaching. Adding a student as tutee requires specific *tutee details* to be provided."},{"lineNumber":68,"author":{"gitID":"yungyung04"},"content":"         By doing so, it will be easier to organize your contacts using our special features. +"},{"lineNumber":69,"author":{"gitID":"ChoChihTun"},"content":"* Person : Other contacts which are not tutee. +"},{"lineNumber":70,"author":{"gitID":"ChoChihTun"},"content":"* Tutee Details : These are details that are only owned by tutees, which include tutee\u0027s education level, grade, subject and school. +"},{"lineNumber":71,"author":{"gitID":"ChoChihTun"},"content":"* Task : This refers to the activities you want to add into your \u0027to-do-list\u0027. +"},{"lineNumber":72,"author":{"gitID":"ChoChihTun"},"content":"Type of Task: +"},{"lineNumber":73,"author":{"gitID":"ChoChihTun"},"content":". Tuition task: Teaching a specified tutee in contact list. +"},{"lineNumber":74,"author":{"gitID":"ChoChihTun"},"content":". Personal task: Non-tuition activity."},{"lineNumber":75,"author":{"gitID":"ChoChihTun"},"content":"* Address Book : This refers to the list of contacts located on the most left side of the app."},{"lineNumber":76,"author":{"gitID":"yungyung04"},"content":"* Task List / Schedule : these terms are used interchangeably to refer to the list of tasks located in the middle of the app."},{"lineNumber":77,"author":{"gitID":"yungyung04"},"content":"// end::conceptintro[]"},{"lineNumber":78,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":80,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":83,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":86,"author":{"gitID":"-"},"content":"* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":87,"author":{"gitID":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":88,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":89,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"Format: `help`"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a person: `add`"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"Adds a person to the address book +"},{"lineNumber":98,"author":{"gitID":"ChoChihTun"},"content":"Using Command Word: +"},{"lineNumber":99,"author":{"gitID":"ChoChihTun"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"},{"lineNumber":100,"author":{"gitID":"ChoChihTun"},"content":"Using Command Alias: +"},{"lineNumber":101,"author":{"gitID":"ChoChihTun"},"content":"Format: `a n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":104,"author":{"gitID":"-"},"content":"A person can have any number of tags (including 0)"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"},{"lineNumber":109,"author":{"gitID":"-"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`"},{"lineNumber":110,"author":{"gitID":"ChoChihTun"},"content":"* `a n/Dickson ee p/91234567 e/dickson@exmaple.com a/Dickson street, block 456, #02-02`"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"ChoChihTun"},"content":"// tag::addtutee[]"},{"lineNumber":113,"author":{"gitID":"ChoChihTun"},"content":"\u003d\u003d\u003d Adding a tutee: `addtutee`"},{"lineNumber":114,"author":{"gitID":"ChoChihTun"},"content":"Adds a tutee to the address book +"},{"lineNumber":115,"author":{"gitID":"ChoChihTun"},"content":"Using Command Word: +"},{"lineNumber":116,"author":{"gitID":"ChoChihTun"},"content":"Format: `addtutee n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS s/SUBJECT g/GRADE edu/EDUCATION_LEVEL sch/SCHOOL [t/TAG]...`"},{"lineNumber":117,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":118,"author":{"gitID":"ChoChihTun"},"content":"[TIP]"},{"lineNumber":119,"author":{"gitID":"ChoChihTun"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":120,"author":{"gitID":"ChoChihTun"},"content":"* A tutee can have any number of tags (including 0)"},{"lineNumber":121,"author":{"gitID":"ChoChihTun"},"content":"* Special character in grade can be anything since different institution may use different grading system. +"},{"lineNumber":122,"author":{"gitID":"ChoChihTun"},"content":"i.e. B+, B3, B$, B# etc are all valid"},{"lineNumber":123,"author":{"gitID":"ChoChihTun"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":124,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":125,"author":{"gitID":"ChoChihTun"},"content":"[WARNING]"},{"lineNumber":126,"author":{"gitID":"ChoChihTun"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":127,"author":{"gitID":"ChoChihTun"},"content":"* Education level can only be either primary, secondary or junior college (NOT case sensitive) +"},{"lineNumber":128,"author":{"gitID":"ChoChihTun"},"content":"* All details except tag MUST be added"},{"lineNumber":129,"author":{"gitID":"ChoChihTun"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":130,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":131,"author":{"gitID":"ChoChihTun"},"content":"Examples:"},{"lineNumber":132,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":133,"author":{"gitID":"ChoChihTun"},"content":"* `addtutee n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 s/Economics g/B+ edu/junior college sch/Victoria Junior College`"},{"lineNumber":134,"author":{"gitID":"ChoChihTun"},"content":"* `addtutee n/Betsy Crowe s/Mathematics g/C e/betsycrowe@example.com a/Newgate Town p/1234567 t/owesMoney sch/Victoria Institution edu/secondary`"},{"lineNumber":135,"author":{"gitID":"ChoChihTun"},"content":"* `addtutee n/Dickson ee p/91234567 e/dickson@exmaple.com a/Dickson street, block 456, #02-02 s/english g/f9 edu/primary sch/Newgate Primary School`"},{"lineNumber":136,"author":{"gitID":"ChoChihTun"},"content":"// end::addtutee[]"},{"lineNumber":137,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":138,"author":{"gitID":"ChoChihTun"},"content":"\u003d\u003d\u003d Listing all contacts : `list`"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"ChoChihTun"},"content":"Shows a list of all contacts in the address book. +"},{"lineNumber":141,"author":{"gitID":"ChoChihTun"},"content":"Using Command Word: +"},{"lineNumber":142,"author":{"gitID":"ChoChihTun"},"content":"Format: `list` +"},{"lineNumber":143,"author":{"gitID":"ChoChihTun"},"content":"Using Command Alias: +"},{"lineNumber":144,"author":{"gitID":"ChoChihTun"},"content":"Format: `l`"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"yungyung04"},"content":"// tag::listtutee[]"},{"lineNumber":147,"author":{"gitID":"yungyung04"},"content":"\u003d\u003d\u003d Listing all tutees : `listtutee`"},{"lineNumber":148,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":149,"author":{"gitID":"yungyung04"},"content":"Shows a list of all tutees in the address book. +"},{"lineNumber":150,"author":{"gitID":"yungyung04"},"content":"Using Command Word: +"},{"lineNumber":151,"author":{"gitID":"ChoChihTun"},"content":"Format: `listtutee` +"},{"lineNumber":152,"author":{"gitID":"yungyung04"},"content":"// end::listtutee[]"},{"lineNumber":153,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":154,"author":{"gitID":"ChoChihTun"},"content":"// tag::edit[]"},{"lineNumber":155,"author":{"gitID":"ChoChihTun"},"content":"\u003d\u003d\u003d Editing a contact : `edit`"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"ChoChihTun"},"content":"Edits existing contact\u0027s details in the address book. +"},{"lineNumber":158,"author":{"gitID":"ChoChihTun"},"content":"Using Command Word: +"},{"lineNumber":159,"author":{"gitID":"ChoChihTun"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [s/SUBJECT] [s/SUBJECT] [g/GRADE] [edu/EDUCATION_LEVEL] [sch/SCHOOL] [t/TAG]...` +"},{"lineNumber":160,"author":{"gitID":"ChoChihTun"},"content":"Using Comamnd Alias: +"},{"lineNumber":161,"author":{"gitID":"ChoChihTun"},"content":"Format: `e INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [s/SUBJECT] [s/SUBJECT] [g/GRADE] [edu/EDUCATION_LEVEL] [sch/SCHOOL] [t/TAG]...` +"},{"lineNumber":162,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":163,"author":{"gitID":"ChoChihTun"},"content":"[width\u003d\"80%\",cols\u003d\"20%, 60%\",options\u003d\"header\",]"},{"lineNumber":164,"author":{"gitID":"ChoChihTun"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":165,"author":{"gitID":"ChoChihTun"},"content":"|Keyword |Description"},{"lineNumber":166,"author":{"gitID":"ChoChihTun"},"content":"|edit |To call the edit command"},{"lineNumber":167,"author":{"gitID":"ChoChihTun"},"content":"|INDEX |Index number shown in the last person listing. It *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":168,"author":{"gitID":"ChoChihTun"},"content":"|INDEX |The contact at the specified `INDEX` will be edited"},{"lineNumber":169,"author":{"gitID":"ChoChihTun"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"ChoChihTun"},"content":"[NOTE]"},{"lineNumber":172,"author":{"gitID":"ChoChihTun"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":173,"author":{"gitID":"ChoChihTun"},"content":"* \"Tutee\" tag is specific to tutee only and will never be removed."},{"lineNumber":174,"author":{"gitID":"ChoChihTun"},"content":"* Remove all the person\u0027s tags: type `t/` without specifying any tags after it."},{"lineNumber":175,"author":{"gitID":"ChoChihTun"},"content":"* Remove all the tutee\u0027s tags except \"Tutee\" tag: type `t/` without specifying any tags after it OR type `t/tutee` (this includes other variation of case letters for tutee such as \"TUTEE\", \"TuteE\" etc)."},{"lineNumber":176,"author":{"gitID":"ChoChihTun"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":177,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":178,"author":{"gitID":"ChoChihTun"},"content":"[underline]#*Valid Details to edit for each type of contact:*#"},{"lineNumber":179,"author":{"gitID":"ChoChihTun"},"content":"[width\u003d\"80%\",cols\u003d\"40%, 40%\",options\u003d\"header\",]"},{"lineNumber":180,"author":{"gitID":"ChoChihTun"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":181,"author":{"gitID":"ChoChihTun"},"content":"|Person |Tutee"},{"lineNumber":182,"author":{"gitID":"ChoChihTun"},"content":"|NAME |NAME"},{"lineNumber":183,"author":{"gitID":"ChoChihTun"},"content":"|PHONE |PHONE"},{"lineNumber":184,"author":{"gitID":"ChoChihTun"},"content":"|EMAIL |EMAIL"},{"lineNumber":185,"author":{"gitID":"ChoChihTun"},"content":"|ADDRESS |ADDRESS"},{"lineNumber":186,"author":{"gitID":"ChoChihTun"},"content":"| --- |SUBJECT"},{"lineNumber":187,"author":{"gitID":"ChoChihTun"},"content":"| --- |GRADE"},{"lineNumber":188,"author":{"gitID":"ChoChihTun"},"content":"| --- |EDUCATION_LEVEL"},{"lineNumber":189,"author":{"gitID":"ChoChihTun"},"content":"| --- |SCHOOL"},{"lineNumber":190,"author":{"gitID":"ChoChihTun"},"content":"|TAG |TAG"},{"lineNumber":191,"author":{"gitID":"ChoChihTun"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":192,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":193,"author":{"gitID":"ChoChihTun"},"content":"[WARNING]"},{"lineNumber":194,"author":{"gitID":"ChoChihTun"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":195,"author":{"gitID":"ChoChihTun"},"content":"* At least one of the valid optional fields must be provided."},{"lineNumber":196,"author":{"gitID":"ChoChihTun"},"content":"* Existing information will be updated to the new information."},{"lineNumber":197,"author":{"gitID":"ChoChihTun"},"content":"* When editing tags, the existing tags of the contact will be removed (Except \"Tutee\" tag) i.e adding of tags is not cumulative."},{"lineNumber":198,"author":{"gitID":"ChoChihTun"},"content":"* Manual adding of \"Tutee\" tag to a person is not allowed (this includes other variation of case letters for tutee such as \"tutee\", \"TuTeE\" etc)"},{"lineNumber":199,"author":{"gitID":"ChoChihTun"},"content":"* Editing of subject, grade, education level and school is not allowed for person"},{"lineNumber":200,"author":{"gitID":"ChoChihTun"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"* `edit 1 p/91234567 e/johndoe@example.com` +"},{"lineNumber":205,"author":{"gitID":"ChoChihTun"},"content":"Edits the phone number and email address of the 1st contact to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":206,"author":{"gitID":"ChoChihTun"},"content":"* `e 2 n/Betsy Crower sch/JohnDoe Secondary t/` +"},{"lineNumber":207,"author":{"gitID":"ChoChihTun"},"content":"Edits the name of the 2nd contact (a tutee) to be `Betsy Crower`, her school to `JohnDoe Secondary` and clears all existing tags (except \"Tutee\" tag)."},{"lineNumber":208,"author":{"gitID":"ChoChihTun"},"content":"// end::edit[]"},{"lineNumber":209,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":210,"author":{"gitID":"yungyung04"},"content":"// tag::findperson[]"},{"lineNumber":211,"author":{"gitID":"ChoChihTun"},"content":"\u003d\u003d\u003d Locating contacts by category: `findpersonby`"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"ChoChihTun"},"content":"Finds contacts whose specified category contain any of the given keywords. +"},{"lineNumber":214,"author":{"gitID":"ChoChihTun"},"content":"Using Command Word: +"},{"lineNumber":215,"author":{"gitID":"yungyung04"},"content":"Format: `findpersonby CATEGORY KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":216,"author":{"gitID":"ChoChihTun"},"content":"Using Command Alias: +"},{"lineNumber":217,"author":{"gitID":"yungyung04"},"content":"Format: `f CATEGORY KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"****"},{"lineNumber":220,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":221,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":222,"author":{"gitID":"yungyung04"},"content":"* There are 5 categories to pick:"},{"lineNumber":223,"author":{"gitID":"yungyung04"},"content":"** 1. name"},{"lineNumber":224,"author":{"gitID":"yungyung04"},"content":"** 2. edu* (for education level)"},{"lineNumber":225,"author":{"gitID":"yungyung04"},"content":"** 3. grade*"},{"lineNumber":226,"author":{"gitID":"yungyung04"},"content":"** 4. school*"},{"lineNumber":227,"author":{"gitID":"yungyung04"},"content":"** 5. subject*"},{"lineNumber":228,"author":{"gitID":"yungyung04"},"content":"* Categories marked with * are only owned by tutees (tutee details)."},{"lineNumber":229,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":230,"author":{"gitID":"ChoChihTun"},"content":"* Contacts matching at least one keyword will be returned (i.e. `OR` search)."},{"lineNumber":231,"author":{"gitID":"yungyung04"},"content":" e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":232,"author":{"gitID":"-"},"content":"****"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"yungyung04"},"content":"* `findpersonby Name John` +"},{"lineNumber":237,"author":{"gitID":"yungyung04"},"content":"Lists `john` and `John Doe`"},{"lineNumber":238,"author":{"gitID":"yungyung04"},"content":"* `findpersonby name Betsy Tim John` +"},{"lineNumber":239,"author":{"gitID":"ChoChihTun"},"content":"Lists any contact having names `Betsy`, `Tim`, or `John`"},{"lineNumber":240,"author":{"gitID":"yungyung04"},"content":"* `f grade B B+` +"},{"lineNumber":241,"author":{"gitID":"yungyung04"},"content":"Lists all tutee with grade `B` and `B+`"},{"lineNumber":242,"author":{"gitID":"yungyung04"},"content":"// end::findperson[]"},{"lineNumber":243,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":244,"author":{"gitID":"yungyung04"},"content":"// tag::sortperson[]"},{"lineNumber":245,"author":{"gitID":"yungyung04"},"content":"\u003d\u003d\u003d Sorting persons by category: `sortpersonby`"},{"lineNumber":246,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":247,"author":{"gitID":"yungyung04"},"content":"Sorts your displayed contact list according to a specified category in ascending order (lexicographically). +"},{"lineNumber":248,"author":{"gitID":"yungyung04"},"content":"Using Command Word: +"},{"lineNumber":249,"author":{"gitID":"yungyung04"},"content":"Format: `sortpersonby CATEGORY` +"},{"lineNumber":250,"author":{"gitID":"yungyung04"},"content":"Using Command Alias: +"},{"lineNumber":251,"author":{"gitID":"yungyung04"},"content":"Format: `spb CATEGORY` +"},{"lineNumber":252,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":253,"author":{"gitID":"yungyung04"},"content":"****"},{"lineNumber":254,"author":{"gitID":"yungyung04"},"content":"* There are 5 categories to pick:"},{"lineNumber":255,"author":{"gitID":"yungyung04"},"content":"** 1. name"},{"lineNumber":256,"author":{"gitID":"yungyung04"},"content":"** 2. edu*"},{"lineNumber":257,"author":{"gitID":"yungyung04"},"content":"** 3. grade*"},{"lineNumber":258,"author":{"gitID":"yungyung04"},"content":"** 4. school*"},{"lineNumber":259,"author":{"gitID":"yungyung04"},"content":"** 5. subject*"},{"lineNumber":260,"author":{"gitID":"yungyung04"},"content":"* Categories marked with * are only owned by tutees. If one of these is selected, all non-tutees will be displayed"},{"lineNumber":261,"author":{"gitID":"yungyung04"},"content":" last after their names are sorted lexicographically."},{"lineNumber":262,"author":{"gitID":"yungyung04"},"content":"* Sorting category types is case insensitive."},{"lineNumber":263,"author":{"gitID":"yungyung04"},"content":" e.g both `sort name` and `sort Name` works fine."},{"lineNumber":264,"author":{"gitID":"yungyung04"},"content":"* The sorting is case insensitive."},{"lineNumber":265,"author":{"gitID":"yungyung04"},"content":" e.g In a case where `sort name` is writen, `angel\u0027 is diplayed before \u0027Ben\u0027."},{"lineNumber":266,"author":{"gitID":"yungyung04"},"content":"* The displayed contact list will be sorted; not the entire contact list."},{"lineNumber":267,"author":{"gitID":"yungyung04"},"content":"****"},{"lineNumber":268,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":269,"author":{"gitID":"yungyung04"},"content":"Example: +"},{"lineNumber":270,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":271,"author":{"gitID":"yungyung04"},"content":"* `sortpersonby Name` +"},{"lineNumber":272,"author":{"gitID":"yungyung04"},"content":"sorts by name lexicographically."},{"lineNumber":273,"author":{"gitID":"yungyung04"},"content":"// end::sortperson[]"},{"lineNumber":274,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":275,"author":{"gitID":"ChoChihTun"},"content":"\u003d\u003d\u003d Deleting a contact : `delete`"},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"ChoChihTun"},"content":"Deletes the specified contact from the address book. +"},{"lineNumber":278,"author":{"gitID":"ChoChihTun"},"content":"Using Command Word: +"},{"lineNumber":279,"author":{"gitID":"ChoChihTun"},"content":"Format: `delete INDEX` +"},{"lineNumber":280,"author":{"gitID":"ChoChihTun"},"content":"Using Command Alias: +"},{"lineNumber":281,"author":{"gitID":"ChoChihTun"},"content":"Format: `d INDEX`"},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"-"},"content":"****"},{"lineNumber":284,"author":{"gitID":"ChoChihTun"},"content":"* Deletes the contact at the specified `INDEX`."},{"lineNumber":285,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":286,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":287,"author":{"gitID":"-"},"content":"****"},{"lineNumber":288,"author":{"gitID":"-"},"content":""},{"lineNumber":289,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":292,"author":{"gitID":"-"},"content":"`delete 2` +"},{"lineNumber":293,"author":{"gitID":"ChoChihTun"},"content":"Deletes the 2nd contact in the address book."},{"lineNumber":294,"author":{"gitID":"ChoChihTun"},"content":"* `f Betsy` +"},{"lineNumber":295,"author":{"gitID":"ChoChihTun"},"content":"`d 1` +"},{"lineNumber":296,"author":{"gitID":"ChoChihTun"},"content":"Deletes the 1st contact in the results of the `f` command."},{"lineNumber":297,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":298,"author":{"gitID":"yungyung04"},"content":"// tag::addtuition[]"},{"lineNumber":299,"author":{"gitID":"yungyung04"},"content":"\u003d\u003d\u003d Adding a tuition task: `addtuition`"},{"lineNumber":300,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":301,"author":{"gitID":"yungyung04"},"content":"Adds a task to TuitionConnect\u0027s schedule +"},{"lineNumber":302,"author":{"gitID":"yungyung04"},"content":"Using Command Word: +"},{"lineNumber":303,"author":{"gitID":"yungyung04"},"content":"Format: `addtuition TUTEE_INDEX DATE TIME DURATION [DESCRIPTION] +"},{"lineNumber":304,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":305,"author":{"gitID":"yungyung04"},"content":"****"},{"lineNumber":306,"author":{"gitID":"yungyung04"},"content":"*PARAMETERS*"},{"lineNumber":307,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":308,"author":{"gitID":"yungyung04"},"content":"* TUTEE_INDEX"},{"lineNumber":309,"author":{"gitID":"yungyung04"},"content":"** The associated tutee is chosen by specifying a `TUTEE_INDEX`. The index refers to the index number shown in"},{"lineNumber":310,"author":{"gitID":"yungyung04"},"content":"the left side of person listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":311,"author":{"gitID":"yungyung04"},"content":"** The chosen index must be the index of a Tutee (persons who have \u0027Tutee\u0027 tag). Refer to the *addtutee* command guide"},{"lineNumber":312,"author":{"gitID":"yungyung04"},"content":"for more information about Tutee."},{"lineNumber":313,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":314,"author":{"gitID":"yungyung04"},"content":"* DATE"},{"lineNumber":315,"author":{"gitID":"yungyung04"},"content":"** Date refers to the date of the tuition."},{"lineNumber":316,"author":{"gitID":"yungyung04"},"content":"** Date must be written in the format of dd/mm/yyyy"},{"lineNumber":317,"author":{"gitID":"yungyung04"},"content":"*** valid example   : 08/03/2018"},{"lineNumber":318,"author":{"gitID":"yungyung04"},"content":"*** invalid example : 8/3/2018"},{"lineNumber":319,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":320,"author":{"gitID":"yungyung04"},"content":"* TIME"},{"lineNumber":321,"author":{"gitID":"yungyung04"},"content":"** Time refers to the starting time of the tuition."},{"lineNumber":322,"author":{"gitID":"yungyung04"},"content":"** Time must be written in the format of hh:mm (24-hr format)."},{"lineNumber":323,"author":{"gitID":"yungyung04"},"content":"*** valid example   : 12:00"},{"lineNumber":324,"author":{"gitID":"ChoChihTun"},"content":"*** invalid example : 25:00"},{"lineNumber":325,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":326,"author":{"gitID":"yungyung04"},"content":"* DURATION"},{"lineNumber":327,"author":{"gitID":"yungyung04"},"content":"** Duration refers to the duration of the tuition."},{"lineNumber":328,"author":{"gitID":"yungyung04"},"content":"** Duration must be written in the format of XXhXXm"},{"lineNumber":329,"author":{"gitID":"yungyung04"},"content":"*** valid example : 1h30m"},{"lineNumber":330,"author":{"gitID":"yungyung04"},"content":"**** this means that the tuition lasts for 1 *hour* and 30 *minute*."},{"lineNumber":331,"author":{"gitID":"ChoChihTun"},"content":"*** invalid example : 1h30m"},{"lineNumber":332,"author":{"gitID":"ChoChihTun"},"content":"**** the duration in hour cannot have leading zero"},{"lineNumber":333,"author":{"gitID":"yungyung04"},"content":"*** invalid example : 1h60m"},{"lineNumber":334,"author":{"gitID":"yungyung04"},"content":"**** the duration in minute must be a number between 0 and 59."},{"lineNumber":335,"author":{"gitID":"yungyung04"},"content":"*** invalid example : 30m"},{"lineNumber":336,"author":{"gitID":"yungyung04"},"content":"**** a correct duration for a 30 minute tuition is *0h30m*."},{"lineNumber":337,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":338,"author":{"gitID":"yungyung04"},"content":"* DESCRIPTION"},{"lineNumber":339,"author":{"gitID":"yungyung04"},"content":"** Description can be of any format."},{"lineNumber":340,"author":{"gitID":"yungyung04"},"content":"** Leading and trailing whitespaces will be removed."},{"lineNumber":341,"author":{"gitID":"yungyung04"},"content":"** Description is optional. It can be empty."},{"lineNumber":342,"author":{"gitID":"yungyung04"},"content":"****"},{"lineNumber":343,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":344,"author":{"gitID":"yungyung04"},"content":"Examples:"},{"lineNumber":345,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":346,"author":{"gitID":"yungyung04"},"content":"* `addtuition 1 10/05/2018 09:00 1h30m Calculus homework page 24`"},{"lineNumber":347,"author":{"gitID":"yungyung04"},"content":"* `addtuition 1 31/12/2018 16:00 0h30m`"},{"lineNumber":348,"author":{"gitID":"yungyung04"},"content":"// end::addtuition[]"},{"lineNumber":349,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":350,"author":{"gitID":"yungyung04"},"content":"// tag::addtask[]"},{"lineNumber":351,"author":{"gitID":"yungyung04"},"content":"\u003d\u003d\u003d Adding a personal task: `addtask`"},{"lineNumber":352,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":353,"author":{"gitID":"yungyung04"},"content":"Adds a personal task to the TuitionConnect schedule +"},{"lineNumber":354,"author":{"gitID":"yungyung04"},"content":"Using Command Word: +"},{"lineNumber":355,"author":{"gitID":"yungyung04"},"content":"Format: `addtask DATE TIME DURATION [DESCRIPTION]+"},{"lineNumber":356,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":357,"author":{"gitID":"yungyung04"},"content":"****"},{"lineNumber":358,"author":{"gitID":"yungyung04"},"content":"The parameters (DATE, TIME, DURATION AND DESCRIPTION) have the same structure and limitations as explained in *addtask* command guide."},{"lineNumber":359,"author":{"gitID":"yungyung04"},"content":"****"},{"lineNumber":360,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":361,"author":{"gitID":"yungyung04"},"content":"Examples:"},{"lineNumber":362,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":363,"author":{"gitID":"yungyung04"},"content":"* `addtask 10/05/2018 09:00 1h30m Outing with friend`"},{"lineNumber":364,"author":{"gitID":"yungyung04"},"content":"* `addtask 31/12/2018 16:00 0h30m`"},{"lineNumber":365,"author":{"gitID":"yungyung04"},"content":"// end::addtask[]"},{"lineNumber":366,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":367,"author":{"gitID":"yungyung04"},"content":"// tag::listTask[]"},{"lineNumber":368,"author":{"gitID":"yungyung04"},"content":"\u003d\u003d\u003d Listing all tasks : `listtask`"},{"lineNumber":369,"author":{"gitID":"yungyung04"},"content":"Shows a list of all tasks in the task list. +"},{"lineNumber":370,"author":{"gitID":"a-shakra"},"content":"Using Command Word: +"},{"lineNumber":371,"author":{"gitID":"yungyung04"},"content":"Format: `listtask` +"},{"lineNumber":372,"author":{"gitID":"a-shakra"},"content":"Using Command Alias: +"},{"lineNumber":373,"author":{"gitID":"a-shakra"},"content":"Format: `lt` +"},{"lineNumber":374,"author":{"gitID":"yungyung04"},"content":"The purpose of the listtask command is to regenerate +"},{"lineNumber":375,"author":{"gitID":"a-shakra"},"content":"the complete list of tasks for a user in the event that +"},{"lineNumber":376,"author":{"gitID":"a-shakra"},"content":"only a specific set of tasks were displayed."},{"lineNumber":377,"author":{"gitID":"a-shakra"},"content":"// end::listTask[]"},{"lineNumber":378,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":379,"author":{"gitID":"yungyung04"},"content":"// tag::deletetask[]"},{"lineNumber":380,"author":{"gitID":"yungyung04"},"content":"\u003d\u003d\u003d Deleting a task: `deletetask`"},{"lineNumber":381,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":382,"author":{"gitID":"yungyung04"},"content":"Deletes a task from the TuitionConnect schedule +"},{"lineNumber":383,"author":{"gitID":"yungyung04"},"content":"Using Command Word: +"},{"lineNumber":384,"author":{"gitID":"yungyung04"},"content":"Format: `deletetask TASK_INDEX`"},{"lineNumber":385,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":386,"author":{"gitID":"yungyung04"},"content":"** The task is chosen by specifying a `TASK_INDEX`. The index refers to the index number shown on"},{"lineNumber":387,"author":{"gitID":"yungyung04"},"content":"the left side of the schedule list. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":388,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":389,"author":{"gitID":"yungyung04"},"content":"Examples:"},{"lineNumber":390,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":391,"author":{"gitID":"yungyung04"},"content":"* `deletetask 1`"},{"lineNumber":392,"author":{"gitID":"yungyung04"},"content":"// end::deletetask[]"},{"lineNumber":393,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":394,"author":{"gitID":"yungyung04"},"content":"// tag::findtask[]"},{"lineNumber":395,"author":{"gitID":"yungyung04"},"content":"\u003d\u003d\u003d Locating tasks by category: `findtaskby`"},{"lineNumber":396,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":397,"author":{"gitID":"yungyung04"},"content":"Finds tasks which specified category has value within 2 given boundaries (inclusive) or contain any of the given keywords. +"},{"lineNumber":398,"author":{"gitID":"yungyung04"},"content":"The functionality is determined according to the specified FIND_TYPE. +"},{"lineNumber":399,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":400,"author":{"gitID":"yungyung04"},"content":"Using Command Word: +"},{"lineNumber":401,"author":{"gitID":"yungyung04"},"content":"Format: `findtaskby CATEGORY FIND_TYPE KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":402,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":403,"author":{"gitID":"yungyung04"},"content":"****"},{"lineNumber":404,"author":{"gitID":"yungyung04"},"content":"* *PARAMETERS*"},{"lineNumber":405,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":406,"author":{"gitID":"yungyung04"},"content":"* CATEGORY"},{"lineNumber":407,"author":{"gitID":"yungyung04"},"content":"** There are 3 categories available:"},{"lineNumber":408,"author":{"gitID":"yungyung04"},"content":"*** 1. month"},{"lineNumber":409,"author":{"gitID":"yungyung04"},"content":"*** 2. year `(coming in v2.0)`"},{"lineNumber":410,"author":{"gitID":"yungyung04"},"content":"*** 3. duration `(coming in v2.0)`"},{"lineNumber":411,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":412,"author":{"gitID":"yungyung04"},"content":"* FIND_TYPE"},{"lineNumber":413,"author":{"gitID":"yungyung04"},"content":"** Choice of Find Type determines the behaviour of this command and the subsequent parameters."},{"lineNumber":414,"author":{"gitID":"yungyung04"},"content":"** There are 2 choices of Find Type:"},{"lineNumber":415,"author":{"gitID":"yungyung04"},"content":"*** 1. \u0027between\u0027 : returns tasks within the 2 given boundaries (inclusive)."},{"lineNumber":416,"author":{"gitID":"yungyung04"},"content":"*** 2. \u0027namely\u0027 : returns tasks that match the keywords."},{"lineNumber":417,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":418,"author":{"gitID":"yungyung04"},"content":"* KEYWORDS"},{"lineNumber":419,"author":{"gitID":"yungyung04"},"content":"** Keywords given depend on the specified category:"},{"lineNumber":420,"author":{"gitID":"yungyung04"},"content":"*** 1. *month*"},{"lineNumber":421,"author":{"gitID":"yungyung04"},"content":"**** months in either M, MM, MMM or MMMM format. +"},{"lineNumber":422,"author":{"gitID":"yungyung04"},"content":"e.g. \u00271\u0027, \u002701\u0027, \u0027jan\u0027 and \u0027january\u0027 are all acceptable."},{"lineNumber":423,"author":{"gitID":"yungyung04"},"content":"**** several common terms such as \u0027now\u0027, \u0027today\u0027, \u0027this month\u0027, \u0027current month\u0027, \u0027last month\u0027 and \u0027next month\u0027."},{"lineNumber":424,"author":{"gitID":"yungyung04"},"content":"*** 2. *year* to be implemented in v2.0"},{"lineNumber":425,"author":{"gitID":"yungyung04"},"content":"*** 3. *duration* to be implemented in v2.0"},{"lineNumber":426,"author":{"gitID":"yungyung04"},"content":"** The amount of keywords depend on the specified Find Type:"},{"lineNumber":427,"author":{"gitID":"yungyung04"},"content":"*** 1. *between* +"},{"lineNumber":428,"author":{"gitID":"yungyung04"},"content":"Exactly *2 different* keywords must be provided as the boundary values. +"},{"lineNumber":429,"author":{"gitID":"yungyung04"},"content":"[NOTE]"},{"lineNumber":430,"author":{"gitID":"yungyung04"},"content":"common terms that refer to a same time are considered as same keywords. +"},{"lineNumber":431,"author":{"gitID":"yungyung04"},"content":"e.g. `findtaskby month between today this month` is an invalid command."},{"lineNumber":432,"author":{"gitID":"yungyung04"},"content":"*** 2. *namely* +"},{"lineNumber":433,"author":{"gitID":"yungyung04"},"content":"Any amount can be provided. If *0* keyword is given, the displayed schedule will be empty."},{"lineNumber":434,"author":{"gitID":"yungyung04"},"content":"****"},{"lineNumber":435,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":436,"author":{"gitID":"yungyung04"},"content":"Examples:"},{"lineNumber":437,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":438,"author":{"gitID":"yungyung04"},"content":"* `findtaskby month between january current month` +"},{"lineNumber":439,"author":{"gitID":"yungyung04"},"content":"Lists all tasks scheduled from January until the current month."},{"lineNumber":440,"author":{"gitID":"yungyung04"},"content":"* `findtaskby month between November February` +"},{"lineNumber":441,"author":{"gitID":"yungyung04"},"content":"Lists all tasks scheduled on November, December, January and February."},{"lineNumber":442,"author":{"gitID":"yungyung04"},"content":"* `findtaskby month between now last month` +"},{"lineNumber":443,"author":{"gitID":"yungyung04"},"content":"Lists all tasks."},{"lineNumber":444,"author":{"gitID":"yungyung04"},"content":"* `f month namely 2 06 oct"},{"lineNumber":445,"author":{"gitID":"yungyung04"},"content":"Lists all tasks scheduled on February, June and October."},{"lineNumber":446,"author":{"gitID":"yungyung04"},"content":"// end::findtask[]"},{"lineNumber":447,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":448,"author":{"gitID":"yungyung04"},"content":"// tag::sorttask[]"},{"lineNumber":449,"author":{"gitID":"yungyung04"},"content":"\u003d\u003d\u003d Sorting tasks by category: `sorttaskby`"},{"lineNumber":450,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":451,"author":{"gitID":"yungyung04"},"content":"Sorts your displayed task list according to a specified category in ascending order. +"},{"lineNumber":452,"author":{"gitID":"yungyung04"},"content":"Using Command Word: +"},{"lineNumber":453,"author":{"gitID":"yungyung04"},"content":"Format: `sorttaskby CATEGORY` +"},{"lineNumber":454,"author":{"gitID":"yungyung04"},"content":"Using Command Alias: +"},{"lineNumber":455,"author":{"gitID":"yungyung04"},"content":"Format: `stb CATEGORY` +"},{"lineNumber":456,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":457,"author":{"gitID":"yungyung04"},"content":"****"},{"lineNumber":458,"author":{"gitID":"yungyung04"},"content":"* There are 3 categories to pick:"},{"lineNumber":459,"author":{"gitID":"yungyung04"},"content":"** 1. datetime"},{"lineNumber":460,"author":{"gitID":"yungyung04"},"content":"** 2. month"},{"lineNumber":461,"author":{"gitID":"yungyung04"},"content":"** 3. duration [coming in V 2.0]"},{"lineNumber":462,"author":{"gitID":"yungyung04"},"content":"* Sorting category types is case insensitive."},{"lineNumber":463,"author":{"gitID":"yungyung04"},"content":"* Sorting is in increasing order. This means later is placed below the earlier."},{"lineNumber":464,"author":{"gitID":"yungyung04"},"content":" e.g both `sort month` and `sort Month` works fine."},{"lineNumber":465,"author":{"gitID":"yungyung04"},"content":"****"},{"lineNumber":466,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":467,"author":{"gitID":"yungyung04"},"content":"Example: +"},{"lineNumber":468,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":469,"author":{"gitID":"yungyung04"},"content":"* `sorttaskby Month` +"},{"lineNumber":470,"author":{"gitID":"yungyung04"},"content":"sorts tasks by month in increasing order."},{"lineNumber":471,"author":{"gitID":"yungyung04"},"content":"// end::sorttask[]"},{"lineNumber":472,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":473,"author":{"gitID":"ChoChihTun"},"content":"// tag::change[]"},{"lineNumber":474,"author":{"gitID":"ChoChihTun"},"content":"\u003d\u003d\u003d Changing calendar view page time unit: `change`"},{"lineNumber":475,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":476,"author":{"gitID":"ChoChihTun"},"content":"Changes the calendar\u0027s view page into the time unit specified by you."},{"lineNumber":477,"author":{"gitID":"ChoChihTun"},"content":"Using Command Word: +"},{"lineNumber":478,"author":{"gitID":"ChoChihTun"},"content":"Format: `change TIME_UNIT`"},{"lineNumber":479,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":480,"author":{"gitID":"ChoChihTun"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%, 50%\",options\u003d\"header\",]"},{"lineNumber":481,"author":{"gitID":"ChoChihTun"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":482,"author":{"gitID":"ChoChihTun"},"content":"|Time Unit |User input |Description"},{"lineNumber":483,"author":{"gitID":"ChoChihTun"},"content":"|Day |d |View the calendar in day"},{"lineNumber":484,"author":{"gitID":"ChoChihTun"},"content":"|Week |w |View the calendar in week"},{"lineNumber":485,"author":{"gitID":"ChoChihTun"},"content":"|Month |m |View the calendar in month"},{"lineNumber":486,"author":{"gitID":"ChoChihTun"},"content":"|Year |y |View the calendar in year"},{"lineNumber":487,"author":{"gitID":"ChoChihTun"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":488,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":489,"author":{"gitID":"ChoChihTun"},"content":"[NOTE]"},{"lineNumber":490,"author":{"gitID":"ChoChihTun"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":491,"author":{"gitID":"ChoChihTun"},"content":"* Default view page time unit is d."},{"lineNumber":492,"author":{"gitID":"ChoChihTun"},"content":"* Command fails if current view page time unit is same as the user input time unit or user input an unrecognised time unit."},{"lineNumber":493,"author":{"gitID":"ChoChihTun"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":494,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":495,"author":{"gitID":"ChoChihTun"},"content":"Examples:"},{"lineNumber":496,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":497,"author":{"gitID":"ChoChihTun"},"content":"* `change d` (command fails as current calendar view is already in day)"},{"lineNumber":498,"author":{"gitID":"ChoChihTun"},"content":"+"},{"lineNumber":499,"author":{"gitID":"ChoChihTun"},"content":"image::change-d.png[width\u003d\"600\" height\u003d\"400\"]"},{"lineNumber":500,"author":{"gitID":"ChoChihTun"},"content":"+"},{"lineNumber":501,"author":{"gitID":"ChoChihTun"},"content":"* `change w` (changes calendar view to week)"},{"lineNumber":502,"author":{"gitID":"ChoChihTun"},"content":"+"},{"lineNumber":503,"author":{"gitID":"ChoChihTun"},"content":"image::change-w.png[width\u003d\"600\" height\u003d\"400\"]"},{"lineNumber":504,"author":{"gitID":"ChoChihTun"},"content":"+"},{"lineNumber":505,"author":{"gitID":"ChoChihTun"},"content":"* `change m` (changes calendar view to month)"},{"lineNumber":506,"author":{"gitID":"ChoChihTun"},"content":"+"},{"lineNumber":507,"author":{"gitID":"ChoChihTun"},"content":"image::change-m.png[width\u003d\"600\" height\u003d\"400\"]"},{"lineNumber":508,"author":{"gitID":"ChoChihTun"},"content":"+"},{"lineNumber":509,"author":{"gitID":"ChoChihTun"},"content":"* `change y` (changes calendar view to year)"},{"lineNumber":510,"author":{"gitID":"ChoChihTun"},"content":"+"},{"lineNumber":511,"author":{"gitID":"ChoChihTun"},"content":"image::change-y.png[width\u003d\"600\" height\u003d\"400\"]"},{"lineNumber":512,"author":{"gitID":"ChoChihTun"},"content":"+"},{"lineNumber":513,"author":{"gitID":"ChoChihTun"},"content":"[NOTE]"},{"lineNumber":514,"author":{"gitID":"ChoChihTun"},"content":"Year view is unable to display all the months due to third party software constraint."},{"lineNumber":515,"author":{"gitID":"ChoChihTun"},"content":"// end::change[]"},{"lineNumber":516,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":517,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing entered commands : `history`"},{"lineNumber":518,"author":{"gitID":"-"},"content":""},{"lineNumber":519,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":520,"author":{"gitID":"ChoChihTun"},"content":"Using Command Word: +"},{"lineNumber":521,"author":{"gitID":"ChoChihTun"},"content":"Format: `history` +"},{"lineNumber":522,"author":{"gitID":"ChoChihTun"},"content":"Using Command Alias: +"},{"lineNumber":523,"author":{"gitID":"ChoChihTun"},"content":"Format: `h`"},{"lineNumber":524,"author":{"gitID":"-"},"content":""},{"lineNumber":525,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":526,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":527,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":528,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":529,"author":{"gitID":"-"},"content":""},{"lineNumber":530,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":531,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":532,"author":{"gitID":"-"},"content":""},{"lineNumber":533,"author":{"gitID":"yungyung04"},"content":"Restores the address book and the task list to the state before the previous _undoable_ command was executed. +"},{"lineNumber":534,"author":{"gitID":"ChoChihTun"},"content":"Using Command Word: +"},{"lineNumber":535,"author":{"gitID":"-"},"content":"Format: `undo`"},{"lineNumber":536,"author":{"gitID":"ChoChihTun"},"content":"Using Command Alias: +"},{"lineNumber":537,"author":{"gitID":"ChoChihTun"},"content":"Format: `u`"},{"lineNumber":538,"author":{"gitID":"-"},"content":""},{"lineNumber":539,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":540,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":541,"author":{"gitID":"yungyung04"},"content":"Undoable commands: those commands that modify the address book\u0027s and task list\u0027s content (`add`, `addtutee`, `addtask`, `addtuition`, `delete`, `edit` and `clear`)."},{"lineNumber":542,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":543,"author":{"gitID":"-"},"content":""},{"lineNumber":544,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":545,"author":{"gitID":"-"},"content":""},{"lineNumber":546,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":547,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":548,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":549,"author":{"gitID":"-"},"content":""},{"lineNumber":550,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":551,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":552,"author":{"gitID":"ChoChihTun"},"content":"`u` (reverses the `clear` command) +"},{"lineNumber":553,"author":{"gitID":"ChoChihTun"},"content":"`u` (reverses the `delete 1` command) +"},{"lineNumber":554,"author":{"gitID":"-"},"content":""},{"lineNumber":555,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo`"},{"lineNumber":556,"author":{"gitID":"-"},"content":""},{"lineNumber":557,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":558,"author":{"gitID":"ChoChihTun"},"content":"Using Command Word: +"},{"lineNumber":559,"author":{"gitID":"ChoChihTun"},"content":"Format: `redo` +"},{"lineNumber":560,"author":{"gitID":"ChoChihTun"},"content":"Using Command Alias: +"},{"lineNumber":561,"author":{"gitID":"ChoChihTun"},"content":"Format: `r`"},{"lineNumber":562,"author":{"gitID":"-"},"content":""},{"lineNumber":563,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":564,"author":{"gitID":"-"},"content":""},{"lineNumber":565,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":566,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":567,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":568,"author":{"gitID":"-"},"content":""},{"lineNumber":569,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":570,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":571,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":572,"author":{"gitID":"-"},"content":""},{"lineNumber":573,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":574,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":575,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":576,"author":{"gitID":"ChoChihTun"},"content":"`u` (reverses the `delete 1` command) +"},{"lineNumber":577,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":578,"author":{"gitID":"ChoChihTun"},"content":"`r` (reapplies the `clear` command) +"},{"lineNumber":579,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":580,"author":{"gitID":"-"},"content":""},{"lineNumber":581,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Clearing all entries : `clear`"},{"lineNumber":582,"author":{"gitID":"-"},"content":""},{"lineNumber":583,"author":{"gitID":"yungyung04"},"content":"Clears all entries in TuitionConnect. +"},{"lineNumber":584,"author":{"gitID":"ChoChihTun"},"content":"Using Command Word: +"},{"lineNumber":585,"author":{"gitID":"ChoChihTun"},"content":"Format: `clear` +"},{"lineNumber":586,"author":{"gitID":"ChoChihTun"},"content":"Using Command Alias: +"},{"lineNumber":587,"author":{"gitID":"ChoChihTun"},"content":"Format: `c`"},{"lineNumber":588,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":589,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":590,"author":{"gitID":"-"},"content":""},{"lineNumber":591,"author":{"gitID":"-"},"content":"Exits the program. +"},{"lineNumber":592,"author":{"gitID":"-"},"content":"Format: `exit`"},{"lineNumber":593,"author":{"gitID":"-"},"content":""},{"lineNumber":594,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":595,"author":{"gitID":"-"},"content":""},{"lineNumber":596,"author":{"gitID":"yungyung04"},"content":"TuitionConnect data are saved in the hard disk automatically after any command that"},{"lineNumber":597,"author":{"gitID":"ChoChihTun"},"content":" changes the data. +"},{"lineNumber":598,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":599,"author":{"gitID":"yungyung04"},"content":"// tag::proposedfeatures[]"},{"lineNumber":600,"author":{"gitID":"yungyung04"},"content":"\u003d\u003d\u003d View tutee fees `[coming in v2.0]`"},{"lineNumber":601,"author":{"gitID":"ChoChihTun"},"content":"Views the amount that has to be paid by a tutee."},{"lineNumber":602,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":603,"author":{"gitID":"raymond511"},"content":"// tag::encryption[]"},{"lineNumber":604,"author":{"gitID":"raymond511"},"content":"\u003d\u003d\u003d Encrypting data files"},{"lineNumber":605,"author":{"gitID":"raymond511"},"content":"Address book data are automatically encrypted after any command that"},{"lineNumber":606,"author":{"gitID":"raymond511"},"content":"changes the data."},{"lineNumber":607,"author":{"gitID":"raymond511"},"content":""},{"lineNumber":608,"author":{"gitID":"raymond511"},"content":"\u003d\u003d\u003d View tutee fees `[coming in v2.0]"},{"lineNumber":609,"author":{"gitID":"raymond511"},"content":"View the current amount that has to be paid by a tutee."},{"lineNumber":610,"author":{"gitID":"raymond511"},"content":""},{"lineNumber":611,"author":{"gitID":"yungyung04"},"content":"\u003d\u003d\u003d View tuition progress `[coming in v2.0]`"},{"lineNumber":612,"author":{"gitID":"yungyung04"},"content":"Shows the details of tuition provided within several months in the form of a graph."},{"lineNumber":613,"author":{"gitID":"yungyung04"},"content":"// end::proposedfeatures[]"},{"lineNumber":614,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":615,"author":{"gitID":"ChoChihTun"},"content":"// tag::ChoChihTunV2.0[]"},{"lineNumber":616,"author":{"gitID":"ChoChihTun"},"content":"\u003d\u003d\u003d Update tutee fees `[coming in v2.0]`"},{"lineNumber":617,"author":{"gitID":"ChoChihTun"},"content":"Updates the remaining balance of the tuition fees of a specific tutee after he or she has paid."},{"lineNumber":618,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":619,"author":{"gitID":"ChoChihTun"},"content":"\u003d\u003d\u003d Complete task `[coming in v2.0]`"},{"lineNumber":620,"author":{"gitID":"ChoChihTun"},"content":"Marks a task as completed. If the task is tuition, fees will automatically be added to the tutee\u0027s fee balance."},{"lineNumber":621,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":622,"author":{"gitID":"ChoChihTun"},"content":"\u003d\u003d\u003d Edit task `[coming in v2.0]`"},{"lineNumber":623,"author":{"gitID":"ChoChihTun"},"content":"Edits date, time, duration or description of an existing task and reflects the changes on the calendar."},{"lineNumber":624,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":625,"author":{"gitID":"ChoChihTun"},"content":"\u003d\u003d\u003d View contact address on Google map `[coming in v2.0]`"},{"lineNumber":626,"author":{"gitID":"ChoChihTun"},"content":"Views the location of a specific contact\u0027s address on google map and the shortest route from the current location will be displayed."},{"lineNumber":627,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":628,"author":{"gitID":"raymond511"},"content":""},{"lineNumber":629,"author":{"gitID":"ChoChihTun"},"content":"\u003d\u003d\u003d Select a contact or a task `[coming in v2.0]`"},{"lineNumber":630,"author":{"gitID":"ChoChihTun"},"content":"Selects either a contact or a task and a pop up page containing all the relevant information will appear."},{"lineNumber":631,"author":{"gitID":"ChoChihTun"},"content":"// end::ChoChihTunV2.0[]"},{"lineNumber":632,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":633,"author":{"gitID":"raymond511"},"content":""},{"lineNumber":634,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":635,"author":{"gitID":"-"},"content":""},{"lineNumber":636,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":637,"author":{"gitID":"yungyung04"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous TuitionConnect folder."},{"lineNumber":638,"author":{"gitID":"-"},"content":""},{"lineNumber":639,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":640,"author":{"gitID":"-"},"content":""},{"lineNumber":641,"author":{"gitID":"ChoChihTun"},"content":"Using Command Word: +"},{"lineNumber":642,"author":{"gitID":"-"},"content":"* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"},{"lineNumber":643,"author":{"gitID":"ChoChihTun"},"content":"e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague` +"},{"lineNumber":644,"author":{"gitID":"ChoChihTun"},"content":"* *Add Tutee* `addtutee n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS s/SUBJECT g/GRADE edu/EDUCATION_LEVEL sch/SCHOOL [t/TAG]...` +"},{"lineNumber":645,"author":{"gitID":"ChoChihTun"},"content":"e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 s/Mathematics g/A edu/junior college sch/National Junior College t/priority` +"},{"lineNumber":646,"author":{"gitID":"ChoChihTun"},"content":"* *Clear* : `clear` +"},{"lineNumber":647,"author":{"gitID":"yungyung04"},"content":"* *Delete* : `delete PERSON_INDEX` +"},{"lineNumber":648,"author":{"gitID":"ChoChihTun"},"content":"e.g. `delete 3` +"},{"lineNumber":649,"author":{"gitID":"ChoChihTun"},"content":"* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [s/SUBJECT] [s/SUBJECT] [g/GRADE] [edu/EDUCATION_LEVEL] [sch/SCHOOL] [t/TAG]...` +"},{"lineNumber":650,"author":{"gitID":"ChoChihTun"},"content":"e.g. `edit 2 n/James Lee e/jameslee@example.com` +"},{"lineNumber":651,"author":{"gitID":"yungyung04"},"content":"* *Find Person By* : findpersonby CATEGORY KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":652,"author":{"gitID":"yungyung04"},"content":"e.g. `findpersonby name Jake Doe` +"},{"lineNumber":653,"author":{"gitID":"yungyung04"},"content":"* *Sort Person By* : sortpersonby CATEGORY +"},{"lineNumber":654,"author":{"gitID":"yungyung04"},"content":"e.g. `sort grade`"},{"lineNumber":655,"author":{"gitID":"ChoChihTun"},"content":"* *List* : `list` +"},{"lineNumber":656,"author":{"gitID":"yungyung04"},"content":"* *List Tutee* : \u0027listtutee\u0027 +"},{"lineNumber":657,"author":{"gitID":"ChoChihTun"},"content":"* *Help* : `help` +"},{"lineNumber":658,"author":{"gitID":"yungyung04"},"content":"* *Add Tuition* : addtuition TUTEE_INDEX DATE TIME DURATION [DESCRIPTION] +"},{"lineNumber":659,"author":{"gitID":"yungyung04"},"content":"e.g. `addtuition 1 10/05/2018 12:00 1h30m Calculus homework page 24` +"},{"lineNumber":660,"author":{"gitID":"yungyung04"},"content":"* *Add Task* : \u0027add DATE TIME DURATION [DESCRIPTION] +"},{"lineNumber":661,"author":{"gitID":"yungyung04"},"content":"e.g. `addtask 10/05/2018 12:00 1h30m Going out with friends` +"},{"lineNumber":662,"author":{"gitID":"yungyung04"},"content":"* *List Task* : \u0027listtask` +"},{"lineNumber":663,"author":{"gitID":"yungyung04"},"content":"* *Delete Task* : \u0027delete TASK_INDEX` +"},{"lineNumber":664,"author":{"gitID":"yungyung04"},"content":"e.g. `delete 1` +"},{"lineNumber":665,"author":{"gitID":"yungyung04"},"content":"* *Find Task By* : findtaskby CATEGORY FIND_TYPE KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":666,"author":{"gitID":"yungyung04"},"content":"e.g. `findtaskby month between April October` +"},{"lineNumber":667,"author":{"gitID":"yungyung04"},"content":"* *Sort Task By* : sorttaskby CATEGORY +"},{"lineNumber":668,"author":{"gitID":"yungyung04"},"content":"e.g. `sorttaskby datetime` +"},{"lineNumber":669,"author":{"gitID":"ChoChihTun"},"content":"* *Change* : `change TIME_UNIT` +"},{"lineNumber":670,"author":{"gitID":"ChoChihTun"},"content":"e.g. `change w` +"},{"lineNumber":671,"author":{"gitID":"ChoChihTun"},"content":"* *History* : `history` +"},{"lineNumber":672,"author":{"gitID":"ChoChihTun"},"content":"* *Undo* : `undo` +"},{"lineNumber":673,"author":{"gitID":"ChoChihTun"},"content":"* *Redo* : `redo` +"},{"lineNumber":674,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":675,"author":{"gitID":"ChoChihTun"},"content":"Using Command Alias: +"},{"lineNumber":676,"author":{"gitID":"ChoChihTun"},"content":"* *Add* `a n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"},{"lineNumber":677,"author":{"gitID":"ChoChihTun"},"content":"e.g. `a n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague` +"},{"lineNumber":678,"author":{"gitID":"ChoChihTun"},"content":"* *Clear* : `c` +"},{"lineNumber":679,"author":{"gitID":"ChoChihTun"},"content":"* *Delete* : `d INDEX` +"},{"lineNumber":680,"author":{"gitID":"ChoChihTun"},"content":"e.g. `d 3` +"},{"lineNumber":681,"author":{"gitID":"ChoChihTun"},"content":"* *Edit* : `e INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [s/SUBJECT] [s/SUBJECT] [g/GRADE] [edu/EDUCATION_LEVEL] [sch/SCHOOL] [t/TAG]...` +"},{"lineNumber":682,"author":{"gitID":"ChoChihTun"},"content":"e.g. `e 2 n/James Lee e/jameslee@example.com` +"},{"lineNumber":683,"author":{"gitID":"yungyung04"},"content":"* *Find Person By* : f CATEGORY KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":684,"author":{"gitID":"yungyung04"},"content":"e.g. `f name Jake Doe` +"},{"lineNumber":685,"author":{"gitID":"ChoChihTun"},"content":"* *List* : `l` +"},{"lineNumber":686,"author":{"gitID":"yungyung04"},"content":"* *Sort Person By* : `spb CATEGORY` +"},{"lineNumber":687,"author":{"gitID":"yungyung04"},"content":"e.g. `spb grade` +"},{"lineNumber":688,"author":{"gitID":"yungyung04"},"content":"* *ListTask* : `lt` +"},{"lineNumber":689,"author":{"gitID":"yungyung04"},"content":"* *Sort Task By* : `stb CATEGORY` +"},{"lineNumber":690,"author":{"gitID":"yungyung04"},"content":"e.g. `stb datetime` +"},{"lineNumber":691,"author":{"gitID":"ChoChihTun"},"content":"* *Help* : `help` +"},{"lineNumber":692,"author":{"gitID":"ChoChihTun"},"content":"* *History* : `h` +"},{"lineNumber":693,"author":{"gitID":"ChoChihTun"},"content":"* *Undo* : `u` +"},{"lineNumber":694,"author":{"gitID":"ChoChihTun"},"content":"* *Redo* : `r`"},{"lineNumber":695,"author":{"gitID":"ChoChihTun"},"content":""}],"authorContributionMap":{"ChoChihTun":243,"yungyung04":277,"a-shakra":6,"-":158,"raymond511":11}},{"path":"docs/team/chochihtun.adoc","lines":[{"lineNumber":1,"author":{"gitID":"ChoChihTun"},"content":"\u003d Cho Chih Tun - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"ChoChihTun"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"ChoChihTun"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":5,"author":{"gitID":"ChoChihTun"},"content":"\u003d\u003d PROJECT: Tuition Connect (TC)"},{"lineNumber":6,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":7,"author":{"gitID":"ChoChihTun"},"content":"---"},{"lineNumber":8,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":9,"author":{"gitID":"ChoChihTun"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":11,"author":{"gitID":"ChoChihTun"},"content":"TuitionConnect is a desktop address book application used by private tuition teacher."},{"lineNumber":12,"author":{"gitID":"ChoChihTun"},"content":"It aims to help the tutors to manage their busy schedule more efficiently and effectively."},{"lineNumber":13,"author":{"gitID":"ChoChihTun"},"content":"The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 20 kLoC."},{"lineNumber":14,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":15,"author":{"gitID":"ChoChihTun"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":16,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":17,"author":{"gitID":"ChoChihTun"},"content":"* *Major enhancement*: integrated https://github.com/CS2103JAN2018-T11-B1/main/pull/95[*CalendarFX*] into the application"},{"lineNumber":18,"author":{"gitID":"ChoChihTun"},"content":"** What it does: has a calendar that reflects all the task entries and respond to all scheduling commands that the user inputs."},{"lineNumber":19,"author":{"gitID":"ChoChihTun"},"content":"** Credits: [https://github.com/dlemmermann/CalendarFX[CalendarFX]]"},{"lineNumber":20,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":21,"author":{"gitID":"ChoChihTun"},"content":"* *Minor enhancement*:"},{"lineNumber":22,"author":{"gitID":"ChoChihTun"},"content":". Constructed classes such as PersonalTask, TuitionTask, Tutee, Subject, Grade, EducationLevel, School and relevant methods to support task and tutee management commands."},{"lineNumber":23,"author":{"gitID":"ChoChihTun"},"content":". Modified edit command to be able to edit tutee\u0027s details."},{"lineNumber":24,"author":{"gitID":"ChoChihTun"},"content":". Added addtutee command to add a new tutee into TuitionConnect application. https://github.com/CS2103JAN2018-T11-B1/main/pull/62[#62]"},{"lineNumber":25,"author":{"gitID":"ChoChihTun"},"content":". Drafted a TuitionConnect UI theme and revamped the layout of the UI."},{"lineNumber":26,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":27,"author":{"gitID":"ChoChihTun"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-T11-B1/main/blob/master/collated/functional/ChoChihTun.md[Functional code]] [https://github.com/CS2103JAN2018-T11-B1/main/blob/master/collated/test/ChoChihTun.md[Test code]]"},{"lineNumber":28,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":29,"author":{"gitID":"ChoChihTun"},"content":"* *Other contributions*:"},{"lineNumber":30,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":31,"author":{"gitID":"ChoChihTun"},"content":"*** Drafted and managed user guide in developer guide and on GitHub: https://github.com/CS2103JAN2018-T11-B1/main/pull/106[#106]"},{"lineNumber":32,"author":{"gitID":"ChoChihTun"},"content":"*** Responsible for issues and milestones on GitHub"},{"lineNumber":33,"author":{"gitID":"ChoChihTun"},"content":"*** Set up auto publishing of documentation on GitHub"},{"lineNumber":34,"author":{"gitID":"ChoChihTun"},"content":"*** Reported several bugs for other teams in class: (Example: [Endless Loop]https://github.com/CS2103JAN2018-W10-B3/main/issues/112)"},{"lineNumber":35,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":36,"author":{"gitID":"ChoChihTun"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":37,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":38,"author":{"gitID":"ChoChihTun"},"content":"include::../UserGuide.adoc[tag\u003dintroduction]"},{"lineNumber":39,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":40,"author":{"gitID":"ChoChihTun"},"content":"include::../UserGuide.adoc[tag\u003daddtutee]"},{"lineNumber":41,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":42,"author":{"gitID":"ChoChihTun"},"content":"include::../UserGuide.adoc[tag\u003dedit]"},{"lineNumber":43,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":44,"author":{"gitID":"ChoChihTun"},"content":"include::../UserGuide.adoc[tag\u003dchange]"},{"lineNumber":45,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":46,"author":{"gitID":"ChoChihTun"},"content":"include::../UserGuide.adoc[tag\u003dChoChihTunV2.0]"},{"lineNumber":47,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":48,"author":{"gitID":"ChoChihTun"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":49,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":50,"author":{"gitID":"ChoChihTun"},"content":"include::../DeveloperGuide.adoc[tag\u003daddtutee]"}],"authorContributionMap":{"ChoChihTun":50}},{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"ChoChihTun"},"content":"TuitionConnect was developed by the MarvelousBook team. +"},{"lineNumber":7,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"raymond511"},"content":"\u003d\u003d\u003d Eka Buyung Lienadi"},{"lineNumber":13,"author":{"gitID":"yungyung04"},"content":"image::yungyung04.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":14,"author":{"gitID":"yungyung04"},"content":"{empty}[http://github.com/yungyung04[github]] [\u003c\u003cekabuyunglienadi#, portfolio\u003e\u003e]"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"Role: Team Lead +"},{"lineNumber":17,"author":{"gitID":"ChoChihTun"},"content":"Responsibilities: Storage + Scheduling and Tracking"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"ChoChihTun"},"content":"\u003d\u003d\u003d Cho Chih Tun"},{"lineNumber":22,"author":{"gitID":"ChoChihTun"},"content":"image::chochihtun.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":23,"author":{"gitID":"ChoChihTun"},"content":"{empty}[http://github.com/ChoChihTun[github]] [\u003c\u003cchochihtun#, portfolio\u003e\u003e]"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":26,"author":{"gitID":"ChoChihTun"},"content":"Responsibilities: UI + Code Quality"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"raymond511"},"content":"\u003d\u003d\u003d Raymond Zheng"},{"lineNumber":31,"author":{"gitID":"ChoChihTun"},"content":"image::raymond511.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":32,"author":{"gitID":"ChoChihTun"},"content":"{empty}[http://github.com/raymond511[github]] [\u003c\u003craymond#, portfolio\u003e\u003e]"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":35,"author":{"gitID":"ChoChihTun"},"content":"Responsibilities: Model + Testing"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"a-shakra"},"content":"\u003d\u003d\u003d Anas Shakra"},{"lineNumber":40,"author":{"gitID":"a-shakra"},"content":"image::a-shakra.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":41,"author":{"gitID":"a-shakra"},"content":"{empty}[http://github.com/a-shakra[github]] [\u003c\u003cashakra#, portfolio\u003e\u003e]"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":44,"author":{"gitID":"ChoChihTun"},"content":"Responsibilities: Logic + Integration"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"}],"authorContributionMap":{"ChoChihTun":11,"yungyung04":2,"a-shakra":3,"-":28,"raymond511":2}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"raymond511"},"content":"\u003d TuitionConnect (TC)"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"ChoChihTun"},"content":"https://travis-ci.org/CS2103JAN2018-T11-B1/main[image:https://travis-ci.org/se-edu/addressbook-level4.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":5,"author":{"gitID":"raymond511"},"content":"https://coveralls.io/github/CS2103JAN2018-T11-B1/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-T11-B1/main/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":6,"author":{"gitID":"raymond511"},"content":"https://www.codacy.com/app/raymond511/main?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dCS2103JAN2018-T11-B1/main\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/33b29d9ef2d3479c9b6bce03289421b1[Codacy Badge]]"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"ChoChihTun"},"content":"ifdef::env-github[]"},{"lineNumber":9,"author":{"gitID":"ChoChihTun"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":10,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"ChoChihTun"},"content":"ifndef::env-github[]"},{"lineNumber":13,"author":{"gitID":"ChoChihTun"},"content":"image::images/Ui.png[width\u003d\"600\"]"},{"lineNumber":14,"author":{"gitID":"ChoChihTun"},"content":"endif::[]"},{"lineNumber":15,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":16,"author":{"gitID":"raymond511"},"content":"* This is a desktop application for private tutors. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":17,"author":{"gitID":"raymond511"},"content":"* For Tutors:"},{"lineNumber":18,"author":{"gitID":"raymond511"},"content":". Provides easy management of task with the aid of a schedule."},{"lineNumber":19,"author":{"gitID":"raymond511"},"content":". Has a calendar that makes viewing of task easier."},{"lineNumber":20,"author":{"gitID":"raymond511"},"content":". Able to add, delete, edit any tuition or personal task into the schedule."},{"lineNumber":21,"author":{"gitID":"raymond511"},"content":". Easily sort and group students by certain information."},{"lineNumber":22,"author":{"gitID":"raymond511"},"content":". Has a log book that summarises the week for you."},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":27,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":28,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":29,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"raymond511"},"content":"* Some parts of this application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":34,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":35,"author":{"gitID":"ChoChihTun"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4], https://github.com/dlemmermann/CalendarFX[CalendarFX]"},{"lineNumber":36,"author":{"gitID":"ChoChihTun"},"content":"* This application is a morphed of the AddressBook-Level4 project created by SE-EDU initiative at https://github.com/se-edu/"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"ChoChihTun":9,"raymond511":11,"-":18}},{"path":"src/test/java/systemtests/SampleDataTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class SampleDataTest extends AddressBookSystemTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Returns a non-existent file location to force test app to load sample data."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        String filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        deleteFileIfExists(filePath);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Deletes the file at {@code filePath} if it exists."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private void deleteFileIfExists(String filePath) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            Files.deleteIfExists(Paths.get(filePath));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new AssertionError(ioe);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void addressBook_dataFileDoesNotExist_loadSampleData() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        Person[] expectedList \u003d SampleDataUtil.getSamplePersons();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedList);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"a-shakra":1,"-":51}},{"path":"docs/team/raymond511.adoc","lines":[{"lineNumber":1,"author":{"gitID":"raymond511"},"content":"\u003d Raymond Zheng - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"a-shakra"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"a-shakra"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":5,"author":{"gitID":"a-shakra"},"content":"\u003d\u003d PROJECT: Tuition Connect (TC)"},{"lineNumber":6,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":7,"author":{"gitID":"a-shakra"},"content":"---"},{"lineNumber":8,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":9,"author":{"gitID":"a-shakra"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":11,"author":{"gitID":"a-shakra"},"content":"TuitionConnect is a desktop address book application used by private tuition teacher. +"},{"lineNumber":12,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":13,"author":{"gitID":"a-shakra"},"content":"TuitionConnect aims to help the tutors to manage their busy schedule more efficiently and effectively. +"},{"lineNumber":14,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":15,"author":{"gitID":"a-shakra"},"content":"TuitionConnect has many functionality catered to the tutors - adding and deleting a tutee, creating a schedule, rescheduling and many more. +"},{"lineNumber":16,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":17,"author":{"gitID":"a-shakra"},"content":"The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 20 kLoC."},{"lineNumber":18,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":19,"author":{"gitID":"a-shakra"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":20,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":21,"author":{"gitID":"raymond511"},"content":"* *Major enhancement*: Encryption"},{"lineNumber":22,"author":{"gitID":"raymond511"},"content":"** What it does: The addressbook application is now able to automatically encrypt any changes made to the address book."},{"lineNumber":23,"author":{"gitID":"raymond511"},"content":"* *Minor enhancement*: The addressbook application is now able to automatically backup and saves any changes made."},{"lineNumber":24,"author":{"gitID":"raymond511"},"content":""},{"lineNumber":25,"author":{"gitID":"raymond511"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-T11-B1/main/blob/master/collated/functional/raymond511.md[Functional code]] [https://github.com/CS2103JAN2018-T11-B1/main/blob/master/collated/test/raymond511.md[Test code]]"},{"lineNumber":26,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":27,"author":{"gitID":"a-shakra"},"content":"* *Other contributions*:"},{"lineNumber":28,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":29,"author":{"gitID":"a-shakra"},"content":"** Project management:"},{"lineNumber":30,"author":{"gitID":"a-shakra"},"content":"*** Managed releases `v1.2` - `v1.4` (3 releases) on GitHub"},{"lineNumber":31,"author":{"gitID":"a-shakra"},"content":"** Enhancements to existing features:"},{"lineNumber":32,"author":{"gitID":"raymond511"},"content":"** Documentation:"},{"lineNumber":33,"author":{"gitID":"raymond511"},"content":"*** Updated existing contents of the User Guide to explain encryption."},{"lineNumber":34,"author":{"gitID":"raymond511"},"content":""},{"lineNumber":35,"author":{"gitID":"raymond511"},"content":""},{"lineNumber":36,"author":{"gitID":"raymond511"},"content":""},{"lineNumber":37,"author":{"gitID":"raymond511"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":38,"author":{"gitID":"raymond511"},"content":""},{"lineNumber":39,"author":{"gitID":"raymond511"},"content":"include::../UserGuide.adoc[tag\u003dencryption]"}],"authorContributionMap":{"a-shakra":25,"raymond511":14}},{"path":"src/test/java/systemtests/SystemTestSetupHelper.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.concurrent.TimeoutException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.testfx.api.FxToolkit;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Contains helper methods that system tests require."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class SystemTestSetupHelper {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Sets up a new {@code TestApp} and returns it."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public TestApp setupApplication(Supplier\u003cReadOnlyAddressBook\u003e addressBook, String saveFileLocation) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":25,"author":{"gitID":"yungyung04"},"content":"            FxToolkit.registerStage(Stage::new);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(addressBook, saveFileLocation));"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Application takes too long to set up.\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return testApp;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Initializes TestFX."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static void initialize() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            FxToolkit.registerPrimaryStage();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            FxToolkit.hideStage();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        } catch (TimeoutException e) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new AssertionError(e);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public MainWindowHandle setupMainWindowHandle() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            FxToolkit.setupStage((stage) -\u003e {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                mainWindowHandle \u003d new MainWindowHandle(stage);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                mainWindowHandle.focus();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            });"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            FxToolkit.showStage();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Stage takes too long to set up.\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Tears down existing stages."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void tearDownStage() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            FxToolkit.cleanupStages();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Stage takes too long to tear down.\");"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yungyung04":1,"-":72}},{"path":"src/test/java/systemtests/ClearCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":4,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class ClearCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void clear() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        final Model defaultModel \u003d getModel();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"},{"lineNumber":21,"author":{"gitID":"-"},"content":"         * spaces -\u003e cleared"},{"lineNumber":22,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        /* Case: undo clearing address book -\u003e original address book restored */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        String command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command,  expectedResultMessage, defaultModel);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        /* Case: redo clearing address book -\u003e cleared */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before clearing -\u003e entire address book cleared */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        /* Case: clear empty address book -\u003e cleared */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"ChoChihTun"},"content":"    public void clearAlias() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        final Model defaultModel \u003d getModel();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"},{"lineNumber":57,"author":{"gitID":"-"},"content":"         * spaces -\u003e cleared"},{"lineNumber":58,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":59,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_ALIAS + \" ab12   \");"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        /* Case: undo clearing address book -\u003e original address book restored */"},{"lineNumber":63,"author":{"gitID":"ChoChihTun"},"content":"        String command \u003d UndoCommand.COMMAND_ALIAS;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command,  expectedResultMessage, defaultModel);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        /* Case: redo clearing address book -\u003e cleared */"},{"lineNumber":69,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d RedoCommand.COMMAND_ALIAS;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before clearing -\u003e entire address book cleared */"},{"lineNumber":75,"author":{"gitID":"ChoChihTun"},"content":"        executeCommand(UndoCommand.COMMAND_ALIAS); // restores the original address book"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":77,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_ALIAS);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        /* Case: clear empty address book -\u003e cleared */"},{"lineNumber":81,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_ALIAS);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * @see ClearCommandSystemTest#assertCommandSuccess(String)"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yungyung04":1,"ChoChihTun":8,"-":121}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":29,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalPersons.ALICE;"},{"lineNumber":30,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalPersons.AMY;"},{"lineNumber":31,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalPersons.BOB;"},{"lineNumber":32,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalPersons.HOON;"},{"lineNumber":33,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalPersons.IDA;"},{"lineNumber":34,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"ChoChihTun"},"content":"    public void add() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":62,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":63,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Person toAdd \u003d AMY;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":66,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except phone -\u003e added */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except email -\u003e added */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except address -\u003e added */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":103,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_BOB"},{"lineNumber":105,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        /* Case: add a person with tags, command with parameters in random order -\u003e added */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        /* Case: add a person, missing tags -\u003e added */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person -\u003e rejected */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person except with different tags -\u003e rejected */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        // AddressBook#addPerson(Person)"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        /* Case: missing address -\u003e rejected */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY;"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC;"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":178,"author":{"gitID":"-"},"content":"                + INVALID_TAG_DESC;"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":183,"author":{"gitID":"ChoChihTun"},"content":"    public void addAlias() throws Exception {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":190,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":191,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        Person toAdd \u003d AMY;"},{"lineNumber":193,"author":{"gitID":"ChoChihTun"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_ALIAS + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":194,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":198,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d UndoCommand.COMMAND_ALIAS;"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":203,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d RedoCommand.COMMAND_ALIAS;"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":210,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":211,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":212,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except phone -\u003e added */"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":217,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":218,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":219,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except email -\u003e added */"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":224,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":225,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":226,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except address -\u003e added */"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":231,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":232,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_BOB"},{"lineNumber":233,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"        /* Case: add a person with tags, command with parameters in random order -\u003e added */"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":242,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"},{"lineNumber":243,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"        /* Case: add a person, missing tags -\u003e added */"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person -\u003e rejected */"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON);"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person except with different tags -\u003e rejected */"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        // AddressBook#addPerson(Person)"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":269,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":273,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":277,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"        /* Case: missing address -\u003e rejected */"},{"lineNumber":281,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":286,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":289,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":291,"author":{"gitID":"-"},"content":""},{"lineNumber":292,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":293,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":294,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":297,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY;"},{"lineNumber":298,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":301,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC;"},{"lineNumber":302,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":305,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d AddCommand.COMMAND_ALIAS + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":306,"author":{"gitID":"-"},"content":"                + INVALID_TAG_DESC;"},{"lineNumber":307,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":308,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":309,"author":{"gitID":"-"},"content":""},{"lineNumber":310,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":311,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":312,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":313,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":314,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":315,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":316,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":317,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":318,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":319,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":320,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":321,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":322,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":323,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":324,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Person toAdd) {"},{"lineNumber":325,"author":{"gitID":"-"},"content":"        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":326,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":327,"author":{"gitID":"-"},"content":""},{"lineNumber":328,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":329,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"},{"lineNumber":330,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":331,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Person)"},{"lineNumber":332,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":333,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Person toAdd) {"},{"lineNumber":334,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":335,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":336,"author":{"gitID":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":337,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":338,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":339,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":340,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":343,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":344,"author":{"gitID":"-"},"content":""},{"lineNumber":345,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":346,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"},{"lineNumber":347,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":348,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":349,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":350,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":351,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"},{"lineNumber":352,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":353,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":354,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":355,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":356,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":357,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":358,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":359,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":360,"author":{"gitID":"-"},"content":""},{"lineNumber":361,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":362,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":363,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":364,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":365,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":366,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":367,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":368,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":369,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":370,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":371,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":372,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":373,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":374,"author":{"gitID":"-"},"content":""},{"lineNumber":375,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":376,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":377,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":378,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":379,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":380,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":381,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yungyung04":6,"ChoChihTun":21,"-":354}},{"path":"src/test/java/systemtests/DeleteCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getLastIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getMidIndex;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getPerson;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":11,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class DeleteCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void delete() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_PERSON.getOneBased() + \"       \";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        Person deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        /* Case: delete the last person in the list -\u003e deleted */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertCommandSuccess(lastPersonIndex);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /* Case: undo deleting the last person in the list -\u003e last person restored */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        removePerson(modelBeforeDeletingLast, lastPersonIndex);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: delete the middle person in the list -\u003e deleted */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Index middlePersonIndex \u003d getMidIndex(getModel());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCommandSuccess(middlePersonIndex);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertCommandSuccess(index);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person list"},{"lineNumber":69,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":70,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":88,"author":{"gitID":"-"},"content":"                getModel().getAddressBook().getPersonList().size() + 1);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"ChoChihTun"},"content":"    public void deleteAlias() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":108,"author":{"gitID":"ChoChihTun"},"content":"        String command \u003d \"     \" + DeleteCommand.COMMAND_ALIAS + \"      \""},{"lineNumber":109,"author":{"gitID":"ChoChihTun"},"content":"                       + INDEX_FIRST_PERSON.getOneBased() + \"       \";"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Person deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        /* Case: delete the last person in the list -\u003e deleted */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertCommandSuccess(lastPersonIndex);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        /* Case: undo deleting the last person in the list -\u003e last person restored */"},{"lineNumber":120,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d UndoCommand.COMMAND_ALIAS;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"},{"lineNumber":125,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d RedoCommand.COMMAND_ALIAS;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        removePerson(modelBeforeDeletingLast, lastPersonIndex);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        /* Case: delete the middle person in the list -\u003e deleted */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        Index middlePersonIndex \u003d getMidIndex(getModel());"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertCommandSuccess(middlePersonIndex);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertCommandSuccess(index);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person list"},{"lineNumber":143,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":144,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":147,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d DeleteCommand.COMMAND_ALIAS + \" \" + invalidIndex;"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":153,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d DeleteCommand.COMMAND_ALIAS + \" 0\";"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":157,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d DeleteCommand.COMMAND_ALIAS + \" -1\";"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":162,"author":{"gitID":"-"},"content":"                getModel().getAddressBook().getPersonList().size() + 1);"},{"lineNumber":163,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d DeleteCommand.COMMAND_ALIAS + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":167,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_ALIAS + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":170,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_ALIAS + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * Removes the {@code Person} at the specified {@code index} in {@code model}\u0027s address book."},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * @return the removed person"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    private Person removePerson(Model model, Index index) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        Person targetPerson \u003d getPerson(model, index);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            model.deletePerson(targetPerson);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"targetPerson is retrieved from model.\");"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        return targetPerson;"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * Deletes the person at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        Person deletedPerson \u003d removePerson(expectedModel, toDelete);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"        assertCommandSuccess("},{"lineNumber":201,"author":{"gitID":"ChoChihTun"},"content":"                DeleteCommand.COMMAND_ALIAS + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":225,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":227,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":234,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":248,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yungyung04":1,"ChoChihTun":13,"-":247}},{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":21,"author":{"gitID":"ChoChihTun"},"content":"import guitests.guihandles.CalendarPanelHandle;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":32,"author":{"gitID":"yungyung04"},"content":"import seedu.address.logic.commands.FindPersonCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":37,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.tutee.Tutee;"},{"lineNumber":38,"author":{"gitID":"yungyung04"},"content":"import seedu.address.testutil.typicaladdressbook.TypicalAddressBookCompiler;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":42,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":43,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":44,"author":{"gitID":"-"},"content":" */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":69,"author":{"gitID":"ChoChihTun"},"content":"        assertStartingCalendarViewPageIsCorrect();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":82,"author":{"gitID":"yungyung04"},"content":"        return TypicalAddressBookCompiler.getTypicalAddressBook1();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"ChoChihTun"},"content":"    public CalendarPanelHandle getCalendarPanel() {"},{"lineNumber":109,"author":{"gitID":"ChoChihTun"},"content":"        return mainWindowHandle.getCalendarPanel();"},{"lineNumber":110,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":128,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":139,"author":{"gitID":"yungyung04"},"content":"        assertEquals(getModel().getAddressBook().getPersonList().size(),"},{"lineNumber":140,"author":{"gitID":"yungyung04"},"content":"                getModel().getFilteredPersonList().size());"},{"lineNumber":141,"author":{"gitID":"ChoChihTun"},"content":"        executeCommand(ListCommand.COMMAND_ALIAS);"},{"lineNumber":142,"author":{"gitID":"yungyung04"},"content":"        assertEquals(getModel().getAddressBook().getPersonList().size(),"},{"lineNumber":143,"author":{"gitID":"yungyung04"},"content":"                getModel().getFilteredPersonList().size());"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":148,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":150,"author":{"gitID":"yungyung04"},"content":"        executeCommand(FindPersonCommand.COMMAND_WORD + \" \" + CATEGORY_NAME + \" \" + keyword);"},{"lineNumber":151,"author":{"gitID":"yungyung04"},"content":"        assertTrue(getModel().getFilteredPersonList().size()"},{"lineNumber":152,"author":{"gitID":"yungyung04"},"content":"                \u003c getModel().getAddressBook().getPersonList().size());"},{"lineNumber":153,"author":{"gitID":"yungyung04"},"content":"        executeCommand(FindPersonCommand.COMMAND_ALIAS + \" \" + CATEGORY_NAME + \" \" + keyword);"},{"lineNumber":154,"author":{"gitID":"yungyung04"},"content":"        assertTrue(getModel().getFilteredPersonList().size()"},{"lineNumber":155,"author":{"gitID":"yungyung04"},"content":"                \u003c getModel().getAddressBook().getPersonList().size());"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Deletes all persons in the address book."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    protected void deleteAllPersons() {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertEquals(0, getModel().getAddressBook().getPersonList().size());"},{"lineNumber":164,"author":{"gitID":"ChoChihTun"},"content":"        executeCommand(ClearCommand.COMMAND_ALIAS);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertEquals(0, getModel().getAddressBook().getPersonList().size());"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":170,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":172,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":179,"author":{"gitID":"yungyung04"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":185,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * of the previously selected person."},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":221,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":228,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":235,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":245,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":256,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":259,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":260,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":261,"author":{"gitID":"yungyung04"},"content":"            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":262,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":263,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":265,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":267,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"ChoChihTun"},"content":"    //@@author ChoChihTun"},{"lineNumber":270,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":271,"author":{"gitID":"ChoChihTun"},"content":"     * Asserts that the starting calendar view of the application is correct."},{"lineNumber":272,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":273,"author":{"gitID":"ChoChihTun"},"content":"    private void assertStartingCalendarViewPageIsCorrect() {"},{"lineNumber":274,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(getCalendarPanel().getDefaultCalendarViewPage(), getCalendarPanel().getCurrentCalendarViewPage());"},{"lineNumber":275,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":276,"author":{"gitID":"ChoChihTun"},"content":"    //@@author"},{"lineNumber":277,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":279,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":280,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":281,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":283,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":284,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":285,"author":{"gitID":"yungyung04"},"content":"    //@@author yungyung04"},{"lineNumber":286,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":287,"author":{"gitID":"yungyung04"},"content":"     * Adds a tutee into the current model and expected model."},{"lineNumber":288,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":289,"author":{"gitID":"yungyung04"},"content":"    protected void addTutee(String command, Tutee tutee, Model expectedModel) {"},{"lineNumber":290,"author":{"gitID":"yungyung04"},"content":"        try {"},{"lineNumber":291,"author":{"gitID":"yungyung04"},"content":"            expectedModel.addPerson(tutee);"},{"lineNumber":292,"author":{"gitID":"yungyung04"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":293,"author":{"gitID":"yungyung04"},"content":"            System.out.println(\"a tutee with the same name exists in the expected model\");"},{"lineNumber":294,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":295,"author":{"gitID":"yungyung04"},"content":"        executeCommand(command);"},{"lineNumber":296,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":297,"author":{"gitID":"yungyung04"},"content":"    //@@author"},{"lineNumber":298,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yungyung04":31,"ChoChihTun":17,"-":250}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"ChoChihTun"},"content":"\u003d TuitionConnect (TC) - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"raymond511"},"content":":repoURL: https://github.com/CS2103JAN2018-T11-B1/main"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"ChoChihTun"},"content":"By: `Team MarvelousBook`      Since: `Feb 2018`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":22,"author":{"gitID":"-"},"content":"+"},{"lineNumber":23,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":24,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":25,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":26,"author":{"gitID":"-"},"content":"+"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":31,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":32,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":38,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":39,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":40,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":41,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":42,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":43,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":44,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":45,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":46,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":47,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":52,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":61,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":62,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":65,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level4` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level4`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":80,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":85,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":92,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":97,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":100,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":105,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":110,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":115,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":120,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":121,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":122,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":127,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":132,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":135,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":140,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":143,"author":{"gitID":"ChoChihTun"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the \u003c\u003caddress-book,Address Book\u003e\u003e data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":148,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":151,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":156,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":159,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"yungyung04"},"content":"*API* : link:{https://github.com/CS2103JAN2018-T11-B1/main}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":170,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":171,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":174,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":177,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":178,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":181,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":184,"author":{"gitID":"yungyung04"},"content":"link:{https://github.com/CS2103JAN2018-T11-B1/main}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":187,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":188,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."},{"lineNumber":189,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":194,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"yungyung04"},"content":"// tag::classDiagram[]"},{"lineNumber":197,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":198,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":202,"author":{"gitID":"yungyung04"},"content":"image::ModelClassDiagram2.png[width\u003d\"800\"]"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"yungyung04"},"content":"*API* : link:{https://github.com/CS2103JAN2018-T11-B1/main}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":209,"author":{"gitID":"-"},"content":"* stores the Address Book data."},{"lineNumber":210,"author":{"gitID":"yungyung04"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` and `ObservableList\u003cTask\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":211,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":212,"author":{"gitID":"yungyung04"},"content":"// end::classDiagram[]"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"yungyung04"},"content":"// tag::storageDiagram[]"},{"lineNumber":215,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":216,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":219,"author":{"gitID":"yungyung04"},"content":"image::StorageClassDiagram2.png[width\u003d\"800\"]"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"yungyung04"},"content":"*API* : link:{https://github.com/CS2103JAN2018-T11-B1/main}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":226,"author":{"gitID":"-"},"content":"* can save the Address Book data in xml format and read it back."},{"lineNumber":227,"author":{"gitID":"yungyung04"},"content":"// end::storageDiagram[]"},{"lineNumber":228,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":229,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"ChoChihTun"},"content":"// tag::addtutee[]"},{"lineNumber":238,"author":{"gitID":"ChoChihTun"},"content":"\u003d\u003d\u003d Add tutee Command"},{"lineNumber":239,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"ChoChihTun"},"content":"\u003d\u003d\u003d\u003d\u003d Reason for Implementation"},{"lineNumber":242,"author":{"gitID":"ChoChihTun"},"content":"As the user of this application is a private tutor, he or she will need to add the \u003c\u003ctutee,tutees\u0027\u003e\u003e contact details."},{"lineNumber":243,"author":{"gitID":"ChoChihTun"},"content":"Since a tutee contains more details specific to them compared to a person, tutee contacts should not be mixed with the \u003c\u003cperson, person\u003e\u003e contacts so that all the contacts are organized and can be managed easily."},{"lineNumber":244,"author":{"gitID":"ChoChihTun"},"content":"Therefore, AddTuteeCommand is used to add only the \u003c\u003ctutee-details,tutees\u0027 details\u003e\u003e."},{"lineNumber":245,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":246,"author":{"gitID":"ChoChihTun"},"content":"\u003d\u003d\u003d\u003d\u003d How it is implemented"},{"lineNumber":247,"author":{"gitID":"ChoChihTun"},"content":"The AddTuteeCommand is an extension of the Undoable Command, which is part of the Logic Component."},{"lineNumber":248,"author":{"gitID":"ChoChihTun"},"content":"As this command involves the altering of the application\u0027s state, the ability to undo and redo will make this command more user-friendly and efficient."},{"lineNumber":249,"author":{"gitID":"ChoChihTun"},"content":"(e.g list command + delete command vs undo command)."},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"ChoChihTun"},"content":"From the diagram shown above, instead of extending abstract Command class directly, AddTuteeCommand will extend the abstract Undoable Command class like clearCommand and AddCommand."},{"lineNumber":254,"author":{"gitID":"ChoChihTun"},"content":"This allows AddTuteeCommand to use or override the state saving codes inside the Undoable Command class as shown below."},{"lineNumber":255,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":257,"author":{"gitID":"-"},"content":"----"},{"lineNumber":258,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":259,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"-"},"content":"}"},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"ChoChihTun"},"content":"public class AddTuteeCommand extends UndoableCommand {"},{"lineNumber":268,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":270,"author":{"gitID":"ChoChihTun"},"content":"        // ... add tutee logic ..."},{"lineNumber":271,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":272,"author":{"gitID":"ChoChihTun"},"content":"}"},{"lineNumber":273,"author":{"gitID":"ChoChihTun"},"content":"----"},{"lineNumber":274,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":275,"author":{"gitID":"ChoChihTun"},"content":"The following [underline]#*sequence diagram*# shows how the addtutee operation works:"},{"lineNumber":276,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":277,"author":{"gitID":"ChoChihTun"},"content":"image::AddTuteeCommandSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":278,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":279,"author":{"gitID":"ChoChihTun"},"content":"As shown in the sequence diagram, after Tutee object has been created, it is being passed to Model. Model manager will add the Tutee object to the person list in TuitionConnect."},{"lineNumber":280,"author":{"gitID":"ChoChihTun"},"content":"By having a combined list of tutee and person, we can manage the contacts using one command, such as delete command, instead of having 1 command for tutee and 1 command for person."},{"lineNumber":281,"author":{"gitID":"ChoChihTun"},"content":"The combined list is achieved through the use of inheritance, whereby Tutee class inherits the Person class as shown in the diagram below."},{"lineNumber":282,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":283,"author":{"gitID":"ChoChihTun"},"content":"image:TuteeClassDiagram.jpg[width\u003d\"600\" height\u003d\"400\"]"},{"lineNumber":284,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":285,"author":{"gitID":"ChoChihTun"},"content":"Since a tutee is a person, we can carried out inheritance by extending the Person class."},{"lineNumber":286,"author":{"gitID":"ChoChihTun"},"content":"Both Tutee and Person class objects have the same fields such as Name, Phone, Email and Address."},{"lineNumber":287,"author":{"gitID":"ChoChihTun"},"content":"However, Tutee class object has additional details such as Subject, Grade, EducationLevel and School, which are irrelevant to a Person class object."},{"lineNumber":288,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":289,"author":{"gitID":"ChoChihTun"},"content":"[NOTE]"},{"lineNumber":290,"author":{"gitID":"ChoChihTun"},"content":"If the person already exists, either as tutee or person, in the contact list, DuplicatePersonException will be thrown."},{"lineNumber":291,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":292,"author":{"gitID":"ChoChihTun"},"content":"The following [underline]#*activity diagram*# shows the workflow when adding a tutee."},{"lineNumber":293,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":294,"author":{"gitID":"ChoChihTun"},"content":"image:AddTuteeActivityDiagram.png[width\u003d\"800]"},{"lineNumber":295,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":296,"author":{"gitID":"ChoChihTun"},"content":"\u003d\u003d\u003d\u003d Design Consideration"},{"lineNumber":297,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":298,"author":{"gitID":"ChoChihTun"},"content":"* **Alternative 1 (current choice):** Create a new command \"addtutee\" and a tutee class, which extends person class"},{"lineNumber":299,"author":{"gitID":"ChoChihTun"},"content":"** Pros: Person will not have any detail that is specific to tutee only. This saves memory especially when there are numerous person objects."},{"lineNumber":300,"author":{"gitID":"ChoChihTun"},"content":"** Cons: A tutee cannot simply convert into a person object when tutor stops teaching him/her. Tutor has to delete the tutee and add him/her again as a person."},{"lineNumber":301,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":302,"author":{"gitID":"ChoChihTun"},"content":"* **Alternative 2:** Modify the current AddCommand and add more fields to the person class"},{"lineNumber":303,"author":{"gitID":"ChoChihTun"},"content":"** Pros: Features can be implemented easily without modifying much to the existing code."},{"lineNumber":304,"author":{"gitID":"ChoChihTun"},"content":"** Cons: Person object creates unrelated field objects such as \"subject\" and \"school\" and these objects will waste the memory space. This problem will be significant when there are a lot of person objects."},{"lineNumber":305,"author":{"gitID":"ChoChihTun"},"content":"// end::addtutee[]"},{"lineNumber":306,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":308,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":309,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":316,"author":{"gitID":"-"},"content":""},{"lineNumber":317,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":320,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":321,"author":{"gitID":"-"},"content":"----"},{"lineNumber":322,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":323,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":324,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":325,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":326,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":327,"author":{"gitID":"-"},"content":"}"},{"lineNumber":328,"author":{"gitID":"-"},"content":"----"},{"lineNumber":329,"author":{"gitID":"-"},"content":""},{"lineNumber":330,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":331,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":332,"author":{"gitID":"-"},"content":"----"},{"lineNumber":333,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":334,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":335,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":336,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":337,"author":{"gitID":"-"},"content":""},{"lineNumber":338,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":339,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":340,"author":{"gitID":"-"},"content":"}"},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":343,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":344,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":345,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":346,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":347,"author":{"gitID":"-"},"content":"}"},{"lineNumber":348,"author":{"gitID":"-"},"content":"----"},{"lineNumber":349,"author":{"gitID":"-"},"content":""},{"lineNumber":350,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":351,"author":{"gitID":"-"},"content":""},{"lineNumber":352,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":353,"author":{"gitID":"-"},"content":""},{"lineNumber":354,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":355,"author":{"gitID":"-"},"content":""},{"lineNumber":356,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."},{"lineNumber":357,"author":{"gitID":"-"},"content":""},{"lineNumber":358,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":359,"author":{"gitID":"-"},"content":""},{"lineNumber":360,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":361,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":362,"author":{"gitID":"-"},"content":""},{"lineNumber":363,"author":{"gitID":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":364,"author":{"gitID":"-"},"content":""},{"lineNumber":365,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."},{"lineNumber":366,"author":{"gitID":"-"},"content":""},{"lineNumber":367,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":368,"author":{"gitID":"-"},"content":""},{"lineNumber":369,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":370,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":371,"author":{"gitID":"-"},"content":""},{"lineNumber":372,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":373,"author":{"gitID":"-"},"content":""},{"lineNumber":374,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":375,"author":{"gitID":"-"},"content":""},{"lineNumber":376,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."},{"lineNumber":377,"author":{"gitID":"-"},"content":""},{"lineNumber":378,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":379,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":380,"author":{"gitID":"-"},"content":""},{"lineNumber":381,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":382,"author":{"gitID":"-"},"content":""},{"lineNumber":383,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":384,"author":{"gitID":"-"},"content":""},{"lineNumber":385,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":386,"author":{"gitID":"-"},"content":""},{"lineNumber":387,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":388,"author":{"gitID":"-"},"content":""},{"lineNumber":389,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":390,"author":{"gitID":"-"},"content":""},{"lineNumber":391,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":392,"author":{"gitID":"-"},"content":""},{"lineNumber":393,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":394,"author":{"gitID":"-"},"content":""},{"lineNumber":395,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":396,"author":{"gitID":"-"},"content":""},{"lineNumber":397,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":398,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":399,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":400,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":401,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":402,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":403,"author":{"gitID":"-"},"content":""},{"lineNumber":404,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":405,"author":{"gitID":"-"},"content":""},{"lineNumber":406,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":407,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":408,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":409,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":410,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":411,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":412,"author":{"gitID":"-"},"content":""},{"lineNumber":413,"author":{"gitID":"-"},"content":""},{"lineNumber":414,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":415,"author":{"gitID":"-"},"content":""},{"lineNumber":416,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the address book (`add`, `clear`, `edit`)."},{"lineNumber":417,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":418,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":419,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":420,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":421,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."},{"lineNumber":422,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":423,"author":{"gitID":"-"},"content":""},{"lineNumber":424,"author":{"gitID":"-"},"content":""},{"lineNumber":425,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":426,"author":{"gitID":"-"},"content":""},{"lineNumber":427,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":428,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":429,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":430,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":431,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":432,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":433,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":434,"author":{"gitID":"-"},"content":""},{"lineNumber":435,"author":{"gitID":"yungyung04"},"content":"// tag::sortpersoncommand[]"},{"lineNumber":436,"author":{"gitID":"yungyung04"},"content":"\u003d\u003d\u003d Sort Person Command"},{"lineNumber":437,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":438,"author":{"gitID":"yungyung04"},"content":"\u003d\u003d\u003d\u003d Reason for Implementation"},{"lineNumber":439,"author":{"gitID":"yungyung04"},"content":"As the amount of contacts stored grows, it would be harder to browse the address book. Hence, Sort Person Command is created"},{"lineNumber":440,"author":{"gitID":"yungyung04"},"content":"to ease users\u0027s experience in organizing their address book."},{"lineNumber":441,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":442,"author":{"gitID":"yungyung04"},"content":"\u003d\u003d\u003d\u003d How it is implemented"},{"lineNumber":443,"author":{"gitID":"yungyung04"},"content":"The following sequence diagram shows the general idea of how sort person command works:"},{"lineNumber":444,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":445,"author":{"gitID":"yungyung04"},"content":"image::SortPersonSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":446,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":447,"author":{"gitID":"yungyung04"},"content":"As shown in the sequence diagram, the Logic command\u0027s call for execution results in Sort Person command to request for a Comparator object from PersonSortUtil class."},{"lineNumber":448,"author":{"gitID":"yungyung04"},"content":"A comparator object is required since the sorting implementation utilizes JavaFX8\u0027s SortedList class."},{"lineNumber":449,"author":{"gitID":"yungyung04"},"content":"(Refer to https://docs.oracle.com/javase/8/javafx/api/javafx/collections/transformation/SortedList.html for more information)"},{"lineNumber":450,"author":{"gitID":"yungyung04"},"content":"Here, PersonSortUtil class is responsible in providing a suitable comparator that matches the sorting behaviour requested by the user. Upon receiving the comparator, SortPersonCommand"},{"lineNumber":451,"author":{"gitID":"yungyung04"},"content":"calls the sortFilteredPersonList() method which utilises a SortedList object to perform the sorting."},{"lineNumber":452,"author":{"gitID":"yungyung04"},"content":"// end::sortpersoncommand[]"},{"lineNumber":453,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":454,"author":{"gitID":"yungyung04"},"content":"// tag::natural[]"},{"lineNumber":455,"author":{"gitID":"yungyung04"},"content":"\u003d\u003d\u003d Natural Language Identifier"},{"lineNumber":456,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":457,"author":{"gitID":"yungyung04"},"content":"\u003d\u003d\u003d\u003d Reason for Implementation"},{"lineNumber":458,"author":{"gitID":"yungyung04"},"content":"Figuring out the exact date for a tuition appointment can be tedious in some extent. Tutors would need to flip over a calendar, or to perform some"},{"lineNumber":459,"author":{"gitID":"yungyung04"},"content":"operations in the context of this app. Based on this concern, as our goal is to simplify the life of tutor,"},{"lineNumber":460,"author":{"gitID":"yungyung04"},"content":"we feel the importance of introducing a feature where tutors are able to set a tuition appointment not only by date,"},{"lineNumber":461,"author":{"gitID":"yungyung04"},"content":"but also by using common terms such as: `today`, `next month`, etc."},{"lineNumber":462,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":463,"author":{"gitID":"yungyung04"},"content":"\u003d\u003d\u003d\u003d Current Implementation Limitation"},{"lineNumber":464,"author":{"gitID":"yungyung04"},"content":"In the current implementation, common terms (or Natural Languages) are only identifiable by the `Find Task` command parser."},{"lineNumber":465,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":466,"author":{"gitID":"yungyung04"},"content":"\u003d\u003d\u003d\u003d How it is implemented"},{"lineNumber":467,"author":{"gitID":"yungyung04"},"content":"A class named NaturalLanguageIdentifier applys the singleton design pattern as the class stores a private attribute that records the current time of the system clock."},{"lineNumber":468,"author":{"gitID":"yungyung04"},"content":"As this reference time must be the same throughout the entire execution of a command, this class should only be instantiated once."},{"lineNumber":469,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":470,"author":{"gitID":"yungyung04"},"content":"This class is responsible for identifying whether a given user input is a recognizable natural language and convert it"},{"lineNumber":471,"author":{"gitID":"yungyung04"},"content":"into the desired format when applicable. In achieving this purpose, the public methods within this class are called by"},{"lineNumber":472,"author":{"gitID":"yungyung04"},"content":"the command parsers that inherit Address Book parser. In general, these public methods have a certain characteristic."},{"lineNumber":473,"author":{"gitID":"yungyung04"},"content":"These methods always take in a user\u0027s input as parameter and either return the same input if it is not recognized as a valid natural language"},{"lineNumber":474,"author":{"gitID":"yungyung04"},"content":"or return a processable form of the natural language. For example, given *this month* (a valid natural language) as user input,"},{"lineNumber":475,"author":{"gitID":"yungyung04"},"content":"the getMonthAsString() method will return *April* (the current month)."},{"lineNumber":476,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":477,"author":{"gitID":"yungyung04"},"content":"Valid or recognized natural languages are determined by a static list inside the NaturalLanguageIdentifier class."},{"lineNumber":478,"author":{"gitID":"yungyung04"},"content":"This list of Strings stores common terms used by tutors. If a given user input matches one of the terms in the list, that input"},{"lineNumber":479,"author":{"gitID":"yungyung04"},"content":"is treated as a valid natural language."},{"lineNumber":480,"author":{"gitID":"yungyung04"},"content":"// end::natural[]"},{"lineNumber":481,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":482,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":483,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Proposed] Data Encryption"},{"lineNumber":484,"author":{"gitID":"-"},"content":""},{"lineNumber":485,"author":{"gitID":"-"},"content":"_{Explain here how the data encryption feature will be implemented}_"},{"lineNumber":486,"author":{"gitID":"-"},"content":""},{"lineNumber":487,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":488,"author":{"gitID":"-"},"content":""},{"lineNumber":489,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":490,"author":{"gitID":"-"},"content":""},{"lineNumber":491,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":492,"author":{"gitID":"-"},"content":""},{"lineNumber":493,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":494,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":495,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":496,"author":{"gitID":"-"},"content":""},{"lineNumber":497,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":498,"author":{"gitID":"-"},"content":""},{"lineNumber":499,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":500,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":501,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":502,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":503,"author":{"gitID":"-"},"content":""},{"lineNumber":504,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":505,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":506,"author":{"gitID":"-"},"content":""},{"lineNumber":507,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":508,"author":{"gitID":"-"},"content":""},{"lineNumber":509,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":510,"author":{"gitID":"-"},"content":""},{"lineNumber":511,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":512,"author":{"gitID":"-"},"content":""},{"lineNumber":513,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":514,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":515,"author":{"gitID":"-"},"content":""},{"lineNumber":516,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":517,"author":{"gitID":"-"},"content":""},{"lineNumber":518,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":519,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":520,"author":{"gitID":"-"},"content":""},{"lineNumber":521,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":522,"author":{"gitID":"-"},"content":""},{"lineNumber":523,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":524,"author":{"gitID":"-"},"content":""},{"lineNumber":525,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":526,"author":{"gitID":"-"},"content":""},{"lineNumber":527,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":528,"author":{"gitID":"-"},"content":""},{"lineNumber":529,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":530,"author":{"gitID":"-"},"content":""},{"lineNumber":531,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":532,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":533,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":534,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":535,"author":{"gitID":"-"},"content":""},{"lineNumber":536,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":537,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":538,"author":{"gitID":"-"},"content":""},{"lineNumber":539,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":540,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":541,"author":{"gitID":"-"},"content":""},{"lineNumber":542,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":543,"author":{"gitID":"-"},"content":""},{"lineNumber":544,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":545,"author":{"gitID":"-"},"content":""},{"lineNumber":546,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":547,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":548,"author":{"gitID":"-"},"content":""},{"lineNumber":549,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":550,"author":{"gitID":"-"},"content":""},{"lineNumber":551,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":552,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":553,"author":{"gitID":"-"},"content":""},{"lineNumber":554,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":555,"author":{"gitID":"-"},"content":""},{"lineNumber":556,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":557,"author":{"gitID":"-"},"content":""},{"lineNumber":558,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":559,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":560,"author":{"gitID":"-"},"content":""},{"lineNumber":561,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":562,"author":{"gitID":"-"},"content":""},{"lineNumber":563,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":564,"author":{"gitID":"-"},"content":""},{"lineNumber":565,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":566,"author":{"gitID":"-"},"content":""},{"lineNumber":567,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":568,"author":{"gitID":"-"},"content":""},{"lineNumber":569,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":570,"author":{"gitID":"-"},"content":""},{"lineNumber":571,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":572,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":573,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":574,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":575,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":576,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":577,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":578,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":579,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":580,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":581,"author":{"gitID":"-"},"content":""},{"lineNumber":582,"author":{"gitID":"-"},"content":""},{"lineNumber":583,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":584,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":585,"author":{"gitID":"-"},"content":""},{"lineNumber":586,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":587,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":588,"author":{"gitID":"-"},"content":""},{"lineNumber":589,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":590,"author":{"gitID":"-"},"content":""},{"lineNumber":591,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":592,"author":{"gitID":"-"},"content":""},{"lineNumber":593,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":594,"author":{"gitID":"-"},"content":""},{"lineNumber":595,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":596,"author":{"gitID":"-"},"content":""},{"lineNumber":597,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":598,"author":{"gitID":"-"},"content":""},{"lineNumber":599,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":600,"author":{"gitID":"-"},"content":""},{"lineNumber":601,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":602,"author":{"gitID":"-"},"content":""},{"lineNumber":603,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":604,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":605,"author":{"gitID":"-"},"content":""},{"lineNumber":606,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":607,"author":{"gitID":"-"},"content":""},{"lineNumber":608,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":609,"author":{"gitID":"-"},"content":""},{"lineNumber":610,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":611,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":612,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":613,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":614,"author":{"gitID":"-"},"content":""},{"lineNumber":615,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":616,"author":{"gitID":"-"},"content":""},{"lineNumber":617,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":618,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":619,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":620,"author":{"gitID":"-"},"content":""},{"lineNumber":621,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":622,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":623,"author":{"gitID":"-"},"content":"\u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":624,"author":{"gitID":"-"},"content":""},{"lineNumber":625,"author":{"gitID":"-"},"content":"Suggested path for new programmers:"},{"lineNumber":626,"author":{"gitID":"-"},"content":""},{"lineNumber":627,"author":{"gitID":"-"},"content":"1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":628,"author":{"gitID":"-"},"content":""},{"lineNumber":629,"author":{"gitID":"-"},"content":"2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":630,"author":{"gitID":"-"},"content":""},{"lineNumber":631,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-EachComponent]]"},{"lineNumber":632,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Improving each component"},{"lineNumber":633,"author":{"gitID":"-"},"content":""},{"lineNumber":634,"author":{"gitID":"-"},"content":"Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."},{"lineNumber":635,"author":{"gitID":"-"},"content":""},{"lineNumber":636,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":637,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Logic` component"},{"lineNumber":638,"author":{"gitID":"-"},"content":""},{"lineNumber":639,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."},{"lineNumber":640,"author":{"gitID":"-"},"content":""},{"lineNumber":641,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":642,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."},{"lineNumber":643,"author":{"gitID":"-"},"content":""},{"lineNumber":644,"author":{"gitID":"-"},"content":". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."},{"lineNumber":645,"author":{"gitID":"-"},"content":"+"},{"lineNumber":646,"author":{"gitID":"-"},"content":"****"},{"lineNumber":647,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":648,"author":{"gitID":"-"},"content":"** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."},{"lineNumber":649,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."},{"lineNumber":650,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":651,"author":{"gitID":"-"},"content":"** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."},{"lineNumber":652,"author":{"gitID":"-"},"content":"** Add new tests for each of the aliases that you have added."},{"lineNumber":653,"author":{"gitID":"-"},"content":"** Update the user guide to document the new aliases."},{"lineNumber":654,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."},{"lineNumber":655,"author":{"gitID":"-"},"content":"****"},{"lineNumber":656,"author":{"gitID":"-"},"content":""},{"lineNumber":657,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":658,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Model` component"},{"lineNumber":659,"author":{"gitID":"-"},"content":""},{"lineNumber":660,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."},{"lineNumber":661,"author":{"gitID":"-"},"content":""},{"lineNumber":662,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":663,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."},{"lineNumber":664,"author":{"gitID":"-"},"content":""},{"lineNumber":665,"author":{"gitID":"-"},"content":". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."},{"lineNumber":666,"author":{"gitID":"-"},"content":"+"},{"lineNumber":667,"author":{"gitID":"-"},"content":"****"},{"lineNumber":668,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":669,"author":{"gitID":"-"},"content":"** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."},{"lineNumber":670,"author":{"gitID":"-"},"content":"** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"},{"lineNumber":671,"author":{"gitID":"-"},"content":"**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."},{"lineNumber":672,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":673,"author":{"gitID":"-"},"content":"** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."},{"lineNumber":674,"author":{"gitID":"-"},"content":"** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."},{"lineNumber":675,"author":{"gitID":"-"},"content":"** Add new tests for each of the new public methods that you have added."},{"lineNumber":676,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."},{"lineNumber":677,"author":{"gitID":"-"},"content":"*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."},{"lineNumber":678,"author":{"gitID":"-"},"content":"*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."},{"lineNumber":679,"author":{"gitID":"-"},"content":"****"},{"lineNumber":680,"author":{"gitID":"-"},"content":""},{"lineNumber":681,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":682,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Ui` component"},{"lineNumber":683,"author":{"gitID":"-"},"content":""},{"lineNumber":684,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."},{"lineNumber":685,"author":{"gitID":"-"},"content":""},{"lineNumber":686,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":687,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."},{"lineNumber":688,"author":{"gitID":"-"},"content":""},{"lineNumber":689,"author":{"gitID":"-"},"content":". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."},{"lineNumber":690,"author":{"gitID":"-"},"content":"+"},{"lineNumber":691,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":692,"author":{"gitID":"-"},"content":"+"},{"lineNumber":693,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-before.png[width\u003d\"300\"]"},{"lineNumber":694,"author":{"gitID":"-"},"content":"+"},{"lineNumber":695,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":696,"author":{"gitID":"-"},"content":"+"},{"lineNumber":697,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-after.png[width\u003d\"300\"]"},{"lineNumber":698,"author":{"gitID":"-"},"content":"+"},{"lineNumber":699,"author":{"gitID":"-"},"content":"****"},{"lineNumber":700,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":701,"author":{"gitID":"-"},"content":"** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."},{"lineNumber":702,"author":{"gitID":"-"},"content":"** Use the .css attribute `-fx-background-color` to add a color."},{"lineNumber":703,"author":{"gitID":"-"},"content":"** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."},{"lineNumber":704,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":705,"author":{"gitID":"-"},"content":"** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."},{"lineNumber":706,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."},{"lineNumber":707,"author":{"gitID":"-"},"content":"*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."},{"lineNumber":708,"author":{"gitID":"-"},"content":"****"},{"lineNumber":709,"author":{"gitID":"-"},"content":""},{"lineNumber":710,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."},{"lineNumber":711,"author":{"gitID":"-"},"content":"+"},{"lineNumber":712,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":713,"author":{"gitID":"-"},"content":"+"},{"lineNumber":714,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-before.png[width\u003d\"200\"]"},{"lineNumber":715,"author":{"gitID":"-"},"content":"+"},{"lineNumber":716,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":717,"author":{"gitID":"-"},"content":"+"},{"lineNumber":718,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-after.png[width\u003d\"200\"]"},{"lineNumber":719,"author":{"gitID":"-"},"content":"+"},{"lineNumber":720,"author":{"gitID":"-"},"content":"****"},{"lineNumber":721,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":722,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."},{"lineNumber":723,"author":{"gitID":"-"},"content":"** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."},{"lineNumber":724,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":725,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."},{"lineNumber":726,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."},{"lineNumber":727,"author":{"gitID":"-"},"content":"** You can write two different kinds of tests to ensure that the functionality works:"},{"lineNumber":728,"author":{"gitID":"-"},"content":"*** The unit tests for `ResultDisplay` can be modified to include verification of the color."},{"lineNumber":729,"author":{"gitID":"-"},"content":"*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."},{"lineNumber":730,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."},{"lineNumber":731,"author":{"gitID":"-"},"content":"*** Do read the commits one at a time if you feel overwhelmed."},{"lineNumber":732,"author":{"gitID":"-"},"content":"****"},{"lineNumber":733,"author":{"gitID":"-"},"content":""},{"lineNumber":734,"author":{"gitID":"-"},"content":". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."},{"lineNumber":735,"author":{"gitID":"-"},"content":"+"},{"lineNumber":736,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":737,"author":{"gitID":"-"},"content":"+"},{"lineNumber":738,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-before.png[width\u003d\"500\"]"},{"lineNumber":739,"author":{"gitID":"-"},"content":"+"},{"lineNumber":740,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":741,"author":{"gitID":"-"},"content":"+"},{"lineNumber":742,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-after.png[width\u003d\"500\"]"},{"lineNumber":743,"author":{"gitID":"-"},"content":"+"},{"lineNumber":744,"author":{"gitID":"-"},"content":"****"},{"lineNumber":745,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":746,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"},{"lineNumber":747,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."},{"lineNumber":748,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":749,"author":{"gitID":"-"},"content":"** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."},{"lineNumber":750,"author":{"gitID":"-"},"content":"** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."},{"lineNumber":751,"author":{"gitID":"-"},"content":"** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."},{"lineNumber":752,"author":{"gitID":"-"},"content":"** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."},{"lineNumber":753,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."},{"lineNumber":754,"author":{"gitID":"-"},"content":"****"},{"lineNumber":755,"author":{"gitID":"-"},"content":""},{"lineNumber":756,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":757,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Storage` component"},{"lineNumber":758,"author":{"gitID":"-"},"content":""},{"lineNumber":759,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."},{"lineNumber":760,"author":{"gitID":"-"},"content":""},{"lineNumber":761,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":762,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."},{"lineNumber":763,"author":{"gitID":"-"},"content":""},{"lineNumber":764,"author":{"gitID":"-"},"content":". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."},{"lineNumber":765,"author":{"gitID":"-"},"content":"+"},{"lineNumber":766,"author":{"gitID":"-"},"content":"****"},{"lineNumber":767,"author":{"gitID":"-"},"content":"* Hint"},{"lineNumber":768,"author":{"gitID":"-"},"content":"** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."},{"lineNumber":769,"author":{"gitID":"-"},"content":"** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."},{"lineNumber":770,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":771,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."},{"lineNumber":772,"author":{"gitID":"-"},"content":"****"},{"lineNumber":773,"author":{"gitID":"-"},"content":""},{"lineNumber":774,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":775,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":776,"author":{"gitID":"-"},"content":""},{"lineNumber":777,"author":{"gitID":"-"},"content":"By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":778,"author":{"gitID":"-"},"content":""},{"lineNumber":779,"author":{"gitID":"-"},"content":"*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":780,"author":{"gitID":"-"},"content":""},{"lineNumber":781,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Description"},{"lineNumber":782,"author":{"gitID":"-"},"content":"Edits the remark for a person specified in the `INDEX`. +"},{"lineNumber":783,"author":{"gitID":"-"},"content":"Format: `remark INDEX r/[REMARK]`"},{"lineNumber":784,"author":{"gitID":"-"},"content":""},{"lineNumber":785,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":786,"author":{"gitID":"-"},"content":""},{"lineNumber":787,"author":{"gitID":"-"},"content":"* `remark 1 r/Likes to drink coffee.` +"},{"lineNumber":788,"author":{"gitID":"-"},"content":"Edits the remark for the first person to `Likes to drink coffee.`"},{"lineNumber":789,"author":{"gitID":"-"},"content":"* `remark 1 r/` +"},{"lineNumber":790,"author":{"gitID":"-"},"content":"Removes the remark for the first person."},{"lineNumber":791,"author":{"gitID":"-"},"content":""},{"lineNumber":792,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":793,"author":{"gitID":"-"},"content":""},{"lineNumber":794,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"},{"lineNumber":795,"author":{"gitID":"-"},"content":"Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":796,"author":{"gitID":"-"},"content":""},{"lineNumber":797,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":798,"author":{"gitID":"-"},"content":""},{"lineNumber":799,"author":{"gitID":"-"},"content":". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."},{"lineNumber":800,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."},{"lineNumber":801,"author":{"gitID":"-"},"content":""},{"lineNumber":802,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":803,"author":{"gitID":"-"},"content":""},{"lineNumber":804,"author":{"gitID":"-"},"content":". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":805,"author":{"gitID":"-"},"content":". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."},{"lineNumber":806,"author":{"gitID":"-"},"content":""},{"lineNumber":807,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"},{"lineNumber":808,"author":{"gitID":"-"},"content":"Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"},{"lineNumber":809,"author":{"gitID":"-"},"content":""},{"lineNumber":810,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":811,"author":{"gitID":"-"},"content":""},{"lineNumber":812,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."},{"lineNumber":813,"author":{"gitID":"-"},"content":". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":814,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."},{"lineNumber":815,"author":{"gitID":"-"},"content":""},{"lineNumber":816,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":817,"author":{"gitID":"-"},"content":""},{"lineNumber":818,"author":{"gitID":"-"},"content":". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."},{"lineNumber":819,"author":{"gitID":"-"},"content":". Add `RemarkCommandParserTest` that tests different boundary values"},{"lineNumber":820,"author":{"gitID":"-"},"content":"for `RemarkCommandParser`."},{"lineNumber":821,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."},{"lineNumber":822,"author":{"gitID":"-"},"content":""},{"lineNumber":823,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"},{"lineNumber":824,"author":{"gitID":"-"},"content":"Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."},{"lineNumber":825,"author":{"gitID":"-"},"content":""},{"lineNumber":826,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":827,"author":{"gitID":"-"},"content":""},{"lineNumber":828,"author":{"gitID":"-"},"content":". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."},{"lineNumber":829,"author":{"gitID":"-"},"content":". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."},{"lineNumber":830,"author":{"gitID":"-"},"content":""},{"lineNumber":831,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":832,"author":{"gitID":"-"},"content":""},{"lineNumber":833,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."},{"lineNumber":834,"author":{"gitID":"-"},"content":""},{"lineNumber":835,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"},{"lineNumber":836,"author":{"gitID":"-"},"content":"We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."},{"lineNumber":837,"author":{"gitID":"-"},"content":""},{"lineNumber":838,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":839,"author":{"gitID":"-"},"content":""},{"lineNumber":840,"author":{"gitID":"-"},"content":". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."},{"lineNumber":841,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."},{"lineNumber":842,"author":{"gitID":"-"},"content":""},{"lineNumber":843,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":844,"author":{"gitID":"-"},"content":""},{"lineNumber":845,"author":{"gitID":"-"},"content":". Add test for `Remark`, to test the `Remark#equals()` method."},{"lineNumber":846,"author":{"gitID":"-"},"content":""},{"lineNumber":847,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"},{"lineNumber":848,"author":{"gitID":"-"},"content":"Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":849,"author":{"gitID":"-"},"content":""},{"lineNumber":850,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":851,"author":{"gitID":"-"},"content":""},{"lineNumber":852,"author":{"gitID":"-"},"content":". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":853,"author":{"gitID":"-"},"content":". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."},{"lineNumber":854,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"},{"lineNumber":855,"author":{"gitID":"-"},"content":""},{"lineNumber":856,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"},{"lineNumber":857,"author":{"gitID":"-"},"content":"We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."},{"lineNumber":858,"author":{"gitID":"-"},"content":""},{"lineNumber":859,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":860,"author":{"gitID":"-"},"content":""},{"lineNumber":861,"author":{"gitID":"-"},"content":". Add a new Xml field for `Remark`."},{"lineNumber":862,"author":{"gitID":"-"},"content":""},{"lineNumber":863,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":864,"author":{"gitID":"-"},"content":""},{"lineNumber":865,"author":{"gitID":"-"},"content":". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":866,"author":{"gitID":"-"},"content":""},{"lineNumber":867,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"},{"lineNumber":868,"author":{"gitID":"-"},"content":"Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":869,"author":{"gitID":"-"},"content":""},{"lineNumber":870,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":871,"author":{"gitID":"-"},"content":""},{"lineNumber":872,"author":{"gitID":"-"},"content":". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."},{"lineNumber":873,"author":{"gitID":"-"},"content":". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."},{"lineNumber":874,"author":{"gitID":"-"},"content":""},{"lineNumber":875,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"},{"lineNumber":876,"author":{"gitID":"-"},"content":"Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":877,"author":{"gitID":"-"},"content":""},{"lineNumber":878,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":879,"author":{"gitID":"-"},"content":""},{"lineNumber":880,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."},{"lineNumber":881,"author":{"gitID":"-"},"content":""},{"lineNumber":882,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":883,"author":{"gitID":"-"},"content":""},{"lineNumber":884,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":885,"author":{"gitID":"-"},"content":""},{"lineNumber":886,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"},{"lineNumber":887,"author":{"gitID":"-"},"content":"We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":888,"author":{"gitID":"-"},"content":""},{"lineNumber":889,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":890,"author":{"gitID":"-"},"content":""},{"lineNumber":891,"author":{"gitID":"-"},"content":". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."},{"lineNumber":892,"author":{"gitID":"-"},"content":""},{"lineNumber":893,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":894,"author":{"gitID":"-"},"content":""},{"lineNumber":895,"author":{"gitID":"-"},"content":". Update `RemarkCommandTest` to test that the `execute()` logic works."},{"lineNumber":896,"author":{"gitID":"-"},"content":""},{"lineNumber":897,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Full Solution"},{"lineNumber":898,"author":{"gitID":"-"},"content":""},{"lineNumber":899,"author":{"gitID":"-"},"content":"See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."},{"lineNumber":900,"author":{"gitID":"-"},"content":""},{"lineNumber":901,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":902,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":903,"author":{"gitID":"-"},"content":""},{"lineNumber":904,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":905,"author":{"gitID":"-"},"content":""},{"lineNumber":906,"author":{"gitID":"-"},"content":"* has a need to manage a significant number of contacts"},{"lineNumber":907,"author":{"gitID":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":908,"author":{"gitID":"-"},"content":"* can type fast"},{"lineNumber":909,"author":{"gitID":"-"},"content":"* prefers typing over mouse input"},{"lineNumber":910,"author":{"gitID":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":911,"author":{"gitID":"-"},"content":""},{"lineNumber":912,"author":{"gitID":"-"},"content":"*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"},{"lineNumber":913,"author":{"gitID":"-"},"content":""},{"lineNumber":914,"author":{"gitID":"ChoChihTun"},"content":"\u003d\u003d\u003d Feature Contribution"},{"lineNumber":915,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":916,"author":{"gitID":"raymond511"},"content":"*Chih Tun*:"},{"lineNumber":917,"author":{"gitID":"raymond511"},"content":""},{"lineNumber":918,"author":{"gitID":"ChoChihTun"},"content":"* *Major Enhancement*: Integrated a calendar into TuitionConnect using third party software, CalendarFX."},{"lineNumber":919,"author":{"gitID":"ChoChihTun"},"content":". Revamp UI layout and colour so as to incorporate calendar to the UI"},{"lineNumber":920,"author":{"gitID":"ChoChihTun"},"content":". Implemented change command to display day, week, month or year view of the calendar. A daily agenda list is showed together with the calendar\u0027s day view."},{"lineNumber":921,"author":{"gitID":"ChoChihTun"},"content":". In addition, the calendar reflects any changes to the schedule such as adding of a new task, deleting an existing task or undo."},{"lineNumber":922,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":923,"author":{"gitID":"ChoChihTun"},"content":"* *Minor Enhancement*:"},{"lineNumber":924,"author":{"gitID":"ChoChihTun"},"content":". Created command to add a new tutee."},{"lineNumber":925,"author":{"gitID":"ChoChihTun"},"content":". Implemented tutee, tuition, personal task classes and relevant field classes to support all the commands."},{"lineNumber":926,"author":{"gitID":"ChoChihTun"},"content":". Modify edit command to be able to edit tutee\u0027s details."},{"lineNumber":927,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":928,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":929,"author":{"gitID":"yungyung04"},"content":"*Eka Buyung Lienadi*:"},{"lineNumber":930,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":931,"author":{"gitID":"yungyung04"},"content":"* *Scheduling features [Major Enhancement]* +"},{"lineNumber":932,"author":{"gitID":"yungyung04"},"content":". Implemented task addition, deletion, filtering and sorting features."},{"lineNumber":933,"author":{"gitID":"yungyung04"},"content":". Implemented features to recognize natural language, which aids in task filtering."},{"lineNumber":934,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":935,"author":{"gitID":"yungyung04"},"content":"* [Minor Enhancement]"},{"lineNumber":936,"author":{"gitID":"yungyung04"},"content":". Implemented tutee listing feature."},{"lineNumber":937,"author":{"gitID":"yungyung04"},"content":". Implemented tutee filtering and sorting features."},{"lineNumber":938,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":939,"author":{"gitID":"ChoChihTun"},"content":"*Anas*:"},{"lineNumber":940,"author":{"gitID":"ChoChihTun"},"content":"// tag::taskClass[]"},{"lineNumber":941,"author":{"gitID":"a-shakra"},"content":". *Integrating the Task class into the Addressbook* [Major Enhancement]"},{"lineNumber":942,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":943,"author":{"gitID":"a-shakra"},"content":"The Task class forms the foundation of TuitionConnect as it allows the user to manage their various"},{"lineNumber":944,"author":{"gitID":"a-shakra"},"content":"\"tasks\". The task class comes in two forms, a personal task and a tuition task. The following is the"},{"lineNumber":945,"author":{"gitID":"a-shakra"},"content":"interface:"},{"lineNumber":946,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":947,"author":{"gitID":"a-shakra"},"content":"[source,java]"},{"lineNumber":948,"author":{"gitID":"a-shakra"},"content":"----"},{"lineNumber":949,"author":{"gitID":"a-shakra"},"content":"public interface Task {"},{"lineNumber":950,"author":{"gitID":"a-shakra"},"content":"    // Consider changing the location of the three string values below"},{"lineNumber":951,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":952,"author":{"gitID":"a-shakra"},"content":"    String MESSAGE_DESCRIPTION_CONSTRAINTS \u003d \"Tasks Should have a non-empty description\";"},{"lineNumber":953,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":954,"author":{"gitID":"a-shakra"},"content":"    String MESSAGE_DURATION_CONSTRAINTS \u003d \"Duration must be a non-null value\";"},{"lineNumber":955,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":956,"author":{"gitID":"a-shakra"},"content":"    String MESSAGE_DATETIME_CONSTRAINTS \u003d \"Date and time must be a non-null value\";"},{"lineNumber":957,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":958,"author":{"gitID":"a-shakra"},"content":"    LocalDateTime getTaskDateTime();"},{"lineNumber":959,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":960,"author":{"gitID":"a-shakra"},"content":"    String getStringTaskDateTime();"},{"lineNumber":961,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":962,"author":{"gitID":"a-shakra"},"content":"    String getDescription();"},{"lineNumber":963,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":964,"author":{"gitID":"a-shakra"},"content":"    String getDuration();"},{"lineNumber":965,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":966,"author":{"gitID":"a-shakra"},"content":"    Entry getEntry();"},{"lineNumber":967,"author":{"gitID":"a-shakra"},"content":"}"},{"lineNumber":968,"author":{"gitID":"a-shakra"},"content":"----"},{"lineNumber":969,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":970,"author":{"gitID":"a-shakra"},"content":"Below is a representation of the Task object. The form below is as an XmlAdaptedTask object"},{"lineNumber":971,"author":{"gitID":"a-shakra"},"content":"which allows the information contained in a Task object to be represented in a certain"},{"lineNumber":972,"author":{"gitID":"a-shakra"},"content":"format. Note that while the Task object has a Tuition Task and a Personal Task variant,"},{"lineNumber":973,"author":{"gitID":"a-shakra"},"content":"the XmlAdaptedTask object represented below embodies both aspects. Moreover, the"},{"lineNumber":974,"author":{"gitID":"a-shakra"},"content":"XmlAdaptedTask consists of String objects only, as opposed to the methods and variables"},{"lineNumber":975,"author":{"gitID":"a-shakra"},"content":"of various types that populate the Task interface above."},{"lineNumber":976,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":977,"author":{"gitID":"a-shakra"},"content":"image::taskStorage.jpg[width\u003d\"\"]"},{"lineNumber":978,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":979,"author":{"gitID":"ChoChihTun"},"content":"// end::taskClass[]"},{"lineNumber":980,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":981,"author":{"gitID":"a-shakra"},"content":"// tag::listCommand[]"},{"lineNumber":982,"author":{"gitID":"a-shakra"},"content":". *listTask Command* [Minor Enhancement]"},{"lineNumber":983,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":984,"author":{"gitID":"a-shakra"},"content":"This feature allows the user to see all tasks stored in the addressbook. It is useful when a user has entered a command"},{"lineNumber":985,"author":{"gitID":"a-shakra"},"content":"that displays only a single task. If the user then wants to see other tasks, he/she can input listTask"},{"lineNumber":986,"author":{"gitID":"a-shakra"},"content":"and display the tasks again."},{"lineNumber":987,"author":{"gitID":"a-shakra"},"content":"// end::listCommand[]"},{"lineNumber":988,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":989,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":990,"author":{"gitID":"-"},"content":""},{"lineNumber":991,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":992,"author":{"gitID":"-"},"content":""},{"lineNumber":993,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":994,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":995,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":996,"author":{"gitID":"-"},"content":"|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"},{"lineNumber":997,"author":{"gitID":"-"},"content":""},{"lineNumber":998,"author":{"gitID":"ChoChihTun"},"content":"|`* * *` |user |add a new person |update my list of contacts"},{"lineNumber":999,"author":{"gitID":"-"},"content":""},{"lineNumber":1000,"author":{"gitID":"-"},"content":"|`* * *` |user |delete a person |remove entries that I no longer need"},{"lineNumber":1001,"author":{"gitID":"-"},"content":""},{"lineNumber":1002,"author":{"gitID":"-"},"content":"|`* * *` |user |find a person by name |locate details of persons without having to go through the entire list"},{"lineNumber":1003,"author":{"gitID":"-"},"content":""},{"lineNumber":1004,"author":{"gitID":"ChoChihTun"},"content":"|`* * *` |tutor |add a new tuition |so that I can compile my tuition schedule"},{"lineNumber":1005,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":1006,"author":{"gitID":"ChoChihTun"},"content":"|`* * *` |user |add my personal task to the calendar |prevent any task from clashing"},{"lineNumber":1007,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":1008,"author":{"gitID":"ChoChihTun"},"content":"|`* * *` |user |delete a task in the calendar |update my calender"},{"lineNumber":1009,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":1010,"author":{"gitID":"ChoChihTun"},"content":"|`* * *` |user |edit a task in the calendar |update my calendar"},{"lineNumber":1011,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":1012,"author":{"gitID":"ChoChihTun"},"content":"|`* * *` |tutor |list tasks I have in certain month |check and prepare myself in advance"},{"lineNumber":1013,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":1014,"author":{"gitID":"ChoChihTun"},"content":"|`* * *` |tutor |add a contact as my tutee |separate my tutee from my personal contact lists"},{"lineNumber":1015,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":1016,"author":{"gitID":"ChoChihTun"},"content":"|`* * *` |tutor |add subject grade of the tutees |keep track of his progress"},{"lineNumber":1017,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":1018,"author":{"gitID":"ChoChihTun"},"content":"|`* * *` |tutor |add tutee\u0027s current education level |adjust my teaching accordingly"},{"lineNumber":1019,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":1020,"author":{"gitID":"ChoChihTun"},"content":"|`* * *` |tutor |edit tutee\u0027s details |stay updated"},{"lineNumber":1021,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":1022,"author":{"gitID":"ChoChihTun"},"content":"|`* * *` |user |use a calendar |manage my schedule effectively"},{"lineNumber":1023,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":1024,"author":{"gitID":"ChoChihTun"},"content":"|`* * *` |user |have a calender on application main window |view my schedule easily"},{"lineNumber":1025,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":1026,"author":{"gitID":"ChoChihTun"},"content":"|`* * *` |tutor |change the calendar view page |view my schedule in terms of day, month, week or year"},{"lineNumber":1027,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":1028,"author":{"gitID":"ChoChihTun"},"content":"|`* *` |tutor |sort my contact list by various categories |locate my contacts that have same characteristics easily"},{"lineNumber":1029,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":1030,"author":{"gitID":"ChoChihTun"},"content":"|`* *` |tutor |list tutees who are learning same subject |determine the amount of tuition material copies to be printed"},{"lineNumber":1031,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":1032,"author":{"gitID":"ChoChihTun"},"content":"|`* *` |tutor |list tutees with same education level |navigate within TuitionConnect easily"},{"lineNumber":1033,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":1034,"author":{"gitID":"ChoChihTun"},"content":"|`* *` |tutor |list tutees coming from the same school |so that I can gather and spread useful information among these students."},{"lineNumber":1035,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":1036,"author":{"gitID":"ChoChihTun"},"content":"|`* *` |tutor |list tutees based on their grades |give more tuition to tutees who are doing badly"},{"lineNumber":1037,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":1038,"author":{"gitID":"ChoChihTun"},"content":"|`* *` |tutor with many tutees |send messages to all tutee with same description |disperse messages easily"},{"lineNumber":1039,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":1040,"author":{"gitID":"ChoChihTun"},"content":"|`* *` |user |submit feedback to the developers of the application |this application can be further improved"},{"lineNumber":1041,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":1042,"author":{"gitID":"ChoChihTun"},"content":"|`* *` |tutor |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"},{"lineNumber":1043,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":1044,"author":{"gitID":"ChoChihTun"},"content":"|`* *` |user |track my work hours over a specific interval of time |maintain a good work life balance"},{"lineNumber":1045,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":1046,"author":{"gitID":"ChoChihTun"},"content":"|`* *` |tutor |track the tuition payment |know who has not paid"},{"lineNumber":1047,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":1048,"author":{"gitID":"ChoChihTun"},"content":"|`* *` |tutor |add assignments(done and to-be-done) to a tutee |track his work and progress easily"},{"lineNumber":1049,"author":{"gitID":"-"},"content":""},{"lineNumber":1050,"author":{"gitID":"ChoChihTun"},"content":"|`*` |tutor |measure the retention rate of my tutoring service |improve on myself and use it as my tuition credential"},{"lineNumber":1051,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":1052,"author":{"gitID":"ChoChihTun"},"content":"|`*` |user |receive payments for my services electronically |receive payment more conveniently"},{"lineNumber":1053,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":1054,"author":{"gitID":"ChoChihTun"},"content":"|`*` |tutor |take note of the name of my tutee\u0027s school teachers |adjust my teaching according to the school teacher."},{"lineNumber":1055,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":1056,"author":{"gitID":"ChoChihTun"},"content":"|`*` |tutor |insert my tutee\u0027s photo |recognise new students easily"},{"lineNumber":1057,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":1058,"author":{"gitID":"ChoChihTun"},"content":"|`*` |tutor |delete all finished task |remove them permanently"},{"lineNumber":1059,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1060,"author":{"gitID":"-"},"content":""},{"lineNumber":1061,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1062,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1063,"author":{"gitID":"-"},"content":""},{"lineNumber":1064,"author":{"gitID":"ChoChihTun"},"content":"(For all use cases below, the *System* is the `TuitionConnect Application (TC)` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":1065,"author":{"gitID":"-"},"content":""},{"lineNumber":1066,"author":{"gitID":"yungyung04"},"content":"\u003d\u003d\u003d Use case: UC01 - Delete person"},{"lineNumber":1067,"author":{"gitID":"-"},"content":""},{"lineNumber":1068,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1069,"author":{"gitID":"-"},"content":""},{"lineNumber":1070,"author":{"gitID":"-"},"content":"1.  User requests to list persons"},{"lineNumber":1071,"author":{"gitID":"yungyung04"},"content":"2.  TC shows a list of persons"},{"lineNumber":1072,"author":{"gitID":"-"},"content":"3.  User requests to delete a specific person in the list"},{"lineNumber":1073,"author":{"gitID":"yungyung04"},"content":"4.  TC deletes the person"},{"lineNumber":1074,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1075,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1076,"author":{"gitID":"-"},"content":""},{"lineNumber":1077,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1078,"author":{"gitID":"-"},"content":""},{"lineNumber":1079,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1080,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1081,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1082,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1083,"author":{"gitID":"-"},"content":""},{"lineNumber":1084,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1085,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1086,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1087,"author":{"gitID":"yungyung04"},"content":"** 3a1. TC shows an error message."},{"lineNumber":1088,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1089,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1090,"author":{"gitID":"-"},"content":""},{"lineNumber":1091,"author":{"gitID":"yungyung04"},"content":"\u003d\u003d\u003d Use case: UC02 - Add a tuition schedule"},{"lineNumber":1092,"author":{"gitID":"yungyung04"},"content":"*MSS*"},{"lineNumber":1093,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":1094,"author":{"gitID":"yungyung04"},"content":"1. User adds a schedule by providing the time (date \u0026 duration)"},{"lineNumber":1095,"author":{"gitID":"yungyung04"},"content":"2. TC asks whether user wants to *add a personal schedule(UC03)* or a tuition schedule."},{"lineNumber":1096,"author":{"gitID":"yungyung04"},"content":"3. User chooses tuition schedule"},{"lineNumber":1097,"author":{"gitID":"yungyung04"},"content":"4. TC asks the name of the tutee"},{"lineNumber":1098,"author":{"gitID":"yungyung04"},"content":"5. User types the name of the tutee"},{"lineNumber":1099,"author":{"gitID":"yungyung04"},"content":"6. TC confirms that process is done."},{"lineNumber":1100,"author":{"gitID":"yungyung04"},"content":"+"},{"lineNumber":1101,"author":{"gitID":"yungyung04"},"content":"Use Case ends."},{"lineNumber":1102,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":1103,"author":{"gitID":"yungyung04"},"content":"*Extensions*"},{"lineNumber":1104,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":1105,"author":{"gitID":"yungyung04"},"content":"[none]"},{"lineNumber":1106,"author":{"gitID":"yungyung04"},"content":"* 1a. Clashing schedule"},{"lineNumber":1107,"author":{"gitID":"yungyung04"},"content":"+"},{"lineNumber":1108,"author":{"gitID":"yungyung04"},"content":"[none]"},{"lineNumber":1109,"author":{"gitID":"yungyung04"},"content":"** 1a1. TC reports that schedule clashes and requests a new timing."},{"lineNumber":1110,"author":{"gitID":"yungyung04"},"content":"** 1a2. User enters a new schedule"},{"lineNumber":1111,"author":{"gitID":"yungyung04"},"content":"** Steps 1a1.-1a2. are repeated until there is no clash."},{"lineNumber":1112,"author":{"gitID":"yungyung04"},"content":"** Use case resumes from Step 2."},{"lineNumber":1113,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":1114,"author":{"gitID":"yungyung04"},"content":"* *a. At any time, user can cancel adding the schedule."},{"lineNumber":1115,"author":{"gitID":"yungyung04"},"content":"[none]"},{"lineNumber":1116,"author":{"gitID":"yungyung04"},"content":"** *a1 TC requests confirmation of the cancelation."},{"lineNumber":1117,"author":{"gitID":"yungyung04"},"content":"** *a2. User confirms the cancellation."},{"lineNumber":1118,"author":{"gitID":"yungyung04"},"content":"** Use case ends."},{"lineNumber":1119,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":1120,"author":{"gitID":"yungyung04"},"content":"* 5a. Name is not found"},{"lineNumber":1121,"author":{"gitID":"yungyung04"},"content":"+"},{"lineNumber":1122,"author":{"gitID":"yungyung04"},"content":"[none]"},{"lineNumber":1123,"author":{"gitID":"yungyung04"},"content":"** 5a1. TC requests user to retype the tutee’s name."},{"lineNumber":1124,"author":{"gitID":"yungyung04"},"content":"** 5a2. User retypes the tutee’s name."},{"lineNumber":1125,"author":{"gitID":"yungyung04"},"content":"** Steps 5a1.-5a2. are repeated until a valid name is provided."},{"lineNumber":1126,"author":{"gitID":"yungyung04"},"content":"** Use case resumes from Step 6."},{"lineNumber":1127,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":1128,"author":{"gitID":"yungyung04"},"content":"* *a. At any time, user can cancel adding the schedule."},{"lineNumber":1129,"author":{"gitID":"yungyung04"},"content":"[none]"},{"lineNumber":1130,"author":{"gitID":"yungyung04"},"content":"** *a1 TC requests confirmation of the cancelation."},{"lineNumber":1131,"author":{"gitID":"yungyung04"},"content":"** *a2. User confirms the cancellation."},{"lineNumber":1132,"author":{"gitID":"yungyung04"},"content":"       \tUse case ends."},{"lineNumber":1133,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":1134,"author":{"gitID":"yungyung04"},"content":"\u003d\u003d\u003d Use case: UC03 - Add a personal schedule"},{"lineNumber":1135,"author":{"gitID":"yungyung04"},"content":"*MSS*"},{"lineNumber":1136,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":1137,"author":{"gitID":"yungyung04"},"content":"1. User adds a schedule by providing the time (date \u0026 duration)"},{"lineNumber":1138,"author":{"gitID":"yungyung04"},"content":"2. TC asks whether user wants to add a personal schedule or to **add a tuition schedule(UC02)**."},{"lineNumber":1139,"author":{"gitID":"yungyung04"},"content":"3. User chooses personal schedule"},{"lineNumber":1140,"author":{"gitID":"yungyung04"},"content":"4. TC prompts user to fill in a description."},{"lineNumber":1141,"author":{"gitID":"yungyung04"},"content":"5. User fills in the description."},{"lineNumber":1142,"author":{"gitID":"yungyung04"},"content":"6. TC confirms that process is done."},{"lineNumber":1143,"author":{"gitID":"yungyung04"},"content":"+"},{"lineNumber":1144,"author":{"gitID":"yungyung04"},"content":"Use Case ends."},{"lineNumber":1145,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":1146,"author":{"gitID":"yungyung04"},"content":"*Extension*"},{"lineNumber":1147,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":1148,"author":{"gitID":"yungyung04"},"content":"[none]"},{"lineNumber":1149,"author":{"gitID":"yungyung04"},"content":"* 1a. Clashing schedule"},{"lineNumber":1150,"author":{"gitID":"yungyung04"},"content":"+"},{"lineNumber":1151,"author":{"gitID":"yungyung04"},"content":"[none]"},{"lineNumber":1152,"author":{"gitID":"yungyung04"},"content":"** 1a1. TC reports that schedule clashes and requests a new timing."},{"lineNumber":1153,"author":{"gitID":"yungyung04"},"content":"** 1a2. User enters a new schedule"},{"lineNumber":1154,"author":{"gitID":"yungyung04"},"content":"** Steps 1a1.-1a2. are repeated until there is no clash."},{"lineNumber":1155,"author":{"gitID":"yungyung04"},"content":"** Use case resumes from Step 2."},{"lineNumber":1156,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":1157,"author":{"gitID":"yungyung04"},"content":"* *a. At any time, user can cancel adding the schedule."},{"lineNumber":1158,"author":{"gitID":"yungyung04"},"content":"[none]"},{"lineNumber":1159,"author":{"gitID":"yungyung04"},"content":"** *a1 TC requests confirmation of the cancelation."},{"lineNumber":1160,"author":{"gitID":"yungyung04"},"content":"** *a2. User confirms the cancellation."},{"lineNumber":1161,"author":{"gitID":"yungyung04"},"content":"** Use case ends."},{"lineNumber":1162,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":1163,"author":{"gitID":"yungyung04"},"content":"\u003d\u003d\u003d Use case: UC04 - Set a contact as a tutee"},{"lineNumber":1164,"author":{"gitID":"yungyung04"},"content":"*MSS*"},{"lineNumber":1165,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":1166,"author":{"gitID":"yungyung04"},"content":"1. User requests to set a contact as a new tutee by providing the tutee’s name"},{"lineNumber":1167,"author":{"gitID":"yungyung04"},"content":"2. TC confirms that the process is done."},{"lineNumber":1168,"author":{"gitID":"yungyung04"},"content":"+"},{"lineNumber":1169,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1170,"author":{"gitID":"-"},"content":""},{"lineNumber":1171,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1172,"author":{"gitID":"yungyung04"},"content":"[none]"},{"lineNumber":1173,"author":{"gitID":"yungyung04"},"content":"* 1a. The name does not exist in address book"},{"lineNumber":1174,"author":{"gitID":"yungyung04"},"content":"+"},{"lineNumber":1175,"author":{"gitID":"yungyung04"},"content":"[none]"},{"lineNumber":1176,"author":{"gitID":"yungyung04"},"content":"** 1a1. TC requests user to retype the tutee’s name."},{"lineNumber":1177,"author":{"gitID":"yungyung04"},"content":"** 1a2. User types in the name."},{"lineNumber":1178,"author":{"gitID":"yungyung04"},"content":"** Steps 1a1.- 1a2. are repeated until a valid name is provided."},{"lineNumber":1179,"author":{"gitID":"yungyung04"},"content":"** Use case resumes from Step 2."},{"lineNumber":1180,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":1181,"author":{"gitID":"yungyung04"},"content":"* *a. At any time, user can cancel the request."},{"lineNumber":1182,"author":{"gitID":"yungyung04"},"content":"[none]"},{"lineNumber":1183,"author":{"gitID":"ChoChihTun"},"content":"** *a1 TC requests confirmation of the cancellation."},{"lineNumber":1184,"author":{"gitID":"yungyung04"},"content":"** *a2. User confirms the cancellation."},{"lineNumber":1185,"author":{"gitID":"yungyung04"},"content":"** Use case ends."},{"lineNumber":1186,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":1187,"author":{"gitID":"yungyung04"},"content":"* 2a. The name is already inside the tutee list."},{"lineNumber":1188,"author":{"gitID":"yungyung04"},"content":"+"},{"lineNumber":1189,"author":{"gitID":"yungyung04"},"content":"[none]"},{"lineNumber":1190,"author":{"gitID":"yungyung04"},"content":"** 2a1. TC indicates that the name is already inside the tutee list."},{"lineNumber":1191,"author":{"gitID":"yungyung04"},"content":"** 2a2.  User confirms the message."},{"lineNumber":1192,"author":{"gitID":"yungyung04"},"content":"** Use case ends."},{"lineNumber":1193,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":1194,"author":{"gitID":"yungyung04"},"content":"\u003d\u003d\u003d Use case: UC05 - Viewing schedule within a date range"},{"lineNumber":1195,"author":{"gitID":"yungyung04"},"content":"*MSS*"},{"lineNumber":1196,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":1197,"author":{"gitID":"yungyung04"},"content":"1. User requests to view schedule."},{"lineNumber":1198,"author":{"gitID":"yungyung04"},"content":"2. TC requests a date range."},{"lineNumber":1199,"author":{"gitID":"yungyung04"},"content":"3. User provides the desired date range."},{"lineNumber":1200,"author":{"gitID":"yungyung04"},"content":"4. TC lists all schedule within the date range."},{"lineNumber":1201,"author":{"gitID":"yungyung04"},"content":"5. User chooses to close the list."},{"lineNumber":1202,"author":{"gitID":"yungyung04"},"content":"+"},{"lineNumber":1203,"author":{"gitID":"yungyung04"},"content":"Use Case ends."},{"lineNumber":1204,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":1205,"author":{"gitID":"yungyung04"},"content":"*Extensions*"},{"lineNumber":1206,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":1207,"author":{"gitID":"yungyung04"},"content":"[none]"},{"lineNumber":1208,"author":{"gitID":"yungyung04"},"content":"* 3a. Invalid date range format is given."},{"lineNumber":1209,"author":{"gitID":"yungyung04"},"content":"+"},{"lineNumber":1210,"author":{"gitID":"yungyung04"},"content":"[none]"},{"lineNumber":1211,"author":{"gitID":"yungyung04"},"content":"** 3a1. TC requests a valid date range input."},{"lineNumber":1212,"author":{"gitID":"yungyung04"},"content":"** 3a2. User provides the date range."},{"lineNumber":1213,"author":{"gitID":"yungyung04"},"content":"** Use case resumes from step 4."},{"lineNumber":1214,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":1215,"author":{"gitID":"yungyung04"},"content":"* *a. At any time, user can cancel adding the schedule."},{"lineNumber":1216,"author":{"gitID":"yungyung04"},"content":"[none]"},{"lineNumber":1217,"author":{"gitID":"yungyung04"},"content":"** *a1 TC requests confirmation of the cancelation."},{"lineNumber":1218,"author":{"gitID":"yungyung04"},"content":"** *a2. User confirms the cancellation."},{"lineNumber":1219,"author":{"gitID":"yungyung04"},"content":"** Use case ends."},{"lineNumber":1220,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":1221,"author":{"gitID":"yungyung04"},"content":"* 4a. No schedule is created within the date range."},{"lineNumber":1222,"author":{"gitID":"yungyung04"},"content":"[none]"},{"lineNumber":1223,"author":{"gitID":"yungyung04"},"content":"**\t4a1. TC reports that no schedule exists within the time range."},{"lineNumber":1224,"author":{"gitID":"yungyung04"},"content":"**\t4a2. User acknowledges."},{"lineNumber":1225,"author":{"gitID":"yungyung04"},"content":"**\tUse case ends."},{"lineNumber":1226,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":1227,"author":{"gitID":"-"},"content":""},{"lineNumber":1228,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1229,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1230,"author":{"gitID":"-"},"content":""},{"lineNumber":1231,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1232,"author":{"gitID":"-"},"content":".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1233,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1234,"author":{"gitID":"ChoChihTun"},"content":".  Users should prefer typing over mouse input or other input methods."},{"lineNumber":1235,"author":{"gitID":"ChoChihTun"},"content":".  Users should be comfortable using CLI apps."},{"lineNumber":1236,"author":{"gitID":"ChoChihTun"},"content":".  The app should not have flow flaws when running."},{"lineNumber":1237,"author":{"gitID":"ChoChihTun"},"content":".  The app may utilise third party libraries, API and plug-ins."},{"lineNumber":1238,"author":{"gitID":"ChoChihTun"},"content":".  The app should be able to access the Internet."},{"lineNumber":1239,"author":{"gitID":"ChoChihTun"},"content":".  The app should be able to perform basic commands without internet access."},{"lineNumber":1240,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":1241,"author":{"gitID":"-"},"content":""},{"lineNumber":1242,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1243,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1244,"author":{"gitID":"-"},"content":""},{"lineNumber":1245,"author":{"gitID":"ChoChihTun"},"content":"[[address-book]] Address Book::"},{"lineNumber":1246,"author":{"gitID":"ChoChihTun"},"content":"An application for storing the contact details."},{"lineNumber":1247,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":1248,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1249,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1250,"author":{"gitID":"-"},"content":""},{"lineNumber":1251,"author":{"gitID":"yungyung04"},"content":"[[natural-language]] Natural Language::"},{"lineNumber":1252,"author":{"gitID":"yungyung04"},"content":"This refers to some predetermined common terms that may be provided as user input."},{"lineNumber":1253,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":1254,"author":{"gitID":"ChoChihTun"},"content":"[[person]] Person::"},{"lineNumber":1255,"author":{"gitID":"ChoChihTun"},"content":"A non tutee contact"},{"lineNumber":1256,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":1257,"author":{"gitID":"ChoChihTun"},"content":"[[personal-task]] Personal Task::"},{"lineNumber":1258,"author":{"gitID":"ChoChihTun"},"content":"Non-tuition activity"},{"lineNumber":1259,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":1260,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":1261,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":1262,"author":{"gitID":"-"},"content":""},{"lineNumber":1263,"author":{"gitID":"ChoChihTun"},"content":"[[task]] Task::"},{"lineNumber":1264,"author":{"gitID":"ChoChihTun"},"content":"This refers to the activities you want to add into your \u0027to-do-list\u0027"},{"lineNumber":1265,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":1266,"author":{"gitID":"ChoChihTun"},"content":"[[tuition-task]] Tuition Task::"},{"lineNumber":1267,"author":{"gitID":"ChoChihTun"},"content":"Teaching a specified tutee in contact list."},{"lineNumber":1268,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":1269,"author":{"gitID":"ChoChihTun"},"content":"[[tutee]] Tutee::"},{"lineNumber":1270,"author":{"gitID":"ChoChihTun"},"content":"A student whom you are giving tuition to"},{"lineNumber":1271,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":1272,"author":{"gitID":"ChoChihTun"},"content":"[[tutee-details]] Tutee Details::"},{"lineNumber":1273,"author":{"gitID":"ChoChihTun"},"content":"These are details that are owned only by tutees, which include tutee\u0027s education level, grade, subject and school"},{"lineNumber":1274,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":1275,"author":{"gitID":"ChoChihTun"},"content":"[[task-list]] Task List / Schedule::"},{"lineNumber":1276,"author":{"gitID":"ChoChihTun"},"content":"These terms are used interchangeably to refer to the list of tasks located in the middle of the app."},{"lineNumber":1277,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":1278,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1279,"author":{"gitID":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":1280,"author":{"gitID":"-"},"content":""},{"lineNumber":1281,"author":{"gitID":"-"},"content":"*Product Name*"},{"lineNumber":1282,"author":{"gitID":"-"},"content":""},{"lineNumber":1283,"author":{"gitID":"-"},"content":"Author: ..."},{"lineNumber":1284,"author":{"gitID":"-"},"content":""},{"lineNumber":1285,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":1286,"author":{"gitID":"-"},"content":""},{"lineNumber":1287,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1288,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1289,"author":{"gitID":"-"},"content":""},{"lineNumber":1290,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":1291,"author":{"gitID":"-"},"content":""},{"lineNumber":1292,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1293,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":1294,"author":{"gitID":"-"},"content":""},{"lineNumber":1295,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1296,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1297,"author":{"gitID":"-"},"content":""},{"lineNumber":1298,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1299,"author":{"gitID":"-"},"content":""},{"lineNumber":1300,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1301,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1302,"author":{"gitID":"-"},"content":""},{"lineNumber":1303,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1304,"author":{"gitID":"-"},"content":""},{"lineNumber":1305,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1306,"author":{"gitID":"-"},"content":""},{"lineNumber":1307,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1308,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1309,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1310,"author":{"gitID":"-"},"content":""},{"lineNumber":1311,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1312,"author":{"gitID":"-"},"content":""},{"lineNumber":1313,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1314,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1315,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1316,"author":{"gitID":"-"},"content":""},{"lineNumber":1317,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1318,"author":{"gitID":"-"},"content":""},{"lineNumber":1319,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person"},{"lineNumber":1320,"author":{"gitID":"-"},"content":""},{"lineNumber":1321,"author":{"gitID":"-"},"content":". Deleting a person while all persons are listed"},{"lineNumber":1322,"author":{"gitID":"-"},"content":""},{"lineNumber":1323,"author":{"gitID":"-"},"content":".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":1324,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1325,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1326,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1327,"author":{"gitID":"-"},"content":"   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1328,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1329,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1330,"author":{"gitID":"-"},"content":""},{"lineNumber":1331,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1332,"author":{"gitID":"-"},"content":""},{"lineNumber":1333,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1334,"author":{"gitID":"-"},"content":""},{"lineNumber":1335,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1336,"author":{"gitID":"-"},"content":""},{"lineNumber":1337,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":1338,"author":{"gitID":"-"},"content":""},{"lineNumber":1339,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"}],"authorContributionMap":{"ChoChihTun":160,"yungyung04":208,"a-shakra":45,"-":923,"raymond511":3}},{"path":"src/test/java/systemtests/ModelHelper.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitID":"yungyung04"},"content":"import java.util.Comparator;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.person.PersonSortUtil;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Contains helper methods to set up {@code Model} for testing."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class ModelHelper {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final Predicate\u003cPerson\u003e PREDICATE_MATCHING_NO_PERSONS \u003d unused -\u003e false;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static void setFilteredList(Model model, List\u003cPerson\u003e toDisplay) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        Optional\u003cPredicate\u003cPerson\u003e\u003e predicate \u003d"},{"lineNumber":24,"author":{"gitID":"-"},"content":"                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(predicate.orElse(PREDICATE_MATCHING_NO_PERSONS));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * @see ModelHelper#setFilteredList(Model, List)"},{"lineNumber":30,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static void setFilteredList(Model model, Person... toDisplay) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        setFilteredList(model, Arrays.asList(toDisplay));"},{"lineNumber":33,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":35,"author":{"gitID":"yungyung04"},"content":"    //@@author yungyung04"},{"lineNumber":36,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"yungyung04"},"content":"     * Updates {@code model}\u0027s sorted list to display persons based on specified category."},{"lineNumber":38,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"yungyung04"},"content":"    public static void setSortedList(Model model, String category) {"},{"lineNumber":40,"author":{"gitID":"yungyung04"},"content":"        Comparator\u003cPerson\u003e comparator \u003d new PersonSortUtil().getComparator(category);"},{"lineNumber":41,"author":{"gitID":"yungyung04"},"content":"        model.sortFilteredPersonList(comparator);"},{"lineNumber":42,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"yungyung04"},"content":"    //@@author"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Returns a predicate that evaluates to true if this {@code Person} equals to {@code other}."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private static Predicate\u003cPerson\u003e getPredicateMatching(Person other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return person -\u003e person.equals(other);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yungyung04":15,"-":36}},{"path":"src/test/java/seedu/address/ui/PersonListPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":6,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalPersons.getTypicalPersons;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class PersonListPanelTest extends GuiUnitTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final ObservableList\u003cPerson\u003e TYPICAL_PERSONS \u003d"},{"lineNumber":22,"author":{"gitID":"-"},"content":"            FXCollections.observableList(getTypicalPersons());"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_PERSON);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private PersonListPanelHandle personListPanelHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        PersonListPanel personListPanel \u003d new PersonListPanel(TYPICAL_PERSONS);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personListPanel);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(personListPanel.getRoot(),"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                PersonListPanelHandle.PERSON_LIST_VIEW_ID));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c TYPICAL_PERSONS.size(); i++) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            personListPanelHandle.navigateToCard(TYPICAL_PERSONS.get(i));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            Person expectedPerson \u003d TYPICAL_PERSONS.get(i);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(expectedPerson, actualCard);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void handleJumpToListRequestEvent() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        postNow(JUMP_TO_SECOND_EVENT);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        PersonCardHandle expectedCard \u003d personListPanelHandle.getPersonCardHandle(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        PersonCardHandle selectedCard \u003d personListPanelHandle.getHandleToSelectedCard();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCardEquals(expectedCard, selectedCard);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yungyung04":1,"-":57}},{"path":"src/test/java/seedu/address/ui/CalendarPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"ChoChihTun"},"content":"import org.junit.Before;"},{"lineNumber":7,"author":{"gitID":"ChoChihTun"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":9,"author":{"gitID":"ChoChihTun"},"content":"import guitests.guihandles.CalendarPanelHandle;"},{"lineNumber":10,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":11,"author":{"gitID":"ChoChihTun"},"content":"//@@author ChoChihTun"},{"lineNumber":12,"author":{"gitID":"ChoChihTun"},"content":"public class CalendarPanelTest extends GuiUnitTest {"},{"lineNumber":13,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":14,"author":{"gitID":"ChoChihTun"},"content":"    private CalendarPanel calendarPanel;"},{"lineNumber":15,"author":{"gitID":"ChoChihTun"},"content":"    private CalendarPanelHandle calendarPanelHandle;"},{"lineNumber":16,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":17,"author":{"gitID":"ChoChihTun"},"content":"    @Before"},{"lineNumber":18,"author":{"gitID":"ChoChihTun"},"content":"    public void setUp() {"},{"lineNumber":19,"author":{"gitID":"ChoChihTun"},"content":"        calendarPanel \u003d new CalendarPanel();"},{"lineNumber":20,"author":{"gitID":"ChoChihTun"},"content":"        guiRobot.interact(() -\u003e calendarPanel \u003d new CalendarPanel());"},{"lineNumber":21,"author":{"gitID":"ChoChihTun"},"content":"        uiPartRule.setUiPart(calendarPanel);"},{"lineNumber":22,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":23,"author":{"gitID":"ChoChihTun"},"content":"        calendarPanelHandle \u003d new CalendarPanelHandle(calendarPanel.getRoot());"},{"lineNumber":24,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":26,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"ChoChihTun"},"content":"    public void display() {"},{"lineNumber":28,"author":{"gitID":"ChoChihTun"},"content":"        // calendar view page is not null"},{"lineNumber":29,"author":{"gitID":"ChoChihTun"},"content":"        assertNotNull(calendarPanel.getRoot());"},{"lineNumber":30,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":31,"author":{"gitID":"ChoChihTun"},"content":"        // default view page of calendar"},{"lineNumber":32,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(calendarPanel.getRoot().getSelectedPage(), calendarPanelHandle.getDefaultCalendarViewPage());"},{"lineNumber":33,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":34,"author":{"gitID":"ChoChihTun"},"content":"        // view page changes to week"},{"lineNumber":35,"author":{"gitID":"ChoChihTun"},"content":"        CalendarPanel.changeViewPage(\u0027w\u0027);"},{"lineNumber":36,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(calendarPanelHandle.getCurrentCalendarViewPage(), calendarPanelHandle.getWeekViewPage());"},{"lineNumber":37,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":38,"author":{"gitID":"ChoChihTun"},"content":"        // view page changes to month"},{"lineNumber":39,"author":{"gitID":"ChoChihTun"},"content":"        CalendarPanel.changeViewPage(\u0027m\u0027);"},{"lineNumber":40,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(calendarPanelHandle.getCurrentCalendarViewPage(), calendarPanelHandle.getMonthViewPage());"},{"lineNumber":41,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":42,"author":{"gitID":"ChoChihTun"},"content":"        // view page changes to year"},{"lineNumber":43,"author":{"gitID":"ChoChihTun"},"content":"        CalendarPanel.changeViewPage(\u0027y\u0027);"},{"lineNumber":44,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(calendarPanelHandle.getCurrentCalendarViewPage(), calendarPanelHandle.getYearViewPage());"},{"lineNumber":45,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":46,"author":{"gitID":"ChoChihTun"},"content":"        // view page changes to day (default)"},{"lineNumber":47,"author":{"gitID":"ChoChihTun"},"content":"        CalendarPanel.changeViewPage(\u0027d\u0027);"},{"lineNumber":48,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(calendarPanelHandle.getCurrentCalendarViewPage(),"},{"lineNumber":49,"author":{"gitID":"ChoChihTun"},"content":"                calendarPanelHandle.getDefaultCalendarViewPage());"},{"lineNumber":50,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"ChoChihTun"},"content":"}"}],"authorContributionMap":{"ChoChihTun":46,"-":5}},{"path":"src/test/java/seedu/address/ui/CommandBoxTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"ChoChihTun"},"content":"import org.junit.BeforeClass;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"ChoChihTun"},"content":"import systemtests.SystemTestSetupHelper;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class CommandBoxTest extends GuiUnitTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private CommandBoxHandle commandBoxHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"ChoChihTun"},"content":"    @BeforeClass"},{"lineNumber":31,"author":{"gitID":"ChoChihTun"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":32,"author":{"gitID":"ChoChihTun"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":33,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        Logic logic \u003d new LogicManager(model);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(commandBox);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithSuccessfulCommand() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithFailedCommand() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // verify that style is changed correctly even after multiple consecutive failed commands"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void commandBox_handleKeyPress() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.ESCAPE);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.A);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithUp() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // two commands (latest command is failure)"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, thirdCommand);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithDown() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        // two commands"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * Runs a command that fails, then verifies that \u003cbr\u003e"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     *      - the text remains \u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."},{"lineNumber":139,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    private void assertBehaviorForFailedCommand() {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * Runs a command that succeeds, then verifies that \u003cbr\u003e"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     *      - the text is cleared \u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    private void assertBehaviorForSuccessfulCommand() {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertEquals(\"\", commandBoxHandle.getInput());"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."},{"lineNumber":159,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        guiRobot.push(keycode);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, commandBoxHandle.getInput());"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ChoChihTun":7,"-":157}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":11,"author":{"gitID":"a-shakra"},"content":"import guitests.guihandles.TaskCardHandle;"},{"lineNumber":12,"author":{"gitID":"a-shakra"},"content":"import guitests.guihandles.TaskListPanelHandle;"},{"lineNumber":13,"author":{"gitID":"a-shakra"},"content":"import seedu.address.model.Task;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"a-shakra"},"content":"    public static void assertCardEquals(TaskCardHandle expectedCard, TaskCardHandle actualCard) {"},{"lineNumber":36,"author":{"gitID":"a-shakra"},"content":"        assertEquals(expectedCard.getDescription(), actualCard.getDescription());"},{"lineNumber":37,"author":{"gitID":"a-shakra"},"content":"        assertEquals(expectedCard.getDuration(), actualCard.getDuration());"},{"lineNumber":38,"author":{"gitID":"a-shakra"},"content":"        assertEquals(expectedCard.getDateAndTime(), actualCard.getDateAndTime());"},{"lineNumber":39,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                actualCard.getTags());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"a-shakra"},"content":"    public static void assertCardDisplaysTask(Task expectedTask, TaskCardHandle actualCard) {"},{"lineNumber":57,"author":{"gitID":"a-shakra"},"content":"        assertEquals(expectedTask.getDescription(), actualCard.getDescription());"},{"lineNumber":58,"author":{"gitID":"a-shakra"},"content":"        assertEquals(expectedTask.getDuration(), actualCard.getDuration());"},{"lineNumber":59,"author":{"gitID":"a-shakra"},"content":"        assertEquals(expectedTask.getTaskDateTime().toString(), actualCard.getDateAndTime().toString());"},{"lineNumber":60,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":62,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c persons.length; i++) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"a-shakra"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"a-shakra"},"content":"     * Asserts that the list in {@code taskListPanelHandle} displays the details of {@code tasks} correctly and"},{"lineNumber":75,"author":{"gitID":"a-shakra"},"content":"     * in the correct order."},{"lineNumber":76,"author":{"gitID":"a-shakra"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"a-shakra"},"content":"    public static void assertListMatching(TaskListPanelHandle taskListPanelHandle, Task... tasks) {"},{"lineNumber":78,"author":{"gitID":"a-shakra"},"content":"        for (int i \u003d 0; i \u003c tasks.length; i++) {"},{"lineNumber":79,"author":{"gitID":"a-shakra"},"content":"            assertCardDisplaysTask(tasks[i], taskListPanelHandle.getTaskCardHandle(i));"},{"lineNumber":80,"author":{"gitID":"a-shakra"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"a-shakra"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"a-shakra"},"content":"     * Asserts that the list in {@code taskListPanelHandle} displays the details of {@code tasks} correctly and"},{"lineNumber":93,"author":{"gitID":"a-shakra"},"content":"     * in the correct order."},{"lineNumber":94,"author":{"gitID":"a-shakra"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"a-shakra"},"content":"    public static void assertListMatching(TaskListPanelHandle taskListPanelHandle, List\u003cTask\u003e tasks) {"},{"lineNumber":96,"author":{"gitID":"a-shakra"},"content":"        assertListMatching(taskListPanelHandle, tasks.toArray(new Task[0]));"},{"lineNumber":97,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"a-shakra"},"content":"    public static void assertListSize(TaskListPanelHandle taskListPanelHandle, int size) {"},{"lineNumber":111,"author":{"gitID":"a-shakra"},"content":"        int numberOfTasks \u003d taskListPanelHandle.getListSize();"},{"lineNumber":112,"author":{"gitID":"a-shakra"},"content":"        assertEquals(size, numberOfTasks);"},{"lineNumber":113,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":"}"},{"lineNumber":122,"author":{"gitID":"a-shakra"},"content":""}],"authorContributionMap":{"a-shakra":40,"-":82}},{"path":"src/test/java/systemtests/FindPersonCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EDUCATION_LEVEL_DESC_AMY;"},{"lineNumber":9,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EDUCATION_LEVEL_DESC_BOB;"},{"lineNumber":10,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":11,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":12,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GRADE_DESC_AMY;"},{"lineNumber":13,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GRADE_DESC_BOB;"},{"lineNumber":14,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SCHOOL_DESC_AMY;"},{"lineNumber":19,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_AMY;"},{"lineNumber":20,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":21,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":23,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EDUCATION_LEVEL_BOB;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":25,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_BOB;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":28,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHOOL_AMY;"},{"lineNumber":29,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_AMY;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":32,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_EDUCATION_LEVEL;"},{"lineNumber":33,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_GRADE;"},{"lineNumber":34,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_NAME;"},{"lineNumber":35,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_SCHOOL;"},{"lineNumber":36,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_SUBJECT;"},{"lineNumber":37,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalPersons.BENSON;"},{"lineNumber":38,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalPersons.CARL;"},{"lineNumber":39,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalPersons.DANIEL;"},{"lineNumber":40,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":41,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalTutees.AMYTUTEE;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"yungyung04"},"content":"import seedu.address.logic.commands.AddTuteeCommand;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":50,"author":{"gitID":"yungyung04"},"content":"import seedu.address.logic.commands.FindPersonCommand;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":55,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.tutee.Tutee;"},{"lineNumber":56,"author":{"gitID":"yungyung04"},"content":"import seedu.address.testutil.TuteeBuilder;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"yungyung04"},"content":"public class FindPersonCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void find() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"},{"lineNumber":64,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":65,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":66,"author":{"gitID":"yungyung04"},"content":"        String command \u003d \"   \" + FindPersonCommand.COMMAND_WORD + \" \" + CATEGORY_NAME"},{"lineNumber":67,"author":{"gitID":"yungyung04"},"content":"                + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":74,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":75,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":76,"author":{"gitID":"yungyung04"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" \" + CATEGORY_NAME + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"},{"lineNumber":81,"author":{"gitID":"yungyung04"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" \" + CATEGORY_NAME + \" Carl\";"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"},{"lineNumber":87,"author":{"gitID":"yungyung04"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" \" + CATEGORY_NAME + \" Benson Daniel\";"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"},{"lineNumber":93,"author":{"gitID":"yungyung04"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" \" + CATEGORY_NAME + \" Daniel Benson\";"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"},{"lineNumber":98,"author":{"gitID":"yungyung04"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" \" + CATEGORY_NAME + \" Daniel Benson Daniel\";"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":103,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":104,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":105,"author":{"gitID":"yungyung04"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" \" + CATEGORY_NAME + \" Daniel Benson NonMatchingKeyWord\";"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"},{"lineNumber":122,"author":{"gitID":"yungyung04"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" \" + CATEGORY_NAME + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"},{"lineNumber":129,"author":{"gitID":"yungyung04"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" \" + CATEGORY_NAME + \" MeIeR\";"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found */"},{"lineNumber":134,"author":{"gitID":"yungyung04"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" \" + CATEGORY_NAME + \" Mei\";"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"},{"lineNumber":140,"author":{"gitID":"yungyung04"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" \" + CATEGORY_NAME + \" Meiers\";"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        /* Case: find person not in address book -\u003e 0 persons found */"},{"lineNumber":146,"author":{"gitID":"yungyung04"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" \" + CATEGORY_NAME + \" Mark\";"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        /* Case: find address of person in address book -\u003e 0 persons found */"},{"lineNumber":151,"author":{"gitID":"yungyung04"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" \" + CATEGORY_NAME + \" \" + DANIEL.getAddress().value;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        /* Case: find email of person in address book -\u003e 0 persons found */"},{"lineNumber":156,"author":{"gitID":"yungyung04"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" \" + CATEGORY_NAME + \" \" + DANIEL.getEmail().value;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        /* Case: find tags of person in address book -\u003e 0 persons found */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"},{"lineNumber":162,"author":{"gitID":"yungyung04"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" \" + CATEGORY_NAME + \" \" + tags.get(0).tagName;"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"yungyung04"},"content":"        //@@author yungyung04"},{"lineNumber":167,"author":{"gitID":"yungyung04"},"content":"        /* Adding some tutees into the filtered person list to test whether Find Person command can find tutees */"},{"lineNumber":168,"author":{"gitID":"yungyung04"},"content":"        // adds AMYTUTEE"},{"lineNumber":169,"author":{"gitID":"yungyung04"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":170,"author":{"gitID":"yungyung04"},"content":"        command \u003d AddTuteeCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":171,"author":{"gitID":"yungyung04"},"content":"                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + SUBJECT_DESC_AMY + \" \" + GRADE_DESC_AMY + \" \""},{"lineNumber":172,"author":{"gitID":"yungyung04"},"content":"                + EDUCATION_LEVEL_DESC_AMY + \" \" + SCHOOL_DESC_AMY + \" \" + TAG_DESC_FRIEND + \" \";"},{"lineNumber":173,"author":{"gitID":"yungyung04"},"content":"        addTutee(command, AMYTUTEE, expectedModel);"},{"lineNumber":174,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":175,"author":{"gitID":"yungyung04"},"content":"        //adds Bob whose subject and school are same as Amy\u0027s"},{"lineNumber":176,"author":{"gitID":"yungyung04"},"content":"        Tutee modifiedBobTutee \u003d new TuteeBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":177,"author":{"gitID":"yungyung04"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withSubject(VALID_SUBJECT_AMY)"},{"lineNumber":178,"author":{"gitID":"yungyung04"},"content":"                .withGrade(VALID_GRADE_BOB).withEducationLevel(VALID_EDUCATION_LEVEL_BOB).withSchool(VALID_SCHOOL_AMY)"},{"lineNumber":179,"author":{"gitID":"yungyung04"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":180,"author":{"gitID":"yungyung04"},"content":"        command \u003d AddTuteeCommand.COMMAND_WORD + \"  \" + NAME_DESC_BOB + \"  \" + PHONE_DESC_BOB + \" \""},{"lineNumber":181,"author":{"gitID":"yungyung04"},"content":"                + EMAIL_DESC_BOB + \"   \" + ADDRESS_DESC_BOB + \"   \" + SUBJECT_DESC_AMY + \" \" + GRADE_DESC_BOB + \" \""},{"lineNumber":182,"author":{"gitID":"yungyung04"},"content":"                + EDUCATION_LEVEL_DESC_BOB + \" \" + SCHOOL_DESC_AMY + \" \" + TAG_DESC_HUSBAND + \" \" + TAG_DESC_FRIEND;"},{"lineNumber":183,"author":{"gitID":"yungyung04"},"content":"        addTutee(command, modifiedBobTutee, expectedModel);"},{"lineNumber":184,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":185,"author":{"gitID":"yungyung04"},"content":"        /* Case: find education level of a tutee in address book -\u003e 1 person found */"},{"lineNumber":186,"author":{"gitID":"yungyung04"},"content":"        ModelHelper.setFilteredList(expectedModel, AMYTUTEE);"},{"lineNumber":187,"author":{"gitID":"yungyung04"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" \" + CATEGORY_EDUCATION_LEVEL + \" \""},{"lineNumber":188,"author":{"gitID":"yungyung04"},"content":"                + AMYTUTEE.getEducationLevel().toString();"},{"lineNumber":189,"author":{"gitID":"yungyung04"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":190,"author":{"gitID":"yungyung04"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":191,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":192,"author":{"gitID":"yungyung04"},"content":"        /* Case: find grade of a tutee using command alias in address book -\u003e 1 person found */"},{"lineNumber":193,"author":{"gitID":"yungyung04"},"content":"        command \u003d FindPersonCommand.COMMAND_ALIAS + \" \" + CATEGORY_GRADE + \" \""},{"lineNumber":194,"author":{"gitID":"yungyung04"},"content":"                + AMYTUTEE.getGrade().toString();"},{"lineNumber":195,"author":{"gitID":"yungyung04"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":196,"author":{"gitID":"yungyung04"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":197,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":198,"author":{"gitID":"yungyung04"},"content":"        /* Case: find school of a tutee in address book -\u003e 2 persons found */"},{"lineNumber":199,"author":{"gitID":"yungyung04"},"content":"        ModelHelper.setFilteredList(expectedModel, AMYTUTEE, modifiedBobTutee);"},{"lineNumber":200,"author":{"gitID":"yungyung04"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" \" + CATEGORY_SCHOOL + \" \""},{"lineNumber":201,"author":{"gitID":"yungyung04"},"content":"                + AMYTUTEE.getSchool().toString();"},{"lineNumber":202,"author":{"gitID":"yungyung04"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":203,"author":{"gitID":"yungyung04"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":204,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":205,"author":{"gitID":"yungyung04"},"content":"        /* Case: find subject of a tutee in address book -\u003e 2 persons found */"},{"lineNumber":206,"author":{"gitID":"yungyung04"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" \" + CATEGORY_SUBJECT + \" \""},{"lineNumber":207,"author":{"gitID":"yungyung04"},"content":"                + AMYTUTEE.getSubject().toString();"},{"lineNumber":208,"author":{"gitID":"yungyung04"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":209,"author":{"gitID":"yungyung04"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":210,"author":{"gitID":"yungyung04"},"content":"        //@@author"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"        /* Case: find person in empty address book -\u003e 0 persons found */"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":214,"author":{"gitID":"yungyung04"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" \" + CATEGORY_NAME + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        command \u003d \"FiNd Meier\";"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":236,"author":{"gitID":"yungyung04"},"content":"        String expectedResultMessage \u003d String.format(FindPersonCommand.MESSAGE_SUCCESS + \"\\n\""},{"lineNumber":237,"author":{"gitID":"yungyung04"},"content":"                + MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":248,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":253,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":263,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yungyung04":96,"ChoChihTun":3,"-":164}},{"path":"src/test/java/seedu/address/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedPerson;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedTag;"},{"lineNumber":20,"author":{"gitID":"a-shakra"},"content":"import seedu.address.storage.XmlAdaptedTask;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":24,"author":{"gitID":"a-shakra"},"content":"import seedu.address.testutil.TaskBuilder;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"a-shakra"},"content":"//@@author a-shakra"},{"lineNumber":28,"author":{"gitID":"a-shakra"},"content":"public class XmlUtilTest {"},{"lineNumber":29,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":30,"author":{"gitID":"a-shakra"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":31,"author":{"gitID":"a-shakra"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":32,"author":{"gitID":"a-shakra"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":33,"author":{"gitID":"a-shakra"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validAddressBook.xml\");"},{"lineNumber":34,"author":{"gitID":"a-shakra"},"content":"    private static final File MISSING_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingPersonField.xml\");"},{"lineNumber":35,"author":{"gitID":"a-shakra"},"content":"    private static final File INVALID_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonField.xml\");"},{"lineNumber":36,"author":{"gitID":"a-shakra"},"content":"    private static final File VALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"validPerson.xml\");"},{"lineNumber":37,"author":{"gitID":"a-shakra"},"content":"    private static final File MISSING_TASK_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingTaskField.xml\");"},{"lineNumber":38,"author":{"gitID":"a-shakra"},"content":"    private static final File INVALID_TASK_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidTaskField.xml\");"},{"lineNumber":39,"author":{"gitID":"a-shakra"},"content":"    private static final File VALID_TASK_FILE \u003d new File(TEST_DATA_FOLDER + \"validTask.xml\");"},{"lineNumber":40,"author":{"gitID":"a-shakra"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\"));"},{"lineNumber":41,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":42,"author":{"gitID":"a-shakra"},"content":"    private static final String VALID_DURATION \u003d \"3h20m\";"},{"lineNumber":43,"author":{"gitID":"a-shakra"},"content":"    private static final String VALID_DESCRIPTION \u003d \"exampleTask1\";"},{"lineNumber":44,"author":{"gitID":"a-shakra"},"content":"    private static final String VALID_DATEANDTIME \u003d \"02/03/2018T03:20\";"},{"lineNumber":45,"author":{"gitID":"a-shakra"},"content":"    private static final String INVALID_DATEANDTIME \u003d \"2018-00-00T03:20\";"},{"lineNumber":46,"author":{"gitID":"a-shakra"},"content":"    //@@author"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"9482asf424\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Hans Muster\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"9482424\";"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"hans@example\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"4th street\";"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(null, AddressBook.class);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertEquals(9, dataFromFile.getPersonList().size());"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertEquals(0, dataFromFile.getTagList().size());"},{"lineNumber":87,"author":{"gitID":"a-shakra"},"content":"        assertEquals(3, dataFromFile.getTaskList().size());"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":93,"author":{"gitID":"-"},"content":"                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":95,"author":{"gitID":"-"},"content":"                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"a-shakra"},"content":"    //@@author a-shakra"},{"lineNumber":100,"author":{"gitID":"a-shakra"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"a-shakra"},"content":"    public void xmlAdaptedTaskFromFile_fileWithMissingTaskField_validResult() throws Exception {"},{"lineNumber":102,"author":{"gitID":"a-shakra"},"content":"        XmlAdaptedTask actualTask \u003d XmlUtil.getDataFromFile("},{"lineNumber":103,"author":{"gitID":"a-shakra"},"content":"                MISSING_TASK_FIELD_FILE, XmlAdaptedTaskWithRootElement.class);"},{"lineNumber":104,"author":{"gitID":"a-shakra"},"content":"        XmlAdaptedTask expectedTask \u003d new XmlAdaptedTask("},{"lineNumber":105,"author":{"gitID":"a-shakra"},"content":"                \"exampleTask1\", \"3:20\", null);"},{"lineNumber":106,"author":{"gitID":"a-shakra"},"content":"        assertEquals(expectedTask, actualTask);"},{"lineNumber":107,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"a-shakra"},"content":"    //@@author"},{"lineNumber":109,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":113,"author":{"gitID":"-"},"content":"                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":115,"author":{"gitID":"-"},"content":"                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"a-shakra"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"a-shakra"},"content":"    public void xmlAdaptedTaskFromFile_fileWithInvalidTaskField_validResult() throws Exception {"},{"lineNumber":121,"author":{"gitID":"a-shakra"},"content":"        XmlAdaptedTask actualTask \u003d XmlUtil.getDataFromFile("},{"lineNumber":122,"author":{"gitID":"a-shakra"},"content":"                INVALID_TASK_FIELD_FILE, XmlAdaptedTaskWithRootElement.class);"},{"lineNumber":123,"author":{"gitID":"a-shakra"},"content":"        XmlAdaptedTask expectedTask \u003d new XmlAdaptedTask("},{"lineNumber":124,"author":{"gitID":"a-shakra"},"content":"                VALID_DESCRIPTION, VALID_DURATION, INVALID_DATEANDTIME);"},{"lineNumber":125,"author":{"gitID":"a-shakra"},"content":"        assertEquals(expectedTask, actualTask);"},{"lineNumber":126,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":131,"author":{"gitID":"-"},"content":"                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":133,"author":{"gitID":"-"},"content":"                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"a-shakra"},"content":"    @Test"},{"lineNumber":138,"author":{"gitID":"a-shakra"},"content":"    public void xmlAdaptedTaskFromFile_fileWithValidTaskField_validResult() throws Exception {"},{"lineNumber":139,"author":{"gitID":"a-shakra"},"content":"        XmlAdaptedTask actualTask \u003d XmlUtil.getDataFromFile("},{"lineNumber":140,"author":{"gitID":"a-shakra"},"content":"                VALID_TASK_FILE, XmlAdaptedTaskWithRootElement.class);"},{"lineNumber":141,"author":{"gitID":"a-shakra"},"content":"        XmlAdaptedTask expectedTask \u003d new XmlAdaptedTask("},{"lineNumber":142,"author":{"gitID":"a-shakra"},"content":"                VALID_DESCRIPTION, VALID_DURATION, VALID_DATEANDTIME);"},{"lineNumber":143,"author":{"gitID":"a-shakra"},"content":"        assertEquals(expectedTask, actualTask);"},{"lineNumber":144,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(null, new AddressBook());"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        dataToWrite \u003d new XmlSerializableAddressBook("},{"lineNumber":174,"author":{"gitID":"a-shakra"},"content":"                builder.withPerson(new PersonBuilder().build()).withTag(\"Friends\").withTask(new TaskBuilder()"},{"lineNumber":175,"author":{"gitID":"a-shakra"},"content":"                        .buildPersonalTask()).build());"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":183,"author":{"gitID":"a-shakra"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson,"},{"lineNumber":184,"author":{"gitID":"a-shakra"},"content":"     * @code XmlAdaptedTask} objects."},{"lineNumber":185,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    @XmlRootElement(name \u003d \"person\")"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"},{"lineNumber":188,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":189,"author":{"gitID":"a-shakra"},"content":"    //@@author a-shakra"},{"lineNumber":190,"author":{"gitID":"a-shakra"},"content":"    @XmlRootElement(name \u003d \"tasks\")"},{"lineNumber":191,"author":{"gitID":"a-shakra"},"content":"    private static class XmlAdaptedTaskWithRootElement extends XmlAdaptedTask {}"},{"lineNumber":192,"author":{"gitID":"a-shakra"},"content":"    //@@author"},{"lineNumber":193,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"a-shakra":61,"-":132}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"ChoChihTun"},"content":"import org.junit.BeforeClass;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"ChoChihTun"},"content":"import systemtests.SystemTestSetupHelper;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private Logic logic \u003d new LogicManager(model);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"ChoChihTun"},"content":"    @BeforeClass"},{"lineNumber":31,"author":{"gitID":"ChoChihTun"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":32,"author":{"gitID":"ChoChihTun"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":33,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(invalidCommand);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(deleteCommand);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void execute_validCommand_success() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(listCommand);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        logic.getFilteredPersonList().remove(0);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"a-shakra"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"a-shakra"},"content":"    public void getFilteredTaskList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":65,"author":{"gitID":"a-shakra"},"content":"        logic.getFilteredTaskList().remove(0);"},{"lineNumber":66,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Also confirms that {@code expectedModel} is as specified."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     *      - {@code expectedModel}\u0027s address book was saved to the storage file."},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                                           String expectedMessage, Model expectedModel) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, null);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, e.getClass());"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * {@code HistoryCommand}."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    private void assertHistoryCorrect(String... expectedCommands) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            String expectedMessage \u003d String.format("},{"lineNumber":131,"author":{"gitID":"-"},"content":"                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        } catch (ParseException | CommandException e) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ChoChihTun":7,"a-shakra":5,"-":125}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":25,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalPersons.BOB;"},{"lineNumber":26,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"public class EditCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":56,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":57,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""},{"lineNumber":60,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        /* Case: undo editing the last person in the list -\u003e last person restored */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        /* Case: redo editing the last person in the list -\u003e last person edited again */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        model.updatePerson("},{"lineNumber":74,"author":{"gitID":"-"},"content":"                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as existing values -\u003e edited */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, BOB);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"},{"lineNumber":107,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":108,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":127,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":135,"author":{"gitID":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"},{"lineNumber":139,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,"},{"lineNumber":143,"author":{"gitID":"-"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC,"},{"lineNumber":147,"author":{"gitID":"-"},"content":"                Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_ADDRESS_DESC,"},{"lineNumber":151,"author":{"gitID":"-"},"content":"                Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_TAG_DESC,"},{"lineNumber":155,"author":{"gitID":"-"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        executeCommand(PersonUtil.getAddCommand(BOB));"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":163,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":168,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":170,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":172,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":173,"author":{"gitID":"ChoChihTun"},"content":"    public void editAlias() throws Exception {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":179,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":180,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":182,"author":{"gitID":"ChoChihTun"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_ALIAS + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""},{"lineNumber":183,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":185,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        /* Case: undo editing the last person in the list -\u003e last person restored */"},{"lineNumber":189,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d UndoCommand.COMMAND_ALIAS;"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        /* Case: redo editing the last person in the list -\u003e last person edited again */"},{"lineNumber":194,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d RedoCommand.COMMAND_ALIAS;"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        model.updatePerson("},{"lineNumber":197,"author":{"gitID":"-"},"content":"                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as existing values -\u003e edited */"},{"lineNumber":201,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d EditCommand.COMMAND_ALIAS + \" \" + index.getOneBased()"},{"lineNumber":202,"author":{"gitID":"ChoChihTun"},"content":"                + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":203,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, BOB);"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":208,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d EditCommand.COMMAND_ALIAS + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":215,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d EditCommand.COMMAND_ALIAS + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":225,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d EditCommand.COMMAND_ALIAS + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"},{"lineNumber":231,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":232,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":235,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandFailure(EditCommand.COMMAND_ALIAS + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":236,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":241,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandFailure(EditCommand.COMMAND_ALIAS + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":242,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":245,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandFailure(EditCommand.COMMAND_ALIAS + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":246,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":250,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandFailure(EditCommand.COMMAND_ALIAS + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":251,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":254,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandFailure(EditCommand.COMMAND_ALIAS + NAME_DESC_BOB,"},{"lineNumber":255,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":258,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandFailure(EditCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":259,"author":{"gitID":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":262,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandFailure(EditCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"},{"lineNumber":263,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":266,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandFailure(EditCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,"},{"lineNumber":267,"author":{"gitID":"-"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":270,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandFailure(EditCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC,"},{"lineNumber":271,"author":{"gitID":"-"},"content":"                Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":274,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandFailure(EditCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_ADDRESS_DESC,"},{"lineNumber":275,"author":{"gitID":"-"},"content":"                Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":278,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandFailure(EditCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_TAG_DESC,"},{"lineNumber":279,"author":{"gitID":"-"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        executeCommand(PersonUtil.getAddCommand(BOB));"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":286,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d EditCommand.COMMAND_ALIAS + \" \" + index.getOneBased()"},{"lineNumber":287,"author":{"gitID":"ChoChihTun"},"content":"                + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":288,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":289,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":292,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d EditCommand.COMMAND_ALIAS + \" \" + index.getOneBased()"},{"lineNumber":293,"author":{"gitID":"ChoChihTun"},"content":"                + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":294,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":295,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":296,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":299,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"},{"lineNumber":300,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":301,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":302,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"},{"lineNumber":303,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":304,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"},{"lineNumber":305,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toEdit, editedPerson, null);"},{"lineNumber":306,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":307,"author":{"gitID":"-"},"content":""},{"lineNumber":308,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":309,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":310,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":311,"author":{"gitID":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"},{"lineNumber":312,"author":{"gitID":"-"},"content":"     * updated to values specified {@code editedPerson}.\u003cbr\u003e"},{"lineNumber":313,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":314,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":315,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":316,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"},{"lineNumber":317,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":318,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":319,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":320,"author":{"gitID":"-"},"content":"            expectedModel.updatePerson("},{"lineNumber":321,"author":{"gitID":"-"},"content":"                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"},{"lineNumber":322,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":323,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException | PersonNotFoundException e) {"},{"lineNumber":324,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":325,"author":{"gitID":"-"},"content":"                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":326,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":327,"author":{"gitID":"-"},"content":""},{"lineNumber":328,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":329,"author":{"gitID":"-"},"content":"                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"},{"lineNumber":330,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":331,"author":{"gitID":"-"},"content":""},{"lineNumber":332,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":333,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":334,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":335,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":336,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":337,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":338,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":339,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":340,"author":{"gitID":"-"},"content":""},{"lineNumber":341,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":342,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":343,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":344,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":345,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":346,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":347,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":348,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":349,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":350,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":351,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":352,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":353,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":354,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":355,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":356,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":357,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":358,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":359,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":360,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":361,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":362,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":363,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":364,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":365,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":366,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":367,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":368,"author":{"gitID":"-"},"content":""},{"lineNumber":369,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":370,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":371,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":372,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":373,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":374,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":375,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":376,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":377,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":378,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":379,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":380,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":381,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":382,"author":{"gitID":"-"},"content":""},{"lineNumber":383,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":384,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":385,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":386,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":387,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":388,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":389,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yungyung04":2,"ChoChihTun":27,"-":360}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EDUCATION_LEVEL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EDUCATION_LEVEL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":10,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GRADE_DESC_AMY;"},{"lineNumber":11,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GRADE_DESC_BOB;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":20,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SCHOOL_DESC_AMY;"},{"lineNumber":21,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SCHOOL_DESC_BOB;"},{"lineNumber":22,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_AMY;"},{"lineNumber":23,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_BOB;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":28,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EDUCATION_LEVEL_AMY;"},{"lineNumber":29,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EDUCATION_LEVEL_BOB;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":32,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_AMY;"},{"lineNumber":33,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_BOB;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":37,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHOOL_AMY;"},{"lineNumber":38,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHOOL_BOB;"},{"lineNumber":39,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_AMY;"},{"lineNumber":40,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_BOB;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // no index specified"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // no field specified"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // no index and no field specified"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // negative index"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // zero index"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS); // invalid address"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // invalid phone followed by valid email"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"},{"lineNumber":121,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":144,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        // name"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        // phone"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        // email"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        // address"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        // tags"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":182,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":183,"author":{"gitID":"ChoChihTun"},"content":"        //@@author ChoChihTun"},{"lineNumber":184,"author":{"gitID":"ChoChihTun"},"content":"        // subject"},{"lineNumber":185,"author":{"gitID":"ChoChihTun"},"content":"        userInput \u003d targetIndex.getOneBased() + SUBJECT_DESC_AMY;"},{"lineNumber":186,"author":{"gitID":"ChoChihTun"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withSubject(VALID_SUBJECT_AMY).build();"},{"lineNumber":187,"author":{"gitID":"ChoChihTun"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":188,"author":{"gitID":"ChoChihTun"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":189,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":190,"author":{"gitID":"ChoChihTun"},"content":"        // grade"},{"lineNumber":191,"author":{"gitID":"ChoChihTun"},"content":"        userInput \u003d targetIndex.getOneBased() + GRADE_DESC_AMY;"},{"lineNumber":192,"author":{"gitID":"ChoChihTun"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withGrade(VALID_GRADE_AMY).build();"},{"lineNumber":193,"author":{"gitID":"ChoChihTun"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":194,"author":{"gitID":"ChoChihTun"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":195,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":196,"author":{"gitID":"ChoChihTun"},"content":"        // education level"},{"lineNumber":197,"author":{"gitID":"ChoChihTun"},"content":"        userInput \u003d targetIndex.getOneBased() + EDUCATION_LEVEL_DESC_AMY;"},{"lineNumber":198,"author":{"gitID":"ChoChihTun"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEducationLevel(VALID_EDUCATION_LEVEL_AMY).build();"},{"lineNumber":199,"author":{"gitID":"ChoChihTun"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":200,"author":{"gitID":"ChoChihTun"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":201,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":202,"author":{"gitID":"ChoChihTun"},"content":"        // school"},{"lineNumber":203,"author":{"gitID":"ChoChihTun"},"content":"        userInput \u003d targetIndex.getOneBased() + SCHOOL_DESC_AMY;"},{"lineNumber":204,"author":{"gitID":"ChoChihTun"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withSchool(VALID_SCHOOL_AMY).build();"},{"lineNumber":205,"author":{"gitID":"ChoChihTun"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":206,"author":{"gitID":"ChoChihTun"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":207,"author":{"gitID":"ChoChihTun"},"content":"        //@@author"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":214,"author":{"gitID":"ChoChihTun"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY  + SUBJECT_DESC_AMY"},{"lineNumber":215,"author":{"gitID":"ChoChihTun"},"content":"                + GRADE_DESC_AMY + EDUCATION_LEVEL_DESC_AMY + SCHOOL_DESC_AMY + TAG_DESC_FRIEND"},{"lineNumber":216,"author":{"gitID":"ChoChihTun"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + SUBJECT_DESC_BOB + GRADE_DESC_BOB"},{"lineNumber":217,"author":{"gitID":"ChoChihTun"},"content":"                + EDUCATION_LEVEL_DESC_BOB + SCHOOL_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":220,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":221,"author":{"gitID":"ChoChihTun"},"content":"                .withSubject(VALID_SUBJECT_BOB).withGrade(VALID_GRADE_BOB).withEducationLevel(VALID_EDUCATION_LEVEL_BOB)"},{"lineNumber":222,"author":{"gitID":"ChoChihTun"},"content":"                .withSchool(VALID_SCHOOL_BOB).build();"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        // no other valid values specified"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"        // other valid values specified"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"},{"lineNumber":239,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB;"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":241,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":255,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":256,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ChoChihTun":48,"-":208}},{"path":"src/test/java/seedu/address/logic/parser/NaturalLanguageIdentifierTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yungyung04"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":3,"author":{"gitID":"yungyung04"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"yungyung04"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":5,"author":{"gitID":"yungyung04"},"content":"import static org.junit.Assert.assertArrayEquals;"},{"lineNumber":6,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.parser.NaturalLanguageIdentifier.NATURAL_CURRENT_MONTH;"},{"lineNumber":7,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.parser.NaturalLanguageIdentifier.NATURAL_LAST_MONTH;"},{"lineNumber":8,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.parser.NaturalLanguageIdentifier.NATURAL_NEXT_MONTH;"},{"lineNumber":9,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.parser.NaturalLanguageIdentifier.NATURAL_NOW;"},{"lineNumber":10,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":11,"author":{"gitID":"yungyung04"},"content":"import java.time.LocalDateTime;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":17,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":18,"author":{"gitID":"yungyung04"},"content":"//@@author yungyung04"},{"lineNumber":19,"author":{"gitID":"yungyung04"},"content":"public class NaturalLanguageIdentifierTest {"},{"lineNumber":20,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":21,"author":{"gitID":"yungyung04"},"content":"    @Rule"},{"lineNumber":22,"author":{"gitID":"yungyung04"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":23,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":24,"author":{"gitID":"yungyung04"},"content":"    private NaturalLanguageIdentifier identifier \u003d NaturalLanguageIdentifier.getInstance();"},{"lineNumber":25,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":26,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"yungyung04"},"content":"    public void getInstance_firstTimeCalled_returnInstanceOfClass() {"},{"lineNumber":28,"author":{"gitID":"yungyung04"},"content":"        assertTrue(identifier instanceof NaturalLanguageIdentifier);"},{"lineNumber":29,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":31,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"yungyung04"},"content":"    public void getInstance_subsequentCalls_returnSameInstance() {"},{"lineNumber":33,"author":{"gitID":"yungyung04"},"content":"        NaturalLanguageIdentifier identifierCopy \u003d NaturalLanguageIdentifier.getInstance();"},{"lineNumber":34,"author":{"gitID":"yungyung04"},"content":"        assertEquals(identifier, identifierCopy);"},{"lineNumber":35,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":37,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"yungyung04"},"content":"    public void getMonthAsString_recognizableInput_returnMonth() {"},{"lineNumber":39,"author":{"gitID":"yungyung04"},"content":"        LocalDateTime current \u003d LocalDateTime.now();"},{"lineNumber":40,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":41,"author":{"gitID":"yungyung04"},"content":"        //natural languages which refer to current month"},{"lineNumber":42,"author":{"gitID":"yungyung04"},"content":"        assertEquals(current.getMonth().name(), identifier.getMonthAsString(NATURAL_CURRENT_MONTH));"},{"lineNumber":43,"author":{"gitID":"yungyung04"},"content":"        assertEquals(current.getMonth().name(), identifier.getMonthAsString(NATURAL_NOW));"},{"lineNumber":44,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":45,"author":{"gitID":"yungyung04"},"content":"        //natural language which refers to last month"},{"lineNumber":46,"author":{"gitID":"yungyung04"},"content":"        assertEquals(current.getMonth().minus(1).name(), identifier.getMonthAsString(NATURAL_LAST_MONTH));"},{"lineNumber":47,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":48,"author":{"gitID":"yungyung04"},"content":"        //natural language which refers to next month"},{"lineNumber":49,"author":{"gitID":"yungyung04"},"content":"        assertEquals(current.getMonth().plus(1).name(), identifier.getMonthAsString(NATURAL_NEXT_MONTH));"},{"lineNumber":50,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":52,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"yungyung04"},"content":"    public void getMonthAsString_unrecognizableInput_returnInput() {"},{"lineNumber":54,"author":{"gitID":"yungyung04"},"content":"        LocalDateTime current \u003d LocalDateTime.now();"},{"lineNumber":55,"author":{"gitID":"yungyung04"},"content":"        String unrecognizable \u003d \"unrecognizable input\";"},{"lineNumber":56,"author":{"gitID":"yungyung04"},"content":"        assertEquals(unrecognizable, identifier.getMonthAsString(unrecognizable));"},{"lineNumber":57,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":59,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"yungyung04"},"content":"    public void getMonthAsString_nullInput_returnInput() {"},{"lineNumber":61,"author":{"gitID":"yungyung04"},"content":"        LocalDateTime current \u003d LocalDateTime.now();"},{"lineNumber":62,"author":{"gitID":"yungyung04"},"content":"        String unrecognizable \u003d null;"},{"lineNumber":63,"author":{"gitID":"yungyung04"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":64,"author":{"gitID":"yungyung04"},"content":"        String result \u003d identifier.getMonthAsString(unrecognizable);"},{"lineNumber":65,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":67,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"yungyung04"},"content":"    public void mergeTwoWordedNaturalLanguage_emptyString_returnEmptyString() {"},{"lineNumber":69,"author":{"gitID":"yungyung04"},"content":"        String[] userInputs \u003d {};"},{"lineNumber":70,"author":{"gitID":"yungyung04"},"content":"        String[] expectedResults \u003d {};"},{"lineNumber":71,"author":{"gitID":"yungyung04"},"content":"        String[] results \u003d identifier.mergeTwoWordedNaturalLanguage(userInputs);"},{"lineNumber":72,"author":{"gitID":"yungyung04"},"content":"        assertArrayEquals(expectedResults, results);"},{"lineNumber":73,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":75,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"yungyung04"},"content":"    public void mergeTwoWordedNaturalLanguage_oneRecognizableElement_returnInputtedArray() {"},{"lineNumber":77,"author":{"gitID":"yungyung04"},"content":"        String[] userInputs \u003d {\"this\"};"},{"lineNumber":78,"author":{"gitID":"yungyung04"},"content":"        String[] expectedResults \u003d {\"this\"};"},{"lineNumber":79,"author":{"gitID":"yungyung04"},"content":"        String[] results \u003d identifier.mergeTwoWordedNaturalLanguage(userInputs);"},{"lineNumber":80,"author":{"gitID":"yungyung04"},"content":"        assertArrayEquals(expectedResults, userInputs);"},{"lineNumber":81,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":83,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"yungyung04"},"content":"    public void mergeTwoWordedNaturalLanguage_oneUnrecognizableElement_returnInputtedArray() {"},{"lineNumber":85,"author":{"gitID":"yungyung04"},"content":"        String[] userInputs \u003d {\"unrecognizable\"};"},{"lineNumber":86,"author":{"gitID":"yungyung04"},"content":"        String[] expectedResults \u003d {\"unrecognizable\"};"},{"lineNumber":87,"author":{"gitID":"yungyung04"},"content":"        String[] results \u003d identifier.mergeTwoWordedNaturalLanguage(userInputs);"},{"lineNumber":88,"author":{"gitID":"yungyung04"},"content":"        assertArrayEquals(expectedResults, results);"},{"lineNumber":89,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":91,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"yungyung04"},"content":"    public void mergeTwoWordedNaturalLanguage_multipleElements_returnMergedArray() {"},{"lineNumber":93,"author":{"gitID":"yungyung04"},"content":"        String[] userInputs \u003d {\"this\", \"month\", \"today\", \"unrecognized\", \"last\", \"month\", \"unrecognized\"};"},{"lineNumber":94,"author":{"gitID":"yungyung04"},"content":"        String[] expectedResults \u003d {\"this month\", \"today\", \"unrecognized\", \"last month\", \"unrecognized\"};"},{"lineNumber":95,"author":{"gitID":"yungyung04"},"content":"        String[] results \u003d identifier.mergeTwoWordedNaturalLanguage(userInputs);"},{"lineNumber":96,"author":{"gitID":"yungyung04"},"content":"        assertArrayEquals(expectedResults, results);"},{"lineNumber":97,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"yungyung04"},"content":"}"}],"authorContributionMap":{"yungyung04":94,"-":4}},{"path":"src/test/java/systemtests/AddTuteeCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EDUCATION_LEVEL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EDUCATION_LEVEL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":10,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GRADE_DESC_AMY;"},{"lineNumber":11,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GRADE_DESC_BOB;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":13,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EDUCATION_LEVEL;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":15,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_GRADE_DESC;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":18,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_SCHOOL;"},{"lineNumber":19,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_SUBJECT_DESC;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":25,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SCHOOL_DESC_AMY;"},{"lineNumber":26,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SCHOOL_DESC_BOB;"},{"lineNumber":27,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_AMY;"},{"lineNumber":28,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_BOB;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":33,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EDUCATION_LEVEL_AMY;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":36,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_AMY;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":41,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHOOL_AMY;"},{"lineNumber":42,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_AMY;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":45,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":46,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalTutees.ALICETUTEE;"},{"lineNumber":47,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalTutees.AMYTUTEE;"},{"lineNumber":48,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalTutees.BOBTUTEE;"},{"lineNumber":49,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalTutees.HOONTUTEE;"},{"lineNumber":50,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalTutees.IDATUTEE;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddTuteeCommand;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"import seedu.address.model.tutee.EducationLevel;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"import seedu.address.model.tutee.Grade;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"import seedu.address.model.tutee.School;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"import seedu.address.model.tutee.Subject;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"import seedu.address.model.tutee.Tutee;"},{"lineNumber":70,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.testutil.TuteeBuilder;"},{"lineNumber":71,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.testutil.TuteeUtil;"},{"lineNumber":72,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":73,"author":{"gitID":"ChoChihTun"},"content":"//@@author ChoChihTun"},{"lineNumber":74,"author":{"gitID":"ChoChihTun"},"content":"public class AddTuteeCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":75,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":76,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"ChoChihTun"},"content":"    public void addtutee() throws Exception {"},{"lineNumber":78,"author":{"gitID":"ChoChihTun"},"content":"        Model model \u003d getModel();"},{"lineNumber":79,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":80,"author":{"gitID":"ChoChihTun"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":81,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":82,"author":{"gitID":"ChoChihTun"},"content":"        /* Case: add a tutee without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":83,"author":{"gitID":"ChoChihTun"},"content":"         * -\u003e added"},{"lineNumber":84,"author":{"gitID":"ChoChihTun"},"content":"         */"},{"lineNumber":85,"author":{"gitID":"ChoChihTun"},"content":"        Tutee toAdd \u003d AMYTUTEE;"},{"lineNumber":86,"author":{"gitID":"ChoChihTun"},"content":"        String command \u003d \"   \" + AddTuteeCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":87,"author":{"gitID":"ChoChihTun"},"content":"                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + SUBJECT_DESC_AMY + GRADE_DESC_AMY"},{"lineNumber":88,"author":{"gitID":"ChoChihTun"},"content":"                + EDUCATION_LEVEL_DESC_AMY + SCHOOL_DESC_AMY + TAG_DESC_FRIEND + \" \";"},{"lineNumber":89,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":90,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":91,"author":{"gitID":"ChoChihTun"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":92,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":93,"author":{"gitID":"ChoChihTun"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":94,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":95,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":96,"author":{"gitID":"ChoChihTun"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":97,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":98,"author":{"gitID":"ChoChihTun"},"content":"        model.addPerson(toAdd);"},{"lineNumber":99,"author":{"gitID":"ChoChihTun"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":100,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":101,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":102,"author":{"gitID":"ChoChihTun"},"content":"        /* Case: add a tutee with all fields same as another tutee in the address book except name -\u003e added */"},{"lineNumber":103,"author":{"gitID":"ChoChihTun"},"content":"        toAdd \u003d new TuteeBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":104,"author":{"gitID":"ChoChihTun"},"content":"                .withAddress(VALID_ADDRESS_AMY).withSubject(VALID_SUBJECT_AMY).withGrade(VALID_GRADE_AMY)"},{"lineNumber":105,"author":{"gitID":"ChoChihTun"},"content":"                .withEducationLevel(VALID_EDUCATION_LEVEL_AMY).withSchool(VALID_SCHOOL_AMY).withTags(VALID_TAG_FRIEND)"},{"lineNumber":106,"author":{"gitID":"ChoChihTun"},"content":"                .build();"},{"lineNumber":107,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d AddTuteeCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":108,"author":{"gitID":"ChoChihTun"},"content":"                + SUBJECT_DESC_AMY + GRADE_DESC_AMY + EDUCATION_LEVEL_DESC_AMY + SCHOOL_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":109,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":110,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":111,"author":{"gitID":"ChoChihTun"},"content":"        /* Case: add a tutee with all fields same as another tutee in the address book except phone -\u003e added */"},{"lineNumber":112,"author":{"gitID":"ChoChihTun"},"content":"        toAdd \u003d new TuteeBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":113,"author":{"gitID":"ChoChihTun"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).withSubject(VALID_SUBJECT_AMY)"},{"lineNumber":114,"author":{"gitID":"ChoChihTun"},"content":"                .withGrade(VALID_GRADE_AMY).withEducationLevel(VALID_EDUCATION_LEVEL_AMY).withSchool(VALID_SCHOOL_AMY)"},{"lineNumber":115,"author":{"gitID":"ChoChihTun"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":116,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d AddTuteeCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":117,"author":{"gitID":"ChoChihTun"},"content":"                + SUBJECT_DESC_AMY + GRADE_DESC_AMY + EDUCATION_LEVEL_DESC_AMY + SCHOOL_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":118,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":119,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":120,"author":{"gitID":"ChoChihTun"},"content":"        /* Case: add a tutee with all fields same as another tutee in the address book except email -\u003e added */"},{"lineNumber":121,"author":{"gitID":"ChoChihTun"},"content":"        toAdd \u003d new TuteeBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":122,"author":{"gitID":"ChoChihTun"},"content":"                .withAddress(VALID_ADDRESS_AMY).withSubject(VALID_SUBJECT_AMY).withGrade(VALID_GRADE_AMY)"},{"lineNumber":123,"author":{"gitID":"ChoChihTun"},"content":"                .withEducationLevel(VALID_EDUCATION_LEVEL_AMY).withSchool(VALID_SCHOOL_AMY).withTags(VALID_TAG_FRIEND)"},{"lineNumber":124,"author":{"gitID":"ChoChihTun"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":125,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d AddTuteeCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":126,"author":{"gitID":"ChoChihTun"},"content":"                + SUBJECT_DESC_AMY + GRADE_DESC_AMY + EDUCATION_LEVEL_DESC_AMY + SCHOOL_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":127,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":128,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":129,"author":{"gitID":"ChoChihTun"},"content":"        /* Case: add a tutee with all fields same as another tutee in the address book except address -\u003e added */"},{"lineNumber":130,"author":{"gitID":"ChoChihTun"},"content":"        toAdd \u003d new TuteeBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":131,"author":{"gitID":"ChoChihTun"},"content":"                .withAddress(VALID_ADDRESS_BOB).withSubject(VALID_SUBJECT_AMY).withGrade(VALID_GRADE_AMY)"},{"lineNumber":132,"author":{"gitID":"ChoChihTun"},"content":"                .withEducationLevel(VALID_EDUCATION_LEVEL_AMY).withSchool(VALID_SCHOOL_AMY).withTags(VALID_TAG_FRIEND)"},{"lineNumber":133,"author":{"gitID":"ChoChihTun"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":134,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d AddTuteeCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_BOB"},{"lineNumber":135,"author":{"gitID":"ChoChihTun"},"content":"                + SUBJECT_DESC_AMY + GRADE_DESC_AMY + EDUCATION_LEVEL_DESC_AMY + SCHOOL_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":136,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":137,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":138,"author":{"gitID":"ChoChihTun"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":139,"author":{"gitID":"ChoChihTun"},"content":"        deleteAllPersons();"},{"lineNumber":140,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandSuccess(ALICETUTEE);"},{"lineNumber":141,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":142,"author":{"gitID":"ChoChihTun"},"content":"        /* Case: add a tutee with tags, command with parameters in random order -\u003e added */"},{"lineNumber":143,"author":{"gitID":"ChoChihTun"},"content":"        toAdd \u003d BOBTUTEE;"},{"lineNumber":144,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d AddTuteeCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"},{"lineNumber":145,"author":{"gitID":"ChoChihTun"},"content":"                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB + GRADE_DESC_BOB + SUBJECT_DESC_BOB + EDUCATION_LEVEL_DESC_BOB"},{"lineNumber":146,"author":{"gitID":"ChoChihTun"},"content":"                + SCHOOL_DESC_BOB;"},{"lineNumber":147,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":148,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":149,"author":{"gitID":"ChoChihTun"},"content":"        /* Case: add a tutee, missing tags -\u003e added */"},{"lineNumber":150,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandSuccess(HOONTUTEE);"},{"lineNumber":151,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":152,"author":{"gitID":"ChoChihTun"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":153,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":154,"author":{"gitID":"ChoChihTun"},"content":"        /* Case: filters the contact list before adding -\u003e added */"},{"lineNumber":155,"author":{"gitID":"ChoChihTun"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":156,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandSuccess(IDATUTEE);"},{"lineNumber":157,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":158,"author":{"gitID":"ChoChihTun"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":159,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":160,"author":{"gitID":"ChoChihTun"},"content":"        /* Case: add a duplicate tutee -\u003e rejected */"},{"lineNumber":161,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d TuteeUtil.getAddTuteeCommand(HOONTUTEE);"},{"lineNumber":162,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandFailure(command, AddTuteeCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":163,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":164,"author":{"gitID":"ChoChihTun"},"content":"        /* Case: add a duplicate tutee except with different tags -\u003e rejected */"},{"lineNumber":165,"author":{"gitID":"ChoChihTun"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"},{"lineNumber":166,"author":{"gitID":"ChoChihTun"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":167,"author":{"gitID":"ChoChihTun"},"content":"        // AddressBook#addPerson(Person)"},{"lineNumber":168,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d TuteeUtil.getAddTuteeCommand(HOONTUTEE) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":169,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandFailure(command, AddTuteeCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":170,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":171,"author":{"gitID":"ChoChihTun"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":172,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d AddTuteeCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":173,"author":{"gitID":"ChoChihTun"},"content":"                + SUBJECT_DESC_AMY + GRADE_DESC_AMY + EDUCATION_LEVEL_DESC_AMY + SCHOOL_DESC_AMY;"},{"lineNumber":174,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTuteeCommand.MESSAGE_USAGE));"},{"lineNumber":175,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":176,"author":{"gitID":"ChoChihTun"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":177,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d AddTuteeCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":178,"author":{"gitID":"ChoChihTun"},"content":"                + SUBJECT_DESC_AMY + GRADE_DESC_AMY + EDUCATION_LEVEL_DESC_AMY + SCHOOL_DESC_AMY;"},{"lineNumber":179,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTuteeCommand.MESSAGE_USAGE));"},{"lineNumber":180,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":181,"author":{"gitID":"ChoChihTun"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":182,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d AddTuteeCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":183,"author":{"gitID":"ChoChihTun"},"content":"                + SUBJECT_DESC_AMY + GRADE_DESC_AMY + EDUCATION_LEVEL_DESC_AMY + SCHOOL_DESC_AMY;"},{"lineNumber":184,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTuteeCommand.MESSAGE_USAGE));"},{"lineNumber":185,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":186,"author":{"gitID":"ChoChihTun"},"content":"        /* Case: missing address -\u003e rejected */"},{"lineNumber":187,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d AddTuteeCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":188,"author":{"gitID":"ChoChihTun"},"content":"                + SUBJECT_DESC_AMY + GRADE_DESC_AMY + EDUCATION_LEVEL_DESC_AMY + SCHOOL_DESC_AMY;"},{"lineNumber":189,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTuteeCommand.MESSAGE_USAGE));"},{"lineNumber":190,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":191,"author":{"gitID":"ChoChihTun"},"content":"        /* Case: missing subject -\u003e rejected */"},{"lineNumber":192,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d AddTuteeCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":193,"author":{"gitID":"ChoChihTun"},"content":"                + ADDRESS_DESC_AMY + GRADE_DESC_AMY + EDUCATION_LEVEL_DESC_AMY + SCHOOL_DESC_AMY;"},{"lineNumber":194,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTuteeCommand.MESSAGE_USAGE));"},{"lineNumber":195,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":196,"author":{"gitID":"ChoChihTun"},"content":"        /* Case: missing grade -\u003e rejected */"},{"lineNumber":197,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d AddTuteeCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":198,"author":{"gitID":"ChoChihTun"},"content":"                + ADDRESS_DESC_AMY + GRADE_DESC_AMY + EDUCATION_LEVEL_DESC_AMY + SCHOOL_DESC_AMY;"},{"lineNumber":199,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTuteeCommand.MESSAGE_USAGE));"},{"lineNumber":200,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":201,"author":{"gitID":"ChoChihTun"},"content":"        /* Case: missing education level -\u003e rejected */"},{"lineNumber":202,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d AddTuteeCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":203,"author":{"gitID":"ChoChihTun"},"content":"                + ADDRESS_DESC_AMY + SUBJECT_DESC_AMY + GRADE_DESC_AMY + SCHOOL_DESC_AMY;"},{"lineNumber":204,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTuteeCommand.MESSAGE_USAGE));"},{"lineNumber":205,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":206,"author":{"gitID":"ChoChihTun"},"content":"        /* Case: missing school -\u003e rejected */"},{"lineNumber":207,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d AddTuteeCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":208,"author":{"gitID":"ChoChihTun"},"content":"                + ADDRESS_DESC_AMY + SUBJECT_DESC_AMY + GRADE_DESC_AMY + EDUCATION_LEVEL_DESC_AMY;"},{"lineNumber":209,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTuteeCommand.MESSAGE_USAGE));"},{"lineNumber":210,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":211,"author":{"gitID":"ChoChihTun"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":212,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d \"addtutees \" + TuteeUtil.getTuteeDetails(toAdd);"},{"lineNumber":213,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":214,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":215,"author":{"gitID":"ChoChihTun"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":216,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d AddTuteeCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":217,"author":{"gitID":"ChoChihTun"},"content":"                + SUBJECT_DESC_AMY + GRADE_DESC_AMY + EDUCATION_LEVEL_DESC_AMY + SCHOOL_DESC_AMY;"},{"lineNumber":218,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":219,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":220,"author":{"gitID":"ChoChihTun"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":221,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d AddTuteeCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":222,"author":{"gitID":"ChoChihTun"},"content":"                + SUBJECT_DESC_AMY + GRADE_DESC_AMY + EDUCATION_LEVEL_DESC_AMY + SCHOOL_DESC_AMY;"},{"lineNumber":223,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":224,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":225,"author":{"gitID":"ChoChihTun"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":226,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d AddTuteeCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY"},{"lineNumber":227,"author":{"gitID":"ChoChihTun"},"content":"                + SUBJECT_DESC_AMY + GRADE_DESC_AMY + EDUCATION_LEVEL_DESC_AMY + SCHOOL_DESC_AMY;"},{"lineNumber":228,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":229,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":230,"author":{"gitID":"ChoChihTun"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":231,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d AddTuteeCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC"},{"lineNumber":232,"author":{"gitID":"ChoChihTun"},"content":"                + SUBJECT_DESC_AMY + GRADE_DESC_AMY + EDUCATION_LEVEL_DESC_AMY + SCHOOL_DESC_AMY;"},{"lineNumber":233,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":234,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":235,"author":{"gitID":"ChoChihTun"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":236,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d AddTuteeCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":237,"author":{"gitID":"ChoChihTun"},"content":"                + SUBJECT_DESC_AMY + GRADE_DESC_AMY + EDUCATION_LEVEL_DESC_AMY + SCHOOL_DESC_AMY + INVALID_TAG_DESC;"},{"lineNumber":238,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":239,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":240,"author":{"gitID":"ChoChihTun"},"content":"        /* Case: invalid subject -\u003e rejected */"},{"lineNumber":241,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d AddTuteeCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":242,"author":{"gitID":"ChoChihTun"},"content":"                + INVALID_SUBJECT_DESC + GRADE_DESC_AMY + EDUCATION_LEVEL_DESC_AMY + SCHOOL_DESC_AMY + INVALID_TAG_DESC;"},{"lineNumber":243,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandFailure(command, Subject.MESSAGE_SUBJECT_CONSTRAINTS);"},{"lineNumber":244,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":245,"author":{"gitID":"ChoChihTun"},"content":"        /* Case: invalid grade -\u003e rejected */"},{"lineNumber":246,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d AddTuteeCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":247,"author":{"gitID":"ChoChihTun"},"content":"                + SUBJECT_DESC_AMY + INVALID_GRADE_DESC + EDUCATION_LEVEL_DESC_AMY + SCHOOL_DESC_AMY + INVALID_TAG_DESC;"},{"lineNumber":248,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandFailure(command, Grade.MESSAGE_GRADE_CONSTRAINTS);"},{"lineNumber":249,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":250,"author":{"gitID":"ChoChihTun"},"content":"        /* Case: invalid education level -\u003e rejected */"},{"lineNumber":251,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d AddTuteeCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":252,"author":{"gitID":"ChoChihTun"},"content":"                + SUBJECT_DESC_AMY + GRADE_DESC_AMY + INVALID_EDUCATION_LEVEL + SCHOOL_DESC_AMY + INVALID_TAG_DESC;"},{"lineNumber":253,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandFailure(command, EducationLevel.MESSAGE_EDUCATION_LEVEL_CONSTRAINTS);"},{"lineNumber":254,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":255,"author":{"gitID":"ChoChihTun"},"content":"        /* Case: invalid school -\u003e rejected */"},{"lineNumber":256,"author":{"gitID":"ChoChihTun"},"content":"        command \u003d AddTuteeCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":257,"author":{"gitID":"ChoChihTun"},"content":"                + SUBJECT_DESC_AMY + GRADE_DESC_AMY + EDUCATION_LEVEL_DESC_AMY + INVALID_SCHOOL + INVALID_TAG_DESC;"},{"lineNumber":258,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandFailure(command, School.MESSAGE_SCHOOL_CONSTRAINTS);"},{"lineNumber":259,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":260,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":261,"author":{"gitID":"ChoChihTun"},"content":"     * Executes the {@code AddTuteeCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":262,"author":{"gitID":"ChoChihTun"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":263,"author":{"gitID":"ChoChihTun"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":264,"author":{"gitID":"ChoChihTun"},"content":"     * 3. Result display box displays the success message of executing {@code AddTuteeCommand} with the details of"},{"lineNumber":265,"author":{"gitID":"ChoChihTun"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":266,"author":{"gitID":"ChoChihTun"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":267,"author":{"gitID":"ChoChihTun"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":268,"author":{"gitID":"ChoChihTun"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":269,"author":{"gitID":"ChoChihTun"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":270,"author":{"gitID":"ChoChihTun"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":271,"author":{"gitID":"ChoChihTun"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":272,"author":{"gitID":"ChoChihTun"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":273,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":274,"author":{"gitID":"ChoChihTun"},"content":"    private void assertCommandSuccess(Tutee toAdd) {"},{"lineNumber":275,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandSuccess(TuteeUtil.getAddTuteeCommand(toAdd), toAdd);"},{"lineNumber":276,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":277,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":278,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":279,"author":{"gitID":"ChoChihTun"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Tutee)}. Executes {@code command}"},{"lineNumber":280,"author":{"gitID":"ChoChihTun"},"content":"     * instead."},{"lineNumber":281,"author":{"gitID":"ChoChihTun"},"content":"     * @see AddTuteeCommandSystemTest#assertCommandSuccess(Tutee)"},{"lineNumber":282,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":283,"author":{"gitID":"ChoChihTun"},"content":"    private void assertCommandSuccess(String command, Tutee toAdd) {"},{"lineNumber":284,"author":{"gitID":"ChoChihTun"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":285,"author":{"gitID":"ChoChihTun"},"content":"        try {"},{"lineNumber":286,"author":{"gitID":"ChoChihTun"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":287,"author":{"gitID":"ChoChihTun"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":288,"author":{"gitID":"ChoChihTun"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":289,"author":{"gitID":"ChoChihTun"},"content":"        }"},{"lineNumber":290,"author":{"gitID":"ChoChihTun"},"content":"        String expectedResultMessage \u003d String.format(AddTuteeCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":291,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":292,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":293,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":294,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":295,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":296,"author":{"gitID":"ChoChihTun"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Tutee)} except asserts that"},{"lineNumber":297,"author":{"gitID":"ChoChihTun"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":298,"author":{"gitID":"ChoChihTun"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":299,"author":{"gitID":"ChoChihTun"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":300,"author":{"gitID":"ChoChihTun"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":301,"author":{"gitID":"ChoChihTun"},"content":"     * @see AddTuteeCommandSystemTest#assertCommandSuccess(String, Tutee)"},{"lineNumber":302,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":303,"author":{"gitID":"ChoChihTun"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":304,"author":{"gitID":"ChoChihTun"},"content":"        executeCommand(command);"},{"lineNumber":305,"author":{"gitID":"ChoChihTun"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":306,"author":{"gitID":"ChoChihTun"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":307,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":308,"author":{"gitID":"ChoChihTun"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":309,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":310,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":311,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":312,"author":{"gitID":"ChoChihTun"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":313,"author":{"gitID":"ChoChihTun"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":314,"author":{"gitID":"ChoChihTun"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":315,"author":{"gitID":"ChoChihTun"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":316,"author":{"gitID":"ChoChihTun"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":317,"author":{"gitID":"ChoChihTun"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":318,"author":{"gitID":"ChoChihTun"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":319,"author":{"gitID":"ChoChihTun"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":320,"author":{"gitID":"ChoChihTun"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":321,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":322,"author":{"gitID":"ChoChihTun"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":323,"author":{"gitID":"ChoChihTun"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":324,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":325,"author":{"gitID":"ChoChihTun"},"content":"        executeCommand(command);"},{"lineNumber":326,"author":{"gitID":"ChoChihTun"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":327,"author":{"gitID":"ChoChihTun"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":328,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":329,"author":{"gitID":"ChoChihTun"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":330,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":331,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":332,"author":{"gitID":"ChoChihTun"},"content":"}"}],"authorContributionMap":{"ChoChihTun":279,"yungyung04":6,"-":47}},{"path":"src/test/java/seedu/address/logic/parser/ChangeCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"ChoChihTun"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":3,"author":{"gitID":"ChoChihTun"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":8,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":9,"author":{"gitID":"ChoChihTun"},"content":"import org.junit.Before;"},{"lineNumber":10,"author":{"gitID":"ChoChihTun"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":12,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.logic.commands.ChangeCommand;"},{"lineNumber":13,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":14,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":15,"author":{"gitID":"ChoChihTun"},"content":"//@@author ChoChihTun"},{"lineNumber":16,"author":{"gitID":"ChoChihTun"},"content":"public class ChangeCommandParserTest {"},{"lineNumber":17,"author":{"gitID":"ChoChihTun"},"content":"    private static final String DAY \u003d \"d\";"},{"lineNumber":18,"author":{"gitID":"ChoChihTun"},"content":"    private static final String WEEK \u003d \"w\";"},{"lineNumber":19,"author":{"gitID":"ChoChihTun"},"content":"    private static final String MONTH \u003d \"m\";"},{"lineNumber":20,"author":{"gitID":"ChoChihTun"},"content":"    private static final String YEAR \u003d \"y\";"},{"lineNumber":21,"author":{"gitID":"ChoChihTun"},"content":"    private ChangeCommandParser parser \u003d new ChangeCommandParser();"},{"lineNumber":22,"author":{"gitID":"ChoChihTun"},"content":"    private ChangeCommand changeCommand \u003d new ChangeCommand(DAY); // Set an initial time unit to check against"},{"lineNumber":23,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":24,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":25,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"ChoChihTun"},"content":"    public void parse_validArgs_returnsChangeCommand() throws Exception {"},{"lineNumber":27,"author":{"gitID":"ChoChihTun"},"content":"        // get the initial time unit, d"},{"lineNumber":28,"author":{"gitID":"ChoChihTun"},"content":"        String initialTimeUnit \u003d ChangeCommand.getTimeUnit();"},{"lineNumber":29,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":30,"author":{"gitID":"ChoChihTun"},"content":"        // Change time unit to w"},{"lineNumber":31,"author":{"gitID":"ChoChihTun"},"content":"        ChangeCommand expectedTimeUnit \u003d new ChangeCommand(WEEK);"},{"lineNumber":32,"author":{"gitID":"ChoChihTun"},"content":"        ChangeCommand changeToInitialTimeUnit \u003d new ChangeCommand(initialTimeUnit); // Change to initial time unit"},{"lineNumber":33,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(expectedTimeUnit, parser.parse(WEEK));"},{"lineNumber":34,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":35,"author":{"gitID":"ChoChihTun"},"content":"        // Change time unit to m"},{"lineNumber":36,"author":{"gitID":"ChoChihTun"},"content":"        expectedTimeUnit \u003d new ChangeCommand(MONTH);"},{"lineNumber":37,"author":{"gitID":"ChoChihTun"},"content":"        changeToInitialTimeUnit \u003d new ChangeCommand(initialTimeUnit); // Change to initial time unit"},{"lineNumber":38,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(expectedTimeUnit, parser.parse(MONTH));"},{"lineNumber":39,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":40,"author":{"gitID":"ChoChihTun"},"content":"        // Change time unit to y"},{"lineNumber":41,"author":{"gitID":"ChoChihTun"},"content":"        expectedTimeUnit \u003d new ChangeCommand(YEAR);"},{"lineNumber":42,"author":{"gitID":"ChoChihTun"},"content":"        changeToInitialTimeUnit \u003d new ChangeCommand(initialTimeUnit); // Change to initial time unit"},{"lineNumber":43,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(expectedTimeUnit, parser.parse(YEAR));"},{"lineNumber":44,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":46,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"ChoChihTun"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":48,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangeCommand.MESSAGE_USAGE));"},{"lineNumber":49,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, \"D\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangeCommand.MESSAGE_USAGE));"},{"lineNumber":50,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, \"@\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangeCommand.MESSAGE_USAGE));"},{"lineNumber":51,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, \"1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangeCommand.MESSAGE_USAGE));"},{"lineNumber":52,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangeCommand.MESSAGE_USAGE));"},{"lineNumber":53,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":55,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"ChoChihTun"},"content":"    public void parse_sameViewPageTimeUnit_throwsSameTimeUnitException() {"},{"lineNumber":57,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, \"d\", String.format(ChangeCommand.MESSAGE_SAME_VIEW));"},{"lineNumber":58,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":60,"author":{"gitID":"ChoChihTun"},"content":"    @Before"},{"lineNumber":61,"author":{"gitID":"ChoChihTun"},"content":"    public void isValidTimeUnit() {"},{"lineNumber":62,"author":{"gitID":"ChoChihTun"},"content":"        // null time unit"},{"lineNumber":63,"author":{"gitID":"ChoChihTun"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ChangeCommandParser.isValidTimeUnit(null));"},{"lineNumber":64,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":65,"author":{"gitID":"ChoChihTun"},"content":"        // invalid time unit"},{"lineNumber":66,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(ChangeCommandParser.isValidTimeUnit(\"\")); // empty string"},{"lineNumber":67,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(ChangeCommandParser.isValidTimeUnit(\" \")); // space only"},{"lineNumber":68,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(ChangeCommandParser.isValidTimeUnit(\"#\")); // special characters"},{"lineNumber":69,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(ChangeCommandParser.isValidTimeUnit(\"day\")); // full time unit name"},{"lineNumber":70,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(ChangeCommandParser.isValidTimeUnit(\"1\")); // numbers"},{"lineNumber":71,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(ChangeCommandParser.isValidTimeUnit(\"a\")); // contains invalid alphabets"},{"lineNumber":72,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(ChangeCommandParser.isValidTimeUnit(\"D\")); // Capital"},{"lineNumber":73,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(ChangeCommandParser.isValidTimeUnit(\" d \")); // contains space"},{"lineNumber":74,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":75,"author":{"gitID":"ChoChihTun"},"content":"        // valid time unit"},{"lineNumber":76,"author":{"gitID":"ChoChihTun"},"content":"        assertTrue(ChangeCommandParser.isValidTimeUnit(DAY)); // day"},{"lineNumber":77,"author":{"gitID":"ChoChihTun"},"content":"        assertTrue(ChangeCommandParser.isValidTimeUnit(WEEK)); // week"},{"lineNumber":78,"author":{"gitID":"ChoChihTun"},"content":"        assertTrue(ChangeCommandParser.isValidTimeUnit(MONTH)); // month"},{"lineNumber":79,"author":{"gitID":"ChoChihTun"},"content":"        assertTrue(ChangeCommandParser.isValidTimeUnit(YEAR)); // year"},{"lineNumber":80,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":82,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"ChoChihTun"},"content":"    public void isTimeUnitClash() {"},{"lineNumber":84,"author":{"gitID":"ChoChihTun"},"content":"        // All time units\u0027 validity are checked in isValidTimeUnit()"},{"lineNumber":85,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":86,"author":{"gitID":"ChoChihTun"},"content":"        // There is a clash of time unit"},{"lineNumber":87,"author":{"gitID":"ChoChihTun"},"content":"        assertTrue(ChangeCommandParser.isTimeUnitClash(\"d\"));"},{"lineNumber":88,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":89,"author":{"gitID":"ChoChihTun"},"content":"        // No clash in time unit"},{"lineNumber":90,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(ChangeCommandParser.isTimeUnitClash(\"w\"));"},{"lineNumber":91,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(ChangeCommandParser.isTimeUnitClash(\"m\"));"},{"lineNumber":92,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(ChangeCommandParser.isTimeUnitClash(\"y\"));"},{"lineNumber":93,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":94,"author":{"gitID":"ChoChihTun"},"content":"        // change current time unit to w"},{"lineNumber":95,"author":{"gitID":"ChoChihTun"},"content":"        changeCommand \u003d new ChangeCommand(\"w\");"},{"lineNumber":96,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":97,"author":{"gitID":"ChoChihTun"},"content":"        // There is a clash of time unit for w now"},{"lineNumber":98,"author":{"gitID":"ChoChihTun"},"content":"        assertTrue(ChangeCommandParser.isTimeUnitClash(\"w\"));"},{"lineNumber":99,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":100,"author":{"gitID":"ChoChihTun"},"content":"        // d is no longer clash"},{"lineNumber":101,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(ChangeCommandParser.isTimeUnitClash(\"d\"));"},{"lineNumber":102,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"ChoChihTun"},"content":"}"}],"authorContributionMap":{"ChoChihTun":99,"-":4}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":16,"author":{"gitID":"a-shakra"},"content":"import seedu.address.logic.commands.AddPersonalTaskCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":22,"author":{"gitID":"yungyung04"},"content":"import seedu.address.logic.commands.FindPersonCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":27,"author":{"gitID":"a-shakra"},"content":"import seedu.address.logic.commands.SortPersonCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":31,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.personal.PersonalTask;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":35,"author":{"gitID":"a-shakra"},"content":"import seedu.address.testutil.TaskBuilder;"},{"lineNumber":36,"author":{"gitID":"a-shakra"},"content":"import seedu.address.testutil.TaskUtil;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"a-shakra"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"a-shakra"},"content":"    public void parseCommand_addPersonalTask() throws Exception {"},{"lineNumber":53,"author":{"gitID":"a-shakra"},"content":"        PersonalTask task \u003d new TaskBuilder().buildPersonalTask();"},{"lineNumber":54,"author":{"gitID":"a-shakra"},"content":"        AddPersonalTaskCommand command \u003d (AddPersonalTaskCommand) parser"},{"lineNumber":55,"author":{"gitID":"a-shakra"},"content":"                .parseCommand(TaskUtil.getAddPersonalTaskCommand(task));"},{"lineNumber":56,"author":{"gitID":"a-shakra"},"content":"        assertEquals(new AddPersonalTaskCommand(task), command);"},{"lineNumber":57,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":63,"author":{"gitID":"ChoChihTun"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof  ClearCommand);"},{"lineNumber":64,"author":{"gitID":"ChoChihTun"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":69,"author":{"gitID":"ChoChihTun"},"content":"        DeleteCommand commandWord \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":70,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":71,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), commandWord);"},{"lineNumber":72,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":73,"author":{"gitID":"ChoChihTun"},"content":"        DeleteCommand commandAlias \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":74,"author":{"gitID":"ChoChihTun"},"content":"                DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":75,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), commandAlias);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":82,"author":{"gitID":"ChoChihTun"},"content":"        EditCommand commandWord \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":83,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":84,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), commandWord);"},{"lineNumber":85,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":86,"author":{"gitID":"ChoChihTun"},"content":"        EditCommand commandAlias \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""},{"lineNumber":87,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":88,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), commandAlias);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":99,"author":{"gitID":"yungyung04"},"content":"        String[] keywords \u003d {\"foo\", \"bar\", \"baz\"};"},{"lineNumber":100,"author":{"gitID":"yungyung04"},"content":"        FindPersonCommand commandWord \u003d (FindPersonCommand) parser.parseCommand("},{"lineNumber":101,"author":{"gitID":"yungyung04"},"content":"                FindPersonCommand.COMMAND_WORD + \" \" + CATEGORY_NAME + \" foo bar baz\");"},{"lineNumber":102,"author":{"gitID":"yungyung04"},"content":"        assertEquals(new FindPersonCommand(CATEGORY_NAME, keywords), commandWord);"},{"lineNumber":103,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":104,"author":{"gitID":"yungyung04"},"content":"        FindPersonCommand commandAlias \u003d (FindPersonCommand) parser.parseCommand("},{"lineNumber":105,"author":{"gitID":"yungyung04"},"content":"                FindPersonCommand.COMMAND_ALIAS + \" \" + CATEGORY_NAME + \" foo bar baz\");"},{"lineNumber":106,"author":{"gitID":"yungyung04"},"content":"        assertEquals(new FindPersonCommand(CATEGORY_NAME, keywords), commandAlias);"},{"lineNumber":107,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":109,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":110,"author":{"gitID":"yungyung04"},"content":"    public void parseCommand_sort() throws Exception {"},{"lineNumber":111,"author":{"gitID":"a-shakra"},"content":"        SortPersonCommand commandWord \u003d (SortPersonCommand) parser.parseCommand("},{"lineNumber":112,"author":{"gitID":"a-shakra"},"content":"                SortPersonCommand.COMMAND_WORD + \" \" + CATEGORY_NAME);"},{"lineNumber":113,"author":{"gitID":"a-shakra"},"content":"        assertEquals(new SortPersonCommand(CATEGORY_NAME), commandWord);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":126,"author":{"gitID":"ChoChihTun"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"},{"lineNumber":127,"author":{"gitID":"ChoChihTun"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":141,"author":{"gitID":"ChoChihTun"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS) instanceof ListCommand);"},{"lineNumber":142,"author":{"gitID":"ChoChihTun"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" 3\") instanceof ListCommand);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":149,"author":{"gitID":"ChoChihTun"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS) instanceof RedoCommand);"},{"lineNumber":150,"author":{"gitID":"ChoChihTun"},"content":"        assertTrue(parser.parseCommand(\"r 1\") instanceof RedoCommand);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":157,"author":{"gitID":"ChoChihTun"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS) instanceof UndoCommand);"},{"lineNumber":158,"author":{"gitID":"ChoChihTun"},"content":"        assertTrue(parser.parseCommand(\"u 3\") instanceof UndoCommand);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yungyung04":14,"ChoChihTun":22,"a-shakra":15,"-":123}},{"path":"src/test/java/seedu/address/logic/parser/AddTuitionTaskCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DATE_TIME;"},{"lineNumber":5,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DURATION;"},{"lineNumber":6,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_TIME_AMY;"},{"lineNumber":7,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DURATION_AMY;"},{"lineNumber":8,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMPTY_TASK_DESC;"},{"lineNumber":9,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_DESC_AMY;"},{"lineNumber":10,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_WITHOUT_DESC_AMY;"},{"lineNumber":11,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_WITH_DESC_AMY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":13,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":14,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":15,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":16,"author":{"gitID":"yungyung04"},"content":"import java.time.LocalDateTime;"},{"lineNumber":17,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":18,"author":{"gitID":"yungyung04"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":19,"author":{"gitID":"yungyung04"},"content":"import java.time.format.ResolverStyle;"},{"lineNumber":20,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":21,"author":{"gitID":"ChoChihTun"},"content":"import org.junit.Test;"},{"lineNumber":22,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":23,"author":{"gitID":"yungyung04"},"content":"import seedu.address.logic.commands.AddTuitionTaskCommand;"},{"lineNumber":24,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":25,"author":{"gitID":"ChoChihTun"},"content":"//@@author ChoChihTun"},{"lineNumber":26,"author":{"gitID":"ChoChihTun"},"content":"public class AddTuitionTaskCommandParserTest {"},{"lineNumber":27,"author":{"gitID":"ChoChihTun"},"content":"    private AddTuitionTaskCommandParser parser \u003d new AddTuitionTaskCommandParser();"},{"lineNumber":28,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":29,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"ChoChihTun"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":31,"author":{"gitID":"ChoChihTun"},"content":"        // Invalid format"},{"lineNumber":32,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, \"1\","},{"lineNumber":33,"author":{"gitID":"ChoChihTun"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTuitionTaskCommand.MESSAGE_USAGE));"},{"lineNumber":34,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, \"11/01/2018 11:11 1h30m tuition homework\","},{"lineNumber":35,"author":{"gitID":"ChoChihTun"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTuitionTaskCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, \"1 11:11 1h30m tuition homework\","},{"lineNumber":37,"author":{"gitID":"ChoChihTun"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTuitionTaskCommand.MESSAGE_USAGE));"},{"lineNumber":38,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, \"1 11/01/2018 1h30m tuition homework\","},{"lineNumber":39,"author":{"gitID":"ChoChihTun"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTuitionTaskCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, \"1 11/01/2018 11:11 tuition homework\","},{"lineNumber":41,"author":{"gitID":"ChoChihTun"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTuitionTaskCommand.MESSAGE_USAGE));"},{"lineNumber":42,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, \"1 11/01/2018 11:11 1h tuition homework\","},{"lineNumber":43,"author":{"gitID":"ChoChihTun"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTuitionTaskCommand.MESSAGE_USAGE));"},{"lineNumber":44,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, \"1 11/01/2018 11:11 30m tuition homework\","},{"lineNumber":45,"author":{"gitID":"ChoChihTun"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTuitionTaskCommand.MESSAGE_USAGE));"},{"lineNumber":46,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, \"1 11:11 32/01/2018 1h30m tuition homework\","},{"lineNumber":47,"author":{"gitID":"ChoChihTun"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTuitionTaskCommand.MESSAGE_USAGE));"},{"lineNumber":48,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, \"aaa 32/01/2018 11:11 1h30m tuition homework\","},{"lineNumber":49,"author":{"gitID":"ChoChihTun"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTuitionTaskCommand.MESSAGE_USAGE));"},{"lineNumber":50,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, \"1 aa/01/2018 11:11 1h30m tuition homework\","},{"lineNumber":51,"author":{"gitID":"ChoChihTun"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTuitionTaskCommand.MESSAGE_USAGE));"},{"lineNumber":52,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, \"1 32/01/2018 11:aa 1h30m tuition homework\","},{"lineNumber":53,"author":{"gitID":"ChoChihTun"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTuitionTaskCommand.MESSAGE_USAGE));"},{"lineNumber":54,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, \"1 32/01/2018 11:11 1haam tuition homework\","},{"lineNumber":55,"author":{"gitID":"ChoChihTun"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTuitionTaskCommand.MESSAGE_USAGE));"},{"lineNumber":56,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":57,"author":{"gitID":"ChoChihTun"},"content":"        // Invalid date"},{"lineNumber":58,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, \"1 29/02/2018 11:11 1h30m tuition homework\", MESSAGE_INVALID_DATE_TIME);"},{"lineNumber":59,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, \"1 31/04/2018 11:11 1h30m tuition homework\", MESSAGE_INVALID_DATE_TIME);"},{"lineNumber":60,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, \"1 32/01/2018 11:11 1h30m tuition homework\", MESSAGE_INVALID_DATE_TIME);"},{"lineNumber":61,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":62,"author":{"gitID":"ChoChihTun"},"content":"        // Invalid time"},{"lineNumber":63,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, \"1 11/01/2018 24:00 1h30m tuition homework\", MESSAGE_INVALID_DATE_TIME);"},{"lineNumber":64,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, \"1 11/01/2018 11:60 1h30m tuition homework\", MESSAGE_INVALID_DATE_TIME);"},{"lineNumber":65,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":66,"author":{"gitID":"ChoChihTun"},"content":"        // Invalid duration"},{"lineNumber":67,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, \"1 11/01/2018 11:11 1h60m tuition homework\", MESSAGE_INVALID_DURATION);"},{"lineNumber":68,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, \"1 11/01/2018 11:11 24h0m tuition homework\", MESSAGE_INVALID_DURATION);"},{"lineNumber":69,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":71,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"ChoChihTun"},"content":"    public void parse_validArgs_success() {"},{"lineNumber":73,"author":{"gitID":"ChoChihTun"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/uuuu HH:mm\")"},{"lineNumber":74,"author":{"gitID":"ChoChihTun"},"content":"                .withResolverStyle(ResolverStyle.STRICT);"},{"lineNumber":75,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":76,"author":{"gitID":"ChoChihTun"},"content":"        LocalDateTime taskDateTime \u003d LocalDateTime.parse(VALID_DATE_TIME_AMY, formatter);"},{"lineNumber":77,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":78,"author":{"gitID":"ChoChihTun"},"content":"        // With description"},{"lineNumber":79,"author":{"gitID":"ChoChihTun"},"content":"        assertParseSuccess(parser, \"1 \" + VALID_TASK_WITH_DESC_AMY,"},{"lineNumber":80,"author":{"gitID":"ChoChihTun"},"content":"                new AddTuitionTaskCommand(INDEX_FIRST_PERSON, taskDateTime, VALID_DURATION_AMY, VALID_TASK_DESC_AMY));"},{"lineNumber":81,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":82,"author":{"gitID":"ChoChihTun"},"content":"        // Without description"},{"lineNumber":83,"author":{"gitID":"ChoChihTun"},"content":"        assertParseSuccess(parser, \"1 \" + VALID_TASK_WITHOUT_DESC_AMY,"},{"lineNumber":84,"author":{"gitID":"ChoChihTun"},"content":"                new AddTuitionTaskCommand(INDEX_FIRST_PERSON, taskDateTime, VALID_DURATION_AMY, VALID_EMPTY_TASK_DESC));"},{"lineNumber":85,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":86,"author":{"gitID":"ChoChihTun"},"content":"        // Valid date"},{"lineNumber":87,"author":{"gitID":"ChoChihTun"},"content":"        taskDateTime \u003d LocalDateTime.parse(\"28/02/2018 11:20\", formatter);"},{"lineNumber":88,"author":{"gitID":"ChoChihTun"},"content":"        assertParseSuccess(parser, \"1 28/02/2018 11:20 \" + VALID_DURATION_AMY,"},{"lineNumber":89,"author":{"gitID":"ChoChihTun"},"content":"                new AddTuitionTaskCommand(INDEX_FIRST_PERSON, taskDateTime, VALID_DURATION_AMY, VALID_EMPTY_TASK_DESC));"},{"lineNumber":90,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":91,"author":{"gitID":"ChoChihTun"},"content":"        taskDateTime \u003d LocalDateTime.parse(\"29/02/2016 11:20\", formatter);"},{"lineNumber":92,"author":{"gitID":"ChoChihTun"},"content":"        assertParseSuccess(parser, \"1 29/02/2016 11:20 \" + VALID_DURATION_AMY,"},{"lineNumber":93,"author":{"gitID":"ChoChihTun"},"content":"                new AddTuitionTaskCommand(INDEX_FIRST_PERSON, taskDateTime, VALID_DURATION_AMY, VALID_EMPTY_TASK_DESC));"},{"lineNumber":94,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":95,"author":{"gitID":"ChoChihTun"},"content":"        taskDateTime \u003d LocalDateTime.parse(\"30/04/2016 11:20\", formatter);"},{"lineNumber":96,"author":{"gitID":"ChoChihTun"},"content":"        assertParseSuccess(parser, \"1 30/04/2016 11:20 \" + VALID_DURATION_AMY,"},{"lineNumber":97,"author":{"gitID":"ChoChihTun"},"content":"                new AddTuitionTaskCommand(INDEX_FIRST_PERSON, taskDateTime, VALID_DURATION_AMY, VALID_EMPTY_TASK_DESC));"},{"lineNumber":98,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":99,"author":{"gitID":"ChoChihTun"},"content":"        taskDateTime \u003d LocalDateTime.parse(\"31/01/2016 11:20\", formatter);"},{"lineNumber":100,"author":{"gitID":"ChoChihTun"},"content":"        assertParseSuccess(parser, \"1 31/01/2016 11:20 \" + VALID_DURATION_AMY,"},{"lineNumber":101,"author":{"gitID":"ChoChihTun"},"content":"                new AddTuitionTaskCommand(INDEX_FIRST_PERSON, taskDateTime, VALID_DURATION_AMY, VALID_EMPTY_TASK_DESC));"},{"lineNumber":102,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":103,"author":{"gitID":"ChoChihTun"},"content":"        // Valid Time"},{"lineNumber":104,"author":{"gitID":"ChoChihTun"},"content":"        taskDateTime \u003d LocalDateTime.parse(\"11/01/2018 00:00\", formatter);"},{"lineNumber":105,"author":{"gitID":"ChoChihTun"},"content":"        assertParseSuccess(parser, \"1 11/01/2018 00:00 \" + VALID_DURATION_AMY,"},{"lineNumber":106,"author":{"gitID":"ChoChihTun"},"content":"                new AddTuitionTaskCommand(INDEX_FIRST_PERSON, taskDateTime, VALID_DURATION_AMY, VALID_EMPTY_TASK_DESC));"},{"lineNumber":107,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":109,"author":{"gitID":"ChoChihTun"},"content":"}"}],"authorContributionMap":{"ChoChihTun":96,"yungyung04":9,"-":4}},{"path":"src/test/java/seedu/address/logic/parser/AddPersonalTaskCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DATE_TIME;"},{"lineNumber":5,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DURATION;"},{"lineNumber":6,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_TIME_AMY;"},{"lineNumber":7,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DURATION_AMY;"},{"lineNumber":8,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMPTY_TASK_DESC;"},{"lineNumber":9,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_DESC_AMY;"},{"lineNumber":10,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_WITHOUT_DESC_AMY;"},{"lineNumber":11,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_WITH_DESC_AMY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":13,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":14,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":15,"author":{"gitID":"yungyung04"},"content":"import java.time.LocalDateTime;"},{"lineNumber":16,"author":{"gitID":"yungyung04"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":17,"author":{"gitID":"yungyung04"},"content":"import java.time.format.ResolverStyle;"},{"lineNumber":18,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":19,"author":{"gitID":"ChoChihTun"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":21,"author":{"gitID":"yungyung04"},"content":"import seedu.address.logic.commands.AddPersonalTaskCommand;"},{"lineNumber":22,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.personal.PersonalTask;"},{"lineNumber":23,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":24,"author":{"gitID":"ChoChihTun"},"content":"//@@author ChoChihTun"},{"lineNumber":25,"author":{"gitID":"ChoChihTun"},"content":"public class AddPersonalTaskCommandParserTest {"},{"lineNumber":26,"author":{"gitID":"ChoChihTun"},"content":"    private AddPersonalTaskCommandParser parser \u003d new AddPersonalTaskCommandParser();"},{"lineNumber":27,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":28,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"ChoChihTun"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":30,"author":{"gitID":"ChoChihTun"},"content":"        // Invalid format"},{"lineNumber":31,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, \"a\","},{"lineNumber":32,"author":{"gitID":"ChoChihTun"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonalTaskCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, \"1 11/01/2018 11:11 1h30m Outing\","},{"lineNumber":34,"author":{"gitID":"ChoChihTun"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonalTaskCommand.MESSAGE_USAGE));"},{"lineNumber":35,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, \"11:11 1h30m Outing with friends\","},{"lineNumber":36,"author":{"gitID":"ChoChihTun"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonalTaskCommand.MESSAGE_USAGE));"},{"lineNumber":37,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, \"11/01/2018 1h30m Outing with friends\","},{"lineNumber":38,"author":{"gitID":"ChoChihTun"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonalTaskCommand.MESSAGE_USAGE));"},{"lineNumber":39,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, \"11/01/2018 11:11 Outing with friends\","},{"lineNumber":40,"author":{"gitID":"ChoChihTun"},"content":"                 String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonalTaskCommand.MESSAGE_USAGE));"},{"lineNumber":41,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, \"11/01/2018 11:11 1h Outing with friends\","},{"lineNumber":42,"author":{"gitID":"ChoChihTun"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonalTaskCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, \"11/01/2018 11:11 30m Outing with friends\","},{"lineNumber":44,"author":{"gitID":"ChoChihTun"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonalTaskCommand.MESSAGE_USAGE));"},{"lineNumber":45,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, \"11:11 32/01/2018 1h30m Outing with friends\","},{"lineNumber":46,"author":{"gitID":"ChoChihTun"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonalTaskCommand.MESSAGE_USAGE));"},{"lineNumber":47,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, \"aa/01/2018 11:11 1h30m Outing with friends\","},{"lineNumber":48,"author":{"gitID":"ChoChihTun"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonalTaskCommand.MESSAGE_USAGE));"},{"lineNumber":49,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, \"32/01/2018 11:aa 1h30m Outing with friends\","},{"lineNumber":50,"author":{"gitID":"ChoChihTun"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonalTaskCommand.MESSAGE_USAGE));"},{"lineNumber":51,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, \"32/01/2018 11:11 1haam Outing with friends\","},{"lineNumber":52,"author":{"gitID":"ChoChihTun"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonalTaskCommand.MESSAGE_USAGE));"},{"lineNumber":53,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":54,"author":{"gitID":"ChoChihTun"},"content":"        // Invalid date"},{"lineNumber":55,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, \"29/02/2018 11:11 1h30m Outing with friends\", MESSAGE_INVALID_DATE_TIME);"},{"lineNumber":56,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, \"31/04/2018 11:11 1h30m Outing with friends\", MESSAGE_INVALID_DATE_TIME);"},{"lineNumber":57,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, \"32/01/2018 11:11 1h30m Outing with friends\", MESSAGE_INVALID_DATE_TIME);"},{"lineNumber":58,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":59,"author":{"gitID":"ChoChihTun"},"content":"        // Invalid time"},{"lineNumber":60,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, \"11/01/2018 24:00 1h30m Outing with friends\", MESSAGE_INVALID_DATE_TIME);"},{"lineNumber":61,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, \"11/01/2018 11:60 1h30m Outing with friends\", MESSAGE_INVALID_DATE_TIME);"},{"lineNumber":62,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":63,"author":{"gitID":"ChoChihTun"},"content":"        // Invalid duration"},{"lineNumber":64,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, \"11/01/2018 11:11 1h60m Outing with friends\", MESSAGE_INVALID_DURATION);"},{"lineNumber":65,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, \"11/01/2018 11:11 24h0m Outing with friends\", MESSAGE_INVALID_DURATION);"},{"lineNumber":66,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":68,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"ChoChihTun"},"content":"    public void parse_validArgs_success() {"},{"lineNumber":70,"author":{"gitID":"ChoChihTun"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/uuuu HH:mm\")"},{"lineNumber":71,"author":{"gitID":"ChoChihTun"},"content":"                .withResolverStyle(ResolverStyle.STRICT);"},{"lineNumber":72,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":73,"author":{"gitID":"ChoChihTun"},"content":"        // With description"},{"lineNumber":74,"author":{"gitID":"ChoChihTun"},"content":"        LocalDateTime taskDateTime \u003d LocalDateTime.parse(VALID_DATE_TIME_AMY, formatter);"},{"lineNumber":75,"author":{"gitID":"ChoChihTun"},"content":"        PersonalTask personalTask \u003d new PersonalTask(taskDateTime, VALID_DURATION_AMY, VALID_TASK_DESC_AMY);"},{"lineNumber":76,"author":{"gitID":"ChoChihTun"},"content":"        assertParseSuccess(parser, VALID_TASK_WITH_DESC_AMY,"},{"lineNumber":77,"author":{"gitID":"ChoChihTun"},"content":"                new AddPersonalTaskCommand(personalTask));"},{"lineNumber":78,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":79,"author":{"gitID":"ChoChihTun"},"content":"        // Without description"},{"lineNumber":80,"author":{"gitID":"ChoChihTun"},"content":"        personalTask \u003d new PersonalTask(taskDateTime, VALID_DURATION_AMY, VALID_EMPTY_TASK_DESC);"},{"lineNumber":81,"author":{"gitID":"ChoChihTun"},"content":"        assertParseSuccess(parser, VALID_TASK_WITHOUT_DESC_AMY,"},{"lineNumber":82,"author":{"gitID":"ChoChihTun"},"content":"                new AddPersonalTaskCommand(personalTask));"},{"lineNumber":83,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":84,"author":{"gitID":"ChoChihTun"},"content":"        // Valid date"},{"lineNumber":85,"author":{"gitID":"ChoChihTun"},"content":"        personalTask \u003d new PersonalTask(LocalDateTime.parse(\"29/02/2016 11:20\", formatter),"},{"lineNumber":86,"author":{"gitID":"ChoChihTun"},"content":"                VALID_DURATION_AMY, VALID_EMPTY_TASK_DESC);"},{"lineNumber":87,"author":{"gitID":"ChoChihTun"},"content":"        assertParseSuccess(parser, \"29/02/2016 11:20 1h11m\","},{"lineNumber":88,"author":{"gitID":"ChoChihTun"},"content":"                new AddPersonalTaskCommand(personalTask));"},{"lineNumber":89,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":90,"author":{"gitID":"ChoChihTun"},"content":"        personalTask \u003d new PersonalTask(LocalDateTime.parse(\"30/04/2016 11:20\", formatter),"},{"lineNumber":91,"author":{"gitID":"ChoChihTun"},"content":"                VALID_DURATION_AMY, VALID_EMPTY_TASK_DESC);"},{"lineNumber":92,"author":{"gitID":"ChoChihTun"},"content":"        assertParseSuccess(parser, \"30/04/2016 11:20 \" + VALID_DURATION_AMY,"},{"lineNumber":93,"author":{"gitID":"ChoChihTun"},"content":"                new AddPersonalTaskCommand(personalTask));"},{"lineNumber":94,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":95,"author":{"gitID":"ChoChihTun"},"content":"        personalTask \u003d new PersonalTask(LocalDateTime.parse(\"31/01/2016 11:20\", formatter),"},{"lineNumber":96,"author":{"gitID":"ChoChihTun"},"content":"                VALID_DURATION_AMY, VALID_EMPTY_TASK_DESC);"},{"lineNumber":97,"author":{"gitID":"ChoChihTun"},"content":"        assertParseSuccess(parser, \"31/01/2016 11:20 \" + VALID_DURATION_AMY,"},{"lineNumber":98,"author":{"gitID":"ChoChihTun"},"content":"                new AddPersonalTaskCommand(personalTask));"},{"lineNumber":99,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":100,"author":{"gitID":"ChoChihTun"},"content":"        // Valid Time"},{"lineNumber":101,"author":{"gitID":"ChoChihTun"},"content":"        personalTask \u003d new PersonalTask(LocalDateTime.parse(\"11/01/2018 00:00\", formatter),"},{"lineNumber":102,"author":{"gitID":"ChoChihTun"},"content":"                VALID_DURATION_AMY, VALID_EMPTY_TASK_DESC);"},{"lineNumber":103,"author":{"gitID":"ChoChihTun"},"content":"        assertParseSuccess(parser, \"11/01/2018 00:00 \" + VALID_DURATION_AMY,"},{"lineNumber":104,"author":{"gitID":"ChoChihTun"},"content":"                new AddPersonalTaskCommand(personalTask));"},{"lineNumber":105,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"ChoChihTun"},"content":"}"}],"authorContributionMap":{"ChoChihTun":92,"yungyung04":10,"-":4}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TUTEE_TAG_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":22,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TUTEE_TAG;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":78,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // zero tags"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags().build();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        // missing phone prefix"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":102,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        // missing email prefix"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        // missing address prefix"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":121,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        // invalid phone"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // invalid email"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"},{"lineNumber":129,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // invalid address"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":133,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        // invalid tag"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":137,"author":{"gitID":"ChoChihTun"},"content":"                + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":138,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":139,"author":{"gitID":"ChoChihTun"},"content":"        // invalid tutee tag"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":141,"author":{"gitID":"ChoChihTun"},"content":"                + INVALID_TUTEE_TAG_DESC, String.format(ParserUtil.MESSAGE_INVALID_TAG, TUTEE_TAG));"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"},{"lineNumber":145,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        // non-empty preamble"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":149,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":150,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ChoChihTun":6,"-":146}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":8,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.parser.ParserUtil.parseDateTime;"},{"lineNumber":9,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.parser.ParserUtil.parseDuration;"},{"lineNumber":10,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.TaskUtil.FORMATTER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"yungyung04"},"content":"import java.time.LocalDateTime;"},{"lineNumber":14,"author":{"gitID":"ChoChihTun"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":26,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.logic.parser.exceptions.DurationParseException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":32,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.model.tutee.EducationLevel;"},{"lineNumber":33,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.model.tutee.Grade;"},{"lineNumber":34,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.model.tutee.School;"},{"lineNumber":35,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.model.tutee.Subject;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":44,"author":{"gitID":"ChoChihTun"},"content":"    private static final String INVALID_SUBJECT \u003d \"#subject\";"},{"lineNumber":45,"author":{"gitID":"ChoChihTun"},"content":"    private static final String INVALID_GRADE \u003d \"+B\";"},{"lineNumber":46,"author":{"gitID":"ChoChihTun"},"content":"    private static final String INVALID_EDUCATIONAL_LEVEL \u003d \"University\";"},{"lineNumber":47,"author":{"gitID":"ChoChihTun"},"content":"    private static final String INVALID_SCHOOL \u003d \"school12\";"},{"lineNumber":48,"author":{"gitID":"ChoChihTun"},"content":"    private static final String INVALID_TIME_UNIT \u003d \"year\";"},{"lineNumber":49,"author":{"gitID":"yungyung04"},"content":"    private static final String INVALID_DURATION \u003d \"1.5h\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";"},{"lineNumber":57,"author":{"gitID":"ChoChihTun"},"content":"    private static final String VALID_SUBJECT \u003d \"science\";"},{"lineNumber":58,"author":{"gitID":"ChoChihTun"},"content":"    private static final String VALID_GRADE \u003d \"B+\";"},{"lineNumber":59,"author":{"gitID":"ChoChihTun"},"content":"    private static final String VALID_EDUCATIONAL_LEVEL \u003d \"primary\";"},{"lineNumber":60,"author":{"gitID":"ChoChihTun"},"content":"    private static final String VALID_SCHOOL \u003d \"valid primary school\";"},{"lineNumber":61,"author":{"gitID":"ChoChihTun"},"content":"    private static final String VALID_TIME_UNIT \u003d \"y\";"},{"lineNumber":62,"author":{"gitID":"yungyung04"},"content":"    private static final String VALID_DATE \u003d \"25/04/2018\";"},{"lineNumber":63,"author":{"gitID":"yungyung04"},"content":"    private static final String VALID_TIME \u003d \"08:01\";"},{"lineNumber":64,"author":{"gitID":"yungyung04"},"content":"    private static final String VALID_DURATION \u003d \"1h30m\";"},{"lineNumber":65,"author":{"gitID":"yungyung04"},"content":"    private static final String VALID_DESCRIPTION \u003d \"homework\";"},{"lineNumber":66,"author":{"gitID":"yungyung04"},"content":"    private static final String VALID_TASK_WITHOUT_DESCRIPTION \u003d VALID_DATE + \" \" + VALID_TIME + \" \" + VALID_DURATION;"},{"lineNumber":67,"author":{"gitID":"yungyung04"},"content":"    private static final String VALID_TASK_WITH_DESCRIPTION \u003d VALID_TASK_WITHOUT_DESCRIPTION + \" \" + VALID_DESCRIPTION;"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"ChoChihTun"},"content":"    private static final String TUTEE_TAG \u003d \"Tutee\";"},{"lineNumber":70,"author":{"gitID":"ChoChihTun"},"content":"    private static final String CAPITAL_TUTEE_TAG \u003d \"TUTEE\";"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":72,"author":{"gitID":"yungyung04"},"content":"    private static final int MAXIMUM_AMOUNT_OF_PARAMETERS \u003d 4;"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public final ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void parseIndex_invalidInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(\"10 a\");"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_INVALID_INDEX);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // No whitespaces"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public void parseName_null_throwsNullPointerException() {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((Optional\u003cString\u003e) null));"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void parseName_invalidValue_throwsIllegalValueException() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(Optional.of(INVALID_NAME)));"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public void parseName_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseName(Optional.empty()).isPresent());"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(VALID_NAME)));"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(nameWithWhitespace)));"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((Optional\u003cString\u003e) null));"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public void parsePhone_invalidValue_throwsIllegalValueException() {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(Optional.of(INVALID_PHONE)));"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public void parsePhone_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parsePhone(Optional.empty()).isPresent());"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(VALID_PHONE)));"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(phoneWithWhitespace)));"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((Optional\u003cString\u003e) null));"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    public void parseAddress_invalidValue_throwsIllegalValueException() {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseAddress(Optional.of(INVALID_ADDRESS)));"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    public void parseAddress_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseAddress(Optional.empty()).isPresent());"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedAddress), ParserUtil.parseAddress(Optional.of(VALID_ADDRESS)));"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedAddress), ParserUtil.parseAddress(Optional.of(addressWithWhitespace)));"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((Optional\u003cString\u003e) null));"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    public void parseEmail_invalidValue_throwsIllegalValueException() {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(Optional.of(INVALID_EMAIL)));"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    public void parseEmail_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseEmail(Optional.empty()).isPresent());"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(VALID_EMAIL)));"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(emailWithWhitespace)));"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    public void parseTag_null_throwsNullPointerException() throws Exception {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(null);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    public void parseTag_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(INVALID_TAG);"},{"lineNumber":237,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    public void parseTags_null_throwsNullPointerException() throws Exception {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(null);"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsIllegalValueException() throws Exception {"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":266,"author":{"gitID":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":268,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":271,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":276,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":277,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":278,"author":{"gitID":"ChoChihTun"},"content":"    //@@author ChoChihTun"},{"lineNumber":279,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":280,"author":{"gitID":"ChoChihTun"},"content":"    public void parseTags_collectionWithValidTagsAndTuteeTag_returnsTagSet() throws Exception {"},{"lineNumber":281,"author":{"gitID":"ChoChihTun"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, CAPITAL_TUTEE_TAG));"},{"lineNumber":282,"author":{"gitID":"ChoChihTun"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003c\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(TUTEE_TAG)));"},{"lineNumber":283,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":284,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":285,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":286,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":287,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":288,"author":{"gitID":"ChoChihTun"},"content":"    public void parsePersonTags_null_throwsNullPointerException() throws Exception {"},{"lineNumber":289,"author":{"gitID":"ChoChihTun"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":290,"author":{"gitID":"ChoChihTun"},"content":"        ParserUtil.parsePersonTags(null);"},{"lineNumber":291,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":292,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":293,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":294,"author":{"gitID":"ChoChihTun"},"content":"    public void parsePersonTags_collectionWithInvalidTags_throwsIllegalValueException() throws Exception {"},{"lineNumber":295,"author":{"gitID":"ChoChihTun"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":296,"author":{"gitID":"ChoChihTun"},"content":"        ParserUtil.parsePersonTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"},{"lineNumber":297,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":298,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":299,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":300,"author":{"gitID":"ChoChihTun"},"content":"    public void parsePersonTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":301,"author":{"gitID":"ChoChihTun"},"content":"        assertTrue(ParserUtil.parsePersonTags(Collections.emptyList()).isEmpty());"},{"lineNumber":302,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":303,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":304,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":305,"author":{"gitID":"ChoChihTun"},"content":"    public void parsePersonTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":306,"author":{"gitID":"ChoChihTun"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parsePersonTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":307,"author":{"gitID":"ChoChihTun"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003c\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":308,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":309,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":310,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":311,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":312,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":313,"author":{"gitID":"ChoChihTun"},"content":"    public void parsePersonTags_collectionWithTuteeTags_throwsIllegalValueException() throws Exception {"},{"lineNumber":314,"author":{"gitID":"ChoChihTun"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":315,"author":{"gitID":"ChoChihTun"},"content":"        ParserUtil.parsePersonTags(Arrays.asList(VALID_TAG_1, TUTEE_TAG));"},{"lineNumber":316,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":317,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":318,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":319,"author":{"gitID":"ChoChihTun"},"content":"    public void parseTuteeTags_null_throwsNullPointerException() throws Exception {"},{"lineNumber":320,"author":{"gitID":"ChoChihTun"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":321,"author":{"gitID":"ChoChihTun"},"content":"        ParserUtil.parseTuteeTags(null);"},{"lineNumber":322,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":323,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":324,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":325,"author":{"gitID":"ChoChihTun"},"content":"    public void parseTuteeTags_collectionWithInvalidTags_throwsIllegalValueException() throws Exception {"},{"lineNumber":326,"author":{"gitID":"ChoChihTun"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":327,"author":{"gitID":"ChoChihTun"},"content":"        ParserUtil.parseTuteeTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"},{"lineNumber":328,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":329,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":330,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":331,"author":{"gitID":"ChoChihTun"},"content":"    public void parseTuteeTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":332,"author":{"gitID":"ChoChihTun"},"content":"        assertTrue(ParserUtil.parseTuteeTags(Collections.emptyList()).isEmpty());"},{"lineNumber":333,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":334,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":335,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":336,"author":{"gitID":"ChoChihTun"},"content":"    public void parseTuteeTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":337,"author":{"gitID":"ChoChihTun"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTuteeTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":338,"author":{"gitID":"ChoChihTun"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003c\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":339,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":340,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":341,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":342,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":343,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":344,"author":{"gitID":"ChoChihTun"},"content":"    public void parseTuteeTags_collectionWithValidAndTuteeTags_returnsTagSet() throws Exception {"},{"lineNumber":345,"author":{"gitID":"ChoChihTun"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTuteeTags(Arrays.asList(VALID_TAG_1, TUTEE_TAG));"},{"lineNumber":346,"author":{"gitID":"ChoChihTun"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003c\u003e(Arrays.asList(new Tag(VALID_TAG_1)));"},{"lineNumber":347,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":348,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":349,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":350,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":351,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":352,"author":{"gitID":"ChoChihTun"},"content":"    public void parseSubject_null_throwsNullPointerException() {"},{"lineNumber":353,"author":{"gitID":"ChoChihTun"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseSubject((String) null));"},{"lineNumber":354,"author":{"gitID":"ChoChihTun"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseSubject((Optional\u003cString\u003e) null));"},{"lineNumber":355,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":356,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":357,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":358,"author":{"gitID":"ChoChihTun"},"content":"    public void parseSubject_invalidValue_throwsIllegalValueException() {"},{"lineNumber":359,"author":{"gitID":"ChoChihTun"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseSubject(INVALID_SUBJECT));"},{"lineNumber":360,"author":{"gitID":"ChoChihTun"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseSubject(Optional.of(INVALID_SUBJECT)));"},{"lineNumber":361,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":362,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":363,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":364,"author":{"gitID":"ChoChihTun"},"content":"    public void parseSubject_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":365,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(ParserUtil.parseSubject(Optional.empty()).isPresent());"},{"lineNumber":366,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":367,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":368,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":369,"author":{"gitID":"ChoChihTun"},"content":"    public void parseSubject_validValueWithoutWhitespace_returnsSubject() throws Exception {"},{"lineNumber":370,"author":{"gitID":"ChoChihTun"},"content":"        Subject expectedSubject \u003d new Subject(VALID_SUBJECT);"},{"lineNumber":371,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(expectedSubject, ParserUtil.parseSubject(VALID_SUBJECT));"},{"lineNumber":372,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(Optional.of(expectedSubject), ParserUtil.parseSubject(Optional.of(VALID_SUBJECT)));"},{"lineNumber":373,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":374,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":375,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":376,"author":{"gitID":"ChoChihTun"},"content":"    public void parseSubject_validValueWithWhitespace_returnsTrimmedSubject() throws Exception {"},{"lineNumber":377,"author":{"gitID":"ChoChihTun"},"content":"        String subjectWithWhitespace \u003d WHITESPACE + VALID_SUBJECT + WHITESPACE;"},{"lineNumber":378,"author":{"gitID":"ChoChihTun"},"content":"        Subject expectedSubject \u003d new Subject(VALID_SUBJECT);"},{"lineNumber":379,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(expectedSubject, ParserUtil.parseSubject(subjectWithWhitespace));"},{"lineNumber":380,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(Optional.of(expectedSubject), ParserUtil.parseSubject(Optional.of(subjectWithWhitespace)));"},{"lineNumber":381,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":382,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":383,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":384,"author":{"gitID":"ChoChihTun"},"content":"    public void parseGrade_null_throwsNullPointerException() {"},{"lineNumber":385,"author":{"gitID":"ChoChihTun"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseGrade((String) null));"},{"lineNumber":386,"author":{"gitID":"ChoChihTun"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseGrade((Optional\u003cString\u003e) null));"},{"lineNumber":387,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":388,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":389,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":390,"author":{"gitID":"ChoChihTun"},"content":"    public void parseGrade_invalidValue_throwsIllegalValueException() {"},{"lineNumber":391,"author":{"gitID":"ChoChihTun"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseGrade(INVALID_GRADE));"},{"lineNumber":392,"author":{"gitID":"ChoChihTun"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseGrade(Optional.of(INVALID_GRADE)));"},{"lineNumber":393,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":394,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":395,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":396,"author":{"gitID":"ChoChihTun"},"content":"    public void parseGrade_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":397,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(ParserUtil.parseGrade(Optional.empty()).isPresent());"},{"lineNumber":398,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":399,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":400,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":401,"author":{"gitID":"ChoChihTun"},"content":"    public void parseGrade_validValueWithoutWhitespace_returnsGrade() throws Exception {"},{"lineNumber":402,"author":{"gitID":"ChoChihTun"},"content":"        Grade expectedGrade \u003d new Grade(VALID_GRADE);"},{"lineNumber":403,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(expectedGrade, ParserUtil.parseGrade(VALID_GRADE));"},{"lineNumber":404,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(Optional.of(expectedGrade), ParserUtil.parseGrade(Optional.of(VALID_GRADE)));"},{"lineNumber":405,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":406,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":407,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":408,"author":{"gitID":"ChoChihTun"},"content":"    public void parseGrade_validValueWithWhitespace_returnsTrimmedGrade() throws Exception {"},{"lineNumber":409,"author":{"gitID":"ChoChihTun"},"content":"        String gradeWithWhitespace \u003d WHITESPACE + VALID_GRADE + WHITESPACE;"},{"lineNumber":410,"author":{"gitID":"ChoChihTun"},"content":"        Grade expectedGrade \u003d new Grade(VALID_GRADE);"},{"lineNumber":411,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(expectedGrade, ParserUtil.parseGrade(gradeWithWhitespace));"},{"lineNumber":412,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(Optional.of(expectedGrade), ParserUtil.parseGrade(Optional.of(gradeWithWhitespace)));"},{"lineNumber":413,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":414,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":415,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":416,"author":{"gitID":"ChoChihTun"},"content":"    public void parseEducationLevel_null_throwsNullPointerException() {"},{"lineNumber":417,"author":{"gitID":"ChoChihTun"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEducationLevel((String) null));"},{"lineNumber":418,"author":{"gitID":"ChoChihTun"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEducationLevel((Optional\u003cString\u003e) null));"},{"lineNumber":419,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":420,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":421,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":422,"author":{"gitID":"ChoChihTun"},"content":"    public void parseEducationLevel_invalidValue_throwsIllegalValueException() {"},{"lineNumber":423,"author":{"gitID":"ChoChihTun"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEducationLevel("},{"lineNumber":424,"author":{"gitID":"ChoChihTun"},"content":"                INVALID_EDUCATIONAL_LEVEL));"},{"lineNumber":425,"author":{"gitID":"ChoChihTun"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEducationLevel("},{"lineNumber":426,"author":{"gitID":"ChoChihTun"},"content":"                Optional.of(INVALID_EDUCATIONAL_LEVEL)));"},{"lineNumber":427,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":428,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":429,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":430,"author":{"gitID":"ChoChihTun"},"content":"    public void parseEducationLevel_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":431,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(ParserUtil.parseEducationLevel(Optional.empty()).isPresent());"},{"lineNumber":432,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":433,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":434,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":435,"author":{"gitID":"ChoChihTun"},"content":"    public void parseEducationLevel_validValueWithoutWhitespace_returnsEducationLevel() throws Exception {"},{"lineNumber":436,"author":{"gitID":"ChoChihTun"},"content":"        EducationLevel expectedEducationLevel \u003d new EducationLevel(VALID_EDUCATIONAL_LEVEL);"},{"lineNumber":437,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(expectedEducationLevel, ParserUtil.parseEducationLevel(VALID_EDUCATIONAL_LEVEL));"},{"lineNumber":438,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(Optional.of(expectedEducationLevel), ParserUtil.parseEducationLevel("},{"lineNumber":439,"author":{"gitID":"ChoChihTun"},"content":"                Optional.of(VALID_EDUCATIONAL_LEVEL)));"},{"lineNumber":440,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":441,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":442,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":443,"author":{"gitID":"ChoChihTun"},"content":"    public void parseEducationLevel_validValueWithWhitespace_returnsTrimmedEducationLevel() throws Exception {"},{"lineNumber":444,"author":{"gitID":"ChoChihTun"},"content":"        String educationLevelWithWhitespace \u003d WHITESPACE + VALID_EDUCATIONAL_LEVEL + WHITESPACE;"},{"lineNumber":445,"author":{"gitID":"ChoChihTun"},"content":"        EducationLevel expectedEducationLevel \u003d new EducationLevel(VALID_EDUCATIONAL_LEVEL);"},{"lineNumber":446,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(expectedEducationLevel, ParserUtil.parseEducationLevel(educationLevelWithWhitespace));"},{"lineNumber":447,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(Optional.of(expectedEducationLevel), ParserUtil.parseEducationLevel("},{"lineNumber":448,"author":{"gitID":"ChoChihTun"},"content":"                Optional.of(educationLevelWithWhitespace)));"},{"lineNumber":449,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":450,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":451,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":452,"author":{"gitID":"ChoChihTun"},"content":"    public void parseSchool_null_throwsNullPointerException() {"},{"lineNumber":453,"author":{"gitID":"ChoChihTun"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseSchool((String) null));"},{"lineNumber":454,"author":{"gitID":"ChoChihTun"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseSchool((Optional\u003cString\u003e) null));"},{"lineNumber":455,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":456,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":457,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":458,"author":{"gitID":"ChoChihTun"},"content":"    public void parseSchool_invalidValue_throwsIllegalValueException() {"},{"lineNumber":459,"author":{"gitID":"ChoChihTun"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseSchool(INVALID_SCHOOL));"},{"lineNumber":460,"author":{"gitID":"ChoChihTun"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseSchool(Optional.of(INVALID_SCHOOL)));"},{"lineNumber":461,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":462,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":463,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":464,"author":{"gitID":"ChoChihTun"},"content":"    public void parseSchool_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":465,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(ParserUtil.parseSchool(Optional.empty()).isPresent());"},{"lineNumber":466,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":467,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":468,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":469,"author":{"gitID":"ChoChihTun"},"content":"    public void parseSchool_validValueWithoutWhitespace_returnsSchool() throws Exception {"},{"lineNumber":470,"author":{"gitID":"ChoChihTun"},"content":"        School expectedSchool \u003d new School(VALID_SCHOOL);"},{"lineNumber":471,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(expectedSchool, ParserUtil.parseSchool(VALID_SCHOOL));"},{"lineNumber":472,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(Optional.of(expectedSchool), ParserUtil.parseSchool(Optional.of(VALID_SCHOOL)));"},{"lineNumber":473,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":474,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":475,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":476,"author":{"gitID":"ChoChihTun"},"content":"    public void parseSchool_validValueWithWhitespace_returnsTrimmedSchool() throws Exception {"},{"lineNumber":477,"author":{"gitID":"ChoChihTun"},"content":"        String schoolWithWhitespace \u003d WHITESPACE + VALID_SCHOOL + WHITESPACE;"},{"lineNumber":478,"author":{"gitID":"ChoChihTun"},"content":"        School expectedSchool \u003d new School(VALID_SCHOOL);"},{"lineNumber":479,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(expectedSchool, ParserUtil.parseSchool(schoolWithWhitespace));"},{"lineNumber":480,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(Optional.of(expectedSchool), ParserUtil.parseSchool(Optional.of(schoolWithWhitespace)));"},{"lineNumber":481,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":482,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":483,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":484,"author":{"gitID":"ChoChihTun"},"content":"    public void parseTimeUnit_null_throwsNullPointerException() {"},{"lineNumber":485,"author":{"gitID":"ChoChihTun"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTimeUnit(null));"},{"lineNumber":486,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":487,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":488,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":489,"author":{"gitID":"ChoChihTun"},"content":"    public void parseTimeUnit_invalidValue_throwsIllegalValueException() {"},{"lineNumber":490,"author":{"gitID":"ChoChihTun"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseTimeUnit(INVALID_TIME_UNIT));"},{"lineNumber":491,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":492,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":493,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":494,"author":{"gitID":"ChoChihTun"},"content":"    public void parseTimeUnit_validValueWithoutWhitespace_returnsTimeUnit() throws Exception {"},{"lineNumber":495,"author":{"gitID":"ChoChihTun"},"content":"        String expectedTimeUnit \u003d VALID_TIME_UNIT;"},{"lineNumber":496,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(expectedTimeUnit, ParserUtil.parseTimeUnit(VALID_TIME_UNIT));"},{"lineNumber":497,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":498,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":499,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":500,"author":{"gitID":"ChoChihTun"},"content":"    public void parseTimeUnit_validValueWithWhitespace_returnsTrimmedTimeUnit() throws Exception {"},{"lineNumber":501,"author":{"gitID":"ChoChihTun"},"content":"        String timeUnitWithWhitespace \u003d WHITESPACE + VALID_TIME_UNIT + WHITESPACE;"},{"lineNumber":502,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(VALID_TIME_UNIT, ParserUtil.parseTimeUnit(timeUnitWithWhitespace));"},{"lineNumber":503,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":504,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":505,"author":{"gitID":"yungyung04"},"content":"    //@@author yungyung04"},{"lineNumber":506,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":507,"author":{"gitID":"yungyung04"},"content":"    public void parseDateTime_invalidInput_throwsDateTimeParseException() {"},{"lineNumber":508,"author":{"gitID":"yungyung04"},"content":"        //null date and time"},{"lineNumber":509,"author":{"gitID":"yungyung04"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDateTime(null));"},{"lineNumber":510,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":511,"author":{"gitID":"yungyung04"},"content":"        //invalid date in non leap year"},{"lineNumber":512,"author":{"gitID":"yungyung04"},"content":"        Assert.assertThrows(DateTimeParseException.class, () -\u003e ParserUtil"},{"lineNumber":513,"author":{"gitID":"yungyung04"},"content":"                .parseDateTime(\"29/02/2018 \" + VALID_TIME));"},{"lineNumber":514,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":515,"author":{"gitID":"yungyung04"},"content":"        //invalid date in century year"},{"lineNumber":516,"author":{"gitID":"yungyung04"},"content":"        Assert.assertThrows(DateTimeParseException.class, () -\u003e ParserUtil"},{"lineNumber":517,"author":{"gitID":"yungyung04"},"content":"                .parseDateTime(\"29/02/1900 \" + VALID_TIME));"},{"lineNumber":518,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":519,"author":{"gitID":"yungyung04"},"content":"        //invalid date in month with 30 days"},{"lineNumber":520,"author":{"gitID":"yungyung04"},"content":"        Assert.assertThrows(DateTimeParseException.class, () -\u003e ParserUtil"},{"lineNumber":521,"author":{"gitID":"yungyung04"},"content":"                .parseDateTime(\"31/04/2018 \" + VALID_TIME));"},{"lineNumber":522,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":523,"author":{"gitID":"yungyung04"},"content":"        //invalid date in month with 31 days"},{"lineNumber":524,"author":{"gitID":"yungyung04"},"content":"        Assert.assertThrows(DateTimeParseException.class, () -\u003e ParserUtil"},{"lineNumber":525,"author":{"gitID":"yungyung04"},"content":"                .parseDateTime(\"32/03/2018 \" + VALID_TIME));"},{"lineNumber":526,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":527,"author":{"gitID":"yungyung04"},"content":"        //invalid hour"},{"lineNumber":528,"author":{"gitID":"yungyung04"},"content":"        Assert.assertThrows(DateTimeParseException.class, () -\u003e ParserUtil"},{"lineNumber":529,"author":{"gitID":"yungyung04"},"content":"                .parseDateTime(VALID_DATE + \" 25:00\"));"},{"lineNumber":530,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":531,"author":{"gitID":"yungyung04"},"content":"        //invalid minute"},{"lineNumber":532,"author":{"gitID":"yungyung04"},"content":"        Assert.assertThrows(DateTimeParseException.class, () -\u003e ParserUtil"},{"lineNumber":533,"author":{"gitID":"yungyung04"},"content":"                .parseDateTime(VALID_DATE + \"12:60\"));"},{"lineNumber":534,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":535,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":536,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":537,"author":{"gitID":"yungyung04"},"content":"    public void parseDateTime_validInput_parsedSuccessfully() {"},{"lineNumber":538,"author":{"gitID":"yungyung04"},"content":"        //beginning of the month"},{"lineNumber":539,"author":{"gitID":"yungyung04"},"content":"        LocalDateTime expectedDateTime \u003d LocalDateTime.parse(\"01/10/2018 \" + VALID_TIME, FORMATTER);"},{"lineNumber":540,"author":{"gitID":"yungyung04"},"content":"        assertEquals(expectedDateTime, parseDateTime(\"01/10/2018 \" + VALID_TIME));"},{"lineNumber":541,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":542,"author":{"gitID":"yungyung04"},"content":"        //leap year"},{"lineNumber":543,"author":{"gitID":"yungyung04"},"content":"        expectedDateTime \u003d LocalDateTime.parse(\"29/02/2020 \" + VALID_TIME, FORMATTER);"},{"lineNumber":544,"author":{"gitID":"yungyung04"},"content":"        assertEquals(expectedDateTime, parseDateTime(\"29/02/2020 \" + VALID_TIME));"},{"lineNumber":545,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":546,"author":{"gitID":"yungyung04"},"content":"        //month with 30 days"},{"lineNumber":547,"author":{"gitID":"yungyung04"},"content":"        expectedDateTime \u003d LocalDateTime.parse(\"30/04/2020 \" + VALID_TIME, FORMATTER);"},{"lineNumber":548,"author":{"gitID":"yungyung04"},"content":"        assertEquals(expectedDateTime, parseDateTime(\"30/04/2020 \" + VALID_TIME));"},{"lineNumber":549,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":550,"author":{"gitID":"yungyung04"},"content":"        //month with 31 days"},{"lineNumber":551,"author":{"gitID":"yungyung04"},"content":"        expectedDateTime \u003d LocalDateTime.parse(\"31/03/2020 \" + VALID_TIME, FORMATTER);"},{"lineNumber":552,"author":{"gitID":"yungyung04"},"content":"        assertEquals(expectedDateTime, parseDateTime(\"31/03/2020 \" + VALID_TIME));"},{"lineNumber":553,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":554,"author":{"gitID":"yungyung04"},"content":"        //valid time at boundary value"},{"lineNumber":555,"author":{"gitID":"yungyung04"},"content":"        expectedDateTime \u003d LocalDateTime.parse(VALID_DATE + \" 12:00\", FORMATTER);"},{"lineNumber":556,"author":{"gitID":"yungyung04"},"content":"        assertEquals(expectedDateTime, parseDateTime(VALID_DATE + \" 12:00\"));"},{"lineNumber":557,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":558,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":559,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":560,"author":{"gitID":"yungyung04"},"content":"    public void parseDuration_invalidInput_throwsDateTimeParseException() {"},{"lineNumber":561,"author":{"gitID":"yungyung04"},"content":"        //null duration"},{"lineNumber":562,"author":{"gitID":"yungyung04"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDuration(null));"},{"lineNumber":563,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":564,"author":{"gitID":"yungyung04"},"content":"        //invalid duration"},{"lineNumber":565,"author":{"gitID":"yungyung04"},"content":"        Assert.assertThrows(DurationParseException.class, () -\u003e ParserUtil"},{"lineNumber":566,"author":{"gitID":"yungyung04"},"content":"                .parseDuration(INVALID_DURATION));"},{"lineNumber":567,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":568,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":569,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":570,"author":{"gitID":"yungyung04"},"content":"    public void parseDuration_validInput_parsedSuccessfully() throws Exception {"},{"lineNumber":571,"author":{"gitID":"yungyung04"},"content":"        String expectedDuration \u003d VALID_DURATION;"},{"lineNumber":572,"author":{"gitID":"yungyung04"},"content":"        assertEquals(expectedDuration, parseDuration(VALID_DURATION));"},{"lineNumber":573,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":574,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":575,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":576,"author":{"gitID":"yungyung04"},"content":"    public void parseDescription_noDescriptionWithinInput_returnsEmptyString() {"},{"lineNumber":577,"author":{"gitID":"yungyung04"},"content":"        //user input without description"},{"lineNumber":578,"author":{"gitID":"yungyung04"},"content":"        String[] validInputs \u003d VALID_TASK_WITHOUT_DESCRIPTION.split(\"\\\\s+\", MAXIMUM_AMOUNT_OF_PARAMETERS);"},{"lineNumber":579,"author":{"gitID":"yungyung04"},"content":"        String expectedDescription \u003d \"\";"},{"lineNumber":580,"author":{"gitID":"yungyung04"},"content":"        assertEquals(expectedDescription, ParserUtil.parseDescription(validInputs, MAXIMUM_AMOUNT_OF_PARAMETERS));"},{"lineNumber":581,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":582,"author":{"gitID":"yungyung04"},"content":"        //user input with description"},{"lineNumber":583,"author":{"gitID":"yungyung04"},"content":"        validInputs \u003d VALID_TASK_WITH_DESCRIPTION.split(\"\\\\s+\", MAXIMUM_AMOUNT_OF_PARAMETERS);"},{"lineNumber":584,"author":{"gitID":"yungyung04"},"content":"        expectedDescription \u003d VALID_DESCRIPTION;"},{"lineNumber":585,"author":{"gitID":"yungyung04"},"content":"        assertEquals(expectedDescription, ParserUtil.parseDescription(validInputs, MAXIMUM_AMOUNT_OF_PARAMETERS));"},{"lineNumber":586,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":587,"author":{"gitID":"yungyung04"},"content":"}"}],"authorContributionMap":{"yungyung04":95,"ChoChihTun":247,"-":245}},{"path":"src/test/java/seedu/address/logic/parser/FindPersonCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_FILTER_CATEGORY;"},{"lineNumber":5,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EDUCATION_LEVEL_AMY;"},{"lineNumber":6,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_AMY;"},{"lineNumber":7,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHOOL_AMY;"},{"lineNumber":10,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_AMY;"},{"lineNumber":11,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_BOB;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":14,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_EDUCATION_LEVEL;"},{"lineNumber":15,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_GRADE;"},{"lineNumber":16,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_NAME;"},{"lineNumber":17,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_SCHOOL;"},{"lineNumber":18,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_SUBJECT;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"yungyung04"},"content":"import seedu.address.logic.commands.FindPersonCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"yungyung04"},"content":"//@@author yungyung04"},{"lineNumber":25,"author":{"gitID":"yungyung04"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"yungyung04"},"content":" * Contains tests for {@code FindPersonCommandParser}."},{"lineNumber":27,"author":{"gitID":"yungyung04"},"content":" */"},{"lineNumber":28,"author":{"gitID":"yungyung04"},"content":"public class FindPersonCommandParserTest {"},{"lineNumber":29,"author":{"gitID":"yungyung04"},"content":"    private static final int INDEX_FIRST_ELEMENT \u003d 0;"},{"lineNumber":30,"author":{"gitID":"yungyung04"},"content":"    public static final String VALID_FIRST_NAME_BOB \u003d VALID_NAME_BOB.toLowerCase().split(\"\\\\s+\")[INDEX_FIRST_ELEMENT];"},{"lineNumber":31,"author":{"gitID":"yungyung04"},"content":"    private FindPersonCommandParser parser \u003d new FindPersonCommandParser();"},{"lineNumber":32,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":33,"author":{"gitID":"yungyung04"},"content":"    private final String[] nameKeywords \u003d {VALID_FIRST_NAME_BOB};"},{"lineNumber":34,"author":{"gitID":"yungyung04"},"content":"    private final String[] educationLevelKeywords \u003d {VALID_EDUCATION_LEVEL_AMY.toLowerCase()};"},{"lineNumber":35,"author":{"gitID":"yungyung04"},"content":"    private final String[] gradeKeywords \u003d {VALID_GRADE_AMY.toLowerCase(), VALID_GRADE_BOB.toLowerCase()};"},{"lineNumber":36,"author":{"gitID":"yungyung04"},"content":"    private final String[] schoolKeywords \u003d VALID_SCHOOL_AMY.toLowerCase().split(\"\\\\s+\");"},{"lineNumber":37,"author":{"gitID":"yungyung04"},"content":"    private final String[] subjectKeywords \u003d {VALID_SUBJECT_AMY.toLowerCase(), VALID_SUBJECT_BOB.toLowerCase()};"},{"lineNumber":38,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":39,"author":{"gitID":"yungyung04"},"content":"    private final String invalidCategory \u003d \"age\";"},{"lineNumber":40,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":41,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"yungyung04"},"content":"    public void parse_invalidArg_throwsParseException() {"},{"lineNumber":43,"author":{"gitID":"yungyung04"},"content":"        //empty input"},{"lineNumber":44,"author":{"gitID":"yungyung04"},"content":"        assertParseFailure(parser, \"     \","},{"lineNumber":45,"author":{"gitID":"yungyung04"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPersonCommand.MESSAGE_USAGE));"},{"lineNumber":46,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":47,"author":{"gitID":"yungyung04"},"content":"        //not enough arguments"},{"lineNumber":48,"author":{"gitID":"yungyung04"},"content":"        assertParseFailure(parser, CATEGORY_GRADE,"},{"lineNumber":49,"author":{"gitID":"yungyung04"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPersonCommand.MESSAGE_USAGE));"},{"lineNumber":50,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":51,"author":{"gitID":"yungyung04"},"content":"        //invalid category"},{"lineNumber":52,"author":{"gitID":"yungyung04"},"content":"        assertParseFailure(parser, invalidCategory + \" \" + schoolKeywords[INDEX_FIRST_ELEMENT],"},{"lineNumber":53,"author":{"gitID":"yungyung04"},"content":"                String.format(MESSAGE_INVALID_FILTER_CATEGORY, FindPersonCommand.MESSAGE_USAGE));"},{"lineNumber":54,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":56,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"yungyung04"},"content":"    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":58,"author":{"gitID":"yungyung04"},"content":"        // filter by name using a single keyword"},{"lineNumber":59,"author":{"gitID":"yungyung04"},"content":"        FindPersonCommand expectedFindName \u003d new FindPersonCommand(CATEGORY_NAME, nameKeywords);"},{"lineNumber":60,"author":{"gitID":"yungyung04"},"content":"        assertParseSuccess(parser, CATEGORY_NAME + \" Bob\", expectedFindName);"},{"lineNumber":61,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":62,"author":{"gitID":"yungyung04"},"content":"        // filter by education level using a single keyword"},{"lineNumber":63,"author":{"gitID":"yungyung04"},"content":"        FindPersonCommand expectedFindEducatonLevel \u003d"},{"lineNumber":64,"author":{"gitID":"yungyung04"},"content":"                new FindPersonCommand(CATEGORY_EDUCATION_LEVEL, educationLevelKeywords);"},{"lineNumber":65,"author":{"gitID":"yungyung04"},"content":"        assertParseSuccess(parser,"},{"lineNumber":66,"author":{"gitID":"yungyung04"},"content":"                CATEGORY_EDUCATION_LEVEL + \" \" + VALID_EDUCATION_LEVEL_AMY, expectedFindEducatonLevel);"},{"lineNumber":67,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":68,"author":{"gitID":"yungyung04"},"content":"        // filter by grade using 2 different keywords"},{"lineNumber":69,"author":{"gitID":"yungyung04"},"content":"        FindPersonCommand expectedFindGrade \u003d new FindPersonCommand(CATEGORY_GRADE, gradeKeywords);"},{"lineNumber":70,"author":{"gitID":"yungyung04"},"content":"        assertParseSuccess(parser, CATEGORY_GRADE + \" \" + VALID_GRADE_AMY"},{"lineNumber":71,"author":{"gitID":"yungyung04"},"content":"                + \" \" + VALID_GRADE_BOB, expectedFindGrade);"},{"lineNumber":72,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":73,"author":{"gitID":"yungyung04"},"content":"        // filter by school using multiple keywords from a single school"},{"lineNumber":74,"author":{"gitID":"yungyung04"},"content":"        FindPersonCommand expectedFindSchool \u003d new FindPersonCommand(CATEGORY_SCHOOL, schoolKeywords);"},{"lineNumber":75,"author":{"gitID":"yungyung04"},"content":"        assertParseSuccess(parser, CATEGORY_SCHOOL + \" \" + VALID_SCHOOL_AMY, expectedFindSchool);"},{"lineNumber":76,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":77,"author":{"gitID":"yungyung04"},"content":"        // filter by subject using 2 different keywords"},{"lineNumber":78,"author":{"gitID":"yungyung04"},"content":"        FindPersonCommand expectedFindSubject \u003d new FindPersonCommand(CATEGORY_SUBJECT, subjectKeywords);"},{"lineNumber":79,"author":{"gitID":"yungyung04"},"content":"        assertParseSuccess(parser, CATEGORY_SUBJECT + \" \" + VALID_SUBJECT_AMY"},{"lineNumber":80,"author":{"gitID":"yungyung04"},"content":"                + \" \" + VALID_SUBJECT_BOB, expectedFindSubject);"},{"lineNumber":81,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":82,"author":{"gitID":"yungyung04"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":83,"author":{"gitID":"yungyung04"},"content":"        assertParseSuccess(parser, CATEGORY_NAME + \" \\n\\t  \" + \"Bob\", expectedFindName);"},{"lineNumber":84,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"yungyung04"},"content":"}"}],"authorContributionMap":{"yungyung04":69,"ChoChihTun":6,"-":10}},{"path":"src/test/java/seedu/address/logic/parser/SortPersonCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yungyung04"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_SORTER_CATEGORY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_EDUCATION_LEVEL;"},{"lineNumber":8,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_GRADE;"},{"lineNumber":9,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_NAME;"},{"lineNumber":10,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_SCHOOL;"},{"lineNumber":11,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_SUBJECT;"},{"lineNumber":12,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":13,"author":{"gitID":"yungyung04"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":15,"author":{"gitID":"yungyung04"},"content":"import seedu.address.logic.commands.SortPersonCommand;"},{"lineNumber":16,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":17,"author":{"gitID":"yungyung04"},"content":"//@@author yungyung04"},{"lineNumber":18,"author":{"gitID":"yungyung04"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"yungyung04"},"content":" * Contains tests for {@code SortPersonCommandParser}."},{"lineNumber":20,"author":{"gitID":"yungyung04"},"content":" */"},{"lineNumber":21,"author":{"gitID":"yungyung04"},"content":"public class SortPersonCommandParserTest {"},{"lineNumber":22,"author":{"gitID":"yungyung04"},"content":"    private SortPersonCommandParser parser \u003d new SortPersonCommandParser();"},{"lineNumber":23,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":24,"author":{"gitID":"yungyung04"},"content":"    private final String invalidCategory \u003d \"age\";"},{"lineNumber":25,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":26,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"yungyung04"},"content":"    public void parse_invalidArg_throwsParseException() {"},{"lineNumber":28,"author":{"gitID":"yungyung04"},"content":"        //empty input"},{"lineNumber":29,"author":{"gitID":"yungyung04"},"content":"        assertParseFailure(parser, \"     \","},{"lineNumber":30,"author":{"gitID":"yungyung04"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortPersonCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":32,"author":{"gitID":"yungyung04"},"content":"        //too many arguments"},{"lineNumber":33,"author":{"gitID":"yungyung04"},"content":"        assertParseFailure(parser, CATEGORY_GRADE + \" \" + CATEGORY_EDUCATION_LEVEL,"},{"lineNumber":34,"author":{"gitID":"yungyung04"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortPersonCommand.MESSAGE_USAGE));"},{"lineNumber":35,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":36,"author":{"gitID":"yungyung04"},"content":"        //invalid category"},{"lineNumber":37,"author":{"gitID":"yungyung04"},"content":"        assertParseFailure(parser, invalidCategory,"},{"lineNumber":38,"author":{"gitID":"yungyung04"},"content":"                String.format(MESSAGE_INVALID_SORTER_CATEGORY, SortPersonCommand.MESSAGE_USAGE));"},{"lineNumber":39,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":41,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"yungyung04"},"content":"    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":43,"author":{"gitID":"yungyung04"},"content":"        // sort by name"},{"lineNumber":44,"author":{"gitID":"yungyung04"},"content":"        SortPersonCommand expectedSortName \u003d new SortPersonCommand(CATEGORY_NAME);"},{"lineNumber":45,"author":{"gitID":"yungyung04"},"content":"        assertParseSuccess(parser, CATEGORY_NAME, expectedSortName);"},{"lineNumber":46,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":47,"author":{"gitID":"yungyung04"},"content":"        // sort by education level"},{"lineNumber":48,"author":{"gitID":"yungyung04"},"content":"        SortPersonCommand expectedSortEducatonLevel \u003d new SortPersonCommand(CATEGORY_EDUCATION_LEVEL);"},{"lineNumber":49,"author":{"gitID":"yungyung04"},"content":"        assertParseSuccess(parser, CATEGORY_EDUCATION_LEVEL, expectedSortEducatonLevel);"},{"lineNumber":50,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":51,"author":{"gitID":"yungyung04"},"content":"        // sort by grade"},{"lineNumber":52,"author":{"gitID":"yungyung04"},"content":"        SortPersonCommand expectedSortGrade \u003d new SortPersonCommand(CATEGORY_GRADE);"},{"lineNumber":53,"author":{"gitID":"yungyung04"},"content":"        assertParseSuccess(parser, CATEGORY_GRADE, expectedSortGrade);"},{"lineNumber":54,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":55,"author":{"gitID":"yungyung04"},"content":"        // sort by school"},{"lineNumber":56,"author":{"gitID":"yungyung04"},"content":"        SortPersonCommand expectedSortSchool \u003d new SortPersonCommand(CATEGORY_SCHOOL);"},{"lineNumber":57,"author":{"gitID":"yungyung04"},"content":"        assertParseSuccess(parser, CATEGORY_SCHOOL, expectedSortSchool);"},{"lineNumber":58,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":59,"author":{"gitID":"yungyung04"},"content":"        // sort by subject"},{"lineNumber":60,"author":{"gitID":"yungyung04"},"content":"        SortPersonCommand expectedSortSubject \u003d new SortPersonCommand(CATEGORY_SUBJECT);"},{"lineNumber":61,"author":{"gitID":"yungyung04"},"content":"        assertParseSuccess(parser, CATEGORY_SUBJECT, expectedSortSubject);"},{"lineNumber":62,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":63,"author":{"gitID":"yungyung04"},"content":"        // multiple whitespaces before and after sort category"},{"lineNumber":64,"author":{"gitID":"yungyung04"},"content":"        assertParseSuccess(parser, \"   \\n\\t\" + CATEGORY_NAME + \"\\n\\t\", expectedSortName);"},{"lineNumber":65,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"yungyung04"},"content":"}"}],"authorContributionMap":{"yungyung04":63,"-":3}},{"path":"src/test/java/seedu/address/logic/commands/AddPersonalTaskCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yungyung04"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":3,"author":{"gitID":"yungyung04"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"yungyung04"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":8,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_TASK_TIMING_CLASHES;"},{"lineNumber":9,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_TIME_AMY;"},{"lineNumber":10,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_TIME_BOB;"},{"lineNumber":11,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DURATION_AMY;"},{"lineNumber":12,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_DESC_AMY;"},{"lineNumber":13,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.TaskUtil.FORMATTER;"},{"lineNumber":14,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":15,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":16,"author":{"gitID":"yungyung04"},"content":"import java.time.LocalDateTime;"},{"lineNumber":17,"author":{"gitID":"yungyung04"},"content":"import java.util.ArrayList;"},{"lineNumber":18,"author":{"gitID":"yungyung04"},"content":"import java.util.Arrays;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":23,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":24,"author":{"gitID":"yungyung04"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":25,"author":{"gitID":"yungyung04"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":26,"author":{"gitID":"yungyung04"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":27,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":28,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.Model;"},{"lineNumber":29,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":30,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.Task;"},{"lineNumber":31,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.personal.PersonalTask;"},{"lineNumber":32,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.model.task.exceptions.TimingClashException;"},{"lineNumber":33,"author":{"gitID":"yungyung04"},"content":"import seedu.address.testutil.ModelStub;"},{"lineNumber":34,"author":{"gitID":"yungyung04"},"content":"import seedu.address.testutil.TaskBuilder;"},{"lineNumber":35,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":36,"author":{"gitID":"yungyung04"},"content":"//@@author yungyung04"},{"lineNumber":37,"author":{"gitID":"yungyung04"},"content":"public class AddPersonalTaskCommandTest {"},{"lineNumber":38,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":39,"author":{"gitID":"yungyung04"},"content":"    @Rule"},{"lineNumber":40,"author":{"gitID":"yungyung04"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":41,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":42,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"yungyung04"},"content":"    public void constructor_nullTask_throwsNullPointerException() {"},{"lineNumber":44,"author":{"gitID":"yungyung04"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":45,"author":{"gitID":"yungyung04"},"content":"        new AddPersonalTaskCommand(null);"},{"lineNumber":46,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":48,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"yungyung04"},"content":"    public void execute_taskAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":50,"author":{"gitID":"yungyung04"},"content":"        ModelStubAcceptingPersonalTaskAdded modelStub \u003d new ModelStubAcceptingPersonalTaskAdded();"},{"lineNumber":51,"author":{"gitID":"yungyung04"},"content":"        PersonalTask validTask \u003d new TaskBuilder().buildPersonalTask();"},{"lineNumber":52,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":53,"author":{"gitID":"yungyung04"},"content":"        CommandResult commandResult \u003d getAddPersonalTaskCommandForTask(validTask, modelStub).execute();"},{"lineNumber":54,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":55,"author":{"gitID":"yungyung04"},"content":"        assertEquals(String.format(AddPersonalTaskCommand.MESSAGE_SUCCESS, validTask), commandResult.feedbackToUser);"},{"lineNumber":56,"author":{"gitID":"yungyung04"},"content":"        assertEquals(Arrays.asList(validTask), modelStub.tasksAdded);"},{"lineNumber":57,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":59,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"yungyung04"},"content":"    public void execute_clashingTask_throwsCommandException() throws Exception {"},{"lineNumber":61,"author":{"gitID":"yungyung04"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingTimingClashException();"},{"lineNumber":62,"author":{"gitID":"yungyung04"},"content":"        PersonalTask validTask \u003d new TaskBuilder().buildPersonalTask();"},{"lineNumber":63,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":64,"author":{"gitID":"yungyung04"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":65,"author":{"gitID":"yungyung04"},"content":"        thrown.expectMessage(MESSAGE_TASK_TIMING_CLASHES);"},{"lineNumber":66,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":67,"author":{"gitID":"yungyung04"},"content":"        getAddPersonalTaskCommandForTask(validTask, modelStub).execute();"},{"lineNumber":68,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":70,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"yungyung04"},"content":"    public void equals() {"},{"lineNumber":72,"author":{"gitID":"yungyung04"},"content":"        PersonalTask firstPersonalTask \u003d new TaskBuilder().withDateTime(VALID_DATE_TIME_AMY).buildPersonalTask();"},{"lineNumber":73,"author":{"gitID":"yungyung04"},"content":"        PersonalTask secondPersonalTask \u003d new TaskBuilder().withDateTime(VALID_DATE_TIME_BOB).buildPersonalTask();"},{"lineNumber":74,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":75,"author":{"gitID":"yungyung04"},"content":"        AddPersonalTaskCommand addFirstTask \u003d new AddPersonalTaskCommand(firstPersonalTask);"},{"lineNumber":76,"author":{"gitID":"yungyung04"},"content":"        AddPersonalTaskCommand addFirstTaskCopy \u003d new AddPersonalTaskCommand(firstPersonalTask);"},{"lineNumber":77,"author":{"gitID":"yungyung04"},"content":"        AddPersonalTaskCommand addSecondTask \u003d new AddPersonalTaskCommand(secondPersonalTask);"},{"lineNumber":78,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":79,"author":{"gitID":"yungyung04"},"content":"        LocalDateTime tuitionDateTime \u003d LocalDateTime.parse(VALID_DATE_TIME_AMY, FORMATTER);"},{"lineNumber":80,"author":{"gitID":"yungyung04"},"content":"        AddTuitionTaskCommand addTuitionTask \u003d new AddTuitionTaskCommand("},{"lineNumber":81,"author":{"gitID":"yungyung04"},"content":"                INDEX_FIRST_PERSON, tuitionDateTime, VALID_DURATION_AMY, VALID_TASK_DESC_AMY);"},{"lineNumber":82,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":83,"author":{"gitID":"yungyung04"},"content":"        // same object -\u003e returns true"},{"lineNumber":84,"author":{"gitID":"yungyung04"},"content":"        assertTrue(addFirstTask.equals(addFirstTask));"},{"lineNumber":85,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":86,"author":{"gitID":"yungyung04"},"content":"        // same values -\u003e returns true"},{"lineNumber":87,"author":{"gitID":"yungyung04"},"content":"        assertTrue(addFirstTask.equals(addFirstTaskCopy));"},{"lineNumber":88,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":89,"author":{"gitID":"yungyung04"},"content":"        // different types -\u003e returns false"},{"lineNumber":90,"author":{"gitID":"yungyung04"},"content":"        assertFalse(addFirstTask.equals(1));"},{"lineNumber":91,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":92,"author":{"gitID":"yungyung04"},"content":"        // null -\u003e returns false"},{"lineNumber":93,"author":{"gitID":"yungyung04"},"content":"        assertFalse(addFirstTask.equals(null));"},{"lineNumber":94,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":95,"author":{"gitID":"yungyung04"},"content":"        // different task type -\u003e returns false"},{"lineNumber":96,"author":{"gitID":"yungyung04"},"content":"        assertFalse(addFirstTask.equals(addTuitionTask));"},{"lineNumber":97,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":98,"author":{"gitID":"yungyung04"},"content":"        // different detail -\u003e returns false"},{"lineNumber":99,"author":{"gitID":"yungyung04"},"content":"        assertFalse(addFirstTask.equals(addSecondTask));"},{"lineNumber":100,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":102,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"yungyung04"},"content":"     * Generates a new AddPersonalTaskCommand with the details of the given personal task."},{"lineNumber":104,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"yungyung04"},"content":"    private AddPersonalTaskCommand getAddPersonalTaskCommandForTask(PersonalTask task, Model model) {"},{"lineNumber":106,"author":{"gitID":"yungyung04"},"content":"        AddPersonalTaskCommand command \u003d new AddPersonalTaskCommand(task);"},{"lineNumber":107,"author":{"gitID":"yungyung04"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":108,"author":{"gitID":"yungyung04"},"content":"        return command;"},{"lineNumber":109,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":111,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"yungyung04"},"content":"     * A Model stub that always throw a TimingClashException when trying to add a task."},{"lineNumber":113,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"yungyung04"},"content":"    private class ModelStubThrowingTimingClashException extends ModelStub {"},{"lineNumber":115,"author":{"gitID":"yungyung04"},"content":"        @Override"},{"lineNumber":116,"author":{"gitID":"yungyung04"},"content":"        public void addTask(Task task) throws TimingClashException {"},{"lineNumber":117,"author":{"gitID":"yungyung04"},"content":"            throw new TimingClashException();"},{"lineNumber":118,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":120,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":121,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":122,"author":{"gitID":"yungyung04"},"content":"        @Override"},{"lineNumber":123,"author":{"gitID":"yungyung04"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":124,"author":{"gitID":"yungyung04"},"content":"            return new AddressBook();"},{"lineNumber":125,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":128,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"yungyung04"},"content":"     * A Model stub that always accept the task being added."},{"lineNumber":130,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"yungyung04"},"content":"    private class ModelStubAcceptingPersonalTaskAdded extends ModelStub {"},{"lineNumber":132,"author":{"gitID":"yungyung04"},"content":"        final ArrayList\u003cTask\u003e tasksAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":133,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":134,"author":{"gitID":"yungyung04"},"content":"        @Override"},{"lineNumber":135,"author":{"gitID":"yungyung04"},"content":"        public void addTask(Task task) throws TimingClashException {"},{"lineNumber":136,"author":{"gitID":"yungyung04"},"content":"            requireNonNull(task);"},{"lineNumber":137,"author":{"gitID":"yungyung04"},"content":"            tasksAdded.add(task);"},{"lineNumber":138,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":140,"author":{"gitID":"yungyung04"},"content":"        @Override"},{"lineNumber":141,"author":{"gitID":"yungyung04"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":142,"author":{"gitID":"yungyung04"},"content":"            return new AddressBook();"},{"lineNumber":143,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"yungyung04"},"content":"}"}],"authorContributionMap":{"yungyung04":135,"ChoChihTun":4,"-":6}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":13,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalAddressBookCompiler.getTypicalAddressBook1;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * {@code DeleteCommand}."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class DeleteCommandTest {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"yungyung04"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook1(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        showNoPerson(expectedModel);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // delete -\u003e first person deleted"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        // redo -\u003e same first person deleted again"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // execution failed -\u003e deleteCommand not pushed into undoRedoStack"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * 1. Deletes a {@code Person} from a filtered list."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * 2. Undo the deletion."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted person in the"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the person object regardless of indexing."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // delete -\u003e deletes second person in unfiltered person list / first person in filtered person list"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertNotEquals(personToDelete, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        // redo -\u003e deletes same second person in unfiltered person list"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        DeleteCommand deleteFirstCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        DeleteCommand deleteSecondCommand \u003d prepareCommand(INDEX_SECOND_PERSON);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        deleteFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":179,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    private DeleteCommand prepareCommand(Index index) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(index);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        deleteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        return deleteCommand;"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":188,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yungyung04":2,"-":192}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TUTEE_TAG;"},{"lineNumber":9,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EDUCATION_LEVEL_AMY;"},{"lineNumber":10,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_AMY;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":13,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHOOL_AMY;"},{"lineNumber":14,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":21,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.EditCommand.MESSAGE_INVALID_PERSON_TO_EDIT;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":24,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalAddressBookCompiler.getTypicalAddressBook1;"},{"lineNumber":25,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalAddressBookCompiler.getTypicalAddressBook2;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":39,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.model.tutee.Tutee;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":42,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.testutil.TuteeBuilder;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":45,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."},{"lineNumber":46,"author":{"gitID":"-"},"content":" */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"public class EditCommandTest {"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"yungyung04"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook1(), new UserPrefs());"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(indexLastPerson, descriptor);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(lastPerson, editedPerson);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":105,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // edit person in filtered list into a duplicate in address book"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":157,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"ChoChihTun"},"content":"    //@@author ChoChihTun"},{"lineNumber":163,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":164,"author":{"gitID":"ChoChihTun"},"content":"    public void execute_editTuteeFields_success() {"},{"lineNumber":165,"author":{"gitID":"ChoChihTun"},"content":"        // Address book with typical tutee inside"},{"lineNumber":166,"author":{"gitID":"ChoChihTun"},"content":"        model \u003d new ModelManager(getTypicalAddressBook2(), new UserPrefs());"},{"lineNumber":167,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":168,"author":{"gitID":"ChoChihTun"},"content":"        Tutee tuteeToEdit \u003d new TuteeBuilder().build();"},{"lineNumber":169,"author":{"gitID":"ChoChihTun"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(tuteeToEdit).build();"},{"lineNumber":170,"author":{"gitID":"ChoChihTun"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":171,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":172,"author":{"gitID":"ChoChihTun"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, tuteeToEdit);"},{"lineNumber":173,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":174,"author":{"gitID":"ChoChihTun"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":175,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":176,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":177,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":179,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":180,"author":{"gitID":"ChoChihTun"},"content":"    public void execute_invalidTagForPerson_failure() {"},{"lineNumber":181,"author":{"gitID":"ChoChihTun"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags(TUTEE_TAG).build();"},{"lineNumber":182,"author":{"gitID":"ChoChihTun"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":183,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandFailure(editCommand, model, MESSAGE_INVALID_PERSON_TO_EDIT);"},{"lineNumber":184,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":186,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":187,"author":{"gitID":"ChoChihTun"},"content":"    public void execute_invalidFieldsEditedForPerson_failure() {"},{"lineNumber":188,"author":{"gitID":"ChoChihTun"},"content":"        // Edit subject"},{"lineNumber":189,"author":{"gitID":"ChoChihTun"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withSubject(VALID_SUBJECT_AMY).build();"},{"lineNumber":190,"author":{"gitID":"ChoChihTun"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":191,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandFailure(editCommand, model, MESSAGE_INVALID_PERSON_TO_EDIT);"},{"lineNumber":192,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":193,"author":{"gitID":"ChoChihTun"},"content":"        // Edit grade"},{"lineNumber":194,"author":{"gitID":"ChoChihTun"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withGrade(VALID_GRADE_AMY).build();"},{"lineNumber":195,"author":{"gitID":"ChoChihTun"},"content":"        editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":196,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandFailure(editCommand, model, MESSAGE_INVALID_PERSON_TO_EDIT);"},{"lineNumber":197,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":198,"author":{"gitID":"ChoChihTun"},"content":"        // Edit education level"},{"lineNumber":199,"author":{"gitID":"ChoChihTun"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEducationLevel(VALID_EDUCATION_LEVEL_AMY).build();"},{"lineNumber":200,"author":{"gitID":"ChoChihTun"},"content":"        editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":201,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandFailure(editCommand, model, MESSAGE_INVALID_PERSON_TO_EDIT);"},{"lineNumber":202,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":203,"author":{"gitID":"ChoChihTun"},"content":"        // Edit school"},{"lineNumber":204,"author":{"gitID":"ChoChihTun"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withSchool(VALID_SCHOOL_AMY).build();"},{"lineNumber":205,"author":{"gitID":"ChoChihTun"},"content":"        editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":206,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandFailure(editCommand, model, MESSAGE_INVALID_PERSON_TO_EDIT);"},{"lineNumber":207,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"ChoChihTun"},"content":"    //@@author"},{"lineNumber":209,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"        // edit -\u003e first person edited"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"        // redo -\u003e same first person edited again"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"        // execution failed -\u003e editCommand not pushed into undoRedoStack"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * 1. Edits a {@code Person} from a filtered list."},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * 2. Undo the edit."},{"lineNumber":253,"author":{"gitID":"-"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"},{"lineNumber":254,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":255,"author":{"gitID":"-"},"content":"     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."},{"lineNumber":256,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        // redo -\u003e edits same second person in unfiltered person list"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":280,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":283,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        final EditCommand standardCommand \u003d prepareCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":288,"author":{"gitID":"-"},"content":"        EditCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":289,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":292,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":293,"author":{"gitID":"-"},"content":""},{"lineNumber":294,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":295,"author":{"gitID":"-"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":296,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":299,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":300,"author":{"gitID":"-"},"content":""},{"lineNumber":301,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":302,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":305,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":308,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"},{"lineNumber":309,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":312,"author":{"gitID":"-"},"content":"     * Returns an {@code EditCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":313,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":314,"author":{"gitID":"-"},"content":"    private EditCommand prepareCommand(Index index, EditPersonDescriptor descriptor) {"},{"lineNumber":315,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(index, descriptor);"},{"lineNumber":316,"author":{"gitID":"-"},"content":"        editCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":317,"author":{"gitID":"-"},"content":"        return editCommand;"},{"lineNumber":318,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":319,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ChoChihTun":57,"yungyung04":2,"-":260}},{"path":"src/test/java/seedu/address/logic/commands/ListCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":6,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalAddressBookCompiler.getTypicalAddressBook1;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class ListCommandTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Model expectedModel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private ListCommand listCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":28,"author":{"gitID":"yungyung04"},"content":"        model \u003d new ModelManager(getTypicalAddressBook1(), new UserPrefs());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        listCommand \u003d new ListCommand();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        listCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yungyung04":2,"-":43}},{"path":"src/test/java/seedu/address/logic/commands/AddTuteeCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":23,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.model.tutee.Tutee;"},{"lineNumber":24,"author":{"gitID":"yungyung04"},"content":"import seedu.address.testutil.ModelStub;"},{"lineNumber":25,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.testutil.TuteeBuilder;"},{"lineNumber":26,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":27,"author":{"gitID":"ChoChihTun"},"content":"//@@author ChoChihTun"},{"lineNumber":28,"author":{"gitID":"ChoChihTun"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"ChoChihTun"},"content":" * Contains integration tests (interaction with the Model) for {@code AddTuteeCommand}."},{"lineNumber":30,"author":{"gitID":"ChoChihTun"},"content":" */"},{"lineNumber":31,"author":{"gitID":"ChoChihTun"},"content":"public class AddTuteeCommandTest {"},{"lineNumber":32,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":33,"author":{"gitID":"ChoChihTun"},"content":"    @Rule"},{"lineNumber":34,"author":{"gitID":"ChoChihTun"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":35,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":36,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"ChoChihTun"},"content":"    public void constructor_nullTutee_throwsNullPointerException() {"},{"lineNumber":38,"author":{"gitID":"ChoChihTun"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":39,"author":{"gitID":"ChoChihTun"},"content":"        new AddTuteeCommand(null);"},{"lineNumber":40,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":42,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"ChoChihTun"},"content":"    public void execute_tuteeAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":44,"author":{"gitID":"ChoChihTun"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":45,"author":{"gitID":"ChoChihTun"},"content":"        Tutee validTutee \u003d new TuteeBuilder().build();"},{"lineNumber":46,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":47,"author":{"gitID":"ChoChihTun"},"content":"        CommandResult commandResult \u003d getAddTuteeCommandForTutee(validTutee, modelStub).execute();"},{"lineNumber":48,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":49,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(String.format(AddTuteeCommand.MESSAGE_SUCCESS, validTutee), commandResult.feedbackToUser);"},{"lineNumber":50,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(Arrays.asList(validTutee), modelStub.personsAdded);"},{"lineNumber":51,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":53,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"ChoChihTun"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":55,"author":{"gitID":"ChoChihTun"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":56,"author":{"gitID":"ChoChihTun"},"content":"        Tutee validTutee \u003d new TuteeBuilder().build();"},{"lineNumber":57,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":58,"author":{"gitID":"ChoChihTun"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":59,"author":{"gitID":"ChoChihTun"},"content":"        thrown.expectMessage(AddTuteeCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":60,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":61,"author":{"gitID":"ChoChihTun"},"content":"        getAddTuteeCommandForTutee(validTutee, modelStub).execute();"},{"lineNumber":62,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":64,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"ChoChihTun"},"content":"    public void equals_validArgs_returnsTrue() {"},{"lineNumber":66,"author":{"gitID":"ChoChihTun"},"content":"        Tutee alice \u003d new TuteeBuilder().withName(\"Alice\").build();"},{"lineNumber":67,"author":{"gitID":"ChoChihTun"},"content":"        AddTuteeCommand addAliceCommand \u003d new AddTuteeCommand(alice);"},{"lineNumber":68,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":69,"author":{"gitID":"ChoChihTun"},"content":"        // same object"},{"lineNumber":70,"author":{"gitID":"ChoChihTun"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":71,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":72,"author":{"gitID":"ChoChihTun"},"content":"        // objects with same value"},{"lineNumber":73,"author":{"gitID":"ChoChihTun"},"content":"        AddTuteeCommand addAliceCommandCopy \u003d new AddTuteeCommand(alice);"},{"lineNumber":74,"author":{"gitID":"ChoChihTun"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":75,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":77,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"ChoChihTun"},"content":"    public void equals_invalidArgs_returnsFalse() {"},{"lineNumber":79,"author":{"gitID":"ChoChihTun"},"content":"        Tutee alice \u003d new TuteeBuilder().withName(\"Alice\").build();"},{"lineNumber":80,"author":{"gitID":"ChoChihTun"},"content":"        Tutee bob \u003d new TuteeBuilder().withName(\"Bob\").build();"},{"lineNumber":81,"author":{"gitID":"ChoChihTun"},"content":"        AddTuteeCommand addAliceCommand \u003d new AddTuteeCommand(alice);"},{"lineNumber":82,"author":{"gitID":"ChoChihTun"},"content":"        AddTuteeCommand addBobCommand \u003d new AddTuteeCommand(bob);"},{"lineNumber":83,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":84,"author":{"gitID":"ChoChihTun"},"content":"        // null"},{"lineNumber":85,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":86,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":87,"author":{"gitID":"ChoChihTun"},"content":"        // wrong parameter data type"},{"lineNumber":88,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":89,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":90,"author":{"gitID":"ChoChihTun"},"content":"        // different tutee"},{"lineNumber":91,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":92,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":94,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"ChoChihTun"},"content":"     * Generates a new AddTuteeCommand with the details of the given tutee."},{"lineNumber":96,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"ChoChihTun"},"content":"    private AddTuteeCommand getAddTuteeCommandForTutee(Tutee tutee, Model model) {"},{"lineNumber":98,"author":{"gitID":"ChoChihTun"},"content":"        AddTuteeCommand command \u003d new AddTuteeCommand(tutee);"},{"lineNumber":99,"author":{"gitID":"ChoChihTun"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":100,"author":{"gitID":"ChoChihTun"},"content":"        return command;"},{"lineNumber":101,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":103,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"ChoChihTun"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":105,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"ChoChihTun"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":107,"author":{"gitID":"ChoChihTun"},"content":"        @Override"},{"lineNumber":108,"author":{"gitID":"ChoChihTun"},"content":"        // A tutee is a person"},{"lineNumber":109,"author":{"gitID":"ChoChihTun"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":110,"author":{"gitID":"ChoChihTun"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":111,"author":{"gitID":"ChoChihTun"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":113,"author":{"gitID":"ChoChihTun"},"content":"        @Override"},{"lineNumber":114,"author":{"gitID":"ChoChihTun"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":115,"author":{"gitID":"ChoChihTun"},"content":"            return new AddressBook();"},{"lineNumber":116,"author":{"gitID":"ChoChihTun"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":119,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"ChoChihTun"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":121,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"ChoChihTun"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":123,"author":{"gitID":"ChoChihTun"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":124,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":125,"author":{"gitID":"ChoChihTun"},"content":"        @Override"},{"lineNumber":126,"author":{"gitID":"ChoChihTun"},"content":"        // A tutee is a person"},{"lineNumber":127,"author":{"gitID":"ChoChihTun"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":128,"author":{"gitID":"ChoChihTun"},"content":"            requireNonNull(person);"},{"lineNumber":129,"author":{"gitID":"ChoChihTun"},"content":"            personsAdded.add(person);"},{"lineNumber":130,"author":{"gitID":"ChoChihTun"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":132,"author":{"gitID":"ChoChihTun"},"content":"        @Override"},{"lineNumber":133,"author":{"gitID":"ChoChihTun"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":134,"author":{"gitID":"ChoChihTun"},"content":"            return new AddressBook();"},{"lineNumber":135,"author":{"gitID":"ChoChihTun"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":138,"author":{"gitID":"ChoChihTun"},"content":"}"}],"authorContributionMap":{"ChoChihTun":116,"yungyung04":1,"-":21}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":7,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EDUCATION_LEVEL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":9,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":12,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHOOL;"},{"lineNumber":13,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"yungyung04"},"content":"import java.time.LocalDateTime;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":27,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.Task;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":31,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":36,"author":{"gitID":"-"},"content":" */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":41,"author":{"gitID":"yungyung04"},"content":"    public static final String VALID_NAME_ROBERT \u003d \"Robert Anderson\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":44,"author":{"gitID":"yungyung04"},"content":"    public static final String VALID_PHONE_ROBERT \u003d \"33333333\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":47,"author":{"gitID":"yungyung04"},"content":"    public static final String VALID_EMAIL_ROBERT \u003d \"robert@example.com\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":50,"author":{"gitID":"yungyung04"},"content":"    public static final String VALID_ADDRESS_ROBERT \u003d \"Block 123, Robert Street 3\";"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":53,"author":{"gitID":"yungyung04"},"content":"    public static final String VALID_DATE_TIME_AMY \u003d \"21/01/2011 11:11\";"},{"lineNumber":54,"author":{"gitID":"yungyung04"},"content":"    public static final String VALID_DATE_TIME_BOB \u003d \"21/02/2013 12:01\";"},{"lineNumber":55,"author":{"gitID":"yungyung04"},"content":"    public static final String VALID_DURATION_AMY \u003d \"1h11m\";"},{"lineNumber":56,"author":{"gitID":"yungyung04"},"content":"    public static final String VALID_DURATION_BOB \u003d \"1h45m\";"},{"lineNumber":57,"author":{"gitID":"yungyung04"},"content":"    public static final String VALID_TASK_DESC_AMY \u003d \"tuition homework\";"},{"lineNumber":58,"author":{"gitID":"yungyung04"},"content":"    public static final String VALID_TASK_DESC_BOB \u003d \"exam preparation\";"},{"lineNumber":59,"author":{"gitID":"ChoChihTun"},"content":"    public static final String VALID_EMPTY_TASK_DESC \u003d \"\";"},{"lineNumber":60,"author":{"gitID":"yungyung04"},"content":"    public static final String VALID_TASK_WITHOUT_DESC_AMY \u003d VALID_DATE_TIME_AMY + \" \" + VALID_DURATION_AMY;"},{"lineNumber":61,"author":{"gitID":"yungyung04"},"content":"    public static final String VALID_TASK_WITHOUT_DESC_BOB \u003d VALID_DATE_TIME_BOB + \" \" + VALID_DURATION_BOB;"},{"lineNumber":62,"author":{"gitID":"yungyung04"},"content":"    public static final String VALID_TASK_WITH_DESC_AMY \u003d VALID_TASK_WITHOUT_DESC_AMY + \" \" + VALID_TASK_DESC_AMY;"},{"lineNumber":63,"author":{"gitID":"yungyung04"},"content":"    public static final String VALID_TASK_WITH_DESC_BOB \u003d VALID_TASK_WITHOUT_DESC_AMY + \" \" + VALID_TASK_DESC_AMY;"},{"lineNumber":64,"author":{"gitID":"ChoChihTun"},"content":"    public static final String VALID_SUBJECT_AMY \u003d \"economics\";"},{"lineNumber":65,"author":{"gitID":"ChoChihTun"},"content":"    public static final String VALID_SUBJECT_BOB \u003d \"mathematics\";"},{"lineNumber":66,"author":{"gitID":"ChoChihTun"},"content":"    public static final String VALID_GRADE_AMY \u003d \"B+\";"},{"lineNumber":67,"author":{"gitID":"ChoChihTun"},"content":"    public static final String VALID_GRADE_BOB \u003d \"A1\";"},{"lineNumber":68,"author":{"gitID":"ChoChihTun"},"content":"    public static final String VALID_EDUCATION_LEVEL_AMY \u003d \"secondary\";"},{"lineNumber":69,"author":{"gitID":"ChoChihTun"},"content":"    public static final String VALID_EDUCATION_LEVEL_BOB \u003d \"junior college\";"},{"lineNumber":70,"author":{"gitID":"yungyung04"},"content":"    public static final String VALID_EDUCATION_LEVEL_ROBERT \u003d \"primary\";"},{"lineNumber":71,"author":{"gitID":"ChoChihTun"},"content":"    public static final String VALID_SCHOOL_AMY \u003d \"nan hua high school\";"},{"lineNumber":72,"author":{"gitID":"ChoChihTun"},"content":"    public static final String VALID_SCHOOL_BOB \u003d \"victoria junior college\";"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":82,"author":{"gitID":"ChoChihTun"},"content":"    public static final String SUBJECT_DESC_AMY \u003d \" \" + PREFIX_SUBJECT + VALID_SUBJECT_AMY;"},{"lineNumber":83,"author":{"gitID":"ChoChihTun"},"content":"    public static final String SUBJECT_DESC_BOB \u003d \" \" + PREFIX_SUBJECT + VALID_SUBJECT_BOB;"},{"lineNumber":84,"author":{"gitID":"ChoChihTun"},"content":"    public static final String GRADE_DESC_AMY \u003d \" \" + PREFIX_GRADE + VALID_GRADE_AMY;"},{"lineNumber":85,"author":{"gitID":"ChoChihTun"},"content":"    public static final String GRADE_DESC_BOB \u003d \" \" + PREFIX_GRADE + VALID_GRADE_BOB;"},{"lineNumber":86,"author":{"gitID":"ChoChihTun"},"content":"    public static final String EDUCATION_LEVEL_DESC_AMY \u003d \" \" + PREFIX_EDUCATION_LEVEL + VALID_EDUCATION_LEVEL_AMY;"},{"lineNumber":87,"author":{"gitID":"ChoChihTun"},"content":"    public static final String EDUCATION_LEVEL_DESC_BOB \u003d \" \" + PREFIX_EDUCATION_LEVEL + VALID_EDUCATION_LEVEL_BOB;"},{"lineNumber":88,"author":{"gitID":"ChoChihTun"},"content":"    public static final String SCHOOL_DESC_AMY \u003d \" \" + PREFIX_SCHOOL + VALID_SCHOOL_AMY;"},{"lineNumber":89,"author":{"gitID":"ChoChihTun"},"content":"    public static final String SCHOOL_DESC_BOB \u003d \" \" + PREFIX_SCHOOL + VALID_SCHOOL_BOB;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":97,"author":{"gitID":"ChoChihTun"},"content":"    public static final String INVALID_SUBJECT_DESC \u003d \" \" + PREFIX_SUBJECT + \"economics1\"; // \u00271\u0027 not allowed in subject"},{"lineNumber":98,"author":{"gitID":"ChoChihTun"},"content":"    public static final String INVALID_GRADE_DESC \u003d \" \" + PREFIX_GRADE + \"+B\"; // should start with alphabet"},{"lineNumber":99,"author":{"gitID":"ChoChihTun"},"content":"    // only \u0027primary\u0027, \u0027secondary\u0027 and \u0027junior college\u0027 are valid"},{"lineNumber":100,"author":{"gitID":"ChoChihTun"},"content":"    public static final String INVALID_EDUCATION_LEVEL \u003d \" \" + PREFIX_EDUCATION_LEVEL + \"university\";"},{"lineNumber":101,"author":{"gitID":"ChoChihTun"},"content":"    public static final String INVALID_SCHOOL \u003d \" \" + PREFIX_SCHOOL + \"hanyang@1\"; // should only be alphabetic"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":103,"author":{"gitID":"ChoChihTun"},"content":"    public static final String INVALID_TUTEE_TAG_DESC \u003d \" \" + PREFIX_TAG + \"Tutee\"; // \u0027tutee\u0027 tag not allowed in person"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"ChoChihTun"},"content":"    public static final String TUTEE_TAG \u003d \"Tutee\";"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":127,"author":{"gitID":"-"},"content":"                                            Model expectedModel) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":146,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"yungyung04"},"content":"     * Updates {@code model}\u0027s filtered persons list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"yungyung04"},"content":"     * Updates {@code model}\u0027s filtered tasks list to show only the task at the given {@code targetIndex} in the"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":176,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"yungyung04"},"content":"    public static void showTaskAtIndex(Model model, Index targetIndex) {"},{"lineNumber":178,"author":{"gitID":"yungyung04"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredTaskList().size());"},{"lineNumber":179,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":180,"author":{"gitID":"yungyung04"},"content":"        Task task \u003d model.getFilteredTaskList().get(targetIndex.getZeroBased());"},{"lineNumber":181,"author":{"gitID":"yungyung04"},"content":"        final LocalDateTime taskDateTime \u003d task.getTaskDateTime();"},{"lineNumber":182,"author":{"gitID":"yungyung04"},"content":"        model.updateFilteredTaskList(t -\u003e t.getTaskDateTime().equals(taskDateTime));"},{"lineNumber":183,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":184,"author":{"gitID":"yungyung04"},"content":"        assertEquals(1, model.getFilteredTaskList().size());"},{"lineNumber":185,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":190,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"a-shakra"},"content":"    /*"},{"lineNumber":192,"author":{"gitID":"a-shakra"},"content":"    public static void showTaskAtIndex(Model model, Index targetIndex) {"},{"lineNumber":193,"author":{"gitID":"a-shakra"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredTaskList().size());"},{"lineNumber":194,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":195,"author":{"gitID":"a-shakra"},"content":"        Task task \u003d model.getFilteredTaskList().get(targetIndex.getZeroBased());"},{"lineNumber":196,"author":{"gitID":"a-shakra"},"content":"        final String[] splitName \u003d task.getDescription().split(\"\\\\s+\");"},{"lineNumber":197,"author":{"gitID":"a-shakra"},"content":"        model.updateFilteredTaskList(new TaskContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":198,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":199,"author":{"gitID":"a-shakra"},"content":"        assertEquals(1, model.getFilteredTaskList().size());"},{"lineNumber":200,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"a-shakra"},"content":"*/"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":204,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":216,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":217,"author":{"gitID":"a-shakra"},"content":"    public static void deleteFirstTask(Model model) {"},{"lineNumber":218,"author":{"gitID":"a-shakra"},"content":"        Task firstTask \u003d model.getFilteredTaskList().get(0);"},{"lineNumber":219,"author":{"gitID":"a-shakra"},"content":"        try {"},{"lineNumber":220,"author":{"gitID":"a-shakra"},"content":"            model.deleteTask(firstTask);"},{"lineNumber":221,"author":{"gitID":"a-shakra"},"content":"        } catch (TaskNotFoundException pnfe) {"},{"lineNumber":222,"author":{"gitID":"a-shakra"},"content":"            throw new AssertionError(\"Task in filtered list must exist in model.\", pnfe);"},{"lineNumber":223,"author":{"gitID":"a-shakra"},"content":"        }"},{"lineNumber":224,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":228,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":237,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":242,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":243,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ChoChihTun":28,"yungyung04":31,"a-shakra":20,"-":164}},{"path":"src/test/java/seedu/address/logic/commands/UndoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalAddressBookCompiler.getTypicalAddressBook1;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class UndoCommandTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"yungyung04"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook1(), new UserPrefs());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void execute() throws Exception {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":39,"author":{"gitID":"-"},"content":"                Arrays.asList(deleteCommandOne, deleteCommandTwo), Collections.emptyList());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        deleteCommandOne.execute();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        deleteCommandTwo.execute();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        // multiple commands in undoStack"},{"lineNumber":46,"author":{"gitID":"yungyung04"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook1(), new UserPrefs());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // single command in undoStack"},{"lineNumber":51,"author":{"gitID":"yungyung04"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook1(), new UserPrefs());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // no command in undoStack"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yungyung04":4,"-":53}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalAddressBookCompiler.getTypicalAddressBook1;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class AddCommandIntegrationTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitID":"yungyung04"},"content":"        model \u003d new ModelManager(getTypicalAddressBook1(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void execute_newPerson_success() throws Exception {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        expectedModel.addPerson(validPerson);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(validPerson, model), model,"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandFailure(prepareCommand(personInList, model), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Generates a new {@code AddCommand} which upon execution, adds {@code person} into the {@code model}."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private AddCommand prepareCommand(Person person, Model model) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yungyung04":2,"-":53}},{"path":"src/test/java/seedu/address/logic/commands/AddTuitionTaskCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yungyung04"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_TASK_TIMING_CLASHES;"},{"lineNumber":6,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_TIME_AMY;"},{"lineNumber":7,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_TIME_BOB;"},{"lineNumber":8,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DURATION_AMY;"},{"lineNumber":9,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DURATION_BOB;"},{"lineNumber":10,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_DESC_AMY;"},{"lineNumber":11,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_DESC_BOB;"},{"lineNumber":12,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":13,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":14,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.TaskUtil.FORMATTER;"},{"lineNumber":15,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":16,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":17,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":18,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalAddressBookCompiler.getTypicalAddressBook2;"},{"lineNumber":19,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalTasks.TASK_AMY;"},{"lineNumber":20,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":21,"author":{"gitID":"yungyung04"},"content":"import java.time.LocalDateTime;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":26,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":29,"author":{"gitID":"yungyung04"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":32,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.Model;"},{"lineNumber":33,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":34,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":35,"author":{"gitID":"yungyung04"},"content":"import seedu.address.testutil.TaskBuilder;"},{"lineNumber":36,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":37,"author":{"gitID":"yungyung04"},"content":"//@@author yungyung04"},{"lineNumber":38,"author":{"gitID":"yungyung04"},"content":"public class AddTuitionTaskCommandTest {"},{"lineNumber":39,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":40,"author":{"gitID":"yungyung04"},"content":"    @Rule"},{"lineNumber":41,"author":{"gitID":"yungyung04"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":42,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":43,"author":{"gitID":"yungyung04"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook2(), new UserPrefs());"},{"lineNumber":44,"author":{"gitID":"yungyung04"},"content":"    private LocalDateTime taskDateTimeAmy \u003d LocalDateTime.parse(VALID_DATE_TIME_AMY, FORMATTER);"},{"lineNumber":45,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":46,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"yungyung04"},"content":"    public void constructor_nullTaskDetail_throwsNullPointerException() {"},{"lineNumber":48,"author":{"gitID":"yungyung04"},"content":"        //one of the other 3 task details is null."},{"lineNumber":49,"author":{"gitID":"yungyung04"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":50,"author":{"gitID":"yungyung04"},"content":"        new AddTuitionTaskCommand(INDEX_FIRST_PERSON, taskDateTimeAmy, VALID_DURATION_AMY, null);"},{"lineNumber":51,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":53,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"yungyung04"},"content":"    public void execute_taskAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":55,"author":{"gitID":"yungyung04"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":56,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":57,"author":{"gitID":"yungyung04"},"content":"        AddTuitionTaskCommand addTuitionAmy \u003d getAddTuitionTaskCommandForTask("},{"lineNumber":58,"author":{"gitID":"yungyung04"},"content":"                INDEX_THIRD_PERSON, taskDateTimeAmy, VALID_DURATION_AMY, VALID_TASK_DESC_AMY);"},{"lineNumber":59,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":60,"author":{"gitID":"yungyung04"},"content":"        String expectedMessage \u003d String.format(AddTuitionTaskCommand.MESSAGE_SUCCESS, TASK_AMY);"},{"lineNumber":61,"author":{"gitID":"yungyung04"},"content":"        expectedModel.addTask(TASK_AMY);"},{"lineNumber":62,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":63,"author":{"gitID":"yungyung04"},"content":"        assertCommandSuccess(addTuitionAmy, model, expectedMessage, expectedModel);"},{"lineNumber":64,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":66,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"yungyung04"},"content":"    public void execute_invalidIndex_throwsCommandException() throws Exception {"},{"lineNumber":68,"author":{"gitID":"yungyung04"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"},{"lineNumber":69,"author":{"gitID":"yungyung04"},"content":"        AddTuitionTaskCommand command \u003d getAddTuitionTaskCommandForTask(outOfBoundIndex, taskDateTimeAmy,"},{"lineNumber":70,"author":{"gitID":"yungyung04"},"content":"                VALID_DURATION_AMY, VALID_TASK_DESC_AMY);"},{"lineNumber":71,"author":{"gitID":"yungyung04"},"content":"        assertCommandFailure(command, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":72,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":74,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"yungyung04"},"content":"    public void execute_clashingTask_throwsCommandException() throws Exception {"},{"lineNumber":76,"author":{"gitID":"yungyung04"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":77,"author":{"gitID":"yungyung04"},"content":"        thrown.expectMessage(MESSAGE_TASK_TIMING_CLASHES);"},{"lineNumber":78,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":79,"author":{"gitID":"yungyung04"},"content":"        getAddTuitionTaskCommandForTask(INDEX_THIRD_PERSON, taskDateTimeAmy, VALID_DURATION_AMY,"},{"lineNumber":80,"author":{"gitID":"yungyung04"},"content":"                VALID_TASK_DESC_AMY).execute();"},{"lineNumber":81,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":82,"author":{"gitID":"yungyung04"},"content":"        getAddTuitionTaskCommandForTask(INDEX_FIRST_PERSON, taskDateTimeAmy, VALID_DURATION_AMY,"},{"lineNumber":83,"author":{"gitID":"yungyung04"},"content":"                VALID_TASK_DESC_AMY).execute();"},{"lineNumber":84,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":86,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":87,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"yungyung04"},"content":"    public void equals() {"},{"lineNumber":89,"author":{"gitID":"yungyung04"},"content":"        LocalDateTime taskDateTimeBob \u003d LocalDateTime.parse(VALID_DATE_TIME_BOB, FORMATTER);"},{"lineNumber":90,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":91,"author":{"gitID":"yungyung04"},"content":"        AddTuitionTaskCommand addTuitionAmy \u003d getAddTuitionTaskCommandForTask("},{"lineNumber":92,"author":{"gitID":"yungyung04"},"content":"                INDEX_THIRD_PERSON, taskDateTimeAmy, VALID_DURATION_AMY, VALID_TASK_DESC_AMY);"},{"lineNumber":93,"author":{"gitID":"yungyung04"},"content":"        AddTuitionTaskCommand addTuitionAmyCopy \u003d getAddTuitionTaskCommandForTask("},{"lineNumber":94,"author":{"gitID":"yungyung04"},"content":"                INDEX_THIRD_PERSON, taskDateTimeAmy, VALID_DURATION_AMY, VALID_TASK_DESC_AMY);"},{"lineNumber":95,"author":{"gitID":"yungyung04"},"content":"        AddTuitionTaskCommand addTuitionBob \u003d new AddTuitionTaskCommand("},{"lineNumber":96,"author":{"gitID":"yungyung04"},"content":"                INDEX_SECOND_PERSON, taskDateTimeBob, VALID_DURATION_BOB, VALID_TASK_DESC_BOB);"},{"lineNumber":97,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":98,"author":{"gitID":"yungyung04"},"content":"        // an AddPersonalTaskCommand object with same task details as addTuitionAmy"},{"lineNumber":99,"author":{"gitID":"yungyung04"},"content":"        AddPersonalTaskCommand addPersonalTask \u003d"},{"lineNumber":100,"author":{"gitID":"yungyung04"},"content":"                new AddPersonalTaskCommand(new TaskBuilder(TASK_AMY).buildPersonalTask());"},{"lineNumber":101,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":102,"author":{"gitID":"yungyung04"},"content":"        // same value -\u003e returns true"},{"lineNumber":103,"author":{"gitID":"yungyung04"},"content":"        assertTrue(addTuitionAmy.equals(addTuitionAmyCopy));"},{"lineNumber":104,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":105,"author":{"gitID":"yungyung04"},"content":"        // same object -\u003e returns true"},{"lineNumber":106,"author":{"gitID":"yungyung04"},"content":"        assertTrue(addTuitionAmy.equals(addTuitionAmy));"},{"lineNumber":107,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":108,"author":{"gitID":"yungyung04"},"content":"        // different types -\u003e returns false"},{"lineNumber":109,"author":{"gitID":"yungyung04"},"content":"        assertFalse(addTuitionAmy.equals(1));"},{"lineNumber":110,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":111,"author":{"gitID":"yungyung04"},"content":"        // null -\u003e returns false"},{"lineNumber":112,"author":{"gitID":"yungyung04"},"content":"        assertFalse(addTuitionAmy.equals(null));"},{"lineNumber":113,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":114,"author":{"gitID":"yungyung04"},"content":"        // different task type -\u003e returns false"},{"lineNumber":115,"author":{"gitID":"yungyung04"},"content":"        assertFalse(addTuitionAmy.equals(addPersonalTask));"},{"lineNumber":116,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":117,"author":{"gitID":"yungyung04"},"content":"        // different detail -\u003e returns false"},{"lineNumber":118,"author":{"gitID":"yungyung04"},"content":"        assertFalse(addTuitionAmy.equals(addTuitionBob));"},{"lineNumber":119,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":121,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"yungyung04"},"content":"     * Generates a new AddTuitionTaskCommand with the details of the given tuition task."},{"lineNumber":123,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"yungyung04"},"content":"    private AddTuitionTaskCommand getAddTuitionTaskCommandForTask(Index tuteeIndex, LocalDateTime taskDateTime,"},{"lineNumber":125,"author":{"gitID":"yungyung04"},"content":"                                                                  String duration, String description) {"},{"lineNumber":126,"author":{"gitID":"yungyung04"},"content":"        AddTuitionTaskCommand command \u003d new AddTuitionTaskCommand(tuteeIndex, taskDateTime, duration, description);"},{"lineNumber":127,"author":{"gitID":"yungyung04"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":128,"author":{"gitID":"yungyung04"},"content":"        return command;"},{"lineNumber":129,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"yungyung04"},"content":"}"}],"authorContributionMap":{"yungyung04":120,"-":10}},{"path":"src/test/java/seedu/address/logic/commands/FindPersonCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EDUCATION_LEVEL_AMY;"},{"lineNumber":8,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_AMY;"},{"lineNumber":9,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_BOB;"},{"lineNumber":10,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":11,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":12,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHOOL_AMY;"},{"lineNumber":13,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_BOB;"},{"lineNumber":14,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":15,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_EDUCATION_LEVEL;"},{"lineNumber":16,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_GRADE;"},{"lineNumber":17,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_NAME;"},{"lineNumber":18,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_SCHOOL;"},{"lineNumber":19,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_SUBJECT;"},{"lineNumber":20,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":21,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalAddressBookCompiler.getTypicalAddressBook2;"},{"lineNumber":22,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalTutees.ALICETUTEE;"},{"lineNumber":23,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalTutees.AMYTUTEE;"},{"lineNumber":24,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalTutees.BOBTUTEE;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"yungyung04"},"content":"//@@author yungyung04"},{"lineNumber":40,"author":{"gitID":"yungyung04"},"content":"/**"},{"lineNumber":41,"author":{"gitID":"yungyung04"},"content":" * Contains integration tests (interaction with the Model) for {@code FindPersonCommand}."},{"lineNumber":42,"author":{"gitID":"yungyung04"},"content":" */"},{"lineNumber":43,"author":{"gitID":"yungyung04"},"content":"public class FindPersonCommandTest {"},{"lineNumber":44,"author":{"gitID":"yungyung04"},"content":"    private static final int INDEX_FIRST_ELEMENT \u003d 0;"},{"lineNumber":45,"author":{"gitID":"yungyung04"},"content":"    private static final int INDEX_SECOND_ELEMENT \u003d 1;"},{"lineNumber":46,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":47,"author":{"gitID":"yungyung04"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook2(), new UserPrefs());"},{"lineNumber":48,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":49,"author":{"gitID":"yungyung04"},"content":"    private final String[] firstNameKeywords \u003d {VALID_NAME_BOB.split(\"\\\\s+\")[INDEX_FIRST_ELEMENT],"},{"lineNumber":50,"author":{"gitID":"yungyung04"},"content":"            VALID_NAME_AMY.split(\"\\\\s+\")[INDEX_SECOND_ELEMENT]};"},{"lineNumber":51,"author":{"gitID":"yungyung04"},"content":"    private final String[] secondNameKeywords \u003d {VALID_NAME_BOB.split(\"\\\\s+\")[INDEX_FIRST_ELEMENT]};"},{"lineNumber":52,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":53,"author":{"gitID":"yungyung04"},"content":"    private final FindPersonCommand findFirstName \u003d new FindPersonCommand(CATEGORY_NAME, firstNameKeywords);"},{"lineNumber":54,"author":{"gitID":"yungyung04"},"content":"    private final FindPersonCommand findSecondName \u003d new FindPersonCommand(CATEGORY_NAME, secondNameKeywords);"},{"lineNumber":55,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":56,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"yungyung04"},"content":"    public void equals() {"},{"lineNumber":58,"author":{"gitID":"yungyung04"},"content":"        // same object -\u003e returns true"},{"lineNumber":59,"author":{"gitID":"yungyung04"},"content":"        assertTrue(findFirstName.equals(findFirstName));"},{"lineNumber":60,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":61,"author":{"gitID":"yungyung04"},"content":"        // same values -\u003e returns true"},{"lineNumber":62,"author":{"gitID":"yungyung04"},"content":"        FindPersonCommand findFirstCommandCopy \u003d new FindPersonCommand(CATEGORY_NAME, firstNameKeywords);"},{"lineNumber":63,"author":{"gitID":"yungyung04"},"content":"        assertTrue(findFirstName.equals(findFirstCommandCopy));"},{"lineNumber":64,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":65,"author":{"gitID":"yungyung04"},"content":"        // different types -\u003e returns false"},{"lineNumber":66,"author":{"gitID":"yungyung04"},"content":"        assertFalse(findFirstName.equals(1));"},{"lineNumber":67,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":68,"author":{"gitID":"yungyung04"},"content":"        // null -\u003e returns false"},{"lineNumber":69,"author":{"gitID":"yungyung04"},"content":"        assertFalse(findFirstName.equals(null));"},{"lineNumber":70,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":71,"author":{"gitID":"yungyung04"},"content":"        // different person -\u003e returns false"},{"lineNumber":72,"author":{"gitID":"yungyung04"},"content":"        assertFalse(findFirstName.equals(findSecondName));"},{"lineNumber":73,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":75,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"yungyung04"},"content":"    public void execute_findName_foundSuccessfully() {"},{"lineNumber":77,"author":{"gitID":"yungyung04"},"content":"        //multiple keywords"},{"lineNumber":78,"author":{"gitID":"yungyung04"},"content":"        findFirstName.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":79,"author":{"gitID":"yungyung04"},"content":"        String expectedMessage \u003d String.format(FindPersonCommand.MESSAGE_SUCCESS + \"\\n\""},{"lineNumber":80,"author":{"gitID":"yungyung04"},"content":"                + MESSAGE_PERSONS_LISTED_OVERVIEW, 2);"},{"lineNumber":81,"author":{"gitID":"yungyung04"},"content":"        assertCommandSuccess(findFirstName, expectedMessage, Arrays.asList(AMYTUTEE, BOBTUTEE));"},{"lineNumber":82,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":83,"author":{"gitID":"yungyung04"},"content":"        //single keyword"},{"lineNumber":84,"author":{"gitID":"yungyung04"},"content":"        findSecondName.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":85,"author":{"gitID":"yungyung04"},"content":"        expectedMessage \u003d String.format(FindPersonCommand.MESSAGE_SUCCESS + \"\\n\" + MESSAGE_PERSONS_LISTED_OVERVIEW, 1);"},{"lineNumber":86,"author":{"gitID":"yungyung04"},"content":"        assertCommandSuccess(findSecondName, expectedMessage, Arrays.asList(BOBTUTEE));"},{"lineNumber":87,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":89,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"yungyung04"},"content":"    public void execute_findEducatonLevel_foundSuccessfully() {"},{"lineNumber":91,"author":{"gitID":"yungyung04"},"content":"        String[] educationLevelKeywords \u003d {VALID_EDUCATION_LEVEL_AMY};"},{"lineNumber":92,"author":{"gitID":"yungyung04"},"content":"        FindPersonCommand findEducationLevel \u003d new FindPersonCommand(CATEGORY_EDUCATION_LEVEL, educationLevelKeywords);"},{"lineNumber":93,"author":{"gitID":"yungyung04"},"content":"        findEducationLevel.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":94,"author":{"gitID":"yungyung04"},"content":"        String expectedMessage \u003d String.format(FindPersonCommand.MESSAGE_SUCCESS + \"\\n\""},{"lineNumber":95,"author":{"gitID":"yungyung04"},"content":"                + MESSAGE_PERSONS_LISTED_OVERVIEW, 2);"},{"lineNumber":96,"author":{"gitID":"yungyung04"},"content":"        //Alice and Amy have the same education level"},{"lineNumber":97,"author":{"gitID":"yungyung04"},"content":"        assertCommandSuccess(findEducationLevel, expectedMessage, Arrays.asList(ALICETUTEE, AMYTUTEE));"},{"lineNumber":98,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":100,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"yungyung04"},"content":"    public void execute_findGrade_foundSuccessfully() {"},{"lineNumber":102,"author":{"gitID":"yungyung04"},"content":"        String[] gradeKeywords \u003d {VALID_GRADE_AMY, VALID_GRADE_BOB};"},{"lineNumber":103,"author":{"gitID":"yungyung04"},"content":"        FindPersonCommand findGrade \u003d new FindPersonCommand(CATEGORY_GRADE, gradeKeywords);"},{"lineNumber":104,"author":{"gitID":"yungyung04"},"content":"        findGrade.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":105,"author":{"gitID":"yungyung04"},"content":"        String expectedMessage \u003d String.format(FindPersonCommand.MESSAGE_SUCCESS + \"\\n\""},{"lineNumber":106,"author":{"gitID":"yungyung04"},"content":"                + MESSAGE_PERSONS_LISTED_OVERVIEW, 2);"},{"lineNumber":107,"author":{"gitID":"yungyung04"},"content":"        assertCommandSuccess(findGrade, expectedMessage, Arrays.asList(AMYTUTEE, BOBTUTEE));"},{"lineNumber":108,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":110,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"yungyung04"},"content":"    public void execute_findSchool_foundSuccessfully() {"},{"lineNumber":112,"author":{"gitID":"yungyung04"},"content":"        String[] schoolKeywords \u003d {VALID_SCHOOL_AMY.split(\"\\\\s+\")[INDEX_FIRST_ELEMENT]};"},{"lineNumber":113,"author":{"gitID":"yungyung04"},"content":"        FindPersonCommand findSchool \u003d new FindPersonCommand(CATEGORY_SCHOOL, schoolKeywords);"},{"lineNumber":114,"author":{"gitID":"yungyung04"},"content":"        findSchool.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":115,"author":{"gitID":"yungyung04"},"content":"        String expectedMessage \u003d String.format(FindPersonCommand.MESSAGE_SUCCESS + \"\\n\""},{"lineNumber":116,"author":{"gitID":"yungyung04"},"content":"                + MESSAGE_PERSONS_LISTED_OVERVIEW, 1);"},{"lineNumber":117,"author":{"gitID":"yungyung04"},"content":"        assertCommandSuccess(findSchool, expectedMessage, Arrays.asList(AMYTUTEE));"},{"lineNumber":118,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":120,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":121,"author":{"gitID":"yungyung04"},"content":"    public void execute_findSubject_foundSuccessfully() {"},{"lineNumber":122,"author":{"gitID":"yungyung04"},"content":"        String[] subjectKeywords \u003d {VALID_SUBJECT_BOB};"},{"lineNumber":123,"author":{"gitID":"yungyung04"},"content":"        FindPersonCommand findSubject \u003d new FindPersonCommand(CATEGORY_SUBJECT, subjectKeywords);"},{"lineNumber":124,"author":{"gitID":"yungyung04"},"content":"        findSubject.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":125,"author":{"gitID":"yungyung04"},"content":"        String expectedMessage \u003d String.format(FindPersonCommand.MESSAGE_SUCCESS + \"\\n\""},{"lineNumber":126,"author":{"gitID":"yungyung04"},"content":"                + MESSAGE_PERSONS_LISTED_OVERVIEW, 2);"},{"lineNumber":127,"author":{"gitID":"yungyung04"},"content":"        //Alice and Bob learn the same subject."},{"lineNumber":128,"author":{"gitID":"yungyung04"},"content":"        assertCommandSuccess(findSubject, expectedMessage, Arrays.asList(ALICETUTEE, BOBTUTEE));"},{"lineNumber":129,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":131,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"yungyung04"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":133,"author":{"gitID":"yungyung04"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":134,"author":{"gitID":"yungyung04"},"content":"     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":135,"author":{"gitID":"yungyung04"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":136,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"yungyung04"},"content":"    private void assertCommandSuccess(FindPersonCommand command, String expectedMessage, List\u003cPerson\u003e expectedList) {"},{"lineNumber":138,"author":{"gitID":"yungyung04"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":139,"author":{"gitID":"yungyung04"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":140,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":141,"author":{"gitID":"yungyung04"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":142,"author":{"gitID":"yungyung04"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":143,"author":{"gitID":"yungyung04"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":144,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"yungyung04"},"content":"}"}],"authorContributionMap":{"yungyung04":125,"-":20}},{"path":"src/test/java/seedu/address/logic/commands/ClearCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalAddressBookCompiler.getTypicalAddressBook1;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class ClearCommandTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void execute_emptyAddressBook_success() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(model), model, ClearCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {"},{"lineNumber":24,"author":{"gitID":"yungyung04"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook1(), new UserPrefs());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(model), model, ClearCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Generates a new {@code ClearCommand} which upon execution, clears the contents in {@code model}."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private ClearCommand prepareCommand(Model model) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        ClearCommand command \u003d new ClearCommand();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yungyung04":2,"-":34}},{"path":"src/test/java/seedu/address/logic/commands/UndoableCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalAddressBookCompiler.getTypicalAddressBook1;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class UndoableCommandTest {"},{"lineNumber":20,"author":{"gitID":"yungyung04"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook1(), new UserPrefs());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final DummyCommand dummyCommand \u003d new DummyCommand(model);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"yungyung04"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook1(), new UserPrefs());"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void executeUndo() throws Exception {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        dummyCommand.execute();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        // undo() should cause the model\u0027s filtered list to show all persons"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        dummyCommand.undo();"},{"lineNumber":35,"author":{"gitID":"yungyung04"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook1(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void redo() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // redo() should cause the model\u0027s filtered list to show all persons"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        dummyCommand.redo();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Deletes the first person in the model\u0027s filtered list."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    class DummyCommand extends UndoableCommand {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        DummyCommand(Model model) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            this.model \u003d model;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            Person personToDelete \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                model.deletePerson(personToDelete);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            } catch (PersonNotFoundException pnfe) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                fail(\"Impossible: personToDelete was retrieved from model.\");"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            return new CommandResult(\"\");"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yungyung04":4,"-":64}},{"path":"src/test/java/seedu/address/logic/commands/RedoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":9,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalAddressBookCompiler.getTypicalAddressBook1;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class RedoCommandTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"yungyung04"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook1(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(INDEX_SECOND_PERSON);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() throws Exception {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        deleteCommandOne.preprocessUndoableCommand();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        deleteCommandTwo.preprocessUndoableCommand();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void execute() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":42,"author":{"gitID":"-"},"content":"                Collections.emptyList(), Arrays.asList(deleteCommandTwo, deleteCommandOne));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":45,"author":{"gitID":"yungyung04"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook1(), new UserPrefs());"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // multiple commands in redoStack"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // single command in redoStack"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // no command in redoStack"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yungyung04":3,"-":55}},{"path":"src/test/java/seedu/address/logic/commands/SelectCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":11,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalAddressBookCompiler.getTypicalAddressBook1;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code SelectCommand}."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class SelectCommandTest {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":39,"author":{"gitID":"yungyung04"},"content":"        model \u003d new ModelManager(getTypicalAddressBook1(), new UserPrefs());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_THIRD_PERSON);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(lastPersonIndex);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PERSON);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PERSON);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommand));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PERSON);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(1));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(null));"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(selectSecondCommand));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * is raised with the correct index."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d selectCommand.execute();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            assertEquals(String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased()),"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            selectCommand.execute();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Returns a {@code SelectCommand} with parameters {@code index}."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    private SelectCommand prepareCommand(Index index) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d new SelectCommand(index);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        selectCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        return selectCommand;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yungyung04":2,"-":139}},{"path":"src/test/java/seedu/address/logic/commands/ListTaskCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"a-shakra"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showTaskAtIndex;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":6,"author":{"gitID":"a-shakra"},"content":"import static seedu.address.testutil.TypicalTasks.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"a-shakra"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"a-shakra"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListTaskCommand."},{"lineNumber":19,"author":{"gitID":"a-shakra"},"content":" */"},{"lineNumber":20,"author":{"gitID":"a-shakra"},"content":"//@@author a-shakra"},{"lineNumber":21,"author":{"gitID":"a-shakra"},"content":"public class ListTaskCommandTest {"},{"lineNumber":22,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":23,"author":{"gitID":"a-shakra"},"content":"    private Model model;"},{"lineNumber":24,"author":{"gitID":"a-shakra"},"content":"    private Model expectedModel;"},{"lineNumber":25,"author":{"gitID":"a-shakra"},"content":"    private ListTaskCommand listTaskCommand;"},{"lineNumber":26,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":27,"author":{"gitID":"a-shakra"},"content":"    @Before"},{"lineNumber":28,"author":{"gitID":"a-shakra"},"content":"    public void setUp() {"},{"lineNumber":29,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":30,"author":{"gitID":"a-shakra"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":31,"author":{"gitID":"a-shakra"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":32,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":33,"author":{"gitID":"a-shakra"},"content":"        listTaskCommand \u003d new ListTaskCommand();"},{"lineNumber":34,"author":{"gitID":"a-shakra"},"content":"        listTaskCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":35,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":37,"author":{"gitID":"a-shakra"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"a-shakra"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":39,"author":{"gitID":"a-shakra"},"content":"        assertCommandSuccess(listTaskCommand, model, ListTaskCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":40,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":42,"author":{"gitID":"a-shakra"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"a-shakra"},"content":"    public void execute_listIsFiltered_showsEverything() {"},{"lineNumber":44,"author":{"gitID":"a-shakra"},"content":"        showTaskAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":45,"author":{"gitID":"a-shakra"},"content":"        assertCommandSuccess(listTaskCommand, model, ListTaskCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":46,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"a-shakra"},"content":"}"}],"authorContributionMap":{"a-shakra":33,"-":14}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":23,"author":{"gitID":"yungyung04"},"content":"import seedu.address.testutil.ModelStub;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            requireNonNull(person);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yungyung04":1,"-":123}},{"path":"src/test/java/seedu/address/logic/commands/FindTaskCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":7,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_TASKS_LISTED_OVERVIEW;"},{"lineNumber":8,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.task.TaskSortUtil.CATEGORY_MONTH;"},{"lineNumber":9,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalAddressBookCompiler.getTypicalAddressBook2;"},{"lineNumber":10,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalTasks.TASK_ALICE;"},{"lineNumber":11,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalTasks.TASK_BENSON;"},{"lineNumber":12,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalTasks.TASK_CARL;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.Task;"},{"lineNumber":25,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":27,"author":{"gitID":"ChoChihTun"},"content":"//@@author ChoChihTun"},{"lineNumber":28,"author":{"gitID":"ChoChihTun"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"ChoChihTun"},"content":" * Contains integration tests (interaction with the Model) for {@code FindTaskCommand}."},{"lineNumber":30,"author":{"gitID":"ChoChihTun"},"content":" */"},{"lineNumber":31,"author":{"gitID":"ChoChihTun"},"content":"public class FindTaskCommandTest {"},{"lineNumber":32,"author":{"gitID":"ChoChihTun"},"content":"    private static final String OCTOBER \u003d \"10\";"},{"lineNumber":33,"author":{"gitID":"ChoChihTun"},"content":"    private static final String NOVEMBER \u003d \"11\";"},{"lineNumber":34,"author":{"gitID":"ChoChihTun"},"content":"    private static final String DECEMBER \u003d \"12\";"},{"lineNumber":35,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":36,"author":{"gitID":"ChoChihTun"},"content":"    private final String[] monthBetweenKeywords \u003d {OCTOBER, NOVEMBER, DECEMBER};"},{"lineNumber":37,"author":{"gitID":"ChoChihTun"},"content":"    private final String[] monthNamelyKeyword \u003d {OCTOBER};"},{"lineNumber":38,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":39,"author":{"gitID":"ChoChihTun"},"content":"    private final FindTaskCommand findMonthBetweenKeywordsCommand \u003d"},{"lineNumber":40,"author":{"gitID":"ChoChihTun"},"content":"            new FindTaskCommand(CATEGORY_MONTH, monthBetweenKeywords);"},{"lineNumber":41,"author":{"gitID":"ChoChihTun"},"content":"    private final FindTaskCommand findMonthNamelyKeywordCommand \u003d"},{"lineNumber":42,"author":{"gitID":"ChoChihTun"},"content":"            new FindTaskCommand(CATEGORY_MONTH, monthNamelyKeyword);"},{"lineNumber":43,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":44,"author":{"gitID":"ChoChihTun"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook2(), new UserPrefs());"},{"lineNumber":45,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":46,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"ChoChihTun"},"content":"    public void equals_validArgs_returnsTrue() {"},{"lineNumber":48,"author":{"gitID":"ChoChihTun"},"content":"        // same object"},{"lineNumber":49,"author":{"gitID":"ChoChihTun"},"content":"        assertTrue(findMonthBetweenKeywordsCommand.equals(findMonthBetweenKeywordsCommand));"},{"lineNumber":50,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":51,"author":{"gitID":"ChoChihTun"},"content":"        // objects with same value"},{"lineNumber":52,"author":{"gitID":"ChoChihTun"},"content":"        FindTaskCommand findMonthBetweenKeywordsCommandCopy \u003d new FindTaskCommand(CATEGORY_MONTH, monthBetweenKeywords);"},{"lineNumber":53,"author":{"gitID":"ChoChihTun"},"content":"        assertTrue(findMonthBetweenKeywordsCommand.equals(findMonthBetweenKeywordsCommandCopy));"},{"lineNumber":54,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":56,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"ChoChihTun"},"content":"    public void equals_invalidArgs_returnsFalse() {"},{"lineNumber":58,"author":{"gitID":"ChoChihTun"},"content":"        // null"},{"lineNumber":59,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(findMonthBetweenKeywordsCommand.equals(null));"},{"lineNumber":60,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":61,"author":{"gitID":"ChoChihTun"},"content":"        // wrong parameter data type"},{"lineNumber":62,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(findMonthBetweenKeywordsCommand.equals(1));"},{"lineNumber":63,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":64,"author":{"gitID":"ChoChihTun"},"content":"        // different commands"},{"lineNumber":65,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(findMonthBetweenKeywordsCommand.equals(findMonthNamelyKeywordCommand));"},{"lineNumber":66,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":68,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"ChoChihTun"},"content":"    public void execute_findMonth_success() {"},{"lineNumber":70,"author":{"gitID":"ChoChihTun"},"content":"        // between months"},{"lineNumber":71,"author":{"gitID":"ChoChihTun"},"content":"        findMonthBetweenKeywordsCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":72,"author":{"gitID":"ChoChihTun"},"content":"        String expectedMessage \u003d String.format(FindTaskCommand.MESSAGE_SUCCESS + \"\\n\""},{"lineNumber":73,"author":{"gitID":"ChoChihTun"},"content":"                + MESSAGE_TASKS_LISTED_OVERVIEW, 3);"},{"lineNumber":74,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandSuccess(findMonthBetweenKeywordsCommand, expectedMessage,"},{"lineNumber":75,"author":{"gitID":"ChoChihTun"},"content":"                Arrays.asList(TASK_ALICE, TASK_BENSON, TASK_CARL));"},{"lineNumber":76,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":77,"author":{"gitID":"ChoChihTun"},"content":"        // namely month"},{"lineNumber":78,"author":{"gitID":"ChoChihTun"},"content":"        findMonthNamelyKeywordCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":79,"author":{"gitID":"ChoChihTun"},"content":"        expectedMessage \u003d String.format(FindTaskCommand.MESSAGE_SUCCESS + \"\\n\" + MESSAGE_TASKS_LISTED_OVERVIEW, 2);"},{"lineNumber":80,"author":{"gitID":"ChoChihTun"},"content":"        assertCommandSuccess(findMonthNamelyKeywordCommand, expectedMessage, Arrays.asList(TASK_ALICE, TASK_BENSON));"},{"lineNumber":81,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":83,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"ChoChihTun"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":85,"author":{"gitID":"ChoChihTun"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":86,"author":{"gitID":"ChoChihTun"},"content":"     *     - the {@code FilteredList\u003cTask\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"ChoChihTun"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":88,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"ChoChihTun"},"content":"    private void assertCommandSuccess(FindTaskCommand command, String expectedMessage, List\u003cTask\u003e expectedList) {"},{"lineNumber":90,"author":{"gitID":"ChoChihTun"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":91,"author":{"gitID":"ChoChihTun"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":92,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":93,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":94,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(expectedList, model.getFilteredTaskList());"},{"lineNumber":95,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":96,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"ChoChihTun"},"content":"}"}],"authorContributionMap":{"ChoChihTun":76,"yungyung04":5,"-":16}},{"path":"src/test/java/seedu/address/logic/commands/ListTuteeCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":6,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalAddressBookCompiler.getTypicalAddressBook2;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"yungyung04"},"content":"//@@author yungyung04"},{"lineNumber":18,"author":{"gitID":"yungyung04"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"yungyung04"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListTuteeCommand."},{"lineNumber":20,"author":{"gitID":"yungyung04"},"content":" */"},{"lineNumber":21,"author":{"gitID":"yungyung04"},"content":"public class ListTuteeCommandTest {"},{"lineNumber":22,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":23,"author":{"gitID":"yungyung04"},"content":"    private Model model;"},{"lineNumber":24,"author":{"gitID":"yungyung04"},"content":"    private Model expectedModel;"},{"lineNumber":25,"author":{"gitID":"yungyung04"},"content":"    private ListTuteeCommand listTuteeCommand;"},{"lineNumber":26,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":27,"author":{"gitID":"yungyung04"},"content":"    @Before"},{"lineNumber":28,"author":{"gitID":"yungyung04"},"content":"    public void setUp() {"},{"lineNumber":29,"author":{"gitID":"yungyung04"},"content":"        model \u003d new ModelManager(getTypicalAddressBook2(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"yungyung04"},"content":"        expectedModel \u003d setExpectedModel(model);"},{"lineNumber":31,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":32,"author":{"gitID":"yungyung04"},"content":"        listTuteeCommand \u003d new ListTuteeCommand();"},{"lineNumber":33,"author":{"gitID":"yungyung04"},"content":"        listTuteeCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":34,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":36,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"yungyung04"},"content":"    public void execute_tuteeListIsNotFiltered_showsSameList() {"},{"lineNumber":38,"author":{"gitID":"yungyung04"},"content":"        assertCommandSuccess(listTuteeCommand, model, ListTuteeCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":39,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":41,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"yungyung04"},"content":"    public void execute_tuteeListIsFiltered_showsEverything() {"},{"lineNumber":43,"author":{"gitID":"yungyung04"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":44,"author":{"gitID":"yungyung04"},"content":"        assertCommandSuccess(listTuteeCommand, model, ListTuteeCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":45,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":47,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"yungyung04"},"content":"     * Returns a model that has been filtered to show only tutees"},{"lineNumber":49,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"yungyung04"},"content":"    private ModelManager setExpectedModel(Model model) {"},{"lineNumber":51,"author":{"gitID":"yungyung04"},"content":"        ModelManager modelManager \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":52,"author":{"gitID":"yungyung04"},"content":"        modelManager.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_TUTEES);"},{"lineNumber":53,"author":{"gitID":"yungyung04"},"content":"        return modelManager;"},{"lineNumber":54,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":56,"author":{"gitID":"yungyung04"},"content":"}"}],"authorContributionMap":{"yungyung04":41,"-":15}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedTaskTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"a-shakra"},"content":"import static seedu.address.testutil.TypicalTasks.EXAMPLE1;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"a-shakra"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"a-shakra"},"content":"//@@author a-shakra"},{"lineNumber":11,"author":{"gitID":"a-shakra"},"content":"public class XmlAdaptedTaskTest {"},{"lineNumber":12,"author":{"gitID":"a-shakra"},"content":"    private static final String VALID_DESCRIPTION \u003d \"A description\";"},{"lineNumber":13,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":14,"author":{"gitID":"a-shakra"},"content":"    private static final String VALID_DURATION \u003d EXAMPLE1.getDuration();"},{"lineNumber":15,"author":{"gitID":"a-shakra"},"content":"    private static final String VALID_DATEANDTIME \u003d EXAMPLE1.getTaskDateTime().toString(); //Double check this"},{"lineNumber":16,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":17,"author":{"gitID":"a-shakra"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"a-shakra"},"content":"    public void toModelType_validTaskDetails_returnsTask() throws Exception {"},{"lineNumber":19,"author":{"gitID":"a-shakra"},"content":"        XmlAdaptedTask task \u003d new XmlAdaptedTask(EXAMPLE1);"},{"lineNumber":20,"author":{"gitID":"a-shakra"},"content":"        assertEquals(EXAMPLE1, task.toModelType());"},{"lineNumber":21,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":23,"author":{"gitID":"a-shakra"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"a-shakra"},"content":"    public void toModelType_nullDescription_throwsIllegalValueException() {"},{"lineNumber":25,"author":{"gitID":"a-shakra"},"content":"        XmlAdaptedTask task \u003d new XmlAdaptedTask(null, VALID_DURATION, VALID_DATEANDTIME);"},{"lineNumber":26,"author":{"gitID":"a-shakra"},"content":"        String expectedMessage \u003d \"Task\u0027s Tasks Should have a non-empty description field is missing!\";"},{"lineNumber":27,"author":{"gitID":"a-shakra"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"},{"lineNumber":28,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":30,"author":{"gitID":"a-shakra"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"a-shakra"},"content":"    public void toModelType_nullDuration_throwsIllegalValueException() {"},{"lineNumber":32,"author":{"gitID":"a-shakra"},"content":"        XmlAdaptedTask task \u003d new XmlAdaptedTask(VALID_DESCRIPTION, null, VALID_DATEANDTIME);"},{"lineNumber":33,"author":{"gitID":"a-shakra"},"content":"        String expectedMessage \u003d \"Task\u0027s Duration must be a non-null value field is missing!\";"},{"lineNumber":34,"author":{"gitID":"a-shakra"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"},{"lineNumber":35,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":37,"author":{"gitID":"a-shakra"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"a-shakra"},"content":"    public void toModelType_nullDateAndTime_throwsNullPointerException() {"},{"lineNumber":39,"author":{"gitID":"a-shakra"},"content":"        XmlAdaptedTask task \u003d new XmlAdaptedTask(VALID_DESCRIPTION, VALID_DURATION, null);"},{"lineNumber":40,"author":{"gitID":"a-shakra"},"content":"        String expectedMessage \u003d \"text\";"},{"lineNumber":41,"author":{"gitID":"a-shakra"},"content":"        Assert.assertThrows(NullPointerException.class, expectedMessage, task::toModelType);"},{"lineNumber":42,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":44,"author":{"gitID":"a-shakra"},"content":"}"}],"authorContributionMap":{"a-shakra":37,"-":7}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalAddressBookCompiler.getTypicalAddressBook1;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private String getTempFilePath(String fileName) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return testFolder.getRoot().getPath() + fileName;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":46,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":47,"author":{"gitID":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":48,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":49,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        original.setGuiSettings(300, 600, 4, 6);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void addressBookReadSave() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":60,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":61,"author":{"gitID":"-"},"content":"         * {@link XmlAddressBookStorage} class."},{"lineNumber":62,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."},{"lineNumber":63,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":64,"author":{"gitID":"yungyung04"},"content":"        AddressBook original \u003d getTypicalAddressBook1();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        storageManager.saveAddressBook(original);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void getAddressBookFilePath() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(\"dummy\"),"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                                             new JsonUserPrefsStorage(\"dummy\"));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new AddressBook()));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * A Stub class to throw an exception when the save method is called"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    class XmlAddressBookStorageExceptionThrowingStub extends XmlAddressBookStorage {"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        public XmlAddressBookStorageExceptionThrowingStub(String filePath) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            super(filePath);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            throw new IOException(\"dummy exception\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yungyung04":2,"-":99}},{"path":"src/test/java/seedu/address/logic/parser/AddTuteeCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"ChoChihTun"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EDUCATION_LEVEL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EDUCATION_LEVEL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":10,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GRADE_DESC_AMY;"},{"lineNumber":11,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GRADE_DESC_BOB;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":13,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EDUCATION_LEVEL;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":15,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_GRADE_DESC;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":18,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_SCHOOL;"},{"lineNumber":19,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_SUBJECT_DESC;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":27,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SCHOOL_DESC_AMY;"},{"lineNumber":28,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SCHOOL_DESC_BOB;"},{"lineNumber":29,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_AMY;"},{"lineNumber":30,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SUBJECT_DESC_BOB;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":35,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EDUCATION_LEVEL_AMY;"},{"lineNumber":36,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EDUCATION_LEVEL_BOB;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":39,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_AMY;"},{"lineNumber":40,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_BOB;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":45,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHOOL_AMY;"},{"lineNumber":46,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHOOL_BOB;"},{"lineNumber":47,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_AMY;"},{"lineNumber":48,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_BOB;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddTuteeCommand;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"import seedu.address.model.tutee.EducationLevel;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"import seedu.address.model.tutee.Grade;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"import seedu.address.model.tutee.School;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"import seedu.address.model.tutee.Subject;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"import seedu.address.model.tutee.Tutee;"},{"lineNumber":67,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.testutil.TuteeBuilder;"},{"lineNumber":68,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":69,"author":{"gitID":"ChoChihTun"},"content":"//@@author ChoChihTun"},{"lineNumber":70,"author":{"gitID":"ChoChihTun"},"content":"/**"},{"lineNumber":71,"author":{"gitID":"ChoChihTun"},"content":" * Contains tests for {@code AddTuteeCommandParser}."},{"lineNumber":72,"author":{"gitID":"ChoChihTun"},"content":" */"},{"lineNumber":73,"author":{"gitID":"ChoChihTun"},"content":"public class AddTuteeCommandParserTest {"},{"lineNumber":74,"author":{"gitID":"ChoChihTun"},"content":"    private AddTuteeCommandParser parser \u003d new AddTuteeCommandParser();"},{"lineNumber":75,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":76,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"ChoChihTun"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":78,"author":{"gitID":"ChoChihTun"},"content":"        Tutee expectedTutee \u003d new TuteeBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":79,"author":{"gitID":"ChoChihTun"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withSubject(VALID_SUBJECT_BOB)"},{"lineNumber":80,"author":{"gitID":"ChoChihTun"},"content":"                .withGrade(VALID_GRADE_BOB).withEducationLevel(VALID_EDUCATION_LEVEL_BOB).withSchool(VALID_SCHOOL_BOB)"},{"lineNumber":81,"author":{"gitID":"ChoChihTun"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":82,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":83,"author":{"gitID":"ChoChihTun"},"content":"        // whitespace only preamble"},{"lineNumber":84,"author":{"gitID":"ChoChihTun"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":85,"author":{"gitID":"ChoChihTun"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + GRADE_DESC_BOB + EDUCATION_LEVEL_DESC_BOB"},{"lineNumber":86,"author":{"gitID":"ChoChihTun"},"content":"                + SCHOOL_DESC_BOB + TAG_DESC_FRIEND, new AddTuteeCommand(expectedTutee));"},{"lineNumber":87,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":88,"author":{"gitID":"ChoChihTun"},"content":"        // multiple names - last name accepted"},{"lineNumber":89,"author":{"gitID":"ChoChihTun"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":90,"author":{"gitID":"ChoChihTun"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + GRADE_DESC_BOB + EDUCATION_LEVEL_DESC_BOB"},{"lineNumber":91,"author":{"gitID":"ChoChihTun"},"content":"                + SCHOOL_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_FRIEND, new AddTuteeCommand(expectedTutee));"},{"lineNumber":92,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":93,"author":{"gitID":"ChoChihTun"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":94,"author":{"gitID":"ChoChihTun"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":95,"author":{"gitID":"ChoChihTun"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + GRADE_DESC_BOB + EDUCATION_LEVEL_DESC_BOB"},{"lineNumber":96,"author":{"gitID":"ChoChihTun"},"content":"                + SCHOOL_DESC_BOB + TAG_DESC_FRIEND, new AddTuteeCommand(expectedTutee));"},{"lineNumber":97,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":98,"author":{"gitID":"ChoChihTun"},"content":"        // multiple emails - last email accepted"},{"lineNumber":99,"author":{"gitID":"ChoChihTun"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":100,"author":{"gitID":"ChoChihTun"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + GRADE_DESC_BOB + EDUCATION_LEVEL_DESC_BOB"},{"lineNumber":101,"author":{"gitID":"ChoChihTun"},"content":"                + SCHOOL_DESC_BOB + TAG_DESC_FRIEND, new AddTuteeCommand(expectedTutee));"},{"lineNumber":102,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":103,"author":{"gitID":"ChoChihTun"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":104,"author":{"gitID":"ChoChihTun"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":105,"author":{"gitID":"ChoChihTun"},"content":"                + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + GRADE_DESC_BOB + EDUCATION_LEVEL_DESC_BOB"},{"lineNumber":106,"author":{"gitID":"ChoChihTun"},"content":"                + SCHOOL_DESC_BOB + TAG_DESC_FRIEND, new AddTuteeCommand(expectedTutee));"},{"lineNumber":107,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":108,"author":{"gitID":"ChoChihTun"},"content":"        // multiple subjects - last subject accepted"},{"lineNumber":109,"author":{"gitID":"ChoChihTun"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":110,"author":{"gitID":"ChoChihTun"},"content":"                + SUBJECT_DESC_AMY + SUBJECT_DESC_BOB + GRADE_DESC_BOB + EDUCATION_LEVEL_DESC_BOB"},{"lineNumber":111,"author":{"gitID":"ChoChihTun"},"content":"                + SCHOOL_DESC_BOB + TAG_DESC_FRIEND, new AddTuteeCommand(expectedTutee));"},{"lineNumber":112,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":113,"author":{"gitID":"ChoChihTun"},"content":"        // multiple grades - last grade accepted"},{"lineNumber":114,"author":{"gitID":"ChoChihTun"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":115,"author":{"gitID":"ChoChihTun"},"content":"                + SUBJECT_DESC_BOB + GRADE_DESC_AMY + GRADE_DESC_BOB + EDUCATION_LEVEL_DESC_BOB"},{"lineNumber":116,"author":{"gitID":"ChoChihTun"},"content":"                + SCHOOL_DESC_BOB + TAG_DESC_FRIEND, new AddTuteeCommand(expectedTutee));"},{"lineNumber":117,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":118,"author":{"gitID":"ChoChihTun"},"content":"        // multiple education levels - last education level accepted"},{"lineNumber":119,"author":{"gitID":"ChoChihTun"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":120,"author":{"gitID":"ChoChihTun"},"content":"                + SUBJECT_DESC_BOB + GRADE_DESC_BOB + EDUCATION_LEVEL_DESC_AMY + EDUCATION_LEVEL_DESC_BOB"},{"lineNumber":121,"author":{"gitID":"ChoChihTun"},"content":"                + SCHOOL_DESC_BOB + TAG_DESC_FRIEND, new AddTuteeCommand(expectedTutee));"},{"lineNumber":122,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":123,"author":{"gitID":"ChoChihTun"},"content":"        // multiple schools - last school accepted"},{"lineNumber":124,"author":{"gitID":"ChoChihTun"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":125,"author":{"gitID":"ChoChihTun"},"content":"                + SUBJECT_DESC_BOB + GRADE_DESC_BOB + EDUCATION_LEVEL_DESC_BOB + SCHOOL_DESC_AMY"},{"lineNumber":126,"author":{"gitID":"ChoChihTun"},"content":"                + SCHOOL_DESC_BOB + TAG_DESC_FRIEND, new AddTuteeCommand(expectedTutee));"},{"lineNumber":127,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":128,"author":{"gitID":"ChoChihTun"},"content":"        // multiple tags - all accepted"},{"lineNumber":129,"author":{"gitID":"ChoChihTun"},"content":"        Tutee expectedTuteeMultipleTags \u003d new TuteeBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":130,"author":{"gitID":"ChoChihTun"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withSubject(VALID_SUBJECT_BOB)"},{"lineNumber":131,"author":{"gitID":"ChoChihTun"},"content":"                .withGrade(VALID_GRADE_BOB).withEducationLevel(VALID_EDUCATION_LEVEL_BOB).withSchool(VALID_SCHOOL_BOB)"},{"lineNumber":132,"author":{"gitID":"ChoChihTun"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":133,"author":{"gitID":"ChoChihTun"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":134,"author":{"gitID":"ChoChihTun"},"content":"                + SUBJECT_DESC_BOB + GRADE_DESC_BOB + EDUCATION_LEVEL_DESC_BOB + SCHOOL_DESC_BOB + TAG_DESC_FRIEND"},{"lineNumber":135,"author":{"gitID":"ChoChihTun"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddTuteeCommand(expectedTuteeMultipleTags));"},{"lineNumber":136,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":138,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"ChoChihTun"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":140,"author":{"gitID":"ChoChihTun"},"content":"        // zero tags"},{"lineNumber":141,"author":{"gitID":"ChoChihTun"},"content":"        Tutee expectedTutee \u003d new TuteeBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":142,"author":{"gitID":"ChoChihTun"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withSubject(VALID_SUBJECT_AMY)"},{"lineNumber":143,"author":{"gitID":"ChoChihTun"},"content":"                .withGrade(VALID_GRADE_AMY).withEducationLevel(VALID_EDUCATION_LEVEL_AMY)"},{"lineNumber":144,"author":{"gitID":"ChoChihTun"},"content":"                .withSchool(VALID_SCHOOL_AMY).withTags().build();"},{"lineNumber":145,"author":{"gitID":"ChoChihTun"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":146,"author":{"gitID":"ChoChihTun"},"content":"                        + SUBJECT_DESC_AMY + GRADE_DESC_AMY + EDUCATION_LEVEL_DESC_AMY + SCHOOL_DESC_AMY,"},{"lineNumber":147,"author":{"gitID":"ChoChihTun"},"content":"                new AddTuteeCommand(expectedTutee));"},{"lineNumber":148,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":150,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":151,"author":{"gitID":"ChoChihTun"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":152,"author":{"gitID":"ChoChihTun"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTuteeCommand.MESSAGE_USAGE);"},{"lineNumber":153,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":154,"author":{"gitID":"ChoChihTun"},"content":"        // missing name prefix"},{"lineNumber":155,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":156,"author":{"gitID":"ChoChihTun"},"content":"                        + SUBJECT_DESC_BOB + GRADE_DESC_BOB + EDUCATION_LEVEL_DESC_BOB + SCHOOL_DESC_BOB,"},{"lineNumber":157,"author":{"gitID":"ChoChihTun"},"content":"                expectedMessage);"},{"lineNumber":158,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":159,"author":{"gitID":"ChoChihTun"},"content":"        // missing phone prefix"},{"lineNumber":160,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":161,"author":{"gitID":"ChoChihTun"},"content":"                        + SUBJECT_DESC_BOB + GRADE_DESC_BOB + EDUCATION_LEVEL_DESC_BOB + SCHOOL_DESC_BOB,"},{"lineNumber":162,"author":{"gitID":"ChoChihTun"},"content":"                expectedMessage);"},{"lineNumber":163,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":164,"author":{"gitID":"ChoChihTun"},"content":"        // missing email prefix"},{"lineNumber":165,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB"},{"lineNumber":166,"author":{"gitID":"ChoChihTun"},"content":"                        + SUBJECT_DESC_BOB + GRADE_DESC_BOB + EDUCATION_LEVEL_DESC_BOB + SCHOOL_DESC_BOB,"},{"lineNumber":167,"author":{"gitID":"ChoChihTun"},"content":"                expectedMessage);"},{"lineNumber":168,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":169,"author":{"gitID":"ChoChihTun"},"content":"        // missing address prefix"},{"lineNumber":170,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB"},{"lineNumber":171,"author":{"gitID":"ChoChihTun"},"content":"                        + SUBJECT_DESC_BOB + GRADE_DESC_BOB + EDUCATION_LEVEL_DESC_BOB + SCHOOL_DESC_BOB,"},{"lineNumber":172,"author":{"gitID":"ChoChihTun"},"content":"                expectedMessage);"},{"lineNumber":173,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":174,"author":{"gitID":"ChoChihTun"},"content":"        // all prefixes missing"},{"lineNumber":175,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB"},{"lineNumber":176,"author":{"gitID":"ChoChihTun"},"content":"                        + SUBJECT_DESC_BOB + GRADE_DESC_BOB + EDUCATION_LEVEL_DESC_BOB + SCHOOL_DESC_BOB,"},{"lineNumber":177,"author":{"gitID":"ChoChihTun"},"content":"                expectedMessage);"},{"lineNumber":178,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":179,"author":{"gitID":"ChoChihTun"},"content":"        // missing subject prefix"},{"lineNumber":180,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":181,"author":{"gitID":"ChoChihTun"},"content":"                        + GRADE_DESC_BOB + EDUCATION_LEVEL_DESC_BOB + SCHOOL_DESC_BOB,"},{"lineNumber":182,"author":{"gitID":"ChoChihTun"},"content":"                expectedMessage);"},{"lineNumber":183,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":184,"author":{"gitID":"ChoChihTun"},"content":"        // missing grade prefix"},{"lineNumber":185,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":186,"author":{"gitID":"ChoChihTun"},"content":"                        + SUBJECT_DESC_BOB + EDUCATION_LEVEL_DESC_BOB + SCHOOL_DESC_BOB,"},{"lineNumber":187,"author":{"gitID":"ChoChihTun"},"content":"                expectedMessage);"},{"lineNumber":188,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":189,"author":{"gitID":"ChoChihTun"},"content":"        // missing education level prefix"},{"lineNumber":190,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":191,"author":{"gitID":"ChoChihTun"},"content":"                        + SUBJECT_DESC_BOB + GRADE_DESC_BOB + SCHOOL_DESC_BOB,"},{"lineNumber":192,"author":{"gitID":"ChoChihTun"},"content":"                expectedMessage);"},{"lineNumber":193,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":194,"author":{"gitID":"ChoChihTun"},"content":"        // missing school prefix"},{"lineNumber":195,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":196,"author":{"gitID":"ChoChihTun"},"content":"                        + SUBJECT_DESC_BOB + GRADE_DESC_BOB + EDUCATION_LEVEL_DESC_BOB,"},{"lineNumber":197,"author":{"gitID":"ChoChihTun"},"content":"                expectedMessage);"},{"lineNumber":198,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":200,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":201,"author":{"gitID":"ChoChihTun"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":202,"author":{"gitID":"ChoChihTun"},"content":"        // invalid name"},{"lineNumber":203,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":204,"author":{"gitID":"ChoChihTun"},"content":"                + SUBJECT_DESC_BOB + GRADE_DESC_BOB + EDUCATION_LEVEL_DESC_BOB + SCHOOL_DESC_BOB"},{"lineNumber":205,"author":{"gitID":"ChoChihTun"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":206,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":207,"author":{"gitID":"ChoChihTun"},"content":"        // invalid phone"},{"lineNumber":208,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":209,"author":{"gitID":"ChoChihTun"},"content":"                + SUBJECT_DESC_BOB + GRADE_DESC_BOB + EDUCATION_LEVEL_DESC_BOB + SCHOOL_DESC_BOB"},{"lineNumber":210,"author":{"gitID":"ChoChihTun"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":211,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":212,"author":{"gitID":"ChoChihTun"},"content":"        // invalid email"},{"lineNumber":213,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"},{"lineNumber":214,"author":{"gitID":"ChoChihTun"},"content":"                + SUBJECT_DESC_BOB + GRADE_DESC_BOB + EDUCATION_LEVEL_DESC_BOB + SCHOOL_DESC_BOB"},{"lineNumber":215,"author":{"gitID":"ChoChihTun"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":216,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":217,"author":{"gitID":"ChoChihTun"},"content":"        // invalid address"},{"lineNumber":218,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":219,"author":{"gitID":"ChoChihTun"},"content":"                + SUBJECT_DESC_BOB + GRADE_DESC_BOB + EDUCATION_LEVEL_DESC_BOB + SCHOOL_DESC_BOB"},{"lineNumber":220,"author":{"gitID":"ChoChihTun"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":221,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":222,"author":{"gitID":"ChoChihTun"},"content":"        // invalid subject"},{"lineNumber":223,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":224,"author":{"gitID":"ChoChihTun"},"content":"                + INVALID_SUBJECT_DESC + GRADE_DESC_BOB + EDUCATION_LEVEL_DESC_BOB + SCHOOL_DESC_BOB"},{"lineNumber":225,"author":{"gitID":"ChoChihTun"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Subject.MESSAGE_SUBJECT_CONSTRAINTS);"},{"lineNumber":226,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":227,"author":{"gitID":"ChoChihTun"},"content":"        // invalid grade"},{"lineNumber":228,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":229,"author":{"gitID":"ChoChihTun"},"content":"                + SUBJECT_DESC_BOB + INVALID_GRADE_DESC + EDUCATION_LEVEL_DESC_BOB + SCHOOL_DESC_BOB"},{"lineNumber":230,"author":{"gitID":"ChoChihTun"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Grade.MESSAGE_GRADE_CONSTRAINTS);"},{"lineNumber":231,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":232,"author":{"gitID":"ChoChihTun"},"content":"        // invalid education level"},{"lineNumber":233,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":234,"author":{"gitID":"ChoChihTun"},"content":"                + SUBJECT_DESC_BOB + GRADE_DESC_BOB + INVALID_EDUCATION_LEVEL + SCHOOL_DESC_BOB"},{"lineNumber":235,"author":{"gitID":"ChoChihTun"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, EducationLevel.MESSAGE_EDUCATION_LEVEL_CONSTRAINTS);"},{"lineNumber":236,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":237,"author":{"gitID":"ChoChihTun"},"content":"        // invalid school"},{"lineNumber":238,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":239,"author":{"gitID":"ChoChihTun"},"content":"                + SUBJECT_DESC_BOB + GRADE_DESC_BOB + EDUCATION_LEVEL_DESC_BOB + INVALID_SCHOOL"},{"lineNumber":240,"author":{"gitID":"ChoChihTun"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, School.MESSAGE_SCHOOL_CONSTRAINTS);"},{"lineNumber":241,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":242,"author":{"gitID":"ChoChihTun"},"content":"        // invalid tag"},{"lineNumber":243,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":244,"author":{"gitID":"ChoChihTun"},"content":"                + SUBJECT_DESC_BOB + GRADE_DESC_BOB + EDUCATION_LEVEL_DESC_BOB + SCHOOL_DESC_BOB"},{"lineNumber":245,"author":{"gitID":"ChoChihTun"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":246,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":247,"author":{"gitID":"ChoChihTun"},"content":"        // three invalid values, only first invalid value reported"},{"lineNumber":248,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":249,"author":{"gitID":"ChoChihTun"},"content":"                        + SUBJECT_DESC_BOB + GRADE_DESC_BOB + INVALID_EDUCATION_LEVEL + SCHOOL_DESC_BOB,"},{"lineNumber":250,"author":{"gitID":"ChoChihTun"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":251,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":252,"author":{"gitID":"ChoChihTun"},"content":"        // non-empty preamble"},{"lineNumber":253,"author":{"gitID":"ChoChihTun"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":254,"author":{"gitID":"ChoChihTun"},"content":"                        + ADDRESS_DESC_BOB + SUBJECT_DESC_BOB + GRADE_DESC_BOB + INVALID_EDUCATION_LEVEL"},{"lineNumber":255,"author":{"gitID":"ChoChihTun"},"content":"                        + SCHOOL_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":256,"author":{"gitID":"ChoChihTun"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTuteeCommand.MESSAGE_USAGE));"},{"lineNumber":257,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"ChoChihTun"},"content":"}"}],"authorContributionMap":{"ChoChihTun":213,"-":45}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalPersons.BENSON;"},{"lineNumber":6,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalTutees.ALICETUTEE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.tutee.EducationLevel;"},{"lineNumber":20,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.tutee.Grade;"},{"lineNumber":21,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.tutee.School;"},{"lineNumber":22,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.tutee.Subject;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlAdaptedPersonTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":31,"author":{"gitID":"yungyung04"},"content":"    private static final String INVALID_SUBJECT \u003d \"1201\";"},{"lineNumber":32,"author":{"gitID":"yungyung04"},"content":"    private static final String INVALID_GRADE \u003d \"100\";"},{"lineNumber":33,"author":{"gitID":"yungyung04"},"content":"    private static final String INVALID_EDUCATION_LEVEL \u003d \"8th grade\";"},{"lineNumber":34,"author":{"gitID":"yungyung04"},"content":"    private static final String INVALID_SCHOOL \u003d \"  \";"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"yungyung04"},"content":"    private static final String VALID_TUTEE_NAME \u003d ALICETUTEE.getName().toString();"},{"lineNumber":45,"author":{"gitID":"yungyung04"},"content":"    private static final String VALID_TUTEE_PHONE \u003d ALICETUTEE.getPhone().toString();"},{"lineNumber":46,"author":{"gitID":"yungyung04"},"content":"    private static final String VALID_TUTEE_EMAIL \u003d ALICETUTEE.getEmail().toString();"},{"lineNumber":47,"author":{"gitID":"yungyung04"},"content":"    private static final String VALID_TUTEE_ADDRESS \u003d ALICETUTEE.getAddress().toString();"},{"lineNumber":48,"author":{"gitID":"yungyung04"},"content":"    private static final String VALID_TUTEE_SUBJECT \u003d ALICETUTEE.getSubject().toString();"},{"lineNumber":49,"author":{"gitID":"yungyung04"},"content":"    private static final String VALID_TUTEE_GRADE \u003d ALICETUTEE.getGrade().toString();"},{"lineNumber":50,"author":{"gitID":"yungyung04"},"content":"    private static final String VALID_TUTEE_EDUCATION_LEVEL \u003d ALICETUTEE.getEducationLevel().toString();"},{"lineNumber":51,"author":{"gitID":"yungyung04"},"content":"    private static final String VALID_TUTEE_SCHOOL \u003d ALICETUTEE.getSchool().toString();"},{"lineNumber":52,"author":{"gitID":"yungyung04"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TUTEE_TAGS \u003d ALICETUTEE.getTags().stream()"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":127,"author":{"gitID":"-"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"yungyung04"},"content":"    //@@author yungyung04"},{"lineNumber":132,"author":{"gitID":"yungyung04"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Tutee Related Tests \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":133,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":134,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":135,"author":{"gitID":"yungyung04"},"content":"    public void toModelType_validTuteeDetails_returnsTutee() throws Exception {"},{"lineNumber":136,"author":{"gitID":"yungyung04"},"content":"        XmlAdaptedPerson tutee \u003d new XmlAdaptedPerson(ALICETUTEE);"},{"lineNumber":137,"author":{"gitID":"yungyung04"},"content":"        assertEquals(ALICETUTEE, tutee.toModelType());"},{"lineNumber":138,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":140,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":141,"author":{"gitID":"yungyung04"},"content":"    public void toModelType_invalidTuteeName_throwsIllegalValueException() {"},{"lineNumber":142,"author":{"gitID":"yungyung04"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":143,"author":{"gitID":"yungyung04"},"content":"                new XmlAdaptedPerson(INVALID_NAME, VALID_TUTEE_PHONE, VALID_TUTEE_EMAIL, VALID_TUTEE_ADDRESS,"},{"lineNumber":144,"author":{"gitID":"yungyung04"},"content":"                        VALID_TUTEE_SUBJECT, VALID_TUTEE_GRADE, VALID_TUTEE_EDUCATION_LEVEL,"},{"lineNumber":145,"author":{"gitID":"yungyung04"},"content":"                        VALID_TUTEE_SCHOOL, VALID_TUTEE_TAGS);"},{"lineNumber":146,"author":{"gitID":"yungyung04"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":147,"author":{"gitID":"yungyung04"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":148,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":150,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":151,"author":{"gitID":"yungyung04"},"content":"    public void toModelType_nullTuteeName_throwsIllegalValueException() {"},{"lineNumber":152,"author":{"gitID":"yungyung04"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":153,"author":{"gitID":"yungyung04"},"content":"                new XmlAdaptedPerson(null, VALID_TUTEE_PHONE, VALID_TUTEE_EMAIL, VALID_TUTEE_ADDRESS,"},{"lineNumber":154,"author":{"gitID":"yungyung04"},"content":"                        VALID_TUTEE_SUBJECT, VALID_TUTEE_GRADE, VALID_TUTEE_EDUCATION_LEVEL,"},{"lineNumber":155,"author":{"gitID":"yungyung04"},"content":"                        VALID_TUTEE_SCHOOL, VALID_TUTEE_TAGS);"},{"lineNumber":156,"author":{"gitID":"yungyung04"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":157,"author":{"gitID":"yungyung04"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":158,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":160,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":161,"author":{"gitID":"yungyung04"},"content":"    public void toModelType_invalidTuteePhone_throwsIllegalValueException() {"},{"lineNumber":162,"author":{"gitID":"yungyung04"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":163,"author":{"gitID":"yungyung04"},"content":"                new XmlAdaptedPerson(VALID_TUTEE_NAME, INVALID_PHONE, VALID_TUTEE_EMAIL, VALID_TUTEE_ADDRESS,"},{"lineNumber":164,"author":{"gitID":"yungyung04"},"content":"                        VALID_TUTEE_SUBJECT, VALID_TUTEE_GRADE, VALID_TUTEE_EDUCATION_LEVEL,"},{"lineNumber":165,"author":{"gitID":"yungyung04"},"content":"                        VALID_TUTEE_SCHOOL, VALID_TUTEE_TAGS);"},{"lineNumber":166,"author":{"gitID":"yungyung04"},"content":"        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"},{"lineNumber":167,"author":{"gitID":"yungyung04"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":168,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":170,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":171,"author":{"gitID":"yungyung04"},"content":"    public void toModelType_nullTuteePhone_throwsIllegalValueException() {"},{"lineNumber":172,"author":{"gitID":"yungyung04"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":173,"author":{"gitID":"yungyung04"},"content":"                new XmlAdaptedPerson(VALID_TUTEE_NAME, null, VALID_TUTEE_EMAIL, VALID_TUTEE_ADDRESS,"},{"lineNumber":174,"author":{"gitID":"yungyung04"},"content":"                        VALID_TUTEE_SUBJECT, VALID_TUTEE_GRADE, VALID_TUTEE_EDUCATION_LEVEL,"},{"lineNumber":175,"author":{"gitID":"yungyung04"},"content":"                        VALID_TUTEE_SCHOOL, VALID_TUTEE_TAGS);"},{"lineNumber":176,"author":{"gitID":"yungyung04"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":177,"author":{"gitID":"yungyung04"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":178,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":180,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":181,"author":{"gitID":"yungyung04"},"content":"    public void toModelType_invalidTuteeEmail_throwsIllegalValueException() {"},{"lineNumber":182,"author":{"gitID":"yungyung04"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":183,"author":{"gitID":"yungyung04"},"content":"                new XmlAdaptedPerson(VALID_TUTEE_NAME, VALID_TUTEE_PHONE, INVALID_EMAIL, VALID_TUTEE_ADDRESS,"},{"lineNumber":184,"author":{"gitID":"yungyung04"},"content":"                        VALID_TUTEE_SUBJECT, VALID_TUTEE_GRADE, VALID_TUTEE_EDUCATION_LEVEL,"},{"lineNumber":185,"author":{"gitID":"yungyung04"},"content":"                        VALID_TUTEE_SCHOOL, VALID_TUTEE_TAGS);"},{"lineNumber":186,"author":{"gitID":"yungyung04"},"content":"        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"},{"lineNumber":187,"author":{"gitID":"yungyung04"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":188,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":190,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":191,"author":{"gitID":"yungyung04"},"content":"    public void toModelType_nullTuteeEmail_throwsIllegalValueException() {"},{"lineNumber":192,"author":{"gitID":"yungyung04"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":193,"author":{"gitID":"yungyung04"},"content":"                new XmlAdaptedPerson(VALID_TUTEE_NAME, VALID_TUTEE_PHONE, null, VALID_TUTEE_ADDRESS,"},{"lineNumber":194,"author":{"gitID":"yungyung04"},"content":"                        VALID_TUTEE_SUBJECT, VALID_TUTEE_GRADE, VALID_TUTEE_EDUCATION_LEVEL,"},{"lineNumber":195,"author":{"gitID":"yungyung04"},"content":"                        VALID_TUTEE_SCHOOL, VALID_TUTEE_TAGS);"},{"lineNumber":196,"author":{"gitID":"yungyung04"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":197,"author":{"gitID":"yungyung04"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":198,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":200,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":201,"author":{"gitID":"yungyung04"},"content":"    public void toModelType_invalidTuteeAddress_throwsIllegalValueException() {"},{"lineNumber":202,"author":{"gitID":"yungyung04"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":203,"author":{"gitID":"yungyung04"},"content":"                new XmlAdaptedPerson(VALID_TUTEE_NAME, VALID_TUTEE_PHONE, VALID_TUTEE_EMAIL, INVALID_ADDRESS,"},{"lineNumber":204,"author":{"gitID":"yungyung04"},"content":"                        VALID_TUTEE_SUBJECT, VALID_TUTEE_GRADE, VALID_TUTEE_EDUCATION_LEVEL,"},{"lineNumber":205,"author":{"gitID":"yungyung04"},"content":"                        VALID_TUTEE_SCHOOL, VALID_TUTEE_TAGS);"},{"lineNumber":206,"author":{"gitID":"yungyung04"},"content":"        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"},{"lineNumber":207,"author":{"gitID":"yungyung04"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":208,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":210,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":211,"author":{"gitID":"yungyung04"},"content":"    public void toModelType_nullTuteeAddress_throwsIllegalValueException() {"},{"lineNumber":212,"author":{"gitID":"yungyung04"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":213,"author":{"gitID":"yungyung04"},"content":"                new XmlAdaptedPerson(VALID_TUTEE_NAME, VALID_TUTEE_PHONE, VALID_TUTEE_EMAIL, null,"},{"lineNumber":214,"author":{"gitID":"yungyung04"},"content":"                        VALID_TUTEE_SUBJECT, VALID_TUTEE_GRADE, VALID_TUTEE_EDUCATION_LEVEL,"},{"lineNumber":215,"author":{"gitID":"yungyung04"},"content":"                        VALID_TUTEE_SCHOOL, VALID_TUTEE_TAGS);"},{"lineNumber":216,"author":{"gitID":"yungyung04"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":217,"author":{"gitID":"yungyung04"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":218,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":220,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":221,"author":{"gitID":"yungyung04"},"content":"    public void toModelType_invalidSubject_throwsIllegalValueException() {"},{"lineNumber":222,"author":{"gitID":"yungyung04"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":223,"author":{"gitID":"yungyung04"},"content":"                new XmlAdaptedPerson(VALID_TUTEE_NAME, VALID_TUTEE_PHONE, VALID_TUTEE_EMAIL, VALID_TUTEE_ADDRESS,"},{"lineNumber":224,"author":{"gitID":"yungyung04"},"content":"                        INVALID_SUBJECT, VALID_TUTEE_GRADE, VALID_TUTEE_EDUCATION_LEVEL,"},{"lineNumber":225,"author":{"gitID":"yungyung04"},"content":"                        VALID_TUTEE_SCHOOL, VALID_TUTEE_TAGS);"},{"lineNumber":226,"author":{"gitID":"yungyung04"},"content":"        String expectedMessage \u003d Subject.MESSAGE_SUBJECT_CONSTRAINTS;"},{"lineNumber":227,"author":{"gitID":"yungyung04"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":228,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":230,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":231,"author":{"gitID":"yungyung04"},"content":"    public void toModelType_nullSubject_throwsIllegalValueException() {"},{"lineNumber":232,"author":{"gitID":"yungyung04"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":233,"author":{"gitID":"yungyung04"},"content":"                new XmlAdaptedPerson(VALID_TUTEE_NAME, VALID_TUTEE_PHONE, VALID_TUTEE_EMAIL, VALID_TUTEE_ADDRESS,"},{"lineNumber":234,"author":{"gitID":"yungyung04"},"content":"                null, VALID_TUTEE_GRADE, VALID_TUTEE_EDUCATION_LEVEL,"},{"lineNumber":235,"author":{"gitID":"yungyung04"},"content":"                VALID_TUTEE_SCHOOL, VALID_TUTEE_TAGS);"},{"lineNumber":236,"author":{"gitID":"yungyung04"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Subject.class.getSimpleName());"},{"lineNumber":237,"author":{"gitID":"yungyung04"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":238,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":240,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":241,"author":{"gitID":"yungyung04"},"content":"    public void toModelType_invalidGrade_throwsIllegalValueException() {"},{"lineNumber":242,"author":{"gitID":"yungyung04"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":243,"author":{"gitID":"yungyung04"},"content":"                new XmlAdaptedPerson(VALID_TUTEE_NAME, VALID_TUTEE_PHONE, VALID_TUTEE_EMAIL, VALID_TUTEE_ADDRESS,"},{"lineNumber":244,"author":{"gitID":"yungyung04"},"content":"                        VALID_TUTEE_SUBJECT, INVALID_GRADE, VALID_TUTEE_EDUCATION_LEVEL,"},{"lineNumber":245,"author":{"gitID":"yungyung04"},"content":"                        VALID_TUTEE_SCHOOL, VALID_TUTEE_TAGS);"},{"lineNumber":246,"author":{"gitID":"yungyung04"},"content":"        String expectedMessage \u003d Grade.MESSAGE_GRADE_CONSTRAINTS;"},{"lineNumber":247,"author":{"gitID":"yungyung04"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":248,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":250,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":251,"author":{"gitID":"yungyung04"},"content":"    public void toModelType_nullGrade_throwsIllegalValueException() {"},{"lineNumber":252,"author":{"gitID":"yungyung04"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":253,"author":{"gitID":"yungyung04"},"content":"                new XmlAdaptedPerson(VALID_TUTEE_NAME, VALID_TUTEE_PHONE, VALID_TUTEE_EMAIL, VALID_TUTEE_ADDRESS,"},{"lineNumber":254,"author":{"gitID":"yungyung04"},"content":"                VALID_TUTEE_SUBJECT, null, VALID_TUTEE_EDUCATION_LEVEL,"},{"lineNumber":255,"author":{"gitID":"yungyung04"},"content":"                VALID_TUTEE_SCHOOL, VALID_TUTEE_TAGS);"},{"lineNumber":256,"author":{"gitID":"yungyung04"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Grade.class.getSimpleName());"},{"lineNumber":257,"author":{"gitID":"yungyung04"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":258,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":260,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":261,"author":{"gitID":"yungyung04"},"content":"    public void toModelType_invalidEducationLevel_throwsIllegalValueException() {"},{"lineNumber":262,"author":{"gitID":"yungyung04"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":263,"author":{"gitID":"yungyung04"},"content":"                new XmlAdaptedPerson(VALID_TUTEE_NAME, VALID_TUTEE_PHONE, VALID_TUTEE_EMAIL, VALID_TUTEE_ADDRESS,"},{"lineNumber":264,"author":{"gitID":"yungyung04"},"content":"                        VALID_TUTEE_SUBJECT, VALID_TUTEE_GRADE, INVALID_EDUCATION_LEVEL,"},{"lineNumber":265,"author":{"gitID":"yungyung04"},"content":"                        VALID_TUTEE_SCHOOL, VALID_TUTEE_TAGS);"},{"lineNumber":266,"author":{"gitID":"yungyung04"},"content":"        String expectedMessage \u003d EducationLevel.MESSAGE_EDUCATION_LEVEL_CONSTRAINTS;"},{"lineNumber":267,"author":{"gitID":"yungyung04"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":268,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":269,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":270,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":271,"author":{"gitID":"yungyung04"},"content":"    public void toModelType_nullEducationLevel_throwsIllegalValueException() {"},{"lineNumber":272,"author":{"gitID":"yungyung04"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":273,"author":{"gitID":"yungyung04"},"content":"                new XmlAdaptedPerson(VALID_TUTEE_NAME, VALID_TUTEE_PHONE, VALID_TUTEE_EMAIL, VALID_TUTEE_ADDRESS,"},{"lineNumber":274,"author":{"gitID":"yungyung04"},"content":"                VALID_TUTEE_SUBJECT, VALID_TUTEE_GRADE, null,"},{"lineNumber":275,"author":{"gitID":"yungyung04"},"content":"                VALID_TUTEE_SCHOOL, VALID_TUTEE_TAGS);"},{"lineNumber":276,"author":{"gitID":"yungyung04"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, EducationLevel.class.getSimpleName());"},{"lineNumber":277,"author":{"gitID":"yungyung04"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":278,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":279,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":280,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":281,"author":{"gitID":"yungyung04"},"content":"    public void toModelType_invalidSchool_throwsIllegalValueException() {"},{"lineNumber":282,"author":{"gitID":"yungyung04"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":283,"author":{"gitID":"yungyung04"},"content":"                new XmlAdaptedPerson(VALID_TUTEE_NAME, VALID_TUTEE_PHONE, VALID_TUTEE_EMAIL, VALID_TUTEE_ADDRESS,"},{"lineNumber":284,"author":{"gitID":"yungyung04"},"content":"                        VALID_TUTEE_SUBJECT, VALID_TUTEE_GRADE, VALID_TUTEE_EDUCATION_LEVEL,"},{"lineNumber":285,"author":{"gitID":"yungyung04"},"content":"                        INVALID_SCHOOL, VALID_TUTEE_TAGS);"},{"lineNumber":286,"author":{"gitID":"yungyung04"},"content":"        String expectedMessage \u003d School.MESSAGE_SCHOOL_CONSTRAINTS;"},{"lineNumber":287,"author":{"gitID":"yungyung04"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":288,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":289,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":290,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":291,"author":{"gitID":"yungyung04"},"content":"    public void toModelType_nullSchool_throwsIllegalValueException() {"},{"lineNumber":292,"author":{"gitID":"yungyung04"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":293,"author":{"gitID":"yungyung04"},"content":"                new XmlAdaptedPerson(VALID_TUTEE_NAME, VALID_TUTEE_PHONE, VALID_TUTEE_EMAIL, VALID_TUTEE_ADDRESS,"},{"lineNumber":294,"author":{"gitID":"yungyung04"},"content":"                VALID_TUTEE_SUBJECT, VALID_TUTEE_GRADE, VALID_TUTEE_EDUCATION_LEVEL,"},{"lineNumber":295,"author":{"gitID":"yungyung04"},"content":"                null, VALID_TUTEE_TAGS);"},{"lineNumber":296,"author":{"gitID":"yungyung04"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, School.class.getSimpleName());"},{"lineNumber":297,"author":{"gitID":"yungyung04"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":298,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":299,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":300,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":301,"author":{"gitID":"yungyung04"},"content":"    public void toModelType_tuteeHasInvalidTags_throwsIllegalValueException() {"},{"lineNumber":302,"author":{"gitID":"yungyung04"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TUTEE_TAGS);"},{"lineNumber":303,"author":{"gitID":"yungyung04"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":304,"author":{"gitID":"yungyung04"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":305,"author":{"gitID":"yungyung04"},"content":"                new XmlAdaptedPerson(VALID_TUTEE_NAME, VALID_TUTEE_PHONE, VALID_TUTEE_EMAIL, VALID_TUTEE_ADDRESS,"},{"lineNumber":306,"author":{"gitID":"yungyung04"},"content":"                VALID_TUTEE_SUBJECT, VALID_TUTEE_GRADE, VALID_TUTEE_EDUCATION_LEVEL,"},{"lineNumber":307,"author":{"gitID":"yungyung04"},"content":"                VALID_TUTEE_SCHOOL, invalidTags);"},{"lineNumber":308,"author":{"gitID":"yungyung04"},"content":"        Assert.assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":309,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":310,"author":{"gitID":"yungyung04"},"content":"}"}],"authorContributionMap":{"yungyung04":199,"-":111}},{"path":"src/test/java/seedu/address/storage/XmlAddressBookStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"a-shakra"},"content":"import static seedu.address.testutil.TypicalTasks.EXAMPLE2;"},{"lineNumber":6,"author":{"gitID":"a-shakra"},"content":"import static seedu.address.testutil.TypicalTasks.EXAMPLE4;"},{"lineNumber":7,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalAddressBookCompiler.getTypicalAddressBook1;"},{"lineNumber":8,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalPersons.ALICE;"},{"lineNumber":9,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalPersons.HOON;"},{"lineNumber":10,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalPersons.IDA;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":23,"author":{"gitID":"a-shakra"},"content":"import seedu.address.testutil.TypicalTasks;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlAddressBookStorageTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/XmlAddressBookStorageTest/\");"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        readAddressBook(null);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return new XmlAddressBookStorage(filePath).readAddressBook(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                ? TEST_DATA_FOLDER + prefsFileInTestDataFolder"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                : null;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.xml\").isPresent());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void read_notXmlFormat_exceptionThrown() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        readAddressBook(\"NotXmlFormatAddressBook.xml\");"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":62,"author":{"gitID":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":63,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        readAddressBook(\"invalidPersonAddressBook.xml\");"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        readAddressBook(\"invalidAndValidPersonAddressBook.xml\");"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":79,"author":{"gitID":"a-shakra"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"a-shakra"},"content":"    public void readAndSaveAddressBook_allInOrder_personSuccess() throws Exception {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempAddressBook.xml\";"},{"lineNumber":82,"author":{"gitID":"yungyung04"},"content":"        AddressBook original \u003d getTypicalAddressBook1();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        //Save in new file and read back"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        //Modify data, overwrite exiting file, and read back"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        original.addPerson(HOON);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        original.removePerson(ALICE);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        //Save and read without specifying file path"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        original.addPerson(IDA);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original); //file path not specified"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook().get(); //file path not specified"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"a-shakra"},"content":"    //@@author a-shakra"},{"lineNumber":105,"author":{"gitID":"a-shakra"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"a-shakra"},"content":"    public void readAndSaveAddressBook_allInOrder_taskSuccess() throws Exception {"},{"lineNumber":107,"author":{"gitID":"a-shakra"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempAddressBook.xml\";"},{"lineNumber":108,"author":{"gitID":"a-shakra"},"content":"        AddressBook original \u003d TypicalTasks.getTypicalAddressBook();"},{"lineNumber":109,"author":{"gitID":"a-shakra"},"content":"        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":110,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":111,"author":{"gitID":"a-shakra"},"content":"        //Save in new file and read back"},{"lineNumber":112,"author":{"gitID":"a-shakra"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":113,"author":{"gitID":"a-shakra"},"content":"        ReadOnlyAddressBook readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":114,"author":{"gitID":"a-shakra"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":115,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":116,"author":{"gitID":"a-shakra"},"content":"        //Modify data, overwrite exiting file, and read back"},{"lineNumber":117,"author":{"gitID":"a-shakra"},"content":"        original.removeTask(EXAMPLE2);"},{"lineNumber":118,"author":{"gitID":"a-shakra"},"content":"        original.addTask(EXAMPLE2);"},{"lineNumber":119,"author":{"gitID":"a-shakra"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":120,"author":{"gitID":"a-shakra"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":121,"author":{"gitID":"a-shakra"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":122,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":123,"author":{"gitID":"a-shakra"},"content":"        //Save and read without specifying file path"},{"lineNumber":124,"author":{"gitID":"a-shakra"},"content":"        original.addTask(EXAMPLE4);"},{"lineNumber":125,"author":{"gitID":"a-shakra"},"content":"        xmlAddressBookStorage.saveAddressBook(original); //file path not specified"},{"lineNumber":126,"author":{"gitID":"a-shakra"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook().get(); //file path not specified"},{"lineNumber":127,"author":{"gitID":"a-shakra"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":128,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":129,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":131,"author":{"gitID":"a-shakra"},"content":"    @Test"},{"lineNumber":132,"author":{"gitID":"a-shakra"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"},{"lineNumber":133,"author":{"gitID":"a-shakra"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":134,"author":{"gitID":"a-shakra"},"content":"        saveAddressBook(null, \"SomeFile.xml\");"},{"lineNumber":135,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":137,"author":{"gitID":"a-shakra"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"a-shakra"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}."},{"lineNumber":139,"author":{"gitID":"a-shakra"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"a-shakra"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"},{"lineNumber":141,"author":{"gitID":"a-shakra"},"content":"        try {"},{"lineNumber":142,"author":{"gitID":"a-shakra"},"content":"            new XmlAddressBookStorage(filePath).saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":143,"author":{"gitID":"a-shakra"},"content":"        } catch (IOException ioe) {"},{"lineNumber":144,"author":{"gitID":"a-shakra"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":145,"author":{"gitID":"a-shakra"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":148,"author":{"gitID":"a-shakra"},"content":"    @Test"},{"lineNumber":149,"author":{"gitID":"a-shakra"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() throws IOException {"},{"lineNumber":150,"author":{"gitID":"a-shakra"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":151,"author":{"gitID":"a-shakra"},"content":"        saveAddressBook(new AddressBook(), null);"},{"lineNumber":152,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":154,"author":{"gitID":"a-shakra"},"content":"}"}],"authorContributionMap":{"yungyung04":5,"a-shakra":57,"-":92}},{"path":"src/test/java/seedu/address/storage/XmlSerializableAddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBookTest {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlSerializableAddressBookTest/\");"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonAddressBook.xml\");"},{"lineNumber":17,"author":{"gitID":"a-shakra"},"content":"    private static final File INVALID_TASK_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidTaskAddressBook.xml\");"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final File INVALID_TAG_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidTagAddressBook.xml\");"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_PERSON_FILE,"},{"lineNumber":26,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"a-shakra"},"content":"    //@@author a-shakra"},{"lineNumber":31,"author":{"gitID":"a-shakra"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"a-shakra"},"content":"    public void toModelType_invalidTaskFile_throwsNullValueException() throws Exception {"},{"lineNumber":33,"author":{"gitID":"a-shakra"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_TASK_FILE,"},{"lineNumber":34,"author":{"gitID":"a-shakra"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":35,"author":{"gitID":"a-shakra"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":36,"author":{"gitID":"a-shakra"},"content":"        dataFromFile.toModelType();"},{"lineNumber":37,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"a-shakra"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"a-shakra"},"content":"    public void toModelType_invalidTagFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":40,"author":{"gitID":"a-shakra"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_TAG_FILE,"},{"lineNumber":41,"author":{"gitID":"a-shakra"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":42,"author":{"gitID":"a-shakra"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":43,"author":{"gitID":"a-shakra"},"content":"        dataFromFile.toModelType();"},{"lineNumber":44,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"a-shakra"},"content":"}"}],"authorContributionMap":{"a-shakra":17,"-":28}},{"path":"src/test/java/seedu/address/model/personal/PersonalTaskTest.java","lines":[{"lineNumber":1,"author":{"gitID":"ChoChihTun"},"content":"package seedu.address.model.personal;"},{"lineNumber":2,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":3,"author":{"gitID":"ChoChihTun"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.testutil.TypicalCalendarEntries.VALID_DESCRIPTION;"},{"lineNumber":5,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.testutil.TypicalCalendarEntries.VALID_DURATION;"},{"lineNumber":6,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.testutil.TypicalCalendarEntries.VALID_START_DATE_TIME;"},{"lineNumber":7,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.testutil.TypicalCalendarEntries.getPersonalEntry;"},{"lineNumber":8,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"ChoChihTun"},"content":"import com.calendarfx.model.Entry;"},{"lineNumber":13,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":14,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.testutil.TypicalCalendarEntries;"},{"lineNumber":15,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":16,"author":{"gitID":"ChoChihTun"},"content":"//@@author ChoChihTun"},{"lineNumber":17,"author":{"gitID":"ChoChihTun"},"content":"public class PersonalTaskTest {"},{"lineNumber":18,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":19,"author":{"gitID":"ChoChihTun"},"content":"    @BeforeClass"},{"lineNumber":20,"author":{"gitID":"ChoChihTun"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":21,"author":{"gitID":"ChoChihTun"},"content":"        new TypicalCalendarEntries();"},{"lineNumber":22,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":24,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"ChoChihTun"},"content":"    public void constructor_validArgs_success() {"},{"lineNumber":26,"author":{"gitID":"ChoChihTun"},"content":"        PersonalTask personalTask \u003d new PersonalTask(VALID_START_DATE_TIME,"},{"lineNumber":27,"author":{"gitID":"ChoChihTun"},"content":"                VALID_DURATION, VALID_DESCRIPTION);"},{"lineNumber":28,"author":{"gitID":"ChoChihTun"},"content":"        Entry actualEntry \u003d personalTask.getEntry();"},{"lineNumber":29,"author":{"gitID":"ChoChihTun"},"content":"        Entry expectedEntry \u003d getPersonalEntry();"},{"lineNumber":30,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":31,"author":{"gitID":"ChoChihTun"},"content":"        // To match the ID of the same entry"},{"lineNumber":32,"author":{"gitID":"ChoChihTun"},"content":"        actualEntry.setId(\"0\");"},{"lineNumber":33,"author":{"gitID":"ChoChihTun"},"content":"        expectedEntry.setId(\"0\");"},{"lineNumber":34,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":35,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(VALID_START_DATE_TIME, personalTask.getTaskDateTime());"},{"lineNumber":36,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(VALID_DURATION, personalTask.getDuration());"},{"lineNumber":37,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(VALID_DESCRIPTION, personalTask.getDescription());"},{"lineNumber":38,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(expectedEntry, actualEntry);"},{"lineNumber":39,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"ChoChihTun"},"content":"}"}],"authorContributionMap":{"ChoChihTun":37,"-":3}},{"path":"src/test/java/seedu/address/logic/commands/SortPersonCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_EDUCATION_LEVEL;"},{"lineNumber":7,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_GRADE;"},{"lineNumber":8,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_NAME;"},{"lineNumber":9,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_SCHOOL;"},{"lineNumber":10,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_SUBJECT;"},{"lineNumber":11,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalAddressBookCompiler.getTypicalAddressBook2;"},{"lineNumber":12,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalPersons.DANIEL;"},{"lineNumber":13,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalTutees.ALICETUTEE;"},{"lineNumber":14,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalTutees.AMYTUTEE;"},{"lineNumber":15,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalTutees.BOBTUTEE;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"yungyung04"},"content":"//@@author yungyung04"},{"lineNumber":31,"author":{"gitID":"yungyung04"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"yungyung04"},"content":" * Contains integration tests (interaction with the Model) for {@code SortPersonCommand}."},{"lineNumber":33,"author":{"gitID":"yungyung04"},"content":" */"},{"lineNumber":34,"author":{"gitID":"yungyung04"},"content":"public class SortPersonCommandTest {"},{"lineNumber":35,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":36,"author":{"gitID":"yungyung04"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook2(), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":38,"author":{"gitID":"yungyung04"},"content":"    private final SortPersonCommand sortName \u003d new SortPersonCommand(CATEGORY_NAME);"},{"lineNumber":39,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":40,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"yungyung04"},"content":"    public void equals() {"},{"lineNumber":42,"author":{"gitID":"yungyung04"},"content":"        // same object -\u003e returns true"},{"lineNumber":43,"author":{"gitID":"yungyung04"},"content":"        assertTrue(sortName.equals(sortName));"},{"lineNumber":44,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":45,"author":{"gitID":"yungyung04"},"content":"        // same values -\u003e returns true"},{"lineNumber":46,"author":{"gitID":"yungyung04"},"content":"        SortPersonCommand sortNameCopy \u003d new SortPersonCommand(CATEGORY_NAME);"},{"lineNumber":47,"author":{"gitID":"yungyung04"},"content":"        assertTrue(sortName.equals(sortNameCopy));"},{"lineNumber":48,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":49,"author":{"gitID":"yungyung04"},"content":"        // different types -\u003e returns false"},{"lineNumber":50,"author":{"gitID":"yungyung04"},"content":"        assertFalse(sortName.equals(1));"},{"lineNumber":51,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":52,"author":{"gitID":"yungyung04"},"content":"        // null -\u003e returns false"},{"lineNumber":53,"author":{"gitID":"yungyung04"},"content":"        assertFalse(sortName.equals(null));"},{"lineNumber":54,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":55,"author":{"gitID":"yungyung04"},"content":"        // different category -\u003e returns false"},{"lineNumber":56,"author":{"gitID":"yungyung04"},"content":"        SortPersonCommand sortGrade \u003d new SortPersonCommand(CATEGORY_GRADE);"},{"lineNumber":57,"author":{"gitID":"yungyung04"},"content":"        assertFalse(sortName.equals(sortGrade));"},{"lineNumber":58,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":60,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"yungyung04"},"content":"    public void execute_sortName_sortedSuccessfully() {"},{"lineNumber":62,"author":{"gitID":"yungyung04"},"content":"        sortName.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":63,"author":{"gitID":"yungyung04"},"content":"        String expectedMessage \u003d String.format(SortPersonCommand.MESSAGE_SUCCESS);"},{"lineNumber":64,"author":{"gitID":"yungyung04"},"content":"        assertCommandSuccess(sortName, expectedMessage,"},{"lineNumber":65,"author":{"gitID":"yungyung04"},"content":"                Arrays.asList(ALICETUTEE, AMYTUTEE, BOBTUTEE, DANIEL));"},{"lineNumber":66,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":68,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"yungyung04"},"content":"    public void execute_sortEducatonLevel_sortedSuccessfully() {"},{"lineNumber":70,"author":{"gitID":"yungyung04"},"content":"        SortPersonCommand sortEducationLevel \u003d new SortPersonCommand(CATEGORY_EDUCATION_LEVEL);"},{"lineNumber":71,"author":{"gitID":"yungyung04"},"content":"        sortEducationLevel.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":72,"author":{"gitID":"yungyung04"},"content":"        String expectedMessage \u003d String.format(SortPersonCommand.MESSAGE_SUCCESS);"},{"lineNumber":73,"author":{"gitID":"yungyung04"},"content":"        assertCommandSuccess(sortEducationLevel, expectedMessage,"},{"lineNumber":74,"author":{"gitID":"yungyung04"},"content":"                Arrays.asList(BOBTUTEE, ALICETUTEE, AMYTUTEE, DANIEL));"},{"lineNumber":75,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":77,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"yungyung04"},"content":"    public void execute_sortGrade_sortedSuccessfully() {"},{"lineNumber":79,"author":{"gitID":"yungyung04"},"content":"        SortPersonCommand sortGrade \u003d new SortPersonCommand(CATEGORY_GRADE);"},{"lineNumber":80,"author":{"gitID":"yungyung04"},"content":"        sortGrade.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":81,"author":{"gitID":"yungyung04"},"content":"        String expectedMessage \u003d String.format(SortPersonCommand.MESSAGE_SUCCESS);"},{"lineNumber":82,"author":{"gitID":"yungyung04"},"content":"        assertCommandSuccess(sortGrade, expectedMessage,"},{"lineNumber":83,"author":{"gitID":"yungyung04"},"content":"                Arrays.asList(BOBTUTEE, AMYTUTEE, ALICETUTEE, DANIEL));"},{"lineNumber":84,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":86,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"yungyung04"},"content":"    public void execute_sortSchool_sortedSuccessfully() {"},{"lineNumber":88,"author":{"gitID":"yungyung04"},"content":"        SortPersonCommand sortSchool \u003d new SortPersonCommand(CATEGORY_SCHOOL);"},{"lineNumber":89,"author":{"gitID":"yungyung04"},"content":"        sortSchool.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":90,"author":{"gitID":"yungyung04"},"content":"        String expectedMessage \u003d String.format(SortPersonCommand.MESSAGE_SUCCESS);"},{"lineNumber":91,"author":{"gitID":"yungyung04"},"content":"        assertCommandSuccess(sortSchool, expectedMessage,"},{"lineNumber":92,"author":{"gitID":"yungyung04"},"content":"                Arrays.asList(ALICETUTEE, AMYTUTEE, BOBTUTEE, DANIEL));"},{"lineNumber":93,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":95,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"yungyung04"},"content":"    public void execute_sortSubject_sortedSuccessfully() {"},{"lineNumber":97,"author":{"gitID":"yungyung04"},"content":"        SortPersonCommand sortSubject \u003d new SortPersonCommand(CATEGORY_SUBJECT);"},{"lineNumber":98,"author":{"gitID":"yungyung04"},"content":"        sortSubject.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":99,"author":{"gitID":"yungyung04"},"content":"        String expectedMessage \u003d String.format(SortPersonCommand.MESSAGE_SUCCESS);"},{"lineNumber":100,"author":{"gitID":"yungyung04"},"content":"        assertCommandSuccess(sortSubject, expectedMessage,"},{"lineNumber":101,"author":{"gitID":"yungyung04"},"content":"                Arrays.asList(AMYTUTEE, ALICETUTEE, BOBTUTEE, DANIEL));"},{"lineNumber":102,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":104,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"yungyung04"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"yungyung04"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"yungyung04"},"content":"     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"yungyung04"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":109,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"yungyung04"},"content":"    private void assertCommandSuccess(SortPersonCommand command, String expectedMessage, List\u003cPerson\u003e expectedList) {"},{"lineNumber":111,"author":{"gitID":"yungyung04"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":112,"author":{"gitID":"yungyung04"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":113,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":114,"author":{"gitID":"yungyung04"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":115,"author":{"gitID":"yungyung04"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":116,"author":{"gitID":"yungyung04"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":117,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"yungyung04"},"content":"}"}],"authorContributionMap":{"yungyung04":99,"-":19}},{"path":"src/test/java/seedu/address/model/tutee/SubjectTest.java","lines":[{"lineNumber":1,"author":{"gitID":"ChoChihTun"},"content":"package seedu.address.model.tutee;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"ChoChihTun"},"content":"//@@author ChoChihTun"},{"lineNumber":11,"author":{"gitID":"ChoChihTun"},"content":"public class SubjectTest {"},{"lineNumber":12,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":13,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"ChoChihTun"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"ChoChihTun"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Subject(null));"},{"lineNumber":16,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":18,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"ChoChihTun"},"content":"    public void constructor_invalidSubject_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"ChoChihTun"},"content":"        String invalidSubject \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"ChoChihTun"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Subject(invalidSubject));"},{"lineNumber":22,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":24,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"ChoChihTun"},"content":"    public void isValidSubject() {"},{"lineNumber":26,"author":{"gitID":"ChoChihTun"},"content":"        // null subject"},{"lineNumber":27,"author":{"gitID":"ChoChihTun"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Subject.isValidSubject(null));"},{"lineNumber":28,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":29,"author":{"gitID":"ChoChihTun"},"content":"        // invalid subject name"},{"lineNumber":30,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(Subject.isValidSubject(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(Subject.isValidSubject(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(Subject.isValidSubject(\"^\")); // only non-alphabetic characters"},{"lineNumber":33,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(Subject.isValidSubject(\"economics*\")); // contains non-alphabetic characters"},{"lineNumber":34,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(Subject.isValidSubject(\"911\")); // numbers only"},{"lineNumber":35,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(Subject.isValidSubject(\"math12\")); // contains numbers"},{"lineNumber":36,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":37,"author":{"gitID":"ChoChihTun"},"content":"        // valid subject name"},{"lineNumber":38,"author":{"gitID":"ChoChihTun"},"content":"        assertTrue(Subject.isValidSubject(\"social studies\")); // alphabets only"},{"lineNumber":39,"author":{"gitID":"ChoChihTun"},"content":"        assertTrue(Subject.isValidSubject(\"Social Studies\")); // with capital letters"},{"lineNumber":40,"author":{"gitID":"ChoChihTun"},"content":"        assertTrue(Subject.isValidSubject(\"introduction to fluid dynamics\")); // long subject name"},{"lineNumber":41,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":43,"author":{"gitID":"ChoChihTun"},"content":"}"}],"authorContributionMap":{"ChoChihTun":35,"-":8}},{"path":"src/test/java/seedu/address/model/tutee/GradeTest.java","lines":[{"lineNumber":1,"author":{"gitID":"ChoChihTun"},"content":"package seedu.address.model.tutee;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"ChoChihTun"},"content":"//@@author ChoChihTun"},{"lineNumber":11,"author":{"gitID":"ChoChihTun"},"content":"public class GradeTest {"},{"lineNumber":12,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":13,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"ChoChihTun"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"ChoChihTun"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Grade(null));"},{"lineNumber":16,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":18,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"ChoChihTun"},"content":"    public void constructor_invalidGrade_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"ChoChihTun"},"content":"        String invalidGrade \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"ChoChihTun"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Grade(invalidGrade));"},{"lineNumber":22,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":24,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"ChoChihTun"},"content":"    public void isValidGrade() {"},{"lineNumber":26,"author":{"gitID":"ChoChihTun"},"content":"        // null grade"},{"lineNumber":27,"author":{"gitID":"ChoChihTun"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Grade.isValidGrade(null));"},{"lineNumber":28,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":29,"author":{"gitID":"ChoChihTun"},"content":"        // invalid grade"},{"lineNumber":30,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(Grade.isValidGrade(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(Grade.isValidGrade(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(Grade.isValidGrade(\"9112\")); // only contains numbers"},{"lineNumber":33,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(Grade.isValidGrade(\"pass\")); // more than 2 alphabet"},{"lineNumber":34,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(Grade.isValidGrade(\"+B\")); // special character before alphabet"},{"lineNumber":35,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(Grade.isValidGrade(\"B -\")); // spaces within digits"},{"lineNumber":36,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(Grade.isValidGrade(\"  B\")); // leading whitespace"},{"lineNumber":37,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":38,"author":{"gitID":"ChoChihTun"},"content":"        // valid grade"},{"lineNumber":39,"author":{"gitID":"ChoChihTun"},"content":"        assertTrue(Grade.isValidGrade(\"A+\")); // 1 alphabet followed by a special character"},{"lineNumber":40,"author":{"gitID":"ChoChihTun"},"content":"        assertTrue(Grade.isValidGrade(\"B\")); // only 1 alphabet"},{"lineNumber":41,"author":{"gitID":"ChoChihTun"},"content":"        assertTrue(Grade.isValidGrade(\"b\")); // small letter"},{"lineNumber":42,"author":{"gitID":"ChoChihTun"},"content":"        assertTrue(Grade.isValidGrade(\"C5\")); // number after alphabet"},{"lineNumber":43,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":45,"author":{"gitID":"ChoChihTun"},"content":"}"}],"authorContributionMap":{"ChoChihTun":37,"-":8}},{"path":"src/test/java/seedu/address/model/tutee/TuitionTaskTest.java","lines":[{"lineNumber":1,"author":{"gitID":"ChoChihTun"},"content":"package seedu.address.model.tutee;"},{"lineNumber":2,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":3,"author":{"gitID":"ChoChihTun"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.testutil.TypicalCalendarEntries.VALID_DESCRIPTION;"},{"lineNumber":5,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.testutil.TypicalCalendarEntries.VALID_DURATION;"},{"lineNumber":6,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.testutil.TypicalCalendarEntries.VALID_NAME;"},{"lineNumber":7,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.testutil.TypicalCalendarEntries.VALID_START_DATE_TIME;"},{"lineNumber":8,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.testutil.TypicalCalendarEntries.getTuitionEntry;"},{"lineNumber":9,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"ChoChihTun"},"content":"import com.calendarfx.model.Entry;"},{"lineNumber":14,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":15,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.testutil.TypicalCalendarEntries;"},{"lineNumber":16,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":17,"author":{"gitID":"ChoChihTun"},"content":"//@@author ChoChihTun"},{"lineNumber":18,"author":{"gitID":"ChoChihTun"},"content":"public class TuitionTaskTest {"},{"lineNumber":19,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":20,"author":{"gitID":"ChoChihTun"},"content":"    @BeforeClass"},{"lineNumber":21,"author":{"gitID":"ChoChihTun"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":22,"author":{"gitID":"ChoChihTun"},"content":"        new TypicalCalendarEntries();"},{"lineNumber":23,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":25,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"ChoChihTun"},"content":"    public void constructor_validArgs_success() {"},{"lineNumber":27,"author":{"gitID":"ChoChihTun"},"content":"        TuitionTask tuitionTask \u003d new TuitionTask(VALID_NAME, VALID_START_DATE_TIME,"},{"lineNumber":28,"author":{"gitID":"ChoChihTun"},"content":"                VALID_DURATION, VALID_DESCRIPTION);"},{"lineNumber":29,"author":{"gitID":"ChoChihTun"},"content":"        Entry actualEntry \u003d tuitionTask.getEntry();"},{"lineNumber":30,"author":{"gitID":"ChoChihTun"},"content":"        Entry expectedEntry \u003d getTuitionEntry();"},{"lineNumber":31,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":32,"author":{"gitID":"ChoChihTun"},"content":"        // To match the ID of the same entry"},{"lineNumber":33,"author":{"gitID":"ChoChihTun"},"content":"        actualEntry.setId(\"0\");"},{"lineNumber":34,"author":{"gitID":"ChoChihTun"},"content":"        expectedEntry.setId(\"0\");"},{"lineNumber":35,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":36,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(VALID_NAME, tuitionTask.getPerson());"},{"lineNumber":37,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(VALID_START_DATE_TIME, tuitionTask.getTaskDateTime());"},{"lineNumber":38,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(VALID_DURATION, tuitionTask.getDuration());"},{"lineNumber":39,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(VALID_DESCRIPTION, tuitionTask.getDescription());"},{"lineNumber":40,"author":{"gitID":"ChoChihTun"},"content":"        assertEquals(expectedEntry, actualEntry);"},{"lineNumber":41,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"ChoChihTun"},"content":"}"}],"authorContributionMap":{"ChoChihTun":39,"-":3}},{"path":"src/test/java/seedu/address/model/UniqueTaskListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"ChoChihTun"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":3,"author":{"gitID":"ChoChihTun"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitID":"ChoChihTun"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitID":"ChoChihTun"},"content":"import java.time.format.ResolverStyle;"},{"lineNumber":6,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":7,"author":{"gitID":"ChoChihTun"},"content":"import org.junit.BeforeClass;"},{"lineNumber":8,"author":{"gitID":"ChoChihTun"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"ChoChihTun"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":11,"author":{"gitID":"ChoChihTun"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":12,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":13,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.personal.PersonalTask;"},{"lineNumber":14,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.model.task.exceptions.TimingClashException;"},{"lineNumber":15,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.model.tutee.TuitionTask;"},{"lineNumber":16,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":17,"author":{"gitID":"ChoChihTun"},"content":"import systemtests.SystemTestSetupHelper;"},{"lineNumber":18,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":19,"author":{"gitID":"ChoChihTun"},"content":"//@@author ChoChihTun"},{"lineNumber":20,"author":{"gitID":"ChoChihTun"},"content":"public class UniqueTaskListTest {"},{"lineNumber":21,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":22,"author":{"gitID":"ChoChihTun"},"content":"    @Rule"},{"lineNumber":23,"author":{"gitID":"ChoChihTun"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":24,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":25,"author":{"gitID":"ChoChihTun"},"content":"    private DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/uuuu HH:mm\")"},{"lineNumber":26,"author":{"gitID":"ChoChihTun"},"content":"            .withResolverStyle(ResolverStyle.STRICT);"},{"lineNumber":27,"author":{"gitID":"ChoChihTun"},"content":"    private UniqueTaskList uniqueTaskList \u003d new UniqueTaskList();"},{"lineNumber":28,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":29,"author":{"gitID":"ChoChihTun"},"content":"    @BeforeClass"},{"lineNumber":30,"author":{"gitID":"ChoChihTun"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":31,"author":{"gitID":"ChoChihTun"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":32,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":34,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"ChoChihTun"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":36,"author":{"gitID":"ChoChihTun"},"content":"        UniqueTaskList uniqueTaskList \u003d new UniqueTaskList();"},{"lineNumber":37,"author":{"gitID":"ChoChihTun"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":38,"author":{"gitID":"ChoChihTun"},"content":"        uniqueTaskList.asObservableList().remove(0);"},{"lineNumber":39,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":41,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"ChoChihTun"},"content":"    public void addNewTask_clashes_throwsTimingClashException() {"},{"lineNumber":43,"author":{"gitID":"ChoChihTun"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"ChoChihTun"},"content":"            createTaskList();"},{"lineNumber":45,"author":{"gitID":"ChoChihTun"},"content":"        } catch (TimingClashException e) {"},{"lineNumber":46,"author":{"gitID":"ChoChihTun"},"content":"            throw new AssertionError(\"Should not have any clashed timing\");"},{"lineNumber":47,"author":{"gitID":"ChoChihTun"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"ChoChihTun"},"content":"        // New task starts at the same time as an existing task"},{"lineNumber":49,"author":{"gitID":"ChoChihTun"},"content":"        Assert.assertThrows(TimingClashException.class, () -\u003e"},{"lineNumber":50,"author":{"gitID":"ChoChihTun"},"content":"                uniqueTaskList.add(new PersonalTask("},{"lineNumber":51,"author":{"gitID":"ChoChihTun"},"content":"                        LocalDateTime.parse(\"11/01/2011 22:00\", formatter), \"2h0m\", \"Homework 1\")));"},{"lineNumber":52,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":53,"author":{"gitID":"ChoChihTun"},"content":"        // New task starts during an existing task"},{"lineNumber":54,"author":{"gitID":"ChoChihTun"},"content":"        Assert.assertThrows(TimingClashException.class, () -\u003e"},{"lineNumber":55,"author":{"gitID":"ChoChihTun"},"content":"                uniqueTaskList.add(new PersonalTask("},{"lineNumber":56,"author":{"gitID":"ChoChihTun"},"content":"                        LocalDateTime.parse(\"15/01/2011 22:30\", formatter), \"2h0m\", \"Homework 2\")));"},{"lineNumber":57,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":58,"author":{"gitID":"ChoChihTun"},"content":"        // New task ends at the same time as an existing task"},{"lineNumber":59,"author":{"gitID":"ChoChihTun"},"content":"        Assert.assertThrows(TimingClashException.class, () -\u003e"},{"lineNumber":60,"author":{"gitID":"ChoChihTun"},"content":"                uniqueTaskList.add(new PersonalTask("},{"lineNumber":61,"author":{"gitID":"ChoChihTun"},"content":"                        LocalDateTime.parse(\"13/01/2011 11:30\", formatter), \"0h30m\", \"Homework 3\")));"},{"lineNumber":62,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":63,"author":{"gitID":"ChoChihTun"},"content":"        // New task ends during an existing task"},{"lineNumber":64,"author":{"gitID":"ChoChihTun"},"content":"        Assert.assertThrows(TimingClashException.class, () -\u003e"},{"lineNumber":65,"author":{"gitID":"ChoChihTun"},"content":"                uniqueTaskList.add(new PersonalTask("},{"lineNumber":66,"author":{"gitID":"ChoChihTun"},"content":"                        LocalDateTime.parse(\"13/01/2011 10:00\", formatter), \"1h30m\", \"Homework 4\")));"},{"lineNumber":67,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":68,"author":{"gitID":"ChoChihTun"},"content":"        // New task is within an existing task completely"},{"lineNumber":69,"author":{"gitID":"ChoChihTun"},"content":"        Assert.assertThrows(TimingClashException.class, () -\u003e"},{"lineNumber":70,"author":{"gitID":"ChoChihTun"},"content":"                uniqueTaskList.add(new TuitionTask("},{"lineNumber":71,"author":{"gitID":"ChoChihTun"},"content":"                        \"Anne\", LocalDateTime.parse(\"15/01/2011 22:30\", formatter), \"1h30m\", \"Assignment\")));"},{"lineNumber":72,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":73,"author":{"gitID":"ChoChihTun"},"content":"        // Existing task is within the new task completely"},{"lineNumber":74,"author":{"gitID":"ChoChihTun"},"content":"        Assert.assertThrows(TimingClashException.class, () -\u003e"},{"lineNumber":75,"author":{"gitID":"ChoChihTun"},"content":"                uniqueTaskList.add(new TuitionTask("},{"lineNumber":76,"author":{"gitID":"ChoChihTun"},"content":"                        \"Ben\", LocalDateTime.parse(\"11/01/2011 21:00\", formatter), \"4h0m\", \"Revision\")));"},{"lineNumber":77,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":79,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"ChoChihTun"},"content":"     * Generates a list of existing tasks"},{"lineNumber":81,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"ChoChihTun"},"content":"    private void createTaskList() throws TimingClashException {"},{"lineNumber":83,"author":{"gitID":"ChoChihTun"},"content":"        uniqueTaskList.add(new TuitionTask(\"Anne\","},{"lineNumber":84,"author":{"gitID":"ChoChihTun"},"content":"                LocalDateTime.parse(\"11/01/2011 22:00\", formatter), \"1h30m\", \"tuition 1\"));"},{"lineNumber":85,"author":{"gitID":"ChoChihTun"},"content":"        uniqueTaskList.add(new PersonalTask("},{"lineNumber":86,"author":{"gitID":"ChoChihTun"},"content":"                LocalDateTime.parse(\"15/01/2011 22:00\", formatter), \"2h30m\", \"personal task 1\"));"},{"lineNumber":87,"author":{"gitID":"ChoChihTun"},"content":"        uniqueTaskList.add(new PersonalTask("},{"lineNumber":88,"author":{"gitID":"ChoChihTun"},"content":"                LocalDateTime.parse(\"13/01/2011 11:00\", formatter), \"1h0m\", \"personal task 2\"));"},{"lineNumber":89,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"ChoChihTun"},"content":"}"}],"authorContributionMap":{"ChoChihTun":89,"yungyung04":1}},{"path":"src/test/java/seedu/address/model/tutee/EducationLevelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"ChoChihTun"},"content":"package seedu.address.model.tutee;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"ChoChihTun"},"content":"//@@author ChoChihTun"},{"lineNumber":11,"author":{"gitID":"ChoChihTun"},"content":"public class EducationLevelTest {"},{"lineNumber":12,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":13,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"ChoChihTun"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"ChoChihTun"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new EducationLevel(null));"},{"lineNumber":16,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":18,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"ChoChihTun"},"content":"    public void constructor_invalidEducationLevel_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"ChoChihTun"},"content":"        String invalidEducationLevel \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"ChoChihTun"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new EducationLevel(invalidEducationLevel));"},{"lineNumber":22,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":24,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"ChoChihTun"},"content":"    public void isValidEducationLevel() {"},{"lineNumber":26,"author":{"gitID":"ChoChihTun"},"content":"        // null education level"},{"lineNumber":27,"author":{"gitID":"ChoChihTun"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e EducationLevel.isValidEducationLevel(null));"},{"lineNumber":28,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":29,"author":{"gitID":"ChoChihTun"},"content":"        // invalid education level"},{"lineNumber":30,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(EducationLevel.isValidEducationLevel(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(EducationLevel.isValidEducationLevel(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(EducationLevel.isValidEducationLevel(\"91\")); // numbers"},{"lineNumber":33,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(EducationLevel.isValidEducationLevel(\"university\")); // not the specified education level"},{"lineNumber":34,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(EducationLevel.isValidEducationLevel(\"primary5\")); // contains number"},{"lineNumber":35,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(EducationLevel.isValidEducationLevel(\"primary@\")); // contains special characters"},{"lineNumber":36,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(EducationLevel.isValidEducationLevel(\"  secondary  \")); // multiple leading and trailing whitespaces"},{"lineNumber":37,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":38,"author":{"gitID":"ChoChihTun"},"content":"        // valid education level"},{"lineNumber":39,"author":{"gitID":"ChoChihTun"},"content":"        assertTrue(EducationLevel.isValidEducationLevel(\"primary\")); // primary school"},{"lineNumber":40,"author":{"gitID":"ChoChihTun"},"content":"        assertTrue(EducationLevel.isValidEducationLevel(\"secondary\")); // secondary school"},{"lineNumber":41,"author":{"gitID":"ChoChihTun"},"content":"        assertTrue(EducationLevel.isValidEducationLevel(\"junior college\")); // junior college"},{"lineNumber":42,"author":{"gitID":"ChoChihTun"},"content":"        assertTrue(EducationLevel.isValidEducationLevel(\"SeCoNdaRy\")); // Capital"},{"lineNumber":43,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"ChoChihTun"},"content":"}"}],"authorContributionMap":{"ChoChihTun":36,"-":8}},{"path":"src/test/java/seedu/address/logic/commands/DeleteTaskCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showTaskAtIndex;"},{"lineNumber":11,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"},{"lineNumber":12,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"},{"lineNumber":13,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalAddressBookCompiler.getTypicalAddressBook1;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.Task;"},{"lineNumber":24,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":26,"author":{"gitID":"yungyung04"},"content":"//@@author yungyung04"},{"lineNumber":27,"author":{"gitID":"yungyung04"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"yungyung04"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":29,"author":{"gitID":"yungyung04"},"content":" * {@code DeleteTaskCommand}."},{"lineNumber":30,"author":{"gitID":"yungyung04"},"content":" */"},{"lineNumber":31,"author":{"gitID":"yungyung04"},"content":"public class DeleteTaskCommandTest {"},{"lineNumber":32,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":33,"author":{"gitID":"yungyung04"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook1(), new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":35,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"yungyung04"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":37,"author":{"gitID":"yungyung04"},"content":"        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":38,"author":{"gitID":"yungyung04"},"content":"        DeleteTaskCommand deleteTaskCommand \u003d prepareCommand(INDEX_FIRST_TASK);"},{"lineNumber":39,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":40,"author":{"gitID":"yungyung04"},"content":"        String expectedMessage \u003d String.format(DeleteTaskCommand.MESSAGE_SUCCESS, taskToDelete);"},{"lineNumber":41,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":42,"author":{"gitID":"yungyung04"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":43,"author":{"gitID":"yungyung04"},"content":"        expectedModel.deleteTask(taskToDelete);"},{"lineNumber":44,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":45,"author":{"gitID":"yungyung04"},"content":"        assertCommandSuccess(deleteTaskCommand, model, expectedMessage, expectedModel);"},{"lineNumber":46,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":48,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"yungyung04"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":50,"author":{"gitID":"yungyung04"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"},{"lineNumber":51,"author":{"gitID":"yungyung04"},"content":"        DeleteTaskCommand deleteTaskCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":52,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":53,"author":{"gitID":"yungyung04"},"content":"        assertCommandFailure(deleteTaskCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":54,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":56,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"yungyung04"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":58,"author":{"gitID":"yungyung04"},"content":"        showTaskAtIndex(model, INDEX_FIRST_TASK);"},{"lineNumber":59,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":60,"author":{"gitID":"yungyung04"},"content":"        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":61,"author":{"gitID":"yungyung04"},"content":"        DeleteTaskCommand deleteTaskCommand \u003d prepareCommand(INDEX_FIRST_TASK);"},{"lineNumber":62,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":63,"author":{"gitID":"yungyung04"},"content":"        String expectedMessage \u003d String.format(DeleteTaskCommand.MESSAGE_SUCCESS, taskToDelete);"},{"lineNumber":64,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":65,"author":{"gitID":"yungyung04"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":66,"author":{"gitID":"yungyung04"},"content":"        expectedModel.deleteTask(taskToDelete);"},{"lineNumber":67,"author":{"gitID":"yungyung04"},"content":"        showNoTask(expectedModel);"},{"lineNumber":68,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":69,"author":{"gitID":"yungyung04"},"content":"        assertCommandSuccess(deleteTaskCommand, model, expectedMessage, expectedModel);"},{"lineNumber":70,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":72,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"yungyung04"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":74,"author":{"gitID":"yungyung04"},"content":"        showTaskAtIndex(model, INDEX_FIRST_TASK);"},{"lineNumber":75,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":76,"author":{"gitID":"yungyung04"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_TASK;"},{"lineNumber":77,"author":{"gitID":"yungyung04"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":78,"author":{"gitID":"yungyung04"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getTaskList().size());"},{"lineNumber":79,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":80,"author":{"gitID":"yungyung04"},"content":"        DeleteTaskCommand deleteTaskCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":81,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":82,"author":{"gitID":"yungyung04"},"content":"        assertCommandFailure(deleteTaskCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":83,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":85,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"yungyung04"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":87,"author":{"gitID":"yungyung04"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":88,"author":{"gitID":"yungyung04"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":89,"author":{"gitID":"yungyung04"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":90,"author":{"gitID":"yungyung04"},"content":"        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":91,"author":{"gitID":"yungyung04"},"content":"        DeleteTaskCommand deleteTaskCommand \u003d prepareCommand(INDEX_FIRST_TASK);"},{"lineNumber":92,"author":{"gitID":"yungyung04"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":93,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":94,"author":{"gitID":"yungyung04"},"content":"        // delete -\u003e first task deleted"},{"lineNumber":95,"author":{"gitID":"yungyung04"},"content":"        deleteTaskCommand.execute();"},{"lineNumber":96,"author":{"gitID":"yungyung04"},"content":"        undoRedoStack.push(deleteTaskCommand);"},{"lineNumber":97,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":98,"author":{"gitID":"yungyung04"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered task list to show all tasks"},{"lineNumber":99,"author":{"gitID":"yungyung04"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":100,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":101,"author":{"gitID":"yungyung04"},"content":"        // redo -\u003e same first task deleted again"},{"lineNumber":102,"author":{"gitID":"yungyung04"},"content":"        expectedModel.deleteTask(taskToDelete);"},{"lineNumber":103,"author":{"gitID":"yungyung04"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":104,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":106,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"yungyung04"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":108,"author":{"gitID":"yungyung04"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":109,"author":{"gitID":"yungyung04"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":110,"author":{"gitID":"yungyung04"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":111,"author":{"gitID":"yungyung04"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"},{"lineNumber":112,"author":{"gitID":"yungyung04"},"content":"        DeleteTaskCommand deleteTaskCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":113,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":114,"author":{"gitID":"yungyung04"},"content":"        // execution failed -\u003e deleteTaskCommand not pushed into undoRedoStack"},{"lineNumber":115,"author":{"gitID":"yungyung04"},"content":"        assertCommandFailure(deleteTaskCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":116,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":117,"author":{"gitID":"yungyung04"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":118,"author":{"gitID":"yungyung04"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":119,"author":{"gitID":"yungyung04"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":120,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":122,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"yungyung04"},"content":"     * 1. Deletes a {@code task} from a filtered list."},{"lineNumber":124,"author":{"gitID":"yungyung04"},"content":"     * 2. Undo the deletion."},{"lineNumber":125,"author":{"gitID":"yungyung04"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted task in the"},{"lineNumber":126,"author":{"gitID":"yungyung04"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":127,"author":{"gitID":"yungyung04"},"content":"     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the task object regardless of indexing."},{"lineNumber":128,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"yungyung04"},"content":"    public void executeUndoRedo_validIndexFilteredList_sameTaskDeleted() throws Exception {"},{"lineNumber":131,"author":{"gitID":"yungyung04"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":132,"author":{"gitID":"yungyung04"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":133,"author":{"gitID":"yungyung04"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":134,"author":{"gitID":"yungyung04"},"content":"        DeleteTaskCommand deleteTaskCommand \u003d prepareCommand(INDEX_FIRST_TASK);"},{"lineNumber":135,"author":{"gitID":"yungyung04"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":136,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":137,"author":{"gitID":"yungyung04"},"content":"        showTaskAtIndex(model, INDEX_SECOND_TASK);"},{"lineNumber":138,"author":{"gitID":"yungyung04"},"content":"        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"},{"lineNumber":139,"author":{"gitID":"yungyung04"},"content":"        // delete -\u003e deletes second task in unfiltered task list / first task in filtered task list"},{"lineNumber":140,"author":{"gitID":"yungyung04"},"content":"        deleteTaskCommand.execute();"},{"lineNumber":141,"author":{"gitID":"yungyung04"},"content":"        undoRedoStack.push(deleteTaskCommand);"},{"lineNumber":142,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":143,"author":{"gitID":"yungyung04"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered task list to show all tasks"},{"lineNumber":144,"author":{"gitID":"yungyung04"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":145,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":146,"author":{"gitID":"yungyung04"},"content":"        expectedModel.deleteTask(taskToDelete);"},{"lineNumber":147,"author":{"gitID":"yungyung04"},"content":"        assertNotEquals(taskToDelete, model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased()));"},{"lineNumber":148,"author":{"gitID":"yungyung04"},"content":"        // redo -\u003e deletes same second task in unfiltered task list"},{"lineNumber":149,"author":{"gitID":"yungyung04"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":150,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":152,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":153,"author":{"gitID":"yungyung04"},"content":"    public void equals() throws Exception {"},{"lineNumber":154,"author":{"gitID":"yungyung04"},"content":"        DeleteTaskCommand deleteFirstCommand \u003d prepareCommand(INDEX_FIRST_TASK);"},{"lineNumber":155,"author":{"gitID":"yungyung04"},"content":"        DeleteTaskCommand deleteSecondCommand \u003d prepareCommand(INDEX_SECOND_TASK);"},{"lineNumber":156,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":157,"author":{"gitID":"yungyung04"},"content":"        // same object -\u003e returns true"},{"lineNumber":158,"author":{"gitID":"yungyung04"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":159,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":160,"author":{"gitID":"yungyung04"},"content":"        // same values -\u003e returns true"},{"lineNumber":161,"author":{"gitID":"yungyung04"},"content":"        DeleteTaskCommand deleteFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_TASK);"},{"lineNumber":162,"author":{"gitID":"yungyung04"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":163,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":164,"author":{"gitID":"yungyung04"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":165,"author":{"gitID":"yungyung04"},"content":"        deleteFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":166,"author":{"gitID":"yungyung04"},"content":"        assertFalse(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":167,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":168,"author":{"gitID":"yungyung04"},"content":"        // different types -\u003e returns false"},{"lineNumber":169,"author":{"gitID":"yungyung04"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":170,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":171,"author":{"gitID":"yungyung04"},"content":"        // null -\u003e returns false"},{"lineNumber":172,"author":{"gitID":"yungyung04"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":173,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":174,"author":{"gitID":"yungyung04"},"content":"        // different person -\u003e returns false"},{"lineNumber":175,"author":{"gitID":"yungyung04"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":176,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":178,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":179,"author":{"gitID":"yungyung04"},"content":"     * Returns a {@code DeleteTaskCommand} with the parameter {@code index}."},{"lineNumber":180,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":181,"author":{"gitID":"yungyung04"},"content":"    private DeleteTaskCommand prepareCommand(Index index) {"},{"lineNumber":182,"author":{"gitID":"yungyung04"},"content":"        DeleteTaskCommand deleteTaskCommand \u003d new DeleteTaskCommand(index);"},{"lineNumber":183,"author":{"gitID":"yungyung04"},"content":"        deleteTaskCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":184,"author":{"gitID":"yungyung04"},"content":"        return deleteTaskCommand;"},{"lineNumber":185,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":187,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":188,"author":{"gitID":"yungyung04"},"content":"     * Updates {@code model}\u0027s filtered tasks list to show no one."},{"lineNumber":189,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"yungyung04"},"content":"    private void showNoTask(Model model) {"},{"lineNumber":191,"author":{"gitID":"yungyung04"},"content":"        model.updateFilteredTaskList(t -\u003e false);"},{"lineNumber":192,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":193,"author":{"gitID":"yungyung04"},"content":"        assertTrue(model.getFilteredTaskList().isEmpty());"},{"lineNumber":194,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"yungyung04"},"content":"}"}],"authorContributionMap":{"yungyung04":177,"-":18}},{"path":"src/test/java/seedu/address/model/tutee/GradeContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"ChoChihTun"},"content":"package seedu.address.model.tutee;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_AMY;"},{"lineNumber":6,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"yungyung04"},"content":"import seedu.address.testutil.TuteeBuilder;"},{"lineNumber":15,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":16,"author":{"gitID":"yungyung04"},"content":"//@@author yungyung04"},{"lineNumber":17,"author":{"gitID":"yungyung04"},"content":"public class GradeContainsKeywordsPredicateTest {"},{"lineNumber":18,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":19,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"yungyung04"},"content":"    public void equals() {"},{"lineNumber":21,"author":{"gitID":"yungyung04"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":22,"author":{"gitID":"yungyung04"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":23,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":24,"author":{"gitID":"yungyung04"},"content":"        GradeContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":25,"author":{"gitID":"yungyung04"},"content":"                new GradeContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":26,"author":{"gitID":"yungyung04"},"content":"        GradeContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":27,"author":{"gitID":"yungyung04"},"content":"                new GradeContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":28,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":29,"author":{"gitID":"yungyung04"},"content":"        // same object -\u003e returns true"},{"lineNumber":30,"author":{"gitID":"yungyung04"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":31,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":32,"author":{"gitID":"yungyung04"},"content":"        // same values -\u003e returns true"},{"lineNumber":33,"author":{"gitID":"yungyung04"},"content":"        GradeContainsKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":34,"author":{"gitID":"yungyung04"},"content":"                new GradeContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":35,"author":{"gitID":"yungyung04"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":36,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":37,"author":{"gitID":"yungyung04"},"content":"        // different types -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"yungyung04"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":39,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":40,"author":{"gitID":"yungyung04"},"content":"        // null -\u003e returns false"},{"lineNumber":41,"author":{"gitID":"yungyung04"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":42,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":43,"author":{"gitID":"yungyung04"},"content":"        // different education levels -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"yungyung04"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":45,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":47,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"yungyung04"},"content":"    public void test_gradeContainsKeywords_returnsTrue() {"},{"lineNumber":49,"author":{"gitID":"yungyung04"},"content":"        // One keyword"},{"lineNumber":50,"author":{"gitID":"yungyung04"},"content":"        GradeContainsKeywordsPredicate predicate \u003d"},{"lineNumber":51,"author":{"gitID":"yungyung04"},"content":"                new GradeContainsKeywordsPredicate(Collections.singletonList(VALID_GRADE_AMY));"},{"lineNumber":52,"author":{"gitID":"yungyung04"},"content":"        assertTrue(predicate.test(new TuteeBuilder().withGrade(VALID_GRADE_AMY).build()));"},{"lineNumber":53,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":54,"author":{"gitID":"yungyung04"},"content":"        // Only one matching keyword"},{"lineNumber":55,"author":{"gitID":"yungyung04"},"content":"        predicate \u003d new GradeContainsKeywordsPredicate(Arrays.asList(VALID_GRADE_AMY, VALID_GRADE_BOB));"},{"lineNumber":56,"author":{"gitID":"yungyung04"},"content":"        assertTrue(predicate.test(new TuteeBuilder()"},{"lineNumber":57,"author":{"gitID":"yungyung04"},"content":"                .withGrade(VALID_GRADE_AMY).build()));"},{"lineNumber":58,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":59,"author":{"gitID":"yungyung04"},"content":"        // Mixed-case keywords"},{"lineNumber":60,"author":{"gitID":"yungyung04"},"content":"        predicate \u003d new GradeContainsKeywordsPredicate(Arrays.asList(\"a\"));"},{"lineNumber":61,"author":{"gitID":"yungyung04"},"content":"        assertTrue(predicate.test(new TuteeBuilder().withGrade(\"A\").build()));"},{"lineNumber":62,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":64,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"yungyung04"},"content":"    public void test_gradeDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":66,"author":{"gitID":"yungyung04"},"content":"        // Zero keywords"},{"lineNumber":67,"author":{"gitID":"yungyung04"},"content":"        GradeContainsKeywordsPredicate predicate \u003d"},{"lineNumber":68,"author":{"gitID":"yungyung04"},"content":"                new GradeContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":69,"author":{"gitID":"yungyung04"},"content":"        assertFalse(predicate.test(new TuteeBuilder().withGrade(VALID_GRADE_AMY).build()));"},{"lineNumber":70,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":71,"author":{"gitID":"yungyung04"},"content":"        // Non-matching keyword"},{"lineNumber":72,"author":{"gitID":"yungyung04"},"content":"        predicate \u003d new GradeContainsKeywordsPredicate(Arrays.asList(VALID_GRADE_BOB));"},{"lineNumber":73,"author":{"gitID":"yungyung04"},"content":"        assertFalse(predicate.test(new TuteeBuilder().withGrade(VALID_GRADE_AMY).build()));"},{"lineNumber":74,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":75,"author":{"gitID":"yungyung04"},"content":"        // Keywords match education level, school and subject, but does not match grade"},{"lineNumber":76,"author":{"gitID":"yungyung04"},"content":"        predicate \u003d new GradeContainsKeywordsPredicate(Arrays.asList(\"school\", \"primary\", \"mathematics\"));"},{"lineNumber":77,"author":{"gitID":"yungyung04"},"content":"        assertFalse(predicate.test(new TuteeBuilder().withGrade(VALID_GRADE_AMY).withSchool(\"school\")"},{"lineNumber":78,"author":{"gitID":"yungyung04"},"content":"                .withEducationLevel(\"primary\").withSubject(\"mathematics\").build()));"},{"lineNumber":79,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":80,"author":{"gitID":"yungyung04"},"content":"        // Keywords match email and address, but does not match grade"},{"lineNumber":81,"author":{"gitID":"yungyung04"},"content":"        predicate \u003d new GradeContainsKeywordsPredicate(Arrays"},{"lineNumber":82,"author":{"gitID":"yungyung04"},"content":"                .asList(VALID_GRADE_BOB, \"alice@email.com\", \"Main\", \"Street\"));"},{"lineNumber":83,"author":{"gitID":"yungyung04"},"content":"        assertFalse(predicate.test(new TuteeBuilder().withGrade(VALID_GRADE_AMY)"},{"lineNumber":84,"author":{"gitID":"yungyung04"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"},{"lineNumber":85,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":86,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"yungyung04"},"content":"}"}],"authorContributionMap":{"ChoChihTun":3,"yungyung04":74,"-":10}},{"path":"src/test/java/seedu/address/model/tutee/SchoolTest.java","lines":[{"lineNumber":1,"author":{"gitID":"ChoChihTun"},"content":"package seedu.address.model.tutee;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"ChoChihTun"},"content":"//@@author ChoChihTun"},{"lineNumber":11,"author":{"gitID":"ChoChihTun"},"content":"public class SchoolTest {"},{"lineNumber":12,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":13,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"ChoChihTun"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"ChoChihTun"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new School(null));"},{"lineNumber":16,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":18,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"ChoChihTun"},"content":"    public void constructor_invalidSchool_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"ChoChihTun"},"content":"        String invalidSchool \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"ChoChihTun"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new School(invalidSchool));"},{"lineNumber":22,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":24,"author":{"gitID":"ChoChihTun"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"ChoChihTun"},"content":"    public void isValidSchool() {"},{"lineNumber":26,"author":{"gitID":"ChoChihTun"},"content":"        // null school name"},{"lineNumber":27,"author":{"gitID":"ChoChihTun"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e School.isValidSchool(null));"},{"lineNumber":28,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":29,"author":{"gitID":"ChoChihTun"},"content":"        // invalid school name"},{"lineNumber":30,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(School.isValidSchool(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(School.isValidSchool(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(School.isValidSchool(\"^\")); // only non-alphabetic characters"},{"lineNumber":33,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(School.isValidSchool(\"bedok primary school*\")); // contains non-alphabetic characters"},{"lineNumber":34,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(School.isValidSchool(\"911\")); // numbers only"},{"lineNumber":35,"author":{"gitID":"ChoChihTun"},"content":"        assertFalse(School.isValidSchool(\"bedok12 secondary school\")); // contains numbers"},{"lineNumber":36,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":37,"author":{"gitID":"ChoChihTun"},"content":"        // valid school name"},{"lineNumber":38,"author":{"gitID":"ChoChihTun"},"content":"        assertTrue(School.isValidSchool(\"victoria junior college\")); // alphabets only"},{"lineNumber":39,"author":{"gitID":"ChoChihTun"},"content":"        assertTrue(School.isValidSchool(\"Victoria Junior College\")); // with capital letters"},{"lineNumber":40,"author":{"gitID":"ChoChihTun"},"content":"        assertTrue(School.isValidSchool(\"The longest name school primary school\")); // long school name"},{"lineNumber":41,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":43,"author":{"gitID":"ChoChihTun"},"content":"}"}],"authorContributionMap":{"ChoChihTun":35,"-":8}},{"path":"src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class NameContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"raymond511"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        // One keyword"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        // Multiple keywords"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // Only one matching keyword"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // Zero keywords"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // Non-matching keyword"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"raymond511"},"content":"        // Keywords match email and address, but does not match phone"},{"lineNumber":72,"author":{"gitID":"raymond511"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12354\", \"alice@email.com\", \"Main\", \"Street\"));"},{"lineNumber":73,"author":{"gitID":"raymond511"},"content":"        assertFalse(predicate.test(new PersonBuilder().withPhone(\"85355255\").withEmail(\"alice@email.com\")"},{"lineNumber":74,"author":{"gitID":"raymond511"},"content":"                .withAddress(\"Main Street\").build()));"},{"lineNumber":75,"author":{"gitID":"raymond511"},"content":""},{"lineNumber":76,"author":{"gitID":"raymond511"},"content":"        // Keywords match email and address, but does not match name"},{"lineNumber":77,"author":{"gitID":"raymond511"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"alice@email.com\", \"Main\", \"Street\"));"},{"lineNumber":78,"author":{"gitID":"raymond511"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withEmail(\"alice@email.com\")"},{"lineNumber":79,"author":{"gitID":"raymond511"},"content":"                .withAddress(\"Main Street\").build()));"},{"lineNumber":80,"author":{"gitID":"raymond511"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":71,"raymond511":11}},{"path":"src/test/java/seedu/address/model/tutee/SchoolContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHOOL_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.tutee.SchoolContainsKeywordsPredicate;"},{"lineNumber":14,"author":{"gitID":"yungyung04"},"content":"import seedu.address.testutil.TuteeBuilder;"},{"lineNumber":15,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":16,"author":{"gitID":"yungyung04"},"content":"//@@author yungyung04"},{"lineNumber":17,"author":{"gitID":"yungyung04"},"content":"public class SchoolContainsKeywordsPredicateTest {"},{"lineNumber":18,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":19,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"yungyung04"},"content":"    public void equals() {"},{"lineNumber":21,"author":{"gitID":"yungyung04"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":22,"author":{"gitID":"yungyung04"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":23,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":24,"author":{"gitID":"yungyung04"},"content":"        SchoolContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":25,"author":{"gitID":"yungyung04"},"content":"                new SchoolContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":26,"author":{"gitID":"yungyung04"},"content":"        SchoolContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":27,"author":{"gitID":"yungyung04"},"content":"                new SchoolContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":28,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":29,"author":{"gitID":"yungyung04"},"content":"        // same object -\u003e returns true"},{"lineNumber":30,"author":{"gitID":"yungyung04"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":31,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":32,"author":{"gitID":"yungyung04"},"content":"        // same values -\u003e returns true"},{"lineNumber":33,"author":{"gitID":"yungyung04"},"content":"        SchoolContainsKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":34,"author":{"gitID":"yungyung04"},"content":"                new SchoolContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":35,"author":{"gitID":"yungyung04"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":36,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":37,"author":{"gitID":"yungyung04"},"content":"        // different types -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"yungyung04"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":39,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":40,"author":{"gitID":"yungyung04"},"content":"        // null -\u003e returns false"},{"lineNumber":41,"author":{"gitID":"yungyung04"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":42,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":43,"author":{"gitID":"yungyung04"},"content":"        // different schools -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"yungyung04"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":45,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":47,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"yungyung04"},"content":"    public void test_schoolContainsKeywords_returnsTrue() {"},{"lineNumber":49,"author":{"gitID":"yungyung04"},"content":"        // One keyword"},{"lineNumber":50,"author":{"gitID":"yungyung04"},"content":"        SchoolContainsKeywordsPredicate predicate \u003d"},{"lineNumber":51,"author":{"gitID":"yungyung04"},"content":"                new SchoolContainsKeywordsPredicate(Collections.singletonList(\"nan\"));"},{"lineNumber":52,"author":{"gitID":"yungyung04"},"content":"        assertTrue(predicate.test(new TuteeBuilder().withSchool(\"nan hua high school\").build()));"},{"lineNumber":53,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":54,"author":{"gitID":"yungyung04"},"content":"        // Only one matching keyword"},{"lineNumber":55,"author":{"gitID":"yungyung04"},"content":"        predicate \u003d new SchoolContainsKeywordsPredicate(Arrays.asList(\"nan\", \"victoria\"));"},{"lineNumber":56,"author":{"gitID":"yungyung04"},"content":"        assertTrue(predicate.test(new TuteeBuilder().withSchool(\"victoria\").build()));"},{"lineNumber":57,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":58,"author":{"gitID":"yungyung04"},"content":"        // Mixed-case keywords"},{"lineNumber":59,"author":{"gitID":"yungyung04"},"content":"        predicate \u003d new SchoolContainsKeywordsPredicate(Arrays.asList(\"nan\"));"},{"lineNumber":60,"author":{"gitID":"yungyung04"},"content":"        assertTrue(predicate.test(new TuteeBuilder().withSchool(\"NAN\").build()));"},{"lineNumber":61,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":63,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"yungyung04"},"content":"    public void test_schoolDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":65,"author":{"gitID":"yungyung04"},"content":"        // Zero keywords"},{"lineNumber":66,"author":{"gitID":"yungyung04"},"content":"        SchoolContainsKeywordsPredicate predicate \u003d"},{"lineNumber":67,"author":{"gitID":"yungyung04"},"content":"                new SchoolContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":68,"author":{"gitID":"yungyung04"},"content":"        assertFalse(predicate.test(new TuteeBuilder().withSchool(VALID_SCHOOL_AMY).build()));"},{"lineNumber":69,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":70,"author":{"gitID":"yungyung04"},"content":"        // Non-matching keyword"},{"lineNumber":71,"author":{"gitID":"yungyung04"},"content":"        predicate \u003d new SchoolContainsKeywordsPredicate(Arrays.asList(\"victoria\"));"},{"lineNumber":72,"author":{"gitID":"yungyung04"},"content":"        assertFalse(predicate.test(new TuteeBuilder().withSchool(\"nan hua high school\").build()));"},{"lineNumber":73,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":74,"author":{"gitID":"yungyung04"},"content":"        // Keywords match education level, grade and subject, but does not match school"},{"lineNumber":75,"author":{"gitID":"yungyung04"},"content":"        predicate \u003d new SchoolContainsKeywordsPredicate(Arrays.asList(\"B\", \"primary\", \"mathematics\"));"},{"lineNumber":76,"author":{"gitID":"yungyung04"},"content":"        assertFalse(predicate.test(new TuteeBuilder().withSchool(VALID_SCHOOL_AMY).withGrade(\"B\")"},{"lineNumber":77,"author":{"gitID":"yungyung04"},"content":"                .withEducationLevel(\"primary\").withSubject(\"mathematics\").build()));"},{"lineNumber":78,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":79,"author":{"gitID":"yungyung04"},"content":"        // Keywords match email and address, but does not match school"},{"lineNumber":80,"author":{"gitID":"yungyung04"},"content":"        predicate \u003d new SchoolContainsKeywordsPredicate(Arrays"},{"lineNumber":81,"author":{"gitID":"yungyung04"},"content":"                .asList(\"victoria\", \"alice@email.com\", \"Main\", \"Street\"));"},{"lineNumber":82,"author":{"gitID":"yungyung04"},"content":"        assertFalse(predicate.test(new TuteeBuilder().withSchool(\"nan hua high school\")"},{"lineNumber":83,"author":{"gitID":"yungyung04"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"},{"lineNumber":84,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":85,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"yungyung04"},"content":"}"}],"authorContributionMap":{"ChoChihTun":1,"yungyung04":74,"-":11}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.PersonBuilder.DEFAULT_TAGS;"},{"lineNumber":5,"author":{"gitID":"a-shakra"},"content":"import static seedu.address.testutil.TypicalTasks.EXAMPLE1;"},{"lineNumber":6,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalAddressBookCompiler.getTypicalAddressBook1;"},{"lineNumber":7,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalPersons.ALICE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"yungyung04"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":25,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":37,"author":{"gitID":"a-shakra"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTaskList());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":48,"author":{"gitID":"yungyung04"},"content":"        AddressBook newData \u003d getTypicalAddressBook1();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":58,"author":{"gitID":"a-shakra"},"content":"        List\u003cTask\u003e newTasks \u003d Arrays.asList(EXAMPLE1);"},{"lineNumber":59,"author":{"gitID":"a-shakra"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags, newTasks);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"a-shakra"},"content":"    //@@author a-shakra"},{"lineNumber":65,"author":{"gitID":"a-shakra"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"a-shakra"},"content":"    public void resetData_withDuplicateTasks_throwsAssertionError() {"},{"lineNumber":67,"author":{"gitID":"a-shakra"},"content":"        // Repeat EXAMPLE1 twice"},{"lineNumber":68,"author":{"gitID":"a-shakra"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE);"},{"lineNumber":69,"author":{"gitID":"a-shakra"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":70,"author":{"gitID":"a-shakra"},"content":"        List\u003cTask\u003e newTasks \u003d Arrays.asList(EXAMPLE1, EXAMPLE1);"},{"lineNumber":71,"author":{"gitID":"a-shakra"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags, newTasks);"},{"lineNumber":72,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":73,"author":{"gitID":"a-shakra"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":74,"author":{"gitID":"a-shakra"},"content":"        addressBook.resetData(newData);"},{"lineNumber":75,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"a-shakra"},"content":"    //@@author"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        addressBook.getPersonList().remove(0);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"a-shakra"},"content":"    //@@author a-shakra"},{"lineNumber":89,"author":{"gitID":"a-shakra"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"a-shakra"},"content":"    public void getTaskList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":91,"author":{"gitID":"a-shakra"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":92,"author":{"gitID":"a-shakra"},"content":"        addressBook.getTaskList().remove(0);"},{"lineNumber":93,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"a-shakra"},"content":"    //@@author"},{"lineNumber":95,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"yungyung04"},"content":"    public void removeTag_existingTag_tagRemoved() throws Exception {"},{"lineNumber":97,"author":{"gitID":"yungyung04"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":98,"author":{"gitID":"yungyung04"},"content":"        addressBook.addPerson(person);"},{"lineNumber":99,"author":{"gitID":"yungyung04"},"content":"        addressBook.removeTagFromPerson(new Tag(DEFAULT_TAGS), person);"},{"lineNumber":100,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":101,"author":{"gitID":"yungyung04"},"content":"        Person expectedPerson \u003d new PersonBuilder().withTags().build();"},{"lineNumber":102,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":103,"author":{"gitID":"yungyung04"},"content":"        assertEquals(person, expectedPerson);"},{"lineNumber":104,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons and tags lists can violate interface constraints."},{"lineNumber":108,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":112,"author":{"gitID":"a-shakra"},"content":"        private final ObservableList\u003cTask\u003e tasks \u003d FXCollections.observableArrayList();"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"a-shakra"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003c? extends Tag\u003e tags, Collection\u003cTask\u003e tasks) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":117,"author":{"gitID":"a-shakra"},"content":"            this.tasks.setAll(tasks);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            return persons;"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"a-shakra"},"content":"        @Override"},{"lineNumber":126,"author":{"gitID":"a-shakra"},"content":"        public ObservableList\u003cTask\u003e getTaskList() {"},{"lineNumber":127,"author":{"gitID":"a-shakra"},"content":"            return tasks;"},{"lineNumber":128,"author":{"gitID":"a-shakra"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yungyung04":17,"a-shakra":32,"-":87}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":6,"author":{"gitID":"a-shakra"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"},{"lineNumber":7,"author":{"gitID":"a-shakra"},"content":"import static seedu.address.testutil.TypicalTasks.EXAMPLE1;"},{"lineNumber":8,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalPersons.ALICE;"},{"lineNumber":9,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalPersons.BENSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        modelManager.getFilteredPersonList().remove(0);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"a-shakra"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"a-shakra"},"content":"    public void getFilteredTaskList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":35,"author":{"gitID":"a-shakra"},"content":"        modelManager.getFilteredTaskList().remove(0);"},{"lineNumber":36,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":40,"author":{"gitID":"a-shakra"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON)"},{"lineNumber":41,"author":{"gitID":"a-shakra"},"content":"                .withTask(EXAMPLE1).build();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"a-shakra"},"content":"        // different person filteredList -\u003e returns false"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"a-shakra"},"content":"        // different task filteredList -\u003e returns false"},{"lineNumber":68,"author":{"gitID":"a-shakra"},"content":"        String[] keywordsT \u003d EXAMPLE1.getDescription().split(\"\\\\s+\");"},{"lineNumber":69,"author":{"gitID":"a-shakra"},"content":"        modelManager.updateFilteredTaskList(new TaskContainsKeywordsPredicate(Arrays.asList(keywordsT)));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":74,"author":{"gitID":"a-shakra"},"content":"        modelManager.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // different userPrefs -\u003e returns true"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        differentUserPrefs.setAddressBookName(\"differentName\");"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yungyung04":2,"a-shakra":14,"-":65}},{"path":"src/test/java/seedu/address/model/tutee/EducationLevelContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"ChoChihTun"},"content":"package seedu.address.model.tutee;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EDUCATION_LEVEL_AMY;"},{"lineNumber":6,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EDUCATION_LEVEL_ROBERT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"yungyung04"},"content":"import seedu.address.testutil.TuteeBuilder;"},{"lineNumber":15,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":16,"author":{"gitID":"yungyung04"},"content":"//@@author yungyung04"},{"lineNumber":17,"author":{"gitID":"yungyung04"},"content":"public class EducationLevelContainsKeywordsPredicateTest {"},{"lineNumber":18,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":19,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"yungyung04"},"content":"    public void equals() {"},{"lineNumber":21,"author":{"gitID":"yungyung04"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":22,"author":{"gitID":"yungyung04"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":23,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":24,"author":{"gitID":"yungyung04"},"content":"        EducationLevelContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":25,"author":{"gitID":"yungyung04"},"content":"                new EducationLevelContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":26,"author":{"gitID":"yungyung04"},"content":"        EducationLevelContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":27,"author":{"gitID":"yungyung04"},"content":"                new EducationLevelContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":28,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":29,"author":{"gitID":"yungyung04"},"content":"        // same object -\u003e returns true"},{"lineNumber":30,"author":{"gitID":"yungyung04"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":31,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":32,"author":{"gitID":"yungyung04"},"content":"        // same values -\u003e returns true"},{"lineNumber":33,"author":{"gitID":"yungyung04"},"content":"        EducationLevelContainsKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":34,"author":{"gitID":"yungyung04"},"content":"                new EducationLevelContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":35,"author":{"gitID":"yungyung04"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":36,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":37,"author":{"gitID":"yungyung04"},"content":"        // different types -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"yungyung04"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":39,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":40,"author":{"gitID":"yungyung04"},"content":"        // null -\u003e returns false"},{"lineNumber":41,"author":{"gitID":"yungyung04"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":42,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":43,"author":{"gitID":"yungyung04"},"content":"        // different education levels -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"yungyung04"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":45,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":47,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"yungyung04"},"content":"    public void test_educationLevelContainsKeywords_returnsTrue() {"},{"lineNumber":49,"author":{"gitID":"yungyung04"},"content":"        // One keyword"},{"lineNumber":50,"author":{"gitID":"yungyung04"},"content":"        EducationLevelContainsKeywordsPredicate predicate \u003d"},{"lineNumber":51,"author":{"gitID":"yungyung04"},"content":"                new EducationLevelContainsKeywordsPredicate(Collections.singletonList(VALID_EDUCATION_LEVEL_AMY));"},{"lineNumber":52,"author":{"gitID":"yungyung04"},"content":"        assertTrue(predicate.test(new TuteeBuilder().withEducationLevel(VALID_EDUCATION_LEVEL_AMY).build()));"},{"lineNumber":53,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":54,"author":{"gitID":"yungyung04"},"content":"        // Multiple keywords"},{"lineNumber":55,"author":{"gitID":"yungyung04"},"content":"        predicate \u003d new EducationLevelContainsKeywordsPredicate(Arrays"},{"lineNumber":56,"author":{"gitID":"yungyung04"},"content":"                .asList(\"junior\", \"college\"));"},{"lineNumber":57,"author":{"gitID":"yungyung04"},"content":"        assertTrue(predicate.test(new TuteeBuilder()"},{"lineNumber":58,"author":{"gitID":"yungyung04"},"content":"                .withEducationLevel(\"junior college\").build()));"},{"lineNumber":59,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":60,"author":{"gitID":"yungyung04"},"content":"        // Only one matching keyword"},{"lineNumber":61,"author":{"gitID":"yungyung04"},"content":"        predicate \u003d new EducationLevelContainsKeywordsPredicate(Arrays.asList(\"junior\"));"},{"lineNumber":62,"author":{"gitID":"yungyung04"},"content":"        assertTrue(predicate.test(new TuteeBuilder()"},{"lineNumber":63,"author":{"gitID":"yungyung04"},"content":"                .withEducationLevel(\"junior college\").build()));"},{"lineNumber":64,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":65,"author":{"gitID":"yungyung04"},"content":"        // Mixed-case keywords"},{"lineNumber":66,"author":{"gitID":"yungyung04"},"content":"        predicate \u003d new EducationLevelContainsKeywordsPredicate(Arrays.asList(\"JuNiOr\", \"colLEGE\"));"},{"lineNumber":67,"author":{"gitID":"yungyung04"},"content":"        assertTrue(predicate.test(new TuteeBuilder().withEducationLevel(\"junior college\").build()));"},{"lineNumber":68,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":70,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"yungyung04"},"content":"    public void test_educationLevelDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":72,"author":{"gitID":"yungyung04"},"content":"        // Zero keywords"},{"lineNumber":73,"author":{"gitID":"yungyung04"},"content":"        EducationLevelContainsKeywordsPredicate predicate \u003d"},{"lineNumber":74,"author":{"gitID":"yungyung04"},"content":"                new EducationLevelContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":75,"author":{"gitID":"yungyung04"},"content":"        assertFalse(predicate.test(new TuteeBuilder().withEducationLevel(VALID_EDUCATION_LEVEL_AMY).build()));"},{"lineNumber":76,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":77,"author":{"gitID":"yungyung04"},"content":"        // Non-matching keyword"},{"lineNumber":78,"author":{"gitID":"yungyung04"},"content":"        predicate \u003d new EducationLevelContainsKeywordsPredicate(Arrays.asList(VALID_EDUCATION_LEVEL_ROBERT));"},{"lineNumber":79,"author":{"gitID":"yungyung04"},"content":"        assertFalse(predicate.test(new TuteeBuilder().withEducationLevel(VALID_EDUCATION_LEVEL_AMY).build()));"},{"lineNumber":80,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":81,"author":{"gitID":"yungyung04"},"content":"        // Keywords match grade, school and subject, but does not match education level"},{"lineNumber":82,"author":{"gitID":"yungyung04"},"content":"        predicate \u003d new EducationLevelContainsKeywordsPredicate(Arrays.asList(\"school\", \"B\", \"mathematics\"));"},{"lineNumber":83,"author":{"gitID":"yungyung04"},"content":"        assertFalse(predicate.test(new TuteeBuilder().withEducationLevel(VALID_EDUCATION_LEVEL_AMY).withSchool(\"school\")"},{"lineNumber":84,"author":{"gitID":"yungyung04"},"content":"                .withGrade(\"B\").withSubject(\"mathematics\").build()));"},{"lineNumber":85,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":86,"author":{"gitID":"yungyung04"},"content":"        // Keywords match email and address, but does not match education level"},{"lineNumber":87,"author":{"gitID":"yungyung04"},"content":"        predicate \u003d new EducationLevelContainsKeywordsPredicate(Arrays"},{"lineNumber":88,"author":{"gitID":"yungyung04"},"content":"                .asList(\"Bob\", \"alice@email.com\", \"Main\", \"Street\"));"},{"lineNumber":89,"author":{"gitID":"yungyung04"},"content":"        assertFalse(predicate.test(new TuteeBuilder().withEducationLevel(VALID_EDUCATION_LEVEL_AMY)"},{"lineNumber":90,"author":{"gitID":"yungyung04"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"},{"lineNumber":91,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":92,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"yungyung04"},"content":"}"}],"authorContributionMap":{"ChoChihTun":2,"yungyung04":81,"-":10}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.tutee.EducationLevel;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.tutee.Grade;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.tutee.School;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.tutee.Subject;"},{"lineNumber":18,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.model.tutee.Tutee;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        descriptor.setPhone(person.getPhone());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        descriptor.setEmail(person.getEmail());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        descriptor.setAddress(person.getAddress());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        descriptor.setTags(person.getTags());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"ChoChihTun"},"content":"    //@@author ChoChihTun"},{"lineNumber":48,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"ChoChihTun"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code tutee}\u0027s details"},{"lineNumber":50,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"ChoChihTun"},"content":"    public EditPersonDescriptorBuilder(Tutee tutee) {"},{"lineNumber":52,"author":{"gitID":"ChoChihTun"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":53,"author":{"gitID":"ChoChihTun"},"content":"        descriptor.setName(tutee.getName());"},{"lineNumber":54,"author":{"gitID":"ChoChihTun"},"content":"        descriptor.setPhone(tutee.getPhone());"},{"lineNumber":55,"author":{"gitID":"ChoChihTun"},"content":"        descriptor.setEmail(tutee.getEmail());"},{"lineNumber":56,"author":{"gitID":"ChoChihTun"},"content":"        descriptor.setAddress(tutee.getAddress());"},{"lineNumber":57,"author":{"gitID":"ChoChihTun"},"content":"        descriptor.setSubject(tutee.getSubject());"},{"lineNumber":58,"author":{"gitID":"ChoChihTun"},"content":"        descriptor.setGrade(tutee.getGrade());"},{"lineNumber":59,"author":{"gitID":"ChoChihTun"},"content":"        descriptor.setEducationLevel(tutee.getEducationLevel());"},{"lineNumber":60,"author":{"gitID":"ChoChihTun"},"content":"        descriptor.setSchool(tutee.getSchool());"},{"lineNumber":61,"author":{"gitID":"ChoChihTun"},"content":"        descriptor.setTags(tutee.getTags());"},{"lineNumber":62,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"ChoChihTun"},"content":"    //@@author"},{"lineNumber":64,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"ChoChihTun"},"content":"    //@@author ChoChihTun"},{"lineNumber":98,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"ChoChihTun"},"content":"     * Sets the {@code Subject} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":100,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"ChoChihTun"},"content":"    public EditPersonDescriptorBuilder withSubject(String subject) {"},{"lineNumber":102,"author":{"gitID":"ChoChihTun"},"content":"        descriptor.setSubject(new Subject(subject));"},{"lineNumber":103,"author":{"gitID":"ChoChihTun"},"content":"        return this;"},{"lineNumber":104,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":106,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"ChoChihTun"},"content":"     * Sets the {@code Grade} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":108,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"ChoChihTun"},"content":"    public EditPersonDescriptorBuilder withGrade(String grade) {"},{"lineNumber":110,"author":{"gitID":"ChoChihTun"},"content":"        descriptor.setGrade(new Grade(grade));"},{"lineNumber":111,"author":{"gitID":"ChoChihTun"},"content":"        return this;"},{"lineNumber":112,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":114,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":115,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"ChoChihTun"},"content":"     * Sets the {@code EducationLevel} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":117,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"ChoChihTun"},"content":"    public EditPersonDescriptorBuilder withEducationLevel(String educationLevel) {"},{"lineNumber":119,"author":{"gitID":"ChoChihTun"},"content":"        descriptor.setEducationLevel(new EducationLevel(educationLevel));"},{"lineNumber":120,"author":{"gitID":"ChoChihTun"},"content":"        return this;"},{"lineNumber":121,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":123,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":124,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"ChoChihTun"},"content":"     * Sets the {@code School} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":126,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"ChoChihTun"},"content":"    public EditPersonDescriptorBuilder withSchool(String school) {"},{"lineNumber":128,"author":{"gitID":"ChoChihTun"},"content":"        descriptor.setSchool(new School(school));"},{"lineNumber":129,"author":{"gitID":"ChoChihTun"},"content":"        return this;"},{"lineNumber":130,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"ChoChihTun"},"content":"    //@@author"},{"lineNumber":132,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * that we are building."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        return descriptor;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ChoChihTun":55,"-":91}},{"path":"src/test/java/seedu/address/model/tutee/SubjectContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_AMY;"},{"lineNumber":6,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.tutee.SubjectContainsKeywordsPredicate;"},{"lineNumber":15,"author":{"gitID":"yungyung04"},"content":"import seedu.address.testutil.TuteeBuilder;"},{"lineNumber":16,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":17,"author":{"gitID":"yungyung04"},"content":"//@@author yungyung04"},{"lineNumber":18,"author":{"gitID":"yungyung04"},"content":"public class SubjectContainsKeywordsPredicateTest {"},{"lineNumber":19,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":20,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"yungyung04"},"content":"    public void equals() {"},{"lineNumber":22,"author":{"gitID":"yungyung04"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":23,"author":{"gitID":"yungyung04"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":24,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":25,"author":{"gitID":"yungyung04"},"content":"        SubjectContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":26,"author":{"gitID":"yungyung04"},"content":"                new SubjectContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":27,"author":{"gitID":"yungyung04"},"content":"        SubjectContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":28,"author":{"gitID":"yungyung04"},"content":"                new SubjectContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":29,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":30,"author":{"gitID":"yungyung04"},"content":"        // same object -\u003e returns true"},{"lineNumber":31,"author":{"gitID":"yungyung04"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":32,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":33,"author":{"gitID":"yungyung04"},"content":"        // same values -\u003e returns true"},{"lineNumber":34,"author":{"gitID":"yungyung04"},"content":"        SubjectContainsKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":35,"author":{"gitID":"yungyung04"},"content":"                new SubjectContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":36,"author":{"gitID":"yungyung04"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":37,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":38,"author":{"gitID":"yungyung04"},"content":"        // different types -\u003e returns false"},{"lineNumber":39,"author":{"gitID":"yungyung04"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":40,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":41,"author":{"gitID":"yungyung04"},"content":"        // null -\u003e returns false"},{"lineNumber":42,"author":{"gitID":"yungyung04"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":43,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":44,"author":{"gitID":"yungyung04"},"content":"        // different subjects -\u003e returns false"},{"lineNumber":45,"author":{"gitID":"yungyung04"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":46,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":48,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"yungyung04"},"content":"    public void test_subjectContainsKeywords_returnsTrue() {"},{"lineNumber":50,"author":{"gitID":"yungyung04"},"content":"        // One keyword"},{"lineNumber":51,"author":{"gitID":"yungyung04"},"content":"        SubjectContainsKeywordsPredicate predicate \u003d"},{"lineNumber":52,"author":{"gitID":"yungyung04"},"content":"                new SubjectContainsKeywordsPredicate(Collections.singletonList(VALID_SUBJECT_AMY));"},{"lineNumber":53,"author":{"gitID":"yungyung04"},"content":"        assertTrue(predicate.test(new TuteeBuilder().withSubject(VALID_SUBJECT_AMY).build()));"},{"lineNumber":54,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":55,"author":{"gitID":"yungyung04"},"content":"        // Only one matching keyword"},{"lineNumber":56,"author":{"gitID":"yungyung04"},"content":"        predicate \u003d new SubjectContainsKeywordsPredicate(Arrays.asList(VALID_SUBJECT_AMY, VALID_SUBJECT_BOB));"},{"lineNumber":57,"author":{"gitID":"yungyung04"},"content":"        assertTrue(predicate.test(new TuteeBuilder().withSubject(VALID_SUBJECT_AMY).build()));"},{"lineNumber":58,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":59,"author":{"gitID":"yungyung04"},"content":"        // Mixed-case keywords"},{"lineNumber":60,"author":{"gitID":"yungyung04"},"content":"        predicate \u003d new SubjectContainsKeywordsPredicate(Arrays.asList(\"MatheMAtics\"));"},{"lineNumber":61,"author":{"gitID":"yungyung04"},"content":"        assertTrue(predicate.test(new TuteeBuilder().withSubject(\"mathematics\").build()));"},{"lineNumber":62,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":64,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"yungyung04"},"content":"    public void test_subjectDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":66,"author":{"gitID":"yungyung04"},"content":"        // Zero keywords"},{"lineNumber":67,"author":{"gitID":"yungyung04"},"content":"        SubjectContainsKeywordsPredicate predicate \u003d"},{"lineNumber":68,"author":{"gitID":"yungyung04"},"content":"                new SubjectContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":69,"author":{"gitID":"yungyung04"},"content":"        assertFalse(predicate.test(new TuteeBuilder().withSubject(VALID_SUBJECT_AMY).build()));"},{"lineNumber":70,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":71,"author":{"gitID":"yungyung04"},"content":"        // Non-matching keyword"},{"lineNumber":72,"author":{"gitID":"yungyung04"},"content":"        predicate \u003d new SubjectContainsKeywordsPredicate(Arrays.asList(VALID_SUBJECT_BOB));"},{"lineNumber":73,"author":{"gitID":"yungyung04"},"content":"        assertFalse(predicate.test(new TuteeBuilder().withSubject(VALID_SUBJECT_AMY).build()));"},{"lineNumber":74,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":75,"author":{"gitID":"yungyung04"},"content":"        // Keywords match education level, grade and school, but does not match subject"},{"lineNumber":76,"author":{"gitID":"yungyung04"},"content":"        predicate \u003d new SubjectContainsKeywordsPredicate(Arrays.asList(\"B\", \"primary\", \"school\"));"},{"lineNumber":77,"author":{"gitID":"yungyung04"},"content":"        assertFalse(predicate.test(new TuteeBuilder().withSubject(VALID_SUBJECT_AMY).withGrade(\"B\")"},{"lineNumber":78,"author":{"gitID":"yungyung04"},"content":"                .withEducationLevel(\"primary\").withSchool(\"school\").build()));"},{"lineNumber":79,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":80,"author":{"gitID":"yungyung04"},"content":"        // Keywords match email and address, but does not match subject"},{"lineNumber":81,"author":{"gitID":"yungyung04"},"content":"        predicate \u003d new SubjectContainsKeywordsPredicate(Arrays"},{"lineNumber":82,"author":{"gitID":"yungyung04"},"content":"                .asList(VALID_SUBJECT_BOB, \"alice@email.com\", \"Main\", \"Street\"));"},{"lineNumber":83,"author":{"gitID":"yungyung04"},"content":"        assertFalse(predicate.test(new TuteeBuilder().withSubject(VALID_SUBJECT_AMY)"},{"lineNumber":84,"author":{"gitID":"yungyung04"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"},{"lineNumber":85,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":86,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"yungyung04"},"content":"}"}],"authorContributionMap":{"ChoChihTun":2,"yungyung04":74,"-":11}},{"path":"src/test/java/seedu/address/testutil/TaskUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"yungyung04"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":3,"author":{"gitID":"ChoChihTun"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":4,"author":{"gitID":"ChoChihTun"},"content":"import java.time.format.ResolverStyle;"},{"lineNumber":5,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":6,"author":{"gitID":"yungyung04"},"content":"import seedu.address.logic.commands.AddPersonalTaskCommand;"},{"lineNumber":7,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.Task;"},{"lineNumber":8,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":9,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":10,"author":{"gitID":"yungyung04"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"yungyung04"},"content":" * A utility class for Task."},{"lineNumber":12,"author":{"gitID":"yungyung04"},"content":" */"},{"lineNumber":13,"author":{"gitID":"a-shakra"},"content":"//@@author a-shakra"},{"lineNumber":14,"author":{"gitID":"a-shakra"},"content":"public class TaskUtil {"},{"lineNumber":15,"author":{"gitID":"a-shakra"},"content":"    public static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd/MM/uuuu HH:mm\")"},{"lineNumber":16,"author":{"gitID":"a-shakra"},"content":"            .withResolverStyle(ResolverStyle.STRICT);"},{"lineNumber":17,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":18,"author":{"gitID":"a-shakra"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"a-shakra"},"content":"     * Returns an add personal task command string for adding the {@code task}."},{"lineNumber":20,"author":{"gitID":"a-shakra"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"a-shakra"},"content":"    public static String getAddPersonalTaskCommand(Task task) {"},{"lineNumber":22,"author":{"gitID":"a-shakra"},"content":"        return AddPersonalTaskCommand.COMMAND_WORD + \" \" + getPersonalTaskDetails(task);"},{"lineNumber":23,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":25,"author":{"gitID":"a-shakra"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"a-shakra"},"content":"     * Returns the part of command string for the given {@code task}\u0027s details."},{"lineNumber":27,"author":{"gitID":"a-shakra"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"a-shakra"},"content":"    public static String getPersonalTaskDetails(Task task) {"},{"lineNumber":29,"author":{"gitID":"a-shakra"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":30,"author":{"gitID":"a-shakra"},"content":"        sb.append(task.getStringTaskDateTime() + \" \");"},{"lineNumber":31,"author":{"gitID":"a-shakra"},"content":"        sb.append(task.getDuration() + \" \");"},{"lineNumber":32,"author":{"gitID":"a-shakra"},"content":"        sb.append(task.getDescription() + \" \");"},{"lineNumber":33,"author":{"gitID":"a-shakra"},"content":"        return sb.toString();"},{"lineNumber":34,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":36,"author":{"gitID":"a-shakra"},"content":"}"}],"authorContributionMap":{"yungyung04":9,"ChoChihTun":3,"a-shakra":24}},{"path":"src/test/java/seedu/address/testutil/AddressBookBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":5,"author":{"gitID":"a-shakra"},"content":"import seedu.address.model.Task;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.model.task.exceptions.TimingClashException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * A utility class to help with building Addressbook objects."},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":14,"author":{"gitID":"-"},"content":" *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").withTag(\"Friend\").build();}"},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class AddressBookBuilder {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private AddressBook addressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public AddressBookBuilder() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        addressBook \u003d new AddressBook();"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public AddressBookBuilder(AddressBook addressBook) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.addressBook \u003d addressBook;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Adds a new {@code Person} to the {@code AddressBook} that we are building."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public AddressBookBuilder withPerson(Person person) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            addressBook.addPerson(person);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"person is expected to be unique.\");"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Parses {@code tagName} into a {@code Tag} and adds it to the {@code AddressBook} that we are building."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public AddressBookBuilder withTag(String tagName) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            addressBook.addTag(new Tag(tagName));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"tagName is expected to be valid.\");"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"a-shakra"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"a-shakra"},"content":"     * Adds a new {@code Task} to the {@code AddressBook} that we are building."},{"lineNumber":54,"author":{"gitID":"a-shakra"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"a-shakra"},"content":"    public AddressBookBuilder withTask(Task task) {"},{"lineNumber":56,"author":{"gitID":"a-shakra"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"a-shakra"},"content":"            addressBook.addTask(task);"},{"lineNumber":58,"author":{"gitID":"a-shakra"},"content":"        } catch (TimingClashException tce) {"},{"lineNumber":59,"author":{"gitID":"a-shakra"},"content":"            throw new IllegalArgumentException(\"Timing clash has occurred\");"},{"lineNumber":60,"author":{"gitID":"a-shakra"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"a-shakra"},"content":"        return this;"},{"lineNumber":62,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public AddressBook build() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ChoChihTun":1,"a-shakra":13,"-":53}},{"path":"src/test/java/seedu/address/testutil/TuteeBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tutee.EducationLevel;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.tutee.Grade;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.tutee.School;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.tutee.Subject;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.tutee.Tutee;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":16,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":17,"author":{"gitID":"ChoChihTun"},"content":"//@@author ChoChihTun"},{"lineNumber":18,"author":{"gitID":"ChoChihTun"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"ChoChihTun"},"content":" * A utility class to help with building Tutee objects."},{"lineNumber":20,"author":{"gitID":"ChoChihTun"},"content":" */"},{"lineNumber":21,"author":{"gitID":"ChoChihTun"},"content":"public class TuteeBuilder extends PersonBuilder {"},{"lineNumber":22,"author":{"gitID":"ChoChihTun"},"content":"    public static final String DEFAULT_SUBJECT \u003d \"mathematics\";"},{"lineNumber":23,"author":{"gitID":"ChoChihTun"},"content":"    public static final String DEFAULT_GRADE \u003d \"C+\";"},{"lineNumber":24,"author":{"gitID":"ChoChihTun"},"content":"    public static final String DEFAULT_EDUCATION_LEVEL \u003d \"secondary\";"},{"lineNumber":25,"author":{"gitID":"ChoChihTun"},"content":"    public static final String DEFAULT_SCHOOL \u003d \"fengshan secondary school\";"},{"lineNumber":26,"author":{"gitID":"ChoChihTun"},"content":"    public static final String TUTEE_TAG \u003d \"Tutee\";"},{"lineNumber":27,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":28,"author":{"gitID":"ChoChihTun"},"content":"    private Subject subject;"},{"lineNumber":29,"author":{"gitID":"ChoChihTun"},"content":"    private Grade grade;"},{"lineNumber":30,"author":{"gitID":"ChoChihTun"},"content":"    private EducationLevel educationLevel;"},{"lineNumber":31,"author":{"gitID":"ChoChihTun"},"content":"    private School school;"},{"lineNumber":32,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":33,"author":{"gitID":"ChoChihTun"},"content":"    public TuteeBuilder() {"},{"lineNumber":34,"author":{"gitID":"ChoChihTun"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":35,"author":{"gitID":"ChoChihTun"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":36,"author":{"gitID":"ChoChihTun"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":37,"author":{"gitID":"ChoChihTun"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":38,"author":{"gitID":"ChoChihTun"},"content":"        subject \u003d new Subject(DEFAULT_SUBJECT);"},{"lineNumber":39,"author":{"gitID":"ChoChihTun"},"content":"        grade \u003d new Grade(DEFAULT_GRADE);"},{"lineNumber":40,"author":{"gitID":"ChoChihTun"},"content":"        educationLevel \u003d new EducationLevel(DEFAULT_EDUCATION_LEVEL);"},{"lineNumber":41,"author":{"gitID":"ChoChihTun"},"content":"        school \u003d new School(DEFAULT_SCHOOL);"},{"lineNumber":42,"author":{"gitID":"ChoChihTun"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":43,"author":{"gitID":"ChoChihTun"},"content":"        tags.add(new Tag(TUTEE_TAG));"},{"lineNumber":44,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":46,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"ChoChihTun"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":48,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"ChoChihTun"},"content":"    public TuteeBuilder(Tutee tuteeToCopy) {"},{"lineNumber":50,"author":{"gitID":"ChoChihTun"},"content":"        name \u003d tuteeToCopy.getName();"},{"lineNumber":51,"author":{"gitID":"ChoChihTun"},"content":"        phone \u003d tuteeToCopy.getPhone();"},{"lineNumber":52,"author":{"gitID":"ChoChihTun"},"content":"        email \u003d tuteeToCopy.getEmail();"},{"lineNumber":53,"author":{"gitID":"ChoChihTun"},"content":"        address \u003d tuteeToCopy.getAddress();"},{"lineNumber":54,"author":{"gitID":"ChoChihTun"},"content":"        subject \u003d tuteeToCopy.getSubject();"},{"lineNumber":55,"author":{"gitID":"ChoChihTun"},"content":"        grade \u003d tuteeToCopy.getGrade();"},{"lineNumber":56,"author":{"gitID":"ChoChihTun"},"content":"        educationLevel \u003d tuteeToCopy.getEducationLevel();"},{"lineNumber":57,"author":{"gitID":"ChoChihTun"},"content":"        school \u003d tuteeToCopy.getSchool();"},{"lineNumber":58,"author":{"gitID":"ChoChihTun"},"content":"        tags \u003d new HashSet\u003c\u003e(tuteeToCopy.getTags());"},{"lineNumber":59,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":61,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"ChoChihTun"},"content":"     * Sets the {@code Name} of the {@code Tutee} that we are building."},{"lineNumber":63,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"ChoChihTun"},"content":"    public TuteeBuilder withName(String name) {"},{"lineNumber":65,"author":{"gitID":"ChoChihTun"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":66,"author":{"gitID":"ChoChihTun"},"content":"        return this;"},{"lineNumber":67,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":69,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"ChoChihTun"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Tutee} that we are building."},{"lineNumber":71,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"ChoChihTun"},"content":"    public TuteeBuilder withTags(String ... tags) {"},{"lineNumber":73,"author":{"gitID":"ChoChihTun"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":74,"author":{"gitID":"ChoChihTun"},"content":"        this.tags.add(new Tag(\"Tutee\"));"},{"lineNumber":75,"author":{"gitID":"ChoChihTun"},"content":"        return this;"},{"lineNumber":76,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":78,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"ChoChihTun"},"content":"     * Sets the {@code Address} of the {@code Tutee} that we are building."},{"lineNumber":80,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"ChoChihTun"},"content":"    public TuteeBuilder withAddress(String address) {"},{"lineNumber":82,"author":{"gitID":"ChoChihTun"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":83,"author":{"gitID":"ChoChihTun"},"content":"        return this;"},{"lineNumber":84,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":86,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"ChoChihTun"},"content":"     * Sets the {@code Phone} of the {@code Tutee} that we are building."},{"lineNumber":88,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"ChoChihTun"},"content":"    public TuteeBuilder withPhone(String phone) {"},{"lineNumber":90,"author":{"gitID":"ChoChihTun"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":91,"author":{"gitID":"ChoChihTun"},"content":"        return this;"},{"lineNumber":92,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":94,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"ChoChihTun"},"content":"     * Sets the {@code Email} of the {@code Tutee} that we are building."},{"lineNumber":96,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"ChoChihTun"},"content":"    public TuteeBuilder withEmail(String email) {"},{"lineNumber":98,"author":{"gitID":"ChoChihTun"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":99,"author":{"gitID":"ChoChihTun"},"content":"        return this;"},{"lineNumber":100,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":102,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"ChoChihTun"},"content":"     * Sets the {@code Subject} of the {@code Tutee} that we are building."},{"lineNumber":104,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"ChoChihTun"},"content":"    public TuteeBuilder withSubject(String subject) {"},{"lineNumber":106,"author":{"gitID":"ChoChihTun"},"content":"        this.subject \u003d new Subject(subject);"},{"lineNumber":107,"author":{"gitID":"ChoChihTun"},"content":"        return this;"},{"lineNumber":108,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"ChoChihTun"},"content":"     * Sets the {@code Grade} of the {@code Tutee} that we are building."},{"lineNumber":111,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"ChoChihTun"},"content":"    public TuteeBuilder withGrade(String grade) {"},{"lineNumber":113,"author":{"gitID":"ChoChihTun"},"content":"        this.grade \u003d new Grade(grade);"},{"lineNumber":114,"author":{"gitID":"ChoChihTun"},"content":"        return this;"},{"lineNumber":115,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"ChoChihTun"},"content":"     * Sets the {@code EducationLevel} of the {@code Tutee} that we are building."},{"lineNumber":118,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"ChoChihTun"},"content":"    public TuteeBuilder withEducationLevel(String educationLevel) {"},{"lineNumber":120,"author":{"gitID":"ChoChihTun"},"content":"        this.educationLevel \u003d new EducationLevel(educationLevel);"},{"lineNumber":121,"author":{"gitID":"ChoChihTun"},"content":"        return this;"},{"lineNumber":122,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"ChoChihTun"},"content":"     * Sets the {@code School} of the {@code Tutee} that we are building."},{"lineNumber":125,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"ChoChihTun"},"content":"    public TuteeBuilder withSchool(String school) {"},{"lineNumber":127,"author":{"gitID":"ChoChihTun"},"content":"        this.school \u003d new School(school);"},{"lineNumber":128,"author":{"gitID":"ChoChihTun"},"content":"        return this;"},{"lineNumber":129,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":131,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":132,"author":{"gitID":"ChoChihTun"},"content":"    public Tutee build() {"},{"lineNumber":133,"author":{"gitID":"ChoChihTun"},"content":"        return new Tutee(name, phone, email, address, subject, grade, educationLevel, school, tags);"},{"lineNumber":134,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":136,"author":{"gitID":"ChoChihTun"},"content":"}"}],"authorContributionMap":{"ChoChihTun":122,"-":14}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class TypicalIndexes {"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"},{"lineNumber":12,"author":{"gitID":"yungyung04"},"content":"    public static final Index INDEX_FIRST_TASK \u003d Index.fromOneBased(1);"},{"lineNumber":13,"author":{"gitID":"yungyung04"},"content":"    public static final Index INDEX_SECOND_TASK \u003d Index.fromOneBased(2);"},{"lineNumber":14,"author":{"gitID":"yungyung04"},"content":"    public static final Index INDEX_THIRD_TASK \u003d Index.fromOneBased(3);"},{"lineNumber":15,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yungyung04":3,"-":12}},{"path":"src/test/java/seedu/address/model/TaskContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"a-shakra"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"a-shakra"},"content":"import seedu.address.testutil.TaskBuilder;"},{"lineNumber":13,"author":{"gitID":"a-shakra"},"content":"//@@author a-shakra"},{"lineNumber":14,"author":{"gitID":"a-shakra"},"content":"public class TaskContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":16,"author":{"gitID":"a-shakra"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"a-shakra"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitID":"a-shakra"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitID":"a-shakra"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":21,"author":{"gitID":"a-shakra"},"content":"        TaskContainsKeywordsPredicate firstPredicate \u003d new TaskContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":22,"author":{"gitID":"a-shakra"},"content":"        TaskContainsKeywordsPredicate secondPredicate \u003d new TaskContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":24,"author":{"gitID":"a-shakra"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitID":"a-shakra"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":26,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":27,"author":{"gitID":"a-shakra"},"content":"        // same values -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"a-shakra"},"content":"        TaskContainsKeywordsPredicate firstPredicateCopy \u003d new TaskContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":29,"author":{"gitID":"a-shakra"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":30,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":31,"author":{"gitID":"a-shakra"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitID":"a-shakra"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":33,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":34,"author":{"gitID":"a-shakra"},"content":"        // null -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"a-shakra"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":36,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":37,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":38,"author":{"gitID":"a-shakra"},"content":"        // different person -\u003e returns false"},{"lineNumber":39,"author":{"gitID":"a-shakra"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":40,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":42,"author":{"gitID":"a-shakra"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"a-shakra"},"content":"    public void test_taskContainsKeywords_returnsTrue() {"},{"lineNumber":44,"author":{"gitID":"a-shakra"},"content":"        // One keyword"},{"lineNumber":45,"author":{"gitID":"a-shakra"},"content":"        TaskContainsKeywordsPredicate predicate \u003d new TaskContainsKeywordsPredicate(Collections"},{"lineNumber":46,"author":{"gitID":"a-shakra"},"content":"                .singletonList(\"exampleTask1\"));"},{"lineNumber":47,"author":{"gitID":"a-shakra"},"content":"        assertTrue(predicate.test(new TaskBuilder().withDescription(\"exampleTask1\").buildPersonalTask()));"},{"lineNumber":48,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":49,"author":{"gitID":"a-shakra"},"content":"        // Multiple keywords"},{"lineNumber":50,"author":{"gitID":"a-shakra"},"content":"        predicate \u003d new TaskContainsKeywordsPredicate(Arrays.asList(\"exampleTask1\", \"exampleTask2\"));"},{"lineNumber":51,"author":{"gitID":"a-shakra"},"content":"        assertTrue(predicate.test(new TaskBuilder().withDescription(\"exampleTask1 exampleTask2\").buildPersonalTask()));"},{"lineNumber":52,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":53,"author":{"gitID":"a-shakra"},"content":"        // Only one matching keyword"},{"lineNumber":54,"author":{"gitID":"a-shakra"},"content":"        predicate \u003d new TaskContainsKeywordsPredicate(Arrays.asList(\"exampleTask2\", \"exampleTask3\"));"},{"lineNumber":55,"author":{"gitID":"a-shakra"},"content":"        assertTrue(predicate.test(new TaskBuilder().withDescription(\"exampleTask1 exampleTask3\").buildPersonalTask()));"},{"lineNumber":56,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":57,"author":{"gitID":"a-shakra"},"content":"        // Mixed-case keywords"},{"lineNumber":58,"author":{"gitID":"a-shakra"},"content":"        predicate \u003d new TaskContainsKeywordsPredicate(Arrays.asList(\"eXampleTask1\", \"ExampleTask2\"));"},{"lineNumber":59,"author":{"gitID":"a-shakra"},"content":"        assertTrue(predicate.test(new TaskBuilder().withDescription(\"exampleTask1 exampleTask2\").buildPersonalTask()));"},{"lineNumber":60,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"a-shakra"},"content":"}"},{"lineNumber":62,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":63,"author":{"gitID":"a-shakra"},"content":""}],"authorContributionMap":{"a-shakra":53,"-":10}},{"path":"src/test/java/seedu/address/testutil/TaskBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"yungyung04"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":3,"author":{"gitID":"yungyung04"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitID":"a-shakra"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitID":"a-shakra"},"content":"import java.time.format.ResolverStyle;"},{"lineNumber":6,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":7,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.personal.PersonalTask;"},{"lineNumber":8,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.model.tutee.TuitionTask;"},{"lineNumber":9,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":10,"author":{"gitID":"yungyung04"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"a-shakra"},"content":" * A utility class to help with building PersonalTask and TuitionTask objects"},{"lineNumber":12,"author":{"gitID":"yungyung04"},"content":" */"},{"lineNumber":13,"author":{"gitID":"a-shakra"},"content":"//@@author a-shakra"},{"lineNumber":14,"author":{"gitID":"a-shakra"},"content":"public class TaskBuilder {"},{"lineNumber":15,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":16,"author":{"gitID":"a-shakra"},"content":"    public static final String DEFAULT_TUTEE_NAME \u003d \"Alice Pauline\";"},{"lineNumber":17,"author":{"gitID":"a-shakra"},"content":"    public static final String DEFAULT_DATE \u003d \"12/12/2016\";"},{"lineNumber":18,"author":{"gitID":"a-shakra"},"content":"    public static final String DEFAULT_TIME \u003d \"12:00\";"},{"lineNumber":19,"author":{"gitID":"a-shakra"},"content":"    public static final String DEFAULT_DATE_TIME \u003d DEFAULT_DATE + \" \" + DEFAULT_TIME;"},{"lineNumber":20,"author":{"gitID":"a-shakra"},"content":"    public static final String DEFAULT_DURATION \u003d \"1h30m\";"},{"lineNumber":21,"author":{"gitID":"a-shakra"},"content":"    public static final String DEFAULT_DESCRIPTION \u003d \"Alice\u0027s homework\";"},{"lineNumber":22,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":23,"author":{"gitID":"a-shakra"},"content":"    private static final String EMPTY_STRING \u003d \"\";"},{"lineNumber":24,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":25,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":26,"author":{"gitID":"a-shakra"},"content":"    protected String name;"},{"lineNumber":27,"author":{"gitID":"a-shakra"},"content":"    protected String description;"},{"lineNumber":28,"author":{"gitID":"a-shakra"},"content":"    protected String duration;"},{"lineNumber":29,"author":{"gitID":"a-shakra"},"content":"    protected LocalDateTime dateAndTime;"},{"lineNumber":30,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":31,"author":{"gitID":"a-shakra"},"content":"    private DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/uuuu HH:mm\")"},{"lineNumber":32,"author":{"gitID":"a-shakra"},"content":"            .withResolverStyle(ResolverStyle.STRICT);"},{"lineNumber":33,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":34,"author":{"gitID":"a-shakra"},"content":"    public TaskBuilder() {"},{"lineNumber":35,"author":{"gitID":"a-shakra"},"content":"        name \u003d DEFAULT_TUTEE_NAME;"},{"lineNumber":36,"author":{"gitID":"a-shakra"},"content":"        description \u003d DEFAULT_DESCRIPTION;"},{"lineNumber":37,"author":{"gitID":"a-shakra"},"content":"        duration \u003d DEFAULT_DURATION;"},{"lineNumber":38,"author":{"gitID":"a-shakra"},"content":"        dateAndTime \u003d LocalDateTime.parse(DEFAULT_DATE_TIME, formatter);"},{"lineNumber":39,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":41,"author":{"gitID":"a-shakra"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"a-shakra"},"content":"     * Initializes the TaskBuilder with the data of a given {@code Tuition Task}."},{"lineNumber":43,"author":{"gitID":"a-shakra"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"a-shakra"},"content":"    public TaskBuilder(TuitionTask taskToCopy) {"},{"lineNumber":45,"author":{"gitID":"a-shakra"},"content":"        name \u003d taskToCopy.getPerson();"},{"lineNumber":46,"author":{"gitID":"a-shakra"},"content":"        description \u003d taskToCopy.getDescription();"},{"lineNumber":47,"author":{"gitID":"a-shakra"},"content":"        duration \u003d taskToCopy.getDuration();"},{"lineNumber":48,"author":{"gitID":"a-shakra"},"content":"        dateAndTime \u003d taskToCopy.getTaskDateTime();"},{"lineNumber":49,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":51,"author":{"gitID":"a-shakra"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"a-shakra"},"content":"     * Sets the {@code name} of the {@code Task} that we are building."},{"lineNumber":53,"author":{"gitID":"a-shakra"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"a-shakra"},"content":"    public TaskBuilder withTuteeName(String name) {"},{"lineNumber":55,"author":{"gitID":"a-shakra"},"content":"        this.name \u003d name;"},{"lineNumber":56,"author":{"gitID":"a-shakra"},"content":"        return this;"},{"lineNumber":57,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":59,"author":{"gitID":"a-shakra"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"a-shakra"},"content":"     * Sets the {@code description} of the {@code Task} that we are building."},{"lineNumber":61,"author":{"gitID":"a-shakra"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"a-shakra"},"content":"    public TaskBuilder withDescription(String description) {"},{"lineNumber":63,"author":{"gitID":"a-shakra"},"content":"        this.description \u003d description;"},{"lineNumber":64,"author":{"gitID":"a-shakra"},"content":"        return this;"},{"lineNumber":65,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":67,"author":{"gitID":"a-shakra"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"a-shakra"},"content":"     * Sets the {@code description} of the {@code Task} that we are building to be empty."},{"lineNumber":69,"author":{"gitID":"a-shakra"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"a-shakra"},"content":"    public TaskBuilder withoutDescription() {"},{"lineNumber":71,"author":{"gitID":"a-shakra"},"content":"        this.description \u003d EMPTY_STRING;"},{"lineNumber":72,"author":{"gitID":"a-shakra"},"content":"        return this;"},{"lineNumber":73,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":75,"author":{"gitID":"a-shakra"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"a-shakra"},"content":"     * Sets the {@code duration} of the {@code Task} that we are building."},{"lineNumber":77,"author":{"gitID":"a-shakra"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"a-shakra"},"content":"    public TaskBuilder withDuration(String duration) {"},{"lineNumber":79,"author":{"gitID":"a-shakra"},"content":"        this.duration \u003d duration;"},{"lineNumber":80,"author":{"gitID":"a-shakra"},"content":"        return this;"},{"lineNumber":81,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":83,"author":{"gitID":"a-shakra"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"a-shakra"},"content":"     * Sets the {@code DateAndTime} of the {@code Task} that we are building."},{"lineNumber":85,"author":{"gitID":"a-shakra"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":87,"author":{"gitID":"a-shakra"},"content":"    public TaskBuilder withDateTime(String dateAndTime) {"},{"lineNumber":88,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":89,"author":{"gitID":"a-shakra"},"content":"        this.dateAndTime \u003d LocalDateTime.parse(dateAndTime, formatter);"},{"lineNumber":90,"author":{"gitID":"a-shakra"},"content":"        return this;"},{"lineNumber":91,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"a-shakra"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"a-shakra"},"content":"     * Ideally, this return variable should be made to a Task class or this function should return"},{"lineNumber":94,"author":{"gitID":"a-shakra"},"content":"     * a tuition task as well"},{"lineNumber":95,"author":{"gitID":"a-shakra"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":97,"author":{"gitID":"a-shakra"},"content":"    public PersonalTask buildPersonalTask() {"},{"lineNumber":98,"author":{"gitID":"a-shakra"},"content":"        return new PersonalTask(dateAndTime, duration, description);"},{"lineNumber":99,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"a-shakra"},"content":"    public TuitionTask buildTuitionTask() {"},{"lineNumber":101,"author":{"gitID":"a-shakra"},"content":"        return new TuitionTask(name, dateAndTime, duration, description);"},{"lineNumber":102,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"a-shakra"},"content":"}"}],"authorContributionMap":{"yungyung04":8,"ChoChihTun":1,"a-shakra":94}},{"path":"src/test/java/seedu/address/testutil/TuteeUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"ChoChihTun"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EDUCATION_LEVEL;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHOOL;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddTuteeCommand;"},{"lineNumber":14,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.model.tutee.Tutee;"},{"lineNumber":15,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":16,"author":{"gitID":"ChoChihTun"},"content":"//@@author ChoChihTun"},{"lineNumber":17,"author":{"gitID":"ChoChihTun"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"ChoChihTun"},"content":" * A utility class for Tutee."},{"lineNumber":19,"author":{"gitID":"ChoChihTun"},"content":" */"},{"lineNumber":20,"author":{"gitID":"ChoChihTun"},"content":"public class TuteeUtil {"},{"lineNumber":21,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":22,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"ChoChihTun"},"content":"     * Returns an addtutee command string for adding the {@code tutee}."},{"lineNumber":24,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"ChoChihTun"},"content":"    public static String getAddTuteeCommand(Tutee tutee) {"},{"lineNumber":26,"author":{"gitID":"ChoChihTun"},"content":"        return AddTuteeCommand.COMMAND_WORD + \" \" + getTuteeDetails(tutee);"},{"lineNumber":27,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":29,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"ChoChihTun"},"content":"     * Returns the part of command string for the given {@code tutee}\u0027s details."},{"lineNumber":31,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"ChoChihTun"},"content":"    public static String getTuteeDetails(Tutee tutee) {"},{"lineNumber":33,"author":{"gitID":"ChoChihTun"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":34,"author":{"gitID":"ChoChihTun"},"content":"        sb.append(PREFIX_NAME + tutee.getName().fullName + \" \");"},{"lineNumber":35,"author":{"gitID":"ChoChihTun"},"content":"        sb.append(PREFIX_PHONE + tutee.getPhone().value + \" \");"},{"lineNumber":36,"author":{"gitID":"ChoChihTun"},"content":"        sb.append(PREFIX_EMAIL + tutee.getEmail().value + \" \");"},{"lineNumber":37,"author":{"gitID":"ChoChihTun"},"content":"        sb.append(PREFIX_ADDRESS + tutee.getAddress().value + \" \");"},{"lineNumber":38,"author":{"gitID":"ChoChihTun"},"content":"        sb.append(PREFIX_SUBJECT + tutee.getSubject().subject + \" \");"},{"lineNumber":39,"author":{"gitID":"ChoChihTun"},"content":"        sb.append(PREFIX_GRADE + tutee.getGrade().grade + \" \");"},{"lineNumber":40,"author":{"gitID":"ChoChihTun"},"content":"        sb.append(PREFIX_EDUCATION_LEVEL + tutee.getEducationLevel().educationLevel + \" \");"},{"lineNumber":41,"author":{"gitID":"ChoChihTun"},"content":"        sb.append(PREFIX_SCHOOL + tutee.getSchool().school + \" \");"},{"lineNumber":42,"author":{"gitID":"ChoChihTun"},"content":"        tutee.getTags().stream().forEach("},{"lineNumber":43,"author":{"gitID":"ChoChihTun"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":44,"author":{"gitID":"ChoChihTun"},"content":"        );"},{"lineNumber":45,"author":{"gitID":"ChoChihTun"},"content":"        return sb.toString();"},{"lineNumber":46,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"ChoChihTun"},"content":"}"}],"authorContributionMap":{"ChoChihTun":36,"-":11}},{"path":"src/test/java/seedu/address/testutil/typicaladdressbook/TypicalPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"yungyung04"},"content":"package seedu.address.testutil.typicaladdressbook;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_ROBERT;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":8,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_ROBERT;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":11,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_ROBERT;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":14,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_ROBERT;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"yungyung04"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class TypicalPersons {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            .withPhone(\"85355255\")"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            .withTags(\"friends\").build();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":35,"author":{"gitID":"raymond511"},"content":"            .withPhone(\"98765432\").withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":36,"author":{"gitID":"raymond511"},"content":"            .withEmail(\"johnd@example.com\").withTags(\"owesMoney\", \"friends\").build();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"},{"lineNumber":39,"author":{"gitID":"raymond511"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":40,"author":{"gitID":"raymond511"},"content":"            .withEmail(\"cornelia@example.com\")"},{"lineNumber":41,"author":{"gitID":"raymond511"},"content":"            .withAddress(\"10th street\").build();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            .build();"},{"lineNumber":61,"author":{"gitID":"yungyung04"},"content":"    public static final Person ROBERT \u003d new PersonBuilder().withName(VALID_NAME_ROBERT).withPhone(VALID_PHONE_ROBERT)"},{"lineNumber":62,"author":{"gitID":"yungyung04"},"content":"            .withEmail(VALID_EMAIL_ROBERT).withAddress(VALID_ADDRESS_ROBERT).build();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yungyung04":8,"-":58,"raymond511":5}},{"path":"src/test/java/seedu/address/testutil/typicaladdressbook/TypicalTutees.java","lines":[{"lineNumber":1,"author":{"gitID":"yungyung04"},"content":"package seedu.address.testutil.typicaladdressbook;"},{"lineNumber":2,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EDUCATION_LEVEL_AMY;"},{"lineNumber":6,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EDUCATION_LEVEL_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":9,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_AMY;"},{"lineNumber":10,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GRADE_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":15,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHOOL_AMY;"},{"lineNumber":16,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHOOL_BOB;"},{"lineNumber":17,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_AMY;"},{"lineNumber":18,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SUBJECT_BOB;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":21,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":22,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalPersons.DANIEL;"},{"lineNumber":23,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":29,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.model.tutee.Tutee;"},{"lineNumber":30,"author":{"gitID":"yungyung04"},"content":"import seedu.address.testutil.TuteeBuilder;"},{"lineNumber":31,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":32,"author":{"gitID":"ChoChihTun"},"content":"//@@author ChoChihTun"},{"lineNumber":33,"author":{"gitID":"ChoChihTun"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"ChoChihTun"},"content":" * A utility class containing a list of {@code Tutee} objects to be used in tests."},{"lineNumber":35,"author":{"gitID":"ChoChihTun"},"content":" */"},{"lineNumber":36,"author":{"gitID":"ChoChihTun"},"content":"public class TypicalTutees {"},{"lineNumber":37,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":38,"author":{"gitID":"ChoChihTun"},"content":"    // Manually added"},{"lineNumber":39,"author":{"gitID":"ChoChihTun"},"content":"    public static final Tutee ALICETUTEE \u003d new TuteeBuilder().withName(\"Alice Pauline\")"},{"lineNumber":40,"author":{"gitID":"ChoChihTun"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@gmail.com\")"},{"lineNumber":41,"author":{"gitID":"ChoChihTun"},"content":"            .withPhone(\"85355255\").withSubject(\"mathematics\").withGrade(\"C+\").withEducationLevel(\"secondary\")"},{"lineNumber":42,"author":{"gitID":"ChoChihTun"},"content":"            .withSchool(\"fengshan secondary school\").withTags(\"friends\").build();"},{"lineNumber":43,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":44,"author":{"gitID":"ChoChihTun"},"content":"    public static final Tutee CARLTUTEE \u003d new TuteeBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":45,"author":{"gitID":"ChoChihTun"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withSubject(\"history\").withGrade(\"B\")"},{"lineNumber":46,"author":{"gitID":"ChoChihTun"},"content":"            .withEducationLevel(\"secondary\").withSchool(\"wall street high school\").build();"},{"lineNumber":47,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":48,"author":{"gitID":"ChoChihTun"},"content":"    public static final Tutee HOONTUTEE \u003d new TuteeBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":49,"author":{"gitID":"ChoChihTun"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withSubject(\"economics\").withGrade(\"A1\")"},{"lineNumber":50,"author":{"gitID":"ChoChihTun"},"content":"            .withEducationLevel(\"secondary\").withSchool(\"changi secondary school\").build();"},{"lineNumber":51,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":52,"author":{"gitID":"ChoChihTun"},"content":"    public static final Tutee IDATUTEE \u003d new TuteeBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":53,"author":{"gitID":"ChoChihTun"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withSubject(\"english\").withGrade(\"B3\")"},{"lineNumber":54,"author":{"gitID":"ChoChihTun"},"content":"            .withEducationLevel(\"secondary\").withSchool(\"tanjong katong secondary school\").build();"},{"lineNumber":55,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":56,"author":{"gitID":"ChoChihTun"},"content":"    // Manually added - Tutee\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":57,"author":{"gitID":"ChoChihTun"},"content":"    public static final Tutee AMYTUTEE \u003d new TuteeBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":58,"author":{"gitID":"ChoChihTun"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withSubject(VALID_SUBJECT_AMY)"},{"lineNumber":59,"author":{"gitID":"ChoChihTun"},"content":"            .withGrade(VALID_GRADE_AMY).withEducationLevel(VALID_EDUCATION_LEVEL_AMY).withSchool(VALID_SCHOOL_AMY)"},{"lineNumber":60,"author":{"gitID":"ChoChihTun"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":61,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":62,"author":{"gitID":"ChoChihTun"},"content":"    public static final Tutee BOBTUTEE \u003d new TuteeBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":63,"author":{"gitID":"ChoChihTun"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withSubject(VALID_SUBJECT_BOB)"},{"lineNumber":64,"author":{"gitID":"ChoChihTun"},"content":"            .withGrade(VALID_GRADE_BOB).withEducationLevel(VALID_EDUCATION_LEVEL_BOB).withSchool(VALID_SCHOOL_BOB)"},{"lineNumber":65,"author":{"gitID":"ChoChihTun"},"content":"            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":66,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":67,"author":{"gitID":"ChoChihTun"},"content":"    private TypicalTutees() {} // prevents instantiation"},{"lineNumber":68,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":69,"author":{"gitID":"ChoChihTun"},"content":"    public static List\u003cPerson\u003e getTypicalPersonsAndTutees() {"},{"lineNumber":70,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":71,"author":{"gitID":"ChoChihTun"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICETUTEE, DANIEL, AMYTUTEE, BOBTUTEE));"},{"lineNumber":72,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"ChoChihTun"},"content":"}"}],"authorContributionMap":{"yungyung04":4,"ChoChihTun":55,"-":14}},{"path":"src/test/java/seedu/address/model/person/PersonSortUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"yungyung04"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":3,"author":{"gitID":"yungyung04"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_EDUCATION_LEVEL;"},{"lineNumber":5,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_GRADE;"},{"lineNumber":6,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_NAME;"},{"lineNumber":7,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_SCHOOL;"},{"lineNumber":8,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_SUBJECT;"},{"lineNumber":9,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.compareNameLexicographically;"},{"lineNumber":10,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.getComparator;"},{"lineNumber":11,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":12,"author":{"gitID":"yungyung04"},"content":"import java.util.Comparator;"},{"lineNumber":13,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":14,"author":{"gitID":"yungyung04"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"yungyung04"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":17,"author":{"gitID":"yungyung04"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":19,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.tutee.Tutee;"},{"lineNumber":20,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":21,"author":{"gitID":"yungyung04"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":22,"author":{"gitID":"yungyung04"},"content":"import seedu.address.testutil.TuteeBuilder;"},{"lineNumber":23,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":24,"author":{"gitID":"yungyung04"},"content":"//@@author yungyung04"},{"lineNumber":25,"author":{"gitID":"yungyung04"},"content":"public class PersonSortUtilTest {"},{"lineNumber":26,"author":{"gitID":"yungyung04"},"content":"    private static final String LOWER_ORDER \u003d \"a\";"},{"lineNumber":27,"author":{"gitID":"yungyung04"},"content":"    private static final String MIDDLE_ORDER \u003d \"b\";"},{"lineNumber":28,"author":{"gitID":"yungyung04"},"content":"    private static final String HIGHER_ORDER \u003d \"c\";"},{"lineNumber":29,"author":{"gitID":"yungyung04"},"content":"    private static final String EDUCATION_LEVEL_PRIMARY \u003d \"primary\";"},{"lineNumber":30,"author":{"gitID":"yungyung04"},"content":"    private static final String EDUCATION_LEVEL_SECONDARY \u003d \"secondary\";"},{"lineNumber":31,"author":{"gitID":"yungyung04"},"content":"    private static final String EDUCATION_LEVEL_JUNIOR_COLLEGE \u003d \"junior college\";"},{"lineNumber":32,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":33,"author":{"gitID":"yungyung04"},"content":"    @Rule"},{"lineNumber":34,"author":{"gitID":"yungyung04"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":35,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":36,"author":{"gitID":"yungyung04"},"content":"    private Person lowerOrder \u003d new TuteeBuilder().withName(MIDDLE_ORDER).withEducationLevel(EDUCATION_LEVEL_PRIMARY)"},{"lineNumber":37,"author":{"gitID":"yungyung04"},"content":"            .withGrade(MIDDLE_ORDER).withSchool(MIDDLE_ORDER).withSubject(MIDDLE_ORDER).build();"},{"lineNumber":38,"author":{"gitID":"yungyung04"},"content":"    private Person higherOrder \u003d new TuteeBuilder().withName(HIGHER_ORDER).withEducationLevel(EDUCATION_LEVEL_SECONDARY)"},{"lineNumber":39,"author":{"gitID":"yungyung04"},"content":"            .withGrade(HIGHER_ORDER).withSchool(HIGHER_ORDER).withSubject(HIGHER_ORDER).build();"},{"lineNumber":40,"author":{"gitID":"yungyung04"},"content":"    private Person versatileOrder;"},{"lineNumber":41,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":42,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"yungyung04"},"content":"    public void getComparator_validNameCategory_compareSuccessfully() {"},{"lineNumber":44,"author":{"gitID":"yungyung04"},"content":"        //all first person\u0027s categories have lower lexicographical order"},{"lineNumber":45,"author":{"gitID":"yungyung04"},"content":"        Comparator\u003cPerson\u003e comparator \u003d getComparator(CATEGORY_NAME);"},{"lineNumber":46,"author":{"gitID":"yungyung04"},"content":"        int expected \u003d lowerOrder.getName().fullName.compareTo(higherOrder.getName().fullName);"},{"lineNumber":47,"author":{"gitID":"yungyung04"},"content":"        assertCompareSuccessfully(comparator, expected, lowerOrder, higherOrder);"},{"lineNumber":48,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":49,"author":{"gitID":"yungyung04"},"content":"        //first person\u0027s name has lower lexicographical order and the other categories have equal order"},{"lineNumber":50,"author":{"gitID":"yungyung04"},"content":"        versatileOrder \u003d new TuteeBuilder((Tutee) lowerOrder).withName(HIGHER_ORDER).build();"},{"lineNumber":51,"author":{"gitID":"yungyung04"},"content":"        expected \u003d lowerOrder.getName().fullName.compareTo(versatileOrder.getName().fullName);"},{"lineNumber":52,"author":{"gitID":"yungyung04"},"content":"        assertCompareSuccessfully(comparator, expected, lowerOrder, versatileOrder);"},{"lineNumber":53,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":54,"author":{"gitID":"yungyung04"},"content":"        //first person\u0027s name has lower lexicographical order but the other categories have higher order"},{"lineNumber":55,"author":{"gitID":"yungyung04"},"content":"        versatileOrder \u003d new TuteeBuilder((Tutee) higherOrder).withEducationLevel(EDUCATION_LEVEL_JUNIOR_COLLEGE)"},{"lineNumber":56,"author":{"gitID":"yungyung04"},"content":"                .withGrade(LOWER_ORDER).withSchool(LOWER_ORDER).withSubject(LOWER_ORDER).build();"},{"lineNumber":57,"author":{"gitID":"yungyung04"},"content":"        expected \u003d lowerOrder.getName().fullName.compareTo(versatileOrder.getName().fullName);"},{"lineNumber":58,"author":{"gitID":"yungyung04"},"content":"        assertCompareSuccessfully(comparator, expected, lowerOrder, versatileOrder);"},{"lineNumber":59,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":60,"author":{"gitID":"yungyung04"},"content":"        //first person\u0027s name has equal lexicographical order"},{"lineNumber":61,"author":{"gitID":"yungyung04"},"content":"        expected \u003d lowerOrder.getName().fullName.compareTo(lowerOrder.getName().fullName);"},{"lineNumber":62,"author":{"gitID":"yungyung04"},"content":"        assertCompareSuccessfully(comparator, expected, lowerOrder, lowerOrder);"},{"lineNumber":63,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":64,"author":{"gitID":"yungyung04"},"content":"        //first person\u0027s name has higher lexicographical order"},{"lineNumber":65,"author":{"gitID":"yungyung04"},"content":"        expected \u003d higherOrder.getName().fullName.compareTo(lowerOrder.getName().fullName);"},{"lineNumber":66,"author":{"gitID":"yungyung04"},"content":"        assertCompareSuccessfully(comparator, expected, higherOrder, lowerOrder);"},{"lineNumber":67,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":69,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"yungyung04"},"content":"    public void getComparator_validEducationLevelCategory_compareSuccessfully() {"},{"lineNumber":71,"author":{"gitID":"yungyung04"},"content":"        //all first person\u0027s categories have lower lexicographical order"},{"lineNumber":72,"author":{"gitID":"yungyung04"},"content":"        Comparator\u003cPerson\u003e comparator \u003d getComparator(CATEGORY_EDUCATION_LEVEL);"},{"lineNumber":73,"author":{"gitID":"yungyung04"},"content":"        int expected \u003d ((Tutee) lowerOrder).getEducationLevel().toString()"},{"lineNumber":74,"author":{"gitID":"yungyung04"},"content":"                .compareTo(((Tutee) higherOrder).getEducationLevel().toString());"},{"lineNumber":75,"author":{"gitID":"yungyung04"},"content":"        assertCompareSuccessfully(comparator, expected, lowerOrder, higherOrder);"},{"lineNumber":76,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":77,"author":{"gitID":"yungyung04"},"content":"        //first person\u0027s education level has lower lexicographical order and the other categories have equal order"},{"lineNumber":78,"author":{"gitID":"yungyung04"},"content":"        versatileOrder \u003d new TuteeBuilder((Tutee) lowerOrder).withEducationLevel(EDUCATION_LEVEL_SECONDARY).build();"},{"lineNumber":79,"author":{"gitID":"yungyung04"},"content":"        expected \u003d ((Tutee) lowerOrder).getEducationLevel().toString()"},{"lineNumber":80,"author":{"gitID":"yungyung04"},"content":"                .compareTo(((Tutee) versatileOrder).getEducationLevel().toString());"},{"lineNumber":81,"author":{"gitID":"yungyung04"},"content":"        assertCompareSuccessfully(comparator, expected, lowerOrder, versatileOrder);"},{"lineNumber":82,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":83,"author":{"gitID":"yungyung04"},"content":"        //first person\u0027s education level has lower lexicographical order but the other categories have higher order"},{"lineNumber":84,"author":{"gitID":"yungyung04"},"content":"        versatileOrder \u003d new TuteeBuilder((Tutee) higherOrder).withName(LOWER_ORDER)"},{"lineNumber":85,"author":{"gitID":"yungyung04"},"content":"                .withGrade(LOWER_ORDER).withSchool(LOWER_ORDER).withSubject(LOWER_ORDER).build();"},{"lineNumber":86,"author":{"gitID":"yungyung04"},"content":"        expected \u003d ((Tutee) lowerOrder).getEducationLevel().toString()"},{"lineNumber":87,"author":{"gitID":"yungyung04"},"content":"                .compareTo(((Tutee) versatileOrder).getEducationLevel().toString());"},{"lineNumber":88,"author":{"gitID":"yungyung04"},"content":"        assertCompareSuccessfully(comparator, expected, lowerOrder, versatileOrder);"},{"lineNumber":89,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":90,"author":{"gitID":"yungyung04"},"content":"        //first person\u0027s education level has equal lexicographical order"},{"lineNumber":91,"author":{"gitID":"yungyung04"},"content":"        expected \u003d ((Tutee) lowerOrder).getEducationLevel().toString()"},{"lineNumber":92,"author":{"gitID":"yungyung04"},"content":"                .compareTo(((Tutee) lowerOrder).getEducationLevel().toString());"},{"lineNumber":93,"author":{"gitID":"yungyung04"},"content":"        assertCompareSuccessfully(comparator, expected, lowerOrder, lowerOrder);"},{"lineNumber":94,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":95,"author":{"gitID":"yungyung04"},"content":"        //first person\u0027s education level has higher lexicographical order"},{"lineNumber":96,"author":{"gitID":"yungyung04"},"content":"        expected \u003d ((Tutee) higherOrder).getEducationLevel().toString()"},{"lineNumber":97,"author":{"gitID":"yungyung04"},"content":"                .compareTo(((Tutee) lowerOrder).getEducationLevel().toString());"},{"lineNumber":98,"author":{"gitID":"yungyung04"},"content":"        assertCompareSuccessfully(comparator, expected, higherOrder, lowerOrder);"},{"lineNumber":99,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":101,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"yungyung04"},"content":"    public void getComparator_validGradeCategory_compareSuccessfully() {"},{"lineNumber":103,"author":{"gitID":"yungyung04"},"content":"        //all first person\u0027s categories have lower lexicographical order"},{"lineNumber":104,"author":{"gitID":"yungyung04"},"content":"        Comparator\u003cPerson\u003e comparator \u003d getComparator(CATEGORY_GRADE);"},{"lineNumber":105,"author":{"gitID":"yungyung04"},"content":"        int expected \u003d ((Tutee) lowerOrder).getGrade().toString()"},{"lineNumber":106,"author":{"gitID":"yungyung04"},"content":"                .compareTo(((Tutee) higherOrder).getGrade().toString());"},{"lineNumber":107,"author":{"gitID":"yungyung04"},"content":"        assertCompareSuccessfully(comparator, expected, lowerOrder, higherOrder);"},{"lineNumber":108,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":109,"author":{"gitID":"yungyung04"},"content":"        //first person\u0027s grade has lower lexicographical order and the other categories have equal order"},{"lineNumber":110,"author":{"gitID":"yungyung04"},"content":"        versatileOrder \u003d new TuteeBuilder((Tutee) lowerOrder).withGrade(HIGHER_ORDER).build();"},{"lineNumber":111,"author":{"gitID":"yungyung04"},"content":"        expected \u003d ((Tutee) lowerOrder).getGrade().toString()"},{"lineNumber":112,"author":{"gitID":"yungyung04"},"content":"                .compareTo(((Tutee) versatileOrder).getGrade().toString());"},{"lineNumber":113,"author":{"gitID":"yungyung04"},"content":"        assertCompareSuccessfully(comparator, expected, lowerOrder, versatileOrder);"},{"lineNumber":114,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":115,"author":{"gitID":"yungyung04"},"content":"        //first person\u0027s grade has lower lexicographical order but the other categories have higher order"},{"lineNumber":116,"author":{"gitID":"yungyung04"},"content":"        versatileOrder \u003d new TuteeBuilder((Tutee) higherOrder).withEducationLevel(EDUCATION_LEVEL_JUNIOR_COLLEGE)"},{"lineNumber":117,"author":{"gitID":"yungyung04"},"content":"                .withName(LOWER_ORDER).withSchool(LOWER_ORDER).withSubject(LOWER_ORDER).build();"},{"lineNumber":118,"author":{"gitID":"yungyung04"},"content":"        expected \u003d ((Tutee) lowerOrder).getGrade().toString()"},{"lineNumber":119,"author":{"gitID":"yungyung04"},"content":"                .compareTo(((Tutee) versatileOrder).getGrade().toString());"},{"lineNumber":120,"author":{"gitID":"yungyung04"},"content":"        assertCompareSuccessfully(comparator, expected, lowerOrder, versatileOrder);"},{"lineNumber":121,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":122,"author":{"gitID":"yungyung04"},"content":"        //first person\u0027s grade has equal lexicographical order"},{"lineNumber":123,"author":{"gitID":"yungyung04"},"content":"        expected \u003d ((Tutee) lowerOrder).getGrade().toString()"},{"lineNumber":124,"author":{"gitID":"yungyung04"},"content":"                .compareTo(((Tutee) lowerOrder).getGrade().toString());"},{"lineNumber":125,"author":{"gitID":"yungyung04"},"content":"        assertCompareSuccessfully(comparator, expected, lowerOrder, lowerOrder);"},{"lineNumber":126,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":127,"author":{"gitID":"yungyung04"},"content":"        //first person\u0027s grade has higher lexicographical order"},{"lineNumber":128,"author":{"gitID":"yungyung04"},"content":"        expected \u003d ((Tutee) higherOrder).getGrade().toString()"},{"lineNumber":129,"author":{"gitID":"yungyung04"},"content":"                .compareTo(((Tutee) lowerOrder).getGrade().toString());"},{"lineNumber":130,"author":{"gitID":"yungyung04"},"content":"        assertCompareSuccessfully(comparator, expected, higherOrder, lowerOrder);"},{"lineNumber":131,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":133,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":134,"author":{"gitID":"yungyung04"},"content":"    public void getComparator_validSchoolCategory_compareSuccessfully() {"},{"lineNumber":135,"author":{"gitID":"yungyung04"},"content":"        //all first person\u0027s categories have lower lexicographical order"},{"lineNumber":136,"author":{"gitID":"yungyung04"},"content":"        Comparator\u003cPerson\u003e comparator \u003d getComparator(CATEGORY_SCHOOL);"},{"lineNumber":137,"author":{"gitID":"yungyung04"},"content":"        int expected \u003d ((Tutee) lowerOrder).getSchool().toString()"},{"lineNumber":138,"author":{"gitID":"yungyung04"},"content":"                .compareTo(((Tutee) higherOrder).getSchool().toString());"},{"lineNumber":139,"author":{"gitID":"yungyung04"},"content":"        assertCompareSuccessfully(comparator, expected, lowerOrder, higherOrder);"},{"lineNumber":140,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":141,"author":{"gitID":"yungyung04"},"content":"        //first person\u0027s school has lower lexicographical order and the other categories have equal order"},{"lineNumber":142,"author":{"gitID":"yungyung04"},"content":"        versatileOrder \u003d new TuteeBuilder((Tutee) lowerOrder).withSchool(HIGHER_ORDER).build();"},{"lineNumber":143,"author":{"gitID":"yungyung04"},"content":"        expected \u003d ((Tutee) lowerOrder).getSchool().toString()"},{"lineNumber":144,"author":{"gitID":"yungyung04"},"content":"                .compareTo(((Tutee) versatileOrder).getSchool().toString());"},{"lineNumber":145,"author":{"gitID":"yungyung04"},"content":"        assertCompareSuccessfully(comparator, expected, lowerOrder, versatileOrder);"},{"lineNumber":146,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":147,"author":{"gitID":"yungyung04"},"content":"        //first person\u0027s school has lower lexicographical order but the other categories have higher order"},{"lineNumber":148,"author":{"gitID":"yungyung04"},"content":"        versatileOrder \u003d new TuteeBuilder((Tutee) higherOrder).withEducationLevel(EDUCATION_LEVEL_JUNIOR_COLLEGE)"},{"lineNumber":149,"author":{"gitID":"yungyung04"},"content":"                .withName(LOWER_ORDER).withGrade(LOWER_ORDER).withSubject(LOWER_ORDER).build();"},{"lineNumber":150,"author":{"gitID":"yungyung04"},"content":"        expected \u003d ((Tutee) lowerOrder).getSchool().toString()"},{"lineNumber":151,"author":{"gitID":"yungyung04"},"content":"                .compareTo(((Tutee) versatileOrder).getSchool().toString());"},{"lineNumber":152,"author":{"gitID":"yungyung04"},"content":"        assertCompareSuccessfully(comparator, expected, lowerOrder, versatileOrder);"},{"lineNumber":153,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":154,"author":{"gitID":"yungyung04"},"content":"        //first person\u0027s school has equal lexicographical order"},{"lineNumber":155,"author":{"gitID":"yungyung04"},"content":"        expected \u003d ((Tutee) lowerOrder).getSchool().toString()"},{"lineNumber":156,"author":{"gitID":"yungyung04"},"content":"                .compareTo(((Tutee) lowerOrder).getSchool().toString());"},{"lineNumber":157,"author":{"gitID":"yungyung04"},"content":"        assertCompareSuccessfully(comparator, expected, lowerOrder, lowerOrder);"},{"lineNumber":158,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":159,"author":{"gitID":"yungyung04"},"content":"        //first person\u0027s school has higher lexicographical order"},{"lineNumber":160,"author":{"gitID":"yungyung04"},"content":"        expected \u003d ((Tutee) higherOrder).getSchool().toString()"},{"lineNumber":161,"author":{"gitID":"yungyung04"},"content":"                .compareTo(((Tutee) lowerOrder).getSchool().toString());"},{"lineNumber":162,"author":{"gitID":"yungyung04"},"content":"        assertCompareSuccessfully(comparator, expected, higherOrder, lowerOrder);"},{"lineNumber":163,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":165,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":166,"author":{"gitID":"yungyung04"},"content":"    public void getComparator_validSubjectCategory_compareSuccessfully() {"},{"lineNumber":167,"author":{"gitID":"yungyung04"},"content":"        //all first person\u0027s categories have lower lexicographical order"},{"lineNumber":168,"author":{"gitID":"yungyung04"},"content":"        Comparator\u003cPerson\u003e comparator \u003d getComparator(CATEGORY_SUBJECT);"},{"lineNumber":169,"author":{"gitID":"yungyung04"},"content":"        int expected \u003d ((Tutee) lowerOrder).getSubject().toString()"},{"lineNumber":170,"author":{"gitID":"yungyung04"},"content":"                .compareTo(((Tutee) higherOrder).getSubject().toString());"},{"lineNumber":171,"author":{"gitID":"yungyung04"},"content":"        assertCompareSuccessfully(comparator, expected, lowerOrder, higherOrder);"},{"lineNumber":172,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":173,"author":{"gitID":"yungyung04"},"content":"        //first person\u0027s subject has lower lexicographical order and the other categories have equal order"},{"lineNumber":174,"author":{"gitID":"yungyung04"},"content":"        versatileOrder \u003d new TuteeBuilder((Tutee) lowerOrder).withSubject(HIGHER_ORDER).build();"},{"lineNumber":175,"author":{"gitID":"yungyung04"},"content":"        expected \u003d ((Tutee) lowerOrder).getSubject().toString()"},{"lineNumber":176,"author":{"gitID":"yungyung04"},"content":"                .compareTo(((Tutee) versatileOrder).getSubject().toString());"},{"lineNumber":177,"author":{"gitID":"yungyung04"},"content":"        assertCompareSuccessfully(comparator, expected, lowerOrder, versatileOrder);"},{"lineNumber":178,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":179,"author":{"gitID":"yungyung04"},"content":"        //first person\u0027s subject has lower lexicographical order but the other categories have higher order"},{"lineNumber":180,"author":{"gitID":"yungyung04"},"content":"        versatileOrder \u003d new TuteeBuilder((Tutee) higherOrder).withEducationLevel(EDUCATION_LEVEL_JUNIOR_COLLEGE)"},{"lineNumber":181,"author":{"gitID":"yungyung04"},"content":"                .withName(LOWER_ORDER).withGrade(LOWER_ORDER).withSchool(LOWER_ORDER).build();"},{"lineNumber":182,"author":{"gitID":"yungyung04"},"content":"        expected \u003d ((Tutee) lowerOrder).getSubject().toString()"},{"lineNumber":183,"author":{"gitID":"yungyung04"},"content":"                .compareTo(((Tutee) versatileOrder).getSubject().toString());"},{"lineNumber":184,"author":{"gitID":"yungyung04"},"content":"        assertCompareSuccessfully(comparator, expected, lowerOrder, versatileOrder);"},{"lineNumber":185,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":186,"author":{"gitID":"yungyung04"},"content":"        //first person\u0027s subject has equal lexicographical order"},{"lineNumber":187,"author":{"gitID":"yungyung04"},"content":"        expected \u003d ((Tutee) lowerOrder).getSubject().toString()"},{"lineNumber":188,"author":{"gitID":"yungyung04"},"content":"                .compareTo(((Tutee) lowerOrder).getSubject().toString());"},{"lineNumber":189,"author":{"gitID":"yungyung04"},"content":"        assertCompareSuccessfully(comparator, expected, lowerOrder, lowerOrder);"},{"lineNumber":190,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":191,"author":{"gitID":"yungyung04"},"content":"        //first person\u0027s subject has higher lexicographical order"},{"lineNumber":192,"author":{"gitID":"yungyung04"},"content":"        expected \u003d ((Tutee) higherOrder).getSubject().toString()"},{"lineNumber":193,"author":{"gitID":"yungyung04"},"content":"                .compareTo(((Tutee) lowerOrder).getSubject().toString());"},{"lineNumber":194,"author":{"gitID":"yungyung04"},"content":"        assertCompareSuccessfully(comparator, expected, higherOrder, lowerOrder);"},{"lineNumber":195,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":197,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":198,"author":{"gitID":"yungyung04"},"content":"    public void getComparator_invalidCategory_assertionErrorHappen() {"},{"lineNumber":199,"author":{"gitID":"yungyung04"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":200,"author":{"gitID":"yungyung04"},"content":"        Comparator\u003cPerson\u003e comparator \u003d getComparator(\"email\");"},{"lineNumber":201,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":203,"author":{"gitID":"yungyung04"},"content":"    @Test"},{"lineNumber":204,"author":{"gitID":"yungyung04"},"content":"    public void compareNameLexicographically_validInput_compareSuccessfully() {"},{"lineNumber":205,"author":{"gitID":"yungyung04"},"content":"        lowerOrder \u003d new PersonBuilder().withName(\"Albert\").build();"},{"lineNumber":206,"author":{"gitID":"yungyung04"},"content":"        higherOrder \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":207,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":208,"author":{"gitID":"yungyung04"},"content":"        //first person has lower lexicographical order"},{"lineNumber":209,"author":{"gitID":"yungyung04"},"content":"        int expected \u003d PersonSortUtil.compareNameLexicographically(lowerOrder, higherOrder);"},{"lineNumber":210,"author":{"gitID":"yungyung04"},"content":"        int actual \u003d lowerOrder.getName().fullName.compareToIgnoreCase(higherOrder.getName().fullName);"},{"lineNumber":211,"author":{"gitID":"yungyung04"},"content":"        assertEquals(expected, actual);"},{"lineNumber":212,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":213,"author":{"gitID":"yungyung04"},"content":"        //first person has higher lexicographical order"},{"lineNumber":214,"author":{"gitID":"yungyung04"},"content":"        expected \u003d PersonSortUtil.compareNameLexicographically(higherOrder, lowerOrder);"},{"lineNumber":215,"author":{"gitID":"yungyung04"},"content":"        actual \u003d higherOrder.getName().fullName.compareToIgnoreCase(lowerOrder.getName().fullName);"},{"lineNumber":216,"author":{"gitID":"yungyung04"},"content":"        assertEquals(expected, actual);"},{"lineNumber":217,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":218,"author":{"gitID":"yungyung04"},"content":"        //both have exactly same name"},{"lineNumber":219,"author":{"gitID":"yungyung04"},"content":"        Person lowerOrderCopy \u003d new PersonBuilder(lowerOrder).build();"},{"lineNumber":220,"author":{"gitID":"yungyung04"},"content":"        expected \u003d PersonSortUtil.compareNameLexicographically(lowerOrder, lowerOrderCopy);"},{"lineNumber":221,"author":{"gitID":"yungyung04"},"content":"        actual \u003d lowerOrder.getName().fullName.compareToIgnoreCase(lowerOrderCopy.getName().fullName);"},{"lineNumber":222,"author":{"gitID":"yungyung04"},"content":"        assertEquals(expected, actual);"},{"lineNumber":223,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":224,"author":{"gitID":"yungyung04"},"content":"        //both have same name with different cases -\u003e treated as 2 same namess"},{"lineNumber":225,"author":{"gitID":"yungyung04"},"content":"        higherOrder \u003d new PersonBuilder(lowerOrder).withName(\"ALBERT\").build();"},{"lineNumber":226,"author":{"gitID":"yungyung04"},"content":"        int expectedFromSameName \u003d expected;"},{"lineNumber":227,"author":{"gitID":"yungyung04"},"content":"        int expectedFromDiffName \u003d compareNameLexicographically(lowerOrder, higherOrder);"},{"lineNumber":228,"author":{"gitID":"yungyung04"},"content":"        assertEquals(expectedFromSameName, expectedFromDiffName);"},{"lineNumber":229,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":231,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":232,"author":{"gitID":"yungyung04"},"content":"     * Checks whether comparator is able to perform the desired comparison."},{"lineNumber":233,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":234,"author":{"gitID":"yungyung04"},"content":"    private void assertCompareSuccessfully(Comparator\u003cPerson\u003e comparator, int expected, Person first, Person second) {"},{"lineNumber":235,"author":{"gitID":"yungyung04"},"content":"        int actual \u003d comparator.compare(first, second);"},{"lineNumber":236,"author":{"gitID":"yungyung04"},"content":"        assertEquals(expected, actual);"},{"lineNumber":237,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"yungyung04"},"content":"}"}],"authorContributionMap":{"yungyung04":238}},{"path":"src/test/java/seedu/address/testutil/typicaladdressbook/TypicalAddressBookCompiler.java","lines":[{"lineNumber":1,"author":{"gitID":"yungyung04"},"content":"package seedu.address.testutil.typicaladdressbook;"},{"lineNumber":2,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":3,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalPersons.getTypicalPersons;"},{"lineNumber":4,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalTasks.getTypicalTasks;"},{"lineNumber":5,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.testutil.typicaladdressbook.TypicalTutees.getTypicalPersonsAndTutees;"},{"lineNumber":6,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":7,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":8,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.Task;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":11,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.model.task.exceptions.TimingClashException;"},{"lineNumber":12,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":13,"author":{"gitID":"yungyung04"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"yungyung04"},"content":" * A utility class providing an Address Book with its initialized data in order to support tests."},{"lineNumber":15,"author":{"gitID":"yungyung04"},"content":" */"},{"lineNumber":16,"author":{"gitID":"yungyung04"},"content":"public class TypicalAddressBookCompiler {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"yungyung04"},"content":"     * Returns an {@code AddressBook} with all the typical persons and typical tasks."},{"lineNumber":19,"author":{"gitID":"yungyung04"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"yungyung04"},"content":"    public static AddressBook getTypicalAddressBook1() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"yungyung04"},"content":"        for (Task task : getTypicalTasks()) {"},{"lineNumber":31,"author":{"gitID":"yungyung04"},"content":"            try {"},{"lineNumber":32,"author":{"gitID":"yungyung04"},"content":"                ab.addTask(task);"},{"lineNumber":33,"author":{"gitID":"yungyung04"},"content":"            } catch (TimingClashException tce) {"},{"lineNumber":34,"author":{"gitID":"yungyung04"},"content":"                throw new AssertionError(\"time clash is not possible\");"},{"lineNumber":35,"author":{"gitID":"yungyung04"},"content":"            }"},{"lineNumber":36,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"ChoChihTun"},"content":"        return ab;"},{"lineNumber":38,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":40,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"yungyung04"},"content":"     * Returns an {@code AddressBook} with all the typical persons \u0026 tutees and typical tasks."},{"lineNumber":42,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"yungyung04"},"content":"    public static AddressBook getTypicalAddressBook2() {"},{"lineNumber":44,"author":{"gitID":"yungyung04"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":45,"author":{"gitID":"yungyung04"},"content":"        for (Person person : getTypicalPersonsAndTutees()) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"yungyung04"},"content":"        for (Task task : getTypicalTasks()) {"},{"lineNumber":53,"author":{"gitID":"yungyung04"},"content":"            try {"},{"lineNumber":54,"author":{"gitID":"yungyung04"},"content":"                ab.addTask(task);"},{"lineNumber":55,"author":{"gitID":"yungyung04"},"content":"            } catch (TimingClashException tce) {"},{"lineNumber":56,"author":{"gitID":"yungyung04"},"content":"                throw new AssertionError(\"time clash is not possible\");"},{"lineNumber":57,"author":{"gitID":"yungyung04"},"content":"            }"},{"lineNumber":58,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"ChoChihTun"},"content":"        return ab;"},{"lineNumber":60,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"yungyung04"},"content":"}"}],"authorContributionMap":{"yungyung04":36,"ChoChihTun":8,"-":17}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class PersonBuilder {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"ChoChihTun"},"content":"    protected Name name;"},{"lineNumber":26,"author":{"gitID":"ChoChihTun"},"content":"    protected Phone phone;"},{"lineNumber":27,"author":{"gitID":"ChoChihTun"},"content":"    protected Email email;"},{"lineNumber":28,"author":{"gitID":"ChoChihTun"},"content":"    protected Address address;"},{"lineNumber":29,"author":{"gitID":"ChoChihTun"},"content":"    protected Set\u003cTag\u003e tags;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public Person build() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return new Person(name, phone, email, address, tags);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ChoChihTun":5,"-":89}},{"path":"src/test/java/seedu/address/testutil/typicaladdressbook/TypicalTasks.java","lines":[{"lineNumber":1,"author":{"gitID":"yungyung04"},"content":"package seedu.address.testutil.typicaladdressbook;"},{"lineNumber":2,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":3,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_TIME_AMY;"},{"lineNumber":4,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_TIME_BOB;"},{"lineNumber":5,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DURATION_AMY;"},{"lineNumber":6,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DURATION_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":8,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_DESC_AMY;"},{"lineNumber":10,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_DESC_BOB;"},{"lineNumber":11,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.Task;"},{"lineNumber":17,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.personal.PersonalTask;"},{"lineNumber":18,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.tutee.TuitionTask;"},{"lineNumber":19,"author":{"gitID":"yungyung04"},"content":"import seedu.address.testutil.TaskBuilder;"},{"lineNumber":20,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":21,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":22,"author":{"gitID":"yungyung04"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"yungyung04"},"content":" * A utility class containing a list of {@code Task} objects to be used in tests."},{"lineNumber":24,"author":{"gitID":"yungyung04"},"content":" */"},{"lineNumber":25,"author":{"gitID":"yungyung04"},"content":"public class TypicalTasks {"},{"lineNumber":26,"author":{"gitID":"yungyung04"},"content":"    public static final TuitionTask TASK_ALICE \u003d new TaskBuilder().withTuteeName(\"Alice Pauline\")"},{"lineNumber":27,"author":{"gitID":"yungyung04"},"content":"            .withDateTime(\"01/10/2018 10:00\").withDuration(\"2h0m\").withDescription(\"Calculus page 24\")"},{"lineNumber":28,"author":{"gitID":"yungyung04"},"content":"            .buildTuitionTask();"},{"lineNumber":29,"author":{"gitID":"yungyung04"},"content":"    public static final TuitionTask TASK_BENSON \u003d new TaskBuilder().withTuteeName(\"Benson Meier\")"},{"lineNumber":30,"author":{"gitID":"yungyung04"},"content":"            .withDateTime(\"01/10/2018 14:30\").withDuration(\"2h0m\").withDescription(\"Math exam\")"},{"lineNumber":31,"author":{"gitID":"yungyung04"},"content":"            .buildTuitionTask();"},{"lineNumber":32,"author":{"gitID":"yungyung04"},"content":"    public static final TuitionTask TASK_CARL \u003d new TaskBuilder().withTuteeName(\"Carl Kurtz\")"},{"lineNumber":33,"author":{"gitID":"yungyung04"},"content":"            .withDateTime(\"31/12/2018 09:15\").withDuration(\"1h20m\").withoutDescription()"},{"lineNumber":34,"author":{"gitID":"yungyung04"},"content":"            .buildTuitionTask();"},{"lineNumber":35,"author":{"gitID":"yungyung04"},"content":"    public static final PersonalTask TASK_GROCERRY_SHOPPING \u003d new TaskBuilder()"},{"lineNumber":36,"author":{"gitID":"yungyung04"},"content":"            .withDateTime(\"25/04/2017 14:30\").withDuration(\"1h0m\").withDescription(\"grocery shopping\")"},{"lineNumber":37,"author":{"gitID":"yungyung04"},"content":"            .buildPersonalTask();"},{"lineNumber":38,"author":{"gitID":"yungyung04"},"content":"    public static final PersonalTask TASK_YOGA \u003d new TaskBuilder()"},{"lineNumber":39,"author":{"gitID":"yungyung04"},"content":"            .withDateTime(\"28/02/2019 14:30\").withDuration(\"3h0m\").withDescription(\"yoga\")"},{"lineNumber":40,"author":{"gitID":"yungyung04"},"content":"            .buildPersonalTask();"},{"lineNumber":41,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":42,"author":{"gitID":"yungyung04"},"content":"    // Manually added - Task details found in {@code CommandTestUtil}"},{"lineNumber":43,"author":{"gitID":"yungyung04"},"content":"    public static final TuitionTask TASK_AMY \u003d new TaskBuilder().withTuteeName(VALID_NAME_AMY)"},{"lineNumber":44,"author":{"gitID":"yungyung04"},"content":"            .withDateTime(VALID_DATE_TIME_AMY).withDuration(VALID_DURATION_AMY).withDescription(VALID_TASK_DESC_AMY)"},{"lineNumber":45,"author":{"gitID":"yungyung04"},"content":"            .buildTuitionTask();"},{"lineNumber":46,"author":{"gitID":"yungyung04"},"content":"    public static final TuitionTask TASK_BOB \u003d new TaskBuilder().withTuteeName(VALID_NAME_BOB)"},{"lineNumber":47,"author":{"gitID":"yungyung04"},"content":"            .withDateTime(VALID_DATE_TIME_BOB).withDuration(VALID_DURATION_BOB).withDescription(VALID_TASK_DESC_BOB)"},{"lineNumber":48,"author":{"gitID":"yungyung04"},"content":"            .buildTuitionTask();"},{"lineNumber":49,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":50,"author":{"gitID":"yungyung04"},"content":"    private TypicalTasks() {} // prevents instantiation"},{"lineNumber":51,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":52,"author":{"gitID":"yungyung04"},"content":"    public static List\u003cTask\u003e getTypicalTasks() {"},{"lineNumber":53,"author":{"gitID":"yungyung04"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(TASK_ALICE, TASK_BENSON, TASK_CARL, TASK_GROCERRY_SHOPPING, TASK_YOGA));"},{"lineNumber":54,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"yungyung04"},"content":"}"}],"authorContributionMap":{"yungyung04":47,"ChoChihTun":3,"-":5}},{"path":"src/test/java/guitests/guihandles/CalendarPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"ChoChihTun"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":3,"author":{"gitID":"ChoChihTun"},"content":"import com.calendarfx.view.page.PageBase;"},{"lineNumber":4,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":5,"author":{"gitID":"ChoChihTun"},"content":"import javafx.scene.Node;"},{"lineNumber":6,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.ui.CalendarPanel;"},{"lineNumber":7,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":8,"author":{"gitID":"ChoChihTun"},"content":"//@@author ChoChihTun"},{"lineNumber":9,"author":{"gitID":"ChoChihTun"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"ChoChihTun"},"content":" * A handler for the {@code CalendarPanel} of the UI"},{"lineNumber":11,"author":{"gitID":"ChoChihTun"},"content":" */"},{"lineNumber":12,"author":{"gitID":"ChoChihTun"},"content":"public class CalendarPanelHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":13,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":14,"author":{"gitID":"ChoChihTun"},"content":"    public static final String CALENDAR_PANEL_ID \u003d \"#calendarPlaceholder\";"},{"lineNumber":15,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":16,"author":{"gitID":"ChoChihTun"},"content":"    private CalendarPanel calendarPanel;"},{"lineNumber":17,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":18,"author":{"gitID":"ChoChihTun"},"content":"    public CalendarPanelHandle(Node calendarPanelNode) {"},{"lineNumber":19,"author":{"gitID":"ChoChihTun"},"content":"        super(calendarPanelNode);"},{"lineNumber":20,"author":{"gitID":"ChoChihTun"},"content":"        calendarPanel \u003d new CalendarPanel();"},{"lineNumber":21,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":23,"author":{"gitID":"ChoChihTun"},"content":"    public PageBase getDefaultCalendarViewPage() {"},{"lineNumber":24,"author":{"gitID":"ChoChihTun"},"content":"        return calendarPanel.getRoot().getDayPage();"},{"lineNumber":25,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":27,"author":{"gitID":"ChoChihTun"},"content":"    public PageBase getWeekViewPage() {"},{"lineNumber":28,"author":{"gitID":"ChoChihTun"},"content":"        return calendarPanel.getRoot().getWeekPage();"},{"lineNumber":29,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":31,"author":{"gitID":"ChoChihTun"},"content":"    public PageBase getMonthViewPage() {"},{"lineNumber":32,"author":{"gitID":"ChoChihTun"},"content":"        return calendarPanel.getRoot().getMonthPage();"},{"lineNumber":33,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":35,"author":{"gitID":"ChoChihTun"},"content":"    public PageBase getYearViewPage() {"},{"lineNumber":36,"author":{"gitID":"ChoChihTun"},"content":"        return calendarPanel.getRoot().getYearPage();"},{"lineNumber":37,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":39,"author":{"gitID":"ChoChihTun"},"content":"    public PageBase getCurrentCalendarViewPage() {"},{"lineNumber":40,"author":{"gitID":"ChoChihTun"},"content":"        return calendarPanel.getRoot().getSelectedPage();"},{"lineNumber":41,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"ChoChihTun"},"content":"}"}],"authorContributionMap":{"ChoChihTun":42}},{"path":"src/test/java/seedu/address/testutil/TypicalCalendarEntries.java","lines":[{"lineNumber":1,"author":{"gitID":"ChoChihTun"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":3,"author":{"gitID":"ChoChihTun"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitID":"ChoChihTun"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitID":"ChoChihTun"},"content":"import java.time.format.ResolverStyle;"},{"lineNumber":6,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":7,"author":{"gitID":"ChoChihTun"},"content":"import com.calendarfx.model.Entry;"},{"lineNumber":8,"author":{"gitID":"ChoChihTun"},"content":"import com.calendarfx.model.Interval;"},{"lineNumber":9,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":10,"author":{"gitID":"ChoChihTun"},"content":"//@@author ChoChihTun"},{"lineNumber":11,"author":{"gitID":"ChoChihTun"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"ChoChihTun"},"content":" * A utility class containing a list of {@code Entry} objects to be used in tests."},{"lineNumber":13,"author":{"gitID":"ChoChihTun"},"content":" */"},{"lineNumber":14,"author":{"gitID":"ChoChihTun"},"content":"public class TypicalCalendarEntries {"},{"lineNumber":15,"author":{"gitID":"ChoChihTun"},"content":"    public static final String VALID_NAME \u003d \"Jason\";"},{"lineNumber":16,"author":{"gitID":"ChoChihTun"},"content":"    public static final String VALID_DURATION \u003d \"1h30m\";"},{"lineNumber":17,"author":{"gitID":"ChoChihTun"},"content":"    public static final String VALID_DESCRIPTION \u003d \"homework 1\";"},{"lineNumber":18,"author":{"gitID":"ChoChihTun"},"content":"    private static final String VALID_STRING_START_DATE_TIME \u003d \"01/04/2018 11:00\";"},{"lineNumber":19,"author":{"gitID":"ChoChihTun"},"content":"    private static final String VALID_STRING_END_DATE_TIME \u003d \"01/04/2018 12:30\";"},{"lineNumber":20,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":21,"author":{"gitID":"ChoChihTun"},"content":"    private static DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/uuuu HH:mm\")"},{"lineNumber":22,"author":{"gitID":"ChoChihTun"},"content":"            .withResolverStyle(ResolverStyle.STRICT);"},{"lineNumber":23,"author":{"gitID":"ChoChihTun"},"content":"    public static final LocalDateTime VALID_START_DATE_TIME \u003d"},{"lineNumber":24,"author":{"gitID":"ChoChihTun"},"content":"            LocalDateTime.parse(VALID_STRING_START_DATE_TIME, formatter);"},{"lineNumber":25,"author":{"gitID":"ChoChihTun"},"content":"    public static final LocalDateTime VALID_END_DATE_TIME \u003d"},{"lineNumber":26,"author":{"gitID":"ChoChihTun"},"content":"            LocalDateTime.parse(VALID_STRING_END_DATE_TIME, formatter);"},{"lineNumber":27,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":28,"author":{"gitID":"ChoChihTun"},"content":"    private static Entry validTuitionEntry;"},{"lineNumber":29,"author":{"gitID":"ChoChihTun"},"content":"    private static Entry validPersonalEntry;"},{"lineNumber":30,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":31,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"ChoChihTun"},"content":"     * Creates valid calendar entry"},{"lineNumber":33,"author":{"gitID":"ChoChihTun"},"content":"     *"},{"lineNumber":34,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"ChoChihTun"},"content":"    public TypicalCalendarEntries() {"},{"lineNumber":36,"author":{"gitID":"ChoChihTun"},"content":"        Interval interval \u003d new Interval(VALID_START_DATE_TIME, VALID_END_DATE_TIME);"},{"lineNumber":37,"author":{"gitID":"ChoChihTun"},"content":"        createTuitionEntry(interval);"},{"lineNumber":38,"author":{"gitID":"ChoChihTun"},"content":"        createPersonalEntry(interval);"},{"lineNumber":39,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":41,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"ChoChihTun"},"content":"     * Creates a valid tuition calendar entry"},{"lineNumber":43,"author":{"gitID":"ChoChihTun"},"content":"     *"},{"lineNumber":44,"author":{"gitID":"ChoChihTun"},"content":"     * @param interval of the entry"},{"lineNumber":45,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"ChoChihTun"},"content":"    private void createTuitionEntry(Interval interval) {"},{"lineNumber":47,"author":{"gitID":"ChoChihTun"},"content":"        validTuitionEntry \u003d new Entry(VALID_NAME);"},{"lineNumber":48,"author":{"gitID":"ChoChihTun"},"content":"        validTuitionEntry.setInterval(interval);"},{"lineNumber":49,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":51,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"ChoChihTun"},"content":"     * Creates a valid personal calendar entry"},{"lineNumber":53,"author":{"gitID":"ChoChihTun"},"content":"     *"},{"lineNumber":54,"author":{"gitID":"ChoChihTun"},"content":"     * @param interval of the entry"},{"lineNumber":55,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"ChoChihTun"},"content":"    private void createPersonalEntry(Interval interval) {"},{"lineNumber":57,"author":{"gitID":"ChoChihTun"},"content":"        validPersonalEntry \u003d new Entry(VALID_DESCRIPTION);"},{"lineNumber":58,"author":{"gitID":"ChoChihTun"},"content":"        validPersonalEntry.setInterval(interval);"},{"lineNumber":59,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":61,"author":{"gitID":"ChoChihTun"},"content":"    public static Entry getTuitionEntry() {"},{"lineNumber":62,"author":{"gitID":"ChoChihTun"},"content":"        return validTuitionEntry;"},{"lineNumber":63,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":65,"author":{"gitID":"ChoChihTun"},"content":"    public static Entry getPersonalEntry() {"},{"lineNumber":66,"author":{"gitID":"ChoChihTun"},"content":"        return validPersonalEntry;"},{"lineNumber":67,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"ChoChihTun"},"content":"}"}],"authorContributionMap":{"ChoChihTun":68}},{"path":"src/test/java/guitests/guihandles/MainWindowHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Provides a handle for {@code MainWindow}."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class MainWindowHandle extends StageHandle {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    private final PersonListPanelHandle personListPanel;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    private final ResultDisplayHandle resultDisplay;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final CommandBoxHandle commandBox;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private final StatusBarFooterHandle statusBarFooter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private final MainMenuHandle mainMenu;"},{"lineNumber":15,"author":{"gitID":"ChoChihTun"},"content":"    private final CalendarPanelHandle calendarPanel;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public MainWindowHandle(Stage stage) {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        super(stage);"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanelHandle(getChildNode(PersonListPanelHandle.PERSON_LIST_VIEW_ID));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"},{"lineNumber":25,"author":{"gitID":"ChoChihTun"},"content":"        calendarPanel \u003d new CalendarPanelHandle(getChildNode(CalendarPanelHandle.CALENDAR_PANEL_ID));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return personListPanel;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return resultDisplay;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return commandBox;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return statusBarFooter;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return mainMenu;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"ChoChihTun"},"content":"    public CalendarPanelHandle getCalendarPanel() {"},{"lineNumber":49,"author":{"gitID":"ChoChihTun"},"content":"        return calendarPanel;"},{"lineNumber":50,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ChoChihTun":5,"-":46}},{"path":"src/test/java/guitests/guihandles/TaskCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"a-shakra"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":6,"author":{"gitID":"a-shakra"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"a-shakra"},"content":" * Provides a handle to a task card in the task list panel."},{"lineNumber":8,"author":{"gitID":"a-shakra"},"content":" */"},{"lineNumber":9,"author":{"gitID":"a-shakra"},"content":"public class TaskCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":10,"author":{"gitID":"a-shakra"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":11,"author":{"gitID":"a-shakra"},"content":"    private static final String DESCRIPTION_FIELD_ID \u003d \"#description\";"},{"lineNumber":12,"author":{"gitID":"a-shakra"},"content":"    private static final String DURATION_FIELD_ID \u003d \"#duration\";"},{"lineNumber":13,"author":{"gitID":"a-shakra"},"content":"    private static final String DATEANDTIME_FIELD_ID \u003d \"#dateandtime\";"},{"lineNumber":14,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":15,"author":{"gitID":"a-shakra"},"content":"    private final Label idLabel;"},{"lineNumber":16,"author":{"gitID":"a-shakra"},"content":"    private final Label descriptionLabel;"},{"lineNumber":17,"author":{"gitID":"a-shakra"},"content":"    private final Label durationLabel;"},{"lineNumber":18,"author":{"gitID":"a-shakra"},"content":"    private final Label dateAndTimeLabel;"},{"lineNumber":19,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":20,"author":{"gitID":"a-shakra"},"content":"    public TaskCardHandle(Node cardNode) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":24,"author":{"gitID":"a-shakra"},"content":"        this.descriptionLabel \u003d getChildNode(DESCRIPTION_FIELD_ID);"},{"lineNumber":25,"author":{"gitID":"a-shakra"},"content":"        this.durationLabel \u003d getChildNode(DURATION_FIELD_ID);"},{"lineNumber":26,"author":{"gitID":"a-shakra"},"content":"        this.dateAndTimeLabel \u003d getChildNode(DATEANDTIME_FIELD_ID);"},{"lineNumber":27,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":29,"author":{"gitID":"a-shakra"},"content":"    public String getId() {"},{"lineNumber":30,"author":{"gitID":"a-shakra"},"content":"        return idLabel.getText();"},{"lineNumber":31,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":33,"author":{"gitID":"a-shakra"},"content":"    public String getDescription() {"},{"lineNumber":34,"author":{"gitID":"a-shakra"},"content":"        return descriptionLabel.getText();"},{"lineNumber":35,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":37,"author":{"gitID":"a-shakra"},"content":"    public String getDuration() {"},{"lineNumber":38,"author":{"gitID":"a-shakra"},"content":"        return durationLabel.getText();"},{"lineNumber":39,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":41,"author":{"gitID":"a-shakra"},"content":"    public String getDateAndTime() {"},{"lineNumber":42,"author":{"gitID":"a-shakra"},"content":"        return dateAndTimeLabel.getText();"},{"lineNumber":43,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":45,"author":{"gitID":"a-shakra"},"content":"}"}],"authorContributionMap":{"a-shakra":40,"-":5}},{"path":"src/main/java/seedu/address/ui/TaskCard.java","lines":[{"lineNumber":1,"author":{"gitID":"a-shakra"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":3,"author":{"gitID":"ChoChihTun"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":4,"author":{"gitID":"ChoChihTun"},"content":"import java.time.format.ResolverStyle;"},{"lineNumber":5,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":6,"author":{"gitID":"a-shakra"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitID":"a-shakra"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"a-shakra"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":9,"author":{"gitID":"a-shakra"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitID":"a-shakra"},"content":"import seedu.address.model.Task;"},{"lineNumber":11,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.model.tutee.TuitionTask;"},{"lineNumber":12,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":13,"author":{"gitID":"a-shakra"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"a-shakra"},"content":" * An UI component that displays information of a {@code Task}."},{"lineNumber":15,"author":{"gitID":"a-shakra"},"content":" */"},{"lineNumber":16,"author":{"gitID":"a-shakra"},"content":"//@@author a-shakra"},{"lineNumber":17,"author":{"gitID":"a-shakra"},"content":"public class TaskCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":18,"author":{"gitID":"a-shakra"},"content":"    private static final String FXML \u003d \"TaskListCard.fxml\";"},{"lineNumber":19,"author":{"gitID":"a-shakra"},"content":"    public final Task task;"},{"lineNumber":20,"author":{"gitID":"a-shakra"},"content":"    private DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/uuuu HH:mm\")"},{"lineNumber":21,"author":{"gitID":"a-shakra"},"content":"            .withResolverStyle(ResolverStyle.STRICT);"},{"lineNumber":22,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":23,"author":{"gitID":"a-shakra"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"a-shakra"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":25,"author":{"gitID":"a-shakra"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":26,"author":{"gitID":"a-shakra"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":27,"author":{"gitID":"a-shakra"},"content":"     *"},{"lineNumber":28,"author":{"gitID":"a-shakra"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":29,"author":{"gitID":"a-shakra"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":31,"author":{"gitID":"a-shakra"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"a-shakra"},"content":"    private HBox cardPane;"},{"lineNumber":33,"author":{"gitID":"a-shakra"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"a-shakra"},"content":"    private Label id;"},{"lineNumber":35,"author":{"gitID":"a-shakra"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"a-shakra"},"content":"    private Label taskDateAndTime;"},{"lineNumber":37,"author":{"gitID":"a-shakra"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"a-shakra"},"content":"    private Label duration;"},{"lineNumber":39,"author":{"gitID":"a-shakra"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"a-shakra"},"content":"    private Label description;"},{"lineNumber":41,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":42,"author":{"gitID":"a-shakra"},"content":"    public TaskCard(Task task, int displayedIndex) {"},{"lineNumber":43,"author":{"gitID":"a-shakra"},"content":"        super(FXML);"},{"lineNumber":44,"author":{"gitID":"a-shakra"},"content":"        this.task \u003d task;"},{"lineNumber":45,"author":{"gitID":"a-shakra"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":46,"author":{"gitID":"a-shakra"},"content":"        if (task instanceof TuitionTask) {"},{"lineNumber":47,"author":{"gitID":"a-shakra"},"content":"            description.setText(((TuitionTask) task).getTuitionTitle());"},{"lineNumber":48,"author":{"gitID":"a-shakra"},"content":"        } else {"},{"lineNumber":49,"author":{"gitID":"a-shakra"},"content":"            description.setText(task.getDescription());"},{"lineNumber":50,"author":{"gitID":"a-shakra"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"a-shakra"},"content":"        duration.setText(task.getDuration());"},{"lineNumber":52,"author":{"gitID":"a-shakra"},"content":"        taskDateAndTime.setText(task.getTaskDateTime().format(formatter));"},{"lineNumber":53,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":55,"author":{"gitID":"a-shakra"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"a-shakra"},"content":"    public boolean equals(Object other) {"},{"lineNumber":57,"author":{"gitID":"a-shakra"},"content":"        // short circuit if same object"},{"lineNumber":58,"author":{"gitID":"a-shakra"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":59,"author":{"gitID":"a-shakra"},"content":"            return true;"},{"lineNumber":60,"author":{"gitID":"a-shakra"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":62,"author":{"gitID":"a-shakra"},"content":"        // instanceof handles nulls"},{"lineNumber":63,"author":{"gitID":"a-shakra"},"content":"        if (!(other instanceof TaskCard)) {"},{"lineNumber":64,"author":{"gitID":"a-shakra"},"content":"            return false;"},{"lineNumber":65,"author":{"gitID":"a-shakra"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":67,"author":{"gitID":"a-shakra"},"content":"        // state check"},{"lineNumber":68,"author":{"gitID":"a-shakra"},"content":"        TaskCard card \u003d (TaskCard) other;"},{"lineNumber":69,"author":{"gitID":"a-shakra"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":70,"author":{"gitID":"a-shakra"},"content":"                \u0026\u0026 task.equals(card.task);"},{"lineNumber":71,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":73,"author":{"gitID":"a-shakra"},"content":"}"},{"lineNumber":74,"author":{"gitID":"a-shakra"},"content":""}],"authorContributionMap":{"ChoChihTun":4,"a-shakra":70}},{"path":"src/main/java/seedu/address/ui/TaskCardListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"a-shakra"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":3,"author":{"gitID":"a-shakra"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":5,"author":{"gitID":"a-shakra"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"a-shakra"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"a-shakra"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"a-shakra"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":13,"author":{"gitID":"a-shakra"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":14,"author":{"gitID":"a-shakra"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"a-shakra"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"a-shakra"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":17,"author":{"gitID":"a-shakra"},"content":"import seedu.address.commons.events.ui.TaskPanelSelectionChangedEvent;"},{"lineNumber":18,"author":{"gitID":"a-shakra"},"content":"import seedu.address.model.Task;"},{"lineNumber":19,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":20,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":21,"author":{"gitID":"a-shakra"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"a-shakra"},"content":" * Panel containing the list of tasks."},{"lineNumber":23,"author":{"gitID":"a-shakra"},"content":" */"},{"lineNumber":24,"author":{"gitID":"a-shakra"},"content":"//@@author a-shakra"},{"lineNumber":25,"author":{"gitID":"a-shakra"},"content":"public class TaskCardListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":26,"author":{"gitID":"a-shakra"},"content":"    private static final String FXML \u003d \"TaskCardListPanel.fxml\";"},{"lineNumber":27,"author":{"gitID":"a-shakra"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(TaskCardListPanel.class);"},{"lineNumber":28,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":29,"author":{"gitID":"a-shakra"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"a-shakra"},"content":"    private ListView\u003cTaskCard\u003e taskListView;"},{"lineNumber":31,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":32,"author":{"gitID":"a-shakra"},"content":"    public TaskCardListPanel(ObservableList\u003cTask\u003e taskList) {"},{"lineNumber":33,"author":{"gitID":"a-shakra"},"content":"        super(FXML);"},{"lineNumber":34,"author":{"gitID":"a-shakra"},"content":"        setConnections(taskList);"},{"lineNumber":35,"author":{"gitID":"a-shakra"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":36,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":38,"author":{"gitID":"a-shakra"},"content":"    private void setConnections(ObservableList\u003cTask\u003e taskList) {"},{"lineNumber":39,"author":{"gitID":"a-shakra"},"content":"        ObservableList\u003cTaskCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":40,"author":{"gitID":"a-shakra"},"content":"                taskList, (task) -\u003e new TaskCard(task, taskList.indexOf(task) + 1));"},{"lineNumber":41,"author":{"gitID":"a-shakra"},"content":"        taskListView.setItems(mappedList);"},{"lineNumber":42,"author":{"gitID":"a-shakra"},"content":"        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"},{"lineNumber":43,"author":{"gitID":"a-shakra"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":44,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":46,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":47,"author":{"gitID":"a-shakra"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":48,"author":{"gitID":"a-shakra"},"content":"        taskListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":49,"author":{"gitID":"a-shakra"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":50,"author":{"gitID":"a-shakra"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":51,"author":{"gitID":"a-shakra"},"content":"                        logger.fine(\"Selection in Task list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":52,"author":{"gitID":"a-shakra"},"content":"                        raise(new TaskPanelSelectionChangedEvent(newValue));"},{"lineNumber":53,"author":{"gitID":"a-shakra"},"content":"                    }"},{"lineNumber":54,"author":{"gitID":"a-shakra"},"content":"                });"},{"lineNumber":55,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":57,"author":{"gitID":"a-shakra"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"a-shakra"},"content":"     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."},{"lineNumber":59,"author":{"gitID":"a-shakra"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"a-shakra"},"content":"    private void scrollTo(int index) {"},{"lineNumber":61,"author":{"gitID":"a-shakra"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":62,"author":{"gitID":"a-shakra"},"content":"            taskListView.scrollTo(index);"},{"lineNumber":63,"author":{"gitID":"a-shakra"},"content":"            taskListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":64,"author":{"gitID":"a-shakra"},"content":"        });"},{"lineNumber":65,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":67,"author":{"gitID":"a-shakra"},"content":"    @Subscribe"},{"lineNumber":68,"author":{"gitID":"a-shakra"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":69,"author":{"gitID":"a-shakra"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":70,"author":{"gitID":"a-shakra"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":71,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":73,"author":{"gitID":"a-shakra"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"a-shakra"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code PersonCard}."},{"lineNumber":75,"author":{"gitID":"a-shakra"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"a-shakra"},"content":"    class TaskListViewCell extends ListCell\u003cTaskCard\u003e {"},{"lineNumber":77,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":78,"author":{"gitID":"a-shakra"},"content":"        @Override"},{"lineNumber":79,"author":{"gitID":"a-shakra"},"content":"        protected void updateItem(TaskCard task, boolean empty) {"},{"lineNumber":80,"author":{"gitID":"a-shakra"},"content":"            super.updateItem(task, empty);"},{"lineNumber":81,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":82,"author":{"gitID":"a-shakra"},"content":"            if (empty || task \u003d\u003d null) {"},{"lineNumber":83,"author":{"gitID":"a-shakra"},"content":"                setGraphic(null);"},{"lineNumber":84,"author":{"gitID":"a-shakra"},"content":"                setText(null);"},{"lineNumber":85,"author":{"gitID":"a-shakra"},"content":"            } else {"},{"lineNumber":86,"author":{"gitID":"a-shakra"},"content":"                setGraphic(task.getRoot());"},{"lineNumber":87,"author":{"gitID":"a-shakra"},"content":"            }"},{"lineNumber":88,"author":{"gitID":"a-shakra"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":91,"author":{"gitID":"a-shakra"},"content":"}"}],"authorContributionMap":{"a-shakra":88,"-":3}},{"path":"src/test/java/seedu/address/testutil/TypicalTasks.java","lines":[{"lineNumber":1,"author":{"gitID":"a-shakra"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":8,"author":{"gitID":"a-shakra"},"content":"import seedu.address.model.Task;"},{"lineNumber":9,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.model.task.exceptions.TimingClashException;"},{"lineNumber":10,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":11,"author":{"gitID":"a-shakra"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"a-shakra"},"content":" * A utility class for Task. For now, this is customized to the personal task class"},{"lineNumber":13,"author":{"gitID":"a-shakra"},"content":" */"},{"lineNumber":14,"author":{"gitID":"a-shakra"},"content":"//@@author a-shakra"},{"lineNumber":15,"author":{"gitID":"a-shakra"},"content":"public class TypicalTasks {"},{"lineNumber":16,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":17,"author":{"gitID":"a-shakra"},"content":"    public static final Task EXAMPLE1 \u003d new TaskBuilder().withTuteeName(null).withDescription(\"exampleTask1\")"},{"lineNumber":18,"author":{"gitID":"a-shakra"},"content":"            .withDuration(\"3h20m\").withDateTime(\"02/05/2018 03:20\").buildPersonalTask();"},{"lineNumber":19,"author":{"gitID":"a-shakra"},"content":"    public static final Task EXAMPLE2 \u003d new TaskBuilder().withTuteeName(null).withDescription(\"exampleTask2\")"},{"lineNumber":20,"author":{"gitID":"a-shakra"},"content":"            .withDuration(\"3h20m\").withDateTime(\"02/04/2018 13:20\").buildPersonalTask();"},{"lineNumber":21,"author":{"gitID":"a-shakra"},"content":"    public static final Task EXAMPLE3 \u003d new TaskBuilder().withTuteeName(null).withDescription(\"exampleTask3\")"},{"lineNumber":22,"author":{"gitID":"a-shakra"},"content":"            .withDuration(\"3h20m\").withDateTime(\"02/06/2018 23:20\").buildPersonalTask();"},{"lineNumber":23,"author":{"gitID":"a-shakra"},"content":"    public static final Task EXAMPLE4 \u003d new TaskBuilder().withTuteeName(null).withDescription(\"exampleTask4\")"},{"lineNumber":24,"author":{"gitID":"a-shakra"},"content":"            .withDuration(\"3h20m\").withDateTime(\"02/07/2018 23:20\").buildPersonalTask();"},{"lineNumber":25,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":26,"author":{"gitID":"a-shakra"},"content":"    private TypicalTasks() {} // prevents instantiation"},{"lineNumber":27,"author":{"gitID":"a-shakra"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"a-shakra"},"content":"     * Returns an {@code AddressBook} with all the typical tasks."},{"lineNumber":29,"author":{"gitID":"a-shakra"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"a-shakra"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":31,"author":{"gitID":"a-shakra"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":32,"author":{"gitID":"a-shakra"},"content":"        for (Task task : getTypicalTasks()) {"},{"lineNumber":33,"author":{"gitID":"a-shakra"},"content":"            try {"},{"lineNumber":34,"author":{"gitID":"a-shakra"},"content":"                ab.addTask(task);"},{"lineNumber":35,"author":{"gitID":"a-shakra"},"content":"            } catch (TimingClashException e) {"},{"lineNumber":36,"author":{"gitID":"a-shakra"},"content":"                throw new AssertionError(\"Timing Clash\");"},{"lineNumber":37,"author":{"gitID":"a-shakra"},"content":"            }"},{"lineNumber":38,"author":{"gitID":"a-shakra"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"a-shakra"},"content":"        return ab;"},{"lineNumber":40,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":42,"author":{"gitID":"a-shakra"},"content":"    public static List\u003cTask\u003e getTypicalTasks() {"},{"lineNumber":43,"author":{"gitID":"a-shakra"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(EXAMPLE1, EXAMPLE2, EXAMPLE3));"},{"lineNumber":44,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":46,"author":{"gitID":"a-shakra"},"content":"}"}],"authorContributionMap":{"ChoChihTun":1,"a-shakra":40,"-":5}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":38,"author":{"gitID":"a-shakra"},"content":"    private TaskCardListPanel taskListPanel;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":41,"author":{"gitID":"ChoChihTun"},"content":"    private CalendarPanel calendarPanel;"},{"lineNumber":42,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":43,"author":{"gitID":"ChoChihTun"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"ChoChihTun"},"content":"    private StackPane calendarPlaceholder;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"a-shakra"},"content":"    @FXML"},{"lineNumber":56,"author":{"gitID":"a-shakra"},"content":"    private StackPane taskListPanelPlaceholder;"},{"lineNumber":57,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":69,"author":{"gitID":"ChoChihTun"},"content":"        primaryStage.setMaximized(true);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":75,"author":{"gitID":"ChoChihTun"},"content":"        config.setAppTitle(\"TuitionConnect\");"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":99,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":100,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":101,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":102,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":103,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":104,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":105,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":106,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":107,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":108,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":109,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":110,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":111,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":112,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":125,"author":{"gitID":"ChoChihTun"},"content":"        calendarPanel \u003d new CalendarPanel();"},{"lineNumber":126,"author":{"gitID":"ChoChihTun"},"content":"        calendarPlaceholder.getChildren().add(calendarPanel.getRoot());"},{"lineNumber":127,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"a-shakra"},"content":"        taskListPanel \u003d new TaskCardListPanel(logic.getFilteredTaskList());"},{"lineNumber":132,"author":{"gitID":"a-shakra"},"content":"        taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"},{"lineNumber":133,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":169,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":174,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":187,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        return this.personListPanel;"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"a-shakra"},"content":"    public TaskCardListPanel getTaskListPanel() {"},{"lineNumber":198,"author":{"gitID":"a-shakra"},"content":"        return this.taskListPanel;"},{"lineNumber":199,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ChoChihTun":9,"a-shakra":11,"-":186}},{"path":"src/main/java/seedu/address/ui/CalendarPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"ChoChihTun"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":3,"author":{"gitID":"ChoChihTun"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitID":"ChoChihTun"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitID":"ChoChihTun"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":7,"author":{"gitID":"ChoChihTun"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":8,"author":{"gitID":"ChoChihTun"},"content":"import com.calendarfx.model.CalendarSource;"},{"lineNumber":9,"author":{"gitID":"ChoChihTun"},"content":"import com.calendarfx.model.Entry;"},{"lineNumber":10,"author":{"gitID":"ChoChihTun"},"content":"import com.calendarfx.view.CalendarView;"},{"lineNumber":11,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.model.Task;"},{"lineNumber":15,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":16,"author":{"gitID":"ChoChihTun"},"content":"//@@author ChoChihTun"},{"lineNumber":17,"author":{"gitID":"ChoChihTun"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"ChoChihTun"},"content":" * The Calendar Panel of the App."},{"lineNumber":19,"author":{"gitID":"ChoChihTun"},"content":" */"},{"lineNumber":20,"author":{"gitID":"ChoChihTun"},"content":"public class CalendarPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":22,"author":{"gitID":"ChoChihTun"},"content":"    private static final String FXML \u003d \"CalendarPanel.fxml\";"},{"lineNumber":23,"author":{"gitID":"ChoChihTun"},"content":"    private static final char DAY \u003d \u0027d\u0027;"},{"lineNumber":24,"author":{"gitID":"ChoChihTun"},"content":"    private static final char WEEK \u003d \u0027w\u0027;"},{"lineNumber":25,"author":{"gitID":"ChoChihTun"},"content":"    private static final char MONTH \u003d \u0027m\u0027;"},{"lineNumber":26,"author":{"gitID":"ChoChihTun"},"content":"    private static final char YEAR \u003d \u0027y\u0027;"},{"lineNumber":27,"author":{"gitID":"ChoChihTun"},"content":"    private static CalendarSource source \u003d new CalendarSource(\"Schedule\");"},{"lineNumber":28,"author":{"gitID":"ChoChihTun"},"content":"    private static Calendar calendar \u003d new Calendar(\"Task\");"},{"lineNumber":29,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":30,"author":{"gitID":"ChoChihTun"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"ChoChihTun"},"content":"    private static CalendarView calendarView \u003d new CalendarView();"},{"lineNumber":32,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":33,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":34,"author":{"gitID":"ChoChihTun"},"content":"    public CalendarPanel() {"},{"lineNumber":35,"author":{"gitID":"ChoChihTun"},"content":"        super(FXML);"},{"lineNumber":36,"author":{"gitID":"ChoChihTun"},"content":"        calendarView.setRequestedTime(LocalTime.now());"},{"lineNumber":37,"author":{"gitID":"ChoChihTun"},"content":"        calendarView.setToday(LocalDate.now());"},{"lineNumber":38,"author":{"gitID":"ChoChihTun"},"content":"        calendarView.setTime(LocalTime.now());"},{"lineNumber":39,"author":{"gitID":"ChoChihTun"},"content":"        calendarView.setScaleX(0.95);"},{"lineNumber":40,"author":{"gitID":"ChoChihTun"},"content":"        calendarView.setScaleY(1.15);"},{"lineNumber":41,"author":{"gitID":"ChoChihTun"},"content":"        calendarView.setTranslateY(-40);"},{"lineNumber":42,"author":{"gitID":"ChoChihTun"},"content":"        calendarView.showDayPage();"},{"lineNumber":43,"author":{"gitID":"ChoChihTun"},"content":"        disableViews();"},{"lineNumber":44,"author":{"gitID":"ChoChihTun"},"content":"        setupCalendar();"},{"lineNumber":45,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":47,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"ChoChihTun"},"content":"     * Initialises the calendar"},{"lineNumber":49,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"ChoChihTun"},"content":"    private void setupCalendar() {"},{"lineNumber":51,"author":{"gitID":"ChoChihTun"},"content":"        source.getCalendars().add(calendar);"},{"lineNumber":52,"author":{"gitID":"ChoChihTun"},"content":"        calendarView.getCalendarSources().add(source);"},{"lineNumber":53,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":55,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"ChoChihTun"},"content":"     * Removes unnecessary buttons from interface"},{"lineNumber":57,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"ChoChihTun"},"content":"    private void disableViews() {"},{"lineNumber":59,"author":{"gitID":"ChoChihTun"},"content":"        calendarView.setShowAddCalendarButton(false);"},{"lineNumber":60,"author":{"gitID":"ChoChihTun"},"content":"        calendarView.setShowPrintButton(false);"},{"lineNumber":61,"author":{"gitID":"ChoChihTun"},"content":"        calendarView.setShowPageToolBarControls(false);"},{"lineNumber":62,"author":{"gitID":"ChoChihTun"},"content":"        calendarView.setShowSearchField(false);"},{"lineNumber":63,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":65,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"ChoChihTun"},"content":"     * Changes the view page of the calendar"},{"lineNumber":67,"author":{"gitID":"ChoChihTun"},"content":"     * @param timeUnit the view page time unit to be changed into"},{"lineNumber":68,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"ChoChihTun"},"content":"    public static void changeViewPage(char timeUnit) {"},{"lineNumber":70,"author":{"gitID":"ChoChihTun"},"content":"        switch(timeUnit) {"},{"lineNumber":71,"author":{"gitID":"ChoChihTun"},"content":"        case DAY:"},{"lineNumber":72,"author":{"gitID":"ChoChihTun"},"content":"            calendarView.showDayPage();"},{"lineNumber":73,"author":{"gitID":"ChoChihTun"},"content":"            return;"},{"lineNumber":74,"author":{"gitID":"ChoChihTun"},"content":"        case WEEK:"},{"lineNumber":75,"author":{"gitID":"ChoChihTun"},"content":"            calendarView.showWeekPage();"},{"lineNumber":76,"author":{"gitID":"ChoChihTun"},"content":"            return;"},{"lineNumber":77,"author":{"gitID":"ChoChihTun"},"content":"        case MONTH:"},{"lineNumber":78,"author":{"gitID":"ChoChihTun"},"content":"            calendarView.showMonthPage();"},{"lineNumber":79,"author":{"gitID":"ChoChihTun"},"content":"            return;"},{"lineNumber":80,"author":{"gitID":"ChoChihTun"},"content":"        case YEAR:"},{"lineNumber":81,"author":{"gitID":"ChoChihTun"},"content":"            calendarView.showYearPage();"},{"lineNumber":82,"author":{"gitID":"ChoChihTun"},"content":"            return;"},{"lineNumber":83,"author":{"gitID":"ChoChihTun"},"content":"        default:"},{"lineNumber":84,"author":{"gitID":"ChoChihTun"},"content":"            // Should never enter here"},{"lineNumber":85,"author":{"gitID":"ChoChihTun"},"content":"            assert (false);"},{"lineNumber":86,"author":{"gitID":"ChoChihTun"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":89,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"ChoChihTun"},"content":"     * Updates the calendar with the updated list of tasks"},{"lineNumber":91,"author":{"gitID":"ChoChihTun"},"content":"     *"},{"lineNumber":92,"author":{"gitID":"ChoChihTun"},"content":"     * @param filteredTasks updated list of tasks"},{"lineNumber":93,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"ChoChihTun"},"content":"    public static void updateCalendar(List\u003cTask\u003e filteredTasks) {"},{"lineNumber":95,"author":{"gitID":"ChoChihTun"},"content":"        if (isFilteredTaskListValid(filteredTasks)) {"},{"lineNumber":96,"author":{"gitID":"ChoChihTun"},"content":"            Calendar updatedCalendar \u003d new Calendar(\"task\");"},{"lineNumber":97,"author":{"gitID":"ChoChihTun"},"content":"            for (Task task : filteredTasks) {"},{"lineNumber":98,"author":{"gitID":"ChoChihTun"},"content":"                updatedCalendar.addEntry(task.getEntry());"},{"lineNumber":99,"author":{"gitID":"ChoChihTun"},"content":"            }"},{"lineNumber":100,"author":{"gitID":"ChoChihTun"},"content":"            source.getCalendars().clear();"},{"lineNumber":101,"author":{"gitID":"ChoChihTun"},"content":"            source.getCalendars().add(updatedCalendar);"},{"lineNumber":102,"author":{"gitID":"ChoChihTun"},"content":"        } else {"},{"lineNumber":103,"author":{"gitID":"ChoChihTun"},"content":"            // Latest task list provided or loaded from storage should not have any task that clashes"},{"lineNumber":104,"author":{"gitID":"ChoChihTun"},"content":"            assert (false);"},{"lineNumber":105,"author":{"gitID":"ChoChihTun"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":108,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"ChoChihTun"},"content":"     * Checks if the given latest task list is valid"},{"lineNumber":110,"author":{"gitID":"ChoChihTun"},"content":"     *"},{"lineNumber":111,"author":{"gitID":"ChoChihTun"},"content":"     * @param taskList to be checked"},{"lineNumber":112,"author":{"gitID":"ChoChihTun"},"content":"     * @return true if there is no clash between tasks so task list is valid"},{"lineNumber":113,"author":{"gitID":"ChoChihTun"},"content":"     *         false if there is clash between tasks so task list is invalid"},{"lineNumber":114,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"ChoChihTun"},"content":"    private static boolean isFilteredTaskListValid(List\u003cTask\u003e taskList) {"},{"lineNumber":116,"author":{"gitID":"ChoChihTun"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":117,"author":{"gitID":"ChoChihTun"},"content":"            Entry\u003c?\u003e taskEntryToBeChecked \u003d taskList.get(i).getEntry();"},{"lineNumber":118,"author":{"gitID":"ChoChihTun"},"content":"            if (isTaskTimingClash(taskList, i, taskEntryToBeChecked)) {"},{"lineNumber":119,"author":{"gitID":"ChoChihTun"},"content":"                return false;"},{"lineNumber":120,"author":{"gitID":"ChoChihTun"},"content":"            }"},{"lineNumber":121,"author":{"gitID":"ChoChihTun"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"ChoChihTun"},"content":"        return true;"},{"lineNumber":123,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":125,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"ChoChihTun"},"content":"     * Checks if the given task clashes with any task in the list"},{"lineNumber":127,"author":{"gitID":"ChoChihTun"},"content":"     *"},{"lineNumber":128,"author":{"gitID":"ChoChihTun"},"content":"     * @param taskList list of tasks to check against"},{"lineNumber":129,"author":{"gitID":"ChoChihTun"},"content":"     * @param index index of the given task"},{"lineNumber":130,"author":{"gitID":"ChoChihTun"},"content":"     * @param taskEntryToBeChecked the given task entry"},{"lineNumber":131,"author":{"gitID":"ChoChihTun"},"content":"     * @return true if given task does not clash with any task in the list"},{"lineNumber":132,"author":{"gitID":"ChoChihTun"},"content":"     *         false if given task clashes with another task in the list"},{"lineNumber":133,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"ChoChihTun"},"content":"    private static boolean isTaskTimingClash(List\u003cTask\u003e taskList, int index, Entry\u003c?\u003e taskEntryToBeChecked) {"},{"lineNumber":135,"author":{"gitID":"ChoChihTun"},"content":"        for (int j \u003d index + 1; j \u003c taskList.size(); j++) {"},{"lineNumber":136,"author":{"gitID":"ChoChihTun"},"content":"            Entry taskEntryToCheckAgainst \u003d taskList.get(j).getEntry();"},{"lineNumber":137,"author":{"gitID":"ChoChihTun"},"content":"            if (taskEntryToBeChecked.intersects(taskEntryToCheckAgainst)) {"},{"lineNumber":138,"author":{"gitID":"ChoChihTun"},"content":"                return true;"},{"lineNumber":139,"author":{"gitID":"ChoChihTun"},"content":"            }"},{"lineNumber":140,"author":{"gitID":"ChoChihTun"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"ChoChihTun"},"content":"        return false;"},{"lineNumber":142,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":144,"author":{"gitID":"ChoChihTun"},"content":"    @Override"},{"lineNumber":145,"author":{"gitID":"ChoChihTun"},"content":"    public CalendarView getRoot() {"},{"lineNumber":146,"author":{"gitID":"ChoChihTun"},"content":"        return calendarView;"},{"lineNumber":147,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":149,"author":{"gitID":"ChoChihTun"},"content":"}"}],"authorContributionMap":{"ChoChihTun":147,"-":2}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitID":"yungyung04"},"content":"    public static final String MESSAGE_INVALID_INPUT_TYPES \u003d \"The input type specified is invalid \\n%1$s\";"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"},{"lineNumber":12,"author":{"gitID":"yungyung04"},"content":"    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The task index provided is invalid\";"},{"lineNumber":13,"author":{"gitID":"yungyung04"},"content":"    public static final String MESSAGE_INVALID_TUTEE_INDEX \u003d \"The person index provided does not refer to a tutee\";"},{"lineNumber":14,"author":{"gitID":"yungyung04"},"content":"    public static final String MESSAGE_INVALID_FILTER_CATEGORY \u003d \"The filter category specified is invalid \\n%1$s\";"},{"lineNumber":15,"author":{"gitID":"yungyung04"},"content":"    public static final String MESSAGE_INVALID_SORTER_CATEGORY \u003d \"The sort category specified is invalid \\n%1$s\";"},{"lineNumber":16,"author":{"gitID":"yungyung04"},"content":"    public static final String MESSAGE_INVALID_DATE_TIME \u003d \"The input date and time is invalid. \""},{"lineNumber":17,"author":{"gitID":"ChoChihTun"},"content":"            + \"It should be in the form of dd/mm/yyyy hh:mm\";"},{"lineNumber":18,"author":{"gitID":"yungyung04"},"content":"    public static final String MESSAGE_INVALID_KEYWORD_GIVEN \u003d \"The given keywords are invalid\";"},{"lineNumber":19,"author":{"gitID":"yungyung04"},"content":"    public static final String MESSAGE_INVALID_DURATION \u003d \"The duration format is invalid. \""},{"lineNumber":20,"author":{"gitID":"yungyung04"},"content":"            + \"It should be in the form of XXh:XXm and it cannot be zero\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":22,"author":{"gitID":"ChoChihTun"},"content":"    public static final String MESSAGE_TASKS_LISTED_OVERVIEW \u003d \"%1$d tasks listed!\";"},{"lineNumber":23,"author":{"gitID":"yungyung04"},"content":"    public static final String MESSAGE_INVALID_MONTH_RANGE_FORMAT \u003d \"The keywords are invalid. 2 different months \""},{"lineNumber":24,"author":{"gitID":"yungyung04"},"content":"            + \"should be referred when \u0027between\u0027 is chosen as the input type.\";"},{"lineNumber":25,"author":{"gitID":"ChoChihTun"},"content":"    public static final String MESSAGE_TASK_TIMING_CLASHES \u003d \"This task clashes with another task\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yungyung04":11,"ChoChihTun":3,"-":12}},{"path":"src/test/java/seedu/address/testutil/ModelStub.java","lines":[{"lineNumber":1,"author":{"gitID":"yungyung04"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":3,"author":{"gitID":"yungyung04"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"yungyung04"},"content":"import java.util.Comparator;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":12,"author":{"gitID":"a-shakra"},"content":"import seedu.address.model.Task;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":16,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.model.task.exceptions.TimingClashException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * A default model stub that have all of the methods failing."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"yungyung04"},"content":"public class ModelStub implements Model {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"a-shakra"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"yungyung04"},"content":"    public void addTask(Task task) throws TimingClashException {"},{"lineNumber":29,"author":{"gitID":"a-shakra"},"content":"        fail(\"This method should not be called\");"},{"lineNumber":30,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":32,"author":{"gitID":"a-shakra"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"a-shakra"},"content":"    public void deleteTask(Task task) {"},{"lineNumber":34,"author":{"gitID":"a-shakra"},"content":"        fail(\"This method should not be called\");"},{"lineNumber":35,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":37,"author":{"gitID":"a-shakra"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"a-shakra"},"content":"    public ObservableList\u003cTask\u003e getFilteredTaskList() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"a-shakra"},"content":"    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":65,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":73,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":86,"author":{"gitID":"yungyung04"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"yungyung04"},"content":"    public void sortFilteredPersonList(Comparator\u003cPerson\u003e comparator) {"},{"lineNumber":88,"author":{"gitID":"ChoChihTun"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":89,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":91,"author":{"gitID":"yungyung04"},"content":"    @Override"},{"lineNumber":92,"author":{"gitID":"yungyung04"},"content":"    public void sortFilteredTaskList(Comparator\u003cTask\u003e comparator) {"},{"lineNumber":93,"author":{"gitID":"yungyung04"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":94,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"yungyung04"},"content":"}"}],"authorContributionMap":{"yungyung04":16,"ChoChihTun":3,"a-shakra":18,"-":58}},{"path":"src/main/java/seedu/address/commons/events/ui/TaskPanelSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"a-shakra"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"a-shakra"},"content":"import seedu.address.ui.TaskCard;"},{"lineNumber":5,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":6,"author":{"gitID":"a-shakra"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"a-shakra"},"content":" * Represents a selection change in the Person List Panel"},{"lineNumber":8,"author":{"gitID":"a-shakra"},"content":" */"},{"lineNumber":9,"author":{"gitID":"a-shakra"},"content":"public class TaskPanelSelectionChangedEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":11,"author":{"gitID":"a-shakra"},"content":"    private final TaskCard newSelection;"},{"lineNumber":12,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":13,"author":{"gitID":"a-shakra"},"content":"    public TaskPanelSelectionChangedEvent(TaskCard newSelection) {"},{"lineNumber":14,"author":{"gitID":"a-shakra"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":15,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":17,"author":{"gitID":"a-shakra"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"a-shakra"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"a-shakra"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":20,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":22,"author":{"gitID":"a-shakra"},"content":"    public TaskCard getNewSelection() {"},{"lineNumber":23,"author":{"gitID":"a-shakra"},"content":"        return newSelection;"},{"lineNumber":24,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":26,"author":{"gitID":"a-shakra"},"content":"}"}],"authorContributionMap":{"a-shakra":25,"-":1}},{"path":"src/main/java/seedu/address/commons/events/model/AddressBookChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/** Indicates the AddressBook in the model has changed*/"},{"lineNumber":7,"author":{"gitID":"-"},"content":"public class AddressBookChangedEvent extends BaseEvent {"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public final ReadOnlyAddressBook data;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public AddressBookChangedEvent(ReadOnlyAddressBook data) {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        this.data \u003d data;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitID":"a-shakra"},"content":"        return \"number of persons \" + data.getPersonList().size() + \", number of tags \" + data.getTagList().size()"},{"lineNumber":18,"author":{"gitID":"a-shakra"},"content":"                + \"number of tasks\" + data.getTaskList().size();"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"a-shakra":2,"-":18}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"a-shakra"},"content":"import seedu.address.model.Task;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"a-shakra"},"content":"    ObservableList\u003cTask\u003e getFilteredTaskList();"},{"lineNumber":27,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"a-shakra":3,"-":27}},{"path":"src/main/java/seedu/address/logic/parser/DeleteTaskCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"yungyung04"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":5,"author":{"gitID":"yungyung04"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"yungyung04"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"yungyung04"},"content":"import seedu.address.logic.commands.DeleteTaskCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"yungyung04"},"content":"//@@author yungyung04"},{"lineNumber":11,"author":{"gitID":"yungyung04"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"yungyung04"},"content":" * Parses input arguments and creates a new DeleteTaskCommand object"},{"lineNumber":13,"author":{"gitID":"yungyung04"},"content":" */"},{"lineNumber":14,"author":{"gitID":"yungyung04"},"content":"public class DeleteTaskCommandParser implements Parser\u003cDeleteTaskCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"yungyung04"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteTaskCommand"},{"lineNumber":17,"author":{"gitID":"yungyung04"},"content":"     * and returns an DeleteTaskCommand object for execution."},{"lineNumber":18,"author":{"gitID":"yungyung04"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"yungyung04"},"content":"    public DeleteTaskCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"yungyung04"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"yungyung04"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":23,"author":{"gitID":"yungyung04"},"content":"            return new DeleteTaskCommand(index);"},{"lineNumber":24,"author":{"gitID":"yungyung04"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"yungyung04"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"yungyung04"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTaskCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"yungyung04"},"content":"}"}],"authorContributionMap":{"yungyung04":26,"-":3}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":47,"author":{"gitID":"ChoChihTun"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parsePersonTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            Person person \u003d new Person(name, phone, email, address, tagList);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"            return new AddCommand(person);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ChoChihTun":1,"-":64}},{"path":"src/test/java/guitests/guihandles/TaskListPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":7,"author":{"gitID":"a-shakra"},"content":"import seedu.address.model.Task;"},{"lineNumber":8,"author":{"gitID":"a-shakra"},"content":"import seedu.address.ui.TaskCard;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Provides a handle for {@code PersonListPanel} containing the list of {@code PersonCard}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"a-shakra"},"content":"public class TaskListPanelHandle extends NodeHandle\u003cListView\u003cTaskCard\u003e\u003e {"},{"lineNumber":14,"author":{"gitID":"a-shakra"},"content":"    public static final String TASK_LIST_VIEW_ID \u003d \"#taskListView\";"},{"lineNumber":15,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":16,"author":{"gitID":"a-shakra"},"content":"    private Optional\u003cTaskCard\u003e lastRememberedSelectedTaskCard;"},{"lineNumber":17,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":18,"author":{"gitID":"a-shakra"},"content":"    public TaskListPanelHandle(ListView\u003cTaskCard\u003e taskListPanelNode) {"},{"lineNumber":19,"author":{"gitID":"a-shakra"},"content":"        super(taskListPanelNode);"},{"lineNumber":20,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":22,"author":{"gitID":"a-shakra"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"a-shakra"},"content":"     * Returns a handle to the selected {@code TaskCardHandle}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * A maximum of 1 item can be selected at any time."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @throws AssertionError if no card is selected, or more than 1 card is selected."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"a-shakra"},"content":"    public TaskCardHandle getHandleToSelectedCard() {"},{"lineNumber":28,"author":{"gitID":"a-shakra"},"content":"        List\u003cTaskCard\u003e taskList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":29,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":30,"author":{"gitID":"a-shakra"},"content":"        if (taskList.size() !\u003d 1) {"},{"lineNumber":31,"author":{"gitID":"a-shakra"},"content":"            throw new AssertionError(\"Task list size expected 1.\");"},{"lineNumber":32,"author":{"gitID":"a-shakra"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":34,"author":{"gitID":"a-shakra"},"content":"        return new TaskCardHandle(taskList.get(0).getRoot());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Returns the index of the selected card."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public int getSelectedCardIndex() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return getRootNode().getSelectionModel().getSelectedIndex();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Returns true if a card is currently selected."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean isAnyCardSelected() {"},{"lineNumber":48,"author":{"gitID":"a-shakra"},"content":"        List\u003cTaskCard\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (selectedCardsList.size() \u003e 1) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Card list size expected 0 or 1.\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return !selectedCardsList.isEmpty();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Navigates the listview to display and select the person."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"a-shakra"},"content":"    public void navigateToCard(Task task) {"},{"lineNumber":61,"author":{"gitID":"a-shakra"},"content":"        List\u003cTaskCard\u003e cards \u003d getRootNode().getItems();"},{"lineNumber":62,"author":{"gitID":"a-shakra"},"content":"        Optional\u003cTaskCard\u003e matchingCard \u003d cards.stream().filter(card -\u003e card.task.equals(task)).findFirst();"},{"lineNumber":63,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":64,"author":{"gitID":"a-shakra"},"content":"        if (!matchingCard.isPresent()) {"},{"lineNumber":65,"author":{"gitID":"a-shakra"},"content":"            throw new IllegalArgumentException(\"Task does not exist.\");"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            getRootNode().scrollTo(matchingCard.get());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            getRootNode().getSelectionModel().select(matchingCard.get());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"a-shakra"},"content":"     * Returns the task card handle of a task associated with the {@code index} in the list."},{"lineNumber":77,"author":{"gitID":"a-shakra"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"a-shakra"},"content":"    public TaskCardHandle getTaskCardHandle(int index) {"},{"lineNumber":79,"author":{"gitID":"a-shakra"},"content":"        return getTaskCardHandle(getRootNode().getItems().get(index).task);"},{"lineNumber":80,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":82,"author":{"gitID":"a-shakra"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"a-shakra"},"content":"     * Returns the {@code TaskCardHandle} of the specified {@code task} in the list."},{"lineNumber":84,"author":{"gitID":"a-shakra"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"a-shakra"},"content":"    public TaskCardHandle getTaskCardHandle(Task task) {"},{"lineNumber":86,"author":{"gitID":"a-shakra"},"content":"        Optional\u003cTaskCardHandle\u003e handle \u003d getRootNode().getItems().stream()"},{"lineNumber":87,"author":{"gitID":"a-shakra"},"content":"                .filter(card -\u003e card.task.equals(task))"},{"lineNumber":88,"author":{"gitID":"a-shakra"},"content":"                .map(card -\u003e new TaskCardHandle(card.getRoot()))"},{"lineNumber":89,"author":{"gitID":"a-shakra"},"content":"                .findFirst();"},{"lineNumber":90,"author":{"gitID":"a-shakra"},"content":"        return handle.orElseThrow(() -\u003e new IllegalArgumentException(\"Task does not exist.\"));"},{"lineNumber":91,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":93,"author":{"gitID":"a-shakra"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"a-shakra"},"content":"     * Selects the {@code TaskCard} at {@code index} in the list."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public void select(int index) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        getRootNode().getSelectionModel().select(index);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"a-shakra"},"content":"     * Remembers the selected {@code TaskCard} in the list."},{"lineNumber":102,"author":{"gitID":"a-shakra"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"a-shakra"},"content":"    public void rememberSelectedTaskCard() {"},{"lineNumber":104,"author":{"gitID":"a-shakra"},"content":"        List\u003cTaskCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":105,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":106,"author":{"gitID":"a-shakra"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":107,"author":{"gitID":"a-shakra"},"content":"            lastRememberedSelectedTaskCard \u003d Optional.empty();"},{"lineNumber":108,"author":{"gitID":"a-shakra"},"content":"        } else {"},{"lineNumber":109,"author":{"gitID":"a-shakra"},"content":"            lastRememberedSelectedTaskCard \u003d Optional.of(selectedItems.get(0));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Returns true if the selected {@code PersonCard} is different from the value remembered by the most recent"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * {@code rememberSelectedPersonCard()} call."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"a-shakra"},"content":"    public boolean isSelectedTaskCardChanged() {"},{"lineNumber":118,"author":{"gitID":"a-shakra"},"content":"        List\u003cTaskCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":119,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":120,"author":{"gitID":"a-shakra"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":121,"author":{"gitID":"a-shakra"},"content":"            return lastRememberedSelectedTaskCard.isPresent();"},{"lineNumber":122,"author":{"gitID":"a-shakra"},"content":"        } else {"},{"lineNumber":123,"author":{"gitID":"a-shakra"},"content":"            return !lastRememberedSelectedTaskCard.isPresent()"},{"lineNumber":124,"author":{"gitID":"a-shakra"},"content":"                    || !lastRememberedSelectedTaskCard.get().equals(selectedItems.get(0));"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * Returns the size of the list."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public int getListSize() {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        return getRootNode().getItems().size();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"a-shakra":64,"-":70}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"yungyung04"},"content":"import seedu.address.logic.commands.AddPersonalTaskCommand;"},{"lineNumber":11,"author":{"gitID":"yungyung04"},"content":"import seedu.address.logic.commands.AddTuitionTaskCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddTuteeCommand;"},{"lineNumber":13,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.logic.commands.ChangeCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":17,"author":{"gitID":"yungyung04"},"content":"import seedu.address.logic.commands.DeleteTaskCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":20,"author":{"gitID":"yungyung04"},"content":"import seedu.address.logic.commands.FindPersonCommand;"},{"lineNumber":21,"author":{"gitID":"yungyung04"},"content":"import seedu.address.logic.commands.FindTaskCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":25,"author":{"gitID":"a-shakra"},"content":"import seedu.address.logic.commands.ListTaskCommand;"},{"lineNumber":26,"author":{"gitID":"yungyung04"},"content":"import seedu.address.logic.commands.ListTuteeCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":28,"author":{"gitID":"yungyung04"},"content":"import seedu.address.logic.commands.SortPersonCommand;"},{"lineNumber":29,"author":{"gitID":"yungyung04"},"content":"import seedu.address.logic.commands.SortTaskCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":35,"author":{"gitID":"-"},"content":" */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":61,"author":{"gitID":"ChoChihTun"},"content":"        case AddCommand.COMMAND_ALIAS:"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":65,"author":{"gitID":"ChoChihTun"},"content":"        case EditCommand.COMMAND_ALIAS:"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":69,"author":{"gitID":"ChoChihTun"},"content":"        case DeleteCommand.COMMAND_ALIAS:"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":73,"author":{"gitID":"ChoChihTun"},"content":"        case ClearCommand.COMMAND_ALIAS:"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":77,"author":{"gitID":"ChoChihTun"},"content":"        case ListCommand.COMMAND_ALIAS:"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"a-shakra"},"content":"        case ListTaskCommand.COMMAND_WORD:"},{"lineNumber":81,"author":{"gitID":"a-shakra"},"content":"        case ListTaskCommand.COMMAND_ALIAS:"},{"lineNumber":82,"author":{"gitID":"a-shakra"},"content":"            return new ListTaskCommand();"},{"lineNumber":83,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":85,"author":{"gitID":"ChoChihTun"},"content":"        case HistoryCommand.COMMAND_ALIAS:"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":95,"author":{"gitID":"ChoChihTun"},"content":"        case UndoCommand.COMMAND_ALIAS:"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":99,"author":{"gitID":"ChoChihTun"},"content":"        case RedoCommand.COMMAND_ALIAS:"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"yungyung04"},"content":"        case AddTuitionTaskCommand.COMMAND_WORD:"},{"lineNumber":103,"author":{"gitID":"yungyung04"},"content":"            return new AddTuitionTaskCommandParser().parse(arguments);"},{"lineNumber":104,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":105,"author":{"gitID":"yungyung04"},"content":"        case AddPersonalTaskCommand.COMMAND_WORD:"},{"lineNumber":106,"author":{"gitID":"yungyung04"},"content":"            return new AddPersonalTaskCommandParser().parse(arguments);"},{"lineNumber":107,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":108,"author":{"gitID":"yungyung04"},"content":"        case DeleteTaskCommand.COMMAND_WORD:"},{"lineNumber":109,"author":{"gitID":"yungyung04"},"content":"            return new DeleteTaskCommandParser().parse(arguments);"},{"lineNumber":110,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        case AddTuteeCommand.COMMAND_WORD:"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            return new AddTuteeCommandParser().parse(arguments);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"yungyung04"},"content":"        case ListTuteeCommand.COMMAND_WORD:"},{"lineNumber":115,"author":{"gitID":"yungyung04"},"content":"            return new ListTuteeCommand();"},{"lineNumber":116,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":117,"author":{"gitID":"yungyung04"},"content":"        case FindPersonCommand.COMMAND_WORD:"},{"lineNumber":118,"author":{"gitID":"yungyung04"},"content":"        case FindPersonCommand.COMMAND_ALIAS:"},{"lineNumber":119,"author":{"gitID":"yungyung04"},"content":"            return new FindPersonCommandParser().parse(arguments);"},{"lineNumber":120,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":121,"author":{"gitID":"yungyung04"},"content":"        case FindTaskCommand.COMMAND_WORD:"},{"lineNumber":122,"author":{"gitID":"yungyung04"},"content":"            return new FindTaskCommandParser().parse(arguments);"},{"lineNumber":123,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":124,"author":{"gitID":"yungyung04"},"content":"        case SortPersonCommand.COMMAND_WORD:"},{"lineNumber":125,"author":{"gitID":"a-shakra"},"content":"        case SortPersonCommand.COMMAND_ALIAS:"},{"lineNumber":126,"author":{"gitID":"yungyung04"},"content":"            return new SortPersonCommandParser().parse(arguments);"},{"lineNumber":127,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":128,"author":{"gitID":"yungyung04"},"content":"        case SortTaskCommand.COMMAND_WORD:"},{"lineNumber":129,"author":{"gitID":"a-shakra"},"content":"        case SortTaskCommand.COMMAND_ALIAS:"},{"lineNumber":130,"author":{"gitID":"yungyung04"},"content":"            return new SortTaskCommandParser().parse(arguments);"},{"lineNumber":131,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":132,"author":{"gitID":"ChoChihTun"},"content":"        case ChangeCommand.COMMAND_WORD:"},{"lineNumber":133,"author":{"gitID":"ChoChihTun"},"content":"            return new ChangeCommandParser().parse(arguments);"},{"lineNumber":134,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yungyung04":34,"ChoChihTun":11,"a-shakra":7,"-":88}},{"path":"src/main/java/seedu/address/logic/parser/exceptions/SameTimeUnitException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"ChoChihTun"},"content":"//@@author ChoChihTun"},{"lineNumber":4,"author":{"gitID":"ChoChihTun"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"ChoChihTun"},"content":" * Signals that the input calendar view page time unit clashes with current time unit"},{"lineNumber":6,"author":{"gitID":"ChoChihTun"},"content":" */"},{"lineNumber":7,"author":{"gitID":"ChoChihTun"},"content":"public class SameTimeUnitException extends Exception {"},{"lineNumber":8,"author":{"gitID":"ChoChihTun"},"content":"    public SameTimeUnitException(String message) {"},{"lineNumber":9,"author":{"gitID":"ChoChihTun"},"content":"        super(message);"},{"lineNumber":10,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":11,"author":{"gitID":"ChoChihTun"},"content":"}"}],"authorContributionMap":{"ChoChihTun":9,"-":2}},{"path":"src/main/java/seedu/address/commons/util/EncryptionUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"raymond511"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"raymond511"},"content":""},{"lineNumber":3,"author":{"gitID":"raymond511"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"raymond511"},"content":"import java.io.FileInputStream;"},{"lineNumber":5,"author":{"gitID":"raymond511"},"content":"import java.io.FileOutputStream;"},{"lineNumber":6,"author":{"gitID":"raymond511"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"raymond511"},"content":"import java.io.UnsupportedEncodingException;"},{"lineNumber":8,"author":{"gitID":"raymond511"},"content":"import java.security.GeneralSecurityException;"},{"lineNumber":9,"author":{"gitID":"raymond511"},"content":"import java.security.MessageDigest;"},{"lineNumber":10,"author":{"gitID":"raymond511"},"content":"import java.security.NoSuchAlgorithmException;"},{"lineNumber":11,"author":{"gitID":"raymond511"},"content":"import java.security.NoSuchProviderException;"},{"lineNumber":12,"author":{"gitID":"raymond511"},"content":"import java.security.SecureRandom;"},{"lineNumber":13,"author":{"gitID":"raymond511"},"content":"import java.util.logging.Logger;"},{"lineNumber":14,"author":{"gitID":"raymond511"},"content":"import javax.crypto.BadPaddingException;"},{"lineNumber":15,"author":{"gitID":"raymond511"},"content":"import javax.crypto.Cipher;"},{"lineNumber":16,"author":{"gitID":"raymond511"},"content":""},{"lineNumber":17,"author":{"gitID":"raymond511"},"content":"import javax.crypto.IllegalBlockSizeException;"},{"lineNumber":18,"author":{"gitID":"raymond511"},"content":"import javax.crypto.SecretKey;"},{"lineNumber":19,"author":{"gitID":"raymond511"},"content":""},{"lineNumber":20,"author":{"gitID":"raymond511"},"content":"import javax.crypto.spec.SecretKeySpec;"},{"lineNumber":21,"author":{"gitID":"raymond511"},"content":""},{"lineNumber":22,"author":{"gitID":"raymond511"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":23,"author":{"gitID":"raymond511"},"content":""},{"lineNumber":24,"author":{"gitID":"raymond511"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"raymond511"},"content":" * A Class that encrypts and decrypts XML files stored on the hard disk."},{"lineNumber":26,"author":{"gitID":"raymond511"},"content":" *"},{"lineNumber":27,"author":{"gitID":"raymond511"},"content":" */"},{"lineNumber":28,"author":{"gitID":"raymond511"},"content":"//@@author raymond511"},{"lineNumber":29,"author":{"gitID":"raymond511"},"content":"public class EncryptionUtil {"},{"lineNumber":30,"author":{"gitID":"raymond511"},"content":""},{"lineNumber":31,"author":{"gitID":"raymond511"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"raymond511"},"content":"     *The standard version of the JRE/JDK are under export restrictions."},{"lineNumber":33,"author":{"gitID":"raymond511"},"content":"     *That also includes that some cryptographic algorithms are not allowed to be shipped in the standard version."},{"lineNumber":34,"author":{"gitID":"raymond511"},"content":"     *Replace files in library with Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files 8"},{"lineNumber":35,"author":{"gitID":"raymond511"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"raymond511"},"content":""},{"lineNumber":37,"author":{"gitID":"raymond511"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(EncryptionUtil.class);"},{"lineNumber":38,"author":{"gitID":"raymond511"},"content":"    private static final String passwordToHash \u003d \"password\";"},{"lineNumber":39,"author":{"gitID":"raymond511"},"content":"    private static byte[] salt \u003d new byte[0];"},{"lineNumber":40,"author":{"gitID":"raymond511"},"content":"    private static final String password \u003d getSecurePassword(passwordToHash, salt);"},{"lineNumber":41,"author":{"gitID":"raymond511"},"content":""},{"lineNumber":42,"author":{"gitID":"raymond511"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"raymond511"},"content":"     * Adds salt to password cryptography"},{"lineNumber":44,"author":{"gitID":"raymond511"},"content":"     * @throws NoSuchAlgorithmException if salt acnnot be generated"},{"lineNumber":45,"author":{"gitID":"raymond511"},"content":"     * @throws NoSuchProviderException if salt cannot be generated"},{"lineNumber":46,"author":{"gitID":"raymond511"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"raymond511"},"content":""},{"lineNumber":48,"author":{"gitID":"raymond511"},"content":"    private static byte[] getSalt() throws NoSuchAlgorithmException, NoSuchProviderException {"},{"lineNumber":49,"author":{"gitID":"raymond511"},"content":"        try {"},{"lineNumber":50,"author":{"gitID":"raymond511"},"content":"            SecureRandom sr \u003d SecureRandom.getInstance(\"SHA1PRNG\", \"SUN\");"},{"lineNumber":51,"author":{"gitID":"raymond511"},"content":"            byte[] salt \u003d new byte[16];"},{"lineNumber":52,"author":{"gitID":"raymond511"},"content":"            sr.nextBytes(salt);"},{"lineNumber":53,"author":{"gitID":"raymond511"},"content":"        } catch (NoSuchAlgorithmException e) {"},{"lineNumber":54,"author":{"gitID":"raymond511"},"content":"            logger.severe(\"This algorithm is not supported \" + e.getMessage());"},{"lineNumber":55,"author":{"gitID":"raymond511"},"content":"        } catch (NoSuchProviderException e) {"},{"lineNumber":56,"author":{"gitID":"raymond511"},"content":"            logger.severe(\"The provider is not available \" + e.getMessage());"},{"lineNumber":57,"author":{"gitID":"raymond511"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"raymond511"},"content":"        return salt;"},{"lineNumber":59,"author":{"gitID":"raymond511"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"raymond511"},"content":""},{"lineNumber":61,"author":{"gitID":"raymond511"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"raymond511"},"content":"     * Generates a secure password"},{"lineNumber":63,"author":{"gitID":"raymond511"},"content":"     *"},{"lineNumber":64,"author":{"gitID":"raymond511"},"content":"     * @param passwordToHash used to generate a new password"},{"lineNumber":65,"author":{"gitID":"raymond511"},"content":"     * @param salt to adds security to the new password"},{"lineNumber":66,"author":{"gitID":"raymond511"},"content":"     * @throws NoSuchAlgorithmException if new password cannot be generated"},{"lineNumber":67,"author":{"gitID":"raymond511"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"raymond511"},"content":""},{"lineNumber":69,"author":{"gitID":"raymond511"},"content":"    private static String getSecurePassword(String passwordToHash, byte[] salt) {"},{"lineNumber":70,"author":{"gitID":"raymond511"},"content":"        String generatedPassword \u003d null;"},{"lineNumber":71,"author":{"gitID":"raymond511"},"content":"        try {"},{"lineNumber":72,"author":{"gitID":"raymond511"},"content":"            MessageDigest md \u003d MessageDigest.getInstance(\"MD5\");"},{"lineNumber":73,"author":{"gitID":"raymond511"},"content":"            md.update(salt);"},{"lineNumber":74,"author":{"gitID":"raymond511"},"content":"            byte[] bytes \u003d md.digest(passwordToHash.getBytes());"},{"lineNumber":75,"author":{"gitID":"raymond511"},"content":"            StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":76,"author":{"gitID":"raymond511"},"content":"            for (int i \u003d 0; i \u003c bytes.length; i++) {"},{"lineNumber":77,"author":{"gitID":"raymond511"},"content":"                sb.append(Integer.toString((bytes[i] \u0026 0xff) + 0x100, 16).substring(1));"},{"lineNumber":78,"author":{"gitID":"raymond511"},"content":"            }"},{"lineNumber":79,"author":{"gitID":"raymond511"},"content":"            generatedPassword \u003d sb.toString();"},{"lineNumber":80,"author":{"gitID":"raymond511"},"content":"        } catch (NoSuchAlgorithmException e) {"},{"lineNumber":81,"author":{"gitID":"raymond511"},"content":"            logger.severe(\"This algorithm is not supported \" + e.getMessage());"},{"lineNumber":82,"author":{"gitID":"raymond511"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"raymond511"},"content":"        return generatedPassword;"},{"lineNumber":84,"author":{"gitID":"raymond511"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"raymond511"},"content":""},{"lineNumber":86,"author":{"gitID":"raymond511"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"raymond511"},"content":"     * Encrypts an XML file."},{"lineNumber":88,"author":{"gitID":"raymond511"},"content":"     *"},{"lineNumber":89,"author":{"gitID":"raymond511"},"content":"     * @param file path of the file to be encrypted"},{"lineNumber":90,"author":{"gitID":"raymond511"},"content":"     * @throws IOException if file could not be found"},{"lineNumber":91,"author":{"gitID":"raymond511"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"raymond511"},"content":"    public static void encrypt(File file) throws IOException {"},{"lineNumber":93,"author":{"gitID":"raymond511"},"content":"        try {"},{"lineNumber":94,"author":{"gitID":"raymond511"},"content":"            Cipher cipher \u003d Cipher.getInstance(\"AES/ECB/PKCS5Padding\");"},{"lineNumber":95,"author":{"gitID":"raymond511"},"content":"            SecretKey privateKey \u003d generateKey();"},{"lineNumber":96,"author":{"gitID":"raymond511"},"content":"            cipher.init(Cipher.ENCRYPT_MODE, privateKey);"},{"lineNumber":97,"author":{"gitID":"raymond511"},"content":"            fileToBytes(cipher, file);"},{"lineNumber":98,"author":{"gitID":"raymond511"},"content":"        } catch (GeneralSecurityException gse) {"},{"lineNumber":99,"author":{"gitID":"raymond511"},"content":"            logger.severe(\"Cipher or Padding might not be supported \" + gse.getMessage());"},{"lineNumber":100,"author":{"gitID":"raymond511"},"content":"        } catch (UnsupportedEncodingException use) {"},{"lineNumber":101,"author":{"gitID":"raymond511"},"content":"            logger.info(\"Encoding Unsupported \" + use.getMessage());"},{"lineNumber":102,"author":{"gitID":"raymond511"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"raymond511"},"content":""},{"lineNumber":104,"author":{"gitID":"raymond511"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"raymond511"},"content":""},{"lineNumber":106,"author":{"gitID":"raymond511"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"raymond511"},"content":"     * Decrypts XML file"},{"lineNumber":108,"author":{"gitID":"raymond511"},"content":"     *"},{"lineNumber":109,"author":{"gitID":"raymond511"},"content":"     * @param file path of the file to be decrypted"},{"lineNumber":110,"author":{"gitID":"raymond511"},"content":"     * @throws IOException if file could not be found"},{"lineNumber":111,"author":{"gitID":"raymond511"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"raymond511"},"content":"    public static void decrypt(File file) throws IOException {"},{"lineNumber":113,"author":{"gitID":"raymond511"},"content":""},{"lineNumber":114,"author":{"gitID":"raymond511"},"content":"        try {"},{"lineNumber":115,"author":{"gitID":"raymond511"},"content":"            Cipher cipher \u003d Cipher.getInstance(\"AES/ECB/PKCS5Padding\");"},{"lineNumber":116,"author":{"gitID":"raymond511"},"content":"            SecretKey privateKey \u003d generateKey();"},{"lineNumber":117,"author":{"gitID":"raymond511"},"content":"            cipher.init(Cipher.DECRYPT_MODE, privateKey);"},{"lineNumber":118,"author":{"gitID":"raymond511"},"content":"            fileToBytes(cipher, file);"},{"lineNumber":119,"author":{"gitID":"raymond511"},"content":"        } catch (GeneralSecurityException gse) {"},{"lineNumber":120,"author":{"gitID":"raymond511"},"content":"            logger.severe(\"Cipher or Padding might not be supported \" + gse.getMessage());"},{"lineNumber":121,"author":{"gitID":"raymond511"},"content":"        } catch (UnsupportedEncodingException use) {"},{"lineNumber":122,"author":{"gitID":"raymond511"},"content":"            logger.info(\"Encoding Unsupported \" + use.getMessage());"},{"lineNumber":123,"author":{"gitID":"raymond511"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"raymond511"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"raymond511"},"content":""},{"lineNumber":126,"author":{"gitID":"raymond511"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"raymond511"},"content":"     * Processes the given file using the given cipher"},{"lineNumber":128,"author":{"gitID":"raymond511"},"content":"     *"},{"lineNumber":129,"author":{"gitID":"raymond511"},"content":"     * @param cipher cipher used for encryption or decryption"},{"lineNumber":130,"author":{"gitID":"raymond511"},"content":"     * @param file path of the file to be encrypted or decrypted"},{"lineNumber":131,"author":{"gitID":"raymond511"},"content":"     * @throws IOException if file could not be found"},{"lineNumber":132,"author":{"gitID":"raymond511"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"raymond511"},"content":""},{"lineNumber":134,"author":{"gitID":"raymond511"},"content":"    private static void fileToBytes(Cipher cipher, File file) throws IOException {"},{"lineNumber":135,"author":{"gitID":"raymond511"},"content":""},{"lineNumber":136,"author":{"gitID":"raymond511"},"content":"        FileInputStream fileInputStream \u003d null;"},{"lineNumber":137,"author":{"gitID":"raymond511"},"content":"        FileOutputStream fileOutputStream \u003d null;"},{"lineNumber":138,"author":{"gitID":"raymond511"},"content":"        try {"},{"lineNumber":139,"author":{"gitID":"raymond511"},"content":"            fileInputStream \u003d new FileInputStream(file);"},{"lineNumber":140,"author":{"gitID":"raymond511"},"content":"            byte[] readBytes \u003d new byte[(int) file.length()];"},{"lineNumber":141,"author":{"gitID":"raymond511"},"content":"            fileInputStream.read(readBytes);"},{"lineNumber":142,"author":{"gitID":"raymond511"},"content":""},{"lineNumber":143,"author":{"gitID":"raymond511"},"content":"            byte[] writeBytes \u003d cipher.doFinal(readBytes);"},{"lineNumber":144,"author":{"gitID":"raymond511"},"content":"            fileOutputStream \u003d new FileOutputStream(file);"},{"lineNumber":145,"author":{"gitID":"raymond511"},"content":"            fileOutputStream.write(writeBytes);"},{"lineNumber":146,"author":{"gitID":"raymond511"},"content":""},{"lineNumber":147,"author":{"gitID":"raymond511"},"content":"        } catch (BadPaddingException be) {"},{"lineNumber":148,"author":{"gitID":"raymond511"},"content":"            logger.info(\"File might not decoded/encoded properly due to bad padding \" + be.getMessage());"},{"lineNumber":149,"author":{"gitID":"raymond511"},"content":"        } catch (IllegalBlockSizeException ibe) {"},{"lineNumber":150,"author":{"gitID":"raymond511"},"content":"            logger.info(\"Input length size must be in multiple of 16  \" + ibe.getMessage());"},{"lineNumber":151,"author":{"gitID":"raymond511"},"content":"        } finally {"},{"lineNumber":152,"author":{"gitID":"raymond511"},"content":"            try {"},{"lineNumber":153,"author":{"gitID":"raymond511"},"content":"                if (fileInputStream !\u003d null) {"},{"lineNumber":154,"author":{"gitID":"raymond511"},"content":"                    fileInputStream.close();"},{"lineNumber":155,"author":{"gitID":"raymond511"},"content":"                }"},{"lineNumber":156,"author":{"gitID":"raymond511"},"content":"                if (fileOutputStream !\u003d null) {"},{"lineNumber":157,"author":{"gitID":"raymond511"},"content":"                    fileOutputStream.close();"},{"lineNumber":158,"author":{"gitID":"raymond511"},"content":"                }"},{"lineNumber":159,"author":{"gitID":"raymond511"},"content":"            } catch (IOException ioe) {"},{"lineNumber":160,"author":{"gitID":"raymond511"},"content":"                logger.info(\"File streams could not be closed  \" + ioe.getMessage());"},{"lineNumber":161,"author":{"gitID":"raymond511"},"content":"            }"},{"lineNumber":162,"author":{"gitID":"raymond511"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"raymond511"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"raymond511"},"content":""},{"lineNumber":165,"author":{"gitID":"raymond511"},"content":"    /**"},{"lineNumber":166,"author":{"gitID":"raymond511"},"content":"     * Method to generate a SecretKey using the password provided"},{"lineNumber":167,"author":{"gitID":"raymond511"},"content":"     *"},{"lineNumber":168,"author":{"gitID":"raymond511"},"content":"     * @return SecretKey generated using AES encryption"},{"lineNumber":169,"author":{"gitID":"raymond511"},"content":"     */"},{"lineNumber":170,"author":{"gitID":"raymond511"},"content":"    public static SecretKey generateKey() {"},{"lineNumber":171,"author":{"gitID":"raymond511"},"content":"        SecretKeySpec secretKeySpec \u003d null;"},{"lineNumber":172,"author":{"gitID":"raymond511"},"content":"        try {"},{"lineNumber":173,"author":{"gitID":"raymond511"},"content":"            salt \u003d getSalt();"},{"lineNumber":174,"author":{"gitID":"raymond511"},"content":"            MessageDigest digester \u003d MessageDigest.getInstance(\"SHA-256\");"},{"lineNumber":175,"author":{"gitID":"raymond511"},"content":"            digester.update(password.getBytes(\"UTF-8\"));"},{"lineNumber":176,"author":{"gitID":"raymond511"},"content":"            byte[] key \u003d digester.digest();"},{"lineNumber":177,"author":{"gitID":"raymond511"},"content":"            secretKeySpec \u003d new SecretKeySpec(key , 0 , 16 ,  \"AES\");"},{"lineNumber":178,"author":{"gitID":"raymond511"},"content":"        } catch (NoSuchAlgorithmException nae) {"},{"lineNumber":179,"author":{"gitID":"raymond511"},"content":"            logger.info(\"Algorithm Unsupported \" + nae.getMessage());"},{"lineNumber":180,"author":{"gitID":"raymond511"},"content":"        } catch (UnsupportedEncodingException use) {"},{"lineNumber":181,"author":{"gitID":"raymond511"},"content":"            logger.info(\"Encoding Unsupported \" + use.getMessage());"},{"lineNumber":182,"author":{"gitID":"raymond511"},"content":"        } catch (NoSuchProviderException e) {"},{"lineNumber":183,"author":{"gitID":"raymond511"},"content":"            logger.severe(\"The provider is not available \" + e.getMessage());"},{"lineNumber":184,"author":{"gitID":"raymond511"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"raymond511"},"content":"        return secretKeySpec;"},{"lineNumber":186,"author":{"gitID":"raymond511"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"raymond511"},"content":"}"}],"authorContributionMap":{"raymond511":187}},{"path":"src/main/java/seedu/address/logic/parser/AddTuitionTaskCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"yungyung04"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DATE_TIME;"},{"lineNumber":5,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DURATION;"},{"lineNumber":6,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":7,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":8,"author":{"gitID":"yungyung04"},"content":"import java.time.LocalDateTime;"},{"lineNumber":9,"author":{"gitID":"ChoChihTun"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":10,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":14,"author":{"gitID":"yungyung04"},"content":"import seedu.address.logic.commands.AddTuitionTaskCommand;"},{"lineNumber":15,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.logic.parser.exceptions.DurationParseException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":19,"author":{"gitID":"yungyung04"},"content":"//@@author yungyung04"},{"lineNumber":20,"author":{"gitID":"yungyung04"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"yungyung04"},"content":" * Parses input arguments and creates a new AddTuitionTaskCommand object"},{"lineNumber":22,"author":{"gitID":"yungyung04"},"content":" */"},{"lineNumber":23,"author":{"gitID":"yungyung04"},"content":"public class AddTuitionTaskCommandParser implements Parser\u003cAddTuitionTaskCommand\u003e {"},{"lineNumber":24,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":25,"author":{"gitID":"yungyung04"},"content":"    private static final String INPUT_FORMAT_VALIDATION_REGEX \u003d \"\\\\d+\\\\s(\\\\d{2}/\\\\d{2}/\\\\d{4})\\\\s\\\\d{2}:\\\\d{2}\\\\s\""},{"lineNumber":26,"author":{"gitID":"yungyung04"},"content":"            + \"\\\\d{1,2}h\\\\d{1,2}m.*\";"},{"lineNumber":27,"author":{"gitID":"yungyung04"},"content":"    private static final int MAXIMUM_AMOUNT_OF_TASK_PARAMETER \u003d 5;"},{"lineNumber":28,"author":{"gitID":"yungyung04"},"content":"    private static final int INDEX_OF_PERSON_INDEX \u003d 0;"},{"lineNumber":29,"author":{"gitID":"yungyung04"},"content":"    private static final int INDEX_OF_DATE \u003d 1;"},{"lineNumber":30,"author":{"gitID":"yungyung04"},"content":"    private static final int INDEX_OF_TIME \u003d 2;"},{"lineNumber":31,"author":{"gitID":"yungyung04"},"content":"    private static final int INDEX_OF_DURATION \u003d 3;"},{"lineNumber":32,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":33,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"yungyung04"},"content":"     * Parses the given {@code String} of arguments in the context of the AddTuitionTaskCommand"},{"lineNumber":35,"author":{"gitID":"yungyung04"},"content":"     * and returns an AddTuitionTaskCommand object for execution."},{"lineNumber":36,"author":{"gitID":"yungyung04"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":37,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"yungyung04"},"content":"    public AddTuitionTaskCommand parse(String args) throws ParseException {"},{"lineNumber":39,"author":{"gitID":"yungyung04"},"content":"        if (!args.trim().matches(INPUT_FORMAT_VALIDATION_REGEX)) {"},{"lineNumber":40,"author":{"gitID":"yungyung04"},"content":"            throw new ParseException("},{"lineNumber":41,"author":{"gitID":"yungyung04"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTuitionTaskCommand.MESSAGE_USAGE));"},{"lineNumber":42,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":44,"author":{"gitID":"yungyung04"},"content":"        String[] arguments \u003d args.trim().split(\"\\\\s+\", MAXIMUM_AMOUNT_OF_TASK_PARAMETER);"},{"lineNumber":45,"author":{"gitID":"yungyung04"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"yungyung04"},"content":"            Index personIndex \u003d ParserUtil.parseIndex(arguments[INDEX_OF_PERSON_INDEX]);"},{"lineNumber":47,"author":{"gitID":"yungyung04"},"content":"            LocalDateTime taskDateTime \u003d"},{"lineNumber":48,"author":{"gitID":"yungyung04"},"content":"                    ParserUtil.parseDateTime(arguments[INDEX_OF_DATE] + \" \" + arguments[INDEX_OF_TIME]);"},{"lineNumber":49,"author":{"gitID":"yungyung04"},"content":"            String duration \u003d ParserUtil.parseDuration(arguments[INDEX_OF_DURATION]);"},{"lineNumber":50,"author":{"gitID":"yungyung04"},"content":"            String description \u003d ParserUtil.parseDescription(arguments, MAXIMUM_AMOUNT_OF_TASK_PARAMETER);"},{"lineNumber":51,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":52,"author":{"gitID":"yungyung04"},"content":"            return new AddTuitionTaskCommand(personIndex, taskDateTime, duration, description);"},{"lineNumber":53,"author":{"gitID":"yungyung04"},"content":"        } catch (DateTimeParseException dtpe) {"},{"lineNumber":54,"author":{"gitID":"yungyung04"},"content":"            throw new ParseException(MESSAGE_INVALID_DATE_TIME);"},{"lineNumber":55,"author":{"gitID":"yungyung04"},"content":"        } catch (DurationParseException dpe) {"},{"lineNumber":56,"author":{"gitID":"yungyung04"},"content":"            throw new ParseException(MESSAGE_INVALID_DURATION);"},{"lineNumber":57,"author":{"gitID":"yungyung04"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":58,"author":{"gitID":"yungyung04"},"content":"            throw new ParseException(MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":59,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"yungyung04"},"content":"}"}],"authorContributionMap":{"yungyung04":52,"ChoChihTun":4,"-":5}},{"path":"src/main/java/seedu/address/logic/parser/exceptions/InvalidBoundariesException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":4,"author":{"gitID":"yungyung04"},"content":"//@@author yungyung04"},{"lineNumber":5,"author":{"gitID":"yungyung04"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"yungyung04"},"content":" * Signals that the given keywords cannot serve as valid boundaries"},{"lineNumber":7,"author":{"gitID":"yungyung04"},"content":" */"},{"lineNumber":8,"author":{"gitID":"yungyung04"},"content":"public class InvalidBoundariesException extends Exception {"},{"lineNumber":9,"author":{"gitID":"yungyung04"},"content":"    public InvalidBoundariesException() {};"},{"lineNumber":10,"author":{"gitID":"yungyung04"},"content":"}"}],"authorContributionMap":{"yungyung04":8,"-":2}},{"path":"src/main/java/seedu/address/logic/parser/SortPersonCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"yungyung04"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_SORTER_CATEGORY;"},{"lineNumber":5,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_EDUCATION_LEVEL;"},{"lineNumber":6,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_GRADE;"},{"lineNumber":7,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_NAME;"},{"lineNumber":8,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_SCHOOL;"},{"lineNumber":9,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_SUBJECT;"},{"lineNumber":10,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"yungyung04"},"content":"import seedu.address.logic.commands.SortPersonCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"yungyung04"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"yungyung04"},"content":" * Parses input arguments and creates a new SortPersonCommand object"},{"lineNumber":20,"author":{"gitID":"yungyung04"},"content":" */"},{"lineNumber":21,"author":{"gitID":"yungyung04"},"content":"public class SortPersonCommandParser implements Parser\u003cSortPersonCommand\u003e {"},{"lineNumber":22,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":23,"author":{"gitID":"yungyung04"},"content":"    private static final String SORT_CATEGORY_VALIDATION_REGEX \u003d \"\\\\p{Alpha}+\";"},{"lineNumber":24,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":25,"author":{"gitID":"yungyung04"},"content":"    private List\u003cString\u003e validCategories \u003d"},{"lineNumber":26,"author":{"gitID":"yungyung04"},"content":"            new ArrayList\u003c\u003e(Arrays.asList(CATEGORY_NAME, CATEGORY_EDUCATION_LEVEL,"},{"lineNumber":27,"author":{"gitID":"yungyung04"},"content":"                    CATEGORY_GRADE, CATEGORY_SCHOOL, CATEGORY_SUBJECT));"},{"lineNumber":28,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":29,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"yungyung04"},"content":"     * Parses the given {@code String} of arguments in the context of the SortPersonCommand"},{"lineNumber":31,"author":{"gitID":"yungyung04"},"content":"     * and returns a SortPersonCommand object for execution."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"yungyung04"},"content":"    public SortPersonCommand parse(String args) throws ParseException {"},{"lineNumber":35,"author":{"gitID":"yungyung04"},"content":"        String sortCategory \u003d args.trim().toLowerCase();"},{"lineNumber":36,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":37,"author":{"gitID":"yungyung04"},"content":"        if (!sortCategory.matches(SORT_CATEGORY_VALIDATION_REGEX)) {"},{"lineNumber":38,"author":{"gitID":"yungyung04"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortPersonCommand.MESSAGE_USAGE));"},{"lineNumber":39,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"yungyung04"},"content":"        if (!validCategories.contains(sortCategory)) {"},{"lineNumber":41,"author":{"gitID":"yungyung04"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_SORTER_CATEGORY, SortPersonCommand.MESSAGE_USAGE));"},{"lineNumber":42,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"yungyung04"},"content":"        return new SortPersonCommand(sortCategory);"},{"lineNumber":44,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"yungyung04"},"content":"}"}],"authorContributionMap":{"yungyung04":36,"-":9}},{"path":"src/main/java/seedu/address/logic/parser/exceptions/DurationParseException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser.exceptions;"},{"lineNumber":2,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":3,"author":{"gitID":"ChoChihTun"},"content":"//@@author ChoChihTun"},{"lineNumber":4,"author":{"gitID":"ChoChihTun"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"ChoChihTun"},"content":" * Signals that the input duration format is invalid"},{"lineNumber":6,"author":{"gitID":"ChoChihTun"},"content":" */"},{"lineNumber":7,"author":{"gitID":"ChoChihTun"},"content":"public class DurationParseException extends Exception {"},{"lineNumber":8,"author":{"gitID":"ChoChihTun"},"content":"    public DurationParseException(String message) {"},{"lineNumber":9,"author":{"gitID":"ChoChihTun"},"content":"        super(message);"},{"lineNumber":10,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":11,"author":{"gitID":"ChoChihTun"},"content":"}"}],"authorContributionMap":{"ChoChihTun":10,"-":1}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DURATION;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"ChoChihTun"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitID":"ChoChihTun"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitID":"ChoChihTun"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":9,"author":{"gitID":"yungyung04"},"content":"import java.time.format.ResolverStyle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":18,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.logic.commands.ChangeCommand;"},{"lineNumber":19,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.logic.parser.exceptions.DurationParseException;"},{"lineNumber":20,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.logic.parser.exceptions.SameTimeUnitException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.tutee.EducationLevel;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.tutee.Grade;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.tutee.School;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.tutee.Subject;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":33,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":34,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":35,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":36,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":37,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":38,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":39,"author":{"gitID":"-"},"content":" */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":43,"author":{"gitID":"ChoChihTun"},"content":"    public static final String MESSAGE_INVALID_TAG \u003d \"%1$s tag is only for tutee.\";"},{"lineNumber":44,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":45,"author":{"gitID":"yungyung04"},"content":"    private static final String EMPTY_STRING \u003d \"\";"},{"lineNumber":46,"author":{"gitID":"ChoChihTun"},"content":"    private static final String TUTEE_TAG_NAME \u003d \"Tutee\";"},{"lineNumber":47,"author":{"gitID":"yungyung04"},"content":"    private static final String ZERO_DURATION_FIRST_FORMAT \u003d \"0h0m\";"},{"lineNumber":48,"author":{"gitID":"yungyung04"},"content":"    private static final String ZERO_DURATION_SECOND_FORMAT \u003d \"0h00m\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":138,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":164,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":175,"author":{"gitID":"ChoChihTun"},"content":"     * Parses a {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":176,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":181,"author":{"gitID":"ChoChihTun"},"content":"            if (isTuteeTag(tagName)) {"},{"lineNumber":182,"author":{"gitID":"ChoChihTun"},"content":"                tagName \u003d TUTEE_TAG_NAME;"},{"lineNumber":183,"author":{"gitID":"ChoChihTun"},"content":"            }"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"ChoChihTun"},"content":"    //@@author ChoChihTun"},{"lineNumber":190,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":191,"author":{"gitID":"ChoChihTun"},"content":"     * Parses a person\u0027s {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":192,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":193,"author":{"gitID":"ChoChihTun"},"content":"    public static Set\u003cTag\u003e parsePersonTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":194,"author":{"gitID":"ChoChihTun"},"content":"        requireNonNull(tags);"},{"lineNumber":195,"author":{"gitID":"ChoChihTun"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":196,"author":{"gitID":"ChoChihTun"},"content":"        for (String tagName : tags) {"},{"lineNumber":197,"author":{"gitID":"ChoChihTun"},"content":"            // a person should not have tutee tag"},{"lineNumber":198,"author":{"gitID":"ChoChihTun"},"content":"            if (isTuteeTag(tagName)) {"},{"lineNumber":199,"author":{"gitID":"ChoChihTun"},"content":"                throw new IllegalValueException(String.format(MESSAGE_INVALID_TAG, tagName));"},{"lineNumber":200,"author":{"gitID":"ChoChihTun"},"content":"            }"},{"lineNumber":201,"author":{"gitID":"ChoChihTun"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":202,"author":{"gitID":"ChoChihTun"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"ChoChihTun"},"content":"        return tagSet;"},{"lineNumber":204,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":206,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":207,"author":{"gitID":"ChoChihTun"},"content":"     * Parses a tutee\u0027s {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":208,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":209,"author":{"gitID":"ChoChihTun"},"content":"    public static Set\u003cTag\u003e parseTuteeTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":210,"author":{"gitID":"ChoChihTun"},"content":"        requireNonNull(tags);"},{"lineNumber":211,"author":{"gitID":"ChoChihTun"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":212,"author":{"gitID":"ChoChihTun"},"content":"        for (String tagName : tags) {"},{"lineNumber":213,"author":{"gitID":"ChoChihTun"},"content":"            // Tutee tag is added automatically by the Tutee constructor"},{"lineNumber":214,"author":{"gitID":"ChoChihTun"},"content":"            if (!isTuteeTag(tagName)) {"},{"lineNumber":215,"author":{"gitID":"ChoChihTun"},"content":"                tagSet.add(parseTag(tagName));"},{"lineNumber":216,"author":{"gitID":"ChoChihTun"},"content":"            }"},{"lineNumber":217,"author":{"gitID":"ChoChihTun"},"content":"        }"},{"lineNumber":218,"author":{"gitID":"ChoChihTun"},"content":"        return tagSet;"},{"lineNumber":219,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":221,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":222,"author":{"gitID":"ChoChihTun"},"content":"     * Checks if {@code String tagName} is tutee tag name"},{"lineNumber":223,"author":{"gitID":"ChoChihTun"},"content":"     *"},{"lineNumber":224,"author":{"gitID":"ChoChihTun"},"content":"     * @param tagName to be checked"},{"lineNumber":225,"author":{"gitID":"ChoChihTun"},"content":"     * @return true if tagName is tutee tag name"},{"lineNumber":226,"author":{"gitID":"ChoChihTun"},"content":"     *         false if tagName is not tutee tag name"},{"lineNumber":227,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":228,"author":{"gitID":"ChoChihTun"},"content":"    private static boolean isTuteeTag(String tagName) {"},{"lineNumber":229,"author":{"gitID":"ChoChihTun"},"content":"        return tagName.toLowerCase().equals(TUTEE_TAG_NAME.toLowerCase());"},{"lineNumber":230,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":232,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":233,"author":{"gitID":"ChoChihTun"},"content":"     * Parses a {@code String subject} into an {@code Subject}."},{"lineNumber":234,"author":{"gitID":"ChoChihTun"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":235,"author":{"gitID":"ChoChihTun"},"content":"     *"},{"lineNumber":236,"author":{"gitID":"ChoChihTun"},"content":"     * @throws IllegalValueException if the given {@code subject} is invalid."},{"lineNumber":237,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":238,"author":{"gitID":"ChoChihTun"},"content":"    public static Subject parseSubject(String subject) throws IllegalValueException {"},{"lineNumber":239,"author":{"gitID":"ChoChihTun"},"content":"        requireNonNull(subject);"},{"lineNumber":240,"author":{"gitID":"ChoChihTun"},"content":"        String trimmedSubject \u003d subject.trim();"},{"lineNumber":241,"author":{"gitID":"ChoChihTun"},"content":"        if (!Subject.isValidSubject(trimmedSubject)) {"},{"lineNumber":242,"author":{"gitID":"ChoChihTun"},"content":"            throw new IllegalValueException(Subject.MESSAGE_SUBJECT_CONSTRAINTS);"},{"lineNumber":243,"author":{"gitID":"ChoChihTun"},"content":"        }"},{"lineNumber":244,"author":{"gitID":"ChoChihTun"},"content":"        return new Subject(trimmedSubject);"},{"lineNumber":245,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":246,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":247,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":248,"author":{"gitID":"ChoChihTun"},"content":"     * Parses a {@code Optional\u003cString\u003e subject} into an {@code Optional\u003cSubject\u003e} if {@code subject} is present."},{"lineNumber":249,"author":{"gitID":"ChoChihTun"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":250,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":251,"author":{"gitID":"ChoChihTun"},"content":"    public static Optional\u003cSubject\u003e parseSubject(Optional\u003cString\u003e subject) throws IllegalValueException {"},{"lineNumber":252,"author":{"gitID":"ChoChihTun"},"content":"        requireNonNull(subject);"},{"lineNumber":253,"author":{"gitID":"ChoChihTun"},"content":"        return subject.isPresent() ? Optional.of(parseSubject(subject.get())) : Optional.empty();"},{"lineNumber":254,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":255,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":256,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":257,"author":{"gitID":"ChoChihTun"},"content":"     * Parses a {@code String educationLevel} into an {@code EducationLevel}."},{"lineNumber":258,"author":{"gitID":"ChoChihTun"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":259,"author":{"gitID":"ChoChihTun"},"content":"     *"},{"lineNumber":260,"author":{"gitID":"ChoChihTun"},"content":"     * @throws IllegalValueException if the given {@code educationLevel} is invalid."},{"lineNumber":261,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":262,"author":{"gitID":"ChoChihTun"},"content":"    public static EducationLevel parseEducationLevel(String educationLevel) throws IllegalValueException {"},{"lineNumber":263,"author":{"gitID":"ChoChihTun"},"content":"        requireNonNull(educationLevel);"},{"lineNumber":264,"author":{"gitID":"ChoChihTun"},"content":"        String trimmedEducationLevel \u003d educationLevel.trim();"},{"lineNumber":265,"author":{"gitID":"ChoChihTun"},"content":"        if (!EducationLevel.isValidEducationLevel(trimmedEducationLevel)) {"},{"lineNumber":266,"author":{"gitID":"ChoChihTun"},"content":"            throw new IllegalValueException(EducationLevel.MESSAGE_EDUCATION_LEVEL_CONSTRAINTS);"},{"lineNumber":267,"author":{"gitID":"ChoChihTun"},"content":"        }"},{"lineNumber":268,"author":{"gitID":"ChoChihTun"},"content":"        return new EducationLevel(trimmedEducationLevel);"},{"lineNumber":269,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":271,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":272,"author":{"gitID":"ChoChihTun"},"content":"     * Parses a {@code Optional\u003cString\u003e educationLevel} into an {@code Optional\u003cEducationLevel\u003e}"},{"lineNumber":273,"author":{"gitID":"ChoChihTun"},"content":"     * if {@code educationLevel} is present."},{"lineNumber":274,"author":{"gitID":"ChoChihTun"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":275,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":276,"author":{"gitID":"ChoChihTun"},"content":"    public static Optional\u003cEducationLevel\u003e parseEducationLevel(Optional\u003cString\u003e educationLevel)"},{"lineNumber":277,"author":{"gitID":"ChoChihTun"},"content":"            throws IllegalValueException {"},{"lineNumber":278,"author":{"gitID":"ChoChihTun"},"content":"        requireNonNull(educationLevel);"},{"lineNumber":279,"author":{"gitID":"ChoChihTun"},"content":"        return educationLevel.isPresent() ? Optional.of(parseEducationLevel(educationLevel.get())) : Optional.empty();"},{"lineNumber":280,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":281,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":282,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":283,"author":{"gitID":"ChoChihTun"},"content":"     * Parses a {@code String school} into an {@code School}."},{"lineNumber":284,"author":{"gitID":"ChoChihTun"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":285,"author":{"gitID":"ChoChihTun"},"content":"     *"},{"lineNumber":286,"author":{"gitID":"ChoChihTun"},"content":"     * @throws IllegalValueException if the given {@code school} is invalid."},{"lineNumber":287,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":288,"author":{"gitID":"ChoChihTun"},"content":"    public static School parseSchool(String school) throws IllegalValueException {"},{"lineNumber":289,"author":{"gitID":"ChoChihTun"},"content":"        requireNonNull(school);"},{"lineNumber":290,"author":{"gitID":"ChoChihTun"},"content":"        String trimmedSchool \u003d school.trim();"},{"lineNumber":291,"author":{"gitID":"ChoChihTun"},"content":"        if (!School.isValidSchool(trimmedSchool)) {"},{"lineNumber":292,"author":{"gitID":"ChoChihTun"},"content":"            throw new IllegalValueException(School.MESSAGE_SCHOOL_CONSTRAINTS);"},{"lineNumber":293,"author":{"gitID":"ChoChihTun"},"content":"        }"},{"lineNumber":294,"author":{"gitID":"ChoChihTun"},"content":"        return new School(trimmedSchool);"},{"lineNumber":295,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":296,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":297,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":298,"author":{"gitID":"ChoChihTun"},"content":"     * Parses a {@code Optional\u003cString\u003e school} into an {@code Optional\u003cSchool\u003e} if {@code school} is present."},{"lineNumber":299,"author":{"gitID":"ChoChihTun"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":300,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":301,"author":{"gitID":"ChoChihTun"},"content":"    public static Optional\u003cSchool\u003e parseSchool(Optional\u003cString\u003e school) throws IllegalValueException {"},{"lineNumber":302,"author":{"gitID":"ChoChihTun"},"content":"        requireNonNull(school);"},{"lineNumber":303,"author":{"gitID":"ChoChihTun"},"content":"        return school.isPresent() ? Optional.of(parseSchool(school.get())) : Optional.empty();"},{"lineNumber":304,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":305,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":306,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":307,"author":{"gitID":"ChoChihTun"},"content":"     * Parses a {@code String grade} into an {@code Grade}."},{"lineNumber":308,"author":{"gitID":"ChoChihTun"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":309,"author":{"gitID":"ChoChihTun"},"content":"     *"},{"lineNumber":310,"author":{"gitID":"ChoChihTun"},"content":"     * @throws IllegalValueException if the given {@code grade} is invalid."},{"lineNumber":311,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":312,"author":{"gitID":"ChoChihTun"},"content":"    public static Grade parseGrade(String grade) throws IllegalValueException {"},{"lineNumber":313,"author":{"gitID":"ChoChihTun"},"content":"        requireNonNull(grade);"},{"lineNumber":314,"author":{"gitID":"ChoChihTun"},"content":"        String trimmedGrade \u003d grade.trim();"},{"lineNumber":315,"author":{"gitID":"ChoChihTun"},"content":"        if (!Grade.isValidGrade(trimmedGrade)) {"},{"lineNumber":316,"author":{"gitID":"ChoChihTun"},"content":"            throw new IllegalValueException(Grade.MESSAGE_GRADE_CONSTRAINTS);"},{"lineNumber":317,"author":{"gitID":"ChoChihTun"},"content":"        }"},{"lineNumber":318,"author":{"gitID":"ChoChihTun"},"content":"        return new Grade(trimmedGrade);"},{"lineNumber":319,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":320,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":321,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":322,"author":{"gitID":"ChoChihTun"},"content":"     * Parses a {@code Optional\u003cString\u003e grade} into an {@code Optional\u003cGrade\u003e} if {@code grade} is present."},{"lineNumber":323,"author":{"gitID":"ChoChihTun"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":324,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":325,"author":{"gitID":"ChoChihTun"},"content":"    public static Optional\u003cGrade\u003e parseGrade(Optional\u003cString\u003e grade) throws IllegalValueException {"},{"lineNumber":326,"author":{"gitID":"ChoChihTun"},"content":"        requireNonNull(grade);"},{"lineNumber":327,"author":{"gitID":"ChoChihTun"},"content":"        return grade.isPresent() ? Optional.of(parseGrade(grade.get())) : Optional.empty();"},{"lineNumber":328,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":329,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":330,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":331,"author":{"gitID":"ChoChihTun"},"content":"     * Parses a {@code String timeUnit} into an {@code String} and returns it."},{"lineNumber":332,"author":{"gitID":"ChoChihTun"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":333,"author":{"gitID":"ChoChihTun"},"content":"     *"},{"lineNumber":334,"author":{"gitID":"ChoChihTun"},"content":"     * @throws IllegalValueException if the given {@code timeUnit} is invalid."},{"lineNumber":335,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":336,"author":{"gitID":"ChoChihTun"},"content":"    public static String parseTimeUnit(String timeUnit) throws IllegalValueException, SameTimeUnitException {"},{"lineNumber":337,"author":{"gitID":"ChoChihTun"},"content":"        requireNonNull(timeUnit);"},{"lineNumber":338,"author":{"gitID":"ChoChihTun"},"content":"        String trimmedTimeUnit \u003d timeUnit.trim();"},{"lineNumber":339,"author":{"gitID":"ChoChihTun"},"content":"        if (!ChangeCommandParser.isValidTimeUnit(trimmedTimeUnit)) {"},{"lineNumber":340,"author":{"gitID":"ChoChihTun"},"content":"            throw new IllegalValueException(ChangeCommand.MESSAGE_CONSTRAINT);"},{"lineNumber":341,"author":{"gitID":"ChoChihTun"},"content":"        }"},{"lineNumber":342,"author":{"gitID":"ChoChihTun"},"content":"        if (ChangeCommandParser.isTimeUnitClash(trimmedTimeUnit)) {"},{"lineNumber":343,"author":{"gitID":"ChoChihTun"},"content":"            throw new SameTimeUnitException(ChangeCommand.MESSAGE_SAME_VIEW);"},{"lineNumber":344,"author":{"gitID":"ChoChihTun"},"content":"        }"},{"lineNumber":345,"author":{"gitID":"ChoChihTun"},"content":"        return trimmedTimeUnit;"},{"lineNumber":346,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":347,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":348,"author":{"gitID":"yungyung04"},"content":"    //@@author yungyung04"},{"lineNumber":349,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":350,"author":{"gitID":"yungyung04"},"content":"     * Parses a {@code String dateTime} into an {@code LocalDateTime}."},{"lineNumber":351,"author":{"gitID":"yungyung04"},"content":"     *"},{"lineNumber":352,"author":{"gitID":"yungyung04"},"content":"     * @throws DateTimeParseException if the given {@code stringDateTime} is invalid."},{"lineNumber":353,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":354,"author":{"gitID":"yungyung04"},"content":"    public static LocalDateTime parseDateTime(String stringDateTime) throws DateTimeParseException {"},{"lineNumber":355,"author":{"gitID":"yungyung04"},"content":"        requireNonNull(stringDateTime);"},{"lineNumber":356,"author":{"gitID":"yungyung04"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/uuuu HH:mm\")"},{"lineNumber":357,"author":{"gitID":"yungyung04"},"content":"                .withResolverStyle(ResolverStyle.STRICT);"},{"lineNumber":358,"author":{"gitID":"yungyung04"},"content":"        return LocalDateTime.parse(stringDateTime, formatter);"},{"lineNumber":359,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":360,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":361,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":362,"author":{"gitID":"yungyung04"},"content":"     * Returns a valid duration"},{"lineNumber":363,"author":{"gitID":"yungyung04"},"content":"     *"},{"lineNumber":364,"author":{"gitID":"yungyung04"},"content":"     * @throws DurationParseException if the given {@code duration} is invalid."},{"lineNumber":365,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":366,"author":{"gitID":"yungyung04"},"content":"    public static String parseDuration(String duration) throws DurationParseException {"},{"lineNumber":367,"author":{"gitID":"yungyung04"},"content":"        requireNonNull(duration);"},{"lineNumber":368,"author":{"gitID":"yungyung04"},"content":"        if (!isValidDuration(duration)) {"},{"lineNumber":369,"author":{"gitID":"yungyung04"},"content":"            throw new DurationParseException(MESSAGE_INVALID_DURATION);"},{"lineNumber":370,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":371,"author":{"gitID":"yungyung04"},"content":"        return duration;"},{"lineNumber":372,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":373,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":374,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":375,"author":{"gitID":"yungyung04"},"content":"     * Returns true if the given duration is valid."},{"lineNumber":376,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":377,"author":{"gitID":"yungyung04"},"content":"    private static boolean isValidDuration(String duration) {"},{"lineNumber":378,"author":{"gitID":"yungyung04"},"content":"        String durationValidationRegex \u003d \"([0-9]|1[0-9]|2[0-3])h([0-5][0-9]|[0-9])m\";"},{"lineNumber":379,"author":{"gitID":"yungyung04"},"content":"        return duration.matches(durationValidationRegex) \u0026\u0026 !duration.equals(ZERO_DURATION_FIRST_FORMAT)"},{"lineNumber":380,"author":{"gitID":"yungyung04"},"content":"                \u0026\u0026 !duration.equals(ZERO_DURATION_SECOND_FORMAT);"},{"lineNumber":381,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":382,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":383,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":384,"author":{"gitID":"yungyung04"},"content":"     * Returns a valid task description."},{"lineNumber":385,"author":{"gitID":"yungyung04"},"content":"     * If description does not exist, returns an empty String."},{"lineNumber":386,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":387,"author":{"gitID":"yungyung04"},"content":"    public static String parseDescription(String[] userInputs, int numberOfParametersWhenDescriptionExist) {"},{"lineNumber":388,"author":{"gitID":"yungyung04"},"content":"        requireNonNull(userInputs);"},{"lineNumber":389,"author":{"gitID":"yungyung04"},"content":"        requireNonNull(numberOfParametersWhenDescriptionExist);"},{"lineNumber":390,"author":{"gitID":"yungyung04"},"content":"        if (isEmptyDescription(userInputs, numberOfParametersWhenDescriptionExist)) {"},{"lineNumber":391,"author":{"gitID":"yungyung04"},"content":"            return EMPTY_STRING;"},{"lineNumber":392,"author":{"gitID":"yungyung04"},"content":"        } else {"},{"lineNumber":393,"author":{"gitID":"yungyung04"},"content":"            String description \u003d getLastElement(userInputs);"},{"lineNumber":394,"author":{"gitID":"yungyung04"},"content":"            return description;"},{"lineNumber":395,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":396,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":397,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":398,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":399,"author":{"gitID":"yungyung04"},"content":"     * Returns the last element of an array of Strings."},{"lineNumber":400,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":401,"author":{"gitID":"yungyung04"},"content":"    private static String getLastElement(String[] userInputs) {"},{"lineNumber":402,"author":{"gitID":"yungyung04"},"content":"        return userInputs[userInputs.length - 1];"},{"lineNumber":403,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":404,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":405,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":406,"author":{"gitID":"yungyung04"},"content":"     * Returns true if the given task arguments contain a task description."},{"lineNumber":407,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":408,"author":{"gitID":"yungyung04"},"content":"    private static boolean isEmptyDescription(String[] arguments, int numberOfParametersWhenDescriptionExist) {"},{"lineNumber":409,"author":{"gitID":"yungyung04"},"content":"        return arguments.length \u003c numberOfParametersWhenDescriptionExist;"},{"lineNumber":410,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":411,"author":{"gitID":"yungyung04"},"content":"}"}],"authorContributionMap":{"ChoChihTun":172,"yungyung04":69,"-":170}},{"path":"src/main/java/seedu/address/logic/parser/FindPersonCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_FILTER_CATEGORY;"},{"lineNumber":5,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_EDUCATION_LEVEL;"},{"lineNumber":6,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_GRADE;"},{"lineNumber":7,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_NAME;"},{"lineNumber":8,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_SCHOOL;"},{"lineNumber":9,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_SUBJECT;"},{"lineNumber":10,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":11,"author":{"gitID":"yungyung04"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"yungyung04"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"yungyung04"},"content":"import seedu.address.logic.commands.FindPersonCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":18,"author":{"gitID":"yungyung04"},"content":"//@@author yungyung04"},{"lineNumber":19,"author":{"gitID":"yungyung04"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"yungyung04"},"content":" * Parses input arguments and creates a new FindPersonCommand object"},{"lineNumber":21,"author":{"gitID":"yungyung04"},"content":" */"},{"lineNumber":22,"author":{"gitID":"yungyung04"},"content":"public class FindPersonCommandParser implements Parser\u003cFindPersonCommand\u003e {"},{"lineNumber":23,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":24,"author":{"gitID":"yungyung04"},"content":"    private static final int EXPECTED_AMOUNT_OF_PARAMETERS \u003d 2;"},{"lineNumber":25,"author":{"gitID":"yungyung04"},"content":"    private static final int INDEX_OF_FILTER_CATEGORY \u003d 0;"},{"lineNumber":26,"author":{"gitID":"yungyung04"},"content":"    private static final int INDEX_OF_KEYWORDS \u003d 1;"},{"lineNumber":27,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":28,"author":{"gitID":"yungyung04"},"content":"    private List\u003cString\u003e validCategories \u003d"},{"lineNumber":29,"author":{"gitID":"yungyung04"},"content":"            new ArrayList\u003c\u003e(Arrays.asList(CATEGORY_NAME, CATEGORY_EDUCATION_LEVEL, CATEGORY_GRADE,"},{"lineNumber":30,"author":{"gitID":"yungyung04"},"content":"                    CATEGORY_SCHOOL, CATEGORY_SUBJECT));"},{"lineNumber":31,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":32,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"yungyung04"},"content":"     * Parses the given {@code String} of arguments in the context of the FindPersonCommand"},{"lineNumber":34,"author":{"gitID":"yungyung04"},"content":"     * and returns a FindPersonCommand object for execution."},{"lineNumber":35,"author":{"gitID":"yungyung04"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":36,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"yungyung04"},"content":"    public FindPersonCommand parse(String args) throws ParseException {"},{"lineNumber":38,"author":{"gitID":"yungyung04"},"content":"        String[] arguments \u003d args.trim().toLowerCase().split(\"\\\\s+\", EXPECTED_AMOUNT_OF_PARAMETERS);"},{"lineNumber":39,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":40,"author":{"gitID":"yungyung04"},"content":"        if (arguments.length \u003c EXPECTED_AMOUNT_OF_PARAMETERS) {"},{"lineNumber":41,"author":{"gitID":"yungyung04"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPersonCommand.MESSAGE_USAGE));"},{"lineNumber":42,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":44,"author":{"gitID":"yungyung04"},"content":"        String filterCategory \u003d arguments[INDEX_OF_FILTER_CATEGORY];"},{"lineNumber":45,"author":{"gitID":"yungyung04"},"content":"        String[] keywords \u003d arguments[INDEX_OF_KEYWORDS].split(\"\\\\s+\");"},{"lineNumber":46,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":47,"author":{"gitID":"yungyung04"},"content":"        if (!validCategories.contains(filterCategory)) {"},{"lineNumber":48,"author":{"gitID":"yungyung04"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_FILTER_CATEGORY, FindPersonCommand.MESSAGE_USAGE));"},{"lineNumber":49,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":51,"author":{"gitID":"yungyung04"},"content":"        return new FindPersonCommand(filterCategory, keywords);"},{"lineNumber":52,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"yungyung04"},"content":"}"}],"authorContributionMap":{"yungyung04":47,"-":6}},{"path":"src/main/java/seedu/address/logic/parser/ChangeCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.logic.commands.ChangeCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.logic.parser.exceptions.SameTimeUnitException;"},{"lineNumber":9,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":10,"author":{"gitID":"ChoChihTun"},"content":"//@@author ChoChihTun"},{"lineNumber":11,"author":{"gitID":"ChoChihTun"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"ChoChihTun"},"content":" * Parses input arguments and creates a new ChangeCommand object"},{"lineNumber":13,"author":{"gitID":"ChoChihTun"},"content":" */"},{"lineNumber":14,"author":{"gitID":"ChoChihTun"},"content":"public class ChangeCommandParser implements Parser\u003cChangeCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"ChoChihTun"},"content":"    private static final String DAY \u003d \"d\";"},{"lineNumber":16,"author":{"gitID":"ChoChihTun"},"content":"    private static final String WEEK \u003d \"w\";"},{"lineNumber":17,"author":{"gitID":"ChoChihTun"},"content":"    private static final String MONTH \u003d \"m\";"},{"lineNumber":18,"author":{"gitID":"ChoChihTun"},"content":"    private static final String YEAR \u003d \"y\";"},{"lineNumber":19,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":20,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"ChoChihTun"},"content":"     * Parses the given {@code String} of arguments in the context of the ChangeCommand"},{"lineNumber":22,"author":{"gitID":"ChoChihTun"},"content":"     * and returns an ChangeCommand object for execution."},{"lineNumber":23,"author":{"gitID":"ChoChihTun"},"content":"     *"},{"lineNumber":24,"author":{"gitID":"ChoChihTun"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":25,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"ChoChihTun"},"content":"    public ChangeCommand parse(String args) throws ParseException {"},{"lineNumber":27,"author":{"gitID":"ChoChihTun"},"content":"        try {"},{"lineNumber":28,"author":{"gitID":"ChoChihTun"},"content":"            String timeUnit \u003d ParserUtil.parseTimeUnit(args);"},{"lineNumber":29,"author":{"gitID":"ChoChihTun"},"content":"            return new ChangeCommand(timeUnit);"},{"lineNumber":30,"author":{"gitID":"ChoChihTun"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":31,"author":{"gitID":"ChoChihTun"},"content":"            throw new ParseException("},{"lineNumber":32,"author":{"gitID":"ChoChihTun"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangeCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitID":"ChoChihTun"},"content":"        } catch (SameTimeUnitException stue) {"},{"lineNumber":34,"author":{"gitID":"ChoChihTun"},"content":"            throw new ParseException(stue.getMessage());"},{"lineNumber":35,"author":{"gitID":"ChoChihTun"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":38,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"ChoChihTun"},"content":"     * Checks if the user input view page time unit is valid"},{"lineNumber":40,"author":{"gitID":"ChoChihTun"},"content":"     *"},{"lineNumber":41,"author":{"gitID":"ChoChihTun"},"content":"     * @param trimmedTimeUnit to be checked"},{"lineNumber":42,"author":{"gitID":"ChoChihTun"},"content":"     * @return true if view page time unit is valid"},{"lineNumber":43,"author":{"gitID":"ChoChihTun"},"content":"     *          false if the view page time unit is invalid"},{"lineNumber":44,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"ChoChihTun"},"content":"    public static boolean isValidTimeUnit(String trimmedTimeUnit) {"},{"lineNumber":46,"author":{"gitID":"ChoChihTun"},"content":"        return (trimmedTimeUnit.equals(DAY)"},{"lineNumber":47,"author":{"gitID":"ChoChihTun"},"content":"            || trimmedTimeUnit.equals(WEEK)"},{"lineNumber":48,"author":{"gitID":"ChoChihTun"},"content":"            || trimmedTimeUnit.equals(MONTH)"},{"lineNumber":49,"author":{"gitID":"ChoChihTun"},"content":"            || trimmedTimeUnit.equals(YEAR));"},{"lineNumber":50,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":52,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"ChoChihTun"},"content":"     * Checks if the new view page time unit clashes with the current time unit"},{"lineNumber":54,"author":{"gitID":"ChoChihTun"},"content":"     *"},{"lineNumber":55,"author":{"gitID":"ChoChihTun"},"content":"     * @param timeUnit to be checked"},{"lineNumber":56,"author":{"gitID":"ChoChihTun"},"content":"     * @return true if the view page time unit clashes with the current time unit"},{"lineNumber":57,"author":{"gitID":"ChoChihTun"},"content":"     *          false if there is no clash"},{"lineNumber":58,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"ChoChihTun"},"content":"    public static boolean isTimeUnitClash(String timeUnit) {"},{"lineNumber":60,"author":{"gitID":"ChoChihTun"},"content":"        String currentViewPage \u003d ChangeCommand.getTimeUnit();"},{"lineNumber":61,"author":{"gitID":"ChoChihTun"},"content":"        return (timeUnit.equals(currentViewPage));"},{"lineNumber":62,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"ChoChihTun"},"content":"}"}],"authorContributionMap":{"ChoChihTun":57,"-":6}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EDUCATION_LEVEL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHOOL;"},{"lineNumber":12,"author":{"gitID":"ChoChihTun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":40,"author":{"gitID":"ChoChihTun"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG,"},{"lineNumber":41,"author":{"gitID":"ChoChihTun"},"content":"                        PREFIX_SUBJECT, PREFIX_GRADE, PREFIX_EDUCATION_LEVEL, PREFIX_SCHOOL);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        Index index;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editPersonDescriptor::setPhone);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editPersonDescriptor::setEmail);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editPersonDescriptor::setAddress);"},{"lineNumber":57,"author":{"gitID":"ChoChihTun"},"content":"            ParserUtil.parseSubject(argMultimap.getValue(PREFIX_SUBJECT)).ifPresent(editPersonDescriptor::setSubject);"},{"lineNumber":58,"author":{"gitID":"ChoChihTun"},"content":"            ParserUtil.parseGrade(argMultimap.getValue(PREFIX_GRADE)).ifPresent(editPersonDescriptor::setGrade);"},{"lineNumber":59,"author":{"gitID":"ChoChihTun"},"content":"            ParserUtil.parseEducationLevel(argMultimap.getValue(PREFIX_EDUCATION_LEVEL))"},{"lineNumber":60,"author":{"gitID":"ChoChihTun"},"content":"                    .ifPresent(editPersonDescriptor::setEducationLevel);"},{"lineNumber":61,"author":{"gitID":"ChoChihTun"},"content":"            ParserUtil.parseSchool(argMultimap.getValue(PREFIX_SCHOOL)).ifPresent(editPersonDescriptor::setSchool);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ChoChihTun":11,"-":78}},{"path":"src/main/java/seedu/address/logic/parser/NaturalLanguageIdentifier.java","lines":[{"lineNumber":1,"author":{"gitID":"yungyung04"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":3,"author":{"gitID":"yungyung04"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":5,"author":{"gitID":"yungyung04"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"yungyung04"},"content":"//@@author yungyung04"},{"lineNumber":12,"author":{"gitID":"yungyung04"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"yungyung04"},"content":" * Provides utilities to recognize and translate natural language from user input into processable values"},{"lineNumber":14,"author":{"gitID":"yungyung04"},"content":" */"},{"lineNumber":15,"author":{"gitID":"yungyung04"},"content":"public class NaturalLanguageIdentifier {"},{"lineNumber":16,"author":{"gitID":"yungyung04"},"content":"    public static final String NATURAL_NOW \u003d \"now\";"},{"lineNumber":17,"author":{"gitID":"yungyung04"},"content":"    public static final String NATURAL_TODAY \u003d \"today\";"},{"lineNumber":18,"author":{"gitID":"yungyung04"},"content":"    public static final String NATURAL_CURRENT \u003d \"current\";"},{"lineNumber":19,"author":{"gitID":"yungyung04"},"content":"    public static final String NATURAL_LAST \u003d \"last\";"},{"lineNumber":20,"author":{"gitID":"yungyung04"},"content":"    public static final String NATURAL_THIS \u003d \"this\";"},{"lineNumber":21,"author":{"gitID":"yungyung04"},"content":"    public static final String NATURAL_NEXT \u003d \"next\";"},{"lineNumber":22,"author":{"gitID":"yungyung04"},"content":"    public static final String NATURAL_MONTH \u003d \"month\";"},{"lineNumber":23,"author":{"gitID":"yungyung04"},"content":"    public static final String NATURAL_LAST_MONTH \u003d NATURAL_LAST + \" \" + NATURAL_MONTH;"},{"lineNumber":24,"author":{"gitID":"yungyung04"},"content":"    public static final String NATURAL_THIS_MONTH \u003d NATURAL_THIS + \" \" + NATURAL_MONTH;"},{"lineNumber":25,"author":{"gitID":"yungyung04"},"content":"    public static final String NATURAL_NEXT_MONTH \u003d NATURAL_NEXT + \" \" + NATURAL_MONTH;"},{"lineNumber":26,"author":{"gitID":"yungyung04"},"content":"    public static final String NATURAL_CURRENT_MONTH \u003d NATURAL_CURRENT + \" \" + NATURAL_MONTH;"},{"lineNumber":27,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":28,"author":{"gitID":"yungyung04"},"content":"    private static List\u003cString\u003e twoWordedNaturalLanguages \u003d new ArrayList\u003c\u003e(Arrays.asList("},{"lineNumber":29,"author":{"gitID":"yungyung04"},"content":"            NATURAL_LAST_MONTH, NATURAL_THIS_MONTH, NATURAL_NEXT_MONTH, NATURAL_CURRENT_MONTH));"},{"lineNumber":30,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":31,"author":{"gitID":"yungyung04"},"content":"    private static NaturalLanguageIdentifier naturalLanguageIdentifier \u003d null;"},{"lineNumber":32,"author":{"gitID":"yungyung04"},"content":"    private LocalDateTime currentDateTime \u003d null;"},{"lineNumber":33,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":34,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"yungyung04"},"content":"     * Constructs a NaturalLanguageIdentifier object which stores the current date and time."},{"lineNumber":36,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"yungyung04"},"content":"    private NaturalLanguageIdentifier() {"},{"lineNumber":38,"author":{"gitID":"yungyung04"},"content":"        currentDateTime \u003d LocalDateTime.now();"},{"lineNumber":39,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":41,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"yungyung04"},"content":"     * Returns an instance of NaturalLanguageIdentifier object"},{"lineNumber":43,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"yungyung04"},"content":"    public static NaturalLanguageIdentifier getInstance() {"},{"lineNumber":45,"author":{"gitID":"yungyung04"},"content":"        if (naturalLanguageIdentifier \u003d\u003d null) {"},{"lineNumber":46,"author":{"gitID":"yungyung04"},"content":"            naturalLanguageIdentifier \u003d new NaturalLanguageIdentifier();"},{"lineNumber":47,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"yungyung04"},"content":"        return naturalLanguageIdentifier;"},{"lineNumber":49,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":51,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"yungyung04"},"content":"     * Converts any keywords that are recognizable as month-related natural languages into their month representation."},{"lineNumber":53,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"yungyung04"},"content":"    public String[] convertNaturalLanguagesIntoMonths(String[] keywords) {"},{"lineNumber":55,"author":{"gitID":"yungyung04"},"content":"        requireNonNull(keywords);"},{"lineNumber":56,"author":{"gitID":"yungyung04"},"content":"        String[] mergedKeywords \u003d mergeTwoWordedNaturalLanguage(keywords);"},{"lineNumber":57,"author":{"gitID":"yungyung04"},"content":"        for (int i \u003d 0; i \u003c mergedKeywords.length; i++) {"},{"lineNumber":58,"author":{"gitID":"yungyung04"},"content":"            mergedKeywords[i] \u003d getMonthAsString(mergedKeywords[i]);"},{"lineNumber":59,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"yungyung04"},"content":"        return mergedKeywords;"},{"lineNumber":61,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":63,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"yungyung04"},"content":"     * Converts natural language into its month representation if possible."},{"lineNumber":65,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"yungyung04"},"content":"    public String getMonthAsString(String userInput) {"},{"lineNumber":67,"author":{"gitID":"yungyung04"},"content":"        requireNonNull(userInput);"},{"lineNumber":68,"author":{"gitID":"yungyung04"},"content":"        String result;"},{"lineNumber":69,"author":{"gitID":"yungyung04"},"content":"        switch (userInput) {"},{"lineNumber":70,"author":{"gitID":"yungyung04"},"content":"        case NATURAL_TODAY:"},{"lineNumber":71,"author":{"gitID":"yungyung04"},"content":"            //Fallthrough"},{"lineNumber":72,"author":{"gitID":"yungyung04"},"content":"        case NATURAL_NOW:"},{"lineNumber":73,"author":{"gitID":"yungyung04"},"content":"            //Fallthrough"},{"lineNumber":74,"author":{"gitID":"yungyung04"},"content":"        case NATURAL_CURRENT_MONTH:"},{"lineNumber":75,"author":{"gitID":"yungyung04"},"content":"            //Fallthrough"},{"lineNumber":76,"author":{"gitID":"yungyung04"},"content":"        case NATURAL_THIS_MONTH:"},{"lineNumber":77,"author":{"gitID":"yungyung04"},"content":"            result \u003d currentDateTime.getMonth().name();"},{"lineNumber":78,"author":{"gitID":"yungyung04"},"content":"            break;"},{"lineNumber":79,"author":{"gitID":"yungyung04"},"content":"        case NATURAL_LAST_MONTH:"},{"lineNumber":80,"author":{"gitID":"yungyung04"},"content":"            result \u003d currentDateTime.minusMonths(1).getMonth().name();"},{"lineNumber":81,"author":{"gitID":"yungyung04"},"content":"            break;"},{"lineNumber":82,"author":{"gitID":"yungyung04"},"content":"        case NATURAL_NEXT_MONTH:"},{"lineNumber":83,"author":{"gitID":"yungyung04"},"content":"            result \u003d currentDateTime.plusMonths(1).getMonth().name();"},{"lineNumber":84,"author":{"gitID":"yungyung04"},"content":"            break;"},{"lineNumber":85,"author":{"gitID":"yungyung04"},"content":"        default:"},{"lineNumber":86,"author":{"gitID":"yungyung04"},"content":"            result \u003d userInput;"},{"lineNumber":87,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"yungyung04"},"content":"        return result;"},{"lineNumber":89,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":91,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"yungyung04"},"content":"     * Merges 2 adjoin Strings if the merged form is a valid natural language."},{"lineNumber":93,"author":{"gitID":"yungyung04"},"content":"     * Keywords are case-sensitive."},{"lineNumber":94,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"yungyung04"},"content":"    public static String[] mergeTwoWordedNaturalLanguage(String[] keywords) {"},{"lineNumber":96,"author":{"gitID":"yungyung04"},"content":"        requireNonNull(keywords);"},{"lineNumber":97,"author":{"gitID":"yungyung04"},"content":"        if (keywords.length \u003c\u003d 1) {"},{"lineNumber":98,"author":{"gitID":"yungyung04"},"content":"            return keywords;"},{"lineNumber":99,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":101,"author":{"gitID":"yungyung04"},"content":"        ArrayList\u003cString\u003e mergedKeywords \u003d new ArrayList\u003c\u003e();"},{"lineNumber":102,"author":{"gitID":"yungyung04"},"content":"        for (int i \u003d 0; i \u003c keywords.length; i++) {"},{"lineNumber":103,"author":{"gitID":"yungyung04"},"content":"            if (i \u003c (keywords.length - 1) \u0026\u0026 isMergeable(keywords[i], keywords[i + 1])) {"},{"lineNumber":104,"author":{"gitID":"yungyung04"},"content":"                mergedKeywords.add(keywords[i] + \" \" + keywords[i + 1]);"},{"lineNumber":105,"author":{"gitID":"yungyung04"},"content":"                i++;"},{"lineNumber":106,"author":{"gitID":"yungyung04"},"content":"            } else {"},{"lineNumber":107,"author":{"gitID":"yungyung04"},"content":"                mergedKeywords.add(keywords[i]);"},{"lineNumber":108,"author":{"gitID":"yungyung04"},"content":"            }"},{"lineNumber":109,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"yungyung04"},"content":"        return mergedKeywords.toArray(new String[mergedKeywords.size()]);"},{"lineNumber":111,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":113,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"yungyung04"},"content":"     * Checks whether 2 given words can form a valid natural language."},{"lineNumber":115,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"yungyung04"},"content":"    private static boolean isMergeable(String prefix, String suffix) {"},{"lineNumber":117,"author":{"gitID":"yungyung04"},"content":"        return twoWordedNaturalLanguages.contains(prefix + \" \" + suffix);"},{"lineNumber":118,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":120,"author":{"gitID":"yungyung04"},"content":"}"}],"authorContributionMap":{"yungyung04":116,"-":4}},{"path":"src/main/java/seedu/address/logic/parser/AddPersonalTaskCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"yungyung04"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DATE_TIME;"},{"lineNumber":5,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DURATION;"},{"lineNumber":6,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":7,"author":{"gitID":"yungyung04"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitID":"ChoChihTun"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":9,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":10,"author":{"gitID":"yungyung04"},"content":"import seedu.address.logic.commands.AddPersonalTaskCommand;"},{"lineNumber":11,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.logic.parser.exceptions.DurationParseException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.personal.PersonalTask;"},{"lineNumber":15,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":16,"author":{"gitID":"yungyung04"},"content":"//@@author yungyung04"},{"lineNumber":17,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":18,"author":{"gitID":"yungyung04"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"yungyung04"},"content":" * Parses input arguments and creates a new AddPersonalTaskCommand object."},{"lineNumber":20,"author":{"gitID":"yungyung04"},"content":" */"},{"lineNumber":21,"author":{"gitID":"yungyung04"},"content":"public class AddPersonalTaskCommandParser implements Parser\u003cAddPersonalTaskCommand\u003e {"},{"lineNumber":22,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":23,"author":{"gitID":"yungyung04"},"content":"    private static final String INPUT_FORMAT_VALIDATION_REGEX \u003d \"(\\\\d{2}/\\\\d{2}/\\\\d{4})\\\\s\\\\d{2}:\\\\d{2}\\\\s\""},{"lineNumber":24,"author":{"gitID":"yungyung04"},"content":"            + \"\\\\d{1,2}h\\\\d{1,2}m.*\";"},{"lineNumber":25,"author":{"gitID":"yungyung04"},"content":"    private static final int MAXIMUM_AMOUNT_OF_TASK_PARAMETER \u003d 4;"},{"lineNumber":26,"author":{"gitID":"yungyung04"},"content":"    private static final int INDEX_OF_DATE \u003d 0;"},{"lineNumber":27,"author":{"gitID":"yungyung04"},"content":"    private static final int INDEX_OF_TIME \u003d 1;"},{"lineNumber":28,"author":{"gitID":"yungyung04"},"content":"    private static final int INDEX_OF_DURATION \u003d 2;"},{"lineNumber":29,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":30,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"yungyung04"},"content":"     * Parses the given {@code String} of arguments in the context of the AddPersonalTaskCommand"},{"lineNumber":32,"author":{"gitID":"yungyung04"},"content":"     * and returns an AddPersonalTaskCommand object for execution."},{"lineNumber":33,"author":{"gitID":"yungyung04"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":34,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"yungyung04"},"content":"    public AddPersonalTaskCommand parse(String task) throws ParseException {"},{"lineNumber":36,"author":{"gitID":"yungyung04"},"content":"        if (!task.trim().matches(INPUT_FORMAT_VALIDATION_REGEX)) {"},{"lineNumber":37,"author":{"gitID":"yungyung04"},"content":"            throw new ParseException("},{"lineNumber":38,"author":{"gitID":"yungyung04"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonalTaskCommand.MESSAGE_USAGE));"},{"lineNumber":39,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":41,"author":{"gitID":"yungyung04"},"content":"        String[] arguments \u003d task.trim().split(\"\\\\s+\", MAXIMUM_AMOUNT_OF_TASK_PARAMETER);"},{"lineNumber":42,"author":{"gitID":"yungyung04"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"yungyung04"},"content":"            LocalDateTime taskDateTime \u003d"},{"lineNumber":44,"author":{"gitID":"yungyung04"},"content":"                    ParserUtil.parseDateTime(arguments[INDEX_OF_DATE] + \" \" + arguments[INDEX_OF_TIME]);"},{"lineNumber":45,"author":{"gitID":"yungyung04"},"content":"            String duration \u003d ParserUtil.parseDuration(arguments[INDEX_OF_DURATION]);"},{"lineNumber":46,"author":{"gitID":"yungyung04"},"content":"            String description \u003d ParserUtil.parseDescription(arguments, MAXIMUM_AMOUNT_OF_TASK_PARAMETER);"},{"lineNumber":47,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":48,"author":{"gitID":"yungyung04"},"content":"            return new AddPersonalTaskCommand(new PersonalTask(taskDateTime, duration, description));"},{"lineNumber":49,"author":{"gitID":"yungyung04"},"content":"        } catch (DateTimeParseException dtpe) {"},{"lineNumber":50,"author":{"gitID":"yungyung04"},"content":"            throw new ParseException(MESSAGE_INVALID_DATE_TIME);"},{"lineNumber":51,"author":{"gitID":"yungyung04"},"content":"        } catch (DurationParseException dpe) {"},{"lineNumber":52,"author":{"gitID":"yungyung04"},"content":"            throw new ParseException(MESSAGE_INVALID_DURATION);"},{"lineNumber":53,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"yungyung04"},"content":"}"}],"authorContributionMap":{"yungyung04":50,"ChoChihTun":2,"-":3}},{"path":"src/main/java/seedu/address/logic/parser/AddTuteeCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EDUCATION_LEVEL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHOOL;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddTuteeCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.tutee.EducationLevel;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.tutee.Grade;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.tutee.School;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.tutee.Subject;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.tutee.Tutee;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"ChoChihTun"},"content":"//@@author ChoChihTun"},{"lineNumber":32,"author":{"gitID":"ChoChihTun"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"ChoChihTun"},"content":" * Parses input arguments and creates a new AddTuteeCommand object"},{"lineNumber":34,"author":{"gitID":"ChoChihTun"},"content":" */"},{"lineNumber":35,"author":{"gitID":"ChoChihTun"},"content":"public class AddTuteeCommandParser implements Parser\u003cAddTuteeCommand\u003e {"},{"lineNumber":36,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":37,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"ChoChihTun"},"content":"     * Parses the given {@code String} of arguments in the context of the AddTuteeCommand"},{"lineNumber":39,"author":{"gitID":"ChoChihTun"},"content":"     * and returns an AddTuteeCommand object for execution."},{"lineNumber":40,"author":{"gitID":"ChoChihTun"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":41,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"ChoChihTun"},"content":"    public AddTuteeCommand parse(String args) throws ParseException {"},{"lineNumber":43,"author":{"gitID":"ChoChihTun"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":44,"author":{"gitID":"ChoChihTun"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":45,"author":{"gitID":"ChoChihTun"},"content":"                        PREFIX_SUBJECT, PREFIX_GRADE, PREFIX_EDUCATION_LEVEL, PREFIX_SCHOOL, PREFIX_TAG);"},{"lineNumber":46,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":47,"author":{"gitID":"ChoChihTun"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL,"},{"lineNumber":48,"author":{"gitID":"ChoChihTun"},"content":"                PREFIX_SUBJECT, PREFIX_GRADE, PREFIX_EDUCATION_LEVEL, PREFIX_SCHOOL)"},{"lineNumber":49,"author":{"gitID":"ChoChihTun"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":50,"author":{"gitID":"ChoChihTun"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTuteeCommand.MESSAGE_USAGE));"},{"lineNumber":51,"author":{"gitID":"ChoChihTun"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":53,"author":{"gitID":"ChoChihTun"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"ChoChihTun"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":55,"author":{"gitID":"ChoChihTun"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":56,"author":{"gitID":"ChoChihTun"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":57,"author":{"gitID":"ChoChihTun"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":58,"author":{"gitID":"ChoChihTun"},"content":"            Subject subject \u003d ParserUtil.parseSubject(argMultimap.getValue(PREFIX_SUBJECT)).get();"},{"lineNumber":59,"author":{"gitID":"ChoChihTun"},"content":"            Grade grade \u003d ParserUtil.parseGrade(argMultimap.getValue(PREFIX_GRADE)).get();"},{"lineNumber":60,"author":{"gitID":"ChoChihTun"},"content":"            EducationLevel educationLevel \u003d ParserUtil.parseEducationLevel("},{"lineNumber":61,"author":{"gitID":"ChoChihTun"},"content":"                    argMultimap.getValue(PREFIX_EDUCATION_LEVEL)).get();"},{"lineNumber":62,"author":{"gitID":"ChoChihTun"},"content":"            School school \u003d ParserUtil.parseSchool(argMultimap.getValue(PREFIX_SCHOOL)).get();"},{"lineNumber":63,"author":{"gitID":"ChoChihTun"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTuteeTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":64,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":65,"author":{"gitID":"ChoChihTun"},"content":"            Tutee person \u003d new Tutee(name, phone, email, address, subject, grade, educationLevel, school, tagList);"},{"lineNumber":66,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":67,"author":{"gitID":"ChoChihTun"},"content":"            return new AddTuteeCommand(person);"},{"lineNumber":68,"author":{"gitID":"ChoChihTun"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":69,"author":{"gitID":"ChoChihTun"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":70,"author":{"gitID":"ChoChihTun"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":73,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"ChoChihTun"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":75,"author":{"gitID":"ChoChihTun"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":76,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"ChoChihTun"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":78,"author":{"gitID":"ChoChihTun"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":79,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"ChoChihTun"},"content":"}"}],"authorContributionMap":{"ChoChihTun":50,"-":30}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Deletes a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":20,"author":{"gitID":"ChoChihTun"},"content":"    public static final String COMMAND_ALIAS \u003d \"d\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \": Deletes the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Person personToDelete;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        requireNonNull(personToDelete);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            model.deletePerson(personToDelete);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex) // state check"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(this.personToDelete, ((DeleteCommand) other).personToDelete));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ChoChihTun":1,"-":67}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Lists all persons in the address book to the user."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":11,"author":{"gitID":"ChoChihTun"},"content":"    public static final String COMMAND_ALIAS \u003d \"l\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ChoChihTun":1,"-":20}},{"path":"src/main/java/seedu/address/logic/parser/FindTaskCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DATE_TIME;"},{"lineNumber":5,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_FILTER_CATEGORY;"},{"lineNumber":6,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_INPUT_TYPES;"},{"lineNumber":7,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_KEYWORD_GIVEN;"},{"lineNumber":8,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_MONTH_RANGE_FORMAT;"},{"lineNumber":9,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.task.TaskSortUtil.CATEGORY_MONTH;"},{"lineNumber":10,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":11,"author":{"gitID":"yungyung04"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":12,"author":{"gitID":"yungyung04"},"content":"import java.time.format.DateTimeFormatterBuilder;"},{"lineNumber":13,"author":{"gitID":"ChoChihTun"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":14,"author":{"gitID":"yungyung04"},"content":"import java.time.temporal.ChronoField;"},{"lineNumber":15,"author":{"gitID":"yungyung04"},"content":"import java.time.temporal.TemporalAccessor;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"yungyung04"},"content":"import java.util.Locale;"},{"lineNumber":20,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":21,"author":{"gitID":"yungyung04"},"content":"import seedu.address.logic.commands.FindTaskCommand;"},{"lineNumber":22,"author":{"gitID":"yungyung04"},"content":"import seedu.address.logic.parser.exceptions.InvalidBoundariesException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":24,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":25,"author":{"gitID":"yungyung04"},"content":"//@@author yungyung04"},{"lineNumber":26,"author":{"gitID":"yungyung04"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"yungyung04"},"content":" * Parses input arguments and creates a new FindTaskCommand object"},{"lineNumber":28,"author":{"gitID":"yungyung04"},"content":" */"},{"lineNumber":29,"author":{"gitID":"yungyung04"},"content":"public class FindTaskCommandParser implements Parser\u003cFindTaskCommand\u003e {"},{"lineNumber":30,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":31,"author":{"gitID":"yungyung04"},"content":"    private static final int EXPECTED_AMOUNT_OF_PARAMETERS \u003d 3;"},{"lineNumber":32,"author":{"gitID":"yungyung04"},"content":"    private static final int INDEX_OF_FILTER_CATEGORY \u003d 0;"},{"lineNumber":33,"author":{"gitID":"yungyung04"},"content":"    private static final int INDEX_OF_INPUT_TYPE \u003d 1;"},{"lineNumber":34,"author":{"gitID":"yungyung04"},"content":"    private static final int INDEX_OF_KEYWORDS \u003d 2;"},{"lineNumber":35,"author":{"gitID":"yungyung04"},"content":"    private static final int INDEX_OF_FIRST_KEYWORD \u003d 0;"},{"lineNumber":36,"author":{"gitID":"yungyung04"},"content":"    private static final int INDEX_OF_SECOND_KEYWORD \u003d 1;"},{"lineNumber":37,"author":{"gitID":"yungyung04"},"content":"    private static final int INVALID_MONTH \u003d 0;"},{"lineNumber":38,"author":{"gitID":"yungyung04"},"content":"    private static final int MONTH_WITH_MMM_FORMAT_CHARACTER_LENGTH \u003d 3;"},{"lineNumber":39,"author":{"gitID":"yungyung04"},"content":"    private static final int REQUIRED_AMOUNT_OF_BOUNDARIES \u003d 2;"},{"lineNumber":40,"author":{"gitID":"yungyung04"},"content":"    private static final int MONTH_WITH_MM_FORMAT_CHARACTER_LENGTH \u003d 2;"},{"lineNumber":41,"author":{"gitID":"yungyung04"},"content":"    private static final int AMOUNT_OF_MONTHS \u003d 12;"},{"lineNumber":42,"author":{"gitID":"yungyung04"},"content":"    private static final String INPUT_TYPE_NAMELY \u003d \"namely\";"},{"lineNumber":43,"author":{"gitID":"yungyung04"},"content":"    private static final String INPUT_TYPE_BETWEEN \u003d \"between\";"},{"lineNumber":44,"author":{"gitID":"yungyung04"},"content":"    private static final DateTimeFormatter FORMATTER_MONTH_MM \u003d new DateTimeFormatterBuilder().parseCaseInsensitive()"},{"lineNumber":45,"author":{"gitID":"yungyung04"},"content":"            .appendPattern(\"MM\").toFormatter(Locale.ENGLISH);"},{"lineNumber":46,"author":{"gitID":"yungyung04"},"content":"    private static final DateTimeFormatter FORMATTER_MONTH_MMM \u003d new DateTimeFormatterBuilder().parseCaseInsensitive()"},{"lineNumber":47,"author":{"gitID":"yungyung04"},"content":"            .appendPattern(\"MMM\").toFormatter(Locale.ENGLISH);"},{"lineNumber":48,"author":{"gitID":"yungyung04"},"content":"    private static final DateTimeFormatter FORMATTER_MONTH_MMMM \u003d new DateTimeFormatterBuilder().parseCaseInsensitive()"},{"lineNumber":49,"author":{"gitID":"yungyung04"},"content":"            .appendPattern(\"MMMM\").toFormatter(Locale.ENGLISH);"},{"lineNumber":50,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":51,"author":{"gitID":"yungyung04"},"content":"    private List\u003cString\u003e validCategories \u003d new ArrayList\u003c\u003e(Arrays.asList(CATEGORY_MONTH));"},{"lineNumber":52,"author":{"gitID":"yungyung04"},"content":"    private List\u003cString\u003e validInputTypes \u003d new ArrayList\u003c\u003e(Arrays.asList(INPUT_TYPE_NAMELY, INPUT_TYPE_BETWEEN));"},{"lineNumber":53,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":54,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"yungyung04"},"content":"     * Parses the given {@code String} of arguments in the context of the FindTaskCommand"},{"lineNumber":56,"author":{"gitID":"yungyung04"},"content":"     * and returns a FindTaskCommand object for execution."},{"lineNumber":57,"author":{"gitID":"yungyung04"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":58,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"yungyung04"},"content":"    public FindTaskCommand parse(String args) throws ParseException {"},{"lineNumber":60,"author":{"gitID":"yungyung04"},"content":"        String[] arguments \u003d args.trim().toLowerCase().split(\"\\\\s+\", EXPECTED_AMOUNT_OF_PARAMETERS);"},{"lineNumber":61,"author":{"gitID":"yungyung04"},"content":"        if (arguments.length \u003c EXPECTED_AMOUNT_OF_PARAMETERS) {"},{"lineNumber":62,"author":{"gitID":"yungyung04"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindTaskCommand.MESSAGE_USAGE));"},{"lineNumber":63,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":65,"author":{"gitID":"yungyung04"},"content":"        String filterCategory \u003d arguments[INDEX_OF_FILTER_CATEGORY];"},{"lineNumber":66,"author":{"gitID":"yungyung04"},"content":"        if (!validCategories.contains(filterCategory)) {"},{"lineNumber":67,"author":{"gitID":"yungyung04"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_FILTER_CATEGORY, FindTaskCommand.MESSAGE_USAGE));"},{"lineNumber":68,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":70,"author":{"gitID":"yungyung04"},"content":"        String inputType \u003d arguments[INDEX_OF_INPUT_TYPE];"},{"lineNumber":71,"author":{"gitID":"yungyung04"},"content":"        if (!validInputTypes.contains(inputType)) {"},{"lineNumber":72,"author":{"gitID":"yungyung04"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_INPUT_TYPES, FindTaskCommand.MESSAGE_USAGE));"},{"lineNumber":73,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":75,"author":{"gitID":"yungyung04"},"content":"        String[] keywords \u003d arguments[INDEX_OF_KEYWORDS].split(\"\\\\s+\");"},{"lineNumber":76,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":77,"author":{"gitID":"yungyung04"},"content":"        try {"},{"lineNumber":78,"author":{"gitID":"yungyung04"},"content":"            switch (filterCategory) {"},{"lineNumber":79,"author":{"gitID":"yungyung04"},"content":"            case CATEGORY_MONTH:"},{"lineNumber":80,"author":{"gitID":"yungyung04"},"content":"                keywords \u003d parseMonthKeywords(inputType, keywords);"},{"lineNumber":81,"author":{"gitID":"yungyung04"},"content":"                break;"},{"lineNumber":82,"author":{"gitID":"yungyung04"},"content":"            default:"},{"lineNumber":83,"author":{"gitID":"yungyung04"},"content":"                assert (false); // should never be called"},{"lineNumber":84,"author":{"gitID":"yungyung04"},"content":"            }"},{"lineNumber":85,"author":{"gitID":"yungyung04"},"content":"        } catch (DateTimeParseException dtpe) {"},{"lineNumber":86,"author":{"gitID":"yungyung04"},"content":"            throw new ParseException(MESSAGE_INVALID_KEYWORD_GIVEN);"},{"lineNumber":87,"author":{"gitID":"yungyung04"},"content":"        } catch (InvalidBoundariesException ibe) {"},{"lineNumber":88,"author":{"gitID":"yungyung04"},"content":"            throw new ParseException(MESSAGE_INVALID_MONTH_RANGE_FORMAT);"},{"lineNumber":89,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"yungyung04"},"content":"        return new FindTaskCommand(filterCategory, keywords);"},{"lineNumber":91,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":93,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"yungyung04"},"content":"     * Parses month keywords into the required form for the purpose of creating a FindTaskCommand"},{"lineNumber":95,"author":{"gitID":"yungyung04"},"content":"     * @throws ParseException if the given input type is not recognized."},{"lineNumber":96,"author":{"gitID":"yungyung04"},"content":"     * @throws DateTimeParseException if any of the keywords given is an invalid month"},{"lineNumber":97,"author":{"gitID":"yungyung04"},"content":"     * @throws InvalidBoundariesException if the given keywords are invalid boundary values"},{"lineNumber":98,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"yungyung04"},"content":"    private String[] parseMonthKeywords(String inputType, String[] keywords) throws DateTimeParseException,"},{"lineNumber":100,"author":{"gitID":"yungyung04"},"content":"            InvalidBoundariesException {"},{"lineNumber":101,"author":{"gitID":"yungyung04"},"content":"        int[] months;"},{"lineNumber":102,"author":{"gitID":"yungyung04"},"content":"        String[] convertedKeywords \u003d NaturalLanguageIdentifier.getInstance()"},{"lineNumber":103,"author":{"gitID":"yungyung04"},"content":"                .convertNaturalLanguagesIntoMonths(keywords);"},{"lineNumber":104,"author":{"gitID":"yungyung04"},"content":"        months \u003d parseMonthsAsIntegers(convertedKeywords);"},{"lineNumber":105,"author":{"gitID":"yungyung04"},"content":"        if (inputType.equals(INPUT_TYPE_BETWEEN)) {"},{"lineNumber":106,"author":{"gitID":"yungyung04"},"content":"            if (!hasValidMonthBoundaries(months)) {"},{"lineNumber":107,"author":{"gitID":"yungyung04"},"content":"                throw new InvalidBoundariesException();"},{"lineNumber":108,"author":{"gitID":"yungyung04"},"content":"            }"},{"lineNumber":109,"author":{"gitID":"yungyung04"},"content":"            months \u003d getAllMonthsBetweenBoundaries(months[INDEX_OF_FIRST_KEYWORD], months[INDEX_OF_SECOND_KEYWORD]);"},{"lineNumber":110,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"yungyung04"},"content":"        convertedKeywords \u003d convertIntoStrings(months);"},{"lineNumber":112,"author":{"gitID":"yungyung04"},"content":"        return convertedKeywords;"},{"lineNumber":113,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":115,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"yungyung04"},"content":"     * Converts an array of integer into an array of String with the same value."},{"lineNumber":117,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"yungyung04"},"content":"    private String[] convertIntoStrings(int[] integers) {"},{"lineNumber":119,"author":{"gitID":"yungyung04"},"content":"        String[] strings \u003d new String[integers.length];"},{"lineNumber":120,"author":{"gitID":"yungyung04"},"content":"        for (int i \u003d 0; i \u003c integers.length; i++) {"},{"lineNumber":121,"author":{"gitID":"yungyung04"},"content":"            strings[i] \u003d Integer.toString(integers[i]);"},{"lineNumber":122,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"yungyung04"},"content":"        return strings;"},{"lineNumber":124,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":126,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"yungyung04"},"content":"     * Returns all months given two month boundaries."},{"lineNumber":128,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"yungyung04"},"content":"    private int[] getAllMonthsBetweenBoundaries(int lowerBoundary, int upperBoundary) {"},{"lineNumber":130,"author":{"gitID":"yungyung04"},"content":"        int monthDifference;"},{"lineNumber":131,"author":{"gitID":"yungyung04"},"content":"        int[] monthsWithinRange;"},{"lineNumber":132,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":133,"author":{"gitID":"yungyung04"},"content":"        if (lowerBoundary \u003c upperBoundary) {"},{"lineNumber":134,"author":{"gitID":"yungyung04"},"content":"            monthDifference \u003d upperBoundary - lowerBoundary + 1;"},{"lineNumber":135,"author":{"gitID":"yungyung04"},"content":"            monthsWithinRange \u003d new int[monthDifference];"},{"lineNumber":136,"author":{"gitID":"yungyung04"},"content":"            for (int i \u003d 0; i \u003c monthDifference; i++) {"},{"lineNumber":137,"author":{"gitID":"yungyung04"},"content":"                monthsWithinRange[i] \u003d lowerBoundary + i;"},{"lineNumber":138,"author":{"gitID":"yungyung04"},"content":"            }"},{"lineNumber":139,"author":{"gitID":"yungyung04"},"content":"        } else {"},{"lineNumber":140,"author":{"gitID":"yungyung04"},"content":"            monthDifference \u003d upperBoundary + AMOUNT_OF_MONTHS + 1 - lowerBoundary;"},{"lineNumber":141,"author":{"gitID":"yungyung04"},"content":"            monthsWithinRange \u003d new int[monthDifference];"},{"lineNumber":142,"author":{"gitID":"yungyung04"},"content":"            for (int i \u003d 0; i \u003c monthDifference; i++) {"},{"lineNumber":143,"author":{"gitID":"yungyung04"},"content":"                if (lowerBoundary + i \u003c\u003d AMOUNT_OF_MONTHS) {"},{"lineNumber":144,"author":{"gitID":"yungyung04"},"content":"                    monthsWithinRange[i] \u003d lowerBoundary + i;"},{"lineNumber":145,"author":{"gitID":"yungyung04"},"content":"                } else {"},{"lineNumber":146,"author":{"gitID":"yungyung04"},"content":"                    monthsWithinRange[i] \u003d lowerBoundary + i - AMOUNT_OF_MONTHS;"},{"lineNumber":147,"author":{"gitID":"yungyung04"},"content":"                }"},{"lineNumber":148,"author":{"gitID":"yungyung04"},"content":"            }"},{"lineNumber":149,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"yungyung04"},"content":"        return monthsWithinRange;"},{"lineNumber":151,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":153,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":154,"author":{"gitID":"yungyung04"},"content":"     * Returns true if the given months are valid boundaries."},{"lineNumber":155,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"yungyung04"},"content":"    private boolean hasValidMonthBoundaries(int[] months) {"},{"lineNumber":157,"author":{"gitID":"yungyung04"},"content":"        return months.length \u003d\u003d REQUIRED_AMOUNT_OF_BOUNDARIES"},{"lineNumber":158,"author":{"gitID":"yungyung04"},"content":"                \u0026\u0026 months[INDEX_OF_FIRST_KEYWORD] !\u003d months[INDEX_OF_SECOND_KEYWORD];"},{"lineNumber":159,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":161,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":162,"author":{"gitID":"yungyung04"},"content":"     * Parses given {@code String[]} of months into their integer representation."},{"lineNumber":163,"author":{"gitID":"yungyung04"},"content":"     * @throws DateTimeParseException if any of the given month is invalid."},{"lineNumber":164,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"yungyung04"},"content":"    private int[] parseMonthsAsIntegers(String[] keywords) throws DateTimeParseException {"},{"lineNumber":166,"author":{"gitID":"yungyung04"},"content":"        int[] months \u003d new int[keywords.length];"},{"lineNumber":167,"author":{"gitID":"yungyung04"},"content":"        for (int i \u003d 0; i \u003c keywords.length; i++) {"},{"lineNumber":168,"author":{"gitID":"yungyung04"},"content":"            months[i] \u003d parseMonthAsInteger(keywords[i]);"},{"lineNumber":169,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"yungyung04"},"content":"        return months;"},{"lineNumber":171,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":173,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"yungyung04"},"content":"     * Parses given {@code String} of month into its integer representation."},{"lineNumber":175,"author":{"gitID":"yungyung04"},"content":"     * @throws DateTimeParseException if the given month is invalid."},{"lineNumber":176,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"yungyung04"},"content":"    private int parseMonthAsInteger(String monthString) throws DateTimeParseException {"},{"lineNumber":178,"author":{"gitID":"yungyung04"},"content":"        TemporalAccessor accessor;"},{"lineNumber":179,"author":{"gitID":"yungyung04"},"content":"        int month \u003d INVALID_MONTH;"},{"lineNumber":180,"author":{"gitID":"yungyung04"},"content":"        if (monthString.length() \u003c MONTH_WITH_MM_FORMAT_CHARACTER_LENGTH) {"},{"lineNumber":181,"author":{"gitID":"yungyung04"},"content":"            checkMonthWithMFormat(monthString);"},{"lineNumber":182,"author":{"gitID":"yungyung04"},"content":"            accessor \u003d FORMATTER_MONTH_MM.parse(\"0\" + monthString);"},{"lineNumber":183,"author":{"gitID":"yungyung04"},"content":"            month \u003d accessor.get(ChronoField.MONTH_OF_YEAR);"},{"lineNumber":184,"author":{"gitID":"yungyung04"},"content":"        } else if (monthString.length() \u003d\u003d MONTH_WITH_MM_FORMAT_CHARACTER_LENGTH) {"},{"lineNumber":185,"author":{"gitID":"yungyung04"},"content":"            checkMonthWithMmFormat(monthString);"},{"lineNumber":186,"author":{"gitID":"yungyung04"},"content":"            accessor \u003d FORMATTER_MONTH_MM.parse(monthString);"},{"lineNumber":187,"author":{"gitID":"yungyung04"},"content":"            month \u003d accessor.get(ChronoField.MONTH_OF_YEAR);"},{"lineNumber":188,"author":{"gitID":"yungyung04"},"content":"        } else if (monthString.length() \u003d\u003d MONTH_WITH_MMM_FORMAT_CHARACTER_LENGTH) {"},{"lineNumber":189,"author":{"gitID":"yungyung04"},"content":"            accessor \u003d FORMATTER_MONTH_MMM.parse(monthString);"},{"lineNumber":190,"author":{"gitID":"yungyung04"},"content":"            month \u003d accessor.get(ChronoField.MONTH_OF_YEAR);"},{"lineNumber":191,"author":{"gitID":"yungyung04"},"content":"        } else if (monthString.length() \u003e MONTH_WITH_MMM_FORMAT_CHARACTER_LENGTH) {"},{"lineNumber":192,"author":{"gitID":"yungyung04"},"content":"            accessor \u003d FORMATTER_MONTH_MMMM.parse(monthString);"},{"lineNumber":193,"author":{"gitID":"yungyung04"},"content":"            month \u003d accessor.get(ChronoField.MONTH_OF_YEAR);"},{"lineNumber":194,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"yungyung04"},"content":"        return month;"},{"lineNumber":196,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":198,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":199,"author":{"gitID":"yungyung04"},"content":"     * Checks whether a given month is a valid month with m format"},{"lineNumber":200,"author":{"gitID":"yungyung04"},"content":"     * @param monthString the month provided by user input"},{"lineNumber":201,"author":{"gitID":"yungyung04"},"content":"     * @throws DateTimeParseException if the given month is invalid."},{"lineNumber":202,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":203,"author":{"gitID":"yungyung04"},"content":"    private void checkMonthWithMFormat(String monthString) throws DateTimeParseException {"},{"lineNumber":204,"author":{"gitID":"yungyung04"},"content":"        try {"},{"lineNumber":205,"author":{"gitID":"yungyung04"},"content":"            int tempMonth \u003d Integer.parseInt(monthString);"},{"lineNumber":206,"author":{"gitID":"yungyung04"},"content":"            if (tempMonth \u003c\u003d INVALID_MONTH) {"},{"lineNumber":207,"author":{"gitID":"yungyung04"},"content":"                throw new DateTimeParseException(MESSAGE_INVALID_DATE_TIME, monthString, 0);"},{"lineNumber":208,"author":{"gitID":"yungyung04"},"content":"            }"},{"lineNumber":209,"author":{"gitID":"yungyung04"},"content":"        } catch (NumberFormatException nfe) {"},{"lineNumber":210,"author":{"gitID":"yungyung04"},"content":"            throw new DateTimeParseException(MESSAGE_INVALID_DATE_TIME, monthString, 0);"},{"lineNumber":211,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":212,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":214,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":215,"author":{"gitID":"yungyung04"},"content":"     * Checks whether a given month is a valid month with mm format"},{"lineNumber":216,"author":{"gitID":"yungyung04"},"content":"     * @param monthString the month provided by user input"},{"lineNumber":217,"author":{"gitID":"yungyung04"},"content":"     * @throws DateTimeParseException if the given month is invalid."},{"lineNumber":218,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":219,"author":{"gitID":"yungyung04"},"content":"    private void checkMonthWithMmFormat(String monthString) throws DateTimeParseException {"},{"lineNumber":220,"author":{"gitID":"yungyung04"},"content":"        try {"},{"lineNumber":221,"author":{"gitID":"yungyung04"},"content":"            int tempMonth \u003d Integer.parseInt(monthString);"},{"lineNumber":222,"author":{"gitID":"yungyung04"},"content":"            if (tempMonth \u003e AMOUNT_OF_MONTHS) {"},{"lineNumber":223,"author":{"gitID":"yungyung04"},"content":"                throw new DateTimeParseException(MESSAGE_INVALID_DATE_TIME, monthString, 0);"},{"lineNumber":224,"author":{"gitID":"yungyung04"},"content":"            }"},{"lineNumber":225,"author":{"gitID":"yungyung04"},"content":"        } catch (NumberFormatException nfe) {"},{"lineNumber":226,"author":{"gitID":"yungyung04"},"content":"            throw new DateTimeParseException(MESSAGE_INVALID_DATE_TIME, monthString, 0);"},{"lineNumber":227,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"yungyung04"},"content":"}"}],"authorContributionMap":{"yungyung04":221,"ChoChihTun":1,"-":7}},{"path":"src/main/java/seedu/address/logic/commands/RedoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Redo the previously undone command."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class RedoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"redo\";"},{"lineNumber":16,"author":{"gitID":"ChoChihTun"},"content":"    public static final String COMMAND_ALIAS \u003d \"r\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canRedo()) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        undoRedoStack.popRedo().redo();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ChoChihTun":1,"-":36}},{"path":"src/main/java/seedu/address/logic/commands/ListTuteeCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"yungyung04"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":3,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TUTEES;"},{"lineNumber":4,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":5,"author":{"gitID":"yungyung04"},"content":"//@@author yungyung04"},{"lineNumber":6,"author":{"gitID":"yungyung04"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"yungyung04"},"content":" * Lists all tutees in the application to the user."},{"lineNumber":8,"author":{"gitID":"yungyung04"},"content":" */"},{"lineNumber":9,"author":{"gitID":"yungyung04"},"content":"public class ListTuteeCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":11,"author":{"gitID":"yungyung04"},"content":"    public static final String COMMAND_WORD \u003d \"listtutee\";"},{"lineNumber":12,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":13,"author":{"gitID":"yungyung04"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all tutees\";"},{"lineNumber":14,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":15,"author":{"gitID":"yungyung04"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"yungyung04"},"content":"    public CommandResult execute() {"},{"lineNumber":17,"author":{"gitID":"yungyung04"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_TUTEES);"},{"lineNumber":18,"author":{"gitID":"yungyung04"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":19,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"yungyung04"},"content":"}"}],"authorContributionMap":{"yungyung04":20}},{"path":"src/main/java/seedu/address/logic/parser/SortTaskCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"yungyung04"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_SORTER_CATEGORY;"},{"lineNumber":5,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.task.TaskSortUtil.CATEGORY_DATE_TIME;"},{"lineNumber":6,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.task.TaskSortUtil.CATEGORY_MONTH;"},{"lineNumber":7,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"yungyung04"},"content":"import seedu.address.logic.commands.SortPersonCommand;"},{"lineNumber":13,"author":{"gitID":"yungyung04"},"content":"import seedu.address.logic.commands.SortTaskCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":16,"author":{"gitID":"yungyung04"},"content":"//@@author yungyung04"},{"lineNumber":17,"author":{"gitID":"yungyung04"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"yungyung04"},"content":" * Parses input arguments and creates a new SortTaskCommand object"},{"lineNumber":19,"author":{"gitID":"yungyung04"},"content":" */"},{"lineNumber":20,"author":{"gitID":"yungyung04"},"content":"public class SortTaskCommandParser implements Parser\u003cSortTaskCommand\u003e {"},{"lineNumber":21,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":22,"author":{"gitID":"yungyung04"},"content":"    private static final String SORT_CATEGORY_VALIDATION_REGEX \u003d \"\\\\p{Alpha}+\";"},{"lineNumber":23,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":24,"author":{"gitID":"yungyung04"},"content":"    private List\u003cString\u003e validCategories \u003d"},{"lineNumber":25,"author":{"gitID":"yungyung04"},"content":"            new ArrayList\u003c\u003e(Arrays.asList(CATEGORY_MONTH, CATEGORY_DATE_TIME));"},{"lineNumber":26,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":27,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"yungyung04"},"content":"     * Parses the given {@code String} of arguments in the context of the SortTaskCommand"},{"lineNumber":29,"author":{"gitID":"yungyung04"},"content":"     * and returns a SortPersonCommand object for execution."},{"lineNumber":30,"author":{"gitID":"yungyung04"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":31,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"yungyung04"},"content":"    public SortTaskCommand parse(String args) throws ParseException {"},{"lineNumber":33,"author":{"gitID":"yungyung04"},"content":"        String sortCategory \u003d args.trim().toLowerCase();"},{"lineNumber":34,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":35,"author":{"gitID":"yungyung04"},"content":"        if (!sortCategory.matches(SORT_CATEGORY_VALIDATION_REGEX)) {"},{"lineNumber":36,"author":{"gitID":"yungyung04"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortPersonCommand.MESSAGE_USAGE));"},{"lineNumber":37,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"yungyung04"},"content":"        if (!validCategories.contains(sortCategory)) {"},{"lineNumber":39,"author":{"gitID":"yungyung04"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_SORTER_CATEGORY, SortPersonCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"yungyung04"},"content":"        return new SortTaskCommand(sortCategory);"},{"lineNumber":42,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"yungyung04"},"content":"}"}],"authorContributionMap":{"yungyung04":37,"-":6}},{"path":"src/main/java/seedu/address/logic/commands/ListTaskCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"a-shakra"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":3,"author":{"gitID":"a-shakra"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"},{"lineNumber":4,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":5,"author":{"gitID":"a-shakra"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"a-shakra"},"content":" * Lists all tasks in the application to the user."},{"lineNumber":7,"author":{"gitID":"a-shakra"},"content":" */"},{"lineNumber":8,"author":{"gitID":"a-shakra"},"content":"//@@author a-shakra"},{"lineNumber":9,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":10,"author":{"gitID":"a-shakra"},"content":"public class ListTaskCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":12,"author":{"gitID":"a-shakra"},"content":"    public static final String COMMAND_WORD \u003d \"listtask\";"},{"lineNumber":13,"author":{"gitID":"a-shakra"},"content":"    public static final String COMMAND_ALIAS \u003d \"lt\";"},{"lineNumber":14,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":15,"author":{"gitID":"a-shakra"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all tasks\";"},{"lineNumber":16,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":17,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":18,"author":{"gitID":"a-shakra"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"a-shakra"},"content":"    public CommandResult execute() {"},{"lineNumber":20,"author":{"gitID":"a-shakra"},"content":"        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":21,"author":{"gitID":"a-shakra"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":24,"author":{"gitID":"a-shakra"},"content":"}"}],"authorContributionMap":{"a-shakra":24}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Clears the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ClearCommand extends UndoableCommand {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":13,"author":{"gitID":"ChoChihTun"},"content":"    public static final String COMMAND_ALIAS \u003d \"c\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        model.resetData(new AddressBook());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ChoChihTun":1,"-":22}},{"path":"src/main/java/seedu/address/logic/commands/Command.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public abstract class Command {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    protected CommandHistory history;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    protected UndoRedoStack undoRedoStack;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of persons."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @param displaySize used to generate summary"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @return summary message for persons displayed"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static String getMessageForPersonListShownSummary(int displaySize) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        return String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, displaySize);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"yungyung04"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of tasks."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * @param displaySize used to generate summary"},{"lineNumber":31,"author":{"gitID":"yungyung04"},"content":"     * @return summary message for tasks displayed"},{"lineNumber":32,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"yungyung04"},"content":"    public static String getMessageForTaskListShownSummary(int displaySize) {"},{"lineNumber":34,"author":{"gitID":"ChoChihTun"},"content":"        return String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, displaySize);"},{"lineNumber":35,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result message."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @return feedback message of the operation result for display"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public abstract CommandResult execute() throws CommandException;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Provides any needed dependencies to the command."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Commands making use of any of these should override this method to gain"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * access to the dependencies."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yungyung04":7,"ChoChihTun":1,"-":45}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Adds a person to the address book."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":20,"author":{"gitID":"ChoChihTun"},"content":"    public static final String COMMAND_ALIAS \u003d \"a\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":32,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":34,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":35,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private final Person toAdd;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        requireNonNull(person);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ChoChihTun":1,"-":67}},{"path":"src/main/java/seedu/address/logic/commands/DeleteTaskCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"yungyung04"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":13,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.Task;"},{"lineNumber":14,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":15,"author":{"gitID":"raymond511"},"content":""},{"lineNumber":16,"author":{"gitID":"yungyung04"},"content":"//@@author yungyung04"},{"lineNumber":17,"author":{"gitID":"yungyung04"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"yungyung04"},"content":" * Deletes a task from the schedule."},{"lineNumber":19,"author":{"gitID":"yungyung04"},"content":" */"},{"lineNumber":20,"author":{"gitID":"yungyung04"},"content":"public class DeleteTaskCommand extends UndoableCommand {"},{"lineNumber":21,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":22,"author":{"gitID":"yungyung04"},"content":"    public static final String COMMAND_WORD \u003d \"deletetask\";"},{"lineNumber":23,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":24,"author":{"gitID":"yungyung04"},"content":"    public static final String MESSAGE_USAGE \u003d"},{"lineNumber":25,"author":{"gitID":"yungyung04"},"content":"            COMMAND_WORD + \": Deletes a tuition or personal task from the schedule.\\n\""},{"lineNumber":26,"author":{"gitID":"yungyung04"},"content":"            + \"Parameters: \""},{"lineNumber":27,"author":{"gitID":"yungyung04"},"content":"            + \"index of Task\""},{"lineNumber":28,"author":{"gitID":"yungyung04"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":29,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":30,"author":{"gitID":"yungyung04"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Deleted task : %1$s\";"},{"lineNumber":31,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":32,"author":{"gitID":"yungyung04"},"content":"    private final Index targetIndex;"},{"lineNumber":33,"author":{"gitID":"yungyung04"},"content":"    private Task toDelete;"},{"lineNumber":34,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":35,"author":{"gitID":"yungyung04"},"content":"    public DeleteTaskCommand(Index indexOfTask) {"},{"lineNumber":36,"author":{"gitID":"yungyung04"},"content":"        targetIndex \u003d indexOfTask;"},{"lineNumber":37,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":39,"author":{"gitID":"yungyung04"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"yungyung04"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":41,"author":{"gitID":"yungyung04"},"content":"        requireNonNull(toDelete);"},{"lineNumber":42,"author":{"gitID":"yungyung04"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"yungyung04"},"content":"            model.deleteTask(toDelete);"},{"lineNumber":44,"author":{"gitID":"yungyung04"},"content":"        } catch (TaskNotFoundException tnfe) {"},{"lineNumber":45,"author":{"gitID":"yungyung04"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":46,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"yungyung04"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toDelete.toString()));"},{"lineNumber":48,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":50,"author":{"gitID":"yungyung04"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"yungyung04"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":52,"author":{"gitID":"yungyung04"},"content":"        toDelete \u003d getAssociatedTask();"},{"lineNumber":53,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":55,"author":{"gitID":"yungyung04"},"content":"    private Task getAssociatedTask() throws CommandException {"},{"lineNumber":56,"author":{"gitID":"yungyung04"},"content":"        List\u003cTask\u003e lastShownTaskList \u003d model.getFilteredTaskList();"},{"lineNumber":57,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":58,"author":{"gitID":"yungyung04"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownTaskList.size()) {"},{"lineNumber":59,"author":{"gitID":"yungyung04"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"},{"lineNumber":60,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":62,"author":{"gitID":"yungyung04"},"content":"        return lastShownTaskList.get(targetIndex.getZeroBased());"},{"lineNumber":63,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":65,"author":{"gitID":"yungyung04"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"yungyung04"},"content":"    public boolean equals(Object other) {"},{"lineNumber":67,"author":{"gitID":"yungyung04"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":68,"author":{"gitID":"yungyung04"},"content":"                || (other instanceof DeleteTaskCommand // instanceof handles nulls"},{"lineNumber":69,"author":{"gitID":"yungyung04"},"content":"                \u0026\u0026 targetIndex.equals(((DeleteTaskCommand) other).targetIndex))"},{"lineNumber":70,"author":{"gitID":"yungyung04"},"content":"                \u0026\u0026 Objects.equals(this.toDelete, ((DeleteTaskCommand) other).toDelete);"},{"lineNumber":71,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"yungyung04"},"content":"}"}],"authorContributionMap":{"yungyung04":62,"-":9,"raymond511":1}},{"path":"src/main/java/seedu/address/logic/commands/HistoryCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Lists all the commands entered by user from the start of app launch."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class HistoryCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"history\";"},{"lineNumber":18,"author":{"gitID":"ChoChihTun"},"content":"    public static final String COMMAND_ALIAS \u003d \"h\";"},{"lineNumber":19,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        List\u003cString\u003e previousCommands \u003d history.getHistory();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        if (previousCommands.isEmpty()) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            return new CommandResult(MESSAGE_NO_HISTORY);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        Collections.reverse(previousCommands);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        requireNonNull(history);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.history \u003d history;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ChoChihTun":2,"-":38}},{"path":"src/main/java/seedu/address/logic/commands/UndoableCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":6,"author":{"gitID":"a-shakra"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Represents a command which can be undone and redone."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private ReadOnlyAddressBook previousAddressBook;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    protected abstract CommandResult executeUndoableCommand() throws CommandException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Stores the current state of {@code model#addressBook}."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private void saveAddressBookSnapshot() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.previousAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * This method is called before the execution of {@code UndoableCommand}."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * {@code UndoableCommand}s that require this preprocessing step should override this method."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {}"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Reverts the AddressBook to the state before this command"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * was executed and updates the filtered person list to"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * show all persons."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    protected final void undo() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, previousAddressBook);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        model.resetData(previousAddressBook);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":43,"author":{"gitID":"a-shakra"},"content":"        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Executes the command and updates the filtered person"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * list to show all persons."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    protected final void redo() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            executeUndoableCommand();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The command has been successfully executed previously; \""},{"lineNumber":56,"author":{"gitID":"-"},"content":"                    + \"it should not fail now\");"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":59,"author":{"gitID":"a-shakra"},"content":"        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public final CommandResult execute() throws CommandException {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        saveAddressBookSnapshot();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        preprocessUndoableCommand();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return executeUndoableCommand();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"a-shakra":3,"-":65}},{"path":"src/main/java/seedu/address/logic/commands/SortPersonCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"yungyung04"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":3,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_EDUCATION_LEVEL;"},{"lineNumber":4,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_GRADE;"},{"lineNumber":5,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_NAME;"},{"lineNumber":6,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_SCHOOL;"},{"lineNumber":7,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_SUBJECT;"},{"lineNumber":8,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":9,"author":{"gitID":"yungyung04"},"content":"import java.util.Comparator;"},{"lineNumber":10,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":11,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.person.PersonSortUtil;"},{"lineNumber":13,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":14,"author":{"gitID":"yungyung04"},"content":"//@@author yungyung04"},{"lineNumber":15,"author":{"gitID":"yungyung04"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"yungyung04"},"content":" * Sorts all persons from the last shown list lexicographically according to the specified sorting category."},{"lineNumber":17,"author":{"gitID":"yungyung04"},"content":" * Since tutee contains specific information such as grade,"},{"lineNumber":18,"author":{"gitID":"yungyung04"},"content":" * a Person who is not a tutee will be listed last when such information is selected to be the sorting category."},{"lineNumber":19,"author":{"gitID":"yungyung04"},"content":" */"},{"lineNumber":20,"author":{"gitID":"yungyung04"},"content":"public class SortPersonCommand extends Command {"},{"lineNumber":21,"author":{"gitID":"yungyung04"},"content":"    public static final String COMMAND_WORD \u003d \"sortpersonby\";"},{"lineNumber":22,"author":{"gitID":"yungyung04"},"content":"    public static final String COMMAND_ALIAS \u003d \"spb\";"},{"lineNumber":23,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":24,"author":{"gitID":"yungyung04"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"sorted list of persons successfully\";"},{"lineNumber":25,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":26,"author":{"gitID":"yungyung04"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":27,"author":{"gitID":"yungyung04"},"content":"            + \": sorts all visible persons lexicographically according to the specified sorting category.\\n\""},{"lineNumber":28,"author":{"gitID":"yungyung04"},"content":"            + \"Persons who are not Tutees will be listed last when a tutee detail is the selected category \""},{"lineNumber":29,"author":{"gitID":"yungyung04"},"content":"            + \"(refer to User Guide)\\n\""},{"lineNumber":30,"author":{"gitID":"yungyung04"},"content":"            + \"Parameter: sort_category\\n\""},{"lineNumber":31,"author":{"gitID":"yungyung04"},"content":"            + \"Choice of sort_categories: \""},{"lineNumber":32,"author":{"gitID":"yungyung04"},"content":"            + CATEGORY_NAME + \", \""},{"lineNumber":33,"author":{"gitID":"yungyung04"},"content":"            + CATEGORY_EDUCATION_LEVEL + \", \""},{"lineNumber":34,"author":{"gitID":"yungyung04"},"content":"            + CATEGORY_GRADE + \", \""},{"lineNumber":35,"author":{"gitID":"yungyung04"},"content":"            + CATEGORY_SCHOOL + \", \""},{"lineNumber":36,"author":{"gitID":"yungyung04"},"content":"            + CATEGORY_SUBJECT + \"\\n\""},{"lineNumber":37,"author":{"gitID":"yungyung04"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + CATEGORY_GRADE;"},{"lineNumber":38,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":39,"author":{"gitID":"yungyung04"},"content":"    private final String category;"},{"lineNumber":40,"author":{"gitID":"yungyung04"},"content":"    private final Comparator\u003cPerson\u003e comparator;"},{"lineNumber":41,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":42,"author":{"gitID":"yungyung04"},"content":"    public SortPersonCommand(String category) {"},{"lineNumber":43,"author":{"gitID":"yungyung04"},"content":"        this.category \u003d category;"},{"lineNumber":44,"author":{"gitID":"yungyung04"},"content":"        comparator \u003d PersonSortUtil.getComparator(category);"},{"lineNumber":45,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":47,"author":{"gitID":"yungyung04"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"yungyung04"},"content":"    public CommandResult execute() {"},{"lineNumber":49,"author":{"gitID":"yungyung04"},"content":"        model.sortFilteredPersonList(comparator);"},{"lineNumber":50,"author":{"gitID":"yungyung04"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":51,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":53,"author":{"gitID":"yungyung04"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"yungyung04"},"content":"    public boolean equals(Object other) {"},{"lineNumber":55,"author":{"gitID":"yungyung04"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":56,"author":{"gitID":"yungyung04"},"content":"                || (other instanceof SortPersonCommand // instanceof handles nulls"},{"lineNumber":57,"author":{"gitID":"yungyung04"},"content":"                \u0026\u0026 category.equals(((SortPersonCommand) other).category));"},{"lineNumber":58,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"yungyung04"},"content":"}"}],"authorContributionMap":{"yungyung04":59}},{"path":"src/main/java/seedu/address/logic/commands/AddTuteeCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EDUCATION_LEVEL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHOOL;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.tutee.Tutee;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"ChoChihTun"},"content":"//@@author ChoChihTun"},{"lineNumber":19,"author":{"gitID":"ChoChihTun"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"ChoChihTun"},"content":" * Adds a tutee to the address book"},{"lineNumber":21,"author":{"gitID":"ChoChihTun"},"content":" */"},{"lineNumber":22,"author":{"gitID":"ChoChihTun"},"content":"public class AddTuteeCommand extends UndoableCommand {"},{"lineNumber":23,"author":{"gitID":"ChoChihTun"},"content":"    public static final String COMMAND_WORD \u003d \"addtutee\";"},{"lineNumber":24,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":25,"author":{"gitID":"ChoChihTun"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a tutee to the address book. \""},{"lineNumber":26,"author":{"gitID":"ChoChihTun"},"content":"            + \"Parameters: \""},{"lineNumber":27,"author":{"gitID":"ChoChihTun"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":28,"author":{"gitID":"ChoChihTun"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":29,"author":{"gitID":"ChoChihTun"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":30,"author":{"gitID":"ChoChihTun"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":31,"author":{"gitID":"ChoChihTun"},"content":"            + PREFIX_SUBJECT + \"SUBJECT \""},{"lineNumber":32,"author":{"gitID":"ChoChihTun"},"content":"            + PREFIX_GRADE + \"GRADE \""},{"lineNumber":33,"author":{"gitID":"ChoChihTun"},"content":"            + PREFIX_EDUCATION_LEVEL + \"EDUCATION LEVEL \""},{"lineNumber":34,"author":{"gitID":"ChoChihTun"},"content":"            + PREFIX_SCHOOL + \"SCHOOL \""},{"lineNumber":35,"author":{"gitID":"ChoChihTun"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":36,"author":{"gitID":"ChoChihTun"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":37,"author":{"gitID":"ChoChihTun"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":38,"author":{"gitID":"ChoChihTun"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":39,"author":{"gitID":"ChoChihTun"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":40,"author":{"gitID":"ChoChihTun"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":41,"author":{"gitID":"ChoChihTun"},"content":"            + PREFIX_SUBJECT + \"Economics \""},{"lineNumber":42,"author":{"gitID":"ChoChihTun"},"content":"            + PREFIX_GRADE + \"B+ \""},{"lineNumber":43,"author":{"gitID":"ChoChihTun"},"content":"            + PREFIX_EDUCATION_LEVEL + \"junior college \""},{"lineNumber":44,"author":{"gitID":"ChoChihTun"},"content":"            + PREFIX_SCHOOL + \"Victoria Junior College \""},{"lineNumber":45,"author":{"gitID":"ChoChihTun"},"content":"            + PREFIX_TAG + \"priority \""},{"lineNumber":46,"author":{"gitID":"ChoChihTun"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":47,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":48,"author":{"gitID":"ChoChihTun"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New tutee added: %1$s\";"},{"lineNumber":49,"author":{"gitID":"ChoChihTun"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":50,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":51,"author":{"gitID":"ChoChihTun"},"content":"    private final Tutee toAdd;"},{"lineNumber":52,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":53,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"ChoChihTun"},"content":"     * Creates an AddTuteeCommand to add the specified {@code Tutee}"},{"lineNumber":55,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"ChoChihTun"},"content":"    public AddTuteeCommand(Tutee tutee) {"},{"lineNumber":57,"author":{"gitID":"ChoChihTun"},"content":"        requireNonNull(tutee);"},{"lineNumber":58,"author":{"gitID":"ChoChihTun"},"content":"        toAdd \u003d tutee;"},{"lineNumber":59,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":61,"author":{"gitID":"ChoChihTun"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"ChoChihTun"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":63,"author":{"gitID":"ChoChihTun"},"content":"        requireNonNull(model);"},{"lineNumber":64,"author":{"gitID":"ChoChihTun"},"content":"        try {"},{"lineNumber":65,"author":{"gitID":"ChoChihTun"},"content":"            model.addPerson(toAdd);"},{"lineNumber":66,"author":{"gitID":"ChoChihTun"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":67,"author":{"gitID":"ChoChihTun"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":68,"author":{"gitID":"ChoChihTun"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":69,"author":{"gitID":"ChoChihTun"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":71,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":73,"author":{"gitID":"ChoChihTun"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"ChoChihTun"},"content":"    public boolean equals(Object other) {"},{"lineNumber":75,"author":{"gitID":"ChoChihTun"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":76,"author":{"gitID":"ChoChihTun"},"content":"                || (other instanceof AddTuteeCommand // instanceof handles nulls"},{"lineNumber":77,"author":{"gitID":"ChoChihTun"},"content":"                \u0026\u0026 toAdd.equals(((AddTuteeCommand) other).toAdd));"},{"lineNumber":78,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"ChoChihTun"},"content":"}"},{"lineNumber":80,"author":{"gitID":"ChoChihTun"},"content":""}],"authorContributionMap":{"ChoChihTun":63,"-":17}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":30,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.model.tutee.EducationLevel;"},{"lineNumber":31,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.model.tutee.Grade;"},{"lineNumber":32,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.model.tutee.School;"},{"lineNumber":33,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.model.tutee.Subject;"},{"lineNumber":34,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.model.tutee.Tutee;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":37,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":38,"author":{"gitID":"-"},"content":" */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":42,"author":{"gitID":"ChoChihTun"},"content":"    public static final String COMMAND_ALIAS \u003d \"e\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":51,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":53,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":54,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":55,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":60,"author":{"gitID":"ChoChihTun"},"content":"    public static final String MESSAGE_INVALID_PERSON_TO_EDIT \u003d \"This person is not a tutee.\";"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"ChoChihTun"},"content":"    private static final String TUTEE_TAG_NAME \u003d \"Tutee\";"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private Person personToEdit;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private Person editedPerson;"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":103,"author":{"gitID":"ChoChihTun"},"content":"        if (!(personToEdit instanceof Tutee) \u0026\u0026 !isEditPersonFieldValid()) {"},{"lineNumber":104,"author":{"gitID":"ChoChihTun"},"content":"            throw new CommandException(MESSAGE_INVALID_PERSON_TO_EDIT);"},{"lineNumber":105,"author":{"gitID":"ChoChihTun"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":107,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":109,"author":{"gitID":"ChoChihTun"},"content":"    //@@author ChoChihTun"},{"lineNumber":110,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"ChoChihTun"},"content":"     * Checks if fields to be edited is valid for a person object"},{"lineNumber":112,"author":{"gitID":"ChoChihTun"},"content":"     *"},{"lineNumber":113,"author":{"gitID":"ChoChihTun"},"content":"     * @return true if fields to edit are valid for a person object"},{"lineNumber":114,"author":{"gitID":"ChoChihTun"},"content":"     *         false if fields to edit are invalid for a person object"},{"lineNumber":115,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"ChoChihTun"},"content":"    private boolean isEditPersonFieldValid() {"},{"lineNumber":117,"author":{"gitID":"ChoChihTun"},"content":"        Tag tuteeTag \u003d new Tag(TUTEE_TAG_NAME);"},{"lineNumber":118,"author":{"gitID":"ChoChihTun"},"content":"        return !editPersonDescriptor.isAnyTuteeFieldEdited()"},{"lineNumber":119,"author":{"gitID":"ChoChihTun"},"content":"                \u0026\u0026 isEditedPersonTagValid(tuteeTag);"},{"lineNumber":120,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":122,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"ChoChihTun"},"content":"     * Checks if edited tag for person object is valid"},{"lineNumber":124,"author":{"gitID":"ChoChihTun"},"content":"     *"},{"lineNumber":125,"author":{"gitID":"ChoChihTun"},"content":"     * @param tuteeTag tutee tag is invalid for a person object"},{"lineNumber":126,"author":{"gitID":"ChoChihTun"},"content":"     * @return true if edited tag is valid or tag is not being edited"},{"lineNumber":127,"author":{"gitID":"ChoChihTun"},"content":"     *         false if new tag is a tutee tag which is invalid for person"},{"lineNumber":128,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"ChoChihTun"},"content":"    private boolean isEditedPersonTagValid(Tag tuteeTag) {"},{"lineNumber":130,"author":{"gitID":"ChoChihTun"},"content":"        if (editPersonDescriptor.isTagEdited()) {"},{"lineNumber":131,"author":{"gitID":"ChoChihTun"},"content":"            return !editPersonDescriptor.tags.contains(tuteeTag);"},{"lineNumber":132,"author":{"gitID":"ChoChihTun"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"ChoChihTun"},"content":"        return true;"},{"lineNumber":134,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"ChoChihTun"},"content":"    //@@author"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"ChoChihTun"},"content":"        //@@author ChoChihTun"},{"lineNumber":151,"author":{"gitID":"ChoChihTun"},"content":"        if (personToEdit instanceof Tutee) {"},{"lineNumber":152,"author":{"gitID":"ChoChihTun"},"content":"            Subject updatedSubject \u003d editPersonDescriptor.getSubject().orElse(((Tutee) personToEdit).getSubject());"},{"lineNumber":153,"author":{"gitID":"ChoChihTun"},"content":"            Grade updatedGrade \u003d editPersonDescriptor.getGrade().orElse(((Tutee) personToEdit).getGrade());"},{"lineNumber":154,"author":{"gitID":"ChoChihTun"},"content":"            EducationLevel updatedEducationalLevel \u003d editPersonDescriptor.getEducationalLevel()"},{"lineNumber":155,"author":{"gitID":"ChoChihTun"},"content":"                    .orElse(((Tutee) personToEdit).getEducationLevel());"},{"lineNumber":156,"author":{"gitID":"ChoChihTun"},"content":"            School updatedSchool \u003d editPersonDescriptor.getSchool().orElse(((Tutee) personToEdit).getSchool());"},{"lineNumber":157,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":158,"author":{"gitID":"ChoChihTun"},"content":"            return new Tutee(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedSubject, updatedGrade,"},{"lineNumber":159,"author":{"gitID":"ChoChihTun"},"content":"                    updatedEducationalLevel, updatedSchool, updatedTags);"},{"lineNumber":160,"author":{"gitID":"ChoChihTun"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"ChoChihTun"},"content":"        //@@author"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":180,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":181,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":187,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":194,"author":{"gitID":"ChoChihTun"},"content":"        private Subject subject;"},{"lineNumber":195,"author":{"gitID":"ChoChihTun"},"content":"        private Grade grade;"},{"lineNumber":196,"author":{"gitID":"ChoChihTun"},"content":"        private EducationLevel educationLevel;"},{"lineNumber":197,"author":{"gitID":"ChoChihTun"},"content":"        private School school;"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":202,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":203,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":204,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":210,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":211,"author":{"gitID":"ChoChihTun"},"content":"            setSubject(toCopy.subject);"},{"lineNumber":212,"author":{"gitID":"ChoChihTun"},"content":"            setGrade(toCopy.grade);"},{"lineNumber":213,"author":{"gitID":"ChoChihTun"},"content":"            setEducationLevel(toCopy.educationLevel);"},{"lineNumber":214,"author":{"gitID":"ChoChihTun"},"content":"            setSchool(toCopy.school);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":218,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":219,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":221,"author":{"gitID":"ChoChihTun"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address, this.tags, this.subject,"},{"lineNumber":222,"author":{"gitID":"ChoChihTun"},"content":"                    this.grade, this.educationLevel, this.school);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":234,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":238,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":246,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":250,"author":{"gitID":"-"},"content":"            this.address \u003d address;"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"ChoChihTun"},"content":"        //@@author ChoChihTun"},{"lineNumber":258,"author":{"gitID":"ChoChihTun"},"content":"        public void setSubject(Subject subject) {"},{"lineNumber":259,"author":{"gitID":"ChoChihTun"},"content":"            this.subject \u003d subject;"},{"lineNumber":260,"author":{"gitID":"ChoChihTun"},"content":"        }"},{"lineNumber":261,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":262,"author":{"gitID":"ChoChihTun"},"content":"        public Optional\u003cSubject\u003e getSubject() {"},{"lineNumber":263,"author":{"gitID":"ChoChihTun"},"content":"            return Optional.ofNullable(subject);"},{"lineNumber":264,"author":{"gitID":"ChoChihTun"},"content":"        }"},{"lineNumber":265,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":266,"author":{"gitID":"ChoChihTun"},"content":"        public void setGrade(Grade grade) {"},{"lineNumber":267,"author":{"gitID":"ChoChihTun"},"content":"            this.grade \u003d grade;"},{"lineNumber":268,"author":{"gitID":"ChoChihTun"},"content":"        }"},{"lineNumber":269,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":270,"author":{"gitID":"ChoChihTun"},"content":"        public Optional\u003cGrade\u003e getGrade() {"},{"lineNumber":271,"author":{"gitID":"ChoChihTun"},"content":"            return Optional.ofNullable(grade);"},{"lineNumber":272,"author":{"gitID":"ChoChihTun"},"content":"        }"},{"lineNumber":273,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":274,"author":{"gitID":"ChoChihTun"},"content":"        public void setEducationLevel(EducationLevel educationLevel) {"},{"lineNumber":275,"author":{"gitID":"ChoChihTun"},"content":"            this.educationLevel \u003d educationLevel;"},{"lineNumber":276,"author":{"gitID":"ChoChihTun"},"content":"        }"},{"lineNumber":277,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":278,"author":{"gitID":"ChoChihTun"},"content":"        public Optional\u003cEducationLevel\u003e getEducationalLevel() {"},{"lineNumber":279,"author":{"gitID":"ChoChihTun"},"content":"            return Optional.ofNullable(educationLevel);"},{"lineNumber":280,"author":{"gitID":"ChoChihTun"},"content":"        }"},{"lineNumber":281,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":282,"author":{"gitID":"ChoChihTun"},"content":"        public void setSchool(School school) {"},{"lineNumber":283,"author":{"gitID":"ChoChihTun"},"content":"            this.school \u003d school;"},{"lineNumber":284,"author":{"gitID":"ChoChihTun"},"content":"        }"},{"lineNumber":285,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":286,"author":{"gitID":"ChoChihTun"},"content":"        public Optional\u003cSchool\u003e getSchool() {"},{"lineNumber":287,"author":{"gitID":"ChoChihTun"},"content":"            return Optional.ofNullable(school);"},{"lineNumber":288,"author":{"gitID":"ChoChihTun"},"content":"        }"},{"lineNumber":289,"author":{"gitID":"ChoChihTun"},"content":"        //@@author"},{"lineNumber":290,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":292,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":293,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":294,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":295,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":296,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":297,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":298,"author":{"gitID":"-"},"content":""},{"lineNumber":299,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":300,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":301,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":302,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":303,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":304,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":305,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":306,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":307,"author":{"gitID":"-"},"content":""},{"lineNumber":308,"author":{"gitID":"ChoChihTun"},"content":"        //@@author ChoChihTun"},{"lineNumber":309,"author":{"gitID":"ChoChihTun"},"content":"        /**"},{"lineNumber":310,"author":{"gitID":"ChoChihTun"},"content":"         * Checks if tag is being edited"},{"lineNumber":311,"author":{"gitID":"ChoChihTun"},"content":"         *"},{"lineNumber":312,"author":{"gitID":"ChoChihTun"},"content":"         * @return true if tag is being edited"},{"lineNumber":313,"author":{"gitID":"ChoChihTun"},"content":"         *         false if tag is not being edited"},{"lineNumber":314,"author":{"gitID":"ChoChihTun"},"content":"         */"},{"lineNumber":315,"author":{"gitID":"ChoChihTun"},"content":"        public boolean isTagEdited() {"},{"lineNumber":316,"author":{"gitID":"ChoChihTun"},"content":"            return tags !\u003d null;"},{"lineNumber":317,"author":{"gitID":"ChoChihTun"},"content":"        }"},{"lineNumber":318,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":319,"author":{"gitID":"ChoChihTun"},"content":"        /**"},{"lineNumber":320,"author":{"gitID":"ChoChihTun"},"content":"         * Checks if any tutee field is being edited"},{"lineNumber":321,"author":{"gitID":"ChoChihTun"},"content":"         *"},{"lineNumber":322,"author":{"gitID":"ChoChihTun"},"content":"         * @return true if no field is being edited"},{"lineNumber":323,"author":{"gitID":"ChoChihTun"},"content":"         *         false if at least 1 field is being edited"},{"lineNumber":324,"author":{"gitID":"ChoChihTun"},"content":"         */"},{"lineNumber":325,"author":{"gitID":"ChoChihTun"},"content":"        public boolean isAnyTuteeFieldEdited() {"},{"lineNumber":326,"author":{"gitID":"ChoChihTun"},"content":"            return subject !\u003d null"},{"lineNumber":327,"author":{"gitID":"ChoChihTun"},"content":"                    || grade !\u003d null"},{"lineNumber":328,"author":{"gitID":"ChoChihTun"},"content":"                    || educationLevel !\u003d null"},{"lineNumber":329,"author":{"gitID":"ChoChihTun"},"content":"                    || school !\u003d null;"},{"lineNumber":330,"author":{"gitID":"ChoChihTun"},"content":"        }"},{"lineNumber":331,"author":{"gitID":"ChoChihTun"},"content":"        //@@author"},{"lineNumber":332,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":333,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":334,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":335,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":336,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":337,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":338,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":341,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":342,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":343,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":344,"author":{"gitID":"-"},"content":""},{"lineNumber":345,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":346,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":347,"author":{"gitID":"-"},"content":""},{"lineNumber":348,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":349,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":350,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":351,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":352,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":353,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":354,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":355,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ChoChihTun":121,"-":234}},{"path":"src/main/java/seedu/address/logic/commands/ChangeCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":5,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.ui.CalendarPanel;"},{"lineNumber":6,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":7,"author":{"gitID":"ChoChihTun"},"content":"//@@author ChoChihTun"},{"lineNumber":8,"author":{"gitID":"ChoChihTun"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"ChoChihTun"},"content":" * Changes the Calendar Time Unit View of the Application"},{"lineNumber":10,"author":{"gitID":"ChoChihTun"},"content":" */"},{"lineNumber":11,"author":{"gitID":"ChoChihTun"},"content":"public class ChangeCommand extends Command {"},{"lineNumber":12,"author":{"gitID":"ChoChihTun"},"content":"    public static final String COMMAND_WORD \u003d \"change\";"},{"lineNumber":13,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":14,"author":{"gitID":"ChoChihTun"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Changes the calendar view \""},{"lineNumber":15,"author":{"gitID":"ChoChihTun"},"content":"            + \"Parameters: \""},{"lineNumber":16,"author":{"gitID":"ChoChihTun"},"content":"            + \"TIME_UNIT (Only d, w, m or y) \""},{"lineNumber":17,"author":{"gitID":"ChoChihTun"},"content":"            + \"Example: \" + COMMAND_WORD + \" d\";"},{"lineNumber":18,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":19,"author":{"gitID":"ChoChihTun"},"content":"    public static final String MESSAGE_CONSTRAINT \u003d \"Time unit can only be d, w, m or y for day, week, month and year\""},{"lineNumber":20,"author":{"gitID":"ChoChihTun"},"content":"            + \" respectively\";"},{"lineNumber":21,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":22,"author":{"gitID":"ChoChihTun"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Calendar view changed\";"},{"lineNumber":23,"author":{"gitID":"ChoChihTun"},"content":"    public static final String MESSAGE_SAME_VIEW \u003d \"Calendar is already in the requested view\";"},{"lineNumber":24,"author":{"gitID":"ChoChihTun"},"content":"    private static final int INDEX_OF_TIME_UNIT \u003d 0;"},{"lineNumber":25,"author":{"gitID":"ChoChihTun"},"content":"    private static final String INITIAL_TIME_UNIT \u003d \"d\";"},{"lineNumber":26,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":27,"author":{"gitID":"ChoChihTun"},"content":"    private static String timeUnit \u003d INITIAL_TIME_UNIT;"},{"lineNumber":28,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":29,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"ChoChihTun"},"content":"     * Creates an ChangeCommand to change calendar into the specified view page time unit {@code timeUnit}"},{"lineNumber":31,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"ChoChihTun"},"content":"    public ChangeCommand(String timeUnit) {"},{"lineNumber":33,"author":{"gitID":"ChoChihTun"},"content":"        requireNonNull(timeUnit);"},{"lineNumber":34,"author":{"gitID":"ChoChihTun"},"content":"        this.timeUnit \u003d timeUnit;"},{"lineNumber":35,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":37,"author":{"gitID":"ChoChihTun"},"content":"    public static String getTimeUnit() {"},{"lineNumber":38,"author":{"gitID":"ChoChihTun"},"content":"        return timeUnit;"},{"lineNumber":39,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":41,"author":{"gitID":"ChoChihTun"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"ChoChihTun"},"content":"    public CommandResult execute() {"},{"lineNumber":43,"author":{"gitID":"ChoChihTun"},"content":"        CalendarPanel.changeViewPage(timeUnit.charAt(INDEX_OF_TIME_UNIT));"},{"lineNumber":44,"author":{"gitID":"ChoChihTun"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS));"},{"lineNumber":45,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":47,"author":{"gitID":"ChoChihTun"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"ChoChihTun"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"ChoChihTun"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"ChoChihTun"},"content":"                || (other instanceof ChangeCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"ChoChihTun"},"content":"                \u0026\u0026 timeUnit.equals(((ChangeCommand) other).timeUnit));"},{"lineNumber":52,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":54,"author":{"gitID":"ChoChihTun"},"content":"}"}],"authorContributionMap":{"ChoChihTun":51,"-":3}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"ChoChihTun"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":12,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Selects a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":19,"author":{"gitID":"ChoChihTun"},"content":"    public static final String COMMAND_ALIAS \u003d \"s\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \": Selects the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"ChoChihTun"},"content":"        JumpToListRequestEvent jumpToListRequestEvent \u003d new JumpToListRequestEvent(targetIndex);"},{"lineNumber":43,"author":{"gitID":"ChoChihTun"},"content":"        EventsCenter.getInstance().post(jumpToListRequestEvent);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ChoChihTun":7,"-":47}},{"path":"src/main/java/seedu/address/logic/commands/SortTaskCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.task.TaskSortUtil.CATEGORY_DATE_TIME;"},{"lineNumber":5,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.task.TaskSortUtil.CATEGORY_MONTH;"},{"lineNumber":6,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":7,"author":{"gitID":"yungyung04"},"content":"import java.util.Comparator;"},{"lineNumber":8,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":9,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.Task;"},{"lineNumber":10,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.task.TaskSortUtil;"},{"lineNumber":11,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":12,"author":{"gitID":"yungyung04"},"content":"//@@author yungyung04"},{"lineNumber":13,"author":{"gitID":"yungyung04"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"yungyung04"},"content":" * Sorts all tasks from the last shown list according to the specified sorting category in an increasing order"},{"lineNumber":15,"author":{"gitID":"yungyung04"},"content":" */"},{"lineNumber":16,"author":{"gitID":"yungyung04"},"content":"public class SortTaskCommand extends Command {"},{"lineNumber":17,"author":{"gitID":"yungyung04"},"content":"    public static final String COMMAND_WORD \u003d \"sorttaskby\";"},{"lineNumber":18,"author":{"gitID":"yungyung04"},"content":"    public static final String COMMAND_ALIAS \u003d \"stb\";"},{"lineNumber":19,"author":{"gitID":"yungyung04"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"sorted list of tasks successfully\";"},{"lineNumber":20,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":21,"author":{"gitID":"yungyung04"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":22,"author":{"gitID":"yungyung04"},"content":"            + \"Sorts all visible tasks according to the specified sorting category in an increasing order\\n\""},{"lineNumber":23,"author":{"gitID":"yungyung04"},"content":"            + \"Parameter: sort_category\\n\""},{"lineNumber":24,"author":{"gitID":"yungyung04"},"content":"            + \"Choice of sort_categories: \""},{"lineNumber":25,"author":{"gitID":"yungyung04"},"content":"            + CATEGORY_MONTH + \", \""},{"lineNumber":26,"author":{"gitID":"yungyung04"},"content":"            + CATEGORY_DATE_TIME + \"\\n\""},{"lineNumber":27,"author":{"gitID":"yungyung04"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + CATEGORY_MONTH;"},{"lineNumber":28,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":29,"author":{"gitID":"yungyung04"},"content":"    private final String category;"},{"lineNumber":30,"author":{"gitID":"yungyung04"},"content":"    private final Comparator\u003cTask\u003e comparator;"},{"lineNumber":31,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":32,"author":{"gitID":"yungyung04"},"content":"    public SortTaskCommand(String category) {"},{"lineNumber":33,"author":{"gitID":"yungyung04"},"content":"        requireNonNull(category);"},{"lineNumber":34,"author":{"gitID":"yungyung04"},"content":"        this.category \u003d category;"},{"lineNumber":35,"author":{"gitID":"yungyung04"},"content":"        comparator \u003d TaskSortUtil.getComparator(category);"},{"lineNumber":36,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":38,"author":{"gitID":"yungyung04"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"yungyung04"},"content":"    public CommandResult execute() {"},{"lineNumber":40,"author":{"gitID":"yungyung04"},"content":"        requireNonNull(comparator);"},{"lineNumber":41,"author":{"gitID":"yungyung04"},"content":"        model.sortFilteredTaskList(comparator);"},{"lineNumber":42,"author":{"gitID":"yungyung04"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":43,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":45,"author":{"gitID":"yungyung04"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"yungyung04"},"content":"    public boolean equals(Object other) {"},{"lineNumber":47,"author":{"gitID":"yungyung04"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":48,"author":{"gitID":"yungyung04"},"content":"                || (other instanceof SortTaskCommand // instanceof handles nulls"},{"lineNumber":49,"author":{"gitID":"yungyung04"},"content":"                \u0026\u0026 category.equals(((SortTaskCommand) other).category));"},{"lineNumber":50,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"yungyung04"},"content":"}"}],"authorContributionMap":{"yungyung04":48,"-":3}},{"path":"src/main/java/seedu/address/logic/commands/UndoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Undo the previous {@code UndoableCommand}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class UndoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"undo\";"},{"lineNumber":16,"author":{"gitID":"ChoChihTun"},"content":"    public static final String COMMAND_ALIAS \u003d \"u\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canUndo()) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        undoRedoStack.popUndo().undo();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ChoChihTun":1,"-":36}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"a-shakra"},"content":"import seedu.address.model.Task;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.ui.CalendarPanel;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        addressBookParser \u003d new AddressBookParser();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":44,"author":{"gitID":"ChoChihTun"},"content":"            CalendarPanel.updateCalendar(model.getFilteredTaskList());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"a-shakra"},"content":"    //@@author a-shakra"},{"lineNumber":57,"author":{"gitID":"a-shakra"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"a-shakra"},"content":"    public ObservableList\u003cTask\u003e getFilteredTaskList() {"},{"lineNumber":59,"author":{"gitID":"a-shakra"},"content":"        return model.getFilteredTaskList();"},{"lineNumber":60,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"a-shakra"},"content":"    //@@author"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ChoChihTun":2,"a-shakra":7,"-":57}},{"path":"src/main/java/seedu/address/logic/commands/AddPersonalTaskCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.personal.PersonalTask;"},{"lineNumber":7,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.model.task.exceptions.TimingClashException;"},{"lineNumber":8,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":9,"author":{"gitID":"yungyung04"},"content":"//@@author yungyung04"},{"lineNumber":10,"author":{"gitID":"yungyung04"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"yungyung04"},"content":" * Adds a personal task into the schedule."},{"lineNumber":12,"author":{"gitID":"yungyung04"},"content":" */"},{"lineNumber":13,"author":{"gitID":"yungyung04"},"content":"public class AddPersonalTaskCommand extends UndoableCommand {"},{"lineNumber":14,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":15,"author":{"gitID":"yungyung04"},"content":"    public static final String COMMAND_WORD \u003d \"addtask\";"},{"lineNumber":16,"author":{"gitID":"yungyung04"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a personal task into the schedule.\\n\""},{"lineNumber":17,"author":{"gitID":"yungyung04"},"content":"            + \"Parameters: \""},{"lineNumber":18,"author":{"gitID":"yungyung04"},"content":"            + \"Date(dd/mm/yyyy) \""},{"lineNumber":19,"author":{"gitID":"yungyung04"},"content":"            + \"Start time(hh:mm) \""},{"lineNumber":20,"author":{"gitID":"yungyung04"},"content":"            + \"Duration(XXhXXm) \""},{"lineNumber":21,"author":{"gitID":"yungyung04"},"content":"            + \"Description( anything; leading and trailing whitespaces will be trimmed )\\n\""},{"lineNumber":22,"author":{"gitID":"yungyung04"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":23,"author":{"gitID":"yungyung04"},"content":"            + \"10/12/2018 \""},{"lineNumber":24,"author":{"gitID":"yungyung04"},"content":"            + \"12:30 \""},{"lineNumber":25,"author":{"gitID":"yungyung04"},"content":"            + \"1h30m \""},{"lineNumber":26,"author":{"gitID":"yungyung04"},"content":"            + \"Yoga\";"},{"lineNumber":27,"author":{"gitID":"yungyung04"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Task added: %1$s\";"},{"lineNumber":28,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":29,"author":{"gitID":"yungyung04"},"content":"    private final PersonalTask toAdd;"},{"lineNumber":30,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":31,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"yungyung04"},"content":"     * Creates an AddPersonalTaskCommand to add the specified {@code Task}."},{"lineNumber":33,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"yungyung04"},"content":"    public AddPersonalTaskCommand(PersonalTask task) {"},{"lineNumber":35,"author":{"gitID":"yungyung04"},"content":"        requireNonNull(task);"},{"lineNumber":36,"author":{"gitID":"yungyung04"},"content":"        toAdd \u003d task;"},{"lineNumber":37,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":39,"author":{"gitID":"ChoChihTun"},"content":"    //@@author ChoChihTun"},{"lineNumber":40,"author":{"gitID":"ChoChihTun"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"ChoChihTun"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":42,"author":{"gitID":"ChoChihTun"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"ChoChihTun"},"content":"            model.addTask(toAdd);"},{"lineNumber":44,"author":{"gitID":"ChoChihTun"},"content":"        } catch (TimingClashException tce) {"},{"lineNumber":45,"author":{"gitID":"ChoChihTun"},"content":"            throw new CommandException(tce.getMessage());"},{"lineNumber":46,"author":{"gitID":"ChoChihTun"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"ChoChihTun"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":48,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":50,"author":{"gitID":"yungyung04"},"content":"    //@@author yungyung04"},{"lineNumber":51,"author":{"gitID":"yungyung04"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"yungyung04"},"content":"    public boolean equals(Object other) {"},{"lineNumber":53,"author":{"gitID":"yungyung04"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":54,"author":{"gitID":"yungyung04"},"content":"                || (other instanceof AddPersonalTaskCommand // instanceof handles nulls"},{"lineNumber":55,"author":{"gitID":"yungyung04"},"content":"                \u0026\u0026 toAdd.equals(((AddPersonalTaskCommand) other).toAdd));"},{"lineNumber":56,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"yungyung04"},"content":"}"}],"authorContributionMap":{"yungyung04":41,"ChoChihTun":12,"-":4}},{"path":"src/main/java/seedu/address/storage/AddressBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Represents a storage for {@link seedu.address.model.AddressBook}."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public interface AddressBookStorage {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Returns the file path of the data file."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    String getAddressBookFilePath();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @see #getAddressBookFilePath()"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to the storage."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @param addressBook cannot be null."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @see #saveAddressBook(ReadOnlyAddressBook)"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"raymond511"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"raymond511"},"content":"     * backs up (@link ReadOnlyAddressBook) to a local offline backup file"},{"lineNumber":46,"author":{"gitID":"raymond511"},"content":"     *"},{"lineNumber":47,"author":{"gitID":"raymond511"},"content":"     * @param addressBook cannot be null"},{"lineNumber":48,"author":{"gitID":"raymond511"},"content":"     * @throws IOException if there was any problem writing to the file"},{"lineNumber":49,"author":{"gitID":"raymond511"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"raymond511"},"content":"    void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":44,"raymond511":7}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Manages storage of AddressBook data in local storage."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class StorageManager extends ComponentManager implements Storage {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private AddressBookStorage addressBookStorage;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"raymond511"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"raymond511"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":82,"author":{"gitID":"raymond511"},"content":"        logger.fine(\"Attempting to write to an offline backup data file: \");"},{"lineNumber":83,"author":{"gitID":"raymond511"},"content":"        addressBookStorage.backupAddressBook(addressBook);"},{"lineNumber":84,"author":{"gitID":"raymond511"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"raymond511"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            saveAddressBook(event.data);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":92,"raymond511":6}},{"path":"src/main/java/seedu/address/storage/XmlAddressBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.commons.util.EncryptionUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A class to access AddressBook data stored as an xml file on the hard disk."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class XmlAddressBookStorage implements AddressBookStorage {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private String filePath;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public XmlAddressBookStorage(String filePath) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return readAddressBook(filePath);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Similar to {@link #readAddressBook()}"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException,"},{"lineNumber":45,"author":{"gitID":"raymond511"},"content":"            IOException {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        File addressBookFile \u003d new File(filePath);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (!addressBookFile.exists()) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            logger.info(\"AddressBook file \"  + addressBookFile + \" not found\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"ChoChihTun"},"content":"        EncryptionUtil.decrypt(addressBookFile);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook xmlAddressBook \u003d XmlFileStorage.loadDataFromSaveFile(new File(filePath));"},{"lineNumber":56,"author":{"gitID":"ChoChihTun"},"content":"        EncryptionUtil.encrypt(addressBookFile);"},{"lineNumber":57,"author":{"gitID":"raymond511"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            return Optional.of(xmlAddressBook.toModelType());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            logger.info(\"Illegal values found in \" + addressBookFile + \": \" + ive.getMessage());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, filePath);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        requireNonNull(addressBook);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":81,"author":{"gitID":"ChoChihTun"},"content":"        EncryptionUtil.decrypt(file);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        XmlFileStorage.saveDataToFile(file, new XmlSerializableAddressBook(addressBook));"},{"lineNumber":83,"author":{"gitID":"ChoChihTun"},"content":"        EncryptionUtil.encrypt(file);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"},{"lineNumber":88,"author":{"gitID":"raymond511"},"content":"     * @param addressBook of the data. Cannot be null"},{"lineNumber":89,"author":{"gitID":"raymond511"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"raymond511"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        requireNonNull(addressBook);"},{"lineNumber":92,"author":{"gitID":"raymond511"},"content":"        saveAddressBook(addressBook, filePath + \".backup\");"},{"lineNumber":93,"author":{"gitID":"raymond511"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"raymond511"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ChoChihTun":6,"-":81,"raymond511":8}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedTask.java","lines":[{"lineNumber":1,"author":{"gitID":"a-shakra"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":3,"author":{"gitID":"a-shakra"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":5,"author":{"gitID":"a-shakra"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":7,"author":{"gitID":"a-shakra"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"a-shakra"},"content":"import seedu.address.model.Task;"},{"lineNumber":11,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.personal.PersonalTask;"},{"lineNumber":12,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.model.tutee.TuitionTask;"},{"lineNumber":13,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":14,"author":{"gitID":"a-shakra"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"ChoChihTun"},"content":" * JAXB-friendly version of the Task."},{"lineNumber":16,"author":{"gitID":"a-shakra"},"content":" */"},{"lineNumber":17,"author":{"gitID":"a-shakra"},"content":"//@@author a-shakra"},{"lineNumber":18,"author":{"gitID":"a-shakra"},"content":"public class XmlAdaptedTask {"},{"lineNumber":19,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":20,"author":{"gitID":"a-shakra"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"},{"lineNumber":21,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":22,"author":{"gitID":"a-shakra"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":23,"author":{"gitID":"a-shakra"},"content":"    private String name;"},{"lineNumber":24,"author":{"gitID":"a-shakra"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":25,"author":{"gitID":"a-shakra"},"content":"    private String description;"},{"lineNumber":26,"author":{"gitID":"a-shakra"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":27,"author":{"gitID":"a-shakra"},"content":"    private String duration;"},{"lineNumber":28,"author":{"gitID":"a-shakra"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":29,"author":{"gitID":"a-shakra"},"content":"    private String dateAndTime;"},{"lineNumber":30,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":31,"author":{"gitID":"a-shakra"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"a-shakra"},"content":"     * Constructs an XmlAdaptedTask."},{"lineNumber":33,"author":{"gitID":"a-shakra"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":34,"author":{"gitID":"a-shakra"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"a-shakra"},"content":"    public XmlAdaptedTask() {}"},{"lineNumber":36,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":37,"author":{"gitID":"a-shakra"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"a-shakra"},"content":"     * Constructs an {@code XmlAdaptedTask} with given personal task details."},{"lineNumber":39,"author":{"gitID":"a-shakra"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"a-shakra"},"content":"    public XmlAdaptedTask(String description, String duration, String dateAndTime) {"},{"lineNumber":41,"author":{"gitID":"a-shakra"},"content":"        //this.name \u003d \"null\";"},{"lineNumber":42,"author":{"gitID":"a-shakra"},"content":"        this.description \u003d description;"},{"lineNumber":43,"author":{"gitID":"a-shakra"},"content":"        this.duration \u003d duration;"},{"lineNumber":44,"author":{"gitID":"a-shakra"},"content":"        this.dateAndTime \u003d dateAndTime;"},{"lineNumber":45,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":47,"author":{"gitID":"a-shakra"},"content":"    public XmlAdaptedTask(String name, String description, String duration, String dateAndTime) {"},{"lineNumber":48,"author":{"gitID":"a-shakra"},"content":"        this.name \u003d name;"},{"lineNumber":49,"author":{"gitID":"a-shakra"},"content":"        this.description \u003d description;"},{"lineNumber":50,"author":{"gitID":"a-shakra"},"content":"        this.duration \u003d duration;"},{"lineNumber":51,"author":{"gitID":"a-shakra"},"content":"        this.dateAndTime \u003d dateAndTime;"},{"lineNumber":52,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":54,"author":{"gitID":"a-shakra"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"a-shakra"},"content":"     * Converts a given Task into this class for JAXB use."},{"lineNumber":56,"author":{"gitID":"a-shakra"},"content":"     *"},{"lineNumber":57,"author":{"gitID":"a-shakra"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"a-shakra"},"content":"    public XmlAdaptedTask(Task source) {"},{"lineNumber":59,"author":{"gitID":"a-shakra"},"content":"        description \u003d source.getDescription();"},{"lineNumber":60,"author":{"gitID":"a-shakra"},"content":"        duration \u003d source.getDuration();"},{"lineNumber":61,"author":{"gitID":"a-shakra"},"content":"        dateAndTime \u003d source.getTaskDateTime().toString();"},{"lineNumber":62,"author":{"gitID":"a-shakra"},"content":"        if (source instanceof TuitionTask) {"},{"lineNumber":63,"author":{"gitID":"a-shakra"},"content":"            name \u003d ((TuitionTask) source).getPerson();"},{"lineNumber":64,"author":{"gitID":"a-shakra"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":67,"author":{"gitID":"a-shakra"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"a-shakra"},"content":"     * Converts this jaxb-friendly adapted task object into the model\u0027s Task object."},{"lineNumber":69,"author":{"gitID":"a-shakra"},"content":"     *"},{"lineNumber":70,"author":{"gitID":"a-shakra"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":71,"author":{"gitID":"a-shakra"},"content":"     * Because of the way Task was designed (As an interface), i\u0027m forced to just input this as a PersonalTask"},{"lineNumber":72,"author":{"gitID":"a-shakra"},"content":"     * until a better solution can be found"},{"lineNumber":73,"author":{"gitID":"a-shakra"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":75,"author":{"gitID":"a-shakra"},"content":"    public Task toModelType() throws IllegalValueException {"},{"lineNumber":76,"author":{"gitID":"a-shakra"},"content":"        LocalDateTime taskDateTime \u003d LocalDateTime.parse(dateAndTime);"},{"lineNumber":77,"author":{"gitID":"a-shakra"},"content":"        if (this.description \u003d\u003d null) {"},{"lineNumber":78,"author":{"gitID":"a-shakra"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":79,"author":{"gitID":"a-shakra"},"content":"                    Task.MESSAGE_DESCRIPTION_CONSTRAINTS));"},{"lineNumber":80,"author":{"gitID":"a-shakra"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"a-shakra"},"content":"        if (this.duration \u003d\u003d null) {"},{"lineNumber":82,"author":{"gitID":"a-shakra"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":83,"author":{"gitID":"a-shakra"},"content":"                    Task.MESSAGE_DURATION_CONSTRAINTS));"},{"lineNumber":84,"author":{"gitID":"a-shakra"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"a-shakra"},"content":"        if (this.dateAndTime \u003d\u003d null) {"},{"lineNumber":86,"author":{"gitID":"a-shakra"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":87,"author":{"gitID":"a-shakra"},"content":"                    Task.MESSAGE_DATETIME_CONSTRAINTS));"},{"lineNumber":88,"author":{"gitID":"a-shakra"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"a-shakra"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":90,"author":{"gitID":"a-shakra"},"content":"            return new PersonalTask(taskDateTime, duration, description);"},{"lineNumber":91,"author":{"gitID":"a-shakra"},"content":"        } else {"},{"lineNumber":92,"author":{"gitID":"a-shakra"},"content":"            return new TuitionTask(name, taskDateTime, duration, description);"},{"lineNumber":93,"author":{"gitID":"a-shakra"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":96,"author":{"gitID":"a-shakra"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"a-shakra"},"content":"     * Returns true if the two tasks are equal. Needs to be updated to reflect the name parameter"},{"lineNumber":98,"author":{"gitID":"a-shakra"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"a-shakra"},"content":"    public boolean equals(Object other) {"},{"lineNumber":100,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":101,"author":{"gitID":"a-shakra"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":102,"author":{"gitID":"a-shakra"},"content":"            return true;"},{"lineNumber":103,"author":{"gitID":"a-shakra"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":105,"author":{"gitID":"a-shakra"},"content":"        if (!(other instanceof XmlAdaptedTask)) {"},{"lineNumber":106,"author":{"gitID":"a-shakra"},"content":"            return false;"},{"lineNumber":107,"author":{"gitID":"a-shakra"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":109,"author":{"gitID":"a-shakra"},"content":"        XmlAdaptedTask otherTask \u003d (XmlAdaptedTask) other;"},{"lineNumber":110,"author":{"gitID":"a-shakra"},"content":"        return Objects.equals(description, otherTask.description)"},{"lineNumber":111,"author":{"gitID":"a-shakra"},"content":"                \u0026\u0026 Objects.equals(duration, otherTask.duration)"},{"lineNumber":112,"author":{"gitID":"a-shakra"},"content":"                \u0026\u0026 Objects.equals(dateAndTime, otherTask.dateAndTime)"},{"lineNumber":113,"author":{"gitID":"a-shakra"},"content":"                \u0026\u0026 Objects.equals(name, otherTask.name);"},{"lineNumber":114,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"a-shakra"},"content":"}"}],"authorContributionMap":{"ChoChihTun":3,"yungyung04":1,"a-shakra":109,"-":2}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":18,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.tutee.EducationLevel;"},{"lineNumber":19,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.tutee.Grade;"},{"lineNumber":20,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.tutee.School;"},{"lineNumber":21,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.tutee.Subject;"},{"lineNumber":22,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.tutee.Tutee;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class XmlAdaptedPerson {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private String address;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":40,"author":{"gitID":"yungyung04"},"content":"    private String subject;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":42,"author":{"gitID":"yungyung04"},"content":"    private String grade;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":44,"author":{"gitID":"yungyung04"},"content":"    private String educationLevel;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":46,"author":{"gitID":"yungyung04"},"content":"    private String school;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson() {}"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"yungyung04"},"content":"     * Constructs an {@code XmlAdaptedPerson} with given person details."},{"lineNumber":59,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"yungyung04"},"content":"    public XmlAdaptedPerson(String name, String phone, String email, String address, List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":61,"author":{"gitID":"yungyung04"},"content":"        this(name, phone, email, address, null, null, null, null, tagged);"},{"lineNumber":62,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":64,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"yungyung04"},"content":"     * Constructs an {@code XmlAdaptedPerson} with the given tutee details."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"yungyung04"},"content":"    public XmlAdaptedPerson(String name, String phone, String email, String address, String subject, String grade,"},{"lineNumber":68,"author":{"gitID":"yungyung04"},"content":"                            String educationLevel, String school, List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":73,"author":{"gitID":"yungyung04"},"content":"        this.subject \u003d subject;"},{"lineNumber":74,"author":{"gitID":"yungyung04"},"content":"        this.grade \u003d grade;"},{"lineNumber":75,"author":{"gitID":"yungyung04"},"content":"        this.educationLevel \u003d educationLevel;"},{"lineNumber":76,"author":{"gitID":"yungyung04"},"content":"        this.school \u003d school;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(Person source) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"yungyung04"},"content":"        if (source instanceof Tutee) {"},{"lineNumber":97,"author":{"gitID":"yungyung04"},"content":"            subject \u003d ((Tutee) source).getSubject().subject;"},{"lineNumber":98,"author":{"gitID":"yungyung04"},"content":"            grade \u003d ((Tutee) source).getGrade().grade;"},{"lineNumber":99,"author":{"gitID":"yungyung04"},"content":"            educationLevel \u003d ((Tutee) source).getEducationLevel().educationLevel;"},{"lineNumber":100,"author":{"gitID":"yungyung04"},"content":"            school \u003d ((Tutee) source).getSchool().school;"},{"lineNumber":101,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":106,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        if (this.email \u003d\u003d null) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(this.email)) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        if (this.address \u003d\u003d null) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(this.address)) {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":148,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":149,"author":{"gitID":"yungyung04"},"content":"        //@@author yungyung04"},{"lineNumber":150,"author":{"gitID":"yungyung04"},"content":"        if (isTutee(personTags)) {"},{"lineNumber":151,"author":{"gitID":"yungyung04"},"content":"            if (this.subject \u003d\u003d null) {"},{"lineNumber":152,"author":{"gitID":"yungyung04"},"content":"                throw new IllegalValueException("},{"lineNumber":153,"author":{"gitID":"yungyung04"},"content":"                        String.format(MISSING_FIELD_MESSAGE_FORMAT, Subject.class.getSimpleName()));"},{"lineNumber":154,"author":{"gitID":"yungyung04"},"content":"            }"},{"lineNumber":155,"author":{"gitID":"yungyung04"},"content":"            if (!Subject.isValidSubject(this.subject)) {"},{"lineNumber":156,"author":{"gitID":"yungyung04"},"content":"                throw new IllegalValueException(Subject.MESSAGE_SUBJECT_CONSTRAINTS);"},{"lineNumber":157,"author":{"gitID":"yungyung04"},"content":"            }"},{"lineNumber":158,"author":{"gitID":"yungyung04"},"content":"            final Subject subject \u003d new Subject(this.subject);"},{"lineNumber":159,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":160,"author":{"gitID":"yungyung04"},"content":"            if (this.grade \u003d\u003d null) {"},{"lineNumber":161,"author":{"gitID":"yungyung04"},"content":"                throw new IllegalValueException("},{"lineNumber":162,"author":{"gitID":"yungyung04"},"content":"                        String.format(MISSING_FIELD_MESSAGE_FORMAT, Grade.class.getSimpleName()));"},{"lineNumber":163,"author":{"gitID":"yungyung04"},"content":"            }"},{"lineNumber":164,"author":{"gitID":"yungyung04"},"content":"            if (!Grade.isValidGrade(this.grade)) {"},{"lineNumber":165,"author":{"gitID":"yungyung04"},"content":"                throw new IllegalValueException(Grade.MESSAGE_GRADE_CONSTRAINTS);"},{"lineNumber":166,"author":{"gitID":"yungyung04"},"content":"            }"},{"lineNumber":167,"author":{"gitID":"yungyung04"},"content":"            final Grade grade \u003d new Grade(this.grade);"},{"lineNumber":168,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":169,"author":{"gitID":"yungyung04"},"content":"            if (this.educationLevel \u003d\u003d null) {"},{"lineNumber":170,"author":{"gitID":"yungyung04"},"content":"                throw new IllegalValueException("},{"lineNumber":171,"author":{"gitID":"yungyung04"},"content":"                        String.format(MISSING_FIELD_MESSAGE_FORMAT, EducationLevel.class.getSimpleName()));"},{"lineNumber":172,"author":{"gitID":"yungyung04"},"content":"            }"},{"lineNumber":173,"author":{"gitID":"yungyung04"},"content":"            if (!EducationLevel.isValidEducationLevel(this.educationLevel)) {"},{"lineNumber":174,"author":{"gitID":"yungyung04"},"content":"                throw new IllegalValueException(EducationLevel.MESSAGE_EDUCATION_LEVEL_CONSTRAINTS);"},{"lineNumber":175,"author":{"gitID":"yungyung04"},"content":"            }"},{"lineNumber":176,"author":{"gitID":"yungyung04"},"content":"            final EducationLevel educationLevel \u003d new EducationLevel(this.educationLevel);"},{"lineNumber":177,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":178,"author":{"gitID":"yungyung04"},"content":"            if (this.school \u003d\u003d null) {"},{"lineNumber":179,"author":{"gitID":"yungyung04"},"content":"                throw new IllegalValueException("},{"lineNumber":180,"author":{"gitID":"yungyung04"},"content":"                        String.format(MISSING_FIELD_MESSAGE_FORMAT, School.class.getSimpleName()));"},{"lineNumber":181,"author":{"gitID":"yungyung04"},"content":"            }"},{"lineNumber":182,"author":{"gitID":"yungyung04"},"content":"            if (!School.isValidSchool(this.school)) {"},{"lineNumber":183,"author":{"gitID":"yungyung04"},"content":"                throw new IllegalValueException(School.MESSAGE_SCHOOL_CONSTRAINTS);"},{"lineNumber":184,"author":{"gitID":"yungyung04"},"content":"            }"},{"lineNumber":185,"author":{"gitID":"yungyung04"},"content":"            final School school \u003d new School(this.school);"},{"lineNumber":186,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":187,"author":{"gitID":"yungyung04"},"content":"            return new Tutee(name, phone, email, address, subject, grade, educationLevel, school, tags);"},{"lineNumber":188,"author":{"gitID":"yungyung04"},"content":"        } else {"},{"lineNumber":189,"author":{"gitID":"yungyung04"},"content":"            return new Person(name, phone, email, address, tags);"},{"lineNumber":190,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"yungyung04"},"content":"    //@@author"},{"lineNumber":193,"author":{"gitID":"yungyung04"},"content":"    private boolean isTutee(List\u003cTag\u003e personTags) {"},{"lineNumber":194,"author":{"gitID":"yungyung04"},"content":"        return personTags.contains(new Tag(\"Tutee\"));"},{"lineNumber":195,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedPerson)) {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        return Objects.equals(name, otherPerson.name)"},{"lineNumber":209,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"},{"lineNumber":210,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(email, otherPerson.email)"},{"lineNumber":211,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(address, otherPerson.address)"},{"lineNumber":212,"author":{"gitID":"-"},"content":"                \u0026\u0026 tagged.equals(otherPerson.tagged);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yungyung04":77,"-":137}},{"path":"src/main/java/seedu/address/storage/XmlFileStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"raymond511"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Stores addressbook data in an XML file"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class XmlFileStorage {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Saves the given addressbook data to the specified file."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static void saveDataToFile(File file, XmlSerializableAddressBook addressBook)"},{"lineNumber":19,"author":{"gitID":"raymond511"},"content":"            throws IOException {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            XmlUtil.saveDataToFile(file, addressBook);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Unexpected exception \" + e.getMessage());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Returns address book in the file or an empty address book"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static XmlSerializableAddressBook loadDataFromSaveFile(File file) throws DataConversionException,"},{"lineNumber":31,"author":{"gitID":"raymond511"},"content":"            IOException {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"a-shakra"},"content":"            //EncryptionUtil.decrypt(file);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            return XmlUtil.getDataFromFile(file, XmlSerializableAddressBook.class);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            throw new DataConversionException(e);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"a-shakra":1,"-":36,"raymond511":3}},{"path":"src/main/java/seedu/address/storage/XmlSerializableAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * An Immutable AddressBook that is serializable to XML format"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"a-shakra"},"content":"//@@author a-shakra"},{"lineNumber":18,"author":{"gitID":"a-shakra"},"content":"@XmlRootElement(name \u003d \"addressbook\")"},{"lineNumber":19,"author":{"gitID":"a-shakra"},"content":"public class XmlSerializableAddressBook {"},{"lineNumber":20,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":21,"author":{"gitID":"a-shakra"},"content":"    @XmlElement"},{"lineNumber":22,"author":{"gitID":"a-shakra"},"content":"    private List\u003cXmlAdaptedPerson\u003e persons;"},{"lineNumber":23,"author":{"gitID":"a-shakra"},"content":"    @XmlElement"},{"lineNumber":24,"author":{"gitID":"a-shakra"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":25,"author":{"gitID":"a-shakra"},"content":"    @XmlElement"},{"lineNumber":26,"author":{"gitID":"a-shakra"},"content":"    private List\u003cXmlAdaptedTask\u003e tasks;"},{"lineNumber":27,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":28,"author":{"gitID":"a-shakra"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"a-shakra"},"content":"     * Creates an empty XmlSerializableAddressBook."},{"lineNumber":30,"author":{"gitID":"a-shakra"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":31,"author":{"gitID":"a-shakra"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"a-shakra"},"content":"    public XmlSerializableAddressBook() {"},{"lineNumber":33,"author":{"gitID":"a-shakra"},"content":"        persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitID":"a-shakra"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitID":"a-shakra"},"content":"        tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":36,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":38,"author":{"gitID":"a-shakra"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"a-shakra"},"content":"     * Conversion"},{"lineNumber":40,"author":{"gitID":"a-shakra"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"a-shakra"},"content":"    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"},{"lineNumber":42,"author":{"gitID":"a-shakra"},"content":"        this();"},{"lineNumber":43,"author":{"gitID":"a-shakra"},"content":"        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"},{"lineNumber":44,"author":{"gitID":"a-shakra"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"},{"lineNumber":45,"author":{"gitID":"a-shakra"},"content":"        tasks.addAll(src.getTaskList().stream().map(XmlAdaptedTask::new).collect(Collectors.toList()));"},{"lineNumber":46,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":48,"author":{"gitID":"a-shakra"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"a-shakra"},"content":"     * Converts this addressbook into the model\u0027s {@code AddressBook} object."},{"lineNumber":50,"author":{"gitID":"a-shakra"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"a-shakra"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":52,"author":{"gitID":"a-shakra"},"content":"     * {@code XmlAdaptedPerson} or {@code XmlAdaptedTag}."},{"lineNumber":53,"author":{"gitID":"a-shakra"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"a-shakra"},"content":"    public AddressBook toModelType() throws IllegalValueException {"},{"lineNumber":55,"author":{"gitID":"a-shakra"},"content":"        AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":56,"author":{"gitID":"a-shakra"},"content":"        for (XmlAdaptedTag t : tags) {"},{"lineNumber":57,"author":{"gitID":"a-shakra"},"content":"            addressBook.addTag(t.toModelType());"},{"lineNumber":58,"author":{"gitID":"a-shakra"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"a-shakra"},"content":"        for (XmlAdaptedPerson p : persons) {"},{"lineNumber":60,"author":{"gitID":"a-shakra"},"content":"            addressBook.addPerson(p.toModelType());"},{"lineNumber":61,"author":{"gitID":"a-shakra"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"a-shakra"},"content":"        for (XmlAdaptedTask t: tasks) {"},{"lineNumber":63,"author":{"gitID":"a-shakra"},"content":"            addressBook.addTask(t.toModelType());"},{"lineNumber":64,"author":{"gitID":"a-shakra"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"a-shakra"},"content":"        return addressBook;"},{"lineNumber":66,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":68,"author":{"gitID":"a-shakra"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"a-shakra"},"content":"    public boolean equals(Object other) {"},{"lineNumber":70,"author":{"gitID":"a-shakra"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":71,"author":{"gitID":"a-shakra"},"content":"            return true;"},{"lineNumber":72,"author":{"gitID":"a-shakra"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":74,"author":{"gitID":"a-shakra"},"content":"        if (!(other instanceof XmlSerializableAddressBook)) {"},{"lineNumber":75,"author":{"gitID":"a-shakra"},"content":"            return false;"},{"lineNumber":76,"author":{"gitID":"a-shakra"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":78,"author":{"gitID":"a-shakra"},"content":"        XmlSerializableAddressBook otherAb \u003d (XmlSerializableAddressBook) other;"},{"lineNumber":79,"author":{"gitID":"a-shakra"},"content":"        // The tasks condition might be a problem because of the design of tasks"},{"lineNumber":80,"author":{"gitID":"a-shakra"},"content":"        return persons.equals(otherAb.persons) \u0026\u0026 tags.equals(otherAb.tags) \u0026\u0026 tasks.equals(otherAb.tasks);"},{"lineNumber":81,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"a-shakra"},"content":"}"}],"authorContributionMap":{"a-shakra":66,"-":16}},{"path":"src/main/java/seedu/address/MainApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.application.Application;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":35,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.ui.CalendarPanel;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":40,"author":{"gitID":"-"},"content":" * The main entry point to the application."},{"lineNumber":41,"author":{"gitID":"-"},"content":" */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 6, 0, true);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    protected Ui ui;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    protected Logic logic;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    protected Storage storage;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    protected Config config;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    protected UserPrefs userPrefs;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        super.init();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        config \u003d initConfig(getApplicationParameter(\"config\"));"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        initLogging(config);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        ui \u003d new UiManager(logic, config, userPrefs);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        initEventsCenter();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    private String getApplicationParameter(String parameterName) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return applicationParameters.get(parameterName);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook initialData;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            if (!addressBookOptional.isPresent()) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"ChoChihTun"},"content":"        CalendarPanel.updateCalendar(initialData.getTaskList());"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        Config initializedConfig;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        String configFilePathUsed;"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":136,"author":{"gitID":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        return initializedConfig;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * reading from the file."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":164,"author":{"gitID":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        return initializedPrefs;"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    private void initEventsCenter() {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        ui.stop();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(userPrefs);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        System.exit(0);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        this.stop();"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ChoChihTun":2,"-":211}},{"path":"src/main/java/seedu/address/logic/commands/AddTuitionTaskCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"yungyung04"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":5,"author":{"gitID":"yungyung04"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitID":"yungyung04"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":13,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.model.task.exceptions.TimingClashException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.tutee.TuitionTask;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.tutee.Tutee;"},{"lineNumber":17,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":18,"author":{"gitID":"yungyung04"},"content":"//@@author yungyung04"},{"lineNumber":19,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":20,"author":{"gitID":"yungyung04"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"yungyung04"},"content":" * Adds a tuition (task) into the schedule."},{"lineNumber":22,"author":{"gitID":"yungyung04"},"content":" */"},{"lineNumber":23,"author":{"gitID":"yungyung04"},"content":"public class AddTuitionTaskCommand extends UndoableCommand {"},{"lineNumber":24,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":25,"author":{"gitID":"yungyung04"},"content":"    public static final String COMMAND_WORD \u003d \"addtuition\";"},{"lineNumber":26,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":27,"author":{"gitID":"yungyung04"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a tuition (task) into the schedule.\\n\""},{"lineNumber":28,"author":{"gitID":"yungyung04"},"content":"            + \"Parameters: \""},{"lineNumber":29,"author":{"gitID":"yungyung04"},"content":"            + \"tutee_index\""},{"lineNumber":30,"author":{"gitID":"yungyung04"},"content":"            + \"Date(dd/mm/yyyy) \""},{"lineNumber":31,"author":{"gitID":"yungyung04"},"content":"            + \"Start time(hh:mm) \""},{"lineNumber":32,"author":{"gitID":"yungyung04"},"content":"            + \"Duration(XXhXXm) \""},{"lineNumber":33,"author":{"gitID":"yungyung04"},"content":"            + \"Description( anything; leading and trailing whitespaces will be trimmed )\\n\""},{"lineNumber":34,"author":{"gitID":"yungyung04"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":35,"author":{"gitID":"yungyung04"},"content":"            + \"1 \""},{"lineNumber":36,"author":{"gitID":"yungyung04"},"content":"            + \"10/12/2018 \""},{"lineNumber":37,"author":{"gitID":"yungyung04"},"content":"            + \"12:30 \""},{"lineNumber":38,"author":{"gitID":"yungyung04"},"content":"            + \"1h30m \""},{"lineNumber":39,"author":{"gitID":"yungyung04"},"content":"            + \"Calculus homework page 24\";"},{"lineNumber":40,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":41,"author":{"gitID":"yungyung04"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New tuition task added.\";"},{"lineNumber":42,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":43,"author":{"gitID":"yungyung04"},"content":"    private final Index targetIndex;"},{"lineNumber":44,"author":{"gitID":"yungyung04"},"content":"    private final LocalDateTime taskdateTime;"},{"lineNumber":45,"author":{"gitID":"yungyung04"},"content":"    private final String duration;"},{"lineNumber":46,"author":{"gitID":"yungyung04"},"content":"    private final String description;"},{"lineNumber":47,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":48,"author":{"gitID":"yungyung04"},"content":"    private TuitionTask toAdd;"},{"lineNumber":49,"author":{"gitID":"yungyung04"},"content":"    private String associatedTutee;"},{"lineNumber":50,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":51,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"yungyung04"},"content":"     * Creates an AddTuition to add the specified {@code Task} which is associated to {@code Tutee}."},{"lineNumber":53,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"yungyung04"},"content":"    public AddTuitionTaskCommand(Index targetIndex, LocalDateTime taskDateTime, String duration, String description) {"},{"lineNumber":55,"author":{"gitID":"yungyung04"},"content":"        requireNonNull(taskDateTime);"},{"lineNumber":56,"author":{"gitID":"yungyung04"},"content":"        requireNonNull(duration);"},{"lineNumber":57,"author":{"gitID":"yungyung04"},"content":"        requireNonNull(description);"},{"lineNumber":58,"author":{"gitID":"yungyung04"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":59,"author":{"gitID":"yungyung04"},"content":"        this.taskdateTime \u003d taskDateTime;"},{"lineNumber":60,"author":{"gitID":"yungyung04"},"content":"        this.duration \u003d duration;"},{"lineNumber":61,"author":{"gitID":"yungyung04"},"content":"        this.description \u003d description;"},{"lineNumber":62,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":64,"author":{"gitID":"ChoChihTun"},"content":"    //@@author ChoChihTun"},{"lineNumber":65,"author":{"gitID":"ChoChihTun"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"ChoChihTun"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":67,"author":{"gitID":"ChoChihTun"},"content":"        try {"},{"lineNumber":68,"author":{"gitID":"ChoChihTun"},"content":"            model.addTask(toAdd);"},{"lineNumber":69,"author":{"gitID":"ChoChihTun"},"content":"        } catch (TimingClashException tce) {"},{"lineNumber":70,"author":{"gitID":"ChoChihTun"},"content":"            throw new CommandException(tce.getMessage());"},{"lineNumber":71,"author":{"gitID":"ChoChihTun"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"ChoChihTun"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":73,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":75,"author":{"gitID":"yungyung04"},"content":"    //@@author yungyung04"},{"lineNumber":76,"author":{"gitID":"yungyung04"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"yungyung04"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":78,"author":{"gitID":"yungyung04"},"content":"        associatedTutee \u003d getAssociatedTutee().getName().fullName;"},{"lineNumber":79,"author":{"gitID":"yungyung04"},"content":"        toAdd \u003d new TuitionTask(associatedTutee, taskdateTime, duration, description);"},{"lineNumber":80,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":82,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"yungyung04"},"content":"     * Returns the {@code Tutee} object that is pointed by the index as shown in the last displayed conatct list."},{"lineNumber":84,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"yungyung04"},"content":"    private Tutee getAssociatedTutee() throws CommandException {"},{"lineNumber":86,"author":{"gitID":"yungyung04"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":87,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":88,"author":{"gitID":"yungyung04"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":89,"author":{"gitID":"yungyung04"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":90,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"yungyung04"},"content":"        requireNonNull(lastShownList.get(targetIndex.getZeroBased()));"},{"lineNumber":92,"author":{"gitID":"yungyung04"},"content":"        Person associatedPerson \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":93,"author":{"gitID":"yungyung04"},"content":"        if (!(associatedPerson instanceof Tutee)) {"},{"lineNumber":94,"author":{"gitID":"yungyung04"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TUTEE_INDEX);"},{"lineNumber":95,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"yungyung04"},"content":"        return (Tutee) lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":97,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":99,"author":{"gitID":"yungyung04"},"content":"    @Override"},{"lineNumber":100,"author":{"gitID":"yungyung04"},"content":"    public boolean equals(Object other) {"},{"lineNumber":101,"author":{"gitID":"yungyung04"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":102,"author":{"gitID":"yungyung04"},"content":"                || (other instanceof AddTuitionTaskCommand // instanceof handles nulls"},{"lineNumber":103,"author":{"gitID":"yungyung04"},"content":"                \u0026\u0026 targetIndex.equals(((AddTuitionTaskCommand) other).targetIndex))"},{"lineNumber":104,"author":{"gitID":"yungyung04"},"content":"                \u0026\u0026 taskdateTime.equals(((AddTuitionTaskCommand) other).taskdateTime)"},{"lineNumber":105,"author":{"gitID":"yungyung04"},"content":"                \u0026\u0026 duration.equals(((AddTuitionTaskCommand) other).duration)"},{"lineNumber":106,"author":{"gitID":"yungyung04"},"content":"                \u0026\u0026 description.equals(((AddTuitionTaskCommand) other).description);"},{"lineNumber":107,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":108,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"yungyung04"},"content":"}"}],"authorContributionMap":{"yungyung04":90,"ChoChihTun":12,"-":7}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"a-shakra"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitID":"a-shakra"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitID":"a-shakra"},"content":"import java.time.format.ResolverStyle;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":11,"author":{"gitID":"a-shakra"},"content":"import seedu.address.model.Task;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":18,"author":{"gitID":"a-shakra"},"content":"import seedu.address.model.personal.PersonalTask;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitID":"a-shakra"},"content":"import seedu.address.model.task.exceptions.TimingClashException;"},{"lineNumber":21,"author":{"gitID":"a-shakra"},"content":"import seedu.address.model.tutee.EducationLevel;"},{"lineNumber":22,"author":{"gitID":"a-shakra"},"content":"import seedu.address.model.tutee.Grade;"},{"lineNumber":23,"author":{"gitID":"a-shakra"},"content":"import seedu.address.model.tutee.School;"},{"lineNumber":24,"author":{"gitID":"a-shakra"},"content":"import seedu.address.model.tutee.Subject;"},{"lineNumber":25,"author":{"gitID":"a-shakra"},"content":"import seedu.address.model.tutee.TuitionTask;"},{"lineNumber":26,"author":{"gitID":"a-shakra"},"content":"import seedu.address.model.tutee.Tutee;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"a-shakra"},"content":"//@@author a-shakra"},{"lineNumber":29,"author":{"gitID":"a-shakra"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"a-shakra"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":31,"author":{"gitID":"a-shakra"},"content":" */"},{"lineNumber":32,"author":{"gitID":"a-shakra"},"content":"public class SampleDataUtil {"},{"lineNumber":33,"author":{"gitID":"a-shakra"},"content":"    public static final String DATETIME1 \u003d \"16/04/2018 15:15\";"},{"lineNumber":34,"author":{"gitID":"a-shakra"},"content":"    public static final String DATETIME2 \u003d \"19/04/2018 09:25\";"},{"lineNumber":35,"author":{"gitID":"a-shakra"},"content":"    public static final String DATETIME3 \u003d \"07/06/2018 16:45\";"},{"lineNumber":36,"author":{"gitID":"a-shakra"},"content":"    public static final String DATETIME4 \u003d \"03/06/2019 12:10\";"},{"lineNumber":37,"author":{"gitID":"a-shakra"},"content":"    public static final String DATETIME5 \u003d \"05/07/2020 18:45\";"},{"lineNumber":38,"author":{"gitID":"a-shakra"},"content":"    public static final String DATETIME6 \u003d \"15/07/2018 06:55\";"},{"lineNumber":39,"author":{"gitID":"a-shakra"},"content":"    public static final String DATETIME7 \u003d \"20/10/2018 11:11\";"},{"lineNumber":40,"author":{"gitID":"a-shakra"},"content":"    public static final String DATETIME8 \u003d \"16/12/2018 08:18\";"},{"lineNumber":41,"author":{"gitID":"a-shakra"},"content":"    public static final String DATETIME9 \u003d \"23/12/2018 10:28\";"},{"lineNumber":42,"author":{"gitID":"a-shakra"},"content":"    public static final String DATETIME10 \u003d \"13/01/2018 11:30\";"},{"lineNumber":43,"author":{"gitID":"a-shakra"},"content":"    public static final String DATETIME11 \u003d \"29/01/2018 12:30\";"},{"lineNumber":44,"author":{"gitID":"a-shakra"},"content":"    private static DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/uuuu HH:mm\")"},{"lineNumber":45,"author":{"gitID":"a-shakra"},"content":"            .withResolverStyle(ResolverStyle.STRICT);"},{"lineNumber":46,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":47,"author":{"gitID":"a-shakra"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":48,"author":{"gitID":"a-shakra"},"content":"        return new Person[] {"},{"lineNumber":49,"author":{"gitID":"a-shakra"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":50,"author":{"gitID":"a-shakra"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"},{"lineNumber":51,"author":{"gitID":"a-shakra"},"content":"                getTagSet(\"friends\")),"},{"lineNumber":52,"author":{"gitID":"a-shakra"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":53,"author":{"gitID":"a-shakra"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"},{"lineNumber":54,"author":{"gitID":"a-shakra"},"content":"                getTagSet(\"colleagues\", \"friends\")),"},{"lineNumber":55,"author":{"gitID":"a-shakra"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":56,"author":{"gitID":"a-shakra"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"},{"lineNumber":57,"author":{"gitID":"a-shakra"},"content":"                getTagSet(\"neighbours\")),"},{"lineNumber":58,"author":{"gitID":"a-shakra"},"content":"            new Tutee(new Name(\"Anas Shakra\"), new Phone(\"514552256\"), new Email(\"shakra.a@hotmail.com\"),"},{"lineNumber":59,"author":{"gitID":"a-shakra"},"content":"                new Address(\"590 Souart\"), new Subject(\"Chemistry\"), new Grade(\"A\"),"},{"lineNumber":60,"author":{"gitID":"a-shakra"},"content":"                new EducationLevel(\"secondary\"), new School(\"NUS\"), getTagSet(\"family\")),"},{"lineNumber":61,"author":{"gitID":"a-shakra"},"content":"            new Tutee(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.co\"),"},{"lineNumber":62,"author":{"gitID":"a-shakra"},"content":"                new Address(\"Blk 47 Tampines Street 20\"), new Subject(\"Chemistry\"), new Grade(\"C\"),"},{"lineNumber":63,"author":{"gitID":"a-shakra"},"content":"                new EducationLevel(\"secondary\"), new School(\"NUS\"), getTagSet(\"family\")),"},{"lineNumber":64,"author":{"gitID":"a-shakra"},"content":"            new Tutee(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":65,"author":{"gitID":"a-shakra"},"content":"                new Address(\"Blk 45 Aljunied Street\"), new Subject(\"Physics\"), new Grade(\"A\"),"},{"lineNumber":66,"author":{"gitID":"a-shakra"},"content":"                new EducationLevel(\"secondary\"), new School(\"NUS\"), getTagSet(\"family\")),"},{"lineNumber":67,"author":{"gitID":"a-shakra"},"content":"            new Tutee(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":68,"author":{"gitID":"a-shakra"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street\"), new Subject(\"Math\"), new Grade(\"C\"),"},{"lineNumber":69,"author":{"gitID":"a-shakra"},"content":"                new EducationLevel(\"primary\"), new School(\"NUS\"), getTagSet(\"friend\")),"},{"lineNumber":70,"author":{"gitID":"a-shakra"},"content":"        };"},{"lineNumber":71,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"a-shakra"},"content":"    public static Task[] getSampleTasks() {"},{"lineNumber":73,"author":{"gitID":"a-shakra"},"content":"        return new Task[]{"},{"lineNumber":74,"author":{"gitID":"a-shakra"},"content":"            new PersonalTask(LocalDateTime.parse(DATETIME1, formatter), \"2h15m\", \"exampleTask1\"),"},{"lineNumber":75,"author":{"gitID":"a-shakra"},"content":"            new TuitionTask(\"Anas Shakra\", LocalDateTime.parse(DATETIME2, formatter), \"5h25m\", \"exampleTask2\"),"},{"lineNumber":76,"author":{"gitID":"a-shakra"},"content":"            new PersonalTask(LocalDateTime.parse(DATETIME3, formatter), \"3h45m\", \"exampleTask3\"),"},{"lineNumber":77,"author":{"gitID":"a-shakra"},"content":"            new PersonalTask(LocalDateTime.parse(DATETIME4, formatter), \"12h10m\", \"exampleTask4\"),"},{"lineNumber":78,"author":{"gitID":"a-shakra"},"content":"            new PersonalTask(LocalDateTime.parse(DATETIME5, formatter), \"02h45m\", \"exampleTask5\"),"},{"lineNumber":79,"author":{"gitID":"a-shakra"},"content":"            new PersonalTask(LocalDateTime.parse(DATETIME6, formatter), \"06h55m\", \"exampleTask6\"),"},{"lineNumber":80,"author":{"gitID":"a-shakra"},"content":"            new PersonalTask(LocalDateTime.parse(DATETIME7, formatter), \"03h11m\", \"exampleTask7\"),"},{"lineNumber":81,"author":{"gitID":"a-shakra"},"content":"            new PersonalTask(LocalDateTime.parse(DATETIME8, formatter), \"08h18m\", \"exampleTask8\"),"},{"lineNumber":82,"author":{"gitID":"a-shakra"},"content":"            new TuitionTask(\"Roy Balakrishnan\", LocalDateTime.parse(DATETIME9, formatter), \"10h28m\","},{"lineNumber":83,"author":{"gitID":"a-shakra"},"content":"                    \"exampleTask9\"),"},{"lineNumber":84,"author":{"gitID":"a-shakra"},"content":"            new TuitionTask(\"Irfan Ibrahim\", LocalDateTime.parse(DATETIME10, formatter), \"11h30m\","},{"lineNumber":85,"author":{"gitID":"a-shakra"},"content":"                    \"exampleTask10\"),"},{"lineNumber":86,"author":{"gitID":"a-shakra"},"content":"            new TuitionTask(\"David Li\", LocalDateTime.parse(DATETIME11, formatter), \"12h30m\","},{"lineNumber":87,"author":{"gitID":"a-shakra"},"content":"                    \"exampleTask11\"),"},{"lineNumber":88,"author":{"gitID":"a-shakra"},"content":"        };"},{"lineNumber":89,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":91,"author":{"gitID":"a-shakra"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":92,"author":{"gitID":"a-shakra"},"content":"        try {"},{"lineNumber":93,"author":{"gitID":"a-shakra"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":94,"author":{"gitID":"a-shakra"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":95,"author":{"gitID":"a-shakra"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":96,"author":{"gitID":"a-shakra"},"content":"            }"},{"lineNumber":97,"author":{"gitID":"a-shakra"},"content":"            for (Task sampleTask : getSampleTasks()) {"},{"lineNumber":98,"author":{"gitID":"a-shakra"},"content":"                sampleAb.addTask(sampleTask);"},{"lineNumber":99,"author":{"gitID":"a-shakra"},"content":"            }"},{"lineNumber":100,"author":{"gitID":"a-shakra"},"content":"            return sampleAb;"},{"lineNumber":101,"author":{"gitID":"a-shakra"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":102,"author":{"gitID":"a-shakra"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":103,"author":{"gitID":"a-shakra"},"content":"        } catch (TimingClashException tce) {"},{"lineNumber":104,"author":{"gitID":"a-shakra"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate Tasks, tce\");"},{"lineNumber":105,"author":{"gitID":"a-shakra"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"a-shakra"},"content":"    //@@author"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"a-shakra":92,"-":29}},{"path":"src/main/java/seedu/address/logic/commands/FindPersonCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_EDUCATION_LEVEL;"},{"lineNumber":4,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_GRADE;"},{"lineNumber":5,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_NAME;"},{"lineNumber":6,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_SCHOOL;"},{"lineNumber":7,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.person.PersonSortUtil.CATEGORY_SUBJECT;"},{"lineNumber":8,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":9,"author":{"gitID":"yungyung04"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"yungyung04"},"content":"import java.util.function.Predicate;"},{"lineNumber":11,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":12,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.Task;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":14,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.tutee.EducationLevelContainsKeywordsPredicate;"},{"lineNumber":16,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.tutee.GradeContainsKeywordsPredicate;"},{"lineNumber":17,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.tutee.SchoolContainsKeywordsPredicate;"},{"lineNumber":18,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.tutee.SubjectContainsKeywordsPredicate;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"yungyung04"},"content":"//@@author yungyung04"},{"lineNumber":21,"author":{"gitID":"yungyung04"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"yungyung04"},"content":" * Finds and lists all persons in contact list based on the specified filter category."},{"lineNumber":23,"author":{"gitID":"yungyung04"},"content":" */"},{"lineNumber":24,"author":{"gitID":"yungyung04"},"content":"public class FindPersonCommand extends Command {"},{"lineNumber":25,"author":{"gitID":"yungyung04"},"content":"    public static final String COMMAND_WORD \u003d \"findpersonby\";"},{"lineNumber":26,"author":{"gitID":"yungyung04"},"content":"    public static final String COMMAND_ALIAS \u003d \"f\";"},{"lineNumber":27,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":28,"author":{"gitID":"yungyung04"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Find is successful.\";"},{"lineNumber":29,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":30,"author":{"gitID":"yungyung04"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":31,"author":{"gitID":"yungyung04"},"content":"            + \": lists all person that suit the specified category\\n\""},{"lineNumber":32,"author":{"gitID":"yungyung04"},"content":"            + \"Parameters: filter_category keyword\\n\""},{"lineNumber":33,"author":{"gitID":"yungyung04"},"content":"            + \"Choice of filter_categories: \""},{"lineNumber":34,"author":{"gitID":"yungyung04"},"content":"            + CATEGORY_NAME + \", \""},{"lineNumber":35,"author":{"gitID":"yungyung04"},"content":"            + CATEGORY_EDUCATION_LEVEL + \", \""},{"lineNumber":36,"author":{"gitID":"yungyung04"},"content":"            + CATEGORY_GRADE + \", \""},{"lineNumber":37,"author":{"gitID":"yungyung04"},"content":"            + CATEGORY_SCHOOL + \", \""},{"lineNumber":38,"author":{"gitID":"yungyung04"},"content":"            + CATEGORY_SUBJECT + \"\\n\""},{"lineNumber":39,"author":{"gitID":"yungyung04"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + CATEGORY_GRADE + \" A\";"},{"lineNumber":40,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":41,"author":{"gitID":"yungyung04"},"content":"    private final String category;"},{"lineNumber":42,"author":{"gitID":"yungyung04"},"content":"    private final String[] keywords;"},{"lineNumber":43,"author":{"gitID":"yungyung04"},"content":"    private Predicate\u003cPerson\u003e personPredicate;"},{"lineNumber":44,"author":{"gitID":"yungyung04"},"content":"    private Predicate\u003cTask\u003e taskPredicate;"},{"lineNumber":45,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":46,"author":{"gitID":"yungyung04"},"content":"    public FindPersonCommand(String category, String[] keywords) {"},{"lineNumber":47,"author":{"gitID":"yungyung04"},"content":"        this.category \u003d category;"},{"lineNumber":48,"author":{"gitID":"yungyung04"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":49,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":51,"author":{"gitID":"yungyung04"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"yungyung04"},"content":"    public CommandResult execute() {"},{"lineNumber":53,"author":{"gitID":"yungyung04"},"content":"        switch (category) {"},{"lineNumber":54,"author":{"gitID":"yungyung04"},"content":"        case CATEGORY_NAME:"},{"lineNumber":55,"author":{"gitID":"yungyung04"},"content":"            personPredicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(keywords));"},{"lineNumber":56,"author":{"gitID":"yungyung04"},"content":"            model.updateFilteredPersonList(personPredicate);"},{"lineNumber":57,"author":{"gitID":"yungyung04"},"content":"            break;"},{"lineNumber":58,"author":{"gitID":"yungyung04"},"content":"        case CATEGORY_EDUCATION_LEVEL:"},{"lineNumber":59,"author":{"gitID":"yungyung04"},"content":"            personPredicate \u003d new EducationLevelContainsKeywordsPredicate(Arrays.asList(keywords));"},{"lineNumber":60,"author":{"gitID":"yungyung04"},"content":"            model.updateFilteredPersonList(personPredicate);"},{"lineNumber":61,"author":{"gitID":"yungyung04"},"content":"            break;"},{"lineNumber":62,"author":{"gitID":"yungyung04"},"content":"        case CATEGORY_GRADE:"},{"lineNumber":63,"author":{"gitID":"yungyung04"},"content":"            personPredicate \u003d new GradeContainsKeywordsPredicate(Arrays.asList(keywords));"},{"lineNumber":64,"author":{"gitID":"yungyung04"},"content":"            model.updateFilteredPersonList(personPredicate);"},{"lineNumber":65,"author":{"gitID":"yungyung04"},"content":"            break;"},{"lineNumber":66,"author":{"gitID":"yungyung04"},"content":"        case CATEGORY_SCHOOL:"},{"lineNumber":67,"author":{"gitID":"yungyung04"},"content":"            personPredicate \u003d new SchoolContainsKeywordsPredicate(Arrays.asList(keywords));"},{"lineNumber":68,"author":{"gitID":"yungyung04"},"content":"            model.updateFilteredPersonList(personPredicate);"},{"lineNumber":69,"author":{"gitID":"yungyung04"},"content":"            break;"},{"lineNumber":70,"author":{"gitID":"yungyung04"},"content":"        case CATEGORY_SUBJECT:"},{"lineNumber":71,"author":{"gitID":"yungyung04"},"content":"            personPredicate \u003d new SubjectContainsKeywordsPredicate(Arrays.asList(keywords));"},{"lineNumber":72,"author":{"gitID":"yungyung04"},"content":"            model.updateFilteredPersonList(personPredicate);"},{"lineNumber":73,"author":{"gitID":"yungyung04"},"content":"            break;"},{"lineNumber":74,"author":{"gitID":"yungyung04"},"content":"        default:"},{"lineNumber":75,"author":{"gitID":"yungyung04"},"content":"            // invalid category should be detected in parser instead"},{"lineNumber":76,"author":{"gitID":"yungyung04"},"content":"            assert (false);"},{"lineNumber":77,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"yungyung04"},"content":"        return new CommandResult(MESSAGE_SUCCESS + \"\\n\""},{"lineNumber":79,"author":{"gitID":"yungyung04"},"content":"                + getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":80,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":82,"author":{"gitID":"yungyung04"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"yungyung04"},"content":"    public boolean equals(Object other) {"},{"lineNumber":84,"author":{"gitID":"yungyung04"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":85,"author":{"gitID":"yungyung04"},"content":"                || (other instanceof FindPersonCommand // instanceof handles nulls"},{"lineNumber":86,"author":{"gitID":"yungyung04"},"content":"                \u0026\u0026 category.equals(((FindPersonCommand) other).category)"},{"lineNumber":87,"author":{"gitID":"yungyung04"},"content":"                \u0026\u0026 hasSameValue(keywords, ((FindPersonCommand) other).keywords));"},{"lineNumber":88,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":90,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"yungyung04"},"content":"     * Returns true if both the given arrays of String contain the same elements."},{"lineNumber":92,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"yungyung04"},"content":"    private boolean hasSameValue(String[] firstKeywords, String[] secondKeywords) {"},{"lineNumber":94,"author":{"gitID":"yungyung04"},"content":"        if (firstKeywords.length !\u003d secondKeywords.length) {"},{"lineNumber":95,"author":{"gitID":"yungyung04"},"content":"            return false;"},{"lineNumber":96,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":98,"author":{"gitID":"yungyung04"},"content":"        for (int i \u003d 0; i \u003c firstKeywords.length; i++) {"},{"lineNumber":99,"author":{"gitID":"yungyung04"},"content":"            if (!firstKeywords[i].equals(secondKeywords[i])) {"},{"lineNumber":100,"author":{"gitID":"yungyung04"},"content":"                return false;"},{"lineNumber":101,"author":{"gitID":"yungyung04"},"content":"            }"},{"lineNumber":102,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"yungyung04"},"content":"        return true;"},{"lineNumber":104,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"yungyung04"},"content":"}"}],"authorContributionMap":{"yungyung04":101,"-":4}},{"path":"src/main/java/seedu/address/model/tutee/School.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tutee;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"ChoChihTun"},"content":"//@@author ChoChihTun"},{"lineNumber":7,"author":{"gitID":"ChoChihTun"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"ChoChihTun"},"content":" * Represents a Tutee\u0027s school"},{"lineNumber":9,"author":{"gitID":"ChoChihTun"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidSchool(String)}"},{"lineNumber":10,"author":{"gitID":"ChoChihTun"},"content":" */"},{"lineNumber":11,"author":{"gitID":"ChoChihTun"},"content":"public class School {"},{"lineNumber":12,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":13,"author":{"gitID":"ChoChihTun"},"content":"    public static final String MESSAGE_SCHOOL_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"ChoChihTun"},"content":"            \"School should only contain alphabetic characters and spaces, and it should not be blank\";"},{"lineNumber":15,"author":{"gitID":"ChoChihTun"},"content":"    public static final String SCHOOL_VALIDATION_REGEX \u003d \"[\\\\p{Alpha}][\\\\p{Alpha} ]*\";"},{"lineNumber":16,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":17,"author":{"gitID":"ChoChihTun"},"content":"    public final String school;"},{"lineNumber":18,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":19,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"ChoChihTun"},"content":"     * Constructs a {@code School}."},{"lineNumber":21,"author":{"gitID":"ChoChihTun"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"ChoChihTun"},"content":"     * @param school A valid school."},{"lineNumber":23,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"ChoChihTun"},"content":"    public School(String school) {"},{"lineNumber":25,"author":{"gitID":"ChoChihTun"},"content":"        requireNonNull(school);"},{"lineNumber":26,"author":{"gitID":"ChoChihTun"},"content":"        checkArgument(isValidSchool(school), MESSAGE_SCHOOL_CONSTRAINTS);"},{"lineNumber":27,"author":{"gitID":"ChoChihTun"},"content":"        this.school \u003d school;"},{"lineNumber":28,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":30,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"ChoChihTun"},"content":"     * Returns true if a given string is a valid school."},{"lineNumber":32,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"ChoChihTun"},"content":"    public static boolean isValidSchool(String test) {"},{"lineNumber":34,"author":{"gitID":"ChoChihTun"},"content":"        return test.matches(SCHOOL_VALIDATION_REGEX);"},{"lineNumber":35,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":37,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":38,"author":{"gitID":"ChoChihTun"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"ChoChihTun"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitID":"ChoChihTun"},"content":"        return school;"},{"lineNumber":41,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":43,"author":{"gitID":"ChoChihTun"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"ChoChihTun"},"content":"    public boolean equals(Object other) {"},{"lineNumber":45,"author":{"gitID":"ChoChihTun"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":46,"author":{"gitID":"ChoChihTun"},"content":"                || (other instanceof School // instanceof handles nulls"},{"lineNumber":47,"author":{"gitID":"ChoChihTun"},"content":"                \u0026\u0026 this.school.equals(((School) other).school)); // state check"},{"lineNumber":48,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":50,"author":{"gitID":"ChoChihTun"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"ChoChihTun"},"content":"    public int hashCode() {"},{"lineNumber":52,"author":{"gitID":"ChoChihTun"},"content":"        return school.hashCode();"},{"lineNumber":53,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"ChoChihTun"},"content":"}"}],"authorContributionMap":{"ChoChihTun":49,"-":5}},{"path":"src/main/java/seedu/address/model/personal/PersonalTask.java","lines":[{"lineNumber":1,"author":{"gitID":"ChoChihTun"},"content":"package seedu.address.model.personal;"},{"lineNumber":2,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":3,"author":{"gitID":"ChoChihTun"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitID":"yungyung04"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitID":"yungyung04"},"content":"import java.time.format.ResolverStyle;"},{"lineNumber":6,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":7,"author":{"gitID":"ChoChihTun"},"content":"import com.calendarfx.model.Entry;"},{"lineNumber":8,"author":{"gitID":"ChoChihTun"},"content":"import com.calendarfx.model.Interval;"},{"lineNumber":9,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":10,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.model.Task;"},{"lineNumber":11,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":12,"author":{"gitID":"ChoChihTun"},"content":"//@@author ChoChihTun"},{"lineNumber":13,"author":{"gitID":"ChoChihTun"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"ChoChihTun"},"content":" * Represents the personal task that the user has"},{"lineNumber":15,"author":{"gitID":"ChoChihTun"},"content":" */"},{"lineNumber":16,"author":{"gitID":"ChoChihTun"},"content":"public class PersonalTask implements Task {"},{"lineNumber":17,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":18,"author":{"gitID":"ChoChihTun"},"content":"    private static final String HOUR_DELIMITER \u003d \"h\";"},{"lineNumber":19,"author":{"gitID":"ChoChihTun"},"content":"    private static final String MINUTE_DELIMITER \u003d \"m\";"},{"lineNumber":20,"author":{"gitID":"ChoChihTun"},"content":"    private static final String NULL_STRING \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":22,"author":{"gitID":"ChoChihTun"},"content":"    private DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/uuuu HH:mm\")"},{"lineNumber":23,"author":{"gitID":"ChoChihTun"},"content":"            .withResolverStyle(ResolverStyle.STRICT);"},{"lineNumber":24,"author":{"gitID":"ChoChihTun"},"content":"    private String description;"},{"lineNumber":25,"author":{"gitID":"ChoChihTun"},"content":"    private String duration;"},{"lineNumber":26,"author":{"gitID":"ChoChihTun"},"content":"    private LocalDateTime taskDateTime;"},{"lineNumber":27,"author":{"gitID":"ChoChihTun"},"content":"    private Entry entry;"},{"lineNumber":28,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":29,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"ChoChihTun"},"content":"     * Creates a personal task"},{"lineNumber":31,"author":{"gitID":"ChoChihTun"},"content":"     *"},{"lineNumber":32,"author":{"gitID":"ChoChihTun"},"content":"     * @param taskDateTime date and time of the task"},{"lineNumber":33,"author":{"gitID":"ChoChihTun"},"content":"     * @param duration duration of the task"},{"lineNumber":34,"author":{"gitID":"ChoChihTun"},"content":"     * @param description description of the task"},{"lineNumber":35,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"ChoChihTun"},"content":"    public PersonalTask(LocalDateTime taskDateTime, String duration, String description) {"},{"lineNumber":37,"author":{"gitID":"ChoChihTun"},"content":"        this.taskDateTime \u003d taskDateTime;"},{"lineNumber":38,"author":{"gitID":"ChoChihTun"},"content":"        this.duration \u003d duration;"},{"lineNumber":39,"author":{"gitID":"ChoChihTun"},"content":"        this.description \u003d description;"},{"lineNumber":40,"author":{"gitID":"ChoChihTun"},"content":"        this.entry \u003d createCalendarEntry();"},{"lineNumber":41,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":43,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"ChoChihTun"},"content":"     * Creates an entry to be entered into the calendar"},{"lineNumber":45,"author":{"gitID":"ChoChihTun"},"content":"     *"},{"lineNumber":46,"author":{"gitID":"ChoChihTun"},"content":"     * @return Calendar entry"},{"lineNumber":47,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"ChoChihTun"},"content":"    private Entry createCalendarEntry() {"},{"lineNumber":49,"author":{"gitID":"ChoChihTun"},"content":"        LocalDateTime endDateTime \u003d getTaskEndTime();"},{"lineNumber":50,"author":{"gitID":"ChoChihTun"},"content":"        Interval interval \u003d new Interval(taskDateTime, endDateTime);"},{"lineNumber":51,"author":{"gitID":"ChoChihTun"},"content":"        Entry entry \u003d new Entry(description);"},{"lineNumber":52,"author":{"gitID":"ChoChihTun"},"content":"        entry.setInterval(interval);"},{"lineNumber":53,"author":{"gitID":"ChoChihTun"},"content":"        return entry;"},{"lineNumber":54,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":56,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"ChoChihTun"},"content":"     * Returns the end time of the task"},{"lineNumber":58,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"ChoChihTun"},"content":"    private LocalDateTime getTaskEndTime() {"},{"lineNumber":60,"author":{"gitID":"ChoChihTun"},"content":"        int hoursInDuration \u003d parseHours();"},{"lineNumber":61,"author":{"gitID":"ChoChihTun"},"content":"        int minutesInDuration \u003d parseMinutes();"},{"lineNumber":62,"author":{"gitID":"ChoChihTun"},"content":"        LocalDateTime endDateTime \u003d taskDateTime.plusHours(hoursInDuration).plusMinutes(minutesInDuration);"},{"lineNumber":63,"author":{"gitID":"ChoChihTun"},"content":"        return endDateTime;"},{"lineNumber":64,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":66,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"ChoChihTun"},"content":"     * Parses hour component out of duration"},{"lineNumber":68,"author":{"gitID":"ChoChihTun"},"content":"     *"},{"lineNumber":69,"author":{"gitID":"ChoChihTun"},"content":"     * @return number of hours in the duration"},{"lineNumber":70,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"ChoChihTun"},"content":"    private int parseHours() {"},{"lineNumber":72,"author":{"gitID":"ChoChihTun"},"content":"        int indexOfHourDelimiter \u003d duration.indexOf(HOUR_DELIMITER);"},{"lineNumber":73,"author":{"gitID":"ChoChihTun"},"content":"        return Integer.parseInt(duration.substring(0, indexOfHourDelimiter));"},{"lineNumber":74,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":76,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"ChoChihTun"},"content":"     * Parses minute component out of duration"},{"lineNumber":78,"author":{"gitID":"ChoChihTun"},"content":"     *"},{"lineNumber":79,"author":{"gitID":"ChoChihTun"},"content":"     * @return number of minutes in the duration"},{"lineNumber":80,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"ChoChihTun"},"content":"    private int parseMinutes() {"},{"lineNumber":82,"author":{"gitID":"ChoChihTun"},"content":"        int startOfMinutesIndex \u003d duration.indexOf(HOUR_DELIMITER) + 1;"},{"lineNumber":83,"author":{"gitID":"ChoChihTun"},"content":"        int indexOfMinuteDelimiter \u003d duration.indexOf(MINUTE_DELIMITER);"},{"lineNumber":84,"author":{"gitID":"ChoChihTun"},"content":"        return Integer.parseInt(duration.substring(startOfMinutesIndex, indexOfMinuteDelimiter));"},{"lineNumber":85,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":87,"author":{"gitID":"ChoChihTun"},"content":"    public Entry getEntry() {"},{"lineNumber":88,"author":{"gitID":"ChoChihTun"},"content":"        return entry;"},{"lineNumber":89,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":91,"author":{"gitID":"ChoChihTun"},"content":"    public LocalDateTime getTaskDateTime() {"},{"lineNumber":92,"author":{"gitID":"ChoChihTun"},"content":"        return taskDateTime;"},{"lineNumber":93,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":95,"author":{"gitID":"ChoChihTun"},"content":"    public String getDescription() {"},{"lineNumber":96,"author":{"gitID":"ChoChihTun"},"content":"        return description;"},{"lineNumber":97,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":99,"author":{"gitID":"ChoChihTun"},"content":"    public String getDuration() {"},{"lineNumber":100,"author":{"gitID":"ChoChihTun"},"content":"        return duration;"},{"lineNumber":101,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":103,"author":{"gitID":"ChoChihTun"},"content":"    @Override"},{"lineNumber":104,"author":{"gitID":"ChoChihTun"},"content":"    public String getStringTaskDateTime() {"},{"lineNumber":105,"author":{"gitID":"ChoChihTun"},"content":"        return taskDateTime.format(formatter);"},{"lineNumber":106,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":108,"author":{"gitID":"yungyung04"},"content":"    //@@author yungyung04"},{"lineNumber":109,"author":{"gitID":"yungyung04"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"yungyung04"},"content":"    public String toString() {"},{"lineNumber":111,"author":{"gitID":"yungyung04"},"content":"        if (hasDescription()) {"},{"lineNumber":112,"author":{"gitID":"yungyung04"},"content":"            return \"Personal task with description \" + description + \" on \""},{"lineNumber":113,"author":{"gitID":"yungyung04"},"content":"                    + Integer.toString(taskDateTime.getDayOfMonth()) + \" \""},{"lineNumber":114,"author":{"gitID":"yungyung04"},"content":"                    + taskDateTime.getMonth().name() + \" \" + Integer.toString(taskDateTime.getYear());"},{"lineNumber":115,"author":{"gitID":"yungyung04"},"content":"        } else {"},{"lineNumber":116,"author":{"gitID":"yungyung04"},"content":"            return \"Personal task without description on \" + Integer.toString(taskDateTime.getDayOfMonth())"},{"lineNumber":117,"author":{"gitID":"yungyung04"},"content":"                    + \" \" + taskDateTime.getMonth().name() + \" \" + Integer.toString(taskDateTime.getYear());"},{"lineNumber":118,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":121,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"yungyung04"},"content":"     * Returns true if the tuition task contains a non-empty description."},{"lineNumber":123,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"yungyung04"},"content":"    private boolean hasDescription() {"},{"lineNumber":125,"author":{"gitID":"yungyung04"},"content":"        return !description.equals(NULL_STRING);"},{"lineNumber":126,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":128,"author":{"gitID":"yungyung04"},"content":"    @Override"},{"lineNumber":129,"author":{"gitID":"yungyung04"},"content":"    public boolean equals(Object other) {"},{"lineNumber":130,"author":{"gitID":"yungyung04"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":131,"author":{"gitID":"yungyung04"},"content":"                || (other instanceof PersonalTask // instanceof handles nulls"},{"lineNumber":132,"author":{"gitID":"yungyung04"},"content":"                \u0026\u0026 taskDateTime.equals(((PersonalTask) other).taskDateTime)"},{"lineNumber":133,"author":{"gitID":"yungyung04"},"content":"                \u0026\u0026 duration.equals(((PersonalTask) other).duration)"},{"lineNumber":134,"author":{"gitID":"yungyung04"},"content":"                \u0026\u0026 description.equals(((PersonalTask) other).description));"},{"lineNumber":135,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":137,"author":{"gitID":"yungyung04"},"content":"}"}],"authorContributionMap":{"ChoChihTun":105,"yungyung04":32}},{"path":"src/main/java/seedu/address/model/tutee/EducationLevelContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"yungyung04"},"content":"package seedu.address.model.tutee;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":8,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":9,"author":{"gitID":"yungyung04"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"yungyung04"},"content":" * Tests that a {@code Tutee}\u0027s {@code Education Level} matches any of the keywords given."},{"lineNumber":11,"author":{"gitID":"yungyung04"},"content":" */"},{"lineNumber":12,"author":{"gitID":"yungyung04"},"content":"public class EducationLevelContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":13,"author":{"gitID":"yungyung04"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":14,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":15,"author":{"gitID":"yungyung04"},"content":"    public EducationLevelContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":16,"author":{"gitID":"yungyung04"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":17,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":19,"author":{"gitID":"yungyung04"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"yungyung04"},"content":"    public boolean test(Person person) {"},{"lineNumber":21,"author":{"gitID":"yungyung04"},"content":"        if (!(person instanceof Tutee)) {"},{"lineNumber":22,"author":{"gitID":"yungyung04"},"content":"            return false;"},{"lineNumber":23,"author":{"gitID":"yungyung04"},"content":"        } else {"},{"lineNumber":24,"author":{"gitID":"yungyung04"},"content":"            return keywords.stream()"},{"lineNumber":25,"author":{"gitID":"yungyung04"},"content":"                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(("},{"lineNumber":26,"author":{"gitID":"yungyung04"},"content":"                            (Tutee) person).getEducationLevel().toString(), keyword));"},{"lineNumber":27,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":33,"author":{"gitID":"yungyung04"},"content":"                || (other instanceof EducationLevelContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":34,"author":{"gitID":"yungyung04"},"content":"                \u0026\u0026 this.keywords.equals(((EducationLevelContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":35,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"yungyung04"},"content":"}"}],"authorContributionMap":{"yungyung04":26,"-":10}},{"path":"src/main/java/seedu/address/model/tutee/Subject.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tutee;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"ChoChihTun"},"content":"//@@author ChoChihTun"},{"lineNumber":7,"author":{"gitID":"ChoChihTun"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"ChoChihTun"},"content":" * Represents a Tutee\u0027s subject"},{"lineNumber":9,"author":{"gitID":"ChoChihTun"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidSubject(String)}"},{"lineNumber":10,"author":{"gitID":"ChoChihTun"},"content":" */"},{"lineNumber":11,"author":{"gitID":"ChoChihTun"},"content":"public class Subject {"},{"lineNumber":12,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":13,"author":{"gitID":"ChoChihTun"},"content":"    public static final String MESSAGE_SUBJECT_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"ChoChihTun"},"content":"            \"Subject should only contain alphabetic characters and spaces, and it should not be blank\";"},{"lineNumber":15,"author":{"gitID":"ChoChihTun"},"content":"    public static final String SUBJECT_VALIDATION_REGEX \u003d \"[\\\\p{Alpha}][\\\\p{Alpha} ]*\";"},{"lineNumber":16,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":17,"author":{"gitID":"ChoChihTun"},"content":"    public final String subject;"},{"lineNumber":18,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":19,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"ChoChihTun"},"content":"     * Constructs a {@code Subject}."},{"lineNumber":21,"author":{"gitID":"ChoChihTun"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"ChoChihTun"},"content":"     * @param subject A valid subject."},{"lineNumber":23,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"ChoChihTun"},"content":"    public Subject(String subject) {"},{"lineNumber":25,"author":{"gitID":"ChoChihTun"},"content":"        requireNonNull(subject);"},{"lineNumber":26,"author":{"gitID":"ChoChihTun"},"content":"        checkArgument(isValidSubject(subject), MESSAGE_SUBJECT_CONSTRAINTS);"},{"lineNumber":27,"author":{"gitID":"ChoChihTun"},"content":"        this.subject \u003d subject;"},{"lineNumber":28,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":30,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"ChoChihTun"},"content":"     * Returns true if a given string is a valid subject."},{"lineNumber":32,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"ChoChihTun"},"content":"    public static boolean isValidSubject(String test) {"},{"lineNumber":34,"author":{"gitID":"ChoChihTun"},"content":"        return test.matches(SUBJECT_VALIDATION_REGEX);"},{"lineNumber":35,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":37,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":38,"author":{"gitID":"ChoChihTun"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"ChoChihTun"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitID":"ChoChihTun"},"content":"        return subject;"},{"lineNumber":41,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":43,"author":{"gitID":"ChoChihTun"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"ChoChihTun"},"content":"    public boolean equals(Object other) {"},{"lineNumber":45,"author":{"gitID":"ChoChihTun"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":46,"author":{"gitID":"ChoChihTun"},"content":"                || (other instanceof Subject // instanceof handles nulls"},{"lineNumber":47,"author":{"gitID":"ChoChihTun"},"content":"                \u0026\u0026 this.subject.equals(((Subject) other).subject)); // state check"},{"lineNumber":48,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":50,"author":{"gitID":"ChoChihTun"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"ChoChihTun"},"content":"    public int hashCode() {"},{"lineNumber":52,"author":{"gitID":"ChoChihTun"},"content":"        return subject.hashCode();"},{"lineNumber":53,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"ChoChihTun"},"content":"}"}],"authorContributionMap":{"ChoChihTun":49,"-":5}},{"path":"src/main/java/seedu/address/model/tutee/EducationLevel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tutee;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"ChoChihTun"},"content":"//@@author ChoChihTun"},{"lineNumber":7,"author":{"gitID":"ChoChihTun"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"ChoChihTun"},"content":" * Represents a Tutee\u0027s education level in the address book."},{"lineNumber":9,"author":{"gitID":"ChoChihTun"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEducationLevel(String)}"},{"lineNumber":10,"author":{"gitID":"ChoChihTun"},"content":" */"},{"lineNumber":11,"author":{"gitID":"ChoChihTun"},"content":"public class EducationLevel {"},{"lineNumber":12,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":13,"author":{"gitID":"ChoChihTun"},"content":"    public static final String MESSAGE_EDUCATION_LEVEL_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"ChoChihTun"},"content":"            \"Education level should only be either primary, secondary or junior college, and it should not be blank\";"},{"lineNumber":15,"author":{"gitID":"ChoChihTun"},"content":"    public static final String EDUCATION_LEVEL_VALIDATION_REGEX \u003d \"(?i)\\\\b(primary|secondary|(junior\\\\scollege))\\\\b\";"},{"lineNumber":16,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":17,"author":{"gitID":"ChoChihTun"},"content":"    public final String educationLevel;"},{"lineNumber":18,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":19,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"ChoChihTun"},"content":"     * Constructs a {@code education level}."},{"lineNumber":21,"author":{"gitID":"ChoChihTun"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"ChoChihTun"},"content":"     * @param educationLevel A valid education level."},{"lineNumber":23,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"ChoChihTun"},"content":"    public EducationLevel(String educationLevel) {"},{"lineNumber":25,"author":{"gitID":"ChoChihTun"},"content":"        requireNonNull(educationLevel);"},{"lineNumber":26,"author":{"gitID":"ChoChihTun"},"content":"        checkArgument(isValidEducationLevel(educationLevel), MESSAGE_EDUCATION_LEVEL_CONSTRAINTS);"},{"lineNumber":27,"author":{"gitID":"ChoChihTun"},"content":"        this.educationLevel \u003d educationLevel;"},{"lineNumber":28,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":30,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"ChoChihTun"},"content":"     * Returns true if a given string is a valid education level."},{"lineNumber":32,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"ChoChihTun"},"content":"    public static boolean isValidEducationLevel(String test) {"},{"lineNumber":34,"author":{"gitID":"ChoChihTun"},"content":"        return test.matches(EDUCATION_LEVEL_VALIDATION_REGEX);"},{"lineNumber":35,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":37,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":38,"author":{"gitID":"ChoChihTun"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"ChoChihTun"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitID":"ChoChihTun"},"content":"        return educationLevel;"},{"lineNumber":41,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":43,"author":{"gitID":"ChoChihTun"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"ChoChihTun"},"content":"    public boolean equals(Object other) {"},{"lineNumber":45,"author":{"gitID":"ChoChihTun"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":46,"author":{"gitID":"ChoChihTun"},"content":"                || (other instanceof EducationLevel // instanceof handles nulls"},{"lineNumber":47,"author":{"gitID":"ChoChihTun"},"content":"                \u0026\u0026 this.educationLevel.equals(((EducationLevel) other).educationLevel)); // state check"},{"lineNumber":48,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":50,"author":{"gitID":"ChoChihTun"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"ChoChihTun"},"content":"    public int hashCode() {"},{"lineNumber":52,"author":{"gitID":"ChoChihTun"},"content":"        return educationLevel.hashCode();"},{"lineNumber":53,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"ChoChihTun"},"content":"}"}],"authorContributionMap":{"ChoChihTun":49,"-":5}},{"path":"src/main/java/seedu/address/logic/commands/FindTaskCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"yungyung04"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":3,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.model.task.TaskSortUtil.CATEGORY_MONTH;"},{"lineNumber":4,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":5,"author":{"gitID":"yungyung04"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"yungyung04"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":8,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.Task;"},{"lineNumber":9,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.task.MonthContainsKeywordsPredicate;"},{"lineNumber":10,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":11,"author":{"gitID":"yungyung04"},"content":"//@@author yungyung04"},{"lineNumber":12,"author":{"gitID":"yungyung04"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"yungyung04"},"content":" * Finds and lists all tasks in the task list based on the specified filter category."},{"lineNumber":14,"author":{"gitID":"yungyung04"},"content":" */"},{"lineNumber":15,"author":{"gitID":"yungyung04"},"content":"public class FindTaskCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"yungyung04"},"content":"    public static final String COMMAND_WORD \u003d \"findtaskby\";"},{"lineNumber":17,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":18,"author":{"gitID":"yungyung04"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Find is successful.\";"},{"lineNumber":19,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":20,"author":{"gitID":"yungyung04"},"content":"    public static final String INPUT_TYPE_BETWEEN \u003d \"between\";"},{"lineNumber":21,"author":{"gitID":"yungyung04"},"content":"    public static final String INPUT_TYPE_NAMELY \u003d \"namely\";"},{"lineNumber":22,"author":{"gitID":"yungyung04"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":23,"author":{"gitID":"yungyung04"},"content":"            + \": lists all tasks that suit the specified category\\n\""},{"lineNumber":24,"author":{"gitID":"yungyung04"},"content":"            + \"Parameters: CATEGORY FIND_TYPE KEYWORDS\\n\""},{"lineNumber":25,"author":{"gitID":"yungyung04"},"content":"            + \"1st Example: \" + COMMAND_WORD + \" \" + CATEGORY_MONTH + \" \" + INPUT_TYPE_BETWEEN + \" April October\\n\""},{"lineNumber":26,"author":{"gitID":"yungyung04"},"content":"            + \"2nd Example: \" + COMMAND_WORD + \" \" + CATEGORY_MONTH + \" \" + INPUT_TYPE_NAMELY"},{"lineNumber":27,"author":{"gitID":"yungyung04"},"content":"            + \" 2 05 Aug December now\";"},{"lineNumber":28,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":29,"author":{"gitID":"yungyung04"},"content":"    private final String category;"},{"lineNumber":30,"author":{"gitID":"yungyung04"},"content":"    private final String[] keywords;"},{"lineNumber":31,"author":{"gitID":"yungyung04"},"content":"    private Predicate\u003cTask\u003e taskPredicate;"},{"lineNumber":32,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":33,"author":{"gitID":"yungyung04"},"content":"    public FindTaskCommand(String category, String[] keywords) {"},{"lineNumber":34,"author":{"gitID":"yungyung04"},"content":"        this.category \u003d category;"},{"lineNumber":35,"author":{"gitID":"yungyung04"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":36,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":38,"author":{"gitID":"yungyung04"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"yungyung04"},"content":"    public CommandResult execute() {"},{"lineNumber":40,"author":{"gitID":"yungyung04"},"content":"        switch (category) {"},{"lineNumber":41,"author":{"gitID":"yungyung04"},"content":"        case CATEGORY_MONTH:"},{"lineNumber":42,"author":{"gitID":"yungyung04"},"content":"            taskPredicate \u003d new MonthContainsKeywordsPredicate(Arrays.asList(keywords));"},{"lineNumber":43,"author":{"gitID":"yungyung04"},"content":"            model.updateFilteredTaskList(taskPredicate);"},{"lineNumber":44,"author":{"gitID":"yungyung04"},"content":"            break;"},{"lineNumber":45,"author":{"gitID":"yungyung04"},"content":"        default:"},{"lineNumber":46,"author":{"gitID":"yungyung04"},"content":"            // invalid category should be detected in parser instead"},{"lineNumber":47,"author":{"gitID":"yungyung04"},"content":"            assert (false);"},{"lineNumber":48,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"yungyung04"},"content":"        return new CommandResult(MESSAGE_SUCCESS + \"\\n\""},{"lineNumber":50,"author":{"gitID":"yungyung04"},"content":"                + getMessageForTaskListShownSummary(model.getFilteredTaskList().size()));"},{"lineNumber":51,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":53,"author":{"gitID":"yungyung04"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"yungyung04"},"content":"    public boolean equals(Object other) {"},{"lineNumber":55,"author":{"gitID":"yungyung04"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":56,"author":{"gitID":"yungyung04"},"content":"                || (other instanceof FindTaskCommand // instanceof handles nulls"},{"lineNumber":57,"author":{"gitID":"yungyung04"},"content":"                \u0026\u0026 category.equals(((FindTaskCommand) other).category)"},{"lineNumber":58,"author":{"gitID":"yungyung04"},"content":"                \u0026\u0026 hasSameValue(keywords, ((FindTaskCommand) other).keywords));"},{"lineNumber":59,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":61,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"yungyung04"},"content":"     * Returns true if both the given arrays of String contain the same elements."},{"lineNumber":63,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"yungyung04"},"content":"    private boolean hasSameValue(String[] firstKeywords, String[] secondKeywords) {"},{"lineNumber":65,"author":{"gitID":"yungyung04"},"content":"        if (firstKeywords.length !\u003d secondKeywords.length) {"},{"lineNumber":66,"author":{"gitID":"yungyung04"},"content":"            return false;"},{"lineNumber":67,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":69,"author":{"gitID":"yungyung04"},"content":"        for (int i \u003d 0; i \u003c firstKeywords.length; i++) {"},{"lineNumber":70,"author":{"gitID":"yungyung04"},"content":"            if (!firstKeywords[i].equals(secondKeywords[i])) {"},{"lineNumber":71,"author":{"gitID":"yungyung04"},"content":"                return false;"},{"lineNumber":72,"author":{"gitID":"yungyung04"},"content":"            }"},{"lineNumber":73,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"yungyung04"},"content":"        return true;"},{"lineNumber":75,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"yungyung04"},"content":"}"}],"authorContributionMap":{"yungyung04":76}},{"path":"src/main/java/seedu/address/model/tutee/SchoolContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"yungyung04"},"content":"package seedu.address.model.tutee;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":8,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":9,"author":{"gitID":"yungyung04"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"yungyung04"},"content":" * Tests that a {@code Tutee}\u0027s {@code School} matches any of the keywords given."},{"lineNumber":11,"author":{"gitID":"yungyung04"},"content":" */"},{"lineNumber":12,"author":{"gitID":"yungyung04"},"content":"public class SchoolContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":13,"author":{"gitID":"yungyung04"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":14,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":15,"author":{"gitID":"yungyung04"},"content":"    public SchoolContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":16,"author":{"gitID":"yungyung04"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":17,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":19,"author":{"gitID":"yungyung04"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"yungyung04"},"content":"    public boolean test(Person person) {"},{"lineNumber":21,"author":{"gitID":"yungyung04"},"content":"        if (!(person instanceof Tutee)) {"},{"lineNumber":22,"author":{"gitID":"yungyung04"},"content":"            return false;"},{"lineNumber":23,"author":{"gitID":"yungyung04"},"content":"        } else {"},{"lineNumber":24,"author":{"gitID":"yungyung04"},"content":"            return keywords.stream()"},{"lineNumber":25,"author":{"gitID":"yungyung04"},"content":"                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(("},{"lineNumber":26,"author":{"gitID":"yungyung04"},"content":"                            (Tutee) person).getSchool().toString(), keyword));"},{"lineNumber":27,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":33,"author":{"gitID":"yungyung04"},"content":"                || (other instanceof SchoolContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":34,"author":{"gitID":"yungyung04"},"content":"                \u0026\u0026 this.keywords.equals(((SchoolContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":35,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"yungyung04"},"content":"}"}],"authorContributionMap":{"yungyung04":26,"-":10}},{"path":"src/main/java/seedu/address/model/tutee/Grade.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tutee;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"ChoChihTun"},"content":"//@@author ChoChihTun"},{"lineNumber":7,"author":{"gitID":"ChoChihTun"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"ChoChihTun"},"content":" * Represents a Tutee\u0027s subject grade"},{"lineNumber":9,"author":{"gitID":"ChoChihTun"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidGrade(String)}"},{"lineNumber":10,"author":{"gitID":"ChoChihTun"},"content":" */"},{"lineNumber":11,"author":{"gitID":"ChoChihTun"},"content":"public class Grade {"},{"lineNumber":12,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":13,"author":{"gitID":"ChoChihTun"},"content":"    public static final String MESSAGE_GRADE_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"ChoChihTun"},"content":"            \"Grade should start with an alphabetic character and followed by any character (ONLY ONE) or blank, \""},{"lineNumber":15,"author":{"gitID":"ChoChihTun"},"content":"            + \"and it should not be blank\";"},{"lineNumber":16,"author":{"gitID":"ChoChihTun"},"content":"    public static final String GRADE_VALIDATION_REGEX \u003d \"[\\\\p{Alpha}].??\";"},{"lineNumber":17,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":18,"author":{"gitID":"ChoChihTun"},"content":"    public final String grade;"},{"lineNumber":19,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":20,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"ChoChihTun"},"content":"     * Constructs a {@code Grade}."},{"lineNumber":22,"author":{"gitID":"ChoChihTun"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"ChoChihTun"},"content":"     * @param grade A valid grade."},{"lineNumber":24,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"ChoChihTun"},"content":"    public Grade(String grade) {"},{"lineNumber":26,"author":{"gitID":"ChoChihTun"},"content":"        requireNonNull(grade);"},{"lineNumber":27,"author":{"gitID":"ChoChihTun"},"content":"        checkArgument(isValidGrade(grade), MESSAGE_GRADE_CONSTRAINTS);"},{"lineNumber":28,"author":{"gitID":"ChoChihTun"},"content":"        this.grade \u003d grade;"},{"lineNumber":29,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":31,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"ChoChihTun"},"content":"     * Returns true if a given string is a valid grade."},{"lineNumber":33,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"ChoChihTun"},"content":"    public static boolean isValidGrade(String test) {"},{"lineNumber":35,"author":{"gitID":"ChoChihTun"},"content":"        return test.matches(GRADE_VALIDATION_REGEX);"},{"lineNumber":36,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":38,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":39,"author":{"gitID":"ChoChihTun"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"ChoChihTun"},"content":"    public String toString() {"},{"lineNumber":41,"author":{"gitID":"ChoChihTun"},"content":"        return grade;"},{"lineNumber":42,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":44,"author":{"gitID":"ChoChihTun"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"ChoChihTun"},"content":"    public boolean equals(Object other) {"},{"lineNumber":46,"author":{"gitID":"ChoChihTun"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":47,"author":{"gitID":"ChoChihTun"},"content":"                || (other instanceof Grade // instanceof handles nulls"},{"lineNumber":48,"author":{"gitID":"ChoChihTun"},"content":"                \u0026\u0026 this.grade.equals(((Grade) other).grade)); // state check"},{"lineNumber":49,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":51,"author":{"gitID":"ChoChihTun"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"ChoChihTun"},"content":"    public int hashCode() {"},{"lineNumber":53,"author":{"gitID":"ChoChihTun"},"content":"        return grade.hashCode();"},{"lineNumber":54,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"ChoChihTun"},"content":"}"}],"authorContributionMap":{"ChoChihTun":50,"-":5}},{"path":"src/main/java/seedu/address/model/tutee/SubjectContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"yungyung04"},"content":"package seedu.address.model.tutee;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":8,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":9,"author":{"gitID":"yungyung04"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"yungyung04"},"content":" * Tests that a {@code Tutee}\u0027s {@code Subject} matches any of the keywords given."},{"lineNumber":11,"author":{"gitID":"yungyung04"},"content":" */"},{"lineNumber":12,"author":{"gitID":"yungyung04"},"content":"public class SubjectContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":13,"author":{"gitID":"yungyung04"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":14,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":15,"author":{"gitID":"yungyung04"},"content":"    public SubjectContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":16,"author":{"gitID":"yungyung04"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":17,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":19,"author":{"gitID":"yungyung04"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"yungyung04"},"content":"    public boolean test(Person person) {"},{"lineNumber":21,"author":{"gitID":"yungyung04"},"content":"        if (!(person instanceof Tutee)) {"},{"lineNumber":22,"author":{"gitID":"yungyung04"},"content":"            return false;"},{"lineNumber":23,"author":{"gitID":"yungyung04"},"content":"        } else {"},{"lineNumber":24,"author":{"gitID":"yungyung04"},"content":"            return keywords.stream()"},{"lineNumber":25,"author":{"gitID":"yungyung04"},"content":"                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(("},{"lineNumber":26,"author":{"gitID":"yungyung04"},"content":"                            (Tutee) person).getSubject().toString(), keyword));"},{"lineNumber":27,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":33,"author":{"gitID":"yungyung04"},"content":"                || (other instanceof SubjectContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":34,"author":{"gitID":"yungyung04"},"content":"                \u0026\u0026 this.keywords.equals(((SubjectContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":35,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"yungyung04"},"content":"}"}],"authorContributionMap":{"yungyung04":26,"-":10}},{"path":"src/main/java/seedu/address/model/tutee/TuitionTask.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tutee;"},{"lineNumber":2,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":3,"author":{"gitID":"ChoChihTun"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitID":"yungyung04"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitID":"yungyung04"},"content":"import java.time.format.ResolverStyle;"},{"lineNumber":6,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":7,"author":{"gitID":"ChoChihTun"},"content":"import com.calendarfx.model.Entry;"},{"lineNumber":8,"author":{"gitID":"ChoChihTun"},"content":"import com.calendarfx.model.Interval;"},{"lineNumber":9,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":10,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.model.Task;"},{"lineNumber":11,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":12,"author":{"gitID":"ChoChihTun"},"content":"//@@author ChoChihTun"},{"lineNumber":13,"author":{"gitID":"ChoChihTun"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"ChoChihTun"},"content":" * Represents a tuition task that the tutee has"},{"lineNumber":15,"author":{"gitID":"ChoChihTun"},"content":" */"},{"lineNumber":16,"author":{"gitID":"ChoChihTun"},"content":"public class TuitionTask implements Task {"},{"lineNumber":17,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":18,"author":{"gitID":"ChoChihTun"},"content":"    private static final String TUITION_TITLE \u003d \"Tuition with %1$s\";"},{"lineNumber":19,"author":{"gitID":"ChoChihTun"},"content":"    private static final String HOUR_DELIMITER \u003d \"h\";"},{"lineNumber":20,"author":{"gitID":"ChoChihTun"},"content":"    private static final String MINUTE_DELIMITER \u003d \"m\";"},{"lineNumber":21,"author":{"gitID":"ChoChihTun"},"content":"    private static final String NULL_STRING \u003d \"\";"},{"lineNumber":22,"author":{"gitID":"ChoChihTun"},"content":"    private DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/uuuu HH:mm\")"},{"lineNumber":23,"author":{"gitID":"ChoChihTun"},"content":"            .withResolverStyle(ResolverStyle.STRICT);"},{"lineNumber":24,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":25,"author":{"gitID":"ChoChihTun"},"content":"    private String tutee;"},{"lineNumber":26,"author":{"gitID":"ChoChihTun"},"content":"    private String description;"},{"lineNumber":27,"author":{"gitID":"ChoChihTun"},"content":"    private String duration;"},{"lineNumber":28,"author":{"gitID":"ChoChihTun"},"content":"    private LocalDateTime taskDateTime;"},{"lineNumber":29,"author":{"gitID":"ChoChihTun"},"content":"    private Entry entry;"},{"lineNumber":30,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":31,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"ChoChihTun"},"content":"     * Creates a tuition task"},{"lineNumber":33,"author":{"gitID":"ChoChihTun"},"content":"     *"},{"lineNumber":34,"author":{"gitID":"ChoChihTun"},"content":"     * @param tutee tutee involved in the task"},{"lineNumber":35,"author":{"gitID":"ChoChihTun"},"content":"     * @param taskDateTime date and time of the task"},{"lineNumber":36,"author":{"gitID":"ChoChihTun"},"content":"     * @param duration duration of the task"},{"lineNumber":37,"author":{"gitID":"ChoChihTun"},"content":"     * @param description description of the task"},{"lineNumber":38,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"ChoChihTun"},"content":"    public TuitionTask(String tutee, LocalDateTime taskDateTime, String duration, String description) {"},{"lineNumber":40,"author":{"gitID":"ChoChihTun"},"content":"        this.tutee \u003d tutee;"},{"lineNumber":41,"author":{"gitID":"ChoChihTun"},"content":"        this.taskDateTime \u003d taskDateTime;"},{"lineNumber":42,"author":{"gitID":"ChoChihTun"},"content":"        this.duration \u003d duration;"},{"lineNumber":43,"author":{"gitID":"ChoChihTun"},"content":"        this.description \u003d description;"},{"lineNumber":44,"author":{"gitID":"ChoChihTun"},"content":"        this.entry \u003d createCalendarEntry();"},{"lineNumber":45,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":47,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"ChoChihTun"},"content":"     * Creates an entry to be entered into the calendar"},{"lineNumber":49,"author":{"gitID":"ChoChihTun"},"content":"     *"},{"lineNumber":50,"author":{"gitID":"ChoChihTun"},"content":"     * @return Calendar entry"},{"lineNumber":51,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"ChoChihTun"},"content":"    private Entry createCalendarEntry() {"},{"lineNumber":53,"author":{"gitID":"ChoChihTun"},"content":"        LocalDateTime endDateTime \u003d getTaskEndTime();"},{"lineNumber":54,"author":{"gitID":"ChoChihTun"},"content":"        Interval interval \u003d new Interval(taskDateTime, endDateTime);"},{"lineNumber":55,"author":{"gitID":"ChoChihTun"},"content":"        Entry entry \u003d new Entry(getTuitionTitle());"},{"lineNumber":56,"author":{"gitID":"ChoChihTun"},"content":"        entry.setInterval(interval);"},{"lineNumber":57,"author":{"gitID":"ChoChihTun"},"content":"        return entry;"},{"lineNumber":58,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":60,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"ChoChihTun"},"content":"     * Returns the end time of the task"},{"lineNumber":62,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"ChoChihTun"},"content":"    private LocalDateTime getTaskEndTime() {"},{"lineNumber":64,"author":{"gitID":"ChoChihTun"},"content":"        int hoursInDuration \u003d parseHours();"},{"lineNumber":65,"author":{"gitID":"ChoChihTun"},"content":"        int minutesInDuration \u003d parseMinutes();"},{"lineNumber":66,"author":{"gitID":"ChoChihTun"},"content":"        LocalDateTime endDateTime \u003d taskDateTime.plusHours(hoursInDuration).plusMinutes(minutesInDuration);"},{"lineNumber":67,"author":{"gitID":"ChoChihTun"},"content":"        return endDateTime;"},{"lineNumber":68,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":70,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"ChoChihTun"},"content":"     * Parses hour component out of duration"},{"lineNumber":72,"author":{"gitID":"ChoChihTun"},"content":"     *"},{"lineNumber":73,"author":{"gitID":"ChoChihTun"},"content":"     * @return number of hours in the duration"},{"lineNumber":74,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"ChoChihTun"},"content":"    private int parseHours() {"},{"lineNumber":76,"author":{"gitID":"ChoChihTun"},"content":"        int indexOfHourDelimiter \u003d duration.indexOf(HOUR_DELIMITER);"},{"lineNumber":77,"author":{"gitID":"ChoChihTun"},"content":"        return Integer.parseInt(duration.substring(0, indexOfHourDelimiter));"},{"lineNumber":78,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":80,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"ChoChihTun"},"content":"     * Parses minute component out of duration"},{"lineNumber":82,"author":{"gitID":"ChoChihTun"},"content":"     *"},{"lineNumber":83,"author":{"gitID":"ChoChihTun"},"content":"     * @return number of minutes in the duration"},{"lineNumber":84,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"ChoChihTun"},"content":"    private int parseMinutes() {"},{"lineNumber":86,"author":{"gitID":"ChoChihTun"},"content":"        int indexOfFirstMinuteDigit \u003d duration.indexOf(HOUR_DELIMITER) + 1;"},{"lineNumber":87,"author":{"gitID":"ChoChihTun"},"content":"        int indexOfMinuteDelimiter \u003d duration.indexOf(MINUTE_DELIMITER);"},{"lineNumber":88,"author":{"gitID":"ChoChihTun"},"content":"        return Integer.parseInt(duration.substring(indexOfFirstMinuteDigit, indexOfMinuteDelimiter));"},{"lineNumber":89,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":91,"author":{"gitID":"ChoChihTun"},"content":"    public Entry getEntry() {"},{"lineNumber":92,"author":{"gitID":"ChoChihTun"},"content":"        return entry;"},{"lineNumber":93,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":95,"author":{"gitID":"ChoChihTun"},"content":"    public LocalDateTime getTaskDateTime() {"},{"lineNumber":96,"author":{"gitID":"ChoChihTun"},"content":"        return taskDateTime;"},{"lineNumber":97,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":99,"author":{"gitID":"ChoChihTun"},"content":"    public String getPerson() {"},{"lineNumber":100,"author":{"gitID":"ChoChihTun"},"content":"        return tutee;"},{"lineNumber":101,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":103,"author":{"gitID":"ChoChihTun"},"content":"    public String getDescription() {"},{"lineNumber":104,"author":{"gitID":"ChoChihTun"},"content":"        return description;"},{"lineNumber":105,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":107,"author":{"gitID":"ChoChihTun"},"content":"    public String getDuration() {"},{"lineNumber":108,"author":{"gitID":"ChoChihTun"},"content":"        return duration;"},{"lineNumber":109,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":111,"author":{"gitID":"ChoChihTun"},"content":"    @Override"},{"lineNumber":112,"author":{"gitID":"ChoChihTun"},"content":"    public String getStringTaskDateTime() {"},{"lineNumber":113,"author":{"gitID":"ChoChihTun"},"content":"        return taskDateTime.format(formatter);"},{"lineNumber":114,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":116,"author":{"gitID":"ChoChihTun"},"content":"    public String getTuitionTitle() {"},{"lineNumber":117,"author":{"gitID":"ChoChihTun"},"content":"        return String.format(TUITION_TITLE, tutee);"},{"lineNumber":118,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":120,"author":{"gitID":"yungyung04"},"content":"    //@@author yungyung04"},{"lineNumber":121,"author":{"gitID":"yungyung04"},"content":"    @Override"},{"lineNumber":122,"author":{"gitID":"yungyung04"},"content":"    public String toString() {"},{"lineNumber":123,"author":{"gitID":"yungyung04"},"content":"        if (hasDescription()) {"},{"lineNumber":124,"author":{"gitID":"yungyung04"},"content":"            return \"Tuition task with description \" + description + \" on \""},{"lineNumber":125,"author":{"gitID":"yungyung04"},"content":"                    + Integer.toString(taskDateTime.getDayOfMonth()) + \" \" + taskDateTime.getMonth().name()"},{"lineNumber":126,"author":{"gitID":"yungyung04"},"content":"                    + \" \" + Integer.toString(taskDateTime.getYear());"},{"lineNumber":127,"author":{"gitID":"yungyung04"},"content":"        } else {"},{"lineNumber":128,"author":{"gitID":"yungyung04"},"content":"            return \"Tuition task without description on \" + Integer.toString(taskDateTime.getDayOfMonth())"},{"lineNumber":129,"author":{"gitID":"yungyung04"},"content":"                    + \" \" + taskDateTime.getMonth().name() + \" \" + Integer.toString(taskDateTime.getYear());"},{"lineNumber":130,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":133,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"yungyung04"},"content":"     * Returns true if the tuition task contains a non-empty description."},{"lineNumber":135,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"yungyung04"},"content":"    private boolean hasDescription() {"},{"lineNumber":137,"author":{"gitID":"yungyung04"},"content":"        return !description.equals(NULL_STRING);"},{"lineNumber":138,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":140,"author":{"gitID":"yungyung04"},"content":"    @Override"},{"lineNumber":141,"author":{"gitID":"yungyung04"},"content":"    public boolean equals(Object other) {"},{"lineNumber":142,"author":{"gitID":"yungyung04"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":143,"author":{"gitID":"yungyung04"},"content":"                || (other instanceof TuitionTask // instanceof handles nulls"},{"lineNumber":144,"author":{"gitID":"yungyung04"},"content":"                \u0026\u0026 tutee.equals(((TuitionTask) other).tutee)"},{"lineNumber":145,"author":{"gitID":"yungyung04"},"content":"                \u0026\u0026 taskDateTime.equals(((TuitionTask) other).taskDateTime)"},{"lineNumber":146,"author":{"gitID":"yungyung04"},"content":"                \u0026\u0026 duration.equals(((TuitionTask) other).duration)"},{"lineNumber":147,"author":{"gitID":"yungyung04"},"content":"                \u0026\u0026 description.equals(((TuitionTask) other).description));"},{"lineNumber":148,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"yungyung04"},"content":"}"}],"authorContributionMap":{"ChoChihTun":116,"yungyung04":32,"-":1}},{"path":"src/main/java/seedu/address/model/tutee/GradeContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"yungyung04"},"content":"package seedu.address.model.tutee;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":8,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":9,"author":{"gitID":"yungyung04"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"yungyung04"},"content":" * Tests that a {@code Tutee}\u0027s {@code Grade} matches any of the keywords given."},{"lineNumber":11,"author":{"gitID":"yungyung04"},"content":" */"},{"lineNumber":12,"author":{"gitID":"yungyung04"},"content":"public class GradeContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":13,"author":{"gitID":"yungyung04"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":14,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":15,"author":{"gitID":"yungyung04"},"content":"    public GradeContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":16,"author":{"gitID":"yungyung04"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":17,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":19,"author":{"gitID":"yungyung04"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"yungyung04"},"content":"    public boolean test(Person person) {"},{"lineNumber":21,"author":{"gitID":"yungyung04"},"content":"        if (!(person instanceof Tutee)) {"},{"lineNumber":22,"author":{"gitID":"yungyung04"},"content":"            return false;"},{"lineNumber":23,"author":{"gitID":"yungyung04"},"content":"        } else {"},{"lineNumber":24,"author":{"gitID":"yungyung04"},"content":"            return keywords.stream()"},{"lineNumber":25,"author":{"gitID":"yungyung04"},"content":"                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(("},{"lineNumber":26,"author":{"gitID":"yungyung04"},"content":"                            (Tutee) person).getGrade().toString(), keyword));"},{"lineNumber":27,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":33,"author":{"gitID":"yungyung04"},"content":"                || (other instanceof GradeContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":34,"author":{"gitID":"yungyung04"},"content":"                \u0026\u0026 this.keywords.equals(((GradeContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":35,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"yungyung04"},"content":"}"}],"authorContributionMap":{"yungyung04":26,"-":10}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":13,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":15,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":23,"author":{"gitID":"a-shakra"},"content":"    //@@author a-shakra"},{"lineNumber":24,"author":{"gitID":"a-shakra"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"a-shakra"},"content":"     * Returns an unmodifiable view of the tasks list"},{"lineNumber":26,"author":{"gitID":"a-shakra"},"content":"     * This list will not contain any duplicate task"},{"lineNumber":27,"author":{"gitID":"a-shakra"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"a-shakra"},"content":"    ObservableList\u003cTask\u003e getTaskList();"},{"lineNumber":29,"author":{"gitID":"a-shakra"},"content":"    //@@author"},{"lineNumber":30,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"a-shakra":7,"-":23}},{"path":"src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public boolean test(Person person) {"},{"lineNumber":20,"author":{"gitID":"yungyung04"},"content":"        return keywords.stream()"},{"lineNumber":21,"author":{"gitID":"yungyung04"},"content":"            .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":27,"author":{"gitID":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":28,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yungyung04":2,"-":29}},{"path":"src/main/java/seedu/address/model/tutee/Tutee.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tutee;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"ChoChihTun"},"content":"//@@author ChoChihTun"},{"lineNumber":15,"author":{"gitID":"ChoChihTun"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"ChoChihTun"},"content":" * Represents a tutee in the address book."},{"lineNumber":17,"author":{"gitID":"ChoChihTun"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":18,"author":{"gitID":"ChoChihTun"},"content":" */"},{"lineNumber":19,"author":{"gitID":"ChoChihTun"},"content":"public class Tutee extends Person {"},{"lineNumber":20,"author":{"gitID":"ChoChihTun"},"content":"    private static final String TUTEE_TAG_NAME \u003d \"Tutee\";"},{"lineNumber":21,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":22,"author":{"gitID":"ChoChihTun"},"content":"    private Subject subject;"},{"lineNumber":23,"author":{"gitID":"ChoChihTun"},"content":"    private Grade grade;"},{"lineNumber":24,"author":{"gitID":"ChoChihTun"},"content":"    private EducationLevel educationLevel;"},{"lineNumber":25,"author":{"gitID":"ChoChihTun"},"content":"    private School school;"},{"lineNumber":26,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":27,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"ChoChihTun"},"content":"     * Every field must be present and not null."},{"lineNumber":29,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"ChoChihTun"},"content":"    public Tutee(Name name, Phone phone, Email email, Address address, Subject subject,"},{"lineNumber":31,"author":{"gitID":"ChoChihTun"},"content":"                 Grade grade, EducationLevel educationLevel, School school, Set\u003cTag\u003e tags) {"},{"lineNumber":32,"author":{"gitID":"ChoChihTun"},"content":"        super(name, phone, email, address, tags);"},{"lineNumber":33,"author":{"gitID":"ChoChihTun"},"content":"        this.subject \u003d subject;"},{"lineNumber":34,"author":{"gitID":"ChoChihTun"},"content":"        this.grade \u003d grade;"},{"lineNumber":35,"author":{"gitID":"ChoChihTun"},"content":"        this.educationLevel \u003d educationLevel;"},{"lineNumber":36,"author":{"gitID":"ChoChihTun"},"content":"        this.school \u003d school;"},{"lineNumber":37,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":38,"author":{"gitID":"ChoChihTun"},"content":"        // Creates a \"Tutee\" tag to represent a tutee"},{"lineNumber":39,"author":{"gitID":"ChoChihTun"},"content":"        Tag tuteeTag \u003d new Tag(TUTEE_TAG_NAME);"},{"lineNumber":40,"author":{"gitID":"ChoChihTun"},"content":"        if (!this.tags.contains(tuteeTag)) {"},{"lineNumber":41,"author":{"gitID":"ChoChihTun"},"content":"            try {"},{"lineNumber":42,"author":{"gitID":"ChoChihTun"},"content":"                this.tags.add(tuteeTag);"},{"lineNumber":43,"author":{"gitID":"ChoChihTun"},"content":"            } catch (UniqueTagList.DuplicateTagException e) {"},{"lineNumber":44,"author":{"gitID":"ChoChihTun"},"content":"                // Should not have duplicate tutee tag"},{"lineNumber":45,"author":{"gitID":"ChoChihTun"},"content":"                assert (false);"},{"lineNumber":46,"author":{"gitID":"ChoChihTun"},"content":"            }"},{"lineNumber":47,"author":{"gitID":"ChoChihTun"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":50,"author":{"gitID":"ChoChihTun"},"content":"    public Subject getSubject() {"},{"lineNumber":51,"author":{"gitID":"ChoChihTun"},"content":"        return subject;"},{"lineNumber":52,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":54,"author":{"gitID":"ChoChihTun"},"content":"    public Grade getGrade() {"},{"lineNumber":55,"author":{"gitID":"ChoChihTun"},"content":"        return grade;"},{"lineNumber":56,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":58,"author":{"gitID":"ChoChihTun"},"content":"    public EducationLevel getEducationLevel() {"},{"lineNumber":59,"author":{"gitID":"ChoChihTun"},"content":"        return educationLevel;"},{"lineNumber":60,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":62,"author":{"gitID":"ChoChihTun"},"content":"    public School getSchool() {"},{"lineNumber":63,"author":{"gitID":"ChoChihTun"},"content":"        return school;"},{"lineNumber":64,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":66,"author":{"gitID":"ChoChihTun"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"ChoChihTun"},"content":"    public boolean equals(Object other) {"},{"lineNumber":68,"author":{"gitID":"ChoChihTun"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":69,"author":{"gitID":"ChoChihTun"},"content":"            return true;"},{"lineNumber":70,"author":{"gitID":"ChoChihTun"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":72,"author":{"gitID":"ChoChihTun"},"content":"        if (!(other instanceof Tutee)) {"},{"lineNumber":73,"author":{"gitID":"ChoChihTun"},"content":"            return false;"},{"lineNumber":74,"author":{"gitID":"ChoChihTun"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":76,"author":{"gitID":"ChoChihTun"},"content":"        Tutee otherPerson \u003d (Tutee) other;"},{"lineNumber":77,"author":{"gitID":"ChoChihTun"},"content":"        return otherPerson.getName().equals(this.getName())"},{"lineNumber":78,"author":{"gitID":"ChoChihTun"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"},{"lineNumber":79,"author":{"gitID":"ChoChihTun"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"},{"lineNumber":80,"author":{"gitID":"ChoChihTun"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress())"},{"lineNumber":81,"author":{"gitID":"ChoChihTun"},"content":"                \u0026\u0026 otherPerson.getEducationLevel().equals(this.getEducationLevel())"},{"lineNumber":82,"author":{"gitID":"ChoChihTun"},"content":"                \u0026\u0026 otherPerson.getGrade().equals(this.getGrade())"},{"lineNumber":83,"author":{"gitID":"ChoChihTun"},"content":"                \u0026\u0026 otherPerson.getSchool().equals(this.getSchool())"},{"lineNumber":84,"author":{"gitID":"ChoChihTun"},"content":"                \u0026\u0026 otherPerson.getSubject().equals(this.getSubject());"},{"lineNumber":85,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":87,"author":{"gitID":"ChoChihTun"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"ChoChihTun"},"content":"    public int hashCode() {"},{"lineNumber":89,"author":{"gitID":"ChoChihTun"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":90,"author":{"gitID":"ChoChihTun"},"content":"        return Objects.hash(name, phone, email, address, subject, grade, educationLevel, school, tags);"},{"lineNumber":91,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":93,"author":{"gitID":"ChoChihTun"},"content":"    @Override"},{"lineNumber":94,"author":{"gitID":"ChoChihTun"},"content":"    public String toString() {"},{"lineNumber":95,"author":{"gitID":"ChoChihTun"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":96,"author":{"gitID":"ChoChihTun"},"content":"        builder.append(getName())"},{"lineNumber":97,"author":{"gitID":"ChoChihTun"},"content":"                .append(\" Phone: \")"},{"lineNumber":98,"author":{"gitID":"ChoChihTun"},"content":"                .append(getPhone())"},{"lineNumber":99,"author":{"gitID":"ChoChihTun"},"content":"                .append(\" Email: \")"},{"lineNumber":100,"author":{"gitID":"ChoChihTun"},"content":"                .append(getEmail())"},{"lineNumber":101,"author":{"gitID":"ChoChihTun"},"content":"                .append(\" Address: \")"},{"lineNumber":102,"author":{"gitID":"ChoChihTun"},"content":"                .append(getAddress())"},{"lineNumber":103,"author":{"gitID":"ChoChihTun"},"content":"                .append(\" Subject: \")"},{"lineNumber":104,"author":{"gitID":"ChoChihTun"},"content":"                .append(getSubject())"},{"lineNumber":105,"author":{"gitID":"ChoChihTun"},"content":"                .append(\" Grade \")"},{"lineNumber":106,"author":{"gitID":"ChoChihTun"},"content":"                .append(getGrade())"},{"lineNumber":107,"author":{"gitID":"ChoChihTun"},"content":"                .append(\" Education Level: \")"},{"lineNumber":108,"author":{"gitID":"ChoChihTun"},"content":"                .append(getEducationLevel())"},{"lineNumber":109,"author":{"gitID":"ChoChihTun"},"content":"                .append(\" School: \")"},{"lineNumber":110,"author":{"gitID":"ChoChihTun"},"content":"                .append(getSchool())"},{"lineNumber":111,"author":{"gitID":"ChoChihTun"},"content":"                .append(\" Tags: \");"},{"lineNumber":112,"author":{"gitID":"ChoChihTun"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":113,"author":{"gitID":"ChoChihTun"},"content":"        return builder.toString();"},{"lineNumber":114,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":116,"author":{"gitID":"ChoChihTun"},"content":"}"}],"authorContributionMap":{"ChoChihTun":104,"-":12}},{"path":"src/main/java/seedu/address/model/task/exceptions/TaskNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"yungyung04"},"content":"package seedu.address.model.task.exceptions;"},{"lineNumber":2,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":3,"author":{"gitID":"yungyung04"},"content":"//@@author yungyung04"},{"lineNumber":4,"author":{"gitID":"yungyung04"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"yungyung04"},"content":" * Signals that the operation is unable to find the specified task."},{"lineNumber":6,"author":{"gitID":"yungyung04"},"content":" */"},{"lineNumber":7,"author":{"gitID":"yungyung04"},"content":"public class TaskNotFoundException extends Exception {}"}],"authorContributionMap":{"yungyung04":7}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":20,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":21,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.model.task.exceptions.TimingClashException;"},{"lineNumber":22,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.model.tutee.Tutee;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":32,"author":{"gitID":"a-shakra"},"content":"    private final UniqueTaskList tasks;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":44,"author":{"gitID":"a-shakra"},"content":"        tasks \u003d new UniqueTaskList();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"a-shakra"},"content":"    //@@author a-shakra"},{"lineNumber":68,"author":{"gitID":"a-shakra"},"content":"    public void setTasks(List\u003cTask\u003e tasks) throws TimingClashException {"},{"lineNumber":69,"author":{"gitID":"a-shakra"},"content":"        this.tasks.setTasks(tasks);"},{"lineNumber":70,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"a-shakra"},"content":"    //@@author"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":74,"author":{"gitID":"a-shakra"},"content":"     * ---Not modified for tasks yet!!!!!!"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":79,"author":{"gitID":"a-shakra"},"content":"        List\u003cTask\u003e taskList \u003d newData.getTaskList().stream().collect(Collectors.toList());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":83,"author":{"gitID":"a-shakra"},"content":"        try {"},{"lineNumber":84,"author":{"gitID":"a-shakra"},"content":"            setTasks(taskList);"},{"lineNumber":85,"author":{"gitID":"ChoChihTun"},"content":"        } catch (TimingClashException e) {"},{"lineNumber":86,"author":{"gitID":"a-shakra"},"content":"            throw new AssertionError(\"Timing Clash\");"},{"lineNumber":87,"author":{"gitID":"a-shakra"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":90,"author":{"gitID":"ChoChihTun"},"content":"            setTasks(taskList);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"},{"lineNumber":93,"author":{"gitID":"ChoChihTun"},"content":"        } catch (TimingClashException e) {"},{"lineNumber":94,"author":{"gitID":"ChoChihTun"},"content":"            throw new AssertionError(\"AddressBooks should not have clashed tasks\");"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":110,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":112,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":122,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":133,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"a-shakra"},"content":"    //@@author a-shakra"},{"lineNumber":137,"author":{"gitID":"a-shakra"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"a-shakra"},"content":"     * Adds a task to the address book."},{"lineNumber":139,"author":{"gitID":"a-shakra"},"content":"     *"},{"lineNumber":140,"author":{"gitID":"a-shakra"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"a-shakra"},"content":"    public void addTask(Task t) throws TimingClashException {"},{"lineNumber":142,"author":{"gitID":"a-shakra"},"content":"        tasks.add(t);"},{"lineNumber":143,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":145,"author":{"gitID":"a-shakra"},"content":"    //@@author"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     *  Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":148,"author":{"gitID":"-"},"content":"     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":161,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":163,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":164,"author":{"gitID":"yungyung04"},"content":"        if (person instanceof Tutee) {"},{"lineNumber":165,"author":{"gitID":"ChoChihTun"},"content":"            return new Tutee(person.getName(), person.getPhone(), person.getEmail(), person.getAddress(), ("},{"lineNumber":166,"author":{"gitID":"ChoChihTun"},"content":"                    (Tutee) person).getSubject(), ((Tutee) person).getGrade(), ("},{"lineNumber":167,"author":{"gitID":"ChoChihTun"},"content":"                    (Tutee) person).getEducationLevel(), ("},{"lineNumber":168,"author":{"gitID":"ChoChihTun"},"content":"                    (Tutee) person).getSchool(), correctTagReferences);"},{"lineNumber":169,"author":{"gitID":"yungyung04"},"content":"        } else {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            return new Person("},{"lineNumber":171,"author":{"gitID":"-"},"content":"                    person.getName(), person.getPhone(), person.getEmail(), person.getAddress(), correctTagReferences);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"yungyung04"},"content":"    //@@author yungyung04"},{"lineNumber":176,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":177,"author":{"gitID":"yungyung04"},"content":"     * Removes {@code Tag} from a particular {@code Person}."},{"lineNumber":178,"author":{"gitID":"yungyung04"},"content":"     * @throws PersonNotFoundException if {@code Person} does not exist."},{"lineNumber":179,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"yungyung04"},"content":"    public void removeTagFromPerson(Tag tag, Person person) {"},{"lineNumber":181,"author":{"gitID":"yungyung04"},"content":"        Set\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e(person.getTags());"},{"lineNumber":182,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":183,"author":{"gitID":"yungyung04"},"content":"        if (!newTags.remove(tag)) {"},{"lineNumber":184,"author":{"gitID":"yungyung04"},"content":"            return;"},{"lineNumber":185,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":187,"author":{"gitID":"yungyung04"},"content":"        if (tag.tagName.equals(\"Tutee\")) {"},{"lineNumber":188,"author":{"gitID":"yungyung04"},"content":"            return;"},{"lineNumber":189,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":190,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":191,"author":{"gitID":"yungyung04"},"content":"        Person newPerson \u003d"},{"lineNumber":192,"author":{"gitID":"yungyung04"},"content":"                new Person(person.getName(), person.getPhone(), person.getEmail(), person.getAddress(), newTags);"},{"lineNumber":193,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":194,"author":{"gitID":"yungyung04"},"content":"        try {"},{"lineNumber":195,"author":{"gitID":"yungyung04"},"content":"            updatePerson(person, newPerson);"},{"lineNumber":196,"author":{"gitID":"yungyung04"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":197,"author":{"gitID":"yungyung04"},"content":"            throw new AssertionError(\"tag modification should not cause duplicate person\");"},{"lineNumber":198,"author":{"gitID":"yungyung04"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":199,"author":{"gitID":"yungyung04"},"content":"            throw new AssertionError(\"target person does not exist.\");"},{"lineNumber":200,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"yungyung04"},"content":"    //author"},{"lineNumber":203,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":204,"author":{"gitID":"yungyung04"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":205,"author":{"gitID":"yungyung04"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":206,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":207,"author":{"gitID":"yungyung04"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":208,"author":{"gitID":"yungyung04"},"content":"        if (persons.remove(key)) {"},{"lineNumber":209,"author":{"gitID":"yungyung04"},"content":"            return true;"},{"lineNumber":210,"author":{"gitID":"yungyung04"},"content":"        } else {"},{"lineNumber":211,"author":{"gitID":"yungyung04"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":212,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":213,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":215,"author":{"gitID":"a-shakra"},"content":"    //@@author a-shakra"},{"lineNumber":216,"author":{"gitID":"a-shakra"},"content":"    /**"},{"lineNumber":217,"author":{"gitID":"a-shakra"},"content":"     * Removes a task from the address book."},{"lineNumber":218,"author":{"gitID":"a-shakra"},"content":"     *"},{"lineNumber":219,"author":{"gitID":"a-shakra"},"content":"     */"},{"lineNumber":220,"author":{"gitID":"a-shakra"},"content":"    public boolean removeTask(Task key) throws TaskNotFoundException {"},{"lineNumber":221,"author":{"gitID":"a-shakra"},"content":"        if (tasks.remove(key))        {"},{"lineNumber":222,"author":{"gitID":"a-shakra"},"content":"            return true;"},{"lineNumber":223,"author":{"gitID":"a-shakra"},"content":"        } else {"},{"lineNumber":224,"author":{"gitID":"a-shakra"},"content":"            System.out.println(\"Didn\u0027t work\");"},{"lineNumber":225,"author":{"gitID":"a-shakra"},"content":"            return false;"},{"lineNumber":226,"author":{"gitID":"a-shakra"},"content":"        }"},{"lineNumber":227,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"a-shakra"},"content":"    //@@author"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":239,"author":{"gitID":"a-shakra"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags, \""},{"lineNumber":240,"author":{"gitID":"a-shakra"},"content":"                + tasks.asObservableList().size() + \" tasks\";"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":242,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"a-shakra"},"content":"    @Override"},{"lineNumber":245,"author":{"gitID":"yungyung04"},"content":"    public ObservableList\u003cTask\u003e getTaskList() {"},{"lineNumber":246,"author":{"gitID":"yungyung04"},"content":"        return tasks.asObservableList();"},{"lineNumber":247,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":255,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":262,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":263,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":264,"author":{"gitID":"a-shakra"},"content":"                \u0026\u0026 this.tasks.equals(((AddressBook) other).tasks)"},{"lineNumber":265,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"},{"lineNumber":266,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        return Objects.hash(persons, tags);"},{"lineNumber":272,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":273,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yungyung04":48,"ChoChihTun":10,"a-shakra":42,"-":173}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"yungyung04"},"content":"import java.util.Comparator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":13,"author":{"gitID":"yungyung04"},"content":"import javafx.collections.transformation.SortedList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":20,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":21,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.model.task.exceptions.TimingClashException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":25,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":31,"author":{"gitID":"yungyung04"},"content":"    private FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":32,"author":{"gitID":"a-shakra"},"content":"    private FilteredList\u003cTask\u003e filteredTasks;"},{"lineNumber":33,"author":{"gitID":"yungyung04"},"content":"    private SortedList\u003cPerson\u003e sortedPersons;"},{"lineNumber":34,"author":{"gitID":"yungyung04"},"content":"    private SortedList\u003cTask\u003e sortedTasks;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":47,"author":{"gitID":"a-shakra"},"content":"        filteredTasks \u003d new FilteredList\u003c\u003e(this.addressBook.getTaskList());"},{"lineNumber":48,"author":{"gitID":"yungyung04"},"content":"        sortedPersons \u003d new SortedList\u003c\u003e(filteredPersons);"},{"lineNumber":49,"author":{"gitID":"yungyung04"},"content":"        sortedTasks \u003d new SortedList\u003c\u003e(filteredTasks);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"a-shakra"},"content":"    //@@author a-shakra"},{"lineNumber":94,"author":{"gitID":"a-shakra"},"content":"    @Override"},{"lineNumber":95,"author":{"gitID":"a-shakra"},"content":"    public synchronized void addTask(Task aTask) throws TimingClashException {"},{"lineNumber":96,"author":{"gitID":"a-shakra"},"content":"        addressBook.addTask(aTask);"},{"lineNumber":97,"author":{"gitID":"a-shakra"},"content":"        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS); //Change to new predicate?"},{"lineNumber":98,"author":{"gitID":"a-shakra"},"content":"        indicateAddressBookChanged();"},{"lineNumber":99,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":101,"author":{"gitID":"a-shakra"},"content":"    @Override"},{"lineNumber":102,"author":{"gitID":"a-shakra"},"content":"    public synchronized void deleteTask(Task target) throws TaskNotFoundException {"},{"lineNumber":103,"author":{"gitID":"a-shakra"},"content":"        addressBook.removeTask(target);"},{"lineNumber":104,"author":{"gitID":"a-shakra"},"content":"        indicateAddressBookChanged();"},{"lineNumber":105,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":107,"author":{"gitID":"a-shakra"},"content":"    @Override"},{"lineNumber":108,"author":{"gitID":"a-shakra"},"content":"    public ObservableList\u003cTask\u003e getFilteredTaskList() {"},{"lineNumber":109,"author":{"gitID":"a-shakra"},"content":"        return FXCollections.unmodifiableObservableList(sortedTasks);"},{"lineNumber":110,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":112,"author":{"gitID":"a-shakra"},"content":"    @Override"},{"lineNumber":113,"author":{"gitID":"a-shakra"},"content":"    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"},{"lineNumber":114,"author":{"gitID":"a-shakra"},"content":"        requireNonNull(predicate);"},{"lineNumber":115,"author":{"gitID":"a-shakra"},"content":"        filteredTasks.setPredicate(predicate);"},{"lineNumber":116,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"a-shakra"},"content":"    //@@author"},{"lineNumber":118,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":125,"author":{"gitID":"yungyung04"},"content":"        return FXCollections.unmodifiableObservableList(sortedPersons);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"yungyung04"},"content":"    //@@author yungyung04"},{"lineNumber":135,"author":{"gitID":"yungyung04"},"content":"    @Override"},{"lineNumber":136,"author":{"gitID":"yungyung04"},"content":"    public void sortFilteredPersonList(Comparator\u003cPerson\u003e comparator) {"},{"lineNumber":137,"author":{"gitID":"yungyung04"},"content":"        sortedPersons.setComparator(comparator);"},{"lineNumber":138,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":140,"author":{"gitID":"yungyung04"},"content":"    @Override"},{"lineNumber":141,"author":{"gitID":"yungyung04"},"content":"    public void sortFilteredTaskList(Comparator\u003cTask\u003e comparator) {"},{"lineNumber":142,"author":{"gitID":"yungyung04"},"content":"        sortedTasks.setComparator(comparator);"},{"lineNumber":143,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":145,"author":{"gitID":"yungyung04"},"content":"    //@@author"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":162,"author":{"gitID":"a-shakra"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"},{"lineNumber":163,"author":{"gitID":"yungyung04"},"content":"                \u0026\u0026 filteredTasks.equals(other.filteredTasks)"},{"lineNumber":164,"author":{"gitID":"yungyung04"},"content":"                \u0026\u0026 sortedPersons.equals(other.sortedPersons)"},{"lineNumber":165,"author":{"gitID":"yungyung04"},"content":"                \u0026\u0026 sortedTasks.equals(other.sortedTasks);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yungyung04":25,"ChoChihTun":1,"a-shakra":29,"-":112}},{"path":"src/main/java/seedu/address/model/Task.java","lines":[{"lineNumber":1,"author":{"gitID":"ChoChihTun"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":3,"author":{"gitID":"ChoChihTun"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":5,"author":{"gitID":"ChoChihTun"},"content":"import com.calendarfx.model.Entry;"},{"lineNumber":6,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":7,"author":{"gitID":"ChoChihTun"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"ChoChihTun"},"content":" * Represents a task that person has"},{"lineNumber":9,"author":{"gitID":"ChoChihTun"},"content":" */"},{"lineNumber":10,"author":{"gitID":"ChoChihTun"},"content":"public interface Task {"},{"lineNumber":11,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":12,"author":{"gitID":"ChoChihTun"},"content":"    String MESSAGE_DESCRIPTION_CONSTRAINTS \u003d \"Tasks Should have a non-empty description\";"},{"lineNumber":13,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":14,"author":{"gitID":"ChoChihTun"},"content":"    String MESSAGE_DURATION_CONSTRAINTS \u003d \"Duration must be a non-null value\";"},{"lineNumber":15,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":16,"author":{"gitID":"ChoChihTun"},"content":"    String MESSAGE_DATETIME_CONSTRAINTS \u003d \"Date and time must be a non-null value\";"},{"lineNumber":17,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":18,"author":{"gitID":"ChoChihTun"},"content":"    LocalDateTime getTaskDateTime();"},{"lineNumber":19,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":20,"author":{"gitID":"yungyung04"},"content":"    String getStringTaskDateTime();"},{"lineNumber":21,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":22,"author":{"gitID":"ChoChihTun"},"content":"    String getDescription();"},{"lineNumber":23,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":24,"author":{"gitID":"ChoChihTun"},"content":"    String getDuration();"},{"lineNumber":25,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":26,"author":{"gitID":"ChoChihTun"},"content":"    Entry getEntry();"},{"lineNumber":27,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":28,"author":{"gitID":"a-shakra"},"content":"    boolean equals(Object two);"},{"lineNumber":29,"author":{"gitID":"ChoChihTun"},"content":"}"}],"authorContributionMap":{"ChoChihTun":22,"yungyung04":2,"a-shakra":5}},{"path":"src/main/java/seedu/address/model/task/exceptions/TimingClashException.java","lines":[{"lineNumber":1,"author":{"gitID":"ChoChihTun"},"content":"package seedu.address.model.task.exceptions;"},{"lineNumber":2,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":3,"author":{"gitID":"yungyung04"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_TASK_TIMING_CLASHES;"},{"lineNumber":4,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":5,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":6,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":7,"author":{"gitID":"ChoChihTun"},"content":"//@@author ChoChihTun"},{"lineNumber":8,"author":{"gitID":"ChoChihTun"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"ChoChihTun"},"content":" * Signals that there is a clash of timing in the schedule or there is a duplicate task"},{"lineNumber":10,"author":{"gitID":"ChoChihTun"},"content":" */"},{"lineNumber":11,"author":{"gitID":"ChoChihTun"},"content":"public class TimingClashException extends DuplicateDataException {"},{"lineNumber":12,"author":{"gitID":"ChoChihTun"},"content":"    public TimingClashException() {"},{"lineNumber":13,"author":{"gitID":"ChoChihTun"},"content":"        super(MESSAGE_TASK_TIMING_CLASHES);"},{"lineNumber":14,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"ChoChihTun"},"content":"}"}],"authorContributionMap":{"ChoChihTun":14,"yungyung04":1}},{"path":"src/main/java/seedu/address/model/person/PersonSortUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"yungyung04"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":3,"author":{"gitID":"yungyung04"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":5,"author":{"gitID":"yungyung04"},"content":"import java.util.Comparator;"},{"lineNumber":6,"author":{"gitID":"yungyung04"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":8,"author":{"gitID":"yungyung04"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":9,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.tutee.Tutee;"},{"lineNumber":10,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":11,"author":{"gitID":"yungyung04"},"content":"//@@author yungyung04"},{"lineNumber":12,"author":{"gitID":"yungyung04"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"yungyung04"},"content":" * Provides utilities for sorting a list of Persons."},{"lineNumber":14,"author":{"gitID":"yungyung04"},"content":" */"},{"lineNumber":15,"author":{"gitID":"yungyung04"},"content":"public class PersonSortUtil {"},{"lineNumber":16,"author":{"gitID":"yungyung04"},"content":"    public static final String CATEGORY_NAME \u003d \"name\";"},{"lineNumber":17,"author":{"gitID":"yungyung04"},"content":"    public static final String CATEGORY_EDUCATION_LEVEL \u003d \"edu\";"},{"lineNumber":18,"author":{"gitID":"yungyung04"},"content":"    public static final String CATEGORY_GRADE \u003d \"grade\";"},{"lineNumber":19,"author":{"gitID":"yungyung04"},"content":"    public static final String CATEGORY_SCHOOL \u003d \"school\";"},{"lineNumber":20,"author":{"gitID":"yungyung04"},"content":"    public static final String CATEGORY_SUBJECT \u003d \"subject\";"},{"lineNumber":21,"author":{"gitID":"yungyung04"},"content":"    public static final int NEGATIVE_DIGIT \u003d -1;"},{"lineNumber":22,"author":{"gitID":"yungyung04"},"content":"    public static final int POSITIVE_DIGIT \u003d 1;"},{"lineNumber":23,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":24,"author":{"gitID":"yungyung04"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(PersonSortUtil.class);"},{"lineNumber":25,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":26,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"yungyung04"},"content":"     * Returns the appropriate Person comparator given the sorting category."},{"lineNumber":28,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"yungyung04"},"content":"    public static Comparator\u003cPerson\u003e getComparator(String sortCategory) {"},{"lineNumber":30,"author":{"gitID":"yungyung04"},"content":"        requireNonNull(sortCategory);"},{"lineNumber":31,"author":{"gitID":"yungyung04"},"content":"        Comparator\u003cPerson\u003e comparator \u003d null;"},{"lineNumber":32,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":33,"author":{"gitID":"yungyung04"},"content":"        switch (sortCategory) {"},{"lineNumber":34,"author":{"gitID":"yungyung04"},"content":"        case CATEGORY_NAME:"},{"lineNumber":35,"author":{"gitID":"yungyung04"},"content":"            comparator \u003d getNameComparator();"},{"lineNumber":36,"author":{"gitID":"yungyung04"},"content":"            break;"},{"lineNumber":37,"author":{"gitID":"yungyung04"},"content":"        case CATEGORY_EDUCATION_LEVEL:"},{"lineNumber":38,"author":{"gitID":"yungyung04"},"content":"            comparator \u003d getEducationLevelComparator();"},{"lineNumber":39,"author":{"gitID":"yungyung04"},"content":"            break;"},{"lineNumber":40,"author":{"gitID":"yungyung04"},"content":"        case CATEGORY_GRADE:"},{"lineNumber":41,"author":{"gitID":"yungyung04"},"content":"            comparator \u003d getGradeComparator();"},{"lineNumber":42,"author":{"gitID":"yungyung04"},"content":"            break;"},{"lineNumber":43,"author":{"gitID":"yungyung04"},"content":"        case CATEGORY_SCHOOL:"},{"lineNumber":44,"author":{"gitID":"yungyung04"},"content":"            comparator \u003d getSchoolComparator();"},{"lineNumber":45,"author":{"gitID":"yungyung04"},"content":"            break;"},{"lineNumber":46,"author":{"gitID":"yungyung04"},"content":"        case CATEGORY_SUBJECT:"},{"lineNumber":47,"author":{"gitID":"yungyung04"},"content":"            comparator \u003d getSubjectComparator();"},{"lineNumber":48,"author":{"gitID":"yungyung04"},"content":"            break;"},{"lineNumber":49,"author":{"gitID":"yungyung04"},"content":"        default:"},{"lineNumber":50,"author":{"gitID":"yungyung04"},"content":"            logger.severe(\"an invalid category is identified in PersonSortUtil class.\");"},{"lineNumber":51,"author":{"gitID":"yungyung04"},"content":"            assert (false); //invalid sortCategory should be identified in parser."},{"lineNumber":52,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"yungyung04"},"content":"        return comparator;"},{"lineNumber":54,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":56,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"yungyung04"},"content":"     * Returns a comparator which is useful to sort education level of a Tutee in an increasing lexicographical order.."},{"lineNumber":58,"author":{"gitID":"yungyung04"},"content":"     * Non tutees are listed last according to their names in an increasing lexicographical order."},{"lineNumber":59,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"yungyung04"},"content":"    private static Comparator\u003cPerson\u003e getEducationLevelComparator() {"},{"lineNumber":61,"author":{"gitID":"yungyung04"},"content":"        return new Comparator\u003cPerson\u003e() {"},{"lineNumber":62,"author":{"gitID":"yungyung04"},"content":"            @Override"},{"lineNumber":63,"author":{"gitID":"yungyung04"},"content":"            public int compare(Person person1, Person person2) {"},{"lineNumber":64,"author":{"gitID":"yungyung04"},"content":"                int result \u003d 0; //value will be replaced"},{"lineNumber":65,"author":{"gitID":"yungyung04"},"content":"                if (areBothTutees(person1, person2)) {"},{"lineNumber":66,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":67,"author":{"gitID":"yungyung04"},"content":"                    String personEducationLevel1 \u003d ((Tutee) person1).getEducationLevel().toString();"},{"lineNumber":68,"author":{"gitID":"yungyung04"},"content":"                    String personEducationLevel2 \u003d ((Tutee) person2).getEducationLevel().toString();"},{"lineNumber":69,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":70,"author":{"gitID":"yungyung04"},"content":"                    result \u003d personEducationLevel1.compareToIgnoreCase(personEducationLevel2);"},{"lineNumber":71,"author":{"gitID":"yungyung04"},"content":"                } else if (isFirstTutee(person1, person2)) {"},{"lineNumber":72,"author":{"gitID":"yungyung04"},"content":"                    result \u003d NEGATIVE_DIGIT;"},{"lineNumber":73,"author":{"gitID":"yungyung04"},"content":"                } else if (isSecondTutee(person1, person2)) {"},{"lineNumber":74,"author":{"gitID":"yungyung04"},"content":"                    result \u003d POSITIVE_DIGIT;"},{"lineNumber":75,"author":{"gitID":"yungyung04"},"content":"                } else if (areNotTutees(person1, person2)) {"},{"lineNumber":76,"author":{"gitID":"yungyung04"},"content":"                    result \u003d compareNameLexicographically(person1, person2);"},{"lineNumber":77,"author":{"gitID":"yungyung04"},"content":"                } else {"},{"lineNumber":78,"author":{"gitID":"yungyung04"},"content":"                    assert (false); //should never reach this statement -\u003e works as safety measure"},{"lineNumber":79,"author":{"gitID":"yungyung04"},"content":"                }"},{"lineNumber":80,"author":{"gitID":"yungyung04"},"content":"                return result;"},{"lineNumber":81,"author":{"gitID":"yungyung04"},"content":"            }"},{"lineNumber":82,"author":{"gitID":"yungyung04"},"content":"        };"},{"lineNumber":83,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":85,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"yungyung04"},"content":"     * Returns a comparator which is useful to sort grade Tutees in an increasing lexicographical order.."},{"lineNumber":87,"author":{"gitID":"yungyung04"},"content":"     * Non tutees are listed last according to their names in an increasing lexicographical order."},{"lineNumber":88,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"yungyung04"},"content":"    private static Comparator\u003cPerson\u003e getGradeComparator() {"},{"lineNumber":90,"author":{"gitID":"yungyung04"},"content":"        return new Comparator\u003cPerson\u003e() {"},{"lineNumber":91,"author":{"gitID":"yungyung04"},"content":"            @Override"},{"lineNumber":92,"author":{"gitID":"yungyung04"},"content":"            public int compare(Person person1, Person person2) {"},{"lineNumber":93,"author":{"gitID":"yungyung04"},"content":"                int result \u003d 0; //value will be replaced"},{"lineNumber":94,"author":{"gitID":"yungyung04"},"content":"                if (areBothTutees(person1, person2)) {"},{"lineNumber":95,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":96,"author":{"gitID":"yungyung04"},"content":"                    String personGrade1 \u003d ((Tutee) person1).getGrade().toString();"},{"lineNumber":97,"author":{"gitID":"yungyung04"},"content":"                    String personGrade2 \u003d ((Tutee) person2).getGrade().toString();"},{"lineNumber":98,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":99,"author":{"gitID":"yungyung04"},"content":"                    result \u003d personGrade1.compareToIgnoreCase(personGrade2);"},{"lineNumber":100,"author":{"gitID":"yungyung04"},"content":"                } else if (isFirstTutee(person1, person2)) {"},{"lineNumber":101,"author":{"gitID":"yungyung04"},"content":"                    result \u003d NEGATIVE_DIGIT;"},{"lineNumber":102,"author":{"gitID":"yungyung04"},"content":"                } else if (isSecondTutee(person1, person2)) {"},{"lineNumber":103,"author":{"gitID":"yungyung04"},"content":"                    result \u003d POSITIVE_DIGIT;"},{"lineNumber":104,"author":{"gitID":"yungyung04"},"content":"                } else if (areNotTutees(person1, person2)) {"},{"lineNumber":105,"author":{"gitID":"yungyung04"},"content":"                    result \u003d compareNameLexicographically(person1, person2);"},{"lineNumber":106,"author":{"gitID":"yungyung04"},"content":"                } else {"},{"lineNumber":107,"author":{"gitID":"yungyung04"},"content":"                    assert (false); //should never reach this statement"},{"lineNumber":108,"author":{"gitID":"yungyung04"},"content":"                }"},{"lineNumber":109,"author":{"gitID":"yungyung04"},"content":"                return result;"},{"lineNumber":110,"author":{"gitID":"yungyung04"},"content":"            }"},{"lineNumber":111,"author":{"gitID":"yungyung04"},"content":"        };"},{"lineNumber":112,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":114,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"yungyung04"},"content":"     * Returns a comparator which is useful to sort school of Tutees in an increasing lexicographical order."},{"lineNumber":116,"author":{"gitID":"yungyung04"},"content":"     * Non tutees are listed last according to their names in an increasing lexicographical order."},{"lineNumber":117,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"yungyung04"},"content":"    private static Comparator\u003cPerson\u003e getSchoolComparator() {"},{"lineNumber":119,"author":{"gitID":"yungyung04"},"content":"        return new Comparator\u003cPerson\u003e() {"},{"lineNumber":120,"author":{"gitID":"yungyung04"},"content":"            @Override"},{"lineNumber":121,"author":{"gitID":"yungyung04"},"content":"            public int compare(Person person1, Person person2) {"},{"lineNumber":122,"author":{"gitID":"yungyung04"},"content":"                int result \u003d 0; //value will be replaced"},{"lineNumber":123,"author":{"gitID":"yungyung04"},"content":"                if (areBothTutees(person1, person2)) {"},{"lineNumber":124,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":125,"author":{"gitID":"yungyung04"},"content":"                    String personSchool1 \u003d ((Tutee) person1).getSchool().toString();"},{"lineNumber":126,"author":{"gitID":"yungyung04"},"content":"                    String personSchool2 \u003d ((Tutee) person2).getSchool().toString();"},{"lineNumber":127,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":128,"author":{"gitID":"yungyung04"},"content":"                    result \u003d personSchool1.compareToIgnoreCase(personSchool2);"},{"lineNumber":129,"author":{"gitID":"yungyung04"},"content":"                } else if (isFirstTutee(person1, person2)) {"},{"lineNumber":130,"author":{"gitID":"yungyung04"},"content":"                    result \u003d NEGATIVE_DIGIT;"},{"lineNumber":131,"author":{"gitID":"yungyung04"},"content":"                } else if (isSecondTutee(person1, person2)) {"},{"lineNumber":132,"author":{"gitID":"yungyung04"},"content":"                    result \u003d POSITIVE_DIGIT;"},{"lineNumber":133,"author":{"gitID":"yungyung04"},"content":"                } else if (areNotTutees(person1, person2)) {"},{"lineNumber":134,"author":{"gitID":"yungyung04"},"content":"                    result \u003d compareNameLexicographically(person1, person2);"},{"lineNumber":135,"author":{"gitID":"yungyung04"},"content":"                } else {"},{"lineNumber":136,"author":{"gitID":"yungyung04"},"content":"                    assert (false); //should never reach this statement"},{"lineNumber":137,"author":{"gitID":"yungyung04"},"content":"                }"},{"lineNumber":138,"author":{"gitID":"yungyung04"},"content":"                return result;"},{"lineNumber":139,"author":{"gitID":"yungyung04"},"content":"            }"},{"lineNumber":140,"author":{"gitID":"yungyung04"},"content":"        };"},{"lineNumber":141,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":143,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"yungyung04"},"content":"     * Returns a comparator which is useful to sort subject of Tutees in an increasing lexicographical order."},{"lineNumber":145,"author":{"gitID":"yungyung04"},"content":"     * Non tutees are listed last according to their names in an increasing lexicographical order."},{"lineNumber":146,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"yungyung04"},"content":"    private static Comparator\u003cPerson\u003e getSubjectComparator() {"},{"lineNumber":148,"author":{"gitID":"yungyung04"},"content":"        return new Comparator\u003cPerson\u003e() {"},{"lineNumber":149,"author":{"gitID":"yungyung04"},"content":"            @Override"},{"lineNumber":150,"author":{"gitID":"yungyung04"},"content":"            public int compare(Person person1, Person person2) {"},{"lineNumber":151,"author":{"gitID":"yungyung04"},"content":"                int result \u003d 0; //value will be replaced"},{"lineNumber":152,"author":{"gitID":"yungyung04"},"content":"                if (areBothTutees(person1, person2)) {"},{"lineNumber":153,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":154,"author":{"gitID":"yungyung04"},"content":"                    String personSubject1 \u003d ((Tutee) person1).getSubject().toString();"},{"lineNumber":155,"author":{"gitID":"yungyung04"},"content":"                    String personSubject2 \u003d ((Tutee) person2).getSubject().toString();"},{"lineNumber":156,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":157,"author":{"gitID":"yungyung04"},"content":"                    result \u003d personSubject1.compareToIgnoreCase(personSubject2);"},{"lineNumber":158,"author":{"gitID":"yungyung04"},"content":"                } else if (isFirstTutee(person1, person2)) {"},{"lineNumber":159,"author":{"gitID":"yungyung04"},"content":"                    result \u003d NEGATIVE_DIGIT;"},{"lineNumber":160,"author":{"gitID":"yungyung04"},"content":"                } else if (isSecondTutee(person1, person2)) {"},{"lineNumber":161,"author":{"gitID":"yungyung04"},"content":"                    result \u003d POSITIVE_DIGIT;"},{"lineNumber":162,"author":{"gitID":"yungyung04"},"content":"                } else if (areNotTutees(person1, person2)) {"},{"lineNumber":163,"author":{"gitID":"yungyung04"},"content":"                    result \u003d compareNameLexicographically(person1, person2);"},{"lineNumber":164,"author":{"gitID":"yungyung04"},"content":"                } else {"},{"lineNumber":165,"author":{"gitID":"yungyung04"},"content":"                    assert (false); //should never reach this statement"},{"lineNumber":166,"author":{"gitID":"yungyung04"},"content":"                }"},{"lineNumber":167,"author":{"gitID":"yungyung04"},"content":"                return result;"},{"lineNumber":168,"author":{"gitID":"yungyung04"},"content":"            }"},{"lineNumber":169,"author":{"gitID":"yungyung04"},"content":"        };"},{"lineNumber":170,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":172,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"yungyung04"},"content":"     * Returns a comparator which is useful to sort name of Persons in an increasing lexicographical order."},{"lineNumber":174,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":175,"author":{"gitID":"yungyung04"},"content":"    private static Comparator\u003cPerson\u003e getNameComparator() {"},{"lineNumber":176,"author":{"gitID":"yungyung04"},"content":"        return new Comparator\u003cPerson\u003e() {"},{"lineNumber":177,"author":{"gitID":"yungyung04"},"content":"            @Override"},{"lineNumber":178,"author":{"gitID":"yungyung04"},"content":"            public int compare(Person person1, Person person2) {"},{"lineNumber":179,"author":{"gitID":"yungyung04"},"content":"                return compareNameLexicographically(person1, person2);"},{"lineNumber":180,"author":{"gitID":"yungyung04"},"content":"            }"},{"lineNumber":181,"author":{"gitID":"yungyung04"},"content":"        };"},{"lineNumber":182,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":184,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":185,"author":{"gitID":"yungyung04"},"content":"     * Returns true if both the given {@code Person} are subclass of {@code Tutee}"},{"lineNumber":186,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":187,"author":{"gitID":"yungyung04"},"content":"    private static boolean areNotTutees(Person person1, Person person2) {"},{"lineNumber":188,"author":{"gitID":"yungyung04"},"content":"        return !(person1 instanceof Tutee || person2 instanceof Tutee);"},{"lineNumber":189,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":191,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":192,"author":{"gitID":"yungyung04"},"content":"     * Returns true if the given {@code person1} is the only subclass of {@code Tutee}"},{"lineNumber":193,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":194,"author":{"gitID":"yungyung04"},"content":"    private static boolean isSecondTutee(Person person1, Person person2) {"},{"lineNumber":195,"author":{"gitID":"yungyung04"},"content":"        return !(person1 instanceof Tutee) \u0026\u0026 person2 instanceof Tutee;"},{"lineNumber":196,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":198,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":199,"author":{"gitID":"yungyung04"},"content":"     * Returns true if the given {@code person2} is the only subclass of {@code Tutee}"},{"lineNumber":200,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":201,"author":{"gitID":"yungyung04"},"content":"    private static boolean isFirstTutee(Person person1, Person person2) {"},{"lineNumber":202,"author":{"gitID":"yungyung04"},"content":"        return person1 instanceof Tutee \u0026\u0026 !(person2 instanceof Tutee);"},{"lineNumber":203,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":205,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":206,"author":{"gitID":"yungyung04"},"content":"     * Returns true if both the given {@code Person} are not subclass of {@code Tutee}"},{"lineNumber":207,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":208,"author":{"gitID":"yungyung04"},"content":"    private static boolean areBothTutees(Person person1, Person person2) {"},{"lineNumber":209,"author":{"gitID":"yungyung04"},"content":"        return person1 instanceof Tutee \u0026\u0026 person2 instanceof Tutee;"},{"lineNumber":210,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":212,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":213,"author":{"gitID":"yungyung04"},"content":"     * Compares the name of 2 given persons and returns an integer according to their lexicographical relationn"},{"lineNumber":214,"author":{"gitID":"yungyung04"},"content":"     * Integer returned follows the behaviour of {@code compareTo} in Java.lang.String"},{"lineNumber":215,"author":{"gitID":"yungyung04"},"content":"     *"},{"lineNumber":216,"author":{"gitID":"yungyung04"},"content":"     * @param person1 first person to be compared"},{"lineNumber":217,"author":{"gitID":"yungyung04"},"content":"     * @param person2 second person to be compared"},{"lineNumber":218,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":219,"author":{"gitID":"yungyung04"},"content":"    public static int compareNameLexicographically(Person person1, Person person2) {"},{"lineNumber":220,"author":{"gitID":"yungyung04"},"content":"        String personName1 \u003d person1.getName().toString();"},{"lineNumber":221,"author":{"gitID":"yungyung04"},"content":"        String personName2 \u003d person2.getName().toString();"},{"lineNumber":222,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":223,"author":{"gitID":"yungyung04"},"content":"        return personName1.compareToIgnoreCase(personName2);"},{"lineNumber":224,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"yungyung04"},"content":"}"}],"authorContributionMap":{"yungyung04":225}},{"path":"src/main/java/seedu/address/model/UniqueTaskList.java","lines":[{"lineNumber":1,"author":{"gitID":"a-shakra"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"ChoChihTun"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitID":"a-shakra"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"a-shakra"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":13,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.model.task.exceptions.TimingClashException;"},{"lineNumber":14,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":15,"author":{"gitID":"a-shakra"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"a-shakra"},"content":" * A list of tasks that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":17,"author":{"gitID":"a-shakra"},"content":" *"},{"lineNumber":18,"author":{"gitID":"a-shakra"},"content":" * Supports a minimal set of list operations."},{"lineNumber":19,"author":{"gitID":"a-shakra"},"content":" *"},{"lineNumber":20,"author":{"gitID":"a-shakra"},"content":" */"},{"lineNumber":21,"author":{"gitID":"a-shakra"},"content":"//@@author a-shakra"},{"lineNumber":22,"author":{"gitID":"a-shakra"},"content":"public class UniqueTaskList implements Iterable\u003cTask\u003e {"},{"lineNumber":23,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":24,"author":{"gitID":"a-shakra"},"content":"    private static final String HOUR_DELIMITER \u003d \"h\";"},{"lineNumber":25,"author":{"gitID":"a-shakra"},"content":"    private static final String MINUTE_DELIMITER \u003d \"m\";"},{"lineNumber":26,"author":{"gitID":"a-shakra"},"content":"    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":27,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":28,"author":{"gitID":"a-shakra"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"a-shakra"},"content":"     * Constructs empty TaskList."},{"lineNumber":30,"author":{"gitID":"a-shakra"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"a-shakra"},"content":"    public UniqueTaskList() {}"},{"lineNumber":32,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":33,"author":{"gitID":"ChoChihTun"},"content":"    //@@author ChoChihTun"},{"lineNumber":34,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"ChoChihTun"},"content":"     * Adds a task to the list."},{"lineNumber":36,"author":{"gitID":"ChoChihTun"},"content":"     *"},{"lineNumber":37,"author":{"gitID":"ChoChihTun"},"content":"     * @throws TimingClashException if there is a clash in timing with an existing task"},{"lineNumber":38,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"ChoChihTun"},"content":"    public void add(Task toAdd) throws TimingClashException {"},{"lineNumber":40,"author":{"gitID":"ChoChihTun"},"content":"        requireNonNull(toAdd);"},{"lineNumber":41,"author":{"gitID":"ChoChihTun"},"content":"        if (isTimeClash(toAdd.getTaskDateTime(), toAdd.getDuration())) {"},{"lineNumber":42,"author":{"gitID":"ChoChihTun"},"content":"            throw new TimingClashException();"},{"lineNumber":43,"author":{"gitID":"ChoChihTun"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"ChoChihTun"},"content":"        internalList.add(toAdd);"},{"lineNumber":45,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":47,"author":{"gitID":"a-shakra"},"content":"    //@@author a-shakra"},{"lineNumber":48,"author":{"gitID":"a-shakra"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"a-shakra"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}."},{"lineNumber":50,"author":{"gitID":"a-shakra"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"a-shakra"},"content":"    public void setTask(Task target, Task editedTask) throws TaskNotFoundException {"},{"lineNumber":52,"author":{"gitID":"a-shakra"},"content":"        requireNonNull(editedTask);"},{"lineNumber":53,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":54,"author":{"gitID":"a-shakra"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":55,"author":{"gitID":"a-shakra"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":56,"author":{"gitID":"a-shakra"},"content":"            throw new TaskNotFoundException();"},{"lineNumber":57,"author":{"gitID":"a-shakra"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"a-shakra"},"content":"        internalList.set(index, editedTask);"},{"lineNumber":59,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":61,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":62,"author":{"gitID":"a-shakra"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"a-shakra"},"content":"     * Removes the equivalent task from the list."},{"lineNumber":64,"author":{"gitID":"a-shakra"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"a-shakra"},"content":"    public boolean remove(Task toRemove) throws TaskNotFoundException {"},{"lineNumber":66,"author":{"gitID":"a-shakra"},"content":"        requireNonNull(toRemove);"},{"lineNumber":67,"author":{"gitID":"a-shakra"},"content":"        final boolean taskFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":68,"author":{"gitID":"a-shakra"},"content":"        if (!taskFoundAndDeleted) {"},{"lineNumber":69,"author":{"gitID":"a-shakra"},"content":"            throw new TaskNotFoundException();"},{"lineNumber":70,"author":{"gitID":"a-shakra"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"a-shakra"},"content":"        return taskFoundAndDeleted;"},{"lineNumber":72,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":74,"author":{"gitID":"a-shakra"},"content":"    public void setTasks(UniqueTaskList replacement) {"},{"lineNumber":75,"author":{"gitID":"a-shakra"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":76,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":78,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":79,"author":{"gitID":"a-shakra"},"content":"    public void setTasks(List\u003cTask\u003e tasks) throws TimingClashException {"},{"lineNumber":80,"author":{"gitID":"a-shakra"},"content":"        requireAllNonNull(tasks);"},{"lineNumber":81,"author":{"gitID":"a-shakra"},"content":"        final UniqueTaskList replacement \u003d new UniqueTaskList();"},{"lineNumber":82,"author":{"gitID":"a-shakra"},"content":"        for (final Task task : tasks) {"},{"lineNumber":83,"author":{"gitID":"a-shakra"},"content":"            replacement.add(task);"},{"lineNumber":84,"author":{"gitID":"a-shakra"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"a-shakra"},"content":"        setTasks(replacement);"},{"lineNumber":86,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":88,"author":{"gitID":"a-shakra"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"a-shakra"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":90,"author":{"gitID":"a-shakra"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"a-shakra"},"content":"    public ObservableList\u003cTask\u003e asObservableList() {"},{"lineNumber":92,"author":{"gitID":"a-shakra"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":93,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":95,"author":{"gitID":"ChoChihTun"},"content":"    //@@author ChoChihTun"},{"lineNumber":96,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"ChoChihTun"},"content":"     * Checks for any clashes in the task timing in schedule"},{"lineNumber":98,"author":{"gitID":"ChoChihTun"},"content":"     *"},{"lineNumber":99,"author":{"gitID":"ChoChihTun"},"content":"     * @param startDateTime start date and time of new task"},{"lineNumber":100,"author":{"gitID":"ChoChihTun"},"content":"     * @param duration duration of new task"},{"lineNumber":101,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"ChoChihTun"},"content":"    private boolean isTimeClash(LocalDateTime startDateTime, String duration) {"},{"lineNumber":103,"author":{"gitID":"ChoChihTun"},"content":"        LocalDateTime taskEndTime \u003d getTaskEndTime(duration, startDateTime);"},{"lineNumber":104,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":105,"author":{"gitID":"ChoChihTun"},"content":"        for (Task recordedTask : internalList) {"},{"lineNumber":106,"author":{"gitID":"ChoChihTun"},"content":"            LocalDateTime startTimeOfRecordedTask \u003d recordedTask.getTaskDateTime();"},{"lineNumber":107,"author":{"gitID":"ChoChihTun"},"content":"            String durationOfRecordedTask \u003d recordedTask.getDuration();"},{"lineNumber":108,"author":{"gitID":"ChoChihTun"},"content":"            LocalDateTime endTimeOfRecordedTask \u003d getTaskEndTime(durationOfRecordedTask, startTimeOfRecordedTask);"},{"lineNumber":109,"author":{"gitID":"ChoChihTun"},"content":"            boolean isClash \u003d !(taskEndTime.isBefore(startTimeOfRecordedTask)"},{"lineNumber":110,"author":{"gitID":"ChoChihTun"},"content":"                    || startDateTime.isAfter(endTimeOfRecordedTask))"},{"lineNumber":111,"author":{"gitID":"ChoChihTun"},"content":"                    \u0026\u0026 !(taskEndTime.equals(startTimeOfRecordedTask)"},{"lineNumber":112,"author":{"gitID":"ChoChihTun"},"content":"                    || startDateTime.equals(endTimeOfRecordedTask));"},{"lineNumber":113,"author":{"gitID":"ChoChihTun"},"content":"            if (isClash) {"},{"lineNumber":114,"author":{"gitID":"ChoChihTun"},"content":"                return true;"},{"lineNumber":115,"author":{"gitID":"ChoChihTun"},"content":"            }"},{"lineNumber":116,"author":{"gitID":"ChoChihTun"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"ChoChihTun"},"content":"        return false;"},{"lineNumber":118,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":120,"author":{"gitID":"ChoChihTun"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"ChoChihTun"},"content":"     * Returns date and time when the task ends"},{"lineNumber":122,"author":{"gitID":"ChoChihTun"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"ChoChihTun"},"content":"    private static LocalDateTime getTaskEndTime(String duration, LocalDateTime startDateTime) {"},{"lineNumber":124,"author":{"gitID":"ChoChihTun"},"content":"        int indexOfHourDelimiter \u003d duration.indexOf(HOUR_DELIMITER);"},{"lineNumber":125,"author":{"gitID":"ChoChihTun"},"content":"        int indexOfMinuteDelimiter \u003d duration.indexOf(MINUTE_DELIMITER);"},{"lineNumber":126,"author":{"gitID":"ChoChihTun"},"content":"        int indexOfFirstDigitInMinute \u003d indexOfHourDelimiter + 1;"},{"lineNumber":127,"author":{"gitID":"ChoChihTun"},"content":"        int hoursInDuration \u003d Integer.parseInt(duration.substring(0, indexOfHourDelimiter));"},{"lineNumber":128,"author":{"gitID":"ChoChihTun"},"content":"        int minutesInDuration \u003d Integer.parseInt(duration.substring(indexOfFirstDigitInMinute, indexOfMinuteDelimiter));"},{"lineNumber":129,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":130,"author":{"gitID":"ChoChihTun"},"content":"        LocalDateTime taskEndTime;"},{"lineNumber":131,"author":{"gitID":"ChoChihTun"},"content":"        taskEndTime \u003d startDateTime.plusHours(hoursInDuration).plusMinutes(minutesInDuration);"},{"lineNumber":132,"author":{"gitID":"ChoChihTun"},"content":"        return taskEndTime;"},{"lineNumber":133,"author":{"gitID":"ChoChihTun"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"ChoChihTun"},"content":""},{"lineNumber":135,"author":{"gitID":"a-shakra"},"content":"    //@@author a-shakra"},{"lineNumber":136,"author":{"gitID":"a-shakra"},"content":"    @Override"},{"lineNumber":137,"author":{"gitID":"a-shakra"},"content":"    public Iterator\u003cTask\u003e iterator() {"},{"lineNumber":138,"author":{"gitID":"a-shakra"},"content":"        return internalList.iterator();"},{"lineNumber":139,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":141,"author":{"gitID":"a-shakra"},"content":"    @Override"},{"lineNumber":142,"author":{"gitID":"a-shakra"},"content":"    public boolean equals(Object other) {"},{"lineNumber":143,"author":{"gitID":"a-shakra"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":144,"author":{"gitID":"a-shakra"},"content":"                || (other instanceof UniqueTaskList // instanceof handles nulls"},{"lineNumber":145,"author":{"gitID":"a-shakra"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueTaskList) other).internalList));"},{"lineNumber":146,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":148,"author":{"gitID":"a-shakra"},"content":"    @Override"},{"lineNumber":149,"author":{"gitID":"a-shakra"},"content":"    public int hashCode() {"},{"lineNumber":150,"author":{"gitID":"a-shakra"},"content":"        return internalList.hashCode();"},{"lineNumber":151,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"a-shakra"},"content":"}"}],"authorContributionMap":{"ChoChihTun":56,"yungyung04":1,"a-shakra":90,"-":5}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"yungyung04"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":10,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.task.exceptions.TaskNotFoundException;"},{"lineNumber":11,"author":{"gitID":"ChoChihTun"},"content":"import seedu.address.model.task.exceptions.TimingClashException;"},{"lineNumber":12,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.tutee.Tutee;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":20,"author":{"gitID":"a-shakra"},"content":"    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"yungyung04"},"content":"    /** {@code Predicate} that evaluates to true if a parent object stores an instance of the subclass object*/"},{"lineNumber":23,"author":{"gitID":"yungyung04"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_TUTEES \u003d person -\u003e person instanceof Tutee;"},{"lineNumber":24,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    void deletePerson(Person target) throws PersonNotFoundException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    void addPerson(Person person) throws DuplicatePersonException;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    void updatePerson(Person target, Person editedPerson)"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":57,"author":{"gitID":"ChoChihTun"},"content":"    void addTask (Task target) throws TimingClashException;"},{"lineNumber":58,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":59,"author":{"gitID":"yungyung04"},"content":"    void deleteTask(Task target) throws TaskNotFoundException;"},{"lineNumber":60,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":61,"author":{"gitID":"a-shakra"},"content":"    ObservableList\u003cTask\u003e getFilteredTaskList();"},{"lineNumber":62,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":63,"author":{"gitID":"a-shakra"},"content":"    void updateFilteredTaskList(Predicate\u003cTask\u003e predicate);"},{"lineNumber":64,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":65,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"yungyung04"},"content":"     * Sorts the list of person according to the given comparator"},{"lineNumber":67,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"yungyung04"},"content":"    void sortFilteredPersonList (Comparator\u003cPerson\u003e comparator);"},{"lineNumber":69,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":70,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"yungyung04"},"content":"     * Sorts the list of tasks according to the given comparator"},{"lineNumber":72,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"yungyung04"},"content":"    void sortFilteredTaskList (Comparator\u003cTask\u003e comparator);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"yungyung04":16,"ChoChihTun":2,"a-shakra":8,"-":48}},{"path":"src/main/java/seedu/address/model/task/MonthContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"yungyung04"},"content":"package seedu.address.model.task;"},{"lineNumber":2,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"yungyung04"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.Task;"},{"lineNumber":8,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":9,"author":{"gitID":"yungyung04"},"content":"//@@author yungyung04"},{"lineNumber":10,"author":{"gitID":"yungyung04"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"yungyung04"},"content":" * Tests that a {@code Task}\u0027s month matches any of the {@code int month} given."},{"lineNumber":12,"author":{"gitID":"yungyung04"},"content":" */"},{"lineNumber":13,"author":{"gitID":"yungyung04"},"content":"public class MonthContainsKeywordsPredicate implements Predicate\u003cTask\u003e {"},{"lineNumber":14,"author":{"gitID":"yungyung04"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":15,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":16,"author":{"gitID":"yungyung04"},"content":"    public MonthContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":17,"author":{"gitID":"yungyung04"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":18,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":20,"author":{"gitID":"yungyung04"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"yungyung04"},"content":"    public boolean test(Task task) {"},{"lineNumber":22,"author":{"gitID":"yungyung04"},"content":"        return keywords.stream()"},{"lineNumber":23,"author":{"gitID":"yungyung04"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase("},{"lineNumber":24,"author":{"gitID":"yungyung04"},"content":"                        Integer.toString(task.getTaskDateTime().getMonthValue()), keyword));"},{"lineNumber":25,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":27,"author":{"gitID":"yungyung04"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"yungyung04"},"content":"    public boolean equals(Object other) {"},{"lineNumber":29,"author":{"gitID":"yungyung04"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":30,"author":{"gitID":"yungyung04"},"content":"                || (other instanceof seedu.address.model.task.MonthContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":31,"author":{"gitID":"yungyung04"},"content":"                \u0026\u0026 this.keywords"},{"lineNumber":32,"author":{"gitID":"yungyung04"},"content":"                .equals(((seedu.address.model.task.MonthContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":33,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"yungyung04"},"content":"}"}],"authorContributionMap":{"yungyung04":31,"-":3}},{"path":"src/main/java/seedu/address/model/task/TaskSortUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"yungyung04"},"content":"package seedu.address.model.task;"},{"lineNumber":2,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":3,"author":{"gitID":"yungyung04"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitID":"yungyung04"},"content":"import java.util.Comparator;"},{"lineNumber":5,"author":{"gitID":"yungyung04"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":7,"author":{"gitID":"yungyung04"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":8,"author":{"gitID":"yungyung04"},"content":"import seedu.address.model.Task;"},{"lineNumber":9,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":10,"author":{"gitID":"yungyung04"},"content":"//@@author yungyung04"},{"lineNumber":11,"author":{"gitID":"yungyung04"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"yungyung04"},"content":" * Provides utilities for sorting a list of Tasks."},{"lineNumber":13,"author":{"gitID":"yungyung04"},"content":" */"},{"lineNumber":14,"author":{"gitID":"yungyung04"},"content":"public class TaskSortUtil {"},{"lineNumber":15,"author":{"gitID":"yungyung04"},"content":"    public static final String CATEGORY_DATE_TIME \u003d \"datetime\";"},{"lineNumber":16,"author":{"gitID":"yungyung04"},"content":"    public static final String CATEGORY_MONTH \u003d \"month\";"},{"lineNumber":17,"author":{"gitID":"yungyung04"},"content":"    public static final int NEGATIVE_DIGIT \u003d -1;"},{"lineNumber":18,"author":{"gitID":"yungyung04"},"content":"    public static final int POSITIVE_DIGIT \u003d 1;"},{"lineNumber":19,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":20,"author":{"gitID":"yungyung04"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(TaskSortUtil.class);"},{"lineNumber":21,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":22,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"yungyung04"},"content":"     * Returns the appropriate Task comparator given the sorting category"},{"lineNumber":24,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"yungyung04"},"content":"    public static Comparator\u003cTask\u003e getComparator(String sortCategory) {"},{"lineNumber":26,"author":{"gitID":"yungyung04"},"content":"        Comparator\u003cTask\u003e comparator \u003d null;"},{"lineNumber":27,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":28,"author":{"gitID":"yungyung04"},"content":"        switch (sortCategory) {"},{"lineNumber":29,"author":{"gitID":"yungyung04"},"content":"        case CATEGORY_MONTH:"},{"lineNumber":30,"author":{"gitID":"yungyung04"},"content":"            comparator \u003d getMonthComparator();"},{"lineNumber":31,"author":{"gitID":"yungyung04"},"content":"            break;"},{"lineNumber":32,"author":{"gitID":"yungyung04"},"content":"        case CATEGORY_DATE_TIME:"},{"lineNumber":33,"author":{"gitID":"yungyung04"},"content":"            comparator \u003d getDateTimeComparator();"},{"lineNumber":34,"author":{"gitID":"yungyung04"},"content":"            break;"},{"lineNumber":35,"author":{"gitID":"yungyung04"},"content":"        default:"},{"lineNumber":36,"author":{"gitID":"yungyung04"},"content":"            logger.severe(\"an invalid category is identified in TaskSortUtil class.\");"},{"lineNumber":37,"author":{"gitID":"yungyung04"},"content":"            assert (false); //invalid sortCategory should be identified in parser."},{"lineNumber":38,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"yungyung04"},"content":"        return comparator;"},{"lineNumber":40,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":42,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"yungyung04"},"content":"     * Returns a comparator which is useful for sorting tasks based on the month sequence in an increasing order."},{"lineNumber":44,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"yungyung04"},"content":"    private static Comparator\u003cTask\u003e getMonthComparator() {"},{"lineNumber":46,"author":{"gitID":"yungyung04"},"content":"        return new Comparator\u003cTask\u003e() {"},{"lineNumber":47,"author":{"gitID":"yungyung04"},"content":"            @Override"},{"lineNumber":48,"author":{"gitID":"yungyung04"},"content":"            public int compare(Task task1, Task task2) {"},{"lineNumber":49,"author":{"gitID":"yungyung04"},"content":"                int month1 \u003d task1.getTaskDateTime().getMonthValue();"},{"lineNumber":50,"author":{"gitID":"yungyung04"},"content":"                int month2 \u003d task2.getTaskDateTime().getMonthValue();"},{"lineNumber":51,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":52,"author":{"gitID":"yungyung04"},"content":"                if (month1 !\u003d month2) {"},{"lineNumber":53,"author":{"gitID":"yungyung04"},"content":"                    return compareByMonth(month1, month2);"},{"lineNumber":54,"author":{"gitID":"yungyung04"},"content":"                } else {"},{"lineNumber":55,"author":{"gitID":"yungyung04"},"content":"                    return compareByTime(task1.getTaskDateTime(), task2.getTaskDateTime());"},{"lineNumber":56,"author":{"gitID":"yungyung04"},"content":"                }"},{"lineNumber":57,"author":{"gitID":"yungyung04"},"content":"            }"},{"lineNumber":58,"author":{"gitID":"yungyung04"},"content":"        };"},{"lineNumber":59,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":61,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"yungyung04"},"content":"     * Returns a comparator which is useful for sorting tasks based on the date and time sequence in increasing order."},{"lineNumber":63,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"yungyung04"},"content":"    private static Comparator\u003cTask\u003e getDateTimeComparator() {"},{"lineNumber":65,"author":{"gitID":"yungyung04"},"content":"        return new Comparator\u003cTask\u003e() {"},{"lineNumber":66,"author":{"gitID":"yungyung04"},"content":"            @Override"},{"lineNumber":67,"author":{"gitID":"yungyung04"},"content":"            public int compare(Task task1, Task task2) {"},{"lineNumber":68,"author":{"gitID":"yungyung04"},"content":"                return compareByTime(task1.getTaskDateTime(), task2.getTaskDateTime());"},{"lineNumber":69,"author":{"gitID":"yungyung04"},"content":"            }"},{"lineNumber":70,"author":{"gitID":"yungyung04"},"content":"        };"},{"lineNumber":71,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"yungyung04"},"content":""},{"lineNumber":73,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"yungyung04"},"content":"     * Compares the 2 given months and returns an integer according to their sequence in standard Gregorian calendar."},{"lineNumber":75,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"yungyung04"},"content":"    private static int compareByMonth(int month1, int month2) {"},{"lineNumber":77,"author":{"gitID":"yungyung04"},"content":"        if (month1 \u003c month2) {"},{"lineNumber":78,"author":{"gitID":"yungyung04"},"content":"            return NEGATIVE_DIGIT;"},{"lineNumber":79,"author":{"gitID":"yungyung04"},"content":"        } else {"},{"lineNumber":80,"author":{"gitID":"yungyung04"},"content":"            return POSITIVE_DIGIT;"},{"lineNumber":81,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"yungyung04"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"yungyung04"},"content":"     * Compares the 2 given {@code LocalDateTime} and"},{"lineNumber":85,"author":{"gitID":"yungyung04"},"content":"     * Returns an integer according to their sequence in standard Gregorian calendar."},{"lineNumber":86,"author":{"gitID":"yungyung04"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"yungyung04"},"content":"    private static int compareByTime(LocalDateTime dateTime1, LocalDateTime dateTime2) {"},{"lineNumber":88,"author":{"gitID":"yungyung04"},"content":"        assert (!dateTime1.isEqual(dateTime2)); //time should be different due to thrown exception when task is added"},{"lineNumber":89,"author":{"gitID":"yungyung04"},"content":"        if (dateTime1.isBefore(dateTime2)) {"},{"lineNumber":90,"author":{"gitID":"yungyung04"},"content":"            return NEGATIVE_DIGIT;"},{"lineNumber":91,"author":{"gitID":"yungyung04"},"content":"        } else {"},{"lineNumber":92,"author":{"gitID":"yungyung04"},"content":"            return POSITIVE_DIGIT;"},{"lineNumber":93,"author":{"gitID":"yungyung04"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"yungyung04"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"yungyung04"},"content":"}"}],"authorContributionMap":{"yungyung04":95}},{"path":"src/main/java/seedu/address/model/TaskContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"a-shakra"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":6,"author":{"gitID":"a-shakra"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":8,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":9,"author":{"gitID":"a-shakra"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"a-shakra"},"content":" * Tests that a {@code Task}\u0027s {@code description} matches any of the keywords given."},{"lineNumber":11,"author":{"gitID":"a-shakra"},"content":" */"},{"lineNumber":12,"author":{"gitID":"a-shakra"},"content":"//@@author a-shakra"},{"lineNumber":13,"author":{"gitID":"a-shakra"},"content":"public class TaskContainsKeywordsPredicate implements Predicate\u003cTask\u003e {"},{"lineNumber":14,"author":{"gitID":"a-shakra"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":15,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":16,"author":{"gitID":"a-shakra"},"content":"    public TaskContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":17,"author":{"gitID":"a-shakra"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":18,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":20,"author":{"gitID":"a-shakra"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"a-shakra"},"content":"    public boolean test(Task task) {"},{"lineNumber":22,"author":{"gitID":"a-shakra"},"content":"        return keywords.stream()"},{"lineNumber":23,"author":{"gitID":"a-shakra"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(task.getDescription(), keyword));"},{"lineNumber":24,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":26,"author":{"gitID":"a-shakra"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"a-shakra"},"content":"    public boolean equals(Object other) {"},{"lineNumber":28,"author":{"gitID":"a-shakra"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":29,"author":{"gitID":"a-shakra"},"content":"                || (other instanceof TaskContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":30,"author":{"gitID":"a-shakra"},"content":"                \u0026\u0026 this.keywords.equals(((TaskContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":31,"author":{"gitID":"a-shakra"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"a-shakra"},"content":""},{"lineNumber":33,"author":{"gitID":"a-shakra"},"content":"}"}],"authorContributionMap":{"a-shakra":30,"-":3}}]
