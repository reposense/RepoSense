var resultJson = [{"path":"docs/team/anh2111.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d anh2111 - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"deeheenguyen"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"deeheenguyen"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":5,"author":{"gitID":"deeheenguyen"},"content":"\u003d\u003d PROJECT: Infinity Book"},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":7,"author":{"gitID":"deeheenguyen"},"content":"---"},{"lineNumber":8,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":9,"author":{"gitID":"deeheenguyen"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"Infinity Book (IB) is an address book application for Tech recruiters, providing end-to-end support, from searching for candidates,to adding job postings and saving their resumes and interviews."},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"* *Major enhancement*: Implementation of Dashboard Reporting and Tagging features."},{"lineNumber":16,"author":{"gitID":"-"},"content":"*** Recruiters may have to screen through one candidate\u0027s profile many times, which costs time. Thus, I improved `edit`"},{"lineNumber":17,"author":{"gitID":"-"},"content":"command so that recruiters can add new tags or remove current tags from candidates."},{"lineNumber":18,"author":{"gitID":"-"},"content":"This enables them to summarize each candidate in a few keywords to save time for their future reference."},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"*** Recruiters need to make decisions based on candidates\u0027 information in their contact list."},{"lineNumber":21,"author":{"gitID":"-"},"content":"But their list is overwhelmingly long, so I implemented `Report` feature showing them statistics from Tags they have added"},{"lineNumber":22,"author":{"gitID":"-"},"content":"so that recruiters can have an idea of what is happening without going through each record."},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"*** Highlights: This enhancement touches multiple components: Model, Logic, Storage, and UI."},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"* *Minor enhancement*: Improvement of `Find` command."},{"lineNumber":27,"author":{"gitID":"-"},"content":"*** Since Infinity Book v1.2, recruiters can find candidates by their name, email, phone, and tags."},{"lineNumber":28,"author":{"gitID":"-"},"content":"*** Justification: Given the huge number of contacts that a recruiter has, it is not possible for them to remember candidates\u0027 name. Hence, recruiters must be able to search by other fields so that it is easier for them to locate a person."},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-W11-B3/main/blob/master/collated/functional/anh2111.md[Functional code]][https://github.com/CS2103JAN2018-W11-B3/main/blob/master/collated/test/anh2111.md[Test code]]"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"* *Other contributions*:"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"** Did a UI overhaul to provide a sleek and visual appeal look that optimize for users\u0027 satisfaction and enjoyment. Infinity Book v1.5 uses this design as the default theme."},{"lineNumber":35,"author":{"gitID":"-"},"content":"** Managed to wrapped up project properly on GitHub from v1.1 to v1.5"},{"lineNumber":36,"author":{"gitID":"-"},"content":"** Was responsible for updating Readme, UI screenshot, User Guide, Developer Guide to match with the actual product."},{"lineNumber":37,"author":{"gitID":"-"},"content":"** Community:"},{"lineNumber":38,"author":{"gitID":"-"},"content":"*** PRs reviewed (with non-trivial review comments): https://github.com/CS2103JAN2018-W11-B3/main/pull/58, https://github.com/CS2103JAN2018-W11-B3/main/pull/140"},{"lineNumber":39,"author":{"gitID":"-"},"content":"*** Reported bugs and suggestions for other teams in the class: https://github.com/CS2103JAN2018-F11-B2/main/issues?utf8\u003d%E2%9C%93\u0026q\u003dis%3Aissue+is%3Aclosed+anh2111+"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":44,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide, which showcase my ability to write documentation targeting end-users._"},{"lineNumber":45,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003dreport]"},{"lineNumber":48,"author":{"gitID":"-"},"content":"An example usage can be found in Appendices."},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003dreportcommands]"},{"lineNumber":51,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003daddtags]"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"You can find my other contributions to User Guide: Delete Tags and Improved Find command in Appendices."},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":58,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide, which showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":59,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003dreport]"},{"lineNumber":62,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003dedittags]"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"You can find my other contributions to Developer Guide."},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"\u003d\u003d Appendices"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Other contributions to the User Guide"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d An example usage of Report"},{"lineNumber":71,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003dreportexample]"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003ddeletetags]"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003dfindall]"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Other contributions to the Developer Guide"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003dfindall]"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003doption]"}],"authorContributionMap":{"deeheenguyen":9,"-":72}},{"path":"docs/team/deeheenguyen.adoc","lines":[{"lineNumber":1,"author":{"gitID":"deeheenguyen"},"content":"\u003d Nguyen Thi Viet Ha - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"deeheenguyen"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"deeheenguyen"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"deeheenguyen"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"deeheenguyen"},"content":":experimental:"},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":":sectnums:"},{"lineNumber":7,"author":{"gitID":"deeheenguyen"},"content":":imagesDir: ../images"},{"lineNumber":8,"author":{"gitID":"deeheenguyen"},"content":":stylesDir: ../stylesheets"},{"lineNumber":9,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":10,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":11,"author":{"gitID":"deeheenguyen"},"content":"\u003d PROJECT: Infinity Book"},{"lineNumber":12,"author":{"gitID":"deeheenguyen"},"content":"Welcome to my portfolio page for CS2103T AY 2017/2018 Sem 2 project - Infinity Book."},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":"\u003d\u003d Overview"},{"lineNumber":15,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":16,"author":{"gitID":"deeheenguyen"},"content":"include::../UserGuide.adoc[tag\u003dintroduction]"},{"lineNumber":17,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":18,"author":{"gitID":"deeheenguyen"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":19,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":20,"author":{"gitID":"deeheenguyen"},"content":"*Code contributed*: [https://github.com/CS2103JAN2018-W11-B3/main/blob/master/collated/functional/deeheenguyen.md[Functional code]]"},{"lineNumber":21,"author":{"gitID":"deeheenguyen"},"content":"[https://github.com/CS2103JAN2018-W11-B3/main/blob/master/collated/test/deeheenguyen.md[Test code]]_"},{"lineNumber":22,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":23,"author":{"gitID":"deeheenguyen"},"content":"\u003d\u003d\u003d Major enhancement: added the interview management."},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":"** Motivation: Interviewing is one of the important steps in recruiting process."},{"lineNumber":25,"author":{"gitID":"deeheenguyen"},"content":"HR may need a tool to manage interview efficiently."},{"lineNumber":26,"author":{"gitID":"deeheenguyen"},"content":"** What it does: allows the user to add the interview relevant command which are add interview command,"},{"lineNumber":27,"author":{"gitID":"deeheenguyen"},"content":"find interview command, listing interview command."},{"lineNumber":28,"author":{"gitID":"deeheenguyen"},"content":"** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth"},{"lineNumber":29,"author":{"gitID":"deeheenguyen"},"content":"analysis of design alternatives. The implementation too was challenging as it required changes to existing model, ui,"},{"lineNumber":30,"author":{"gitID":"deeheenguyen"},"content":"and storage."},{"lineNumber":31,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":32,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":33,"author":{"gitID":"deeheenguyen"},"content":"\u003d\u003d\u003d Minor enhancement: added the view command."},{"lineNumber":34,"author":{"gitID":"deeheenguyen"},"content":"** Motivation: The HR may want to find more details information of specific candidates."},{"lineNumber":35,"author":{"gitID":"deeheenguyen"},"content":"The view command helps HR with this problem."},{"lineNumber":36,"author":{"gitID":"deeheenguyen"},"content":"** What it does: allows user to view a specific person by email ID and display the linked page of the person."},{"lineNumber":37,"author":{"gitID":"deeheenguyen"},"content":"** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth"},{"lineNumber":38,"author":{"gitID":"deeheenguyen"},"content":" analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":39,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":40,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":41,"author":{"gitID":"deeheenguyen"},"content":"\u003d\u003d\u003d Other contributions:"},{"lineNumber":42,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":43,"author":{"gitID":"deeheenguyen"},"content":"\u003d\u003d\u003d\u003d Project management:"},{"lineNumber":44,"author":{"gitID":"deeheenguyen"},"content":"* Managed releases `v1.5rc` on GitHub"},{"lineNumber":45,"author":{"gitID":"deeheenguyen"},"content":"* Managed milestones on GitHub."},{"lineNumber":46,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":47,"author":{"gitID":"deeheenguyen"},"content":"\u003d\u003d\u003d\u003d Enhancements to existing features:"},{"lineNumber":48,"author":{"gitID":"deeheenguyen"},"content":"* Updated the add command to support viewing a person (Pull requests"},{"lineNumber":49,"author":{"gitID":"deeheenguyen"},"content":"https://github.com/CS2103JAN2018-W11-B3/main/pull/15[#15])"},{"lineNumber":50,"author":{"gitID":"deeheenguyen"},"content":"* Wrote additional tests for existing features to increase coverage (Pull requests"},{"lineNumber":51,"author":{"gitID":"deeheenguyen"},"content":"https://github.com/CS2103JAN2018-W11-B3/main/pull/168[#168],"},{"lineNumber":52,"author":{"gitID":"deeheenguyen"},"content":"https://github.com/CS2103JAN2018-W11-B3/main/pull/166[#166])"},{"lineNumber":53,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":54,"author":{"gitID":"deeheenguyen"},"content":"\u003d\u003d\u003d\u003d Documentation:"},{"lineNumber":55,"author":{"gitID":"-"},"content":"*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"},{"lineNumber":56,"author":{"gitID":"-"},"content":"** Community:"},{"lineNumber":57,"author":{"gitID":"deeheenguyen"},"content":"*** PRs reviewed (with non-trivial review comments): https://github.com/CS2103JAN2018-W11-B3/main/pull/51[#51]"},{"lineNumber":58,"author":{"gitID":"deeheenguyen"},"content":"*** Reported bugs and suggestions for other teams in the class"},{"lineNumber":59,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":60,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":61,"author":{"gitID":"deeheenguyen"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":62,"author":{"gitID":"deeheenguyen"},"content":"include::../UserGuide.adoc[tag\u003dviewcommand]"},{"lineNumber":63,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":64,"author":{"gitID":"deeheenguyen"},"content":"include::../UserGuide.adoc[tag\u003dinterviewmanagement]"},{"lineNumber":65,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":66,"author":{"gitID":"deeheenguyen"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":67,"author":{"gitID":"deeheenguyen"},"content":"include::../DeveloperGuide.adoc[tag\u003dviewcommand]"},{"lineNumber":68,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":69,"author":{"gitID":"deeheenguyen"},"content":"include::../DeveloperGuide.adoc[tag\u003dinterviewmanagement]"},{"lineNumber":70,"author":{"gitID":"deeheenguyen"},"content":""}],"authorContributionMap":{"deeheenguyen":68,"-":2}},{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"Inifity Book was developed by the https://github.com/CS2103JAN2018-W11-B3[CS2103JAN2018-W11-B3] team. +"},{"lineNumber":7,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore], from the CS2103 Tutorial W11."},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Sashankh Chengavalli Kumar"},{"lineNumber":12,"author":{"gitID":"-"},"content":"image::Sashankh.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":13,"author":{"gitID":"-"},"content":"{empty}[https://github.com/ChengSashankh[github]] [\u003c\u003cChengSashankh#, portfolio\u003e\u003e]"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":16,"author":{"gitID":"-"},"content":"Responsibilities: Model and Documentation"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Nguyen Thi Viet Ha"},{"lineNumber":21,"author":{"gitID":"-"},"content":"image::Viet Ha.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":22,"author":{"gitID":"-"},"content":"{empty}[https://github.com/deeheenguyen[github]] [\u003c\u003cdeeheenguyen#, portfolio\u003e\u003e]"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"Role: Team Lead +"},{"lineNumber":25,"author":{"gitID":"-"},"content":"Responsibilities: UI"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Huynh Thanh Duc Anh"},{"lineNumber":30,"author":{"gitID":"-"},"content":"image::Anh.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":31,"author":{"gitID":"-"},"content":"{empty}[https://github.com/anh2111[github]] [\u003c\u003canh2111#, portfolio\u003e\u003e]"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":34,"author":{"gitID":"-"},"content":"Responsibilities: Code Quality"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Nguyen Dinh Dung"},{"lineNumber":39,"author":{"gitID":"tiny767"},"content":"image::Dung.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":40,"author":{"gitID":"-"},"content":"{empty}[https://github.com/tiny767[github]] [\u003c\u003ctiny767#, portfolio\u003e\u003e]"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":43,"author":{"gitID":"-"},"content":"Responsibilities: Deliverables and Deadlines"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"}],"authorContributionMap":{"-":44,"tiny767":1}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":2,"author":{"gitID":"-"},"content":"image::docs/images/logo.png[width\u003d\"300\"]"},{"lineNumber":3,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":6,"author":{"gitID":"-"},"content":"image::images/logo.png[width\u003d\"300\"]"},{"lineNumber":7,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"https://travis-ci.org/CS2103JAN2018-W11-B3/main/[image:https://api.travis-ci.org/CS2103JAN2018-W11-B3/main.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":12,"author":{"gitID":"-"},"content":"https://ci.appveyor.com/project/damithc/addressbook-level4[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"},{"lineNumber":13,"author":{"gitID":"-"},"content":"https://coveralls.io/github/CS2103JAN2018-W11-B3/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-W11-B3/main/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":16,"author":{"gitID":"-"},"content":"image::docs/images/Ui.png[width\u003d\"900\"]"},{"lineNumber":17,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":20,"author":{"gitID":"-"},"content":"image::images/Ui.png[width\u003d\"900\"]"},{"lineNumber":21,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"* Infinity Book is a desktop Address Book application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":24,"author":{"gitID":"-"},"content":"* Infinity Book is built specially for technical recruiters and Human Resources Managers to help them manage their contacts."},{"lineNumber":25,"author":{"gitID":"-"},"content":"* Tech recruiters meet many candidates with different qualifications and abilities, and it is important for them to keep track and manage these contacts easily."},{"lineNumber":26,"author":{"gitID":"-"},"content":"* Infinity Book is built on AddressBook Level 4 developed by https://github.com/se-edu/[NUS SE-EDU], and shows new improvements"},{"lineNumber":27,"author":{"gitID":"-"},"content":"** New features specially built for recruiters as displayed in the \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":28,"author":{"gitID":"-"},"content":"** A more sophisticated GUI that includes a list  panel and an in-built Browser."},{"lineNumber":29,"author":{"gitID":"-"},"content":"** More test cases, including automated GUI testing."},{"lineNumber":30,"author":{"gitID":"-"},"content":"** Support for _Build Automation_ using Gradle and for _Continuous Integration_ using Travis CI."},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map:"},{"lineNumber":33,"author":{"gitID":"-"},"content":"https://cs2103jan2018-w11-b3.github.io/main/"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":36,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":37,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":38,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":43,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":44,"author":{"gitID":"tiny767"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4], http://restfb.com[RestFB]"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"-":45,"tiny767":1}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Infinity Book - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"deeheenguyen"},"content":":toextract:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toclevels: 3"},{"lineNumber":5,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":7,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":8,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":9,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":10,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":11,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":14,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":15,"author":{"gitID":"-"},"content":":important-caption: :heavy_exclamation_mark:"},{"lineNumber":16,"author":{"gitID":"-"},"content":":caution-caption: :fire:"},{"lineNumber":17,"author":{"gitID":"-"},"content":":warning-caption: :warning:"},{"lineNumber":18,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":19,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-W11-B3/main"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"By: `Team JACKHA (CS2103JAN2018-W11-B3)`      Since: `Jun 2016`      Licence: `MIT`"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":"//tag::introduction[]"},{"lineNumber":25,"author":{"gitID":"-"},"content":"Infinity Book is a desktop application that provides Tech recruiters end-to-end support, from searching for candidates,to adding job postings and saving their resumes and interviews. +"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"More importantly, IB is *optimized for those who prefer to work with a desktop Command Line Interface* (link:#cli[CLI]) while still having the benefits of a Graphical User Interface (link:#gui[GUI]). If you can type fast, IB can get your candidates management tasks done faster than traditional GUI apps. +"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"deeheenguyen"},"content":"//end::introduction[]"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"//tag::testtag[]"},{"lineNumber":34,"author":{"gitID":"-"},"content":"\u003d\u003d About"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"This User Guide introduces a user to Infinity Book, provides set up instructions and details the features of the product."},{"lineNumber":37,"author":{"gitID":"-"},"content":"This document does not assume any prior technical knowledge, and the glossary explains any technical terms. Please check the FAQ section for frequent user issues."},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"To quickly set up Infinity Book and try out the features, jump to \u003c\u003cQuick Start\u003e\u003e."},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":42,"author":{"gitID":"-"},"content":"For information about implementation and architecture, please refer to the Developer Guide."},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"//end::testtag[]"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":47,"author":{"gitID":"-"},"content":"If you are a first time user, this section will help you get started with Infinity Book in 5 easy steps:"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer. If you do not have Java installed, get it link:https://java.com/en/download/[here]."},{"lineNumber":50,"author":{"gitID":"-"},"content":"+"},{"lineNumber":51,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":52,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":53,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8. +"},{"lineNumber":54,"author":{"gitID":"-"},"content":"Refer to \u003c\u003cFAQ\u003e\u003e for instructions to check Java version."},{"lineNumber":55,"author":{"gitID":"-"},"content":"+"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":".  Download the latest `infinitybook.jar` link:{repoURL}/releases[here]."},{"lineNumber":58,"author":{"gitID":"-"},"content":".  Copy the file to the folder you want to use as the home folder for your Infinity Book."},{"lineNumber":59,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. The GUI should appear in a few seconds."},{"lineNumber":60,"author":{"gitID":"-"},"content":"+"},{"lineNumber":61,"author":{"gitID":"-"},"content":".The User Interface."},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"Set up is now complete. You have launched Infinity Book. You should see the interface as shown in Figure 1. +"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"Type your command in the command box and press kbd:[Enter] to execute it. Some examples are given below."},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":70,"author":{"gitID":"-"},"content":"Typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":71,"author":{"gitID":"-"},"content":"Other basic example commands are shown here:"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"* *`list`* : lists all contacts"},{"lineNumber":74,"author":{"gitID":"-"},"content":"* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Infinity Book."},{"lineNumber":75,"author":{"gitID":"-"},"content":"* **`delete`**`3` : deletes the 3rd contact shown in the current list"},{"lineNumber":76,"author":{"gitID":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"You can view the entire command list \u003c\u003cCommand Summary, here\u003e\u003e."},{"lineNumber":79,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":80,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":81,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":82,"author":{"gitID":"-"},"content":"The User Interface might appear mildly different for different versions of the product."},{"lineNumber":83,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"Refer to \u003c\u003cFeatures\u003e\u003e for details of each command and for more commands."},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"[[CommandLine]]"},{"lineNumber":88,"author":{"gitID":"-"},"content":"\u003d\u003d Command Line"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"Infinity Book uses a command line interface that follows the command format given below. Auto-complete and auto-correct are optimised to assist in CLI usage as detailed in this section."},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Command Format"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"* Command starts with a `COMMAND WORD` to specify the command you want to perform."},{"lineNumber":95,"author":{"gitID":"-"},"content":"* Words prefixed with a dash (optional) are `COMMAND OPTION` e.g. in `edit -add-tag t/TAG`, `-add-tag` is a command option."},{"lineNumber":96,"author":{"gitID":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":97,"author":{"gitID":"-"},"content":"* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":98,"author":{"gitID":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":99,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":100,"author":{"gitID":"-"},"content":"//tag::autocomplete[]"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Auto-complete and auto-correct"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"To enhance your experience with the Command Line Interface(CLI), Infinity Book comes with built in auto-correct and auto-complete. This section explains"},{"lineNumber":105,"author":{"gitID":"-"},"content":"how you can use these features to speed up your CLI experience."},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Auto-complete"},{"lineNumber":108,"author":{"gitID":"-"},"content":"Auto completes command words being typed into Infinity Book. +"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"To auto-complete a command word:"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":". Type in atleast the first character of your command word."},{"lineNumber":113,"author":{"gitID":"-"},"content":". Press kbd:[TAB] until your desired command word appears in the command box."},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":116,"author":{"gitID":"-"},"content":"Entered text must match (case sensitive) the start of the desired command. +"},{"lineNumber":117,"author":{"gitID":"-"},"content":"If no matches are available, no change is made to the input text."},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"*Example:*"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"** `li` + kbd:[TAB] : Completes command word to `list`."},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"** `LI` + kbd:[TAB]  : Reports no completions found."},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":126,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":127,"author":{"gitID":"-"},"content":"Use kbd:[TAB] repeatedly to loop through the list as many times as you need."},{"lineNumber":128,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Auto-correct"},{"lineNumber":132,"author":{"gitID":"-"},"content":"Auto correct spell checks command words being typed into Infinity Book. +"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"To auto-correct a command word:"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":137,"author":{"gitID":"-"},"content":"Entered text must be within one edit-distance of the desired command, by removal, addition or swapping of adjacent characters +"},{"lineNumber":138,"author":{"gitID":"-"},"content":"If no corrections are available, no change is made to the input text."},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":". Type in a possibly incorrect version of the command word."},{"lineNumber":141,"author":{"gitID":"-"},"content":". Press kbd:[SPACE] and watch the command word auto-corrected immediately."},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":144,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":145,"author":{"gitID":"-"},"content":"If a copy-pasted command may contain a spelling error in the command word, press kbd:[SPACE] to"},{"lineNumber":146,"author":{"gitID":"-"},"content":"correct the command word without affecting the arguments entered."},{"lineNumber":147,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"*Example:*"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"** `lsit` +  kbd:[SPACE] : Corrects command word to `list`."},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"** `lit` +   kbd:[SPACE] : Corrects command word to `list`."},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"** `liist` + kbd:[SPACE] : Corrects command word to `list`."},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"** `lllist` + kbd:[SPACE] : Does not make any correction."},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"[WARNING]"},{"lineNumber":160,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":161,"author":{"gitID":"-"},"content":"While copy pasting commands with spelling errors, the kbd:[SPACE] key will not be available for use to insert spaces in the command while editing."},{"lineNumber":162,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"//end::autocomplete[]"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":167,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Candidates\u0027 Information"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Adding a person: `add`"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"* *Description:* Adds a person to the Infinity Book +"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"deeheenguyen"},"content":"* *Format:* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS l/LINK [t/TAG]...`"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"* *Examples:* +"},{"lineNumber":178,"author":{"gitID":"deeheenguyen"},"content":"- `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123,"},{"lineNumber":179,"author":{"gitID":"deeheenguyen"},"content":"#01-01 l/https://nus-cs2103-ay1718s2.github.io/website/`"},{"lineNumber":180,"author":{"gitID":"deeheenguyen"},"content":"- `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate"},{"lineNumber":181,"author":{"gitID":"deeheenguyen"},"content":" Prison p/1234567 l/https://nus-cs2103-ay1718s2.github.io/website/ t/criminal`"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":184,"author":{"gitID":"-"},"content":"A person can have any number of tags (including 0)"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Editing a person : `edit`"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"* *Description:* Edits an existing person\u0027s record in Infinity Book. +"},{"lineNumber":189,"author":{"gitID":"-"},"content":"* *Format:* `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"* *Examples:* +"},{"lineNumber":192,"author":{"gitID":"-"},"content":"- `edit 1 p/91234567 e/johndoe@example.com` +"},{"lineNumber":193,"author":{"gitID":"-"},"content":"Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":194,"author":{"gitID":"-"},"content":"- `edit 2 n/Betsy Crower t/` +"},{"lineNumber":195,"author":{"gitID":"-"},"content":"Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"****"},{"lineNumber":198,"author":{"gitID":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the last person listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":199,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":200,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":201,"author":{"gitID":"-"},"content":"* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."},{"lineNumber":202,"author":{"gitID":"-"},"content":"* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":203,"author":{"gitID":"-"},"content":"****"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"// tag::addtags[]"},{"lineNumber":206,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Add new tags to a person : `edit -add-tag`"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"Infinity Book helps you process candidate\u0027s information faster."},{"lineNumber":209,"author":{"gitID":"-"},"content":"Summarize each candidate in a few keywords using the `edit -add-tag` command to save time for your future reference."},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"*Format:* `edit -add-tag INDEX [t/TAG]...`"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":214,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":215,"author":{"gitID":"-"},"content":"* Each candidate: +"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":". Can have any number (including zero) of tags."},{"lineNumber":218,"author":{"gitID":"-"},"content":". Cannot have duplicated tags. Tag name comparision is case sensitive, which means the list of tags of a candidate can be"},{"lineNumber":219,"author":{"gitID":"-"},"content":"`Java` `JAVA` `JAVa`, for example, but cannot be `JAVA` `JAVA`."},{"lineNumber":220,"author":{"gitID":"-"},"content":". Cannot have tags with empty tag name."},{"lineNumber":221,"author":{"gitID":"-"},"content":"* Ensure that the specified `INDEX` is a positive integer that is smaller or equal to the total number of candidates shown in the list."},{"lineNumber":222,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"[WARNING]"},{"lineNumber":225,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":226,"author":{"gitID":"-"},"content":"* When you provide invalid tags, Infinity Book will ignore them. To verify, you can look at all tags shown under candidate\u0027s name in the list."},{"lineNumber":227,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"*Examples:* +"},{"lineNumber":230,"author":{"gitID":"-"},"content":"* `edit -add-tag 1 t/Year2 t/SpeakVietnamese` +"},{"lineNumber":231,"author":{"gitID":"-"},"content":"Adds tag `Year2` and `SpeakVietnamese` to the first candidate."},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":".Added new tags to the first candidate."},{"lineNumber":234,"author":{"gitID":"-"},"content":"image::canaddtag.png[width\u003d\"900\"]"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"* `edit -add-tag 1 t/Year2` +"},{"lineNumber":237,"author":{"gitID":"-"},"content":"Adds a new tag `Year2` to the first candidate, but it is not successful since this candidate already has tag `Year2`."},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":".Cannot add a new duplicated tag to the first candidate. The candidate\u0027s details will not be updated, and Infinity Book will not show any warning."},{"lineNumber":240,"author":{"gitID":"-"},"content":"image::cannotaddtag.png[width\u003d\"900\"]"},{"lineNumber":241,"author":{"gitID":"-"},"content":"// end::addtags[]"},{"lineNumber":242,"author":{"gitID":"-"},"content":"// tag::deletetags[]"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Delete tags from a person : `edit -delete-tag`"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"Some tags are no longer seem to be relevant to the candidate? Remove them using the `edit -delete-tag` command."},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"*Format:* `edit -delete-tag INDEX [t/TAG]...`"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":251,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":252,"author":{"gitID":"-"},"content":". Tag name comparision is case sensitive, which means when the first candidate has tags `COMPUTING` `computing`, for example,"},{"lineNumber":253,"author":{"gitID":"-"},"content":"`edit -delete-tag 1 t/computing` will only remove tag `computing`."},{"lineNumber":254,"author":{"gitID":"-"},"content":". Ensure that the specified `INDEX` is a positive integer that is smaller or equal to the total number of candidates shown in the list."},{"lineNumber":255,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"*Examples:* +"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"* `edit -delete-tag 1 t/computing` +"},{"lineNumber":260,"author":{"gitID":"-"},"content":"Deletes tag `computing` from the first candidate."},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":".Remove tags from the first candidate."},{"lineNumber":263,"author":{"gitID":"-"},"content":"image::candeletetag.png[width\u003d\"600\"]"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"* `edit -delete-tag 1 t/computing` +"},{"lineNumber":267,"author":{"gitID":"-"},"content":"Removes tag `computing` from the first candidate, but it is not successful since this candidate does not have tag `computing`."},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":".Cannot delete tag `computing` from the first candidate. The candidate\u0027s details will not be updated, and Infinity Book will not show any warning."},{"lineNumber":270,"author":{"gitID":"-"},"content":"image::cannotdeletetag.png[width\u003d\"600\"]"},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":"//end::deletetags[]"},{"lineNumber":273,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":274,"author":{"gitID":"tiny767"},"content":"//tag:remark[]"},{"lineNumber":275,"author":{"gitID":"tiny767"},"content":"\u003d\u003d\u003d\u003d Add a remark : `remark` [Since v1.1]"},{"lineNumber":276,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":277,"author":{"gitID":"tiny767"},"content":"* *Description:* Adds or edits a remark to the person identified by the INDEX +"},{"lineNumber":278,"author":{"gitID":"tiny767"},"content":"* *Format:* `remark INDEX r/[REMARK]`"},{"lineNumber":279,"author":{"gitID":"tiny767"},"content":"* *Alias:* `rm INDEX r/[REMARK]`"},{"lineNumber":280,"author":{"gitID":"tiny767"},"content":"* *Examples:*"},{"lineNumber":281,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":282,"author":{"gitID":"tiny767"},"content":"- `remark 1 r/Likes to go swimming` +"},{"lineNumber":283,"author":{"gitID":"tiny767"},"content":"Edits the remark for the first person to Likes to drink coffee."},{"lineNumber":284,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":285,"author":{"gitID":"tiny767"},"content":"- `remark 2 r/` +"},{"lineNumber":286,"author":{"gitID":"tiny767"},"content":"Removes the remark for the second person."},{"lineNumber":287,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":288,"author":{"gitID":"tiny767"},"content":"[NOTE]"},{"lineNumber":289,"author":{"gitID":"tiny767"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":290,"author":{"gitID":"tiny767"},"content":"* The index refers to the index number shown in the most recent listing. +"},{"lineNumber":291,"author":{"gitID":"tiny767"},"content":"* The index must be a positive integer 1, 2, 3, …​"},{"lineNumber":292,"author":{"gitID":"tiny767"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":293,"author":{"gitID":"tiny767"},"content":"//end::remark[]"},{"lineNumber":294,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":295,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Deleting a person : `delete`"},{"lineNumber":296,"author":{"gitID":"-"},"content":""},{"lineNumber":297,"author":{"gitID":"-"},"content":"* *Description:* Deletes the specified person\u0027s record from the Infinity Book. +"},{"lineNumber":298,"author":{"gitID":"-"},"content":"* *Format:* `delete INDEX`"},{"lineNumber":299,"author":{"gitID":"-"},"content":"* *Examples:*"},{"lineNumber":300,"author":{"gitID":"-"},"content":""},{"lineNumber":301,"author":{"gitID":"-"},"content":"- `list` +"},{"lineNumber":302,"author":{"gitID":"-"},"content":"`delete 2` +"},{"lineNumber":303,"author":{"gitID":"-"},"content":"Deletes the 2nd person in the Infinity Book."},{"lineNumber":304,"author":{"gitID":"-"},"content":"- `find Betsy` +"},{"lineNumber":305,"author":{"gitID":"-"},"content":"`delete 1` +"},{"lineNumber":306,"author":{"gitID":"-"},"content":"Deletes the 1st person in the results of the `find` command."},{"lineNumber":307,"author":{"gitID":"-"},"content":""},{"lineNumber":308,"author":{"gitID":"-"},"content":"****"},{"lineNumber":309,"author":{"gitID":"-"},"content":"* Deletes the person at the specified `INDEX`."},{"lineNumber":310,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":311,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":312,"author":{"gitID":"-"},"content":"****"},{"lineNumber":313,"author":{"gitID":"-"},"content":""},{"lineNumber":314,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Clearing all entries : `clear`"},{"lineNumber":315,"author":{"gitID":"-"},"content":""},{"lineNumber":316,"author":{"gitID":"-"},"content":"* *Description:* Clears all entries from the Infinity Book. +"},{"lineNumber":317,"author":{"gitID":"-"},"content":"* *Format:* `clear`"},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Navigating Infinity Book"},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Listing all candidates : `list`"},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"* *Description:* Shows a list of all candidates in the Infinity Book. +"},{"lineNumber":324,"author":{"gitID":"-"},"content":"* *Format:* `list`"},{"lineNumber":325,"author":{"gitID":"-"},"content":""},{"lineNumber":326,"author":{"gitID":"-"},"content":"// tag::findall[]"},{"lineNumber":327,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Finding candidates by name, phone, email, and tags: `find`"},{"lineNumber":328,"author":{"gitID":"-"},"content":""},{"lineNumber":329,"author":{"gitID":"-"},"content":"Finds candidates whose names, phone numbers, emails, or tags contain any of the given keywords. +"},{"lineNumber":330,"author":{"gitID":"-"},"content":""},{"lineNumber":331,"author":{"gitID":"-"},"content":"*Format:* `find KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":332,"author":{"gitID":"-"},"content":""},{"lineNumber":333,"author":{"gitID":"-"},"content":"****"},{"lineNumber":334,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`."},{"lineNumber":335,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`."},{"lineNumber":336,"author":{"gitID":"-"},"content":"* Only candidate\u0027s name, phone number, email, and tags are searched."},{"lineNumber":337,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`."},{"lineNumber":338,"author":{"gitID":"-"},"content":"* Candidates matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":339,"author":{"gitID":"-"},"content":"****"},{"lineNumber":340,"author":{"gitID":"-"},"content":""},{"lineNumber":341,"author":{"gitID":"-"},"content":"*Examples:*"},{"lineNumber":342,"author":{"gitID":"-"},"content":"- `find Alex 93210283` +"},{"lineNumber":343,"author":{"gitID":"-"},"content":"Returns `Alex Yeoh`, `Charlotte Oliveiro`, and `Alex Smith` whose names and phone numbers match with the given keywords."},{"lineNumber":344,"author":{"gitID":"-"},"content":""},{"lineNumber":345,"author":{"gitID":"-"},"content":"image::Find.png[width\u003d\"300\"]"},{"lineNumber":346,"author":{"gitID":"-"},"content":"_Figure._ Person list after finding with keywords `Alex` and `93210283`."},{"lineNumber":347,"author":{"gitID":"-"},"content":"//end::findall[]"},{"lineNumber":348,"author":{"gitID":"-"},"content":""},{"lineNumber":349,"author":{"gitID":"deeheenguyen"},"content":"//tag::viewcommand[]"},{"lineNumber":350,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Viewing a person: `view`"},{"lineNumber":351,"author":{"gitID":"-"},"content":""},{"lineNumber":352,"author":{"gitID":"deeheenguyen"},"content":"* *Description:* viewing the person records and linking page locating by emailID +"},{"lineNumber":353,"author":{"gitID":"deeheenguyen"},"content":"* *Format:* `view EmailID`"},{"lineNumber":354,"author":{"gitID":"deeheenguyen"},"content":"* *Examples:* `view abcd@gmail.com`"},{"lineNumber":355,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":356,"author":{"gitID":"deeheenguyen"},"content":"image::viewCommand.png[width\u003d\"300\"]"},{"lineNumber":357,"author":{"gitID":"-"},"content":"- Returns the person whose email is `john@gmail.com` +"},{"lineNumber":358,"author":{"gitID":"-"},"content":"- Displays all the person\u0027s information and resume in the browser panel."},{"lineNumber":359,"author":{"gitID":"-"},"content":""},{"lineNumber":360,"author":{"gitID":"deeheenguyen"},"content":"****"},{"lineNumber":361,"author":{"gitID":"deeheenguyen"},"content":"* The email needs to be correct format."},{"lineNumber":362,"author":{"gitID":"deeheenguyen"},"content":"* Only one person returned since email is unique."},{"lineNumber":363,"author":{"gitID":"deeheenguyen"},"content":"****"},{"lineNumber":364,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":365,"author":{"gitID":"deeheenguyen"},"content":"[NOTE]"},{"lineNumber":366,"author":{"gitID":"deeheenguyen"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":367,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":368,"author":{"gitID":"deeheenguyen"},"content":"* The email needs to be correct format. +"},{"lineNumber":369,"author":{"gitID":"deeheenguyen"},"content":"* Only one person returned since email is unique."},{"lineNumber":370,"author":{"gitID":"deeheenguyen"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":371,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":372,"author":{"gitID":"deeheenguyen"},"content":"IMPORTANT: If there are two persons with same email, the `viewcommand` will render URL of the first person +"},{"lineNumber":373,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":374,"author":{"gitID":"deeheenguyen"},"content":"IMPORTANT: When a person has no linked page, it will display black board in the browser panel."},{"lineNumber":375,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":376,"author":{"gitID":"deeheenguyen"},"content":"//end::viewcommand[]"},{"lineNumber":377,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":378,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Selecting a person : `select`"},{"lineNumber":379,"author":{"gitID":"-"},"content":""},{"lineNumber":380,"author":{"gitID":"-"},"content":"* *Description:* Selects the person identified by the index number used in the last person listing. +"},{"lineNumber":381,"author":{"gitID":"-"},"content":"* *Format:* `select INDEX`"},{"lineNumber":382,"author":{"gitID":"-"},"content":"* *Examples:*"},{"lineNumber":383,"author":{"gitID":"-"},"content":""},{"lineNumber":384,"author":{"gitID":"-"},"content":"- `list` +"},{"lineNumber":385,"author":{"gitID":"-"},"content":"`select 2` +"},{"lineNumber":386,"author":{"gitID":"-"},"content":"Selects the 2nd person in the Infinity Book."},{"lineNumber":387,"author":{"gitID":"-"},"content":"- `find Betsy` +"},{"lineNumber":388,"author":{"gitID":"-"},"content":"`select 1` +"},{"lineNumber":389,"author":{"gitID":"-"},"content":"Selects the 1st person in the results of the `find` command."},{"lineNumber":390,"author":{"gitID":"-"},"content":"****"},{"lineNumber":391,"author":{"gitID":"-"},"content":"* Selects the person and loads the Google search page the person at the specified `INDEX`."},{"lineNumber":392,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":393,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":394,"author":{"gitID":"-"},"content":"****"},{"lineNumber":395,"author":{"gitID":"-"},"content":"// tag::report[]"},{"lineNumber":396,"author":{"gitID":"-"},"content":""},{"lineNumber":397,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Dashboard Reporting"},{"lineNumber":398,"author":{"gitID":"-"},"content":""},{"lineNumber":399,"author":{"gitID":"-"},"content":"Infinity Book is tailored to optimize recruiters\u0027 speed."},{"lineNumber":400,"author":{"gitID":"-"},"content":"Aligning with this vision, Report feature offers you an easy way to get statistics of the group of candidates tagged with a specific tag (which we call Population Tag) in few keystrokes."},{"lineNumber":401,"author":{"gitID":"-"},"content":""},{"lineNumber":402,"author":{"gitID":"-"},"content":"Each report is identified with a Population Tag: +"},{"lineNumber":403,"author":{"gitID":"-"},"content":""},{"lineNumber":404,"author":{"gitID":"-"},"content":"* Represented with the prefix `pop/` followed by the tag name of the Population Tag. Example: `pop/SEIntern`."},{"lineNumber":405,"author":{"gitID":"-"},"content":"* The name of Population Tag must be an alphanumeric string."},{"lineNumber":406,"author":{"gitID":"-"},"content":""},{"lineNumber":407,"author":{"gitID":"-"},"content":"In the report, you will find statistics of the group of all candidates tagged with Population Tag: +"},{"lineNumber":408,"author":{"gitID":"-"},"content":""},{"lineNumber":409,"author":{"gitID":"-"},"content":"* A bar chart showing all other tags owned by this group and number of owners for each tag."},{"lineNumber":410,"author":{"gitID":"-"},"content":"* A pie chart illustrating the numerical proportion of each tag."},{"lineNumber":411,"author":{"gitID":"-"},"content":"* A history panel listing statistics of this group at earlier points of time."},{"lineNumber":412,"author":{"gitID":"-"},"content":""},{"lineNumber":413,"author":{"gitID":"-"},"content":"// end::report[]"},{"lineNumber":414,"author":{"gitID":"-"},"content":"// tag::reportexample[]"},{"lineNumber":415,"author":{"gitID":"-"},"content":"*An example usage:*"},{"lineNumber":416,"author":{"gitID":"-"},"content":""},{"lineNumber":417,"author":{"gitID":"-"},"content":"You are recruiting Software Engineering interns, and you want to keep track of the number of candidates in each stage:"},{"lineNumber":418,"author":{"gitID":"-"},"content":"Screening, Interviewing, Offered, or Rejected. Given the a significant pool of applicants, this task is tedious, and"},{"lineNumber":419,"author":{"gitID":"-"},"content":"our Report feature is a solution.   +"},{"lineNumber":420,"author":{"gitID":"-"},"content":""},{"lineNumber":421,"author":{"gitID":"-"},"content":"Using our Report with Population Tag `SEIntern`, +"},{"lineNumber":422,"author":{"gitID":"-"},"content":""},{"lineNumber":423,"author":{"gitID":"-"},"content":"* To ensure your team keeps up with deadlines, you can monitor the whole recruiting pipeline using Report bar chart."},{"lineNumber":424,"author":{"gitID":"-"},"content":""},{"lineNumber":425,"author":{"gitID":"-"},"content":".Bar chart in `SEIntern` report"},{"lineNumber":426,"author":{"gitID":"-"},"content":"image::barchart.png[width\u003d\"400\"]"},{"lineNumber":427,"author":{"gitID":"-"},"content":""},{"lineNumber":428,"author":{"gitID":"-"},"content":"_Explanation:_ there are 11 candidates tagged with `SEIntern` in which 5 of them are tagged with `Screening`, 3 of them"},{"lineNumber":429,"author":{"gitID":"-"},"content":"are tagged with `Interviewing`, 1 of them is tagged with `Rejected`, and 2 of them are tagged with `Offered`."},{"lineNumber":430,"author":{"gitID":"-"},"content":""},{"lineNumber":431,"author":{"gitID":"-"},"content":"* To see the progress of your interns recruitment, you can view percentages of candidates in each stage using Report pie chart."},{"lineNumber":432,"author":{"gitID":"-"},"content":""},{"lineNumber":433,"author":{"gitID":"-"},"content":".Pie chart in `SEIntern` report"},{"lineNumber":434,"author":{"gitID":"-"},"content":"image::piechart.png[width\u003d\"400\"]"},{"lineNumber":435,"author":{"gitID":"-"},"content":""},{"lineNumber":436,"author":{"gitID":"-"},"content":"_Explanation:_ there are 11 tags that candidates tagged with `SEIntern` has in total, and 45% of them are `Screening`,"},{"lineNumber":437,"author":{"gitID":"-"},"content":"27% are `Interviewing`, 18% are `Offered`, and 9% are `Rejected`."},{"lineNumber":438,"author":{"gitID":"-"},"content":""},{"lineNumber":439,"author":{"gitID":"-"},"content":"* To analyze your team\u0027s productivity, you can track the speed at which tasks are done using the history list."},{"lineNumber":440,"author":{"gitID":"-"},"content":""},{"lineNumber":441,"author":{"gitID":"-"},"content":".History list in `SEIntern` report +"},{"lineNumber":442,"author":{"gitID":"-"},"content":"image::history copy.png[width\u003d\"400\"]"},{"lineNumber":443,"author":{"gitID":"-"},"content":""},{"lineNumber":444,"author":{"gitID":"-"},"content":"_Example in the firgure:_ At 14:10:24 04/06/2018, there are 9 candidates tagged with `Screening` in Infinity Book,"},{"lineNumber":445,"author":{"gitID":"-"},"content":"then at 16:36:55 04/12/2018, there are only 5 `Screening` candidates left."},{"lineNumber":446,"author":{"gitID":"-"},"content":""},{"lineNumber":447,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":448,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":449,"author":{"gitID":"-"},"content":"Date format is in **\"hh/mm/ss mm/dd/yyyy\"\"**."},{"lineNumber":450,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":451,"author":{"gitID":"-"},"content":"// end::reportexample[]"},{"lineNumber":452,"author":{"gitID":"-"},"content":"// tag::reportcommands[]"},{"lineNumber":453,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Viewing a report : `viewreport` or `vr` [Since v1.4]"},{"lineNumber":454,"author":{"gitID":"-"},"content":""},{"lineNumber":455,"author":{"gitID":"-"},"content":"Want to have bird\u0027s view statistics of a certain group of candidates? View a report using `viewreport` or `vr` command. +"},{"lineNumber":456,"author":{"gitID":"-"},"content":""},{"lineNumber":457,"author":{"gitID":"-"},"content":"*Format:*  `viewreport pop/POPULATION_TAG` or `vr pop/POPULATION_TAG`"},{"lineNumber":458,"author":{"gitID":"-"},"content":""},{"lineNumber":459,"author":{"gitID":"-"},"content":"*Example:* +"},{"lineNumber":460,"author":{"gitID":"-"},"content":"`viewreport pop/SEIntern` +"},{"lineNumber":461,"author":{"gitID":"-"},"content":"Displays statistics for candidates tagged with `SEIntern`."},{"lineNumber":462,"author":{"gitID":"-"},"content":""},{"lineNumber":463,"author":{"gitID":"-"},"content":".Infinity Book has displayed Report with Population Tag `SEIntern` in the right-most column."},{"lineNumber":464,"author":{"gitID":"-"},"content":"image::viewreport.png[width\u003d\"600\"]"},{"lineNumber":465,"author":{"gitID":"-"},"content":""},{"lineNumber":466,"author":{"gitID":"-"},"content":""},{"lineNumber":467,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":468,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":469,"author":{"gitID":"-"},"content":"When you execute a Report command, Infinity Book will show you a bar chart, a pie chart, and a history list in the right-most column."},{"lineNumber":470,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":471,"author":{"gitID":"-"},"content":""},{"lineNumber":472,"author":{"gitID":"-"},"content":"[WARNING]"},{"lineNumber":473,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":474,"author":{"gitID":"-"},"content":"* If there are no candidates tagged with the Population Tag you provide, Inifinity Book will not show you the pie chart. +"},{"lineNumber":475,"author":{"gitID":"-"},"content":""},{"lineNumber":476,"author":{"gitID":"-"},"content":"* If you provide multiple `POPULATION_TAG`, Infinity Book will take the last one."},{"lineNumber":477,"author":{"gitID":"-"},"content":"For example, when you execute `savereport pop/SEIntern pop/Computing`, Infinity Book will display the report for `Computing`. +"},{"lineNumber":478,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":479,"author":{"gitID":"-"},"content":""},{"lineNumber":480,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Saving a report : `savereport` or `sr` [Since v1.4]"},{"lineNumber":481,"author":{"gitID":"-"},"content":""},{"lineNumber":482,"author":{"gitID":"-"},"content":"Wish to save the current statistics for future reference? Saving the report using `savereport` or `sr` command. +"},{"lineNumber":483,"author":{"gitID":"-"},"content":""},{"lineNumber":484,"author":{"gitID":"-"},"content":"*Format:*  `savereport pop/REPORT_NAME` or `sr pop/REPORT_NAME`"},{"lineNumber":485,"author":{"gitID":"-"},"content":""},{"lineNumber":486,"author":{"gitID":"-"},"content":"*Example:* +"},{"lineNumber":487,"author":{"gitID":"-"},"content":"`savereport pop/SEIntern` +"},{"lineNumber":488,"author":{"gitID":"-"},"content":"Saves the current statistics for candidates tagged with `SEIntern` at this current time."},{"lineNumber":489,"author":{"gitID":"-"},"content":"Infinity Book will add a new entry to the history list in the report."},{"lineNumber":490,"author":{"gitID":"-"},"content":""},{"lineNumber":491,"author":{"gitID":"-"},"content":".Infinity Book has saved Report with population Tag `SEIntern`. In the right-most column, the history list includes all statistics you have saved."},{"lineNumber":492,"author":{"gitID":"-"},"content":"image::savereport.png[width\u003d\"600\"]"},{"lineNumber":493,"author":{"gitID":"-"},"content":""},{"lineNumber":494,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":495,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":496,"author":{"gitID":"-"},"content":"* Date format is in **\"hh/mm/ss mm/dd/yyyy\"\"**."},{"lineNumber":497,"author":{"gitID":"-"},"content":""},{"lineNumber":498,"author":{"gitID":"-"},"content":"* To keep transparency, saved reports in Inifnity Book are immutable,"},{"lineNumber":499,"author":{"gitID":"-"},"content":"which means you cannot edit or delete saved reports. You also cannot undo `savereport` command."},{"lineNumber":500,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":501,"author":{"gitID":"-"},"content":""},{"lineNumber":502,"author":{"gitID":"-"},"content":"WARNING: If you provide multiple `POPULATION_TAG`, Infinity Book will take the last one. For example, when you execute `viewreport pop/SEIntern pop/Computing`, Infinity Book will save the report for `Computing`."},{"lineNumber":503,"author":{"gitID":"-"},"content":""},{"lineNumber":504,"author":{"gitID":"-"},"content":"// end::reportcommands[]"},{"lineNumber":505,"author":{"gitID":"-"},"content":""},{"lineNumber":506,"author":{"gitID":"-"},"content":"//tag::jobposting[]"},{"lineNumber":507,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Job Postings"},{"lineNumber":508,"author":{"gitID":"-"},"content":""},{"lineNumber":509,"author":{"gitID":"-"},"content":"In line with the vision of offering end to end support, Infinity Book offers recruiters a very efficient way to keep track of job vacancies and match candidates to these positions. +"},{"lineNumber":510,"author":{"gitID":"-"},"content":""},{"lineNumber":511,"author":{"gitID":"-"},"content":"This section details commands for managing job postings."},{"lineNumber":512,"author":{"gitID":"-"},"content":""},{"lineNumber":513,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Add Job Posting"},{"lineNumber":514,"author":{"gitID":"-"},"content":"Want to add a newly available job vacancy to IB and match candidates to this role? Add a job posting using the `postjob` command."},{"lineNumber":515,"author":{"gitID":"-"},"content":""},{"lineNumber":516,"author":{"gitID":"-"},"content":"*Format:* `postjob j/JOB TITLE l/LOCATION t/[TAGS] s/SKILLS`"},{"lineNumber":517,"author":{"gitID":"-"},"content":""},{"lineNumber":518,"author":{"gitID":"-"},"content":"*Examples:* `postjob j/Backend Engineer l/Singapore t/FreshGrad s/Java`"},{"lineNumber":519,"author":{"gitID":"-"},"content":""},{"lineNumber":520,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":521,"author":{"gitID":"-"},"content":"Job postings are matched to candidates on the basis of location, skills and tags. To neglect any of these during matching, set the field to \u0027ALL\u0027."},{"lineNumber":522,"author":{"gitID":"-"},"content":""},{"lineNumber":523,"author":{"gitID":"-"},"content":".PostJob Command adds Jobs into the Job Postings panel as shown."},{"lineNumber":524,"author":{"gitID":"-"},"content":"image::postjob.JPG.png[width\u003d\"500\"]"},{"lineNumber":525,"author":{"gitID":"-"},"content":""},{"lineNumber":526,"author":{"gitID":"-"},"content":"//end::jobposting[]"},{"lineNumber":527,"author":{"gitID":"-"},"content":""},{"lineNumber":528,"author":{"gitID":"-"},"content":"//tag::editjob[]"},{"lineNumber":529,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Edit Job Command"},{"lineNumber":530,"author":{"gitID":"-"},"content":""},{"lineNumber":531,"author":{"gitID":"-"},"content":"Want to change the parameters of a job after creating? IB provides the flexibility to edit an existing job posting through the `editjob` command."},{"lineNumber":532,"author":{"gitID":"-"},"content":""},{"lineNumber":533,"author":{"gitID":"-"},"content":"*Format:* `editjob [-add-tag/-delete-tag] INDEX [j/JOBTITLE] [l/LOCATION] [s/SKILLS] [t/TAG]`"},{"lineNumber":534,"author":{"gitID":"-"},"content":""},{"lineNumber":535,"author":{"gitID":"-"},"content":"Specifying -add-tag or -delete-tag causes editjob command to specifically add or delete the specified tag for the index specified tag. If unspecified, the tag list is over-written"},{"lineNumber":536,"author":{"gitID":"-"},"content":"by the newly specified set of tags. This implementation mirrors the edit command."},{"lineNumber":537,"author":{"gitID":"-"},"content":""},{"lineNumber":538,"author":{"gitID":"-"},"content":"*Examples:* `editjob 1 j/Backend Engineer l/Singapore` +"},{"lineNumber":539,"author":{"gitID":"-"},"content":"`editjob 1 -delete-tag j/Backend Engineer l/Singapore`"},{"lineNumber":540,"author":{"gitID":"-"},"content":""},{"lineNumber":541,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":542,"author":{"gitID":"-"},"content":"At least one field must be provided for the edit command to function as expected."},{"lineNumber":543,"author":{"gitID":"-"},"content":""},{"lineNumber":544,"author":{"gitID":"-"},"content":".`editjob` edits the first job posting as marked in diagram."},{"lineNumber":545,"author":{"gitID":"-"},"content":"image::editjob.JPG.png[width\u003d\"500\"]"},{"lineNumber":546,"author":{"gitID":"-"},"content":""},{"lineNumber":547,"author":{"gitID":"-"},"content":"//end::editjob[]"},{"lineNumber":548,"author":{"gitID":"-"},"content":"//tag::jobpostingdelete[]"},{"lineNumber":549,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Delete Job Command"},{"lineNumber":550,"author":{"gitID":"-"},"content":""},{"lineNumber":551,"author":{"gitID":"-"},"content":"Want to remove a job posting from IB after creating? IB provides a `deletejob` command to delete any existing job posting from memory."},{"lineNumber":552,"author":{"gitID":"-"},"content":""},{"lineNumber":553,"author":{"gitID":"-"},"content":"*Format:* `deletejob INDEX`"},{"lineNumber":554,"author":{"gitID":"-"},"content":""},{"lineNumber":555,"author":{"gitID":"-"},"content":"*Examples:* `deletejob 1`"},{"lineNumber":556,"author":{"gitID":"-"},"content":""},{"lineNumber":557,"author":{"gitID":"-"},"content":".`deletejob` deletes the job posting at the specified index in the most recent listing from Figure as shown."},{"lineNumber":558,"author":{"gitID":"-"},"content":"image::deletejob.JPG.png[width\u003d\"500\"]"},{"lineNumber":559,"author":{"gitID":"-"},"content":""},{"lineNumber":560,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":561,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":562,"author":{"gitID":"-"},"content":"Index to be used as displayed in the panel."},{"lineNumber":563,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":564,"author":{"gitID":"-"},"content":""},{"lineNumber":565,"author":{"gitID":"-"},"content":"//end::jobpostingdelete[]"},{"lineNumber":566,"author":{"gitID":"-"},"content":""},{"lineNumber":567,"author":{"gitID":"-"},"content":"//tag::jobpostingmatch[]"},{"lineNumber":568,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Match Job Command"},{"lineNumber":569,"author":{"gitID":"-"},"content":""},{"lineNumber":570,"author":{"gitID":"-"},"content":"To match an existing job posting to potential candidates, use the `matchjob` command to filter out candidates for the chosen job."},{"lineNumber":571,"author":{"gitID":"-"},"content":""},{"lineNumber":572,"author":{"gitID":"-"},"content":"Job matching is done on the basis of location, skills and tags. To disregard a parameter during matching, set it to \u0027ALL\u0027 using `postjob` or `editjob`."},{"lineNumber":573,"author":{"gitID":"-"},"content":""},{"lineNumber":574,"author":{"gitID":"-"},"content":"*Format:* `matchjob INDEX`"},{"lineNumber":575,"author":{"gitID":"-"},"content":""},{"lineNumber":576,"author":{"gitID":"-"},"content":"*Example:* `matchjob 1`"},{"lineNumber":577,"author":{"gitID":"-"},"content":""},{"lineNumber":578,"author":{"gitID":"-"},"content":".MatchJob command filters the Candidates as per Job, as shown above."},{"lineNumber":579,"author":{"gitID":"-"},"content":"image::matchJob.JPG.png[width\u003d\"500\"]"},{"lineNumber":580,"author":{"gitID":"-"},"content":"//end::jobpostingmatch[]"},{"lineNumber":581,"author":{"gitID":"-"},"content":""},{"lineNumber":582,"author":{"gitID":"-"},"content":"//tag::jobpostinglist[]"},{"lineNumber":583,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Listing all jobs : `listjobs`"},{"lineNumber":584,"author":{"gitID":"-"},"content":""},{"lineNumber":585,"author":{"gitID":"-"},"content":"* *Description:* Shows a list of all jobs posted in the Infinity Book. +"},{"lineNumber":586,"author":{"gitID":"-"},"content":"* *Format:* `listjobs`"},{"lineNumber":587,"author":{"gitID":"-"},"content":""},{"lineNumber":588,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Finding jobs by Job Title, Location, and tags: `findjob`"},{"lineNumber":589,"author":{"gitID":"-"},"content":""},{"lineNumber":590,"author":{"gitID":"-"},"content":"Finds jobs whose job titles, locations, or tags contain any of the given keywords. +"},{"lineNumber":591,"author":{"gitID":"-"},"content":""},{"lineNumber":592,"author":{"gitID":"-"},"content":"*Format:* `find KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":593,"author":{"gitID":"-"},"content":""},{"lineNumber":594,"author":{"gitID":"-"},"content":"****"},{"lineNumber":595,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `backend` will match `Backend`."},{"lineNumber":596,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Engineer Backend` will match `Backend Engineer`."},{"lineNumber":597,"author":{"gitID":"-"},"content":"* Only job\u0027s title, location and tags are searched."},{"lineNumber":598,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Eng` will not match `Engineer`."},{"lineNumber":599,"author":{"gitID":"-"},"content":"* Jobs matching at least one keyword will be returned (i.e. `OR` search). e.g. `Engineer` will return `Backend Engineer`, `Frontend Engineer`"},{"lineNumber":600,"author":{"gitID":"-"},"content":"****"},{"lineNumber":601,"author":{"gitID":"-"},"content":""},{"lineNumber":602,"author":{"gitID":"-"},"content":"*Example:* `findjob Backend Geylang` +"},{"lineNumber":603,"author":{"gitID":"-"},"content":"Returns `Backend Engineer`, `Frontend Engineer`, and `Backend Tester` whose job titles and locations match with the given keywords."},{"lineNumber":604,"author":{"gitID":"-"},"content":""},{"lineNumber":605,"author":{"gitID":"-"},"content":".Job list after finding with keywords `backend` and `geylang`."},{"lineNumber":606,"author":{"gitID":"-"},"content":"image::findjob.png[width\u003d\"700\"]"},{"lineNumber":607,"author":{"gitID":"-"},"content":""},{"lineNumber":608,"author":{"gitID":"-"},"content":"//end::jobpostinglist[]"},{"lineNumber":609,"author":{"gitID":"-"},"content":""},{"lineNumber":610,"author":{"gitID":"deeheenguyen"},"content":"//tag::interviewmanagement[]"},{"lineNumber":611,"author":{"gitID":"-"},"content":""},{"lineNumber":612,"author":{"gitID":"deeheenguyen"},"content":"\u003d\u003d\u003d Managing Interview"},{"lineNumber":613,"author":{"gitID":"deeheenguyen"},"content":"This section describes command available for managing interview in the Infinity Book."},{"lineNumber":614,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":615,"author":{"gitID":"deeheenguyen"},"content":"\u003d\u003d\u003d\u003d Add Interview Command"},{"lineNumber":616,"author":{"gitID":"deeheenguyen"},"content":"* *Description:* Add a Interview to Infinity Book."},{"lineNumber":617,"author":{"gitID":"deeheenguyen"},"content":"* *Format:* `addInterview i/Interview Title n/Interviewee l/LOCATION d/DATE`"},{"lineNumber":618,"author":{"gitID":"deeheenguyen"},"content":"* *Examples:* `addInterview i/SE Interview n/John l/One North d/30.1.2018`"},{"lineNumber":619,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":620,"author":{"gitID":"-"},"content":".Add Interview command adds a new interview, as shown above."},{"lineNumber":621,"author":{"gitID":"deeheenguyen"},"content":"image::addInterviewCommand.png[width\u003d\"300\"]"},{"lineNumber":622,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":623,"author":{"gitID":"deeheenguyen"},"content":"- Add the interview with predicate name, location, and date"},{"lineNumber":624,"author":{"gitID":"deeheenguyen"},"content":"- Displays the added interview in list of Interview panel."},{"lineNumber":625,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":626,"author":{"gitID":"deeheenguyen"},"content":"\u003d\u003d\u003d\u003d List Interview"},{"lineNumber":627,"author":{"gitID":"deeheenguyen"},"content":"* *Description:* List all interviews of Infinity Book."},{"lineNumber":628,"author":{"gitID":"deeheenguyen"},"content":"* *Format:* `listInterview`"},{"lineNumber":629,"author":{"gitID":"deeheenguyen"},"content":"* *Example:* `listInterview`"},{"lineNumber":630,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":631,"author":{"gitID":"-"},"content":".List Interview command lists all interviews, as shown above."},{"lineNumber":632,"author":{"gitID":"deeheenguyen"},"content":"image::ListInterview.png[width\u003d\"300\"]"},{"lineNumber":633,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":634,"author":{"gitID":"deeheenguyen"},"content":"\u003d\u003d\u003d\u003d Delete Interview"},{"lineNumber":635,"author":{"gitID":"deeheenguyen"},"content":"* *Description:* Remove an interview from Infinity Book using the index from latest listing."},{"lineNumber":636,"author":{"gitID":"deeheenguyen"},"content":"* *Format:* `deleteInterview INDEX`"},{"lineNumber":637,"author":{"gitID":"deeheenguyen"},"content":"* *Examples:* `deleteInterview 1`"},{"lineNumber":638,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":639,"author":{"gitID":"-"},"content":".List Interview command lists all interviews, as shown above."},{"lineNumber":640,"author":{"gitID":"deeheenguyen"},"content":"image::DeleteInterview.png[width\u003d\"300\"]"},{"lineNumber":641,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":642,"author":{"gitID":"deeheenguyen"},"content":"****"},{"lineNumber":643,"author":{"gitID":"deeheenguyen"},"content":"* Deletes the interview at the specified `INDEX`."},{"lineNumber":644,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":645,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":646,"author":{"gitID":"-"},"content":"****"},{"lineNumber":647,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":648,"author":{"gitID":"deeheenguyen"},"content":"//end::interviewmanagement[]"},{"lineNumber":649,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":650,"author":{"gitID":"tiny767"},"content":"// tag::facebook[]"},{"lineNumber":651,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":652,"author":{"gitID":"tiny767"},"content":"\u003d\u003d\u003d Social Media (FB, Linkedin) Integration"},{"lineNumber":653,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":654,"author":{"gitID":"tiny767"},"content":"\u003d\u003d\u003d\u003d Facebook Login [Since v1.4]"},{"lineNumber":655,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":656,"author":{"gitID":"tiny767"},"content":"* *Description:* Connect your Facebook account to InfinityBook"},{"lineNumber":657,"author":{"gitID":"tiny767"},"content":"* *Format:* `facebooklogin`"},{"lineNumber":658,"author":{"gitID":"tiny767"},"content":"* *Alias:* `fblogin`"},{"lineNumber":659,"author":{"gitID":"tiny767"},"content":"* *Example:* `facebooklogin`"},{"lineNumber":660,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":661,"author":{"gitID":"tiny767"},"content":"[NOTE]"},{"lineNumber":662,"author":{"gitID":"tiny767"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":663,"author":{"gitID":"tiny767"},"content":"* Any arguments supplied after `facebooklogin` or `fblogin` will be ignored +"},{"lineNumber":664,"author":{"gitID":"tiny767"},"content":"* For example, `facebooklogin a b c 1 2 3` will be treated the same as `facebooklogin`"},{"lineNumber":665,"author":{"gitID":"tiny767"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":666,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":667,"author":{"gitID":"tiny767"},"content":"You will be prompted by a Facebook authorization page (displayed in the right-most panel)"},{"lineNumber":668,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":669,"author":{"gitID":"tiny767"},"content":"You can key in your facebook credentials. InfinityBook is then connected to that facebook account and you can use other"},{"lineNumber":670,"author":{"gitID":"tiny767"},"content":"features that Infinity Book offers."},{"lineNumber":671,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":672,"author":{"gitID":"tiny767"},"content":"[NOTE]"},{"lineNumber":673,"author":{"gitID":"tiny767"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":674,"author":{"gitID":"tiny767"},"content":"* If there is no Internet connection, the right-most panel will display a blank page. You can try login again at a later time."},{"lineNumber":675,"author":{"gitID":"tiny767"},"content":"* If you are already logged-in, the command will simple re-direct you to your facebook page instead of displaying the login page"},{"lineNumber":676,"author":{"gitID":"tiny767"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":677,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":678,"author":{"gitID":"tiny767"},"content":"\u003d\u003d\u003d\u003d Make a post to facebook wall: `facebookpost` [Since v1.5rc]"},{"lineNumber":679,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":680,"author":{"gitID":"tiny767"},"content":"* *Description:* Posting a message to your facebook wall"},{"lineNumber":681,"author":{"gitID":"tiny767"},"content":"* *Format:* `facebookpost [MESSAGE]` +"},{"lineNumber":682,"author":{"gitID":"tiny767"},"content":"[MESSAGE] is the message that users wants to post"},{"lineNumber":683,"author":{"gitID":"tiny767"},"content":"* *Alias:* `fbpost [MESSAGE]`"},{"lineNumber":684,"author":{"gitID":"tiny767"},"content":"* *Example:* `facebookpost Good morning!`"},{"lineNumber":685,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":686,"author":{"gitID":"tiny767"},"content":"[NOTE]"},{"lineNumber":687,"author":{"gitID":"tiny767"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":688,"author":{"gitID":"tiny767"},"content":"* Note that the current Facebook API does not allow an app to post on your behalf. Thus, we need to add your facebook account"},{"lineNumber":689,"author":{"gitID":"tiny767"},"content":"manually to our app in the Facebook Developer platform before you can use this feature. +"},{"lineNumber":690,"author":{"gitID":"tiny767"},"content":"* We have nevertheless created a test facebook account for you to try out this feature +"},{"lineNumber":691,"author":{"gitID":"tiny767"},"content":"* username: infinitybook6@gmail.com +"},{"lineNumber":692,"author":{"gitID":"tiny767"},"content":"* password: 1d2c3b4a +"},{"lineNumber":693,"author":{"gitID":"tiny767"},"content":"* If you have logged in to your personal account and want to switch to this account. Simply re-launch the app."},{"lineNumber":694,"author":{"gitID":"tiny767"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":695,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":696,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":697,"author":{"gitID":"tiny767"},"content":"[NOTE]"},{"lineNumber":698,"author":{"gitID":"tiny767"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":699,"author":{"gitID":"tiny767"},"content":"* If you are not yet logged in to facebook (by using the command `facebooklogin`), you will be re-directed to the login page. +"},{"lineNumber":700,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":701,"author":{"gitID":"tiny767"},"content":"IMPORTANT: After logging in, you need to make the `facebookpost` command again to post the message. +"},{"lineNumber":702,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":703,"author":{"gitID":"tiny767"},"content":"* You can use the facebook page in the right-most panel to review your post"},{"lineNumber":704,"author":{"gitID":"tiny767"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":705,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":706,"author":{"gitID":"tiny767"},"content":"IMPORTANT: Even when you are logged in and you use the correct syntax, your message might not be posted to Facebook if it is"},{"lineNumber":707,"author":{"gitID":"tiny767"},"content":"rejected at Facebook\u0027s end. This might be due to errors such as duplicate post, \u0027not enough permission\u0027 or change in Facebook API."},{"lineNumber":708,"author":{"gitID":"tiny767"},"content":"However, under normal circumstances, you can expect that the message will be posted."},{"lineNumber":709,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":710,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":711,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":712,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":713,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":714,"author":{"gitID":"tiny767"},"content":"// end::facebook[]"},{"lineNumber":715,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":716,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Miscellaneous"},{"lineNumber":717,"author":{"gitID":"-"},"content":""},{"lineNumber":718,"author":{"gitID":"tiny767"},"content":"//tag::theme[]"},{"lineNumber":719,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Changing theme : `theme` [Since v1.3]"},{"lineNumber":720,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":721,"author":{"gitID":"tiny767"},"content":"* *Description:* Change the theme of InfinityBook +"},{"lineNumber":722,"author":{"gitID":"tiny767"},"content":"* *Format:* `theme [THEME_NAME]` +"},{"lineNumber":723,"author":{"gitID":"tiny767"},"content":"`[THEME_NAME]` can be `morning`, `dark`, or `light`."},{"lineNumber":724,"author":{"gitID":"tiny767"},"content":"* *Alias:* `t [THEME_NAME]`"},{"lineNumber":725,"author":{"gitID":"tiny767"},"content":"* *Examples:*"},{"lineNumber":726,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":727,"author":{"gitID":"tiny767"},"content":"- `theme light` +"},{"lineNumber":728,"author":{"gitID":"tiny767"},"content":"Change the user interface to the \u0027light\u0027 theme"},{"lineNumber":729,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":730,"author":{"gitID":"tiny767"},"content":"[NOTE]"},{"lineNumber":731,"author":{"gitID":"tiny767"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":732,"author":{"gitID":"tiny767"},"content":"* [THEME_NAME] is case-insensitive. +"},{"lineNumber":733,"author":{"gitID":"tiny767"},"content":"* For example, `theme morning` and `theme MORNING` are treated the same"},{"lineNumber":734,"author":{"gitID":"tiny767"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":735,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":736,"author":{"gitID":"tiny767"},"content":"//end::theme[]"},{"lineNumber":737,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":738,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":739,"author":{"gitID":"-"},"content":"* *Description:* Opens the User Guide in a new window +"},{"lineNumber":740,"author":{"gitID":"-"},"content":"* *Format:* `help`p"},{"lineNumber":741,"author":{"gitID":"-"},"content":""},{"lineNumber":742,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Listing entered commands : `history`"},{"lineNumber":743,"author":{"gitID":"-"},"content":""},{"lineNumber":744,"author":{"gitID":"-"},"content":"* *Description:* Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":745,"author":{"gitID":"-"},"content":"* *Format:* `history`"},{"lineNumber":746,"author":{"gitID":"-"},"content":""},{"lineNumber":747,"author":{"gitID":"-"},"content":"****"},{"lineNumber":748,"author":{"gitID":"-"},"content":"* Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":749,"author":{"gitID":"-"},"content":"****"},{"lineNumber":750,"author":{"gitID":"-"},"content":""},{"lineNumber":751,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":752,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":753,"author":{"gitID":"-"},"content":""},{"lineNumber":754,"author":{"gitID":"-"},"content":"* *Description:* Restores the Infinity Book to the state before the previous _undoable_ command was executed. +"},{"lineNumber":755,"author":{"gitID":"-"},"content":"* *Format:* `undo`"},{"lineNumber":756,"author":{"gitID":"-"},"content":"* *Examples:*"},{"lineNumber":757,"author":{"gitID":"-"},"content":""},{"lineNumber":758,"author":{"gitID":"-"},"content":"- `delete 1` +"},{"lineNumber":759,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":760,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":761,"author":{"gitID":"-"},"content":""},{"lineNumber":762,"author":{"gitID":"-"},"content":"- `select 1` +"},{"lineNumber":763,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":764,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":765,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":766,"author":{"gitID":"-"},"content":""},{"lineNumber":767,"author":{"gitID":"-"},"content":"- `delete 1` +"},{"lineNumber":768,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":769,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":770,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":771,"author":{"gitID":"-"},"content":""},{"lineNumber":772,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":773,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":774,"author":{"gitID":"-"},"content":"Undoable commands: those commands that modify the Infinity Book\u0027s content (`add`, `delete`, `edit` and `clear`)."},{"lineNumber":775,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":776,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Redoing the previously undone command : `redo`"},{"lineNumber":777,"author":{"gitID":"-"},"content":""},{"lineNumber":778,"author":{"gitID":"-"},"content":"* *Description:* Reverses the most recent `undo` command. +"},{"lineNumber":779,"author":{"gitID":"-"},"content":"* *Format:* `redo`"},{"lineNumber":780,"author":{"gitID":"-"},"content":""},{"lineNumber":781,"author":{"gitID":"-"},"content":"* *Examples:*"},{"lineNumber":782,"author":{"gitID":"-"},"content":""},{"lineNumber":783,"author":{"gitID":"-"},"content":"- `delete 1` +"},{"lineNumber":784,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":785,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":786,"author":{"gitID":"-"},"content":""},{"lineNumber":787,"author":{"gitID":"-"},"content":"- `delete 1` +"},{"lineNumber":788,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":789,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":790,"author":{"gitID":"-"},"content":""},{"lineNumber":791,"author":{"gitID":"-"},"content":"- `delete 1` +"},{"lineNumber":792,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":793,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":794,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":795,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":796,"author":{"gitID":"-"},"content":"`redo` (reapplies the `clear` command) +"},{"lineNumber":797,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":798,"author":{"gitID":"-"},"content":""},{"lineNumber":799,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":800,"author":{"gitID":"-"},"content":""},{"lineNumber":801,"author":{"gitID":"-"},"content":"* *Description:* Exits the program. +"},{"lineNumber":802,"author":{"gitID":"-"},"content":"* *Format:* `exit`"},{"lineNumber":803,"author":{"gitID":"-"},"content":""},{"lineNumber":804,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Saving the data"},{"lineNumber":805,"author":{"gitID":"-"},"content":""},{"lineNumber":806,"author":{"gitID":"-"},"content":"Address book data are saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":807,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":808,"author":{"gitID":"-"},"content":""},{"lineNumber":809,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":810,"author":{"gitID":"-"},"content":""},{"lineNumber":811,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":812,"author":{"gitID":"-"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Infinity Book folder."},{"lineNumber":813,"author":{"gitID":"-"},"content":""},{"lineNumber":814,"author":{"gitID":"-"},"content":"// tag::faq[]"},{"lineNumber":815,"author":{"gitID":"-"},"content":"*Q*: How do I check if Infinity Book is compatible with my computer? +"},{"lineNumber":816,"author":{"gitID":"-"},"content":"*A*: Infinity Book is compatible with Windows, Mac OS and Ubuntu with Java `1.8.0_60` or later installed. Compatibility with other link:#unix[UNIX] distributions is not guaranteed. +"},{"lineNumber":817,"author":{"gitID":"-"},"content":""},{"lineNumber":818,"author":{"gitID":"-"},"content":"****"},{"lineNumber":819,"author":{"gitID":"-"},"content":"To check your Java Version:"},{"lineNumber":820,"author":{"gitID":"-"},"content":""},{"lineNumber":821,"author":{"gitID":"-"},"content":"* MAC OS/ OS-X Users: +"},{"lineNumber":822,"author":{"gitID":"-"},"content":"1. Open Spotlight using Command + Space"},{"lineNumber":823,"author":{"gitID":"-"},"content":"2. Search for `Terminal` and open the application"},{"lineNumber":824,"author":{"gitID":"-"},"content":"3. In the terminal, copy paste the following command without enclosing double quotes to find your Java version:"},{"lineNumber":825,"author":{"gitID":"-"},"content":" `\"/Library/Internet\\ Plug-Ins/JavaAppletPlugin.plugin/Contents/Home/bin/java -version\"`"},{"lineNumber":826,"author":{"gitID":"-"},"content":"* Windows users: +"},{"lineNumber":827,"author":{"gitID":"-"},"content":"1. Open Run using Windows Key + R"},{"lineNumber":828,"author":{"gitID":"-"},"content":"2. Type `cmd` and press enter to open Command Prompt"},{"lineNumber":829,"author":{"gitID":"-"},"content":"3. In Command Prompt, enter the following command without enclosing double quotes to find your Java version:"},{"lineNumber":830,"author":{"gitID":"-"},"content":"`\"java -showversion\"`"},{"lineNumber":831,"author":{"gitID":"-"},"content":"* Ubuntu users: +"},{"lineNumber":832,"author":{"gitID":"-"},"content":"1. Open Terminal using Ctrl + Alt + T"},{"lineNumber":833,"author":{"gitID":"-"},"content":"2. In the terminal copy paste the following command without enclosing double quotes to find your Java vesion:"},{"lineNumber":834,"author":{"gitID":"-"},"content":"`\"java -v\"`"},{"lineNumber":835,"author":{"gitID":"-"},"content":"****"},{"lineNumber":836,"author":{"gitID":"-"},"content":"// end::faq[]"},{"lineNumber":837,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":838,"author":{"gitID":"-"},"content":""},{"lineNumber":839,"author":{"gitID":"-"},"content":"The following table summarises Infinity Book commands with suitable examples:"},{"lineNumber":840,"author":{"gitID":"-"},"content":""},{"lineNumber":841,"author":{"gitID":"-"},"content":"[width\u003d\"100%\",cols\u003d\"10%,\u003c45%,\u003c45%\",options\u003d\"header\",]"},{"lineNumber":842,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":843,"author":{"gitID":"-"},"content":"|Command |Command Format |Example"},{"lineNumber":844,"author":{"gitID":"-"},"content":"|Add Person|`n/NAME p/PHONE e/EMAIL a/ADDRESS s/SKILLS l/LINK [t/TAG]...` | ` add n/John Doe p/98765432 e/johnd@example.com a/311, Clementi Ave 2, #02-25 l/link s/CSSt/friends t/owesMoney`"},{"lineNumber":845,"author":{"gitID":"deeheenguyen"},"content":"|Add Interview | `addInterview i/INTERVIEW_TITLE n/INTERVIEWEE d/DATE l/INTERVIEW_LOCATION`| `addInterview i/SE Interview n/David"},{"lineNumber":846,"author":{"gitID":"-"},"content":"|Add Job|`postjob j/JOBTITLE l/LOCATION s/SKILLS [t/TAG]` | `postjob j/Backend Engineer l/Singapore s/SQL, Javascript t/FreshGrad`"},{"lineNumber":847,"author":{"gitID":"-"},"content":"|Clear |`clear`| `clear`"},{"lineNumber":848,"author":{"gitID":"-"},"content":"|Delete |`delete INDEX` |`delete 3`"},{"lineNumber":849,"author":{"gitID":"-"},"content":"|Delete Interview |`deleteInterview INDEX | `deleteInterview 3`"},{"lineNumber":850,"author":{"gitID":"-"},"content":"|Delete Job |`deletejob INDEX` | `deletejob 1`"},{"lineNumber":851,"author":{"gitID":"-"},"content":"|Edit |`edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [s/SKILL] [t/TAG]...` |`edit 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":852,"author":{"gitID":"-"},"content":"|Edit Job |`[j/JOBTITLE] [l/LOCATION] [s/SKILLS] [t/TAG]` | `editjob 1 j/Backend Engineer l/Singapore`"},{"lineNumber":853,"author":{"gitID":"-"},"content":"|Add tags to person |`edit -add-tag INDEX [t/TAG]...` |`edit -add-tag 2 t/Computing`"},{"lineNumber":854,"author":{"gitID":"-"},"content":"|Add tags to job |`editjob -add-tag INDEX [t/TAG]...` |`editjob -add-tag 2 t/Computing`"},{"lineNumber":855,"author":{"gitID":"-"},"content":"|Delete tags from a person |`edit -delete-tag INDEX [t/TAG]...` |`edit -delete-tag 2 t/Computing`"},{"lineNumber":856,"author":{"gitID":"-"},"content":"|Find |`find KEYWORD [MORE_KEYWORDS]` |`find James Jake`"},{"lineNumber":857,"author":{"gitID":"deeheenguyen"},"content":"|Find Interview | `FindInterview n/INTERVIEWEE`| `FindInterview David`"},{"lineNumber":858,"author":{"gitID":"-"},"content":"|Find Job |`findjob KEYWORD [MORE_KEYWORDS]` | `findjob frontend backend systems`"},{"lineNumber":859,"author":{"gitID":"-"},"content":"|Help |`help` |`help`"},{"lineNumber":860,"author":{"gitID":"-"},"content":"|History |`history` | `history`"},{"lineNumber":861,"author":{"gitID":"-"},"content":"|List People | `list`|`list`"},{"lineNumber":862,"author":{"gitID":"-"},"content":"|List Jobs |`listjobs` | `listjobs`"},{"lineNumber":863,"author":{"gitID":"-"},"content":"|Match Job |`matchjob INDEX` | `matchjob 2`"},{"lineNumber":864,"author":{"gitID":"-"},"content":"|Redo |`redo`|`redo`"},{"lineNumber":865,"author":{"gitID":"-"},"content":"|Select |`select INDEX` |`select 2`"},{"lineNumber":866,"author":{"gitID":"-"},"content":"|Undo |`undo` |`undo`"},{"lineNumber":867,"author":{"gitID":"deeheenguyen"},"content":"|View |`view emailID`| `view johnd@example.com`"},{"lineNumber":868,"author":{"gitID":"-"},"content":"|View Report |`viewreport pop/[POPULATION_TAG]` |`viewreport pop/SEIntern`"},{"lineNumber":869,"author":{"gitID":"-"},"content":"|Save Report |`savereport pop/[POPULATION_TAG]` |`savereport pop/SEIntern`"},{"lineNumber":870,"author":{"gitID":"tiny767"},"content":"|Add/ Edit remark |`remark INDEX r/[REMARK]` |`remark 1 r/Likes to go swimming`"},{"lineNumber":871,"author":{"gitID":"tiny767"},"content":"|Change theme |`theme [THEME_NAME]` |`theme light`"},{"lineNumber":872,"author":{"gitID":"tiny767"},"content":"|Log in to Facebook |`facebooklogin` |`facebooklogin`"},{"lineNumber":873,"author":{"gitID":"tiny767"},"content":"|Post to Facebook | `facebookpost [MESSAGE]` |`facebookpost Good morning!`"},{"lineNumber":874,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":875,"author":{"gitID":"-"},"content":""},{"lineNumber":876,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":877,"author":{"gitID":"-"},"content":""},{"lineNumber":878,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary +"},{"lineNumber":879,"author":{"gitID":"-"},"content":"* The following are some terms referenced in the User Guide: +"},{"lineNumber":880,"author":{"gitID":"-"},"content":"** [#unix]*UNIX*: Unix  is a family of multitasking, multiuser computer operating systems. Common UNIX operating systems include Linux, Fedora and MAC OS."},{"lineNumber":881,"author":{"gitID":"-"},"content":"** [#cli]*Command Line Interface*: A user interface in which the user executes and responds to an application through a specified text input where commands are typed."},{"lineNumber":882,"author":{"gitID":"-"},"content":"** [#gui]*Graphical User Interface*: A user interface in which the user interacts with the application through visual representations through menus, text, images, etc."}],"authorContributionMap":{"deeheenguyen":68,"-":703,"tiny767":111}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LINK_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LINK_DESC_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SKILL_DESC_AMY;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SKILL_DESC_BOB;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":27,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LINK_AMY;"},{"lineNumber":28,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LINK_BOB;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SKILL_AMY;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":71,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":72,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Person toAdd \u003d AMY;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":75,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + LINK_DESC_AMY + \"  \" + SKILL_DESC_AMY + \" \""},{"lineNumber":76,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND + \" \";"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withLink(VALID_LINK_BOB).withTags(VALID_TAG_FRIEND)"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                .withSkills(VALID_SKILL_AMY).build();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                + LINK_DESC_AMY + SKILL_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except phone -\u003e added */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withLink(VALID_LINK_AMY).withSkills(VALID_SKILL_AMY)"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":103,"author":{"gitID":"-"},"content":"                + LINK_DESC_AMY + SKILL_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except email -\u003e added */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withLink(VALID_LINK_AMY).withSkills(VALID_SKILL_AMY)"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                + LINK_DESC_AMY + SKILL_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except address -\u003e added */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).withLink(VALID_LINK_AMY).withTags(VALID_TAG_FRIEND)"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                .withSkills(VALID_SKILL_AMY).build();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_BOB"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                + LINK_DESC_AMY + SKILL_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        /* Case: add a person with tags, command with parameters in random order -\u003e added */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"},{"lineNumber":129,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + LINK_DESC_BOB + SKILL_DESC_BOB + EMAIL_DESC_BOB;"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        /* Case: add a person, missing tags -\u003e added */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person -\u003e rejected */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person except with different tags -\u003e rejected */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        // AddressBook#addPerson(Person)"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        /* Case: missing address -\u003e rejected */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY;"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC;"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":198,"author":{"gitID":"-"},"content":"                + LINK_DESC_AMY + SKILL_DESC_AMY + INVALID_TAG_DESC;"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Person toAdd) {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Person)"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Person toAdd) {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":245,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":254,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":262,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":272,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":273,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"deeheenguyen":3,"-":270}},{"path":"docs/team/tiny767.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d tiny767 - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"deeheenguyen"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"deeheenguyen"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":5,"author":{"gitID":"deeheenguyen"},"content":"\u003d\u003d PROJECT: Infinity Book"},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"\u003d\u003d Overview"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"Infinity Book (IB) is an address book application for Tech recruiters, providing end-to-end support, from searching for candidates,to adding job postings and saving their resumes and interviews."},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"* *Major enhancement*: Implementation of Facebook integration."},{"lineNumber":14,"author":{"gitID":"-"},"content":"*** Description: Facebook integration allows tech recruiters to integrate their facebook accounts to InfinityBook so that they conveniently use Facebook features on InfinityBook itself."},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"*** Justification: Infinity Book is an end-to-end application designed for tech recruiters. We understand that many tech recruiters use social network platform to screen their candidates. With this in mind, we want to improve their productivity by integrating facebook into Infinity itself. Recruiters no longer need to switch between different applications. Instead, they can mostly rely on InfinityBook alone."},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"*** Highlights: This enhancement touches multiple components:"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"**** Added a new panel to UI component to handle authorisation and to act as a GUI for facebook page."},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"**** Modified Logic component to accept new commands."},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"**** Register InfinityBook as an application under Facebook for Developer page to make use of Facebook Graph API"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"**** Made use of RestFB API as a Facebook Graph client API to communicate with Facebook"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"* *Minor enhancement*: Added a command to change theme."},{"lineNumber":29,"author":{"gitID":"-"},"content":"*** Description: Previously, InfinityBook has a single dark theme that might not be very appealing to tech recruiters. This feature allows recruiters to switch between different pre-defined theme."},{"lineNumber":30,"author":{"gitID":"-"},"content":"*** Justification: This feature is much needed to improve the look of the app. Moreover, we can continue working on building better-looking themes to release in future iterations."},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"* *Minor enhancement*: Added a \u0027remark\u0027 field to person."},{"lineNumber":33,"author":{"gitID":"-"},"content":"*** Description: Added a flexible \u0027remark\u0027 field and the command to edit it."},{"lineNumber":34,"author":{"gitID":"-"},"content":"*** Justification: Tech recruiters might have additional information for their contacts and relying on tags alone is not enough."},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-W11-B3/main/blob/master/collated/functional/anh2111.md[Functional code]][https://github.com/CS2103JAN2018-W11-B3/main/blob/master/collated/test/anh2111.md[Test code]]"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"* *Other contributions*:"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"** Project management:"},{"lineNumber":41,"author":{"gitID":"-"},"content":"*** Managed releases `v1.4` on GitHub"},{"lineNumber":42,"author":{"gitID":"-"},"content":"** Enhancements to existing features:"},{"lineNumber":43,"author":{"gitID":"-"},"content":"*** Made an enhancement to color of tags. Tags with the same content will have the same color."},{"lineNumber":44,"author":{"gitID":"-"},"content":"** Community:"},{"lineNumber":45,"author":{"gitID":"-"},"content":"*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com/CS2103JAN2018-W13-B1/main/issues/162,"},{"lineNumber":46,"author":{"gitID":"-"},"content":"https://github.com/CS2103JAN2018-W13-B1/main/issues/147, https://github.com/CS2103JAN2018-W13-B1/main/issues/156, https://github.com/CS2103JAN2018-W13-B1/main/issues/160)"},{"lineNumber":47,"author":{"gitID":"-"},"content":"** Tools:"},{"lineNumber":48,"author":{"gitID":"-"},"content":"*** Integrated a third party library (RestFB) to the project"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":53,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":54,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003dfacebook]"},{"lineNumber":57,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003dtheme]"},{"lineNumber":58,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003dremark]"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"You can find my other contributions to User Guide: Delete Tags and Improved Find command in Appendices."},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":65,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":66,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003dfacebook]"},{"lineNumber":69,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003dtheme]"},{"lineNumber":70,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003dtagcolor]"}],"authorContributionMap":{"deeheenguyen":5,"-":65}},{"path":"src/test/java/seedu/address/ui/JobListPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_JOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalJobs.getTypicalJobs;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysJob;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.JobCardHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import guitests.guihandles.JobListPanelHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToJobListRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"ChengSashankh"},"content":"//@@author ChengSashankh"},{"lineNumber":21,"author":{"gitID":"ChengSashankh"},"content":"public class JobListPanelTest extends GuiUnitTest {"},{"lineNumber":22,"author":{"gitID":"ChengSashankh"},"content":"    private static final ObservableList\u003cJob\u003e TYPICAL_JOB \u003d"},{"lineNumber":23,"author":{"gitID":"ChengSashankh"},"content":"            FXCollections.observableList(getTypicalJobs());"},{"lineNumber":24,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":25,"author":{"gitID":"ChengSashankh"},"content":"    private static final JumpToJobListRequestEvent JUMP_TO_SECOND_EVENT \u003d"},{"lineNumber":26,"author":{"gitID":"ChengSashankh"},"content":"            new JumpToJobListRequestEvent(INDEX_SECOND_JOB);"},{"lineNumber":27,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":28,"author":{"gitID":"ChengSashankh"},"content":"    private JobListPanelHandle jobListPanelHandle;"},{"lineNumber":29,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":30,"author":{"gitID":"ChengSashankh"},"content":"    @Before"},{"lineNumber":31,"author":{"gitID":"ChengSashankh"},"content":"    public void setUp() {"},{"lineNumber":32,"author":{"gitID":"ChengSashankh"},"content":"        JobListPanel jobListPanel \u003d new JobListPanel(TYPICAL_JOB);"},{"lineNumber":33,"author":{"gitID":"ChengSashankh"},"content":"        uiPartRule.setUiPart(jobListPanel);"},{"lineNumber":34,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":35,"author":{"gitID":"ChengSashankh"},"content":"        jobListPanelHandle \u003d new JobListPanelHandle(getChildNode(jobListPanel.getRoot(),"},{"lineNumber":36,"author":{"gitID":"ChengSashankh"},"content":"                JobListPanelHandle.JOB_LIST_VIEW_ID));"},{"lineNumber":37,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":39,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"ChengSashankh"},"content":"    public void display() {"},{"lineNumber":41,"author":{"gitID":"ChengSashankh"},"content":"        for (int i \u003d 0; i \u003c TYPICAL_JOB.size(); i++) {"},{"lineNumber":42,"author":{"gitID":"ChengSashankh"},"content":"            jobListPanelHandle.navigateToCard(TYPICAL_JOB.get(i));"},{"lineNumber":43,"author":{"gitID":"ChengSashankh"},"content":"            Job expectedJob \u003d TYPICAL_JOB.get(i);"},{"lineNumber":44,"author":{"gitID":"ChengSashankh"},"content":"            JobCardHandle actualCard \u003d jobListPanelHandle.getJobCardHandle(i);"},{"lineNumber":45,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":46,"author":{"gitID":"ChengSashankh"},"content":"            assertCardDisplaysJob(expectedJob, actualCard);"},{"lineNumber":47,"author":{"gitID":"ChengSashankh"},"content":"            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"},{"lineNumber":48,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":51,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"ChengSashankh"},"content":"    public void handleJumpToListRequestEvent() {"},{"lineNumber":53,"author":{"gitID":"ChengSashankh"},"content":"        postNow(JUMP_TO_SECOND_EVENT);"},{"lineNumber":54,"author":{"gitID":"ChengSashankh"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":55,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":56,"author":{"gitID":"ChengSashankh"},"content":"        JobCardHandle expectedCard \u003d jobListPanelHandle.getJobCardHandle(INDEX_SECOND_JOB.getZeroBased());"},{"lineNumber":57,"author":{"gitID":"ChengSashankh"},"content":"        JobCardHandle selectedCard \u003d jobListPanelHandle.getHandleToSelectedCard();"},{"lineNumber":58,"author":{"gitID":"ChengSashankh"},"content":"        assertCardEquals(expectedCard, selectedCard);"},{"lineNumber":59,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":61,"author":{"gitID":"ChengSashankh"},"content":"}"},{"lineNumber":62,"author":{"gitID":"ChengSashankh"},"content":"//@@author"}],"authorContributionMap":{"ChengSashankh":43,"-":19}},{"path":"src/test/java/seedu/address/ui/CommandBoxTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListInterviewCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListJobsCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.MatchJobCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class CommandBoxTest extends GuiUnitTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final int FIRST_INDEX \u003d 0;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final int THIRD_INDEX \u003d 2;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String COMPLETE_COMMAND_FIRST_COMPLETION \u003d ListCommand.COMMAND_WORD + \" \";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String COMPLETE_COMMAND_SECOND_COMPLETION \u003d ListInterviewCommand.COMMAND_WORD + \" \";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String COMPLETE_COMMAND_THIRD_COMPLETION \u003d ListJobsCommand.COMMAND_WORD + \" \";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String COMMAND_WITH_ONE_COMPLETION \u003d MatchJobCommand.COMMAND_WORD"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            .substring(FIRST_INDEX, THIRD_INDEX);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String COMPLETE_COMMAND_WITH_ONE_COMPLETION \u003d MatchJobCommand.COMMAND_WORD + \" \";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final String COMMAND_WITH_MULTIPLE_COMPLETIONS \u003d ListCommand.COMMAND_WORD"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            .substring(FIRST_INDEX, THIRD_INDEX);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String COMMAND_WITH_SWAPPED_CHARACTERS \u003d \"lsit\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String COMMAND_WITH_MISSING_CHARACTER \u003d \"ist\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String COMMAND_WITH_EXTRA_CHARACTER \u003d \"llist\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String COMMAND_WITH_MULTIPLE_MISTAKES \u003d \"lllist\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String EXPECTED_COMMAND_CORRECTION \u003d ListCommand.COMMAND_WORD + \" \";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final String DELETE_COMAND_WITH_TYPO \u003d \"dlete\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private static final String INCORRECT_COMMAND_WITH_ARGUMENTS \u003d DELETE_COMAND_WITH_TYPO + \" \" + THIRD_INDEX;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private static final String CORRECT_COMMAND_WITH_ARGUMENTS \u003d DeleteCommand.COMMAND_WORD + \" \" + THIRD_INDEX + \" \";"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private CommandBoxHandle commandBoxHandle;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        Logic logic \u003d new LogicManager(model);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(commandBox);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithSuccessfulCommand() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithFailedCommand() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // verify that style is changed correctly even after multiple consecutive failed commands"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void commandBox_handleKeyPress() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.ESCAPE);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.A);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithUp() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // two commands (latest command is failure)"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, thirdCommand);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithDown() {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // two commands"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"ChengSashankh"},"content":"    //@@author ChengSashankh"},{"lineNumber":152,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":153,"author":{"gitID":"ChengSashankh"},"content":"    public void handleKeyPress_startingWithTab() {"},{"lineNumber":154,"author":{"gitID":"ChengSashankh"},"content":"        // no completion exists"},{"lineNumber":155,"author":{"gitID":"ChengSashankh"},"content":"        assertInputHistory(KeyCode.TAB, \"\");"},{"lineNumber":156,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":157,"author":{"gitID":"ChengSashankh"},"content":"        // one completion exists"},{"lineNumber":158,"author":{"gitID":"ChengSashankh"},"content":"        commandBoxHandle.run(COMMAND_WITH_ONE_COMPLETION);"},{"lineNumber":159,"author":{"gitID":"ChengSashankh"},"content":"        assertInputHistory(KeyCode.TAB, COMPLETE_COMMAND_WITH_ONE_COMPLETION);"},{"lineNumber":160,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":161,"author":{"gitID":"ChengSashankh"},"content":"        // no change on multiple tab press"},{"lineNumber":162,"author":{"gitID":"ChengSashankh"},"content":"        assertInputHistory(KeyCode.TAB, COMPLETE_COMMAND_WITH_ONE_COMPLETION);"},{"lineNumber":163,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":164,"author":{"gitID":"ChengSashankh"},"content":"        // three possible completions exist"},{"lineNumber":165,"author":{"gitID":"ChengSashankh"},"content":"        commandBoxHandle.run(COMMAND_WITH_MULTIPLE_COMPLETIONS);"},{"lineNumber":166,"author":{"gitID":"ChengSashankh"},"content":"        assertInputHistory(KeyCode.TAB, COMPLETE_COMMAND_FIRST_COMPLETION);"},{"lineNumber":167,"author":{"gitID":"ChengSashankh"},"content":"        assertInputHistory(KeyCode.TAB, COMPLETE_COMMAND_SECOND_COMPLETION);"},{"lineNumber":168,"author":{"gitID":"ChengSashankh"},"content":"        assertInputHistory(KeyCode.TAB, COMPLETE_COMMAND_THIRD_COMPLETION);"},{"lineNumber":169,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":170,"author":{"gitID":"ChengSashankh"},"content":"        // on further tab press it should cycle through"},{"lineNumber":171,"author":{"gitID":"ChengSashankh"},"content":"        assertInputHistory(KeyCode.TAB, COMPLETE_COMMAND_FIRST_COMPLETION);"},{"lineNumber":172,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":173,"author":{"gitID":"ChengSashankh"},"content":"        // incorrect command phrase is attempted to be completed"},{"lineNumber":174,"author":{"gitID":"ChengSashankh"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":175,"author":{"gitID":"ChengSashankh"},"content":"        assertInputHistory(KeyCode.TAB, COMMAND_THAT_FAILS);"},{"lineNumber":176,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"ChengSashankh"},"content":"    //@@author"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    public void handleKeyPress_afterSpace() {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        // no correction exists"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.SPACE, \" \");"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        // missing character correction exists"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_WITH_MISSING_CHARACTER);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.SPACE, EXPECTED_COMMAND_CORRECTION);"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        // additional character correction exists"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_WITH_EXTRA_CHARACTER);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.SPACE, EXPECTED_COMMAND_CORRECTION);"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        // swapped character correction exists"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_WITH_SWAPPED_CHARACTERS);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.SPACE, EXPECTED_COMMAND_CORRECTION);"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        // command with arguments copy pasted with typo in command word"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(INCORRECT_COMMAND_WITH_ARGUMENTS);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.SPACE, CORRECT_COMMAND_WITH_ARGUMENTS);"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"        // command that cannot be corrected"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_WITH_MULTIPLE_MISTAKES);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.TAB, COMMAND_WITH_MULTIPLE_MISTAKES);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * Runs a command that fails, then verifies that \u003cbr\u003e"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     *      - the text remains \u003cbr\u003e"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."},{"lineNumber":209,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    private void assertBehaviorForFailedCommand() {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * Runs a command that succeeds, then verifies that \u003cbr\u003e"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     *      - the text is cleared \u003cbr\u003e"},{"lineNumber":219,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."},{"lineNumber":220,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    private void assertBehaviorForSuccessfulCommand() {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        assertEquals(\"\", commandBoxHandle.getInput());"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."},{"lineNumber":229,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        guiRobot.push(keycode);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, commandBoxHandle.getInput());"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ChengSashankh":27,"-":207}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.JobCardHandle;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(JobCardHandle expectedCard, JobCardHandle actualCard) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getJobTitle(), actualCard.getJobTitle());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getLocation(), actualCard.getLocation());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getSkills(), actualCard.getSkills());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"},{"lineNumber":50,"author":{"gitID":"tiny767"},"content":"        assertEquals(expectedPerson.getRemark().value, actualCard.getRemark());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                actualCard.getTags());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedJob}."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysJob(Job expectedJob, JobCardHandle actualCard) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertEquals(expectedJob.getJobTitle().fullTitle, actualCard.getJobTitle());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertEquals(expectedJob.getLocation().value, actualCard.getLocation());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertEquals(expectedJob.getSkills().value, actualCard.getSkills());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertEquals(expectedJob.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                actualCard.getTags());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c persons.length; i++) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":97,"tiny767":1}},{"path":"src/test/java/systemtests/ViewReportCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"anh2111"},"content":"// @@author anh2111"},{"lineNumber":2,"author":{"gitID":"anh2111"},"content":"package systemtests;"},{"lineNumber":3,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":4,"author":{"gitID":"anh2111"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"anh2111"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"anh2111"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_POPULATION;"},{"lineNumber":7,"author":{"gitID":"anh2111"},"content":"import static seedu.address.model.tag.Tag.MESSAGE_TAG_CONSTRAINTS;"},{"lineNumber":8,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":9,"author":{"gitID":"anh2111"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":11,"author":{"gitID":"anh2111"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"anh2111"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":13,"author":{"gitID":"anh2111"},"content":"import seedu.address.logic.commands.ViewReportCommand;"},{"lineNumber":14,"author":{"gitID":"anh2111"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"anh2111"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":17,"author":{"gitID":"anh2111"},"content":"public class ViewReportCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":18,"author":{"gitID":"anh2111"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"anh2111"},"content":"    public void viewreport() {"},{"lineNumber":20,"author":{"gitID":"anh2111"},"content":"        Tag samplePop \u003d new Tag(\"SEIntern\");"},{"lineNumber":21,"author":{"gitID":"anh2111"},"content":"        Tag samplePopComputing \u003d new Tag(\"computing\");"},{"lineNumber":22,"author":{"gitID":"anh2111"},"content":"        /* ------------------------ Perform viewreport operations -------------------------- */"},{"lineNumber":23,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":24,"author":{"gitID":"anh2111"},"content":"        /* Case: command with leading spaces and trailing spaces"},{"lineNumber":25,"author":{"gitID":"anh2111"},"content":"         * -\u003e report displayed"},{"lineNumber":26,"author":{"gitID":"anh2111"},"content":"         */"},{"lineNumber":27,"author":{"gitID":"anh2111"},"content":"        String command \u003d \"   \" + ViewReportCommand.COMMAND_WORD + \"  \" + PREFIX_POPULATION + samplePop.tagName + \"   \";"},{"lineNumber":28,"author":{"gitID":"anh2111"},"content":"        assertCommandSuccess(command, samplePop"},{"lineNumber":29,"author":{"gitID":"anh2111"},"content":"        );"},{"lineNumber":30,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":31,"author":{"gitID":"anh2111"},"content":"        /* Case: command with more than one population"},{"lineNumber":32,"author":{"gitID":"anh2111"},"content":"         * -\u003e report displayed of the last population"},{"lineNumber":33,"author":{"gitID":"anh2111"},"content":"         */"},{"lineNumber":34,"author":{"gitID":"anh2111"},"content":"        command \u003d \"   \" + ViewReportCommand.COMMAND_WORD + \"  \" + PREFIX_POPULATION + samplePop.tagName"},{"lineNumber":35,"author":{"gitID":"anh2111"},"content":"                + \" \" + PREFIX_POPULATION + samplePopComputing.tagName;"},{"lineNumber":36,"author":{"gitID":"anh2111"},"content":"        assertCommandSuccess(command, samplePopComputing);"},{"lineNumber":37,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":38,"author":{"gitID":"anh2111"},"content":"        /* Case: undo previous command -\u003e rejected */"},{"lineNumber":39,"author":{"gitID":"anh2111"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":40,"author":{"gitID":"anh2111"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":41,"author":{"gitID":"anh2111"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":42,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":43,"author":{"gitID":"anh2111"},"content":"        /* ----------------------------------- Perform invalid operations ------------------------------------ */"},{"lineNumber":44,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":45,"author":{"gitID":"anh2111"},"content":"        /* Case: empty population -\u003e rejected */"},{"lineNumber":46,"author":{"gitID":"anh2111"},"content":"        assertCommandFailure(ViewReportCommand.COMMAND_WORD + \" \" + PREFIX_POPULATION,"},{"lineNumber":47,"author":{"gitID":"anh2111"},"content":"                MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":48,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":49,"author":{"gitID":"anh2111"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":50,"author":{"gitID":"anh2111"},"content":"        assertCommandFailure(\"ViewReport pop/Anh\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":51,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":53,"author":{"gitID":"anh2111"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"anh2111"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":55,"author":{"gitID":"anh2111"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":56,"author":{"gitID":"anh2111"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":57,"author":{"gitID":"anh2111"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":58,"author":{"gitID":"anh2111"},"content":"     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"},{"lineNumber":59,"author":{"gitID":"anh2111"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":60,"author":{"gitID":"anh2111"},"content":"     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"},{"lineNumber":61,"author":{"gitID":"anh2111"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":62,"author":{"gitID":"anh2111"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":63,"author":{"gitID":"anh2111"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":64,"author":{"gitID":"anh2111"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":65,"author":{"gitID":"anh2111"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":66,"author":{"gitID":"anh2111"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"anh2111"},"content":"    private void assertCommandSuccess(String command, Tag population) {"},{"lineNumber":68,"author":{"gitID":"anh2111"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":69,"author":{"gitID":"anh2111"},"content":"        expectedModel.updateReport(population);"},{"lineNumber":70,"author":{"gitID":"anh2111"},"content":"        String expectedResultMessage \u003d ViewReportCommand.MESSAGE_SUCCESS + population.tagName;"},{"lineNumber":71,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":72,"author":{"gitID":"anh2111"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":73,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":75,"author":{"gitID":"anh2111"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"anh2111"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":77,"author":{"gitID":"anh2111"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":78,"author":{"gitID":"anh2111"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":79,"author":{"gitID":"anh2111"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":80,"author":{"gitID":"anh2111"},"content":"     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"},{"lineNumber":81,"author":{"gitID":"anh2111"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":82,"author":{"gitID":"anh2111"},"content":"     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"},{"lineNumber":83,"author":{"gitID":"anh2111"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":84,"author":{"gitID":"anh2111"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":85,"author":{"gitID":"anh2111"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":86,"author":{"gitID":"anh2111"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":87,"author":{"gitID":"anh2111"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":88,"author":{"gitID":"anh2111"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"anh2111"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":90,"author":{"gitID":"anh2111"},"content":"        executeCommand(command);"},{"lineNumber":91,"author":{"gitID":"anh2111"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":92,"author":{"gitID":"anh2111"},"content":"        assertTrue(isReportPanelOpenning());"},{"lineNumber":93,"author":{"gitID":"anh2111"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":94,"author":{"gitID":"anh2111"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":95,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":97,"author":{"gitID":"anh2111"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"anh2111"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":99,"author":{"gitID":"anh2111"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":100,"author":{"gitID":"anh2111"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":101,"author":{"gitID":"anh2111"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":102,"author":{"gitID":"anh2111"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"anh2111"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"anh2111"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":105,"author":{"gitID":"anh2111"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"anh2111"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":107,"author":{"gitID":"anh2111"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"anh2111"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":109,"author":{"gitID":"anh2111"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":110,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":111,"author":{"gitID":"anh2111"},"content":"        executeCommand(command);"},{"lineNumber":112,"author":{"gitID":"anh2111"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":113,"author":{"gitID":"anh2111"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":114,"author":{"gitID":"anh2111"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":115,"author":{"gitID":"anh2111"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":116,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"anh2111"},"content":"}"},{"lineNumber":118,"author":{"gitID":"anh2111"},"content":"// @@author"}],"authorContributionMap":{"anh2111":118}},{"path":"src/test/java/seedu/address/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedPerson;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedTag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validAddressBook.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final File MISSING_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingPersonField.xml\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonField.xml\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final File VALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"validPerson.xml\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"9482asf424\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Hans Muster\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"9482424\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"hans@example\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"4th street\";"},{"lineNumber":42,"author":{"gitID":"deeheenguyen"},"content":"    private static final String VALID_LINK \u003d \"https://www.google.com.sg/\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private static final String VALID_SKILL \u003d \"HTML, CSS\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(null, AddressBook.class);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertEquals(9, dataFromFile.getPersonList().size());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertEquals(0, dataFromFile.getTagList().size());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":83,"author":{"gitID":"-"},"content":"                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":85,"author":{"gitID":"-"},"content":"                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_LINK, VALID_SKILL, VALID_TAGS);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":92,"author":{"gitID":"-"},"content":"                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":94,"author":{"gitID":"-"},"content":"                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_LINK, VALID_SKILL, VALID_TAGS);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":101,"author":{"gitID":"-"},"content":"                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":103,"author":{"gitID":"-"},"content":"                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_LINK, VALID_SKILL, VALID_TAGS);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(null, new AddressBook());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        dataToWrite \u003d new XmlSerializableAddressBook("},{"lineNumber":135,"author":{"gitID":"-"},"content":"                builder.withPerson(new PersonBuilder().build()).withTag(\"Friends\").build());"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    @XmlRootElement(name \u003d \"person\")"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"},{"lineNumber":148,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"deeheenguyen":1,"-":147}},{"path":"src/test/java/seedu/address/ui/JobCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysJob;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.JobCardHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.testutil.JobBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"ChengSashankh"},"content":"//@@author ChengSashankh"},{"lineNumber":15,"author":{"gitID":"ChengSashankh"},"content":"public class JobCardTest extends GuiUnitTest {"},{"lineNumber":16,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"ChengSashankh"},"content":"    public void display() {"},{"lineNumber":18,"author":{"gitID":"ChengSashankh"},"content":"        // no tags"},{"lineNumber":19,"author":{"gitID":"ChengSashankh"},"content":"        Job jobWithNoTags \u003d new JobBuilder().withTags(new String[0]).build();"},{"lineNumber":20,"author":{"gitID":"ChengSashankh"},"content":"        JobCard jobCard \u003d new JobCard(jobWithNoTags, 1);"},{"lineNumber":21,"author":{"gitID":"ChengSashankh"},"content":"        uiPartRule.setUiPart(jobCard);"},{"lineNumber":22,"author":{"gitID":"ChengSashankh"},"content":"        assertCardDisplay(jobCard, jobWithNoTags, 1);"},{"lineNumber":23,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":24,"author":{"gitID":"ChengSashankh"},"content":"        // with tags"},{"lineNumber":25,"author":{"gitID":"ChengSashankh"},"content":"        Job jobWithTags \u003d new JobBuilder().build();"},{"lineNumber":26,"author":{"gitID":"ChengSashankh"},"content":"        jobCard \u003d new JobCard(jobWithTags, 2);"},{"lineNumber":27,"author":{"gitID":"ChengSashankh"},"content":"        uiPartRule.setUiPart(jobCard);"},{"lineNumber":28,"author":{"gitID":"ChengSashankh"},"content":"        assertCardDisplay(jobCard, jobWithTags, 2);"},{"lineNumber":29,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":31,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"ChengSashankh"},"content":"    public void equals() {"},{"lineNumber":33,"author":{"gitID":"ChengSashankh"},"content":"        Job job \u003d new JobBuilder().build();"},{"lineNumber":34,"author":{"gitID":"ChengSashankh"},"content":"        JobCard jobCard \u003d new JobCard(job, 0);"},{"lineNumber":35,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":36,"author":{"gitID":"ChengSashankh"},"content":"        // same job, same index -\u003e returns true"},{"lineNumber":37,"author":{"gitID":"ChengSashankh"},"content":"        JobCard copy \u003d new JobCard(job, 0);"},{"lineNumber":38,"author":{"gitID":"ChengSashankh"},"content":"        assertTrue(jobCard.equals(copy));"},{"lineNumber":39,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":40,"author":{"gitID":"ChengSashankh"},"content":"        // same object -\u003e returns true"},{"lineNumber":41,"author":{"gitID":"ChengSashankh"},"content":"        assertTrue(jobCard.equals(jobCard));"},{"lineNumber":42,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":43,"author":{"gitID":"ChengSashankh"},"content":"        // null -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"ChengSashankh"},"content":"        assertFalse(jobCard.equals(null));"},{"lineNumber":45,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":46,"author":{"gitID":"ChengSashankh"},"content":"        // different types -\u003e returns false"},{"lineNumber":47,"author":{"gitID":"ChengSashankh"},"content":"        assertFalse(jobCard.equals(0));"},{"lineNumber":48,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":49,"author":{"gitID":"ChengSashankh"},"content":"        // different job, same index -\u003e returns false"},{"lineNumber":50,"author":{"gitID":"ChengSashankh"},"content":"        Job differentJob \u003d new JobBuilder().withJobTitle(\"differentName\").build();"},{"lineNumber":51,"author":{"gitID":"ChengSashankh"},"content":"        assertFalse(jobCard.equals(new JobCard(differentJob, 0)));"},{"lineNumber":52,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":53,"author":{"gitID":"ChengSashankh"},"content":"        // same person, different index -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"ChengSashankh"},"content":"        assertFalse(jobCard.equals(new JobCard(job, 1)));"},{"lineNumber":55,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":57,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"ChengSashankh"},"content":"     * Asserts that {@code jobCard} displays the details of {@code expectedJob} correctly and matches"},{"lineNumber":59,"author":{"gitID":"ChengSashankh"},"content":"     * {@code expectedId}."},{"lineNumber":60,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"ChengSashankh"},"content":"    private void assertCardDisplay(JobCard jobCard, Job expectedJob, int expectedId) {"},{"lineNumber":62,"author":{"gitID":"ChengSashankh"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":63,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":64,"author":{"gitID":"ChengSashankh"},"content":"        JobCardHandle jobCardHandle \u003d new JobCardHandle(jobCard.getRoot());"},{"lineNumber":65,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":66,"author":{"gitID":"ChengSashankh"},"content":"        // verify id is displayed correctly"},{"lineNumber":67,"author":{"gitID":"ChengSashankh"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", jobCardHandle.getId());"},{"lineNumber":68,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":69,"author":{"gitID":"ChengSashankh"},"content":"        // verify person details are displayed correctly"},{"lineNumber":70,"author":{"gitID":"ChengSashankh"},"content":"        assertCardDisplaysJob(expectedJob, jobCardHandle);"},{"lineNumber":71,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":73,"author":{"gitID":"ChengSashankh"},"content":"}"},{"lineNumber":74,"author":{"gitID":"ChengSashankh"},"content":"//@@author"}],"authorContributionMap":{"ChengSashankh":61,"-":13}},{"path":"src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Contains helper methods for testing command parsers."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class CommandParserTestUtil {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * equals to {@code expectedCommand}."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":20,"author":{"gitID":"deeheenguyen"},"content":"            System.out.println(userInput);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            Command command \u003d parser.parse(userInput);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"            assertEquals(expectedCommand, command);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * equals to {@code expectedMessage}."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            parser.parse(userInput);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, pe.getMessage());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"deeheenguyen":1,"-":39}},{"path":"src/test/java/seedu/address/logic/parser/ThemeCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"tiny767"},"content":"import seedu.address.logic.commands.ThemeCommand;"},{"lineNumber":10,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":11,"author":{"gitID":"tiny767"},"content":"//@@author tiny767"},{"lineNumber":12,"author":{"gitID":"tiny767"},"content":"public class ThemeCommandParserTest {"},{"lineNumber":13,"author":{"gitID":"tiny767"},"content":"    private ThemeCommandParser parser \u003d new ThemeCommandParser();"},{"lineNumber":14,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":15,"author":{"gitID":"tiny767"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"tiny767"},"content":"    public void parse_validArgs_success() {"},{"lineNumber":17,"author":{"gitID":"tiny767"},"content":"        assertParseSuccess(parser, \"dark\", new ThemeCommand(\"dark\"));"},{"lineNumber":18,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":19,"author":{"gitID":"tiny767"},"content":"        //valid theme name (since it\u0027s case insensitive"},{"lineNumber":20,"author":{"gitID":"tiny767"},"content":"        assertParseSuccess(parser, \"LIGHT\", new ThemeCommand(\"LIGHT\"));"},{"lineNumber":21,"author":{"gitID":"tiny767"},"content":"        assertParseSuccess(parser, \"mOrning\", new ThemeCommand(\"mOrning\"));"},{"lineNumber":22,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":24,"author":{"gitID":"tiny767"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"tiny767"},"content":"    public void parse_invalidArgs_failure() {"},{"lineNumber":26,"author":{"gitID":"tiny767"},"content":"        assertParseFailure(parser, \"afternoon\","},{"lineNumber":27,"author":{"gitID":"tiny767"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ThemeCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"tiny767"},"content":"        assertParseFailure(parser, \"dark abc\","},{"lineNumber":29,"author":{"gitID":"tiny767"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ThemeCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"tiny767"},"content":"}"}],"authorContributionMap":{"-":8,"tiny767":23}},{"path":"src/test/java/seedu/address/logic/parser/FindInterviewCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"deeheenguyen"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":3,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":7,"author":{"gitID":"deeheenguyen"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":9,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.logic.commands.FindInterviewCommand;"},{"lineNumber":10,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.InterviewMatchInterviewee;"},{"lineNumber":11,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":12,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":"public class FindInterviewCommandParserTest {"},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":15,"author":{"gitID":"deeheenguyen"},"content":"    private FindInterviewCommandParser parser \u003d new FindInterviewCommandParser();"},{"lineNumber":16,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":17,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"deeheenguyen"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":19,"author":{"gitID":"deeheenguyen"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":20,"author":{"gitID":"deeheenguyen"},"content":"                FindInterviewCommand.MESSAGE_USAGE));"},{"lineNumber":21,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":23,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":"    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":25,"author":{"gitID":"deeheenguyen"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":26,"author":{"gitID":"deeheenguyen"},"content":"        FindInterviewCommand expectedFindInterviewCommand \u003d"},{"lineNumber":27,"author":{"gitID":"deeheenguyen"},"content":"                new FindInterviewCommand(new InterviewMatchInterviewee(\"Alice\"));"},{"lineNumber":28,"author":{"gitID":"deeheenguyen"},"content":"        assertParseSuccess(parser, \"Alice\", expectedFindInterviewCommand);"},{"lineNumber":29,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":30,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":32,"author":{"gitID":"deeheenguyen"},"content":"}"}],"authorContributionMap":{"deeheenguyen":32}},{"path":"src/test/java/systemtests/SaveReportCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"anh2111"},"content":"// @@author anh2111"},{"lineNumber":2,"author":{"gitID":"anh2111"},"content":"package systemtests;"},{"lineNumber":3,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":4,"author":{"gitID":"anh2111"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"anh2111"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"anh2111"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_POPULATION;"},{"lineNumber":7,"author":{"gitID":"anh2111"},"content":"import static seedu.address.model.tag.Tag.MESSAGE_TAG_CONSTRAINTS;"},{"lineNumber":8,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":9,"author":{"gitID":"anh2111"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":11,"author":{"gitID":"anh2111"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"anh2111"},"content":"import seedu.address.logic.commands.SaveReportCommand;"},{"lineNumber":13,"author":{"gitID":"anh2111"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":14,"author":{"gitID":"anh2111"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"anh2111"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":17,"author":{"gitID":"anh2111"},"content":"public class SaveReportCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":18,"author":{"gitID":"anh2111"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"anh2111"},"content":"    public void savereport() {"},{"lineNumber":20,"author":{"gitID":"anh2111"},"content":"        Tag samplePop \u003d new Tag(\"SEIntern\");"},{"lineNumber":21,"author":{"gitID":"anh2111"},"content":"        Tag samplePopComputing \u003d new Tag(\"computing\");"},{"lineNumber":22,"author":{"gitID":"anh2111"},"content":"        /* ------------------------ Perform savereport operations -------------------------- */"},{"lineNumber":23,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":24,"author":{"gitID":"anh2111"},"content":"        /* Case: command with leading spaces and trailing spaces"},{"lineNumber":25,"author":{"gitID":"anh2111"},"content":"         * -\u003e report displayed"},{"lineNumber":26,"author":{"gitID":"anh2111"},"content":"         */"},{"lineNumber":27,"author":{"gitID":"anh2111"},"content":"        String command \u003d \"   \" + SaveReportCommand.COMMAND_WORD + \"  \" + PREFIX_POPULATION + samplePop.tagName + \"   \";"},{"lineNumber":28,"author":{"gitID":"anh2111"},"content":"        assertCommandSuccess(command, samplePop"},{"lineNumber":29,"author":{"gitID":"anh2111"},"content":"        );"},{"lineNumber":30,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":31,"author":{"gitID":"anh2111"},"content":"        /* Case: command with more than one population"},{"lineNumber":32,"author":{"gitID":"anh2111"},"content":"         * -\u003e report displayed of the last population"},{"lineNumber":33,"author":{"gitID":"anh2111"},"content":"         */"},{"lineNumber":34,"author":{"gitID":"anh2111"},"content":"        command \u003d \"   \" + SaveReportCommand.COMMAND_WORD + \"  \" + PREFIX_POPULATION + samplePop.tagName"},{"lineNumber":35,"author":{"gitID":"anh2111"},"content":"                + \" \" + PREFIX_POPULATION + samplePopComputing.tagName;"},{"lineNumber":36,"author":{"gitID":"anh2111"},"content":"        assertCommandSuccess(command, samplePopComputing);"},{"lineNumber":37,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":38,"author":{"gitID":"anh2111"},"content":"        /* Case: undo previous command -\u003e rejected */"},{"lineNumber":39,"author":{"gitID":"anh2111"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":40,"author":{"gitID":"anh2111"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":41,"author":{"gitID":"anh2111"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":42,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":43,"author":{"gitID":"anh2111"},"content":"        /* ----------------------------------- Perform invalid operations ------------------------------------ */"},{"lineNumber":44,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":45,"author":{"gitID":"anh2111"},"content":"        /* Case: empty population -\u003e rejected */"},{"lineNumber":46,"author":{"gitID":"anh2111"},"content":"        assertCommandFailure(SaveReportCommand.COMMAND_WORD + \" \" + PREFIX_POPULATION,"},{"lineNumber":47,"author":{"gitID":"anh2111"},"content":"                MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":48,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":49,"author":{"gitID":"anh2111"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":50,"author":{"gitID":"anh2111"},"content":"        assertCommandFailure(\"SaveReport pop/Anh\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":51,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":53,"author":{"gitID":"anh2111"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"anh2111"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":55,"author":{"gitID":"anh2111"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":56,"author":{"gitID":"anh2111"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":57,"author":{"gitID":"anh2111"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":58,"author":{"gitID":"anh2111"},"content":"     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"},{"lineNumber":59,"author":{"gitID":"anh2111"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":60,"author":{"gitID":"anh2111"},"content":"     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"},{"lineNumber":61,"author":{"gitID":"anh2111"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":62,"author":{"gitID":"anh2111"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":63,"author":{"gitID":"anh2111"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":64,"author":{"gitID":"anh2111"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":65,"author":{"gitID":"anh2111"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":66,"author":{"gitID":"anh2111"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"anh2111"},"content":"    private void assertCommandSuccess(String command, Tag population) {"},{"lineNumber":68,"author":{"gitID":"anh2111"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":69,"author":{"gitID":"anh2111"},"content":"        expectedModel.updateReport(population);"},{"lineNumber":70,"author":{"gitID":"anh2111"},"content":"        expectedModel.addReport(expectedModel.getReport());"},{"lineNumber":71,"author":{"gitID":"anh2111"},"content":"        String expectedResultMessage \u003d SaveReportCommand.MESSAGE_SUCCESS + population.tagName;"},{"lineNumber":72,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":73,"author":{"gitID":"anh2111"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":74,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":76,"author":{"gitID":"anh2111"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"anh2111"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":78,"author":{"gitID":"anh2111"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":79,"author":{"gitID":"anh2111"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":80,"author":{"gitID":"anh2111"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":81,"author":{"gitID":"anh2111"},"content":"     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"},{"lineNumber":82,"author":{"gitID":"anh2111"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":83,"author":{"gitID":"anh2111"},"content":"     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"},{"lineNumber":84,"author":{"gitID":"anh2111"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":85,"author":{"gitID":"anh2111"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":86,"author":{"gitID":"anh2111"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"anh2111"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":88,"author":{"gitID":"anh2111"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":89,"author":{"gitID":"anh2111"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"anh2111"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":91,"author":{"gitID":"anh2111"},"content":"        executeCommand(command);"},{"lineNumber":92,"author":{"gitID":"anh2111"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":93,"author":{"gitID":"anh2111"},"content":"        assertTrue(isReportPanelOpenning());"},{"lineNumber":94,"author":{"gitID":"anh2111"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":95,"author":{"gitID":"anh2111"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":96,"author":{"gitID":"anh2111"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":97,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":99,"author":{"gitID":"anh2111"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"anh2111"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":101,"author":{"gitID":"anh2111"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":102,"author":{"gitID":"anh2111"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"anh2111"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"anh2111"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":105,"author":{"gitID":"anh2111"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"anh2111"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":107,"author":{"gitID":"anh2111"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"anh2111"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":109,"author":{"gitID":"anh2111"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"anh2111"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":111,"author":{"gitID":"anh2111"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":112,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":113,"author":{"gitID":"anh2111"},"content":"        executeCommand(command);"},{"lineNumber":114,"author":{"gitID":"anh2111"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":115,"author":{"gitID":"anh2111"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":116,"author":{"gitID":"anh2111"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":117,"author":{"gitID":"anh2111"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":118,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"anh2111"},"content":"}"},{"lineNumber":120,"author":{"gitID":"anh2111"},"content":"// @@author"}],"authorContributionMap":{"anh2111":120}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Infinity Book - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-W11-B3/main"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"By: `Team JACKHA (W11-B3)`      Since: `Jun 2016`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":"[[top]]"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":20,"author":{"gitID":"-"},"content":"Infinity Book is an Infinity Book application for Tech recruiters who *prefer to use a desktop app to keep track candidates\u0027 information, job postings, and interview*.  +"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"Infinity Book provides end-to-end support, from searching for candidates,to adding job postings and saving their resumes and interviews. +"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"More importantly, Infinity Book is *optimized for those who prefer to work with a Command Line Interface* (link:#cli[CLI]) while still having the benefits of a Graphical User Interface (link:#gui[GUI]). If you can type fast, Infinity Book can get your candidates management tasks done faster than traditional GUI apps. +"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"link:#top[Back to top]"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"\u003d\u003d About"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"This Developer Guide provides details on setting up this project for development, compatibility, and architecture information about Infinity Book. Design and implementation specifications are specified below, followed by product management specifics. +"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"For information about application usage, refer to the link:https://github.com/CS2103JAN2018-W11-B3/main/blob/master/docs/UserGuide.adoc[User Guide]"},{"lineNumber":33,"author":{"gitID":"-"},"content":"Interested? +"},{"lineNumber":34,"author":{"gitID":"-"},"content":"Jump to the \u003c\u003cSetting up, Setting up\u003e\u003e section to get started. Enjoy!"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"link:#top[Back to top]"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"This section provides step-by-step instructions to set up Infinity Book for development on your computer. +"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"To continue development, the following two prerequisites are recommended to be met:"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":48,"author":{"gitID":"-"},"content":"+"},{"lineNumber":49,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":50,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":51,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":52,"author":{"gitID":"-"},"content":"+"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":55,"author":{"gitID":"-"},"content":"+"},{"lineNumber":56,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":57,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":58,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"After meeting the \u003c\u003cPrerequisites, prerequisites\u003e\u003e, follow these steps to set up the project on your computer:"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":66,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":67,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":68,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":69,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":70,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":71,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":72,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":73,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":74,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":75,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":80,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"Configuring the coding style, documentation and continuous integration (CI) is recommended to maintain uniformity across contributions."},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":91,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":92,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":95,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level4` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level4`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":110,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":115,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":122,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"\u003c\u003ctop,Back to top\u003e\u003e"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":127,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"The following sections describe the architecture of the system, with details about each component."},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":134,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":139,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":144,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":149,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":154,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":155,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":156,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":161,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":166,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":169,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":174,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":177,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the Infinity Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":182,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":185,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":190,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":193,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":204,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":205,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":208,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":211,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":212,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":215,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":218,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":221,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":222,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."},{"lineNumber":223,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":228,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":231,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":234,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":241,"author":{"gitID":"-"},"content":"* stores the Infinity Book data."},{"lineNumber":242,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":243,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":246,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":249,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":256,"author":{"gitID":"-"},"content":"* can save the Infinity Book data in xml format and read it back."},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":259,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"link:#top[Back to top]"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":270,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":271,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the Infinity Book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":278,"author":{"gitID":"-"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the Infinity Book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":282,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":283,"author":{"gitID":"-"},"content":"----"},{"lineNumber":284,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":285,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":286,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":288,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":289,"author":{"gitID":"-"},"content":"}"},{"lineNumber":290,"author":{"gitID":"-"},"content":"----"},{"lineNumber":291,"author":{"gitID":"-"},"content":""},{"lineNumber":292,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":293,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":294,"author":{"gitID":"-"},"content":"----"},{"lineNumber":295,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":296,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":297,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":298,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":301,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":302,"author":{"gitID":"-"},"content":"}"},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":305,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":306,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":307,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":308,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":309,"author":{"gitID":"-"},"content":"}"},{"lineNumber":310,"author":{"gitID":"-"},"content":"----"},{"lineNumber":311,"author":{"gitID":"-"},"content":""},{"lineNumber":312,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":313,"author":{"gitID":"-"},"content":""},{"lineNumber":314,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th candidate in the Infinity Book. The current state of the Infinity Book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":315,"author":{"gitID":"-"},"content":""},{"lineNumber":316,"author":{"gitID":"-"},"content":".UndoRedo stack at the start."},{"lineNumber":317,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":".Undo Redo stack showing add command."},{"lineNumber":322,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":323,"author":{"gitID":"-"},"content":""},{"lineNumber":324,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":325,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":326,"author":{"gitID":"-"},"content":""},{"lineNumber":327,"author":{"gitID":"-"},"content":"The user now decides that adding the candidate was a mistake, and decides to undo that action using `undo`."},{"lineNumber":328,"author":{"gitID":"-"},"content":""},{"lineNumber":329,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the Infinity Book to the state before the `add` command executed."},{"lineNumber":330,"author":{"gitID":"-"},"content":""},{"lineNumber":331,"author":{"gitID":"-"},"content":".UndoRedo stack demonstration"},{"lineNumber":332,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":333,"author":{"gitID":"-"},"content":""},{"lineNumber":334,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":335,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":336,"author":{"gitID":"-"},"content":""},{"lineNumber":337,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":338,"author":{"gitID":"-"},"content":""},{"lineNumber":339,"author":{"gitID":"-"},"content":".Sequence diagram for the undo operation."},{"lineNumber":340,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the Infinity Book to the state after the command is executed)."},{"lineNumber":343,"author":{"gitID":"-"},"content":""},{"lineNumber":344,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":345,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":346,"author":{"gitID":"-"},"content":""},{"lineNumber":347,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":348,"author":{"gitID":"-"},"content":""},{"lineNumber":349,"author":{"gitID":"-"},"content":".UndoRedo stack showing Redo operation."},{"lineNumber":350,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":351,"author":{"gitID":"-"},"content":""},{"lineNumber":352,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":353,"author":{"gitID":"-"},"content":""},{"lineNumber":354,"author":{"gitID":"-"},"content":".UndoRedo stack showing no changes due to Commands that are not undoable."},{"lineNumber":355,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":356,"author":{"gitID":"-"},"content":""},{"lineNumber":357,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":358,"author":{"gitID":"-"},"content":""},{"lineNumber":359,"author":{"gitID":"-"},"content":".Activity Diagram for Undo and Redo operations"},{"lineNumber":360,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":361,"author":{"gitID":"-"},"content":""},{"lineNumber":362,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":363,"author":{"gitID":"-"},"content":""},{"lineNumber":364,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":365,"author":{"gitID":"-"},"content":""},{"lineNumber":366,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":367,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":368,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":369,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":370,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":371,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":372,"author":{"gitID":"-"},"content":""},{"lineNumber":373,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":374,"author":{"gitID":"-"},"content":""},{"lineNumber":375,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire Infinity Book."},{"lineNumber":376,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":377,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":378,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":379,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the candidate being deleted)."},{"lineNumber":380,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":381,"author":{"gitID":"-"},"content":""},{"lineNumber":382,"author":{"gitID":"-"},"content":""},{"lineNumber":383,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":384,"author":{"gitID":"-"},"content":""},{"lineNumber":385,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the Infinity Book (`add`, `clear`, `edit`)."},{"lineNumber":386,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":387,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":388,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":389,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":390,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."},{"lineNumber":391,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":392,"author":{"gitID":"-"},"content":""},{"lineNumber":393,"author":{"gitID":"-"},"content":""},{"lineNumber":394,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":395,"author":{"gitID":"-"},"content":""},{"lineNumber":396,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":397,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":398,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":399,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":400,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":401,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":402,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":403,"author":{"gitID":"-"},"content":""},{"lineNumber":404,"author":{"gitID":"-"},"content":"// tag::dataencryption[]"},{"lineNumber":405,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d [Proposed] Data Encryption"},{"lineNumber":406,"author":{"gitID":"-"},"content":""},{"lineNumber":407,"author":{"gitID":"-"},"content":"Data is to be encrypted to protect the Infinity Book data from unauthorized access."},{"lineNumber":408,"author":{"gitID":"-"},"content":""},{"lineNumber":409,"author":{"gitID":"-"},"content":"// end::dataencryption[]"},{"lineNumber":410,"author":{"gitID":"-"},"content":""},{"lineNumber":411,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":412,"author":{"gitID":"-"},"content":""},{"lineNumber":413,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":414,"author":{"gitID":"-"},"content":""},{"lineNumber":415,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":416,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":417,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":418,"author":{"gitID":"-"},"content":""},{"lineNumber":419,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":420,"author":{"gitID":"-"},"content":""},{"lineNumber":421,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":422,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":423,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":424,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":425,"author":{"gitID":"-"},"content":""},{"lineNumber":426,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":427,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":428,"author":{"gitID":"-"},"content":""},{"lineNumber":429,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":430,"author":{"gitID":"-"},"content":""},{"lineNumber":431,"author":{"gitID":"-"},"content":"// tag::findall[]"},{"lineNumber":432,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Search by Name, Tags, Email, and Phone [Since v1.2]"},{"lineNumber":433,"author":{"gitID":"-"},"content":""},{"lineNumber":434,"author":{"gitID":"-"},"content":"This `find` command allows the user to search through the list of all candidates and output all whose  `Name`, `Tags`, `Email`, and `Phone` match with the given keywords."},{"lineNumber":435,"author":{"gitID":"-"},"content":""},{"lineNumber":436,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Implementation Details"},{"lineNumber":437,"author":{"gitID":"-"},"content":""},{"lineNumber":438,"author":{"gitID":"-"},"content":"During execution of this command, Infinity Book will do the following:"},{"lineNumber":439,"author":{"gitID":"-"},"content":""},{"lineNumber":440,"author":{"gitID":"-"},"content":". `FindCommandParser` class will extract keywords from user input, form a predicate, then pass it to `FindCommand` class."},{"lineNumber":441,"author":{"gitID":"-"},"content":". `FindCommand` will take in the predicate and update the list of Persons accordingly."},{"lineNumber":442,"author":{"gitID":"-"},"content":""},{"lineNumber":443,"author":{"gitID":"-"},"content":"The condition for a candidate to be matched with given keywords is defined in `PersonContainsKeywordsPredicate`."},{"lineNumber":444,"author":{"gitID":"-"},"content":""},{"lineNumber":445,"author":{"gitID":"-"},"content":"[source, java]"},{"lineNumber":446,"author":{"gitID":"-"},"content":"----"},{"lineNumber":447,"author":{"gitID":"-"},"content":"keywords.stream()"},{"lineNumber":448,"author":{"gitID":"-"},"content":"    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword)"},{"lineNumber":449,"author":{"gitID":"-"},"content":"    || StringUtil.containsWordIgnoreCase(person.getEmail().toString(), keyword)"},{"lineNumber":450,"author":{"gitID":"-"},"content":"    || StringUtil.containsWordIgnoreCase(person.getPhone().toString(), keyword)"},{"lineNumber":451,"author":{"gitID":"-"},"content":"    || person.getTags().stream()"},{"lineNumber":452,"author":{"gitID":"-"},"content":"    .anyMatch(tag -\u003e StringUtil.containsWordIgnoreCase(tag.tagName, keyword)));"},{"lineNumber":453,"author":{"gitID":"-"},"content":"----"},{"lineNumber":454,"author":{"gitID":"-"},"content":""},{"lineNumber":455,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":456,"author":{"gitID":"-"},"content":""},{"lineNumber":457,"author":{"gitID":"-"},"content":"**Aspect:** How user should specify the field to search +"},{"lineNumber":458,"author":{"gitID":"-"},"content":"**Alternative 1 (current choice):** Search for all `Name`, `Tags`, `Email`, and `Phone` +"},{"lineNumber":459,"author":{"gitID":"-"},"content":"**Pros:** User does not need to learn additional commands. +"},{"lineNumber":460,"author":{"gitID":"-"},"content":"**Cons:** There can be unintended results, but since the set of keywords to search for each field does not overlap with each other, so such unintended results are very rare. +"},{"lineNumber":461,"author":{"gitID":"-"},"content":""},{"lineNumber":462,"author":{"gitID":"-"},"content":"**Alternative 2:** Allow users to opt searching for one field in `Name`, `Tags`, `Email`, or `Phone`  +"},{"lineNumber":463,"author":{"gitID":"-"},"content":"**Pros:** User can narrow down the search result. +"},{"lineNumber":464,"author":{"gitID":"-"},"content":"**Cons:** User has to remember additional syntax."},{"lineNumber":465,"author":{"gitID":"-"},"content":""},{"lineNumber":466,"author":{"gitID":"-"},"content":"---"},{"lineNumber":467,"author":{"gitID":"-"},"content":""},{"lineNumber":468,"author":{"gitID":"-"},"content":"**Aspect:**  The matching condition +"},{"lineNumber":469,"author":{"gitID":"-"},"content":"**Alternative 1 (current choice):** Return Persons whose `Name`, `Tags`, `Email`, or `Phone` have at least one keyword in the input keywords. +"},{"lineNumber":470,"author":{"gitID":"-"},"content":"**Pros:** User can do a wider search when he or she does not remember candidates\u0027 information clearly. +"},{"lineNumber":471,"author":{"gitID":"-"},"content":"**Cons:** User hardly does a detailed search. +"},{"lineNumber":472,"author":{"gitID":"-"},"content":""},{"lineNumber":473,"author":{"gitID":"-"},"content":"**Alternative 2:** Return Persons whose `Name`, `Tags`, `Email`, or `Phone` have all input keywords. +"},{"lineNumber":474,"author":{"gitID":"-"},"content":"**Pros:** User can narrow down the search results. +"},{"lineNumber":475,"author":{"gitID":"-"},"content":"**Cons:** In some cases, user cannot do a more general search."},{"lineNumber":476,"author":{"gitID":"-"},"content":"// end::findall[]"},{"lineNumber":477,"author":{"gitID":"-"},"content":"// tag::edittags[]"},{"lineNumber":478,"author":{"gitID":"-"},"content":""},{"lineNumber":479,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Add/Remove Tags (Since v1.3)"},{"lineNumber":480,"author":{"gitID":"-"},"content":""},{"lineNumber":481,"author":{"gitID":"-"},"content":"The mechanics of `EditCommand` is that a new `Person` will be first created with the same information as the `Person` to edit."},{"lineNumber":482,"author":{"gitID":"-"},"content":"Then edited fields of the new `Person` will be determined based on user inputs, then it will be used to update the persons list of Infinity Book."},{"lineNumber":483,"author":{"gitID":"-"},"content":""},{"lineNumber":484,"author":{"gitID":"-"},"content":"[source, java]"},{"lineNumber":485,"author":{"gitID":"-"},"content":"----"},{"lineNumber":486,"author":{"gitID":"-"},"content":"personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":487,"author":{"gitID":"-"},"content":"editedPerson \u003d editPersonDescriptor.createEditedPerson(personToEdit);"},{"lineNumber":488,"author":{"gitID":"-"},"content":""},{"lineNumber":489,"author":{"gitID":"-"},"content":"try {"},{"lineNumber":490,"author":{"gitID":"-"},"content":"    model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":491,"author":{"gitID":"-"},"content":"}"},{"lineNumber":492,"author":{"gitID":"-"},"content":"----"},{"lineNumber":493,"author":{"gitID":"-"},"content":""},{"lineNumber":494,"author":{"gitID":"-"},"content":"From v1.0, user can overwrite any field of a candidate using `edit` command. Enhancing on top of this, the creation of the new `Person` is updated"},{"lineNumber":495,"author":{"gitID":"-"},"content":"so that user can add new tags by `edit -add-tag INDEX [t/TAG]...` command and remove existing tags by `edit -delete-tag [t/TAG]...` command."},{"lineNumber":496,"author":{"gitID":"-"},"content":""},{"lineNumber":497,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":498,"author":{"gitID":"-"},"content":"**Aspect:** Implementation of removing/adding tags +"},{"lineNumber":499,"author":{"gitID":"-"},"content":"**Alternative 1 (current choice):** Modify `EditPersonDescriptor` in `EditCommand` +"},{"lineNumber":500,"author":{"gitID":"-"},"content":"**Pros:** Prevent overlapping codes. +"},{"lineNumber":501,"author":{"gitID":"-"},"content":"**Cons:** Modify other details (e.g. Name, Phone, Address,...) apart from Tags. +"},{"lineNumber":502,"author":{"gitID":"-"},"content":""},{"lineNumber":503,"author":{"gitID":"-"},"content":"**Alternative 2:** Write a new EditPersonDescriptor for this command +"},{"lineNumber":504,"author":{"gitID":"-"},"content":"**Pros:** Maintain the current `edit` logic and behaviour. +"},{"lineNumber":505,"author":{"gitID":"-"},"content":"**Cons:** Duplicate the exact code, which may cause a lot of hassles in future development."},{"lineNumber":506,"author":{"gitID":"-"},"content":""},{"lineNumber":507,"author":{"gitID":"-"},"content":"---"},{"lineNumber":508,"author":{"gitID":"-"},"content":""},{"lineNumber":509,"author":{"gitID":"-"},"content":"**Aspect:** Choosing command to add or remove tags +"},{"lineNumber":510,"author":{"gitID":"-"},"content":"**Alternative 1 (current choice):** Add `COMMAND_OPTION` (`-add-tag` and `-delete-tag`) to the current `edit` command. +"},{"lineNumber":511,"author":{"gitID":"-"},"content":"**Pros:** Adding or removing tags is indeed editing a Person\u0027s details, so it makes complete sense to perform this action using `edit` command and reduces the number of commands that user has to remember.  +"},{"lineNumber":512,"author":{"gitID":"-"},"content":"**Cons:** Have to modify the parser so that it can extract the option. +"},{"lineNumber":513,"author":{"gitID":"-"},"content":""},{"lineNumber":514,"author":{"gitID":"-"},"content":"**Alternative 2:** Using two new commands for adding and removing tags +"},{"lineNumber":515,"author":{"gitID":"-"},"content":"**Pros:** It is easier to parse the command.   +"},{"lineNumber":516,"author":{"gitID":"-"},"content":"**Cons:** User has to remember more commands."},{"lineNumber":517,"author":{"gitID":"-"},"content":""},{"lineNumber":518,"author":{"gitID":"-"},"content":"// end::edittags[]"},{"lineNumber":519,"author":{"gitID":"-"},"content":"// tag::option[]"},{"lineNumber":520,"author":{"gitID":"-"},"content":""},{"lineNumber":521,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Accept Option for Commands (Since v1.2)"},{"lineNumber":522,"author":{"gitID":"-"},"content":""},{"lineNumber":523,"author":{"gitID":"-"},"content":"To reduce the number of commands that user needs to learn, functions having similar behaviours can be grouped under one `COMMAND_WORD`, and each function in the group can be specified by `COMMAND_OPTION` by the user."},{"lineNumber":524,"author":{"gitID":"-"},"content":""},{"lineNumber":525,"author":{"gitID":"-"},"content":"The command format is thus: `COMMAND_WORD [-COMMAND_OPTION] [PARAMETERS]...`"},{"lineNumber":526,"author":{"gitID":"-"},"content":""},{"lineNumber":527,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Implementation Details"},{"lineNumber":528,"author":{"gitID":"-"},"content":""},{"lineNumber":529,"author":{"gitID":"-"},"content":"Arguments including option are wrapped with the `ArgumentWithOption` class shown in the below code snippet."},{"lineNumber":530,"author":{"gitID":"-"},"content":""},{"lineNumber":531,"author":{"gitID":"-"},"content":"[source, java]"},{"lineNumber":532,"author":{"gitID":"-"},"content":"----"},{"lineNumber":533,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":534,"author":{"gitID":"-"},"content":" *  ArgumentWithOption class encapsulates an argument in the format: [OPTION] ARGS, and handles the parsing, extracting"},{"lineNumber":535,"author":{"gitID":"-"},"content":" *  option from the argument."},{"lineNumber":536,"author":{"gitID":"-"},"content":" */"},{"lineNumber":537,"author":{"gitID":"-"},"content":""},{"lineNumber":538,"author":{"gitID":"-"},"content":"public class ArgumentWithOption {"},{"lineNumber":539,"author":{"gitID":"-"},"content":""},{"lineNumber":540,"author":{"gitID":"-"},"content":"    private static final Pattern ARGUMENT_FORMAT \u003d"},{"lineNumber":541,"author":{"gitID":"-"},"content":"            Pattern.compile(\"(?\u003ccommandOption\u003e\" + PREFIX_OPTION.getPrefix() + \"\\\\S+)?(?\u003carguments\u003e.*)\");"},{"lineNumber":542,"author":{"gitID":"-"},"content":"    private String rawArgs;"},{"lineNumber":543,"author":{"gitID":"-"},"content":"    private final String option;"},{"lineNumber":544,"author":{"gitID":"-"},"content":"    private String args;"},{"lineNumber":545,"author":{"gitID":"-"},"content":""},{"lineNumber":546,"author":{"gitID":"-"},"content":"    public ArgumentWithOption(String rawArgs) throws ParseException {"},{"lineNumber":547,"author":{"gitID":"-"},"content":"        this.rawArgs \u003d rawArgs.trim();"},{"lineNumber":548,"author":{"gitID":"-"},"content":""},{"lineNumber":549,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d ARGUMENT_FORMAT.matcher(this.rawArgs);"},{"lineNumber":550,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":551,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":552,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":553,"author":{"gitID":"-"},"content":"        this.args \u003d matcher.group(\"arguments\");"},{"lineNumber":554,"author":{"gitID":"-"},"content":""},{"lineNumber":555,"author":{"gitID":"-"},"content":"        String rawOption \u003d matcher.group(\"commandOption\");"},{"lineNumber":556,"author":{"gitID":"-"},"content":"        this.option \u003d (rawOption !\u003d null) ?  rawOption.substring(PREFIX_OPTION.getPrefix().length()) : \"\";"},{"lineNumber":557,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":558,"author":{"gitID":"-"},"content":""},{"lineNumber":559,"author":{"gitID":"-"},"content":"    public boolean isOption(String toCheck) {"},{"lineNumber":560,"author":{"gitID":"-"},"content":"        return toCheck.equals(option);"},{"lineNumber":561,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":562,"author":{"gitID":"-"},"content":""},{"lineNumber":563,"author":{"gitID":"-"},"content":"    public String getArgs() {"},{"lineNumber":564,"author":{"gitID":"-"},"content":"        return args;"},{"lineNumber":565,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":566,"author":{"gitID":"-"},"content":"}"},{"lineNumber":567,"author":{"gitID":"-"},"content":"----"},{"lineNumber":568,"author":{"gitID":"-"},"content":""},{"lineNumber":569,"author":{"gitID":"-"},"content":"The following snippet shows how `ArgumentWithOption` may be used"},{"lineNumber":570,"author":{"gitID":"-"},"content":""},{"lineNumber":571,"author":{"gitID":"-"},"content":"[source, java]"},{"lineNumber":572,"author":{"gitID":"-"},"content":"----"},{"lineNumber":573,"author":{"gitID":"-"},"content":"ArgumentWithOption argWithOption \u003d new ArgumentWithOption(args);"},{"lineNumber":574,"author":{"gitID":"-"},"content":"// Get arguments"},{"lineNumber":575,"author":{"gitID":"-"},"content":"args \u003d argWithOption.getArgs();"},{"lineNumber":576,"author":{"gitID":"-"},"content":"// Check for option"},{"lineNumber":577,"author":{"gitID":"-"},"content":"if (argWithOption.isOption(EditCommand.COMMAND_OPTION_ADD_TAG)) {"},{"lineNumber":578,"author":{"gitID":"-"},"content":"    parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setNewTags);"},{"lineNumber":579,"author":{"gitID":"-"},"content":"}"},{"lineNumber":580,"author":{"gitID":"-"},"content":"----"},{"lineNumber":581,"author":{"gitID":"-"},"content":""},{"lineNumber":582,"author":{"gitID":"-"},"content":"// end::option[]"},{"lineNumber":583,"author":{"gitID":"-"},"content":"// tag::report[]"},{"lineNumber":584,"author":{"gitID":"-"},"content":""},{"lineNumber":585,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Report (Since v1.4)"},{"lineNumber":586,"author":{"gitID":"-"},"content":""},{"lineNumber":587,"author":{"gitID":"-"},"content":"Each `Report` is identified with a `Tag population`:"},{"lineNumber":588,"author":{"gitID":"-"},"content":""},{"lineNumber":589,"author":{"gitID":"-"},"content":"Represented with the prefix `pop/` followed by the `tagName` of the `Tag population`. Example: `pop/SEIntern`."},{"lineNumber":590,"author":{"gitID":"-"},"content":""},{"lineNumber":591,"author":{"gitID":"-"},"content":"In the report, you will find statistics of the group of all Persons tagged with `population`: +"},{"lineNumber":592,"author":{"gitID":"-"},"content":""},{"lineNumber":593,"author":{"gitID":"-"},"content":". A bar chart showing all other Tags owned by this group and number of owners for each Tag."},{"lineNumber":594,"author":{"gitID":"-"},"content":". A pie chart illustrating the numerical proportion of each Tag."},{"lineNumber":595,"author":{"gitID":"-"},"content":". A history panel listing statistics of this group at earlier points of time."},{"lineNumber":596,"author":{"gitID":"-"},"content":""},{"lineNumber":597,"author":{"gitID":"-"},"content":"User can view a report using `viewreport` command and save a report for future reference using `savereport` command."},{"lineNumber":598,"author":{"gitID":"-"},"content":""},{"lineNumber":599,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Implementation Details"},{"lineNumber":600,"author":{"gitID":"-"},"content":""},{"lineNumber":601,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Model Component"},{"lineNumber":602,"author":{"gitID":"-"},"content":""},{"lineNumber":603,"author":{"gitID":"-"},"content":"For each report, all statistics details are encapsulated within the `Report` class. We use one `UniqueReportList` to keep all `Report` that user has saved."},{"lineNumber":604,"author":{"gitID":"-"},"content":""},{"lineNumber":605,"author":{"gitID":"-"},"content":".Report as a part in the structure of Model Component of Infinity Book"},{"lineNumber":606,"author":{"gitID":"-"},"content":"image::report_model.jpg[width\u003d\"700\"]"},{"lineNumber":607,"author":{"gitID":"-"},"content":""},{"lineNumber":608,"author":{"gitID":"-"},"content":"**Calculating statistics:**"},{"lineNumber":609,"author":{"gitID":"-"},"content":""},{"lineNumber":610,"author":{"gitID":"-"},"content":"Given the idea we use `UniqueReportList` to keep history, all `Report` instances in this list are immutable. There is no method to update instances in this list."},{"lineNumber":611,"author":{"gitID":"-"},"content":"We keep one `Report` instance in Infinity Book so that we can show to the user."},{"lineNumber":612,"author":{"gitID":"-"},"content":"This instance can be re-calculated via method `updateReport()` (implementation shown in the below snippet) in `Model` interface."},{"lineNumber":613,"author":{"gitID":"-"},"content":""},{"lineNumber":614,"author":{"gitID":"-"},"content":"[source, java]"},{"lineNumber":615,"author":{"gitID":"-"},"content":"----"},{"lineNumber":616,"author":{"gitID":"-"},"content":"public void updateReport(Tag population) {"},{"lineNumber":617,"author":{"gitID":"-"},"content":""},{"lineNumber":618,"author":{"gitID":"-"},"content":"    // Get the list of `Person` tagged with `population`."},{"lineNumber":619,"author":{"gitID":"-"},"content":""},{"lineNumber":620,"author":{"gitID":"-"},"content":"    FilteredList\u003cPerson\u003e allPersonList \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":621,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e personContainsPopulationTagPredicate \u003d"},{"lineNumber":622,"author":{"gitID":"-"},"content":"        new Predicate\u003cPerson\u003e() {"},{"lineNumber":623,"author":{"gitID":"-"},"content":"            @Override"},{"lineNumber":624,"author":{"gitID":"-"},"content":"            public boolean test(Person person) {"},{"lineNumber":625,"author":{"gitID":"-"},"content":"                return person.getTags().stream()"},{"lineNumber":626,"author":{"gitID":"-"},"content":"                        .anyMatch(tag -\u003e StringUtil.containsWordIgnoreCase(tag.tagName, population.tagName));"},{"lineNumber":627,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":628,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":629,"author":{"gitID":"-"},"content":"    allPersonList.setPredicate(personContainsPopulationTagPredicate);"},{"lineNumber":630,"author":{"gitID":"-"},"content":""},{"lineNumber":631,"author":{"gitID":"-"},"content":"    // Calculate statistics of other `Tag` owned by `Person` in this list"},{"lineNumber":632,"author":{"gitID":"-"},"content":""},{"lineNumber":633,"author":{"gitID":"-"},"content":"    Map\u003cString, Pair\u003cInteger, Integer\u003e\u003e counts \u003d new HashMap\u003c\u003e();"},{"lineNumber":634,"author":{"gitID":"-"},"content":"    allPersonList.forEach((p) -\u003e {"},{"lineNumber":635,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e allTags \u003d p.getTags();"},{"lineNumber":636,"author":{"gitID":"-"},"content":"        for (Tag t : allTags) {"},{"lineNumber":637,"author":{"gitID":"-"},"content":"            if (!t.tagName.equalsIgnoreCase(population.tagName)) {"},{"lineNumber":638,"author":{"gitID":"-"},"content":"                counts.merge(t.tagName, new Pair\u003c\u003e(1, 1), (a, b) -\u003e"},{"lineNumber":639,"author":{"gitID":"-"},"content":"                        new Pair(a.getKey() + b.getKey(), a.getValue() + b.getValue()));"},{"lineNumber":640,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":641,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":642,"author":{"gitID":"-"},"content":"    });"},{"lineNumber":643,"author":{"gitID":"-"},"content":""},{"lineNumber":644,"author":{"gitID":"-"},"content":"    // Encapsulate statistics of each `Tag` in a `Proportion` instance"},{"lineNumber":645,"author":{"gitID":"-"},"content":""},{"lineNumber":646,"author":{"gitID":"-"},"content":"    List\u003cProportion\u003e allProportions \u003d new ArrayList\u003c\u003e();"},{"lineNumber":647,"author":{"gitID":"-"},"content":"    for (Map.Entry\u003cString, Pair\u003cInteger, Integer\u003e\u003e entry : counts.entrySet()) {"},{"lineNumber":648,"author":{"gitID":"-"},"content":"        allProportions.add(new Proportion(entry.getKey(), entry.getValue().getKey(), entry.getValue().getValue()));"},{"lineNumber":649,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":650,"author":{"gitID":"-"},"content":""},{"lineNumber":651,"author":{"gitID":"-"},"content":"    report \u003d new Report(population, allProportions, allPersonList.size());"},{"lineNumber":652,"author":{"gitID":"-"},"content":"}"},{"lineNumber":653,"author":{"gitID":"-"},"content":"----"},{"lineNumber":654,"author":{"gitID":"-"},"content":""},{"lineNumber":655,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Storage Component"},{"lineNumber":656,"author":{"gitID":"-"},"content":""},{"lineNumber":657,"author":{"gitID":"-"},"content":"We keep `UniqueReportList` persistently in XML files."},{"lineNumber":658,"author":{"gitID":"-"},"content":""},{"lineNumber":659,"author":{"gitID":"-"},"content":".`XmlAdaptedReport` in the structure of Storage Component of Infinity Book."},{"lineNumber":660,"author":{"gitID":"-"},"content":"image::ReportStorageDiagram.jpg[width\u003d\"700\"]"},{"lineNumber":661,"author":{"gitID":"-"},"content":""},{"lineNumber":662,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Logic Component"},{"lineNumber":663,"author":{"gitID":"-"},"content":""},{"lineNumber":664,"author":{"gitID":"-"},"content":"The below sequence diagram show interactions within `Logic` component when user executes `viewreport pop/CS`."},{"lineNumber":665,"author":{"gitID":"-"},"content":""},{"lineNumber":666,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `viewreport pop/CS` Command"},{"lineNumber":667,"author":{"gitID":"-"},"content":"image::ViewReportDiagram.jpg[width\u003d\"700\"]"},{"lineNumber":668,"author":{"gitID":"-"},"content":""},{"lineNumber":669,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d UI Component"},{"lineNumber":670,"author":{"gitID":"-"},"content":""},{"lineNumber":671,"author":{"gitID":"-"},"content":"\u0027ReportPanel\u0027 extends `UiPart\u003cRegion\u003e` and shares the same region with `BrowserPanel`. When `viewreport` or `savereport` is executed, `MainWindow` class will swap out the `BrowserPanel` for the `ReportPanel`."},{"lineNumber":672,"author":{"gitID":"-"},"content":"We achieve this by posting `ToggleReportPanelEvent` (showing in the below sequence diagram)."},{"lineNumber":673,"author":{"gitID":"-"},"content":""},{"lineNumber":674,"author":{"gitID":"-"},"content":".Posting event when we execute Report commands."},{"lineNumber":675,"author":{"gitID":"-"},"content":"image::ComponentInteractions.jpg[width\u003d\"700\"]"},{"lineNumber":676,"author":{"gitID":"-"},"content":""},{"lineNumber":677,"author":{"gitID":"-"},"content":"The `EventsCenters` then handles this `Event` and then triggers the update of `Report` instance (as shown in the below seqence diagram)."},{"lineNumber":678,"author":{"gitID":"-"},"content":""},{"lineNumber":679,"author":{"gitID":"-"},"content":".Update `Report` instance after the `ToggleReportPanelEvent` is posted"},{"lineNumber":680,"author":{"gitID":"-"},"content":"image::EventInteraction.jpg[width\u003d\"700\"]"},{"lineNumber":681,"author":{"gitID":"-"},"content":""},{"lineNumber":682,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":683,"author":{"gitID":"-"},"content":"**Aspect:** Where calculation of statistics in the `Report` should be placed +"},{"lineNumber":684,"author":{"gitID":"-"},"content":"**Alternative 1 (current choice):** in `ModelManager` +"},{"lineNumber":685,"author":{"gitID":"-"},"content":"**Pros:**"},{"lineNumber":686,"author":{"gitID":"-"},"content":"Since the calculation requires fetching the list of all Persons in Infinity Book, Defining it in the `ModelManager` to reduce dependency among components. +"},{"lineNumber":687,"author":{"gitID":"-"},"content":"**Cons:** Have to modify multiple components such as `LogicManager`, `ModelManager`, `Event`. +"},{"lineNumber":688,"author":{"gitID":"-"},"content":"**Alternative 2:** in `Report` class itself +"},{"lineNumber":689,"author":{"gitID":"-"},"content":"**Pros:** Do not require a `Report` instance in Infinity Book, which can be redundant when user does not use. +"},{"lineNumber":690,"author":{"gitID":"-"},"content":"**Cons:** Have to write setter and getter to get the list of Persons from `Model`."},{"lineNumber":691,"author":{"gitID":"-"},"content":""},{"lineNumber":692,"author":{"gitID":"-"},"content":"---"},{"lineNumber":693,"author":{"gitID":"-"},"content":""},{"lineNumber":694,"author":{"gitID":"-"},"content":"**Aspect:** Choosing the region to show `ReportPanel` +"},{"lineNumber":695,"author":{"gitID":"-"},"content":"**Alternative 1 (current choice):** `ReportPanel` shares the same region with `BrowserPanel` +"},{"lineNumber":696,"author":{"gitID":"-"},"content":"**Pros:** Do not take additional area +"},{"lineNumber":697,"author":{"gitID":"-"},"content":"**Cons:** Have to implement `Event` handling to swap panel +"},{"lineNumber":698,"author":{"gitID":"-"},"content":""},{"lineNumber":699,"author":{"gitID":"-"},"content":"**Alternative 2:** Use a new panel +"},{"lineNumber":700,"author":{"gitID":"-"},"content":"**Pros:** User can view reports and the browser at the same time.   +"},{"lineNumber":701,"author":{"gitID":"-"},"content":"**Cons:** Add one more panel to the interface. +"},{"lineNumber":702,"author":{"gitID":"-"},"content":""},{"lineNumber":703,"author":{"gitID":"-"},"content":"---"},{"lineNumber":704,"author":{"gitID":"-"},"content":""},{"lineNumber":705,"author":{"gitID":"-"},"content":"**Aspect:** Choosing the chart color in Report +"},{"lineNumber":706,"author":{"gitID":"-"},"content":"**Alternative 1 (current choice):** Define a new color palettes +"},{"lineNumber":707,"author":{"gitID":"-"},"content":"**Pros:**"},{"lineNumber":708,"author":{"gitID":"-"},"content":"We are able to use color palettes that are vary in both hue and brightness"},{"lineNumber":709,"author":{"gitID":"-"},"content":"so that they are accessible by people who are color blind and obvious for everyone. +"},{"lineNumber":710,"author":{"gitID":"-"},"content":"**Cons:** Have to write code to overwrite the default color palettes. +"},{"lineNumber":711,"author":{"gitID":"-"},"content":""},{"lineNumber":712,"author":{"gitID":"-"},"content":"**Alternative 2:** Use a the default JavaFX chart color palettes +"},{"lineNumber":713,"author":{"gitID":"-"},"content":"**Pros:** Do not need to implement.   +"},{"lineNumber":714,"author":{"gitID":"-"},"content":"**Cons:** Do not have the control over visual effect. +"},{"lineNumber":715,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":716,"author":{"gitID":"-"},"content":"//end::report[]"},{"lineNumber":717,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":718,"author":{"gitID":"-"},"content":"//tag::tagcolor[]"},{"lineNumber":719,"author":{"gitID":"tiny767"},"content":"\u003d\u003d\u003d Tag colors [since v1.0]"},{"lineNumber":720,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":721,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":722,"author":{"gitID":"-"},"content":""},{"lineNumber":723,"author":{"gitID":"tiny767"},"content":"Use different colors for different tags inside person cards. For example, `friends` tags can be all in red and `colleagues` tags can be all in blue."},{"lineNumber":724,"author":{"gitID":"tiny767"},"content":"Pre-defined colors are included in `DarkTheme.css`, `LightTheme.css` and `MorningTheme.css`. We use hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs."},{"lineNumber":725,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":726,"author":{"gitID":"tiny767"},"content":"\u003d\u003d\u003d\u003d Design considerations"},{"lineNumber":727,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":728,"author":{"gitID":"tiny767"},"content":"**Aspect:** Implementation of color for tags +"},{"lineNumber":729,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":730,"author":{"gitID":"tiny767"},"content":"**Alternative 1 (current choice):** Have tags to be colored using hashcode instead of randomization +"},{"lineNumber":731,"author":{"gitID":"tiny767"},"content":"**Pros:** The color stay consistent each time the app is launched +"},{"lineNumber":732,"author":{"gitID":"tiny767"},"content":"**Cons:** Limited number of colors (the limiting factor is the size of pre-define color array) +"},{"lineNumber":733,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":734,"author":{"gitID":"tiny767"},"content":"**Alternative 2:** Have tag colors to be a random hexadecimal color value +"},{"lineNumber":735,"author":{"gitID":"tiny767"},"content":"**Pros:** Number of different color is very big (i.e. there is less repetitive color used)   +"},{"lineNumber":736,"author":{"gitID":"tiny767"},"content":"**Cons:** The color for each tag value might be different between app launchs +"},{"lineNumber":737,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":738,"author":{"gitID":"-"},"content":"//end::tagcolor[]"},{"lineNumber":739,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":740,"author":{"gitID":"deeheenguyen"},"content":"//tag::viewcommand[]"},{"lineNumber":741,"author":{"gitID":"deeheenguyen"},"content":"\u003d\u003d\u003d Display relevant Github or resume page. (Since v1.3)"},{"lineNumber":742,"author":{"gitID":"-"},"content":""},{"lineNumber":743,"author":{"gitID":"deeheenguyen"},"content":"As a candidate may have linked online resume or github page. The recruiter may want"},{"lineNumber":744,"author":{"gitID":"deeheenguyen"},"content":"to consider these pages."},{"lineNumber":745,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":746,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":747,"author":{"gitID":"deeheenguyen"},"content":"**Aspect**: Aspects: Implementation of removing/adding a linked page."},{"lineNumber":748,"author":{"gitID":"-"},"content":""},{"lineNumber":749,"author":{"gitID":"deeheenguyen"},"content":"**Alternative 1:**(current choice) Each person has a page, which is resume or github."},{"lineNumber":750,"author":{"gitID":"deeheenguyen"},"content":"Add the view command to view a specific person, and view the linked page on the browser panel. +"},{"lineNumber":751,"author":{"gitID":"deeheenguyen"},"content":"**Pros:** The page can be linked to the person, and it is easier to view by person\u0027s email +"},{"lineNumber":752,"author":{"gitID":"deeheenguyen"},"content":"**Cons:** Need to modify current implementation of person model +"},{"lineNumber":753,"author":{"gitID":"deeheenguyen"},"content":"**Alternative 2:** Add a new command to view specific page, which is hard code URL."},{"lineNumber":754,"author":{"gitID":"deeheenguyen"},"content":"**Pros:** No need to modify current person +"},{"lineNumber":755,"author":{"gitID":"deeheenguyen"},"content":"**Cons:** Hard to maintain the hard code URL"},{"lineNumber":756,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":757,"author":{"gitID":"deeheenguyen"},"content":"\u003d\u003d\u003d\u003d Implementation details"},{"lineNumber":758,"author":{"gitID":"deeheenguyen"},"content":"* `ViewCommandParser` class will extract emails ID from user input, form a predicate,"},{"lineNumber":759,"author":{"gitID":"deeheenguyen"},"content":"then pass it to `ViewCommand` class."},{"lineNumber":760,"author":{"gitID":"deeheenguyen"},"content":"* `ViewCommand` will take in the predicate and update the list of Persons by email ID,"},{"lineNumber":761,"author":{"gitID":"deeheenguyen"},"content":"and change the browser panel accordingly."},{"lineNumber":762,"author":{"gitID":"deeheenguyen"},"content":"source, java]"},{"lineNumber":763,"author":{"gitID":"deeheenguyen"},"content":"----"},{"lineNumber":764,"author":{"gitID":"deeheenguyen"},"content":"public class EmailFilter implements Predicate\u003cPerson\u003e {"},{"lineNumber":765,"author":{"gitID":"deeheenguyen"},"content":"    private final String email;"},{"lineNumber":766,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":767,"author":{"gitID":"deeheenguyen"},"content":"    public EmailFilter (Email email) {"},{"lineNumber":768,"author":{"gitID":"deeheenguyen"},"content":"        this.email \u003d email.toString();"},{"lineNumber":769,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":770,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":771,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":772,"author":{"gitID":"-"},"content":"    public boolean test(Person person) {"},{"lineNumber":773,"author":{"gitID":"deeheenguyen"},"content":"        return person.getEmail().toString().equals(this.email);"},{"lineNumber":774,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":775,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":776,"author":{"gitID":"deeheenguyen"},"content":"    @Override"},{"lineNumber":777,"author":{"gitID":"deeheenguyen"},"content":"    public boolean equals(Object other) {"},{"lineNumber":778,"author":{"gitID":"deeheenguyen"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":779,"author":{"gitID":"deeheenguyen"},"content":"                || (other instanceof EmailFilter // instanceof handles nulls"},{"lineNumber":780,"author":{"gitID":"deeheenguyen"},"content":"                \u0026\u0026 this.email.equals(((EmailFilter) other).email)); // state check"},{"lineNumber":781,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":782,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":783,"author":{"gitID":"deeheenguyen"},"content":"}"},{"lineNumber":784,"author":{"gitID":"deeheenguyen"},"content":"----"},{"lineNumber":785,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":786,"author":{"gitID":"deeheenguyen"},"content":"//end::viewcommand[]"},{"lineNumber":787,"author":{"gitID":"-"},"content":""},{"lineNumber":788,"author":{"gitID":"-"},"content":"// tag::autocorrect[]"},{"lineNumber":789,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Auto-correct and Auto-complete [since v1.4]"},{"lineNumber":790,"author":{"gitID":"-"},"content":""},{"lineNumber":791,"author":{"gitID":"-"},"content":"Infinity Book enhances the user\u0027s interaction with the application, with built in auto-correct and auto-complete. Command"},{"lineNumber":792,"author":{"gitID":"-"},"content":"words that are typed in are examined for spelling errors and completions upon `SPACE` and `TAB` press respectively."},{"lineNumber":793,"author":{"gitID":"-"},"content":""},{"lineNumber":794,"author":{"gitID":"-"},"content":"To include completion and correction support for a new command, simply add it into commandDictionary in"},{"lineNumber":795,"author":{"gitID":"-"},"content":"CommandCorrection#createDictionary() as shown in code snippet."},{"lineNumber":796,"author":{"gitID":"-"},"content":""},{"lineNumber":797,"author":{"gitID":"-"},"content":"[source:Java]"},{"lineNumber":798,"author":{"gitID":"-"},"content":"----"},{"lineNumber":799,"author":{"gitID":"-"},"content":"public static void createDictionary() {"},{"lineNumber":800,"author":{"gitID":"-"},"content":"        commandDictionary \u003d new HashSet\u003c\u003e();"},{"lineNumber":801,"author":{"gitID":"-"},"content":""},{"lineNumber":802,"author":{"gitID":"-"},"content":"        // .. add other command words"},{"lineNumber":803,"author":{"gitID":"-"},"content":"        commandDictionary.add(PostJobCommand.COMMAND_WORD);"},{"lineNumber":804,"author":{"gitID":"-"},"content":"}"},{"lineNumber":805,"author":{"gitID":"-"},"content":"----"},{"lineNumber":806,"author":{"gitID":"-"},"content":""},{"lineNumber":807,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Auto-complete Implementation"},{"lineNumber":808,"author":{"gitID":"-"},"content":""},{"lineNumber":809,"author":{"gitID":"-"},"content":"The user input is recorded in CommandBox, and upon `TAB` keypress, the CommandBox#navigateToCompletedCommand() method looks for command"},{"lineNumber":810,"author":{"gitID":"-"},"content":"words containing the entered string as the first substring."},{"lineNumber":811,"author":{"gitID":"-"},"content":""},{"lineNumber":812,"author":{"gitID":"-"},"content":".This activity diagram demonstrates the high level behavior of the autocomplete feature."},{"lineNumber":813,"author":{"gitID":"-"},"content":"image::AutocompleteActivityDiagram.png[width\u003d\"700\"]"},{"lineNumber":814,"author":{"gitID":"-"},"content":""},{"lineNumber":815,"author":{"gitID":"-"},"content":"When CommandCorrection#updateSuggestionsList() method is called, it searches through all command words for suitable matches."},{"lineNumber":816,"author":{"gitID":"-"},"content":""},{"lineNumber":817,"author":{"gitID":"-"},"content":"When multiple matches are available, the `TAB` keypress is counted, and the command box cycles through all suggestions. When no suggestions are available, the existing"},{"lineNumber":818,"author":{"gitID":"-"},"content":"text is left unchanged."},{"lineNumber":819,"author":{"gitID":"-"},"content":""},{"lineNumber":820,"author":{"gitID":"-"},"content":"Since the text in the command box is altered with each `TAB` press, a brief history is maintained containing the most recent suggestion"},{"lineNumber":821,"author":{"gitID":"-"},"content":"made by auto-complete and original user input. Here, the user has pressed the `TAB` key multiple times, but expects completions based on his input, not the recent suggestion that fills the command box."},{"lineNumber":822,"author":{"gitID":"-"},"content":""},{"lineNumber":823,"author":{"gitID":"-"},"content":""},{"lineNumber":824,"author":{"gitID":"-"},"content":"The following code snipped demonstrates the use of the suggestion history to choose the text to complete."},{"lineNumber":825,"author":{"gitID":"-"},"content":""},{"lineNumber":826,"author":{"gitID":"-"},"content":"[source:Java]"},{"lineNumber":827,"author":{"gitID":"-"},"content":"----"},{"lineNumber":828,"author":{"gitID":"-"},"content":"    public static String updateTextToComplete(String textToComplete) {"},{"lineNumber":829,"author":{"gitID":"-"},"content":"        if (textToComplete.compareTo(recentSuggestion.trim()) \u003d\u003d 0) {"},{"lineNumber":830,"author":{"gitID":"-"},"content":"            return recentInput;"},{"lineNumber":831,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":832,"author":{"gitID":"-"},"content":"            return textToComplete;"},{"lineNumber":833,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":834,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":835,"author":{"gitID":"-"},"content":"----"},{"lineNumber":836,"author":{"gitID":"-"},"content":""},{"lineNumber":837,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Auto-correct Implementation"},{"lineNumber":838,"author":{"gitID":"-"},"content":""},{"lineNumber":839,"author":{"gitID":"-"},"content":"Auto-correct searches command word input for potential one edit distance errors, including missed,swapped and stray characters."},{"lineNumber":840,"author":{"gitID":"-"},"content":""},{"lineNumber":841,"author":{"gitID":"-"},"content":"Two details about the implementation are noteworthy:"},{"lineNumber":842,"author":{"gitID":"-"},"content":""},{"lineNumber":843,"author":{"gitID":"-"},"content":". For seamless background operation, command words that are not recognized are automatically analysed for spelling errors on `SPACE` key press."},{"lineNumber":844,"author":{"gitID":"-"},"content":". In cases where commands with spell errors are copy-pasted into the command box, `SPACE` key press separates the command word from arguments, and corrects the command word without altering the rest of the command."},{"lineNumber":845,"author":{"gitID":"-"},"content":""},{"lineNumber":846,"author":{"gitID":"-"},"content":"Upon being triggered, CommandBox#navigateToLikelyInput() method returns the likely correction using the mentioned heuristics."},{"lineNumber":847,"author":{"gitID":"-"},"content":""},{"lineNumber":848,"author":{"gitID":"-"},"content":"When multiple suggestions are available, corrections obtained by removing stray character, and adding missing character are prioritized, in that order. This is in line with"},{"lineNumber":849,"author":{"gitID":"-"},"content":"belief that these are the most common kinds of errors."},{"lineNumber":850,"author":{"gitID":"-"},"content":""},{"lineNumber":851,"author":{"gitID":"-"},"content":"The following code snippet demonstrates this ability clearly."},{"lineNumber":852,"author":{"gitID":"-"},"content":""},{"lineNumber":853,"author":{"gitID":"-"},"content":"[source:Java]"},{"lineNumber":854,"author":{"gitID":"-"},"content":"----"},{"lineNumber":855,"author":{"gitID":"-"},"content":"   public static String extractCommandWord(String commandText) {"},{"lineNumber":856,"author":{"gitID":"-"},"content":"           String trimmedCommandText \u003d commandText.trim();"},{"lineNumber":857,"author":{"gitID":"-"},"content":"           String[] wordsInCommandText \u003d trimmedCommandText.split(\" \");"},{"lineNumber":858,"author":{"gitID":"-"},"content":"           commandParameters \u003d trimmedCommandText.replace(wordsInCommandText[0], \"\");"},{"lineNumber":859,"author":{"gitID":"-"},"content":"           return wordsInCommandText[0];"},{"lineNumber":860,"author":{"gitID":"-"},"content":"       }"},{"lineNumber":861,"author":{"gitID":"-"},"content":"----"},{"lineNumber":862,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":863,"author":{"gitID":"-"},"content":"// end::autocorrect[]"},{"lineNumber":864,"author":{"gitID":"-"},"content":""},{"lineNumber":865,"author":{"gitID":"-"},"content":"link:#top[Back to top]"},{"lineNumber":866,"author":{"gitID":"-"},"content":""},{"lineNumber":867,"author":{"gitID":"-"},"content":"// tag::jobposting[]"},{"lineNumber":868,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Job Postings [Since v1.3]"},{"lineNumber":869,"author":{"gitID":"-"},"content":""},{"lineNumber":870,"author":{"gitID":"-"},"content":"Recruiters may have several job openings available with varying required skills, location and tags. These are represented in the Infinity"},{"lineNumber":871,"author":{"gitID":"-"},"content":"Book as Job Postings. Job postings may be added or removed at any time. Existing job postings can be listed, searched, edited and deleted."},{"lineNumber":872,"author":{"gitID":"-"},"content":"Any existing job postings may be matched with the list of candidates to filter potential matches."},{"lineNumber":873,"author":{"gitID":"-"},"content":""},{"lineNumber":874,"author":{"gitID":"-"},"content":"// end::jobposting[]"},{"lineNumber":875,"author":{"gitID":"-"},"content":""},{"lineNumber":876,"author":{"gitID":"-"},"content":"// tag::jobposting1[]"},{"lineNumber":877,"author":{"gitID":"-"},"content":""},{"lineNumber":878,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Implementation Specifics"},{"lineNumber":879,"author":{"gitID":"-"},"content":""},{"lineNumber":880,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Model Component"},{"lineNumber":881,"author":{"gitID":"-"},"content":""},{"lineNumber":882,"author":{"gitID":"-"},"content":"Job postings are maintained in the Model in a UniqueJobList, enforcing uniqueness among the stored individual job postings."},{"lineNumber":883,"author":{"gitID":"-"},"content":""},{"lineNumber":884,"author":{"gitID":"-"},"content":".UML diagram showing representation of UniqueJobList in Infinity Book."},{"lineNumber":885,"author":{"gitID":"-"},"content":"image::UniqueJobListUML.png[width\u003d\"300\"]"},{"lineNumber":886,"author":{"gitID":"-"},"content":""},{"lineNumber":887,"author":{"gitID":"-"},"content":"Individual job postings are represented by the Job object with attributes `Job Title`, `Location`, `Skills` and `Tags`. The class relationship is shown"},{"lineNumber":888,"author":{"gitID":"-"},"content":"in Figure 2 below."},{"lineNumber":889,"author":{"gitID":"-"},"content":""},{"lineNumber":890,"author":{"gitID":"-"},"content":".UML diagram showing representation of Job in Infinity Book."},{"lineNumber":891,"author":{"gitID":"-"},"content":"image::JobUMLDiagram.png[width\u003d\"300\"]"},{"lineNumber":892,"author":{"gitID":"-"},"content":""},{"lineNumber":893,"author":{"gitID":"-"},"content":"In addition, the Person and Job class have been modified to maintain Skills as an additional field to offer better functionality"},{"lineNumber":894,"author":{"gitID":"-"},"content":"during candidate-job matching. The `add` and `edit` commands reflect these changes as well."},{"lineNumber":895,"author":{"gitID":"-"},"content":""},{"lineNumber":896,"author":{"gitID":"-"},"content":"Together, this modifies the Model to the state shown in the following diagram."},{"lineNumber":897,"author":{"gitID":"-"},"content":""},{"lineNumber":898,"author":{"gitID":"-"},"content":".A complete picture of the model as maintained by Infinity Book."},{"lineNumber":899,"author":{"gitID":"-"},"content":"image::ModelWithJobUML.png[width\u003d\"600\"]"},{"lineNumber":900,"author":{"gitID":"-"},"content":""},{"lineNumber":901,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Storage Component"},{"lineNumber":902,"author":{"gitID":"-"},"content":""},{"lineNumber":903,"author":{"gitID":"-"},"content":"Job postings are stored in `XmlAdaptedJob` objects, which maintain a class relationship as shown in this diagram."},{"lineNumber":904,"author":{"gitID":"-"},"content":""},{"lineNumber":905,"author":{"gitID":"-"},"content":".Job objects are saved using XmlAdaptedJob objects as shown above."},{"lineNumber":906,"author":{"gitID":"-"},"content":"image::JobStorageDiagram.png[width\u003d\"600\"]"},{"lineNumber":907,"author":{"gitID":"-"},"content":""},{"lineNumber":908,"author":{"gitID":"-"},"content":"An example job stored in this format is reproduced below:"},{"lineNumber":909,"author":{"gitID":"-"},"content":""},{"lineNumber":910,"author":{"gitID":"-"},"content":"[source:xml]"},{"lineNumber":911,"author":{"gitID":"-"},"content":"----"},{"lineNumber":912,"author":{"gitID":"-"},"content":"\u003cjobs\u003e"},{"lineNumber":913,"author":{"gitID":"-"},"content":"        \u003cjobTitle\u003eBackend Engineer\u003c/jobTitle\u003e"},{"lineNumber":914,"author":{"gitID":"-"},"content":"        \u003clocation\u003eGeylang\u003c/location\u003e"},{"lineNumber":915,"author":{"gitID":"-"},"content":"        \u003cskills\u003eJava,SQL\u003c/skills\u003e"},{"lineNumber":916,"author":{"gitID":"-"},"content":"        \u003ctagged\u003eSEIntern\u003c/tagged\u003e"},{"lineNumber":917,"author":{"gitID":"-"},"content":"        \u003ctagged\u003eATAP\u003c/tagged\u003e"},{"lineNumber":918,"author":{"gitID":"-"},"content":"\u003c/jobs\u003e"},{"lineNumber":919,"author":{"gitID":"-"},"content":"----"},{"lineNumber":920,"author":{"gitID":"-"},"content":""},{"lineNumber":921,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d UI Component"},{"lineNumber":922,"author":{"gitID":"-"},"content":""},{"lineNumber":923,"author":{"gitID":"-"},"content":"The main window contains a JobListPanel, which contains individual jobs represented using JobListCards."},{"lineNumber":924,"author":{"gitID":"-"},"content":"JobListCards represent the fields in each Job using Labels and flowPanes."},{"lineNumber":925,"author":{"gitID":"-"},"content":""},{"lineNumber":926,"author":{"gitID":"-"},"content":"// end::jobposting1[]"},{"lineNumber":927,"author":{"gitID":"-"},"content":""},{"lineNumber":928,"author":{"gitID":"-"},"content":"// tag::jobposting2[]"},{"lineNumber":929,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Job Operations and Logic"},{"lineNumber":930,"author":{"gitID":"-"},"content":""},{"lineNumber":931,"author":{"gitID":"-"},"content":"Operations performed on jobs follow the sequence of operations described in the diagram below."},{"lineNumber":932,"author":{"gitID":"-"},"content":""},{"lineNumber":933,"author":{"gitID":"-"},"content":". Command input is received by the UI component."},{"lineNumber":934,"author":{"gitID":"-"},"content":". The command execution is handled by the Logic component."},{"lineNumber":935,"author":{"gitID":"-"},"content":". The changes to data are effected by the Model component."},{"lineNumber":936,"author":{"gitID":"-"},"content":". The new Infinity Book data is saved by the Storage component."},{"lineNumber":937,"author":{"gitID":"-"},"content":""},{"lineNumber":938,"author":{"gitID":"-"},"content":"This sequence of events is summarized in the following sequence diagram."},{"lineNumber":939,"author":{"gitID":"-"},"content":""},{"lineNumber":940,"author":{"gitID":"-"},"content":".A high level sequence diagram showing events triggered by the `postjob` command."},{"lineNumber":941,"author":{"gitID":"-"},"content":"image::SequenceDiagramJobPosting.png[width\u003d\"600\"]"},{"lineNumber":942,"author":{"gitID":"-"},"content":""},{"lineNumber":943,"author":{"gitID":"-"},"content":"The following job posting commands are implemented extending `UndoableCommand` and `Command`:"},{"lineNumber":944,"author":{"gitID":"-"},"content":""},{"lineNumber":945,"author":{"gitID":"-"},"content":"[width\u003d\"50%\",cols\u003d\"\u003c50%,\u003c50%\",options\u003d\"header\",]"},{"lineNumber":946,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":947,"author":{"gitID":"-"},"content":"|extends `UndoableCommand` | extends `Command`"},{"lineNumber":948,"author":{"gitID":"-"},"content":"|`PostJobCommand` +"},{"lineNumber":949,"author":{"gitID":"-"},"content":" `EditJobCommand` +"},{"lineNumber":950,"author":{"gitID":"-"},"content":" `DeleteJobCommand` +"},{"lineNumber":951,"author":{"gitID":"-"},"content":" `MatchJobCommand` | `ListJobCommand` +"},{"lineNumber":952,"author":{"gitID":"-"},"content":"  `FindJobCommand`"},{"lineNumber":953,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":954,"author":{"gitID":"-"},"content":""},{"lineNumber":955,"author":{"gitID":"-"},"content":"The following diagram details the class relationship for Commands."},{"lineNumber":956,"author":{"gitID":"-"},"content":""},{"lineNumber":957,"author":{"gitID":"-"},"content":".UML Diagram depicting the class relationship between command classes."},{"lineNumber":958,"author":{"gitID":"-"},"content":"image::CommandsStructure.png[width\u003d\"300\"]"},{"lineNumber":959,"author":{"gitID":"-"},"content":""},{"lineNumber":960,"author":{"gitID":"-"},"content":"---"},{"lineNumber":961,"author":{"gitID":"-"},"content":"// end::jobposting2[]"},{"lineNumber":962,"author":{"gitID":"-"},"content":""},{"lineNumber":963,"author":{"gitID":"-"},"content":"// tag::jobposting3[]"},{"lineNumber":964,"author":{"gitID":"-"},"content":""},{"lineNumber":965,"author":{"gitID":"-"},"content":""},{"lineNumber":966,"author":{"gitID":"-"},"content":"*Adding Job Postings*"},{"lineNumber":967,"author":{"gitID":"-"},"content":""},{"lineNumber":968,"author":{"gitID":"-"},"content":"Adding job postings to Infinity Book is performed by the PostJobCommand. The sequence of events triggered while adding a job posting are shown in the diagram below:"},{"lineNumber":969,"author":{"gitID":"-"},"content":""},{"lineNumber":970,"author":{"gitID":"-"},"content":".Adding a job posting is executed as shown above."},{"lineNumber":971,"author":{"gitID":"-"},"content":"image::PostJobCommandSequenceDiagram.png[width\u003d\"600\"]"},{"lineNumber":972,"author":{"gitID":"-"},"content":""},{"lineNumber":973,"author":{"gitID":"-"},"content":"The PostJobCommand#executeUndoableCommand triggers addition of the Job to `UniqueJobList` in AddressBook#add"},{"lineNumber":974,"author":{"gitID":"-"},"content":"The following code snippet demonstrates the prevention of duplicates in the UniqueJobList"},{"lineNumber":975,"author":{"gitID":"-"},"content":"[source:Java]"},{"lineNumber":976,"author":{"gitID":"-"},"content":"----"},{"lineNumber":977,"author":{"gitID":"-"},"content":"    public void add(Job toAdd) throws DuplicateJobException {"},{"lineNumber":978,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":979,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":980,"author":{"gitID":"-"},"content":"            throw new DuplicateJobException();"},{"lineNumber":981,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":982,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":983,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":984,"author":{"gitID":"-"},"content":"----"},{"lineNumber":985,"author":{"gitID":"-"},"content":""},{"lineNumber":986,"author":{"gitID":"-"},"content":"---"},{"lineNumber":987,"author":{"gitID":"-"},"content":"// end::jobposting3[]"},{"lineNumber":988,"author":{"gitID":"-"},"content":"// tag::jobposting4[]"},{"lineNumber":989,"author":{"gitID":"-"},"content":""},{"lineNumber":990,"author":{"gitID":"-"},"content":"*Editing Job Postings*"},{"lineNumber":991,"author":{"gitID":"-"},"content":""},{"lineNumber":992,"author":{"gitID":"-"},"content":"Editing job postings in the Infinity Book is performed by the EditJobCommand. The sequence of events triggered while editing a job posting are shown in the diagram below:"},{"lineNumber":993,"author":{"gitID":"-"},"content":""},{"lineNumber":994,"author":{"gitID":"-"},"content":".Editing a job posting is executed as shown above."},{"lineNumber":995,"author":{"gitID":"-"},"content":"image::EditJobCommandSequenceDiagram.png[width\u003d\"600\"]"},{"lineNumber":996,"author":{"gitID":"-"},"content":""},{"lineNumber":997,"author":{"gitID":"-"},"content":"The EditJobCommand#executeUndoableCommand triggers editing of a existing Job in `UniqueJobList` in AddressBook#add"},{"lineNumber":998,"author":{"gitID":"-"},"content":"The `EditJobCommand` ensures that the index specified refers to a valid index in the most recent listing of jobs."},{"lineNumber":999,"author":{"gitID":"-"},"content":"Editing jobs to cause duplicates in the UniqueJobList is prevented by throwing a DuplicateJobException."},{"lineNumber":1000,"author":{"gitID":"-"},"content":""},{"lineNumber":1001,"author":{"gitID":"-"},"content":"The following code snippet demonstrates the prevention of duplicates and index checking in the UniqueJobList after editing"},{"lineNumber":1002,"author":{"gitID":"-"},"content":""},{"lineNumber":1003,"author":{"gitID":"-"},"content":"[source:Java]"},{"lineNumber":1004,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1005,"author":{"gitID":"-"},"content":"    public void setJob(Job target, Job editedJob) throws DuplicateJobException, JobNotFoundException {"},{"lineNumber":1006,"author":{"gitID":"-"},"content":"        requireNonNull(editedJob);"},{"lineNumber":1007,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":1008,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":1009,"author":{"gitID":"-"},"content":"            throw new JobNotFoundException();"},{"lineNumber":1010,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":1011,"author":{"gitID":"-"},"content":"        if (!target.equals(editedJob) \u0026\u0026 internalList.contains(editedJob)) {"},{"lineNumber":1012,"author":{"gitID":"-"},"content":"            throw new DuplicateJobException();"},{"lineNumber":1013,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":1014,"author":{"gitID":"-"},"content":"        internalList.set(index, editedJob);"},{"lineNumber":1015,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":1016,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1017,"author":{"gitID":"-"},"content":""},{"lineNumber":1018,"author":{"gitID":"-"},"content":"To completely specify the changes to the Job object specified by EditJobCommand, an EditJobCommandDescriptor is parsed from the command, and used to update changes in the Model. Completing"},{"lineNumber":1019,"author":{"gitID":"-"},"content":"these operations ensures the new Job object is updated in the Infinity Book."},{"lineNumber":1020,"author":{"gitID":"-"},"content":""},{"lineNumber":1021,"author":{"gitID":"-"},"content":"---"},{"lineNumber":1022,"author":{"gitID":"-"},"content":"*Delete Job Postings*"},{"lineNumber":1023,"author":{"gitID":"-"},"content":""},{"lineNumber":1024,"author":{"gitID":"-"},"content":"Deleting job postings in the Infinity Book is performed by the DeleteJobCommand. The sequence of events triggered while deleting a job posting are shown in the diagram below:"},{"lineNumber":1025,"author":{"gitID":"-"},"content":""},{"lineNumber":1026,"author":{"gitID":"-"},"content":".Deleting a job posting is executed as shown above."},{"lineNumber":1027,"author":{"gitID":"-"},"content":"image::DeleteJobCommandSequenceDiagram.png[width\u003d\"700\"]"},{"lineNumber":1028,"author":{"gitID":"-"},"content":""},{"lineNumber":1029,"author":{"gitID":"-"},"content":"The DeleteJobCommand selects a Job object by matching the index with the last shown job list, and checks the index as shown in the following code snippet."},{"lineNumber":1030,"author":{"gitID":"-"},"content":"[source:Java]"},{"lineNumber":1031,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1032,"author":{"gitID":"tiny767"},"content":" protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":1033,"author":{"gitID":"-"},"content":"        List\u003cJob\u003e lastShownList \u003d model.getFilteredJobList();"},{"lineNumber":1034,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":1035,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_JOB_DISPLAYED_INDEX);"},{"lineNumber":1036,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":1037,"author":{"gitID":"-"},"content":""},{"lineNumber":1038,"author":{"gitID":"-"},"content":"        jobToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":1039,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1040,"author":{"gitID":"-"},"content":"The changes to the UniqueJobList are enacted by AddressBook#removeJob, which completes the removal of the object and triggers Storage to update the data."},{"lineNumber":1041,"author":{"gitID":"-"},"content":""},{"lineNumber":1042,"author":{"gitID":"-"},"content":"---"},{"lineNumber":1043,"author":{"gitID":"-"},"content":"// end::jobposting4[]"},{"lineNumber":1044,"author":{"gitID":"-"},"content":""},{"lineNumber":1045,"author":{"gitID":"-"},"content":"// tag::jobposting5[]"},{"lineNumber":1046,"author":{"gitID":"-"},"content":""},{"lineNumber":1047,"author":{"gitID":"-"},"content":"*Matching Job Postings*"},{"lineNumber":1048,"author":{"gitID":"-"},"content":""},{"lineNumber":1049,"author":{"gitID":"-"},"content":"Matching job postings to candidates in the Infinity Book is performed by the MatchJobCommand."},{"lineNumber":1050,"author":{"gitID":"-"},"content":""},{"lineNumber":1051,"author":{"gitID":"-"},"content":"The sequence of events triggered while matching a job posting are shown in the diagram below:"},{"lineNumber":1052,"author":{"gitID":"-"},"content":""},{"lineNumber":1053,"author":{"gitID":"-"},"content":".`matchjob` uses predicate based filtering similar to `findjob` and `listjobs`"},{"lineNumber":1054,"author":{"gitID":"-"},"content":"image::matchJobSequenceDiagram.png[width\u003d\"700\"]"},{"lineNumber":1055,"author":{"gitID":"-"},"content":""},{"lineNumber":1056,"author":{"gitID":"-"},"content":"The MatchJobCommand selects a Job object by matching the index with the last shown job list. A PersonMatchesJobPredicate is used to find matches, by looking for matches between tags, location and skills fields of the Job and Person."},{"lineNumber":1057,"author":{"gitID":"-"},"content":""},{"lineNumber":1058,"author":{"gitID":"-"},"content":"Search parameters can be excluded from search when they are set to \u0027ALL\u0027. Under these circumstances only the other parameters will influence the search."},{"lineNumber":1059,"author":{"gitID":"-"},"content":""},{"lineNumber":1060,"author":{"gitID":"-"},"content":"The following code snippet shows how Location can be excluded from the search. Other two parameters are handles similarly."},{"lineNumber":1061,"author":{"gitID":"-"},"content":""},{"lineNumber":1062,"author":{"gitID":"-"},"content":"[source:Java]"},{"lineNumber":1063,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1064,"author":{"gitID":"-"},"content":"public boolean test(Person person) {"},{"lineNumber":1065,"author":{"gitID":"-"},"content":""},{"lineNumber":1066,"author":{"gitID":"-"},"content":"        // .. code to set up and assign locationMatch, skillsMatch and tagsMatch"},{"lineNumber":1067,"author":{"gitID":"-"},"content":"        locationMatch \u003d isLocationMatchSatisfied(locationMatch);"},{"lineNumber":1068,"author":{"gitID":"-"},"content":"        //.. similarly for skillsMatch and tagsMatch"},{"lineNumber":1069,"author":{"gitID":"-"},"content":""},{"lineNumber":1070,"author":{"gitID":"-"},"content":"        return locationMatch \u0026\u0026 skillsMatch \u0026\u0026 tagsMatch;"},{"lineNumber":1071,"author":{"gitID":"-"},"content":" }"},{"lineNumber":1072,"author":{"gitID":"-"},"content":" private boolean isLocationMatchSatisfied(boolean locationMatch) {"},{"lineNumber":1073,"author":{"gitID":"-"},"content":"         if (notLocationBound) {"},{"lineNumber":1074,"author":{"gitID":"-"},"content":"             locationMatch \u003d true;"},{"lineNumber":1075,"author":{"gitID":"-"},"content":"         }"},{"lineNumber":1076,"author":{"gitID":"-"},"content":"         return locationMatch;"},{"lineNumber":1077,"author":{"gitID":"-"},"content":" }"},{"lineNumber":1078,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1079,"author":{"gitID":"-"},"content":""},{"lineNumber":1080,"author":{"gitID":"-"},"content":"The PersonListPanel is populated with a list of candidates who match the job according to the set parameters."},{"lineNumber":1081,"author":{"gitID":"-"},"content":""},{"lineNumber":1082,"author":{"gitID":"-"},"content":"---"},{"lineNumber":1083,"author":{"gitID":"-"},"content":"// end::jobposting5[]"},{"lineNumber":1084,"author":{"gitID":"-"},"content":""},{"lineNumber":1085,"author":{"gitID":"-"},"content":"// tag::listandfind[]"},{"lineNumber":1086,"author":{"gitID":"-"},"content":"*Listing Job Postings*"},{"lineNumber":1087,"author":{"gitID":"-"},"content":""},{"lineNumber":1088,"author":{"gitID":"-"},"content":"Listing all job postings in the Infinity Book is performed by the FindJobCommand. The sequence of events triggered while listing all job postings are shown in the diagram below:"},{"lineNumber":1089,"author":{"gitID":"-"},"content":""},{"lineNumber":1090,"author":{"gitID":"-"},"content":".Sequence diagram above shows the sequence of events triggered on execution of `listjobs`"},{"lineNumber":1091,"author":{"gitID":"-"},"content":"image::listjobcommandSequenceDiagram.png[width\u003d\"600\"]"},{"lineNumber":1092,"author":{"gitID":"-"},"content":""},{"lineNumber":1093,"author":{"gitID":"-"},"content":"The ListJobCommand selects displays all Job objects from UniqueJobList in the JobListPanel."},{"lineNumber":1094,"author":{"gitID":"-"},"content":""},{"lineNumber":1095,"author":{"gitID":"-"},"content":"---"},{"lineNumber":1096,"author":{"gitID":"-"},"content":""},{"lineNumber":1097,"author":{"gitID":"-"},"content":"*Finding Job Postings*"},{"lineNumber":1098,"author":{"gitID":"-"},"content":""},{"lineNumber":1099,"author":{"gitID":"-"},"content":"Finding job postings by keywords in the Infinity Book is performed by the FindJobCommand. The sequence of events triggered while finding a job posting are extremely similar to listing all job postings as in Figure above, differing only in the specifics of the predicate used."},{"lineNumber":1100,"author":{"gitID":"-"},"content":""},{"lineNumber":1101,"author":{"gitID":"-"},"content":"The FindJobCommand selects Job objects to display by matching the keyword with the Job Title, Location or Tags, and lists all matches in the JobListPanel."},{"lineNumber":1102,"author":{"gitID":"-"},"content":""},{"lineNumber":1103,"author":{"gitID":"-"},"content":"// end::listandfind[]"},{"lineNumber":1104,"author":{"gitID":"-"},"content":""},{"lineNumber":1105,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":1106,"author":{"gitID":"-"},"content":"**Aspect:** Implementation of additional Skill parameter for Person and Job +"},{"lineNumber":1107,"author":{"gitID":"-"},"content":""},{"lineNumber":1108,"author":{"gitID":"-"},"content":"**Alternative 1 (current choice):** Maintain skills as list of strings. +"},{"lineNumber":1109,"author":{"gitID":"-"},"content":"**Pros:** Allows recruiter freedom in creating a skills list as they need. +"},{"lineNumber":1110,"author":{"gitID":"-"},"content":"**Cons:** Searching requires complex string operations. Duplicates of the same skill will be found under different persons. +"},{"lineNumber":1111,"author":{"gitID":"-"},"content":""},{"lineNumber":1112,"author":{"gitID":"-"},"content":"**Alternative 2:** Maintain a UniqueSkillsList similar to tags. +"},{"lineNumber":1113,"author":{"gitID":"-"},"content":"**Pros:** Different candidates with similar skills will utilize the same object. +"},{"lineNumber":1114,"author":{"gitID":"-"},"content":"**Cons:** The list of skills must be synchronized with both person list and job list, removing any skills that are not used by both."},{"lineNumber":1115,"author":{"gitID":"-"},"content":""},{"lineNumber":1116,"author":{"gitID":"-"},"content":"---"},{"lineNumber":1117,"author":{"gitID":"-"},"content":""},{"lineNumber":1118,"author":{"gitID":"-"},"content":"**Aspect:** Implementation of Job-Person Matching +"},{"lineNumber":1119,"author":{"gitID":"-"},"content":""},{"lineNumber":1120,"author":{"gitID":"-"},"content":"**Alternative 1 (current choice):** Match as many keywords in an OR search as possible +"},{"lineNumber":1121,"author":{"gitID":"-"},"content":"**Pros:** Maintains existing search predicates with minor modifications. +"},{"lineNumber":1122,"author":{"gitID":"-"},"content":"**Cons:** May not provide effective filtering. +"},{"lineNumber":1123,"author":{"gitID":"-"},"content":""},{"lineNumber":1124,"author":{"gitID":"-"},"content":"**Alternative 2:** Indicate required and optional matches in job posting. +"},{"lineNumber":1125,"author":{"gitID":"-"},"content":"**Pros:** Search can be customized to be as accurate as required. +"},{"lineNumber":1126,"author":{"gitID":"-"},"content":"**Cons:** Spelling differences may still cause diminished effectiveness."},{"lineNumber":1127,"author":{"gitID":"-"},"content":""},{"lineNumber":1128,"author":{"gitID":"-"},"content":"// end::jobposting[]"},{"lineNumber":1129,"author":{"gitID":"-"},"content":""},{"lineNumber":1130,"author":{"gitID":"-"},"content":"link:#top[Back to top]"},{"lineNumber":1131,"author":{"gitID":"-"},"content":""},{"lineNumber":1132,"author":{"gitID":"tiny767"},"content":"// tag::theme[]"},{"lineNumber":1133,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1134,"author":{"gitID":"tiny767"},"content":"\u003d\u003d\u003d Theming Mechanism [since v1.3]"},{"lineNumber":1135,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1136,"author":{"gitID":"tiny767"},"content":"The theme mechanism is facilitated by a singleton class `UiTheme` which will be called inside the `MainWindow` constructor where it passes its `scene` into the `UiTheme` class."},{"lineNumber":1137,"author":{"gitID":"tiny767"},"content":"The `scene` is necessary for changing the CSS at runtime."},{"lineNumber":1138,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1139,"author":{"gitID":"tiny767"},"content":"The class `UiTheme` requires the scene to be set at `MainWindow` class so that it can be used to edit themes."},{"lineNumber":1140,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1141,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1142,"author":{"gitID":"tiny767"},"content":"----"},{"lineNumber":1143,"author":{"gitID":"tiny767"},"content":"public class UiTheme {"},{"lineNumber":1144,"author":{"gitID":"tiny767"},"content":"    ..."},{"lineNumber":1145,"author":{"gitID":"tiny767"},"content":"    public static void setScene(Scene s) {"},{"lineNumber":1146,"author":{"gitID":"tiny767"},"content":"        scene \u003d s;"},{"lineNumber":1147,"author":{"gitID":"tiny767"},"content":"        setDefaultTheme();"},{"lineNumber":1148,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":1149,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1150,"author":{"gitID":"tiny767"},"content":"    private static void setDefaultTheme() {"},{"lineNumber":1151,"author":{"gitID":"tiny767"},"content":"        setToMorningTheme();"},{"lineNumber":1152,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":1153,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1154,"author":{"gitID":"tiny767"},"content":"    public static void setToLightTheme() {"},{"lineNumber":1155,"author":{"gitID":"tiny767"},"content":"        scene.getStylesheets().setAll(LIGHT_THEME_STYLE);"},{"lineNumber":1156,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":1157,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1158,"author":{"gitID":"tiny767"},"content":"    public static void setToDarkTheme() {"},{"lineNumber":1159,"author":{"gitID":"tiny767"},"content":"        scene.getStylesheets().setAll(DARK_THEME_STYLE);"},{"lineNumber":1160,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":1161,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1162,"author":{"gitID":"tiny767"},"content":"    public static void setToMorningTheme() {"},{"lineNumber":1163,"author":{"gitID":"tiny767"},"content":"        scene.getStylesheets().setAll(MORNING_THEME_STYLE);"},{"lineNumber":1164,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":1165,"author":{"gitID":"tiny767"},"content":"    ..."},{"lineNumber":1166,"author":{"gitID":"tiny767"},"content":"}"},{"lineNumber":1167,"author":{"gitID":"tiny767"},"content":"----"},{"lineNumber":1168,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1169,"author":{"gitID":"tiny767"},"content":"Example of calling the application to change to light theme:"},{"lineNumber":1170,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1171,"author":{"gitID":"tiny767"},"content":"----"},{"lineNumber":1172,"author":{"gitID":"tiny767"},"content":"UiTheme.getInstance().setToLightTheme();"},{"lineNumber":1173,"author":{"gitID":"tiny767"},"content":"----"},{"lineNumber":1174,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1175,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":1176,"author":{"gitID":"-"},"content":""},{"lineNumber":1177,"author":{"gitID":"tiny767"},"content":"**Aspect:** Ways to change the application theme +"},{"lineNumber":1178,"author":{"gitID":"tiny767"},"content":"**Alternative 1 (current choice):** Use a dedicated singleton class `UiTheme` to change the theme +"},{"lineNumber":1179,"author":{"gitID":"tiny767"},"content":"**Pros:** Provide a dedicated class that manages all the changing of themes. `UiTheme` can contain many CSS theme file paths and thus the theme mechanism is more scalable . It is easier for `ThemeCommand` class to call `UiTheme` instance and use its methods directly. +"},{"lineNumber":1180,"author":{"gitID":"tiny767"},"content":"**Cons:** Increases coupling +"},{"lineNumber":1181,"author":{"gitID":"tiny767"},"content":"**Alternative 2:** Change the themes in `MainWindow` class directly +"},{"lineNumber":1182,"author":{"gitID":"tiny767"},"content":"**Pros:** Decreases coupling +"},{"lineNumber":1183,"author":{"gitID":"tiny767"},"content":"**Cons:** Violates the single responsibility principle since `MainWindow` class also controls the changing of theme. It is harder for `ThemeCommand` class to access the methods from `MainWindow` to change theme +"},{"lineNumber":1184,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1185,"author":{"gitID":"tiny767"},"content":"// end::theme[]"},{"lineNumber":1186,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1187,"author":{"gitID":"deeheenguyen"},"content":"//tag::interviewmanagement[]"},{"lineNumber":1188,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Interview Management [Since v1.5rc]"},{"lineNumber":1189,"author":{"gitID":"deeheenguyen"},"content":"Interviewing is one of the important steps in recruiting process."},{"lineNumber":1190,"author":{"gitID":"deeheenguyen"},"content":"HR may need a tool to manage interview efficiently. The Infinity Book will"},{"lineNumber":1191,"author":{"gitID":"deeheenguyen"},"content":"need interview model with basic features including adding interview, listing"},{"lineNumber":1192,"author":{"gitID":"deeheenguyen"},"content":"interview, and deleting interview."},{"lineNumber":1193,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":1194,"author":{"gitID":"deeheenguyen"},"content":"* Model Component:"},{"lineNumber":1195,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":1196,"author":{"gitID":"-"},"content":".Add Interview Model to Model Component"},{"lineNumber":1197,"author":{"gitID":"deeheenguyen"},"content":"image::InterviewModel.png[width\u003d\"700\"]"},{"lineNumber":1198,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":1199,"author":{"gitID":"deeheenguyen"},"content":"* Storage Component:"},{"lineNumber":1200,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":1201,"author":{"gitID":"deeheenguyen"},"content":".add XmlAdaptedInterview to Storage Component"},{"lineNumber":1202,"author":{"gitID":"deeheenguyen"},"content":"image::InterviewStorage.png[width\u003d\"700]"},{"lineNumber":1203,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":1204,"author":{"gitID":"deeheenguyen"},"content":"\u003d\u003d\u003d\u003d Adding an interview"},{"lineNumber":1205,"author":{"gitID":"deeheenguyen"},"content":"The recruiter may want to conduct an interview with candidates, and maintain"},{"lineNumber":1206,"author":{"gitID":"deeheenguyen"},"content":"an interview lists."},{"lineNumber":1207,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":1208,"author":{"gitID":"deeheenguyen"},"content":"Aspects: Implementation of removing/add interview with candidates."},{"lineNumber":1209,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":1210,"author":{"gitID":"deeheenguyen"},"content":"**Alternative 1:** (current choice): Add a new model interview including many"},{"lineNumber":1211,"author":{"gitID":"deeheenguyen"},"content":"sub fields such as Date, Location, List of Questions. +"},{"lineNumber":1212,"author":{"gitID":"deeheenguyen"},"content":"**Pros:** It is easier to implement other commands such as find Interview, delete"},{"lineNumber":1213,"author":{"gitID":"deeheenguyen"},"content":"Interview, add questions. +"},{"lineNumber":1214,"author":{"gitID":"deeheenguyen"},"content":"**Cons:** It takes time to create new model."},{"lineNumber":1215,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":1216,"author":{"gitID":"deeheenguyen"},"content":"**Alternative 2:** Add a new field interview to each candidates and maintain"},{"lineNumber":1217,"author":{"gitID":"deeheenguyen"},"content":"according to each candidates. +"},{"lineNumber":1218,"author":{"gitID":"deeheenguyen"},"content":"**Pros:** It is easier to implement. +"},{"lineNumber":1219,"author":{"gitID":"deeheenguyen"},"content":"**Cons:** It is difficult to search specific interview effectively."},{"lineNumber":1220,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":1221,"author":{"gitID":"deeheenguyen"},"content":"** Current implementation details"},{"lineNumber":1222,"author":{"gitID":"deeheenguyen"},"content":"* `AddInterviewCommandParser` class will extract interview title, interviewee name, date,"},{"lineNumber":1223,"author":{"gitID":"deeheenguyen"},"content":"and interview location from user input, form a new interview,"},{"lineNumber":1224,"author":{"gitID":"deeheenguyen"},"content":"then pass it to `AddInterviewCommand` class."},{"lineNumber":1225,"author":{"gitID":"deeheenguyen"},"content":"* `AddInterviewCommand` will take in the interview and call add new interview to"},{"lineNumber":1226,"author":{"gitID":"deeheenguyen"},"content":"storage in model management."},{"lineNumber":1227,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":1228,"author":{"gitID":"deeheenguyen"},"content":".Adding an interview sequence diagram"},{"lineNumber":1229,"author":{"gitID":"deeheenguyen"},"content":"image::addInterviewSequence.png[width\u003d\"700\"]"},{"lineNumber":1230,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":1231,"author":{"gitID":"deeheenguyen"},"content":"[source,java]"},{"lineNumber":1232,"author":{"gitID":"deeheenguyen"},"content":"----"},{"lineNumber":1233,"author":{"gitID":"deeheenguyen"},"content":"public synchronized void addInterview(Interview interview) throws DuplicateInterviewException {"},{"lineNumber":1234,"author":{"gitID":"deeheenguyen"},"content":"        addressBook.addInterview(interview);"},{"lineNumber":1235,"author":{"gitID":"deeheenguyen"},"content":"        updateFilteredInterviewList(PREDICATE_SHOW_ALL_INTERVIEWS);"},{"lineNumber":1236,"author":{"gitID":"deeheenguyen"},"content":"        indicateAddressBookChanged();"},{"lineNumber":1237,"author":{"gitID":"deeheenguyen"},"content":"}"},{"lineNumber":1238,"author":{"gitID":"deeheenguyen"},"content":"----"},{"lineNumber":1239,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":1240,"author":{"gitID":"deeheenguyen"},"content":"\u003d\u003d\u003d\u003d List interview"},{"lineNumber":1241,"author":{"gitID":"deeheenguyen"},"content":"The recruiter may want to take a look at all of the interviews."},{"lineNumber":1242,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":1243,"author":{"gitID":"deeheenguyen"},"content":"Aspects: Implementation of listing all the interviews."},{"lineNumber":1244,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":1245,"author":{"gitID":"deeheenguyen"},"content":"**Alternative 1:** (current choice) create a new command to listing all the interview. +"},{"lineNumber":1246,"author":{"gitID":"deeheenguyen"},"content":"**Pros:** It is easier to use and modify. +"},{"lineNumber":1247,"author":{"gitID":"deeheenguyen"},"content":"**Cons:** New command is needed."},{"lineNumber":1248,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":1249,"author":{"gitID":"deeheenguyen"},"content":"**Alternative 2:** each candidate has been linked to an interview, listing all the"},{"lineNumber":1250,"author":{"gitID":"deeheenguyen"},"content":"interview when listing all candidates. +"},{"lineNumber":1251,"author":{"gitID":"deeheenguyen"},"content":"**Pros:** No need to create new command, just need to edit current list comamnd +"},{"lineNumber":1252,"author":{"gitID":"deeheenguyen"},"content":"**Cons:** It increases coupling and it is harder to implement."},{"lineNumber":1253,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":1254,"author":{"gitID":"deeheenguyen"},"content":"** Current implementation details"},{"lineNumber":1255,"author":{"gitID":"deeheenguyen"},"content":"* `AddressBookParser` class will parse the command `listInterview` from CLI"},{"lineNumber":1256,"author":{"gitID":"deeheenguyen"},"content":"and call ListInterviewCommand."},{"lineNumber":1257,"author":{"gitID":"deeheenguyen"},"content":"* `ListInterviewCommand` will call updateFilteredList in model and list all the interviews in storage."},{"lineNumber":1258,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":1259,"author":{"gitID":"deeheenguyen"},"content":".Listing an interview sequence diagram"},{"lineNumber":1260,"author":{"gitID":"deeheenguyen"},"content":"image::ListInterviewSequence.png[width\u003d\"700\"]"},{"lineNumber":1261,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":1262,"author":{"gitID":"deeheenguyen"},"content":"[source,java]"},{"lineNumber":1263,"author":{"gitID":"deeheenguyen"},"content":"----"},{"lineNumber":1264,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":1265,"author":{"gitID":"deeheenguyen"},"content":"public void updateFilteredInterviewList(Predicate\u003cInterview\u003e predicate) {"},{"lineNumber":1266,"author":{"gitID":"deeheenguyen"},"content":"        requireNonNull(predicate);"},{"lineNumber":1267,"author":{"gitID":"deeheenguyen"},"content":"        filteredInterviews.setPredicate(predicate);"},{"lineNumber":1268,"author":{"gitID":"deeheenguyen"},"content":"}"},{"lineNumber":1269,"author":{"gitID":"deeheenguyen"},"content":"----"},{"lineNumber":1270,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":1271,"author":{"gitID":"deeheenguyen"},"content":"\u003d\u003d\u003d\u003d Deleting Interview"},{"lineNumber":1272,"author":{"gitID":"deeheenguyen"},"content":"After conducted interview, the HR may want to delete the interview from the Infinity Book."},{"lineNumber":1273,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":1274,"author":{"gitID":"deeheenguyen"},"content":"Aspects: Implementation of deleting an interview:"},{"lineNumber":1275,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":1276,"author":{"gitID":"deeheenguyen"},"content":"**Alternative 1:** (current choice) create deleting command for deleting interview by index +"},{"lineNumber":1277,"author":{"gitID":"deeheenguyen"},"content":"**Pros:** It can be easily to use follow the index of listing interview command +"},{"lineNumber":1278,"author":{"gitID":"deeheenguyen"},"content":"**Cons:** It requires users to use two commands +"},{"lineNumber":1279,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":1280,"author":{"gitID":"deeheenguyen"},"content":"**Alternative 2:** create deleting command for deleting interview by name. +"},{"lineNumber":1281,"author":{"gitID":"deeheenguyen"},"content":"**Pros:** It requires addtional tools to match interview +"},{"lineNumber":1282,"author":{"gitID":"deeheenguyen"},"content":"**Cons:** It is easier for user to use."},{"lineNumber":1283,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":1284,"author":{"gitID":"deeheenguyen"},"content":".Delete an interview sequence diagram"},{"lineNumber":1285,"author":{"gitID":"deeheenguyen"},"content":"image::DeleteInterviewSequence.png[width\u003d\"700\"]"},{"lineNumber":1286,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":1287,"author":{"gitID":"deeheenguyen"},"content":"** Current implementation details"},{"lineNumber":1288,"author":{"gitID":"deeheenguyen"},"content":"* `DeletingInterviewParser` class will extract the index of the interview needed"},{"lineNumber":1289,"author":{"gitID":"deeheenguyen"},"content":"to be deleted and pass in to `DeleteInterviewCommand`."},{"lineNumber":1290,"author":{"gitID":"deeheenguyen"},"content":"* `DeleteInterviewCommand` will take in the index and update the interview list"},{"lineNumber":1291,"author":{"gitID":"deeheenguyen"},"content":"accordingly."},{"lineNumber":1292,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":1293,"author":{"gitID":"deeheenguyen"},"content":"[source,java]"},{"lineNumber":1294,"author":{"gitID":"deeheenguyen"},"content":"----"},{"lineNumber":1295,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":1296,"author":{"gitID":"deeheenguyen"},"content":"public synchronized void deleteInterview(Interview target) throws InterviewNotFoundException {"},{"lineNumber":1297,"author":{"gitID":"deeheenguyen"},"content":"        addressBook.removeInterview(target);"},{"lineNumber":1298,"author":{"gitID":"deeheenguyen"},"content":"        indicateAddressBookChanged();"},{"lineNumber":1299,"author":{"gitID":"deeheenguyen"},"content":"}"},{"lineNumber":1300,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":1301,"author":{"gitID":"deeheenguyen"},"content":"----"},{"lineNumber":1302,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":1303,"author":{"gitID":"deeheenguyen"},"content":"//end::interviewmanagement[]"},{"lineNumber":1304,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":1305,"author":{"gitID":"tiny767"},"content":"//tag::facebook[]"},{"lineNumber":1306,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1307,"author":{"gitID":"tiny767"},"content":"\u003d\u003d\u003d Facebook Integration"},{"lineNumber":1308,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1309,"author":{"gitID":"tiny767"},"content":"The Facebook features (facebooklogin and facebookpost) are facilitated by Facebook Graph API and RestFB API. The Graph API is low-level HTTP-based API used to get data into and out of the Facebook platform while RestAPI is a high level third-party Graph API client."},{"lineNumber":1310,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1311,"author":{"gitID":"tiny767"},"content":"\u003d\u003d\u003d\u003d Preparation"},{"lineNumber":1312,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1313,"author":{"gitID":"tiny767"},"content":"Firstly, we need to build a Graddle dependency in the `graddle.properties` file for RestFB API"},{"lineNumber":1314,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1315,"author":{"gitID":"tiny767"},"content":"----"},{"lineNumber":1316,"author":{"gitID":"tiny767"},"content":"compile group: \u0027com.restfb\u0027, name: \u0027restfb\u0027, version: \u00272.4.0\u0027"},{"lineNumber":1317,"author":{"gitID":"tiny767"},"content":"----"},{"lineNumber":1318,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1319,"author":{"gitID":"tiny767"},"content":"To use Facebook Graph API, we followed the instruction link:https://developers.facebook.com/docs/apps/register/#create-app[`here`] to create a Facebook Application on the Facebook for developer site"},{"lineNumber":1320,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1321,"author":{"gitID":"tiny767"},"content":"Finishing the steps, we reached this page"},{"lineNumber":1322,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1323,"author":{"gitID":"tiny767"},"content":".Facebook Application page"},{"lineNumber":1324,"author":{"gitID":"tiny767"},"content":"image::FacebookAppCreated.png[width\u003d\"800\"]"},{"lineNumber":1325,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1326,"author":{"gitID":"tiny767"},"content":"\u003d\u003d\u003d\u003d Implementation"},{"lineNumber":1327,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1328,"author":{"gitID":"tiny767"},"content":"\u003d\u003d\u003d\u003d\u003d Facebooklogin"},{"lineNumber":1329,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1330,"author":{"gitID":"tiny767"},"content":"We allow users to log in by loading the authentication URL associated with our Facebook Application to the FacebookPanel (to be explained later) specified by Graph API"},{"lineNumber":1331,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1332,"author":{"gitID":"tiny767"},"content":"[source,java]"},{"lineNumber":1333,"author":{"gitID":"tiny767"},"content":"----"},{"lineNumber":1334,"author":{"gitID":"tiny767"},"content":"private static final String FACEBOOK_AUTH_URL \u003d"},{"lineNumber":1335,"author":{"gitID":"tiny767"},"content":"    \"https://graph.facebook.com/oauth/authorize?type\u003duser_agent\u0026client_id\u003d\" + FACEBOOK_APP_ID"},{"lineNumber":1336,"author":{"gitID":"tiny767"},"content":"        + \"\u0026redirect_uri\u003d\" + FACEBOOK_DOMAIN + \"\u0026scope\" + FACEBOOK_PERMISSIONS;"},{"lineNumber":1337,"author":{"gitID":"tiny767"},"content":"----"},{"lineNumber":1338,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1339,"author":{"gitID":"tiny767"},"content":"[source,java]"},{"lineNumber":1340,"author":{"gitID":"tiny767"},"content":"----"},{"lineNumber":1341,"author":{"gitID":"tiny767"},"content":"Platform.runLater(() -\u003e webEngine.load(FACEBOOK_AUTH_URL));"},{"lineNumber":1342,"author":{"gitID":"tiny767"},"content":"----"},{"lineNumber":1343,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1344,"author":{"gitID":"tiny767"},"content":"If login credentials are accepted, facebook will return an access_token in its redirected url. An example of a redirected url"},{"lineNumber":1345,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1346,"author":{"gitID":"tiny767"},"content":"----"},{"lineNumber":1347,"author":{"gitID":"tiny767"},"content":"https://www.facebook.com/?#access_token\u003dEAAC15Ydo408BANN5h1MoSHWhLATnte3EchlxqsXA7x2WASMlZBJzlZC3rZCmlu4Wib3hi1bXR2r2sx2ZCgIJvJCrXaTAnQVN4f0ksFLSvCuezLhG43myLJtxT3Qtn0PpcIXXZBjgYUI4LwGvv837KGC2V4ifctNaBnHqRX6e7qAZDZD\u0026expires_in\u003d5184000"},{"lineNumber":1348,"author":{"gitID":"tiny767"},"content":"----"},{"lineNumber":1349,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1350,"author":{"gitID":"tiny767"},"content":"Using this access_token, we \u0027capture\u0027 this login session by making use of RestFB API. We set up the session in `FacebookLoginCommand` as followed"},{"lineNumber":1351,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1352,"author":{"gitID":"tiny767"},"content":"----"},{"lineNumber":1353,"author":{"gitID":"tiny767"},"content":"fbClient \u003d new DefaultFacebookClient(accessToken, Version.LATEST);"},{"lineNumber":1354,"author":{"gitID":"tiny767"},"content":"user \u003d fbClient.fetchObject(\"me\", User.class);"},{"lineNumber":1355,"author":{"gitID":"tiny767"},"content":"----"},{"lineNumber":1356,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1357,"author":{"gitID":"tiny767"},"content":"\u0027fbClient\u0027 is the Facebook Graph API client with the supplied token."},{"lineNumber":1358,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1359,"author":{"gitID":"tiny767"},"content":"\u0027user\u0027 is the authenticated user object."},{"lineNumber":1360,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1361,"author":{"gitID":"tiny767"},"content":"\u003d\u003d\u003d\u003d\u003d Facebookpost"},{"lineNumber":1362,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1363,"author":{"gitID":"tiny767"},"content":"We will check if user is authenticated via the boolean variable isAuthenticated before allowing posting on facebook. If user is not authenticated, he will be redirected to log in"},{"lineNumber":1364,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1365,"author":{"gitID":"tiny767"},"content":"[source,java]"},{"lineNumber":1366,"author":{"gitID":"tiny767"},"content":"----"},{"lineNumber":1367,"author":{"gitID":"tiny767"},"content":"if (!FacebookLoginCommand.getAuthenticateState()) {"},{"lineNumber":1368,"author":{"gitID":"tiny767"},"content":"    FacebookLoginCommand fbLoginCommand \u003d new FacebookLoginCommand();"},{"lineNumber":1369,"author":{"gitID":"tiny767"},"content":"    fbLoginCommand.execute();"},{"lineNumber":1370,"author":{"gitID":"tiny767"},"content":"} else {"},{"lineNumber":1371,"author":{"gitID":"tiny767"},"content":"    completePost();"},{"lineNumber":1372,"author":{"gitID":"tiny767"},"content":"}"},{"lineNumber":1373,"author":{"gitID":"tiny767"},"content":"----"},{"lineNumber":1374,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1375,"author":{"gitID":"tiny767"},"content":"We simply post the message to Facebook using the authenticated fbClient in `FacebookLoginCommand`"},{"lineNumber":1376,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1377,"author":{"gitID":"tiny767"},"content":"[source,java]"},{"lineNumber":1378,"author":{"gitID":"tiny767"},"content":"----"},{"lineNumber":1379,"author":{"gitID":"tiny767"},"content":"DefaultFacebookClient fbClient \u003d FacebookLoginCommand.getFbClient();"},{"lineNumber":1380,"author":{"gitID":"tiny767"},"content":"fbClient.publish(\"me/feed\", FacebookType.class, Parameter.with(\"message\", toPost));"},{"lineNumber":1381,"author":{"gitID":"tiny767"},"content":"----"},{"lineNumber":1382,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1383,"author":{"gitID":"deeheenguyen"},"content":"\u003d\u003d\u003d\u003d Implementation details"},{"lineNumber":1384,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1385,"author":{"gitID":"tiny767"},"content":"\u0027FacebookPanel\u0027 extends `UiPart\u003cRegion\u003e` and shares the same region with `BrowserPanel` or `ReportPanel`. When `facebooklogin` is executed,"},{"lineNumber":1386,"author":{"gitID":"tiny767"},"content":" `MainWindow` class will swap out the `BrowserPanel` or `ReportPanel` and replace by `FacebookPanel`."},{"lineNumber":1387,"author":{"gitID":"tiny767"},"content":"We achieve this by posting `ToggleFacebookPanelEvent` (showing in the below sequence diagram)."},{"lineNumber":1388,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1389,"author":{"gitID":"tiny767"},"content":"\u0027FacebookPanel\u0027 is used mainly as a browser to authorize a user to Facebook. It is also used to display the Facebook page after the user is authorized."},{"lineNumber":1390,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1391,"author":{"gitID":"tiny767"},"content":"For capturing the access_token, we register `FacebookPanel` as an event handler. If the url (of `FacebookPanel`) changes to a new one that contains the access_token,"},{"lineNumber":1392,"author":{"gitID":"tiny767"},"content":" we raise a `BrowserUrlChangedEvent`. Also, our `FacebookPanel` is subscribed to handle `BrowserUrlChangedEvent` by passing the url (with access_token) back to `FacebookLoginCommand` to complete the authentication."},{"lineNumber":1393,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1394,"author":{"gitID":"tiny767"},"content":"The below sequence diagram show interactions within Logic component when user executes `facebookpost hello`."},{"lineNumber":1395,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1396,"author":{"gitID":"tiny767"},"content":".Sequence diagram detailing Logic component when executing facebookpost"},{"lineNumber":1397,"author":{"gitID":"tiny767"},"content":"image::FbSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":1398,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1399,"author":{"gitID":"tiny767"},"content":"\u003d\u003d\u003d\u003d Design considerations"},{"lineNumber":1400,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1401,"author":{"gitID":"tiny767"},"content":"**Aspect:** Choice of client API for Facebook Graph API +"},{"lineNumber":1402,"author":{"gitID":"tiny767"},"content":"**Alternative 1 (current choice):** Use `RestFB` +"},{"lineNumber":1403,"author":{"gitID":"tiny767"},"content":"**Pros:** RestFB is simple and easy to use with well-documented API"},{"lineNumber":1404,"author":{"gitID":"tiny767"},"content":"**Cons:** Features are limited +"},{"lineNumber":1405,"author":{"gitID":"tiny767"},"content":"**Alternative 2:** Facebook4j +"},{"lineNumber":1406,"author":{"gitID":"tiny767"},"content":"**Pros:** Facebook4j provides more extensive features +"},{"lineNumber":1407,"author":{"gitID":"tiny767"},"content":"**Cons:** It is harder to use and we do not really need advanced features for now +"},{"lineNumber":1408,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1409,"author":{"gitID":"tiny767"},"content":"---"},{"lineNumber":1410,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1411,"author":{"gitID":"tiny767"},"content":"**Aspect:** Authentication +"},{"lineNumber":1412,"author":{"gitID":"tiny767"},"content":"**Alternative 1 (current choice):** Authenticate using the built-in web browser (in FacebookPanel) +"},{"lineNumber":1413,"author":{"gitID":"tiny767"},"content":"**Pros:** Convenient for user as authentication is done inside the app itself +"},{"lineNumber":1414,"author":{"gitID":"tiny767"},"content":"**Cons:** The built-in Java web-engine might not support certain features of a webpage +"},{"lineNumber":1415,"author":{"gitID":"tiny767"},"content":"**Alternative 2:** Authenticate by opening a full-pledged web browser such as Chrome/ Safari +"},{"lineNumber":1416,"author":{"gitID":"tiny767"},"content":"**Pros:** The Facebook authorization page will be better supported by such a browser +"},{"lineNumber":1417,"author":{"gitID":"tiny767"},"content":"**Cons:** User needs to switch between different applications +"},{"lineNumber":1418,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1419,"author":{"gitID":"tiny767"},"content":"//end::facebook[]"},{"lineNumber":1420,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1421,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":1422,"author":{"gitID":"-"},"content":"This project maintains documentation in the docs folder, also accessible through the readme. This documentation is written and maintained using *asciidoc*."},{"lineNumber":1423,"author":{"gitID":"-"},"content":""},{"lineNumber":1424,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1425,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":1426,"author":{"gitID":"-"},"content":""},{"lineNumber":1427,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":1428,"author":{"gitID":"-"},"content":""},{"lineNumber":1429,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":1430,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":1431,"author":{"gitID":"-"},"content":""},{"lineNumber":1432,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":1433,"author":{"gitID":"-"},"content":""},{"lineNumber":1434,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":1435,"author":{"gitID":"-"},"content":""},{"lineNumber":1436,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":1437,"author":{"gitID":"-"},"content":""},{"lineNumber":1438,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":1439,"author":{"gitID":"-"},"content":""},{"lineNumber":1440,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":1441,"author":{"gitID":"-"},"content":""},{"lineNumber":1442,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":1443,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":1444,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":1445,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":1446,"author":{"gitID":"-"},"content":""},{"lineNumber":1447,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":1448,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":1449,"author":{"gitID":"-"},"content":""},{"lineNumber":1450,"author":{"gitID":"-"},"content":"link:#top[Back to top]"},{"lineNumber":1451,"author":{"gitID":"-"},"content":""},{"lineNumber":1452,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":1453,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":1454,"author":{"gitID":"-"},"content":"The Infinity Book project maintains GUI and non-GUI tests. Instructions on writing and running tests, and details about the nature of these tests are provided in this section."},{"lineNumber":1455,"author":{"gitID":"-"},"content":""},{"lineNumber":1456,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":1457,"author":{"gitID":"-"},"content":""},{"lineNumber":1458,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":1459,"author":{"gitID":"-"},"content":""},{"lineNumber":1460,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1461,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":1462,"author":{"gitID":"-"},"content":""},{"lineNumber":1463,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":1464,"author":{"gitID":"-"},"content":""},{"lineNumber":1465,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":1466,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":1467,"author":{"gitID":"-"},"content":""},{"lineNumber":1468,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":1469,"author":{"gitID":"-"},"content":""},{"lineNumber":1470,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":1471,"author":{"gitID":"-"},"content":""},{"lineNumber":1472,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1473,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":1474,"author":{"gitID":"-"},"content":""},{"lineNumber":1475,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":1476,"author":{"gitID":"-"},"content":""},{"lineNumber":1477,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":1478,"author":{"gitID":"-"},"content":""},{"lineNumber":1479,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":1480,"author":{"gitID":"-"},"content":""},{"lineNumber":1481,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":1482,"author":{"gitID":"-"},"content":""},{"lineNumber":1483,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":1484,"author":{"gitID":"-"},"content":""},{"lineNumber":1485,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":1486,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":1487,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":1488,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":1489,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":1490,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":1491,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":1492,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":1493,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":1494,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":1495,"author":{"gitID":"-"},"content":""},{"lineNumber":1496,"author":{"gitID":"-"},"content":""},{"lineNumber":1497,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":1498,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":1499,"author":{"gitID":"-"},"content":""},{"lineNumber":1500,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":1501,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":1502,"author":{"gitID":"-"},"content":""},{"lineNumber":1503,"author":{"gitID":"-"},"content":"link:#top[Back to top]"},{"lineNumber":1504,"author":{"gitID":"-"},"content":""},{"lineNumber":1505,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":1506,"author":{"gitID":"-"},"content":""},{"lineNumber":1507,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":1508,"author":{"gitID":"-"},"content":""},{"lineNumber":1509,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":1510,"author":{"gitID":"-"},"content":""},{"lineNumber":1511,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":1512,"author":{"gitID":"-"},"content":""},{"lineNumber":1513,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":1514,"author":{"gitID":"-"},"content":""},{"lineNumber":1515,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":1516,"author":{"gitID":"-"},"content":""},{"lineNumber":1517,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":1518,"author":{"gitID":"-"},"content":""},{"lineNumber":1519,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":1520,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":1521,"author":{"gitID":"-"},"content":""},{"lineNumber":1522,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":1523,"author":{"gitID":"-"},"content":""},{"lineNumber":1524,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":1525,"author":{"gitID":"-"},"content":""},{"lineNumber":1526,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":1527,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":1528,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":1529,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":1530,"author":{"gitID":"-"},"content":""},{"lineNumber":1531,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":1532,"author":{"gitID":"-"},"content":""},{"lineNumber":1533,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, Infinity Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":1534,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":1535,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":1536,"author":{"gitID":"-"},"content":""},{"lineNumber":1537,"author":{"gitID":"-"},"content":"link:#top[Back to top]"},{"lineNumber":1538,"author":{"gitID":"-"},"content":""},{"lineNumber":1539,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":1540,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1541,"author":{"gitID":"-"},"content":"\u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":1542,"author":{"gitID":"-"},"content":""},{"lineNumber":1543,"author":{"gitID":"-"},"content":"Suggested path for new programmers:"},{"lineNumber":1544,"author":{"gitID":"-"},"content":""},{"lineNumber":1545,"author":{"gitID":"-"},"content":"1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":1546,"author":{"gitID":"-"},"content":""},{"lineNumber":1547,"author":{"gitID":"-"},"content":"2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":1548,"author":{"gitID":"-"},"content":""},{"lineNumber":1549,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-EachComponent]]"},{"lineNumber":1550,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Improving each component"},{"lineNumber":1551,"author":{"gitID":"-"},"content":""},{"lineNumber":1552,"author":{"gitID":"-"},"content":"Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."},{"lineNumber":1553,"author":{"gitID":"-"},"content":""},{"lineNumber":1554,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1555,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Logic` component"},{"lineNumber":1556,"author":{"gitID":"-"},"content":""},{"lineNumber":1557,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."},{"lineNumber":1558,"author":{"gitID":"-"},"content":""},{"lineNumber":1559,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1560,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."},{"lineNumber":1561,"author":{"gitID":"-"},"content":""},{"lineNumber":1562,"author":{"gitID":"-"},"content":". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."},{"lineNumber":1563,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1564,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1565,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":1566,"author":{"gitID":"-"},"content":"** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."},{"lineNumber":1567,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."},{"lineNumber":1568,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1569,"author":{"gitID":"-"},"content":"** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."},{"lineNumber":1570,"author":{"gitID":"-"},"content":"** Add new tests for each of the aliases that you have added."},{"lineNumber":1571,"author":{"gitID":"-"},"content":"** Update the user guide to document the new aliases."},{"lineNumber":1572,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."},{"lineNumber":1573,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1574,"author":{"gitID":"-"},"content":""},{"lineNumber":1575,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1576,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Model` component"},{"lineNumber":1577,"author":{"gitID":"-"},"content":""},{"lineNumber":1578,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the Infinity Book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."},{"lineNumber":1579,"author":{"gitID":"-"},"content":""},{"lineNumber":1580,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1581,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."},{"lineNumber":1582,"author":{"gitID":"-"},"content":""},{"lineNumber":1583,"author":{"gitID":"-"},"content":". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the Infinity Book."},{"lineNumber":1584,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1585,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1586,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":1587,"author":{"gitID":"-"},"content":"** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."},{"lineNumber":1588,"author":{"gitID":"-"},"content":"** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"},{"lineNumber":1589,"author":{"gitID":"-"},"content":"**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."},{"lineNumber":1590,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1591,"author":{"gitID":"-"},"content":"** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."},{"lineNumber":1592,"author":{"gitID":"-"},"content":"** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."},{"lineNumber":1593,"author":{"gitID":"-"},"content":"** Add new tests for each of the new public methods that you have added."},{"lineNumber":1594,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."},{"lineNumber":1595,"author":{"gitID":"-"},"content":"*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."},{"lineNumber":1596,"author":{"gitID":"-"},"content":"*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."},{"lineNumber":1597,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1598,"author":{"gitID":"-"},"content":""},{"lineNumber":1599,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1600,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Ui` component"},{"lineNumber":1601,"author":{"gitID":"-"},"content":""},{"lineNumber":1602,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your Infinity Book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last candidate in the list. Your job is to implement improvements to the UI to solve all these problems."},{"lineNumber":1603,"author":{"gitID":"-"},"content":""},{"lineNumber":1604,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1605,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."},{"lineNumber":1606,"author":{"gitID":"-"},"content":""},{"lineNumber":1607,"author":{"gitID":"-"},"content":". Use different colors for different tags inside candidate cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."},{"lineNumber":1608,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1609,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":1610,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1611,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-before.png[width\u003d\"300\"]"},{"lineNumber":1612,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1613,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":1614,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1615,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-after.png[width\u003d\"300\"]"},{"lineNumber":1616,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1617,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1618,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":1619,"author":{"gitID":"-"},"content":"** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."},{"lineNumber":1620,"author":{"gitID":"-"},"content":"** Use the .css attribute `-fx-background-color` to add a color."},{"lineNumber":1621,"author":{"gitID":"-"},"content":"** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."},{"lineNumber":1622,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1623,"author":{"gitID":"-"},"content":"** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."},{"lineNumber":1624,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."},{"lineNumber":1625,"author":{"gitID":"-"},"content":"*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."},{"lineNumber":1626,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1627,"author":{"gitID":"-"},"content":""},{"lineNumber":1628,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."},{"lineNumber":1629,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1630,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":1631,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1632,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-before.png[width\u003d\"200\"]"},{"lineNumber":1633,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1634,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":1635,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1636,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-after.png[width\u003d\"200\"]"},{"lineNumber":1637,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1638,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1639,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":1640,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."},{"lineNumber":1641,"author":{"gitID":"-"},"content":"** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."},{"lineNumber":1642,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1643,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."},{"lineNumber":1644,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."},{"lineNumber":1645,"author":{"gitID":"-"},"content":"** You can write two different kinds of tests to ensure that the functionality works:"},{"lineNumber":1646,"author":{"gitID":"-"},"content":"*** The unit tests for `ResultDisplay` can be modified to include verification of the color."},{"lineNumber":1647,"author":{"gitID":"-"},"content":"*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."},{"lineNumber":1648,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."},{"lineNumber":1649,"author":{"gitID":"-"},"content":"*** Do read the commits one at a time if you feel overwhelmed."},{"lineNumber":1650,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1651,"author":{"gitID":"-"},"content":""},{"lineNumber":1652,"author":{"gitID":"-"},"content":". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the Infinity Book."},{"lineNumber":1653,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1654,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":1655,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1656,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-before.png[width\u003d\"500\"]"},{"lineNumber":1657,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1658,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":1659,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1660,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-after.png[width\u003d\"500\"]"},{"lineNumber":1661,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1662,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1663,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":1664,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"},{"lineNumber":1665,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the Infinity Book is updated."},{"lineNumber":1666,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1667,"author":{"gitID":"-"},"content":"** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."},{"lineNumber":1668,"author":{"gitID":"-"},"content":"** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."},{"lineNumber":1669,"author":{"gitID":"-"},"content":"** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."},{"lineNumber":1670,"author":{"gitID":"-"},"content":"** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."},{"lineNumber":1671,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."},{"lineNumber":1672,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1673,"author":{"gitID":"-"},"content":""},{"lineNumber":1674,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1675,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Storage` component"},{"lineNumber":1676,"author":{"gitID":"-"},"content":""},{"lineNumber":1677,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the Infinity Book to the cloud. However, the current implementation of the application constantly saves the Infinity Book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the Infinity Book storage."},{"lineNumber":1678,"author":{"gitID":"-"},"content":""},{"lineNumber":1679,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1680,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."},{"lineNumber":1681,"author":{"gitID":"-"},"content":""},{"lineNumber":1682,"author":{"gitID":"-"},"content":". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the Infinity Book can be saved in a fixed temporary location."},{"lineNumber":1683,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1684,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1685,"author":{"gitID":"-"},"content":"* Hint"},{"lineNumber":1686,"author":{"gitID":"-"},"content":"** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."},{"lineNumber":1687,"author":{"gitID":"-"},"content":"** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."},{"lineNumber":1688,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1689,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."},{"lineNumber":1690,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1691,"author":{"gitID":"-"},"content":""},{"lineNumber":1692,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":1693,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":1694,"author":{"gitID":"-"},"content":""},{"lineNumber":1695,"author":{"gitID":"-"},"content":"By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":1696,"author":{"gitID":"-"},"content":""},{"lineNumber":1697,"author":{"gitID":"-"},"content":"*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":1698,"author":{"gitID":"-"},"content":""},{"lineNumber":1699,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Description"},{"lineNumber":1700,"author":{"gitID":"-"},"content":"Edits the remark for a candidate specified in the `INDEX`. +"},{"lineNumber":1701,"author":{"gitID":"-"},"content":"Format: `remark INDEX r/[REMARK]`"},{"lineNumber":1702,"author":{"gitID":"-"},"content":""},{"lineNumber":1703,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":1704,"author":{"gitID":"-"},"content":""},{"lineNumber":1705,"author":{"gitID":"-"},"content":"* `remark 1 r/Likes to drink coffee.` +"},{"lineNumber":1706,"author":{"gitID":"-"},"content":"Edits the remark for the first candidate to `Likes to drink coffee.`"},{"lineNumber":1707,"author":{"gitID":"-"},"content":"* `remark 1 r/` +"},{"lineNumber":1708,"author":{"gitID":"-"},"content":"Removes the remark for the first person."},{"lineNumber":1709,"author":{"gitID":"-"},"content":""},{"lineNumber":1710,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":1711,"author":{"gitID":"-"},"content":""},{"lineNumber":1712,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"},{"lineNumber":1713,"author":{"gitID":"-"},"content":"Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":1714,"author":{"gitID":"-"},"content":""},{"lineNumber":1715,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1716,"author":{"gitID":"-"},"content":""},{"lineNumber":1717,"author":{"gitID":"-"},"content":". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."},{"lineNumber":1718,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."},{"lineNumber":1719,"author":{"gitID":"-"},"content":""},{"lineNumber":1720,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1721,"author":{"gitID":"-"},"content":""},{"lineNumber":1722,"author":{"gitID":"-"},"content":". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":1723,"author":{"gitID":"-"},"content":". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."},{"lineNumber":1724,"author":{"gitID":"-"},"content":""},{"lineNumber":1725,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"},{"lineNumber":1726,"author":{"gitID":"-"},"content":"Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"},{"lineNumber":1727,"author":{"gitID":"-"},"content":""},{"lineNumber":1728,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1729,"author":{"gitID":"-"},"content":""},{"lineNumber":1730,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."},{"lineNumber":1731,"author":{"gitID":"-"},"content":". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":1732,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."},{"lineNumber":1733,"author":{"gitID":"-"},"content":""},{"lineNumber":1734,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1735,"author":{"gitID":"-"},"content":""},{"lineNumber":1736,"author":{"gitID":"-"},"content":". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."},{"lineNumber":1737,"author":{"gitID":"-"},"content":". Add `RemarkCommandParserTest` that tests different boundary values"},{"lineNumber":1738,"author":{"gitID":"-"},"content":"for `RemarkCommandParser`."},{"lineNumber":1739,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."},{"lineNumber":1740,"author":{"gitID":"-"},"content":""},{"lineNumber":1741,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"},{"lineNumber":1742,"author":{"gitID":"-"},"content":"Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each candidate later."},{"lineNumber":1743,"author":{"gitID":"-"},"content":""},{"lineNumber":1744,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1745,"author":{"gitID":"-"},"content":""},{"lineNumber":1746,"author":{"gitID":"-"},"content":". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."},{"lineNumber":1747,"author":{"gitID":"-"},"content":". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."},{"lineNumber":1748,"author":{"gitID":"-"},"content":""},{"lineNumber":1749,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1750,"author":{"gitID":"-"},"content":""},{"lineNumber":1751,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."},{"lineNumber":1752,"author":{"gitID":"-"},"content":""},{"lineNumber":1753,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"},{"lineNumber":1754,"author":{"gitID":"-"},"content":"We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."},{"lineNumber":1755,"author":{"gitID":"-"},"content":""},{"lineNumber":1756,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1757,"author":{"gitID":"-"},"content":""},{"lineNumber":1758,"author":{"gitID":"-"},"content":". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."},{"lineNumber":1759,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."},{"lineNumber":1760,"author":{"gitID":"-"},"content":""},{"lineNumber":1761,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1762,"author":{"gitID":"-"},"content":""},{"lineNumber":1763,"author":{"gitID":"-"},"content":". Add test for `Remark`, to test the `Remark#equals()` method."},{"lineNumber":1764,"author":{"gitID":"-"},"content":""},{"lineNumber":1765,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"},{"lineNumber":1766,"author":{"gitID":"-"},"content":"Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":1767,"author":{"gitID":"-"},"content":""},{"lineNumber":1768,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1769,"author":{"gitID":"-"},"content":""},{"lineNumber":1770,"author":{"gitID":"-"},"content":". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":1771,"author":{"gitID":"-"},"content":". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the candidate will be created without a remark)."},{"lineNumber":1772,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"},{"lineNumber":1773,"author":{"gitID":"-"},"content":""},{"lineNumber":1774,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"},{"lineNumber":1775,"author":{"gitID":"-"},"content":"We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."},{"lineNumber":1776,"author":{"gitID":"-"},"content":""},{"lineNumber":1777,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1778,"author":{"gitID":"-"},"content":""},{"lineNumber":1779,"author":{"gitID":"-"},"content":". Add a new Xml field for `Remark`."},{"lineNumber":1780,"author":{"gitID":"-"},"content":""},{"lineNumber":1781,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1782,"author":{"gitID":"-"},"content":""},{"lineNumber":1783,"author":{"gitID":"-"},"content":". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":1784,"author":{"gitID":"-"},"content":""},{"lineNumber":1785,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"},{"lineNumber":1786,"author":{"gitID":"-"},"content":"Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":1787,"author":{"gitID":"-"},"content":""},{"lineNumber":1788,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1789,"author":{"gitID":"-"},"content":""},{"lineNumber":1790,"author":{"gitID":"-"},"content":". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the candidate that it is currently building."},{"lineNumber":1791,"author":{"gitID":"-"},"content":". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."},{"lineNumber":1792,"author":{"gitID":"-"},"content":""},{"lineNumber":1793,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"},{"lineNumber":1794,"author":{"gitID":"-"},"content":"Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":1795,"author":{"gitID":"-"},"content":""},{"lineNumber":1796,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1797,"author":{"gitID":"-"},"content":""},{"lineNumber":1798,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."},{"lineNumber":1799,"author":{"gitID":"-"},"content":""},{"lineNumber":1800,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1801,"author":{"gitID":"-"},"content":""},{"lineNumber":1802,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":1803,"author":{"gitID":"-"},"content":""},{"lineNumber":1804,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"},{"lineNumber":1805,"author":{"gitID":"-"},"content":"We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":1806,"author":{"gitID":"-"},"content":""},{"lineNumber":1807,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1808,"author":{"gitID":"-"},"content":""},{"lineNumber":1809,"author":{"gitID":"-"},"content":". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."},{"lineNumber":1810,"author":{"gitID":"-"},"content":""},{"lineNumber":1811,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1812,"author":{"gitID":"-"},"content":""},{"lineNumber":1813,"author":{"gitID":"-"},"content":". Update `RemarkCommandTest` to test that the `execute()` logic works."},{"lineNumber":1814,"author":{"gitID":"-"},"content":""},{"lineNumber":1815,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Full Solution"},{"lineNumber":1816,"author":{"gitID":"-"},"content":""},{"lineNumber":1817,"author":{"gitID":"-"},"content":"See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."},{"lineNumber":1818,"author":{"gitID":"-"},"content":""},{"lineNumber":1819,"author":{"gitID":"-"},"content":"link:#top[Back to top]"},{"lineNumber":1820,"author":{"gitID":"-"},"content":""},{"lineNumber":1821,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1822,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":1823,"author":{"gitID":"-"},"content":""},{"lineNumber":1824,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":1825,"author":{"gitID":"-"},"content":"Tech recruiters who have the need for finding and acquiring skilled Computing students for tech companies."},{"lineNumber":1826,"author":{"gitID":"-"},"content":""},{"lineNumber":1827,"author":{"gitID":"-"},"content":"* manage a significant number of student contacts"},{"lineNumber":1828,"author":{"gitID":"-"},"content":"* store student\u0027s basic information, contacts, expected graduation year, familiar frameworks, languages."},{"lineNumber":1829,"author":{"gitID":"-"},"content":"* find students whose skill set is suitable for available positions"},{"lineNumber":1830,"author":{"gitID":"-"},"content":"* Keep track of student’s past interactions with the company: internship, coding challenges, interview,..."},{"lineNumber":1831,"author":{"gitID":"-"},"content":""},{"lineNumber":1832,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Feature contributions"},{"lineNumber":1833,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Sashankh Chengavalli Kumar (@ChengSashankh)"},{"lineNumber":1834,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Major Enhancement: Job postings"},{"lineNumber":1835,"author":{"gitID":"-"},"content":"This allows the recruiter to add and manage job postings and receive automated suggestions about most suitable candidates based on various parameters."},{"lineNumber":1836,"author":{"gitID":"-"},"content":""},{"lineNumber":1837,"author":{"gitID":"-"},"content":"For example, when the need arises to hire a new fresh graduate for a backend software development role with proficiency in SQL and Javascript, with location restrictions as well, the recruiter creates a job posting. As candidates are added and removed, the application displays an updated list of matching candidates, until removed from Infinity Book."},{"lineNumber":1838,"author":{"gitID":"-"},"content":""},{"lineNumber":1839,"author":{"gitID":"-"},"content":"Implementations needed:"},{"lineNumber":1840,"author":{"gitID":"-"},"content":""},{"lineNumber":1841,"author":{"gitID":"-"},"content":". Creating command such as postjob, editjob, deletejob, findjob and listjob to manage jobposting."},{"lineNumber":1842,"author":{"gitID":"-"},"content":". Creating a matchjob command that displays the list of matched candidates in the Infinity Book."},{"lineNumber":1843,"author":{"gitID":"-"},"content":". Display pane for showing the list of jobs currently active."},{"lineNumber":1844,"author":{"gitID":"-"},"content":". Adding skills field to Person and Job to enhance matching."},{"lineNumber":1845,"author":{"gitID":"-"},"content":""},{"lineNumber":1846,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Minor Enhancement: Auto-correct and auto-complete"},{"lineNumber":1847,"author":{"gitID":"-"},"content":"This allows users to interact with Infinity Book with enhanced speed and accuracy. This implementation provides"},{"lineNumber":1848,"author":{"gitID":"-"},"content":"users the ability to auto-correct trivial spelling errors and complete partial command words."},{"lineNumber":1849,"author":{"gitID":"-"},"content":""},{"lineNumber":1850,"author":{"gitID":"-"},"content":"For example, when `li` is typed, the command enables completion to either `list` , `listinterview` or `listjob`. Similarly"},{"lineNumber":1851,"author":{"gitID":"-"},"content":"`lsit` is corrected to `list` by the command."},{"lineNumber":1852,"author":{"gitID":"-"},"content":""},{"lineNumber":1853,"author":{"gitID":"-"},"content":"Implementations needed:"},{"lineNumber":1854,"author":{"gitID":"-"},"content":""},{"lineNumber":1855,"author":{"gitID":"-"},"content":". Complete list of command words used by Infinity Book has to be updated and maintained when features are added."},{"lineNumber":1856,"author":{"gitID":"-"},"content":". Command box has to be modified to consume some keypresses such as `TAB` and `SPACE` for completion and correction."},{"lineNumber":1857,"author":{"gitID":"-"},"content":". To support multiple suggestions for auto-complete, a brief history of the last suggestion and input has to be maintained. This is"},{"lineNumber":1858,"author":{"gitID":"-"},"content":"further explained in \u003c\u003cAuto-complete Implementation, Section 5.11.1\u003e\u003e"},{"lineNumber":1859,"author":{"gitID":"-"},"content":""},{"lineNumber":1860,"author":{"gitID":"-"},"content":""},{"lineNumber":1861,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Huynh Thanh Duc Anh (@anh2111)"},{"lineNumber":1862,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Major Enhancement: Data visualization"},{"lineNumber":1863,"author":{"gitID":"-"},"content":"This allows users to make data-driven decisions with the visualization of recruiting data."},{"lineNumber":1864,"author":{"gitID":"-"},"content":""},{"lineNumber":1865,"author":{"gitID":"-"},"content":"image::graph.png[width\u003d\"500\"]"},{"lineNumber":1866,"author":{"gitID":"-"},"content":""},{"lineNumber":1867,"author":{"gitID":"-"},"content":"In the above example, `Screening`, `Interviewing`, `Accepted`, `SoftwareEngineerIntern` are tags that can be managed"},{"lineNumber":1868,"author":{"gitID":"-"},"content":"conveniently by the user. Given this chart, the recruiter can help a better high-level insights of candidates, which"},{"lineNumber":1869,"author":{"gitID":"-"},"content":"helps them significantly in making decisions."},{"lineNumber":1870,"author":{"gitID":"-"},"content":""},{"lineNumber":1871,"author":{"gitID":"-"},"content":"Implementations needed:"},{"lineNumber":1872,"author":{"gitID":"-"},"content":""},{"lineNumber":1873,"author":{"gitID":"-"},"content":". Making Command accepts OPTION. Example: `tag add`, `tag remove`."},{"lineNumber":1874,"author":{"gitID":"-"},"content":". Allowing add/remove one tag."},{"lineNumber":1875,"author":{"gitID":"-"},"content":". Drawing chart."},{"lineNumber":1876,"author":{"gitID":"-"},"content":""},{"lineNumber":1877,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Minor Enhancement: Enhance Find command"},{"lineNumber":1878,"author":{"gitID":"-"},"content":"* Allow users to Find Person by name, phone, email, and tags."},{"lineNumber":1879,"author":{"gitID":"-"},"content":"* Given the huge number of contacts that a recruiter may have, it is not possible for them to remember candidates\u0027 name."},{"lineNumber":1880,"author":{"gitID":"-"},"content":" Hence, users should be able to search by other fields so that it\u0027s easier for them to locate a person."},{"lineNumber":1881,"author":{"gitID":"-"},"content":""},{"lineNumber":1882,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Nguyen Thi Viet Ha (@deeheenguyen)"},{"lineNumber":1883,"author":{"gitID":"deeheenguyen"},"content":"\u003d\u003d\u003d\u003d\u003d Major Enhancement: Adding Interview"},{"lineNumber":1884,"author":{"gitID":"deeheenguyen"},"content":"This allows the recruiters maintain a list of interview. Each Interview is linked to a"},{"lineNumber":1885,"author":{"gitID":"deeheenguyen"},"content":"person. The recruiters can search about the interview based on the candidates."},{"lineNumber":1886,"author":{"gitID":"-"},"content":""},{"lineNumber":1887,"author":{"gitID":"-"},"content":"Implementation needed:"},{"lineNumber":1888,"author":{"gitID":"-"},"content":""},{"lineNumber":1889,"author":{"gitID":"deeheenguyen"},"content":". Make a interview model"},{"lineNumber":1890,"author":{"gitID":"deeheenguyen"},"content":". Add a interview command"},{"lineNumber":1891,"author":{"gitID":"deeheenguyen"},"content":". Make the interview searchable."},{"lineNumber":1892,"author":{"gitID":"-"},"content":""},{"lineNumber":1893,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Minor Enhancement: View Command"},{"lineNumber":1894,"author":{"gitID":"deeheenguyen"},"content":". Given a list of candidates, the recruiters can view a specific person by emailID."},{"lineNumber":1895,"author":{"gitID":"-"},"content":". Display all the information in the person card."},{"lineNumber":1896,"author":{"gitID":"deeheenguyen"},"content":". If there is a linked page to the person, it will be displayed on the brower panel."},{"lineNumber":1897,"author":{"gitID":"-"},"content":""},{"lineNumber":1898,"author":{"gitID":"tiny767"},"content":"\u003d\u003d\u003d\u003d Nguyen Dinh Dung (@tiny767)"},{"lineNumber":1899,"author":{"gitID":"tiny767"},"content":"\u003d\u003d\u003d\u003d\u003d Major Enhancement (coming in v2.0): Make several enhancements to the UI so that it is much more user-friendly."},{"lineNumber":1900,"author":{"gitID":"-"},"content":"This allows tech recruiters who need to manage big Infinity Books to save time by using the app more efficiently"},{"lineNumber":1901,"author":{"gitID":"tiny767"},"content":"and feel more comfortable."},{"lineNumber":1902,"author":{"gitID":"-"},"content":""},{"lineNumber":1903,"author":{"gitID":"-"},"content":"Implementations needed:"},{"lineNumber":1904,"author":{"gitID":"-"},"content":""},{"lineNumber":1905,"author":{"gitID":"tiny767"},"content":"* Making the color for tags the same for tags with same name and the choice of color stays the same."},{"lineNumber":1906,"author":{"gitID":"tiny767"},"content":"* For the user\u0027s command input, coloring keywords such as `name`, `p/`."},{"lineNumber":1907,"author":{"gitID":"tiny767"},"content":"* Provide usage syntax or syntax error in real time (e.g. display syntax for `add` when the users finish typing \u0027add\u0027"},{"lineNumber":1908,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1909,"author":{"gitID":"tiny767"},"content":"\u003d\u003d\u003d\u003d\u003d Major Enhancement (since v1.5): Facebook integration"},{"lineNumber":1910,"author":{"gitID":"-"},"content":""},{"lineNumber":1911,"author":{"gitID":"-"},"content":"Implementations needed:"},{"lineNumber":1912,"author":{"gitID":"-"},"content":""},{"lineNumber":1913,"author":{"gitID":"tiny767"},"content":"* Allow user to log in to their facebook account and connect the address book with that facebook account"},{"lineNumber":1914,"author":{"gitID":"tiny767"},"content":"* Allow for some features such as posting to wall, saving friends to the address book"},{"lineNumber":1915,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1916,"author":{"gitID":"tiny767"},"content":"\u003d\u003d\u003d\u003d\u003d Minor Enhancement: `remark` command"},{"lineNumber":1917,"author":{"gitID":"-"},"content":"* Allow users to add remarks for people in their Infinity Books."},{"lineNumber":1918,"author":{"gitID":"tiny767"},"content":"* This allows tech recruiters to have a more flexible field to use for their candidates"},{"lineNumber":1919,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1920,"author":{"gitID":"tiny767"},"content":"\u003d\u003d\u003d\u003d\u003d Minor Enhancement: `theme` command"},{"lineNumber":1921,"author":{"gitID":"tiny767"},"content":"* Allow users to change between some pre-defined theme."},{"lineNumber":1922,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1923,"author":{"gitID":"tiny767"},"content":"\u003d\u003d\u003d\u003d\u003d Minor Enhancement: Tag color"},{"lineNumber":1924,"author":{"gitID":"tiny767"},"content":"* Use different colors for different tags inside person cards"},{"lineNumber":1925,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1926,"author":{"gitID":"-"},"content":"link:#top[Back to top]"},{"lineNumber":1927,"author":{"gitID":"-"},"content":""},{"lineNumber":1928,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1929,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":1930,"author":{"gitID":"-"},"content":""},{"lineNumber":1931,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":1932,"author":{"gitID":"-"},"content":""},{"lineNumber":1933,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":1934,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1935,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":1936,"author":{"gitID":"-"},"content":"|`* * *` |User |Add a new candidate |"},{"lineNumber":1937,"author":{"gitID":"-"},"content":""},{"lineNumber":1938,"author":{"gitID":"-"},"content":"|`* * *` |User |Delete a candidate |Remove entries that I no longer need"},{"lineNumber":1939,"author":{"gitID":"-"},"content":""},{"lineNumber":1940,"author":{"gitID":"-"},"content":"|`* * *` |User |Find a candidate by name |Locate details of persons without having to go through the entire list"},{"lineNumber":1941,"author":{"gitID":"-"},"content":""},{"lineNumber":1942,"author":{"gitID":"-"},"content":"|`* * *` |User who wants to record notes |Add a note entry for a candidate |Record more information about the person"},{"lineNumber":1943,"author":{"gitID":"-"},"content":""},{"lineNumber":1944,"author":{"gitID":"deeheenguyen"},"content":"|`* * *` |User interested in a contact\u0027s skills |Get the technical skills of a candidate |to find suitable candidates"},{"lineNumber":1945,"author":{"gitID":"-"},"content":""},{"lineNumber":1946,"author":{"gitID":"deeheenguyen"},"content":"|`* * *` |User who saves many resumes |Open candidates\u0027 resumes from commandline |to quickly view their profiles"},{"lineNumber":1947,"author":{"gitID":"-"},"content":""},{"lineNumber":1948,"author":{"gitID":"-"},"content":"|`* * *` |User |Delete a tag from Infinity Book |To remove tags I am no longer interested in"},{"lineNumber":1949,"author":{"gitID":"-"},"content":""},{"lineNumber":1950,"author":{"gitID":"tiny767"},"content":"|`* * *` |Recruiter |Log in to Facebook on Infinity Book |Share job posting to facebook faster"},{"lineNumber":1951,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":1952,"author":{"gitID":"-"},"content":"|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"},{"lineNumber":1953,"author":{"gitID":"-"},"content":""},{"lineNumber":1954,"author":{"gitID":"-"},"content":"|`* *` |User |Hide \u003c\u003cprivate-contact-detail,private\u003e\u003e contact details by default |Minimize chance of someone else seeing them by accident"},{"lineNumber":1955,"author":{"gitID":"-"},"content":""},{"lineNumber":1956,"author":{"gitID":"deeheenguyen"},"content":"|`* *` |User who views contacts |List frequently viewed candidates |To select the most probable candidates"},{"lineNumber":1957,"author":{"gitID":"-"},"content":""},{"lineNumber":1958,"author":{"gitID":"deeheenguyen"},"content":"|`* *` |User with interest in recruitment |View candidates\u0027 LinkedIn profiles from commandline |To know about their work profiles"},{"lineNumber":1959,"author":{"gitID":"-"},"content":""},{"lineNumber":1960,"author":{"gitID":"deeheenguyen"},"content":"|`* *` |User |View my search history |To keep track of my previous searches"},{"lineNumber":1961,"author":{"gitID":"-"},"content":""},{"lineNumber":1962,"author":{"gitID":"deeheenguyen"},"content":"|`* *` |User interested in specific skills |Search candidates by skill |To find suitable candidates easily"},{"lineNumber":1963,"author":{"gitID":"-"},"content":""},{"lineNumber":1964,"author":{"gitID":"deeheenguyen"},"content":"|`* *` |User who is recruiting |Search by graduation year |To find suitable full/part time candidates"},{"lineNumber":1965,"author":{"gitID":"-"},"content":""},{"lineNumber":1966,"author":{"gitID":"deeheenguyen"},"content":"|`* *` |User interested in checking projects |Access contacts\u0027 Github repositories |easily view and evaluate projects"},{"lineNumber":1967,"author":{"gitID":"-"},"content":""},{"lineNumber":1968,"author":{"gitID":"-"},"content":"|`* *` |With many contacts |Set profile pictures for contacts |identify and remember them"},{"lineNumber":1969,"author":{"gitID":"-"},"content":""},{"lineNumber":1970,"author":{"gitID":"deeheenguyen"},"content":"|`* *` |User |read all notes about a contact |Remember my past interactions and research about the contact"},{"lineNumber":1971,"author":{"gitID":"-"},"content":""},{"lineNumber":1972,"author":{"gitID":"-"},"content":"|`* *` |User with multiple Infinity Books |Export my contacts |Import into another Infinity Book application"},{"lineNumber":1973,"author":{"gitID":"-"},"content":""},{"lineNumber":1974,"author":{"gitID":"-"},"content":"|`* *` |User with multiple devices |Back up my Infinity Book in the cloud |Data is accessible from other devices"},{"lineNumber":1975,"author":{"gitID":"-"},"content":""},{"lineNumber":1976,"author":{"gitID":"-"},"content":"|`*` |User with many persons in the Infinity Book |Sort persons by name |Locate a candidate easily"},{"lineNumber":1977,"author":{"gitID":"-"},"content":""},{"lineNumber":1978,"author":{"gitID":"-"},"content":"|`*` |User concerned about confidentiality |Set a password for the AddressBook |My Infinity Book will be secure"},{"lineNumber":1979,"author":{"gitID":"-"},"content":""},{"lineNumber":1980,"author":{"gitID":"-"},"content":"|`*` |User with frequently changing contacts |Clear the entire Infinity Book |To start with new candidates when required"},{"lineNumber":1981,"author":{"gitID":"-"},"content":""},{"lineNumber":1982,"author":{"gitID":"deeheenguyen"},"content":"|`*` |User who frequently emails contacts |Open an email link to the contact directly |Quickly email candidates with copying their addresses"},{"lineNumber":1983,"author":{"gitID":"-"},"content":""},{"lineNumber":1984,"author":{"gitID":"deeheenguyen"},"content":"|`*` |User who types many commands |Get autocomplete suggestion |Quickly complete command"},{"lineNumber":1985,"author":{"gitID":"-"},"content":""},{"lineNumber":1986,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1987,"author":{"gitID":"-"},"content":""},{"lineNumber":1988,"author":{"gitID":"-"},"content":""},{"lineNumber":1989,"author":{"gitID":"-"},"content":"link:#top[Back to top]"},{"lineNumber":1990,"author":{"gitID":"-"},"content":""},{"lineNumber":1991,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1992,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1993,"author":{"gitID":"-"},"content":""},{"lineNumber":1994,"author":{"gitID":"tiny767"},"content":"(For all use cases below, the *System* is the `InfinityBook` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":1995,"author":{"gitID":"-"},"content":""},{"lineNumber":1996,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1997,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Delete person"},{"lineNumber":1998,"author":{"gitID":"-"},"content":""},{"lineNumber":1999,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":2000,"author":{"gitID":"-"},"content":""},{"lineNumber":2001,"author":{"gitID":"-"},"content":"1.  User requests to list persons"},{"lineNumber":2002,"author":{"gitID":"tiny767"},"content":"2.  Infinity Book shows a list of persons"},{"lineNumber":2003,"author":{"gitID":"-"},"content":"3.  User requests to delete a specific candidate in the list"},{"lineNumber":2004,"author":{"gitID":"tiny767"},"content":"4.  InfinityBook deletes the person"},{"lineNumber":2005,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2006,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":2007,"author":{"gitID":"-"},"content":""},{"lineNumber":2008,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":2009,"author":{"gitID":"-"},"content":""},{"lineNumber":2010,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":2011,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":2012,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2013,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":2014,"author":{"gitID":"-"},"content":""},{"lineNumber":2015,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":2016,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2017,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":2018,"author":{"gitID":"tiny767"},"content":"** 3a1. Infinity Book shows an error message."},{"lineNumber":2019,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2020,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":2021,"author":{"gitID":"-"},"content":""},{"lineNumber":2022,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Search a candidate by tag"},{"lineNumber":2023,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":2024,"author":{"gitID":"-"},"content":""},{"lineNumber":2025,"author":{"gitID":"-"},"content":"1. User requests to search and provides search params"},{"lineNumber":2026,"author":{"gitID":"-"},"content":"2. Infinity Book shows a list of candidate fitting the given criteria"},{"lineNumber":2027,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2028,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":2029,"author":{"gitID":"-"},"content":""},{"lineNumber":2030,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: View Linkedin profile of a person"},{"lineNumber":2031,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":2032,"author":{"gitID":"-"},"content":""},{"lineNumber":2033,"author":{"gitID":"-"},"content":"1. User requests to search the candidate by name"},{"lineNumber":2034,"author":{"gitID":"-"},"content":"2. Infinity Book shows a list of person"},{"lineNumber":2035,"author":{"gitID":"-"},"content":"3. User chooses a candidate by index in the list"},{"lineNumber":2036,"author":{"gitID":"-"},"content":"4. Infinity Book shows the linkedin page of that person"},{"lineNumber":2037,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2038,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":2039,"author":{"gitID":"-"},"content":""},{"lineNumber":2040,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":2041,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":2042,"author":{"gitID":"-"},"content":""},{"lineNumber":2043,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":2044,"author":{"gitID":"-"},"content":".  Should be able to hold up to 1000 persons with a reponse time of less than 2 seconds for a command."},{"lineNumber":2045,"author":{"gitID":"-"},"content":".  Commands should ideally be less than 12 characters long to enable users with reasonable typing speed to use commands effectively."},{"lineNumber":2046,"author":{"gitID":"-"},"content":".  Should not use more than 11% CPU resources for executing commands"},{"lineNumber":2047,"author":{"gitID":"-"},"content":".  Data storage for Infinity Book with 1000 contacts should not exceed 500 Gb"},{"lineNumber":2048,"author":{"gitID":"-"},"content":".  Should be able to work even on older 32-bit system"},{"lineNumber":2049,"author":{"gitID":"-"},"content":".  Project should not require updates to remain functional."},{"lineNumber":2050,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":2051,"author":{"gitID":"-"},"content":""},{"lineNumber":2052,"author":{"gitID":"-"},"content":"link:#top[Back to top]"},{"lineNumber":2053,"author":{"gitID":"-"},"content":""},{"lineNumber":2054,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":2055,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":2056,"author":{"gitID":"-"},"content":""},{"lineNumber":2057,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":2058,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":2059,"author":{"gitID":"-"},"content":""},{"lineNumber":2060,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":2061,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":2062,"author":{"gitID":"-"},"content":""},{"lineNumber":2063,"author":{"gitID":"-"},"content":"link:#top[Back to top]"},{"lineNumber":2064,"author":{"gitID":"-"},"content":""},{"lineNumber":2065,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":2066,"author":{"gitID":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":2067,"author":{"gitID":"-"},"content":""},{"lineNumber":2068,"author":{"gitID":"-"},"content":"*Infinity Book*"},{"lineNumber":2069,"author":{"gitID":"-"},"content":""},{"lineNumber":2070,"author":{"gitID":"-"},"content":"Author: Sashankh Chengavalli Kumar"},{"lineNumber":2071,"author":{"gitID":"-"},"content":""},{"lineNumber":2072,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":2073,"author":{"gitID":"-"},"content":""},{"lineNumber":2074,"author":{"gitID":"-"},"content":"* Allows recruiters to collate all candidate details in one location"},{"lineNumber":2075,"author":{"gitID":"-"},"content":"* Allows for quick management of data using a Desktop Application"},{"lineNumber":2076,"author":{"gitID":"-"},"content":"* End-to-end support for recruiters from viewing candidates to inviting to interviews."},{"lineNumber":2077,"author":{"gitID":"-"},"content":""},{"lineNumber":2078,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":2079,"author":{"gitID":"-"},"content":""},{"lineNumber":2080,"author":{"gitID":"-"},"content":"* Synchronization across multiple devices/cloud not possible."},{"lineNumber":2081,"author":{"gitID":"-"},"content":"* Mobile client not available to enable remote access to Infinity Book."},{"lineNumber":2082,"author":{"gitID":"-"},"content":""},{"lineNumber":2083,"author":{"gitID":"-"},"content":"link:#top[Back to top]"},{"lineNumber":2084,"author":{"gitID":"-"},"content":""},{"lineNumber":2085,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":2086,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":2087,"author":{"gitID":"-"},"content":""},{"lineNumber":2088,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":2089,"author":{"gitID":"-"},"content":""},{"lineNumber":2090,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":2091,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":2092,"author":{"gitID":"-"},"content":""},{"lineNumber":2093,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":2094,"author":{"gitID":"-"},"content":""},{"lineNumber":2095,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":2096,"author":{"gitID":"-"},"content":""},{"lineNumber":2097,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":2098,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":2099,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":2100,"author":{"gitID":"-"},"content":""},{"lineNumber":2101,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":2102,"author":{"gitID":"-"},"content":""},{"lineNumber":2103,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":2104,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":2105,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":2106,"author":{"gitID":"-"},"content":""},{"lineNumber":2107,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Add tags to a candidate"},{"lineNumber":2108,"author":{"gitID":"-"},"content":""},{"lineNumber":2109,"author":{"gitID":"-"},"content":". Add new tags to a candidate in the list."},{"lineNumber":2110,"author":{"gitID":"-"},"content":""},{"lineNumber":2111,"author":{"gitID":"-"},"content":".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":2112,"author":{"gitID":"-"},"content":".. Test case: `edit -add-tag 1 t/Year2 t/SpeakVietnamese` +"},{"lineNumber":2113,"author":{"gitID":"-"},"content":"   Expected: Added new tags to the first candidate."},{"lineNumber":2114,"author":{"gitID":"-"},"content":".. Test case: `edit -add-tag 1 t/Year2` +"},{"lineNumber":2115,"author":{"gitID":"-"},"content":"   Expected: Cannot add a new duplicated tag to the first candidate. The candidate’s details will not be updated, and Infinity Book will not show any warning."},{"lineNumber":2116,"author":{"gitID":"-"},"content":""},{"lineNumber":2117,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Delete tags from a candidate"},{"lineNumber":2118,"author":{"gitID":"-"},"content":""},{"lineNumber":2119,"author":{"gitID":"-"},"content":". Delete tags from a candidate in the list."},{"lineNumber":2120,"author":{"gitID":"-"},"content":""},{"lineNumber":2121,"author":{"gitID":"-"},"content":".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":2122,"author":{"gitID":"-"},"content":".. Test case: `edit -delete-tag 1 t/computing` +"},{"lineNumber":2123,"author":{"gitID":"-"},"content":"   Expected: Cannot delete tag computing from the first candidate. The candidate’s details will not be updated, and Infinity Book will not show any warning"},{"lineNumber":2124,"author":{"gitID":"-"},"content":".. Test case: `edit -delete-tag 1 t/Computing` +"},{"lineNumber":2125,"author":{"gitID":"-"},"content":"   Expected: Removes tag Computing from the first candidate."},{"lineNumber":2126,"author":{"gitID":"-"},"content":""},{"lineNumber":2127,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d View a report"},{"lineNumber":2128,"author":{"gitID":"-"},"content":""},{"lineNumber":2129,"author":{"gitID":"-"},"content":". View report based on candidates in IB."},{"lineNumber":2130,"author":{"gitID":"-"},"content":""},{"lineNumber":2131,"author":{"gitID":"-"},"content":".. Test case: `viewreport pop/SEIntern` +"},{"lineNumber":2132,"author":{"gitID":"-"},"content":"   Expected: Infinity Book has displayed Report with Population Tag `SEIntern` in the right-most column."},{"lineNumber":2133,"author":{"gitID":"-"},"content":".. Test case: `viewreport pop/SEIntern pop/Computing` +"},{"lineNumber":2134,"author":{"gitID":"-"},"content":"   Expected:  Infinity Book will display the report for Computing."},{"lineNumber":2135,"author":{"gitID":"-"},"content":""},{"lineNumber":2136,"author":{"gitID":"-"},"content":"Report explanation can be found in User Guide."},{"lineNumber":2137,"author":{"gitID":"-"},"content":""},{"lineNumber":2138,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Save a report"},{"lineNumber":2139,"author":{"gitID":"-"},"content":""},{"lineNumber":2140,"author":{"gitID":"-"},"content":". Save report based on candidates in IB."},{"lineNumber":2141,"author":{"gitID":"-"},"content":""},{"lineNumber":2142,"author":{"gitID":"-"},"content":".. Test case: `savereport pop/SEIntern` +"},{"lineNumber":2143,"author":{"gitID":"-"},"content":"   Expected:  Infinity Book has saved Report with population Tag SEIntern. In the right-most column, the history list includes all statistics you have saved."},{"lineNumber":2144,"author":{"gitID":"-"},"content":".. Test case: `savereport pop/SEIntern pop/Computing` +"},{"lineNumber":2145,"author":{"gitID":"-"},"content":"   Expected: Infinity Book will save the report for Computing."},{"lineNumber":2146,"author":{"gitID":"-"},"content":""},{"lineNumber":2147,"author":{"gitID":"-"},"content":"Report explanation can be found in User Guide."},{"lineNumber":2148,"author":{"gitID":"-"},"content":""},{"lineNumber":2149,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d View a person"},{"lineNumber":2150,"author":{"gitID":"deeheenguyen"},"content":". Viewing a person by emailID"},{"lineNumber":2151,"author":{"gitID":"deeheenguyen"},"content":".. Test case: `view notexisted@example.com` +"},{"lineNumber":2152,"author":{"gitID":"deeheenguyen"},"content":"   Expected: person found and no new url display on browser panel"},{"lineNumber":2153,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":2154,"author":{"gitID":"deeheenguyen"},"content":".. Test case: `view a@example.com` +"},{"lineNumber":2155,"author":{"gitID":"deeheenguyen"},"content":"   Prerequisites: the person with email a@example.com exists on Infinity Book. +"},{"lineNumber":2156,"author":{"gitID":"deeheenguyen"},"content":"   Expected: the person with email a@example.com returned,"},{"lineNumber":2157,"author":{"gitID":"deeheenguyen"},"content":"   and the corresponding linking page has been displayed on the browser panel."},{"lineNumber":2158,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":2159,"author":{"gitID":"deeheenguyen"},"content":"\u003d\u003d\u003d Interview Management"},{"lineNumber":2160,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":2161,"author":{"gitID":"deeheenguyen"},"content":"\u003d\u003d\u003d\u003d Add interview"},{"lineNumber":2162,"author":{"gitID":"deeheenguyen"},"content":". Add an interview to current infinity book."},{"lineNumber":2163,"author":{"gitID":"deeheenguyen"},"content":".. Test case: `addInterview` +"},{"lineNumber":2164,"author":{"gitID":"deeheenguyen"},"content":"   Expected:  Invalid format showing in the status message +"},{"lineNumber":2165,"author":{"gitID":"deeheenguyen"},"content":".. Test case:  `addInterview i/SE INTERVIEW n/DAVID d/04.05.2018 l/NUS SOC` +"},{"lineNumber":2166,"author":{"gitID":"deeheenguyen"},"content":"   Expected: new interview added in the status message."},{"lineNumber":2167,"author":{"gitID":"deeheenguyen"},"content":"   New interview added in the browser panel."},{"lineNumber":2168,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":2169,"author":{"gitID":"deeheenguyen"},"content":"\u003d\u003d\u003d\u003d List interview"},{"lineNumber":2170,"author":{"gitID":"deeheenguyen"},"content":". List all interviews of infinity book"},{"lineNumber":2171,"author":{"gitID":"deeheenguyen"},"content":".. Test case: `listInterview`"},{"lineNumber":2172,"author":{"gitID":"deeheenguyen"},"content":"   Expected: Showing all the interviews in the interview panel"},{"lineNumber":2173,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":2174,"author":{"gitID":"deeheenguyen"},"content":"\u003d\u003d\u003d\u003d Delete Interview"},{"lineNumber":2175,"author":{"gitID":"deeheenguyen"},"content":". Prerequisites: List all interviews using the `listInterview` command. Multiple interviews in the list. +"},{"lineNumber":2176,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":2177,"author":{"gitID":"deeheenguyen"},"content":". Deleting an interview while all interviews are listed"},{"lineNumber":2178,"author":{"gitID":"deeheenguyen"},"content":".. Test case: `deleteInterview 1`"},{"lineNumber":2179,"author":{"gitID":"deeheenguyen"},"content":"   Expected: First interview deleted from the interview list."},{"lineNumber":2180,"author":{"gitID":"deeheenguyen"},"content":"   Details of the deleted contact shown in the status message."},{"lineNumber":2181,"author":{"gitID":"deeheenguyen"},"content":".. Test case: `deleteInterview 0`"},{"lineNumber":2182,"author":{"gitID":"deeheenguyen"},"content":"   Expected: No interview is deleted. Error details shown in the status message."},{"lineNumber":2183,"author":{"gitID":"deeheenguyen"},"content":".. Other incorrect delete commands to try: `deleteInterview`, `deleteInterview x` (where x is larger than the list size) +"},{"lineNumber":2184,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":2185,"author":{"gitID":"-"},"content":""},{"lineNumber":2186,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Job Management"},{"lineNumber":2187,"author":{"gitID":"-"},"content":""},{"lineNumber":2188,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Add Job"},{"lineNumber":2189,"author":{"gitID":"-"},"content":". Post a job to infinity book."},{"lineNumber":2190,"author":{"gitID":"-"},"content":".. Test case: `postjob` +"},{"lineNumber":2191,"author":{"gitID":"deeheenguyen"},"content":"   Expected:  Invalid format showing in the status message +"},{"lineNumber":2192,"author":{"gitID":"-"},"content":".. Test case:  `postjob j/JobTitle l/location s/skill t/NewTag` +"},{"lineNumber":2193,"author":{"gitID":"-"},"content":"   Expected: new job posted in the status message."},{"lineNumber":2194,"author":{"gitID":"-"},"content":"   New job card displauyed in the JobListPanel."},{"lineNumber":2195,"author":{"gitID":"-"},"content":""},{"lineNumber":2196,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d List Jobs"},{"lineNumber":2197,"author":{"gitID":"-"},"content":". List all jobs of infinity book"},{"lineNumber":2198,"author":{"gitID":"-"},"content":".. Test case: `listjobs`"},{"lineNumber":2199,"author":{"gitID":"-"},"content":"   Expected: Showing all jobs in the job panel."},{"lineNumber":2200,"author":{"gitID":"-"},"content":""},{"lineNumber":2201,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Delete Job"},{"lineNumber":2202,"author":{"gitID":"-"},"content":". Prerequisites: List all jobs using the `listjobs` command. All entries are displayed in JobListPanel. +"},{"lineNumber":2203,"author":{"gitID":"-"},"content":""},{"lineNumber":2204,"author":{"gitID":"-"},"content":". Deleting a job while all jobs are listed"},{"lineNumber":2205,"author":{"gitID":"-"},"content":".. Test case: `deletejob 1`"},{"lineNumber":2206,"author":{"gitID":"-"},"content":"   Expected: First job deleted from the job list."},{"lineNumber":2207,"author":{"gitID":"-"},"content":"   Details of the deleted job shown in the status message."},{"lineNumber":2208,"author":{"gitID":"-"},"content":".. Test case: `deletejob 0`"},{"lineNumber":2209,"author":{"gitID":"deeheenguyen"},"content":"   Expected: No interview is deleted. Error details shown in the status message."},{"lineNumber":2210,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `deletejob`, `deletejob x` (where x is larger than the list size) +"},{"lineNumber":2211,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":2212,"author":{"gitID":"-"},"content":""},{"lineNumber":2213,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Edit Job"},{"lineNumber":2214,"author":{"gitID":"-"},"content":". Prerequisites: List all jobs using the `listjobs` command. All entries are displayed in JobListPanel. +"},{"lineNumber":2215,"author":{"gitID":"-"},"content":""},{"lineNumber":2216,"author":{"gitID":"-"},"content":". Editing a job while all jobs are listed"},{"lineNumber":2217,"author":{"gitID":"-"},"content":".. Test case: `editjob 1 j/newTitle l/newLocation s/newSkill t/NewTag`"},{"lineNumber":2218,"author":{"gitID":"-"},"content":"   Expected: First job edited to contain new job title."},{"lineNumber":2219,"author":{"gitID":"-"},"content":"   Details of the deleted job shown in the status message."},{"lineNumber":2220,"author":{"gitID":"-"},"content":".. Test case: `editjob 1 j/newTitle l/newLocation s/newSkill t/NewTag` + editjob 2 j/newTitle l/newLocation s/newSkill t/NewTag"},{"lineNumber":2221,"author":{"gitID":"-"},"content":"   Expected: Second job is not edited, but first is. Error details shown in the status message."},{"lineNumber":2222,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `editjob 1`, `deletejob x` (where x is larger than the list size) +"},{"lineNumber":2223,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":2224,"author":{"gitID":"-"},"content":""},{"lineNumber":2225,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Find Job"},{"lineNumber":2226,"author":{"gitID":"-"},"content":". Find a job by keyword[s]."},{"lineNumber":2227,"author":{"gitID":"-"},"content":".. Test case: `findjob keyword`"},{"lineNumber":2228,"author":{"gitID":"-"},"content":"   Expected: Showing all jobs matching keyword in the job panel."},{"lineNumber":2229,"author":{"gitID":"-"},"content":".. Test case: `findjob`"},{"lineNumber":2230,"author":{"gitID":"-"},"content":"   Expected: No job list change is made. Error details shown in the status message."},{"lineNumber":2231,"author":{"gitID":"-"},"content":""},{"lineNumber":2232,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Match Job"},{"lineNumber":2233,"author":{"gitID":"-"},"content":". Prerequisites: List all jobs using the `listjobs` command. All entries are displayed in JobListPanel. +"},{"lineNumber":2234,"author":{"gitID":"-"},"content":""},{"lineNumber":2235,"author":{"gitID":"-"},"content":". Matching a job to candidates while all jobs are listed"},{"lineNumber":2236,"author":{"gitID":"-"},"content":".. Test case: `matchjob 1`"},{"lineNumber":2237,"author":{"gitID":"-"},"content":"   Expected: All candidates matching the first job are displayed in the PersonListPanel."},{"lineNumber":2238,"author":{"gitID":"-"},"content":".. Test case: `matchjob 0`"},{"lineNumber":2239,"author":{"gitID":"-"},"content":"   Expected: No change is seen in the panels. Error message shown in the status message."},{"lineNumber":2240,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `matchjob`, `matchjob x` (where x is larger than the list size) +"},{"lineNumber":2241,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":2242,"author":{"gitID":"-"},"content":""},{"lineNumber":2243,"author":{"gitID":"-"},"content":""},{"lineNumber":2244,"author":{"gitID":"-"},"content":"link:#top[Back to top]"}],"authorContributionMap":{"deeheenguyen":215,"-":1813,"tiny767":216}},{"path":"src/test/java/seedu/address/logic/parser/AddInterviewCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"deeheenguyen"},"content":"//@@author deeheenguyen"},{"lineNumber":2,"author":{"gitID":"deeheenguyen"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":4,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_SE;"},{"lineNumber":5,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INTERVIEWEE_DESC_SE;"},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INTERVIEW_LOCATION_DESC_SE;"},{"lineNumber":7,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INTERVIEW_TITLE_DESC_SE;"},{"lineNumber":8,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":9,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_SE;"},{"lineNumber":10,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_INTERVIEWEE_SE;"},{"lineNumber":11,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_INTERVIEW_LOCATION_SE;"},{"lineNumber":12,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_INTERVIEW_TITLE_SE;"},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":15,"author":{"gitID":"deeheenguyen"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":17,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.logic.commands.AddInterviewCommand;"},{"lineNumber":18,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.Interview;"},{"lineNumber":19,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.testutil.InterviewBuilder;"},{"lineNumber":20,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":21,"author":{"gitID":"deeheenguyen"},"content":"public class AddInterviewCommandParserTest {"},{"lineNumber":22,"author":{"gitID":"deeheenguyen"},"content":"    private AddInterviewCommandParser parser \u003d new AddInterviewCommandParser();"},{"lineNumber":23,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"deeheenguyen"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":26,"author":{"gitID":"deeheenguyen"},"content":"        Interview expectedInterview \u003d new InterviewBuilder()"},{"lineNumber":27,"author":{"gitID":"deeheenguyen"},"content":"                .withInterviewTitle(VALID_INTERVIEW_TITLE_SE)"},{"lineNumber":28,"author":{"gitID":"deeheenguyen"},"content":"                .withInterviewee(VALID_INTERVIEWEE_SE)"},{"lineNumber":29,"author":{"gitID":"deeheenguyen"},"content":"                .withDate(VALID_DATE_SE)"},{"lineNumber":30,"author":{"gitID":"deeheenguyen"},"content":"                .withInterviewLocation(VALID_INTERVIEW_LOCATION_SE).build();"},{"lineNumber":31,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":32,"author":{"gitID":"deeheenguyen"},"content":"        // whitespace only preamble"},{"lineNumber":33,"author":{"gitID":"deeheenguyen"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + INTERVIEW_TITLE_DESC_SE"},{"lineNumber":34,"author":{"gitID":"deeheenguyen"},"content":"                + INTERVIEWEE_DESC_SE +  DATE_DESC_SE + INTERVIEW_LOCATION_DESC_SE,"},{"lineNumber":35,"author":{"gitID":"deeheenguyen"},"content":"                new AddInterviewCommand(expectedInterview));"},{"lineNumber":36,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"deeheenguyen"},"content":"}"}],"authorContributionMap":{"deeheenguyen":37}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_POPULATION;"},{"lineNumber":10,"author":{"gitID":"tiny767"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_JOB;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteJobCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditJobCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindJobCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListJobsCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.PostJobCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":38,"author":{"gitID":"tiny767"},"content":"import seedu.address.logic.commands.RemarkCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SaveReportCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":42,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.logic.commands.ViewCommand;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ViewReportCommand;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.job.JobMatchesKeywordsPredicate;"},{"lineNumber":47,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":48,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.person.EmailFilter;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.person.PersonContainsKeywordsPredicate;"},{"lineNumber":51,"author":{"gitID":"tiny767"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditJobDescriptorBuilder;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.testutil.JobBuilder;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.testutil.JobUtil;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"deeheenguyen"},"content":"    public void parseCommand_addAlias() throws Exception {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":76,"author":{"gitID":"deeheenguyen"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(AddCommand.COMMAND_ALIAS + \" \""},{"lineNumber":77,"author":{"gitID":"deeheenguyen"},"content":"                + PersonUtil.getPersonDetails(person));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"ChengSashankh"},"content":"    //@@author ChengSashankh"},{"lineNumber":88,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"ChengSashankh"},"content":"    public void parseCommand_postJob() throws Exception {"},{"lineNumber":90,"author":{"gitID":"ChengSashankh"},"content":"        Job job \u003d new JobBuilder().build();"},{"lineNumber":91,"author":{"gitID":"ChengSashankh"},"content":"        PostJobCommand command \u003d (PostJobCommand) parser.parseCommand(JobUtil.getPostJobCommand(job));"},{"lineNumber":92,"author":{"gitID":"ChengSashankh"},"content":"        assertEquals(new PostJobCommand(job), command);"},{"lineNumber":93,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"ChengSashankh"},"content":"    //@@author"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"deeheenguyen"},"content":"    public void parseCommand_clearAlias() throws Exception {"},{"lineNumber":98,"author":{"gitID":"deeheenguyen"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"},{"lineNumber":99,"author":{"gitID":"deeheenguyen"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"},{"lineNumber":100,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":105,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":110,"author":{"gitID":"deeheenguyen"},"content":"    public void parseCommand_deleteAlias() throws Exception {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":112,"author":{"gitID":"deeheenguyen"},"content":"                DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"ChengSashankh"},"content":"    //@@author ChengSashankh"},{"lineNumber":117,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"ChengSashankh"},"content":"    public void parseCommand_deleteJob() throws Exception {"},{"lineNumber":119,"author":{"gitID":"ChengSashankh"},"content":"        DeleteJobCommand command \u003d (DeleteJobCommand) parser.parseCommand("},{"lineNumber":120,"author":{"gitID":"ChengSashankh"},"content":"                DeleteJobCommand.COMMAND_WORD + \" \" + INDEX_FIRST_JOB.getOneBased());"},{"lineNumber":121,"author":{"gitID":"ChengSashankh"},"content":"        assertEquals(new DeleteJobCommand(INDEX_FIRST_JOB), command);"},{"lineNumber":122,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":124,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"ChengSashankh"},"content":"    public void parseCommand_deleteJobAlias() throws Exception {"},{"lineNumber":126,"author":{"gitID":"ChengSashankh"},"content":"        DeleteJobCommand command \u003d (DeleteJobCommand) parser.parseCommand("},{"lineNumber":127,"author":{"gitID":"ChengSashankh"},"content":"                DeleteJobCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_JOB.getOneBased());"},{"lineNumber":128,"author":{"gitID":"ChengSashankh"},"content":"        assertEquals(new DeleteJobCommand(INDEX_FIRST_JOB), command);"},{"lineNumber":129,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"ChengSashankh"},"content":"    //@@author"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":137,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":142,"author":{"gitID":"deeheenguyen"},"content":"    public void parseCommand_editAlias() throws Exception {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":145,"author":{"gitID":"deeheenguyen"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""},{"lineNumber":146,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"ChengSashankh"},"content":"    //@@author ChengSashankh"},{"lineNumber":151,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":152,"author":{"gitID":"ChengSashankh"},"content":"    public void parseCommand_editJob() throws Exception {"},{"lineNumber":153,"author":{"gitID":"ChengSashankh"},"content":"        Job job \u003d new JobBuilder().build();"},{"lineNumber":154,"author":{"gitID":"ChengSashankh"},"content":"        EditJobCommand.EditJobDescriptor descriptor \u003d new EditJobDescriptorBuilder(job).build();"},{"lineNumber":155,"author":{"gitID":"ChengSashankh"},"content":"        EditJobCommand command \u003d (EditJobCommand) parser.parseCommand(EditJobCommand.COMMAND_WORD + \" \""},{"lineNumber":156,"author":{"gitID":"ChengSashankh"},"content":"                + INDEX_FIRST_JOB.getOneBased() + \" \" + JobUtil.getJobDetails(job));"},{"lineNumber":157,"author":{"gitID":"ChengSashankh"},"content":"        assertEquals(new EditJobCommand(INDEX_FIRST_JOB, descriptor), command);"},{"lineNumber":158,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":160,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":161,"author":{"gitID":"ChengSashankh"},"content":"    public void parseCommand_editJobAlias() throws Exception {"},{"lineNumber":162,"author":{"gitID":"ChengSashankh"},"content":"        Job job \u003d new JobBuilder().build();"},{"lineNumber":163,"author":{"gitID":"ChengSashankh"},"content":"        EditJobCommand.EditJobDescriptor descriptor \u003d new EditJobDescriptorBuilder(job).build();"},{"lineNumber":164,"author":{"gitID":"ChengSashankh"},"content":"        EditJobCommand command \u003d (EditJobCommand) parser.parseCommand(EditJobCommand.COMMAND_ALIAS + \" \""},{"lineNumber":165,"author":{"gitID":"ChengSashankh"},"content":"                + INDEX_FIRST_JOB.getOneBased() + \" \" + JobUtil.getJobDetails(job));"},{"lineNumber":166,"author":{"gitID":"ChengSashankh"},"content":"        assertEquals(new EditJobCommand(INDEX_FIRST_JOB, descriptor), command);"},{"lineNumber":167,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"ChengSashankh"},"content":"    //@@author"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":180,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new PersonContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"ChengSashankh"},"content":"    //@@author ChengSashankh"},{"lineNumber":185,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":186,"author":{"gitID":"ChengSashankh"},"content":"    public void parseCommand_findJob() throws Exception {"},{"lineNumber":187,"author":{"gitID":"ChengSashankh"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":188,"author":{"gitID":"ChengSashankh"},"content":"        FindJobCommand command \u003d (FindJobCommand) parser.parseCommand("},{"lineNumber":189,"author":{"gitID":"ChengSashankh"},"content":"                FindJobCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":190,"author":{"gitID":"ChengSashankh"},"content":"        assertEquals(new FindJobCommand(new JobMatchesKeywordsPredicate(keywords)), command);"},{"lineNumber":191,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"ChengSashankh"},"content":"    //@@author"},{"lineNumber":193,"author":{"gitID":"anh2111"},"content":"    // @@author anh2111"},{"lineNumber":194,"author":{"gitID":"anh2111"},"content":"    @Test"},{"lineNumber":195,"author":{"gitID":"anh2111"},"content":"    public void parseCommand_viewreport() throws Exception {"},{"lineNumber":196,"author":{"gitID":"anh2111"},"content":"        String populationTag \u003d \"SEIntern\";"},{"lineNumber":197,"author":{"gitID":"anh2111"},"content":"        ViewReportCommand command \u003d (ViewReportCommand) parser.parseCommand("},{"lineNumber":198,"author":{"gitID":"anh2111"},"content":"                ViewReportCommand.COMMAND_WORD + \" \" + PREFIX_POPULATION + populationTag);"},{"lineNumber":199,"author":{"gitID":"anh2111"},"content":"        assertEquals(new ViewReportCommand(new Tag(populationTag)), command);"},{"lineNumber":200,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":202,"author":{"gitID":"anh2111"},"content":"    @Test"},{"lineNumber":203,"author":{"gitID":"anh2111"},"content":"    public void parseCommand_savereport() throws Exception {"},{"lineNumber":204,"author":{"gitID":"anh2111"},"content":"        String populationTag \u003d \"SEIntern\";"},{"lineNumber":205,"author":{"gitID":"anh2111"},"content":"        SaveReportCommand command \u003d (SaveReportCommand) parser.parseCommand("},{"lineNumber":206,"author":{"gitID":"anh2111"},"content":"                SaveReportCommand.COMMAND_WORD + \" \" + PREFIX_POPULATION + populationTag);"},{"lineNumber":207,"author":{"gitID":"anh2111"},"content":"        assertEquals(new SaveReportCommand(new Tag(populationTag)), command);"},{"lineNumber":208,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"anh2111"},"content":"    // @@author"},{"lineNumber":210,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":211,"author":{"gitID":"deeheenguyen"},"content":"    public void parseCommand_view() throws Exception {"},{"lineNumber":212,"author":{"gitID":"deeheenguyen"},"content":"        String example \u003d \"john@example.com\";"},{"lineNumber":213,"author":{"gitID":"deeheenguyen"},"content":"        Email email \u003d new Email(example);"},{"lineNumber":214,"author":{"gitID":"deeheenguyen"},"content":"        ViewCommand command \u003d (ViewCommand) parser.parseCommand(ViewCommand.COMMAND_WORD + \" \" + email);"},{"lineNumber":215,"author":{"gitID":"deeheenguyen"},"content":"        assertEquals(new ViewCommand(new EmailFilter(email)), command);"},{"lineNumber":216,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":231,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"ChengSashankh"},"content":"    //@@author ChengSashankh"},{"lineNumber":244,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":245,"author":{"gitID":"ChengSashankh"},"content":"    public void parseCommand_listJob() throws Exception {"},{"lineNumber":246,"author":{"gitID":"ChengSashankh"},"content":"        assertTrue(parser.parseCommand(ListJobsCommand.COMMAND_WORD) instanceof ListJobsCommand);"},{"lineNumber":247,"author":{"gitID":"ChengSashankh"},"content":"        assertTrue(parser.parseCommand(ListJobsCommand.COMMAND_WORD + \" 3\") instanceof ListJobsCommand);"},{"lineNumber":248,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"ChengSashankh"},"content":"    //@@author"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":254,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":259,"author":{"gitID":"deeheenguyen"},"content":"    public void parseCommand_selectAlias() throws Exception {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":261,"author":{"gitID":"deeheenguyen"},"content":"                SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":266,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"tiny767"},"content":"    @Test"},{"lineNumber":272,"author":{"gitID":"tiny767"},"content":"    public void parseCommand_remark() throws Exception {"},{"lineNumber":273,"author":{"gitID":"tiny767"},"content":"        final Remark remark \u003d new Remark(\"Like cooking\");"},{"lineNumber":274,"author":{"gitID":"tiny767"},"content":"        RemarkCommand command \u003d (RemarkCommand) parser.parseCommand(RemarkCommand.COMMAND_WORD"},{"lineNumber":275,"author":{"gitID":"tiny767"},"content":"            + \" \" + INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_REMARK + remark.value);"},{"lineNumber":276,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":277,"author":{"gitID":"tiny767"},"content":"        assertEquals(command, new RemarkCommand(INDEX_FIRST_PERSON, remark));"},{"lineNumber":278,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":279,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":280,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":282,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":285,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":286,"author":{"gitID":"-"},"content":""},{"lineNumber":287,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":288,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":289,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":292,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":293,"author":{"gitID":"-"},"content":""},{"lineNumber":294,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":295,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":296,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":297,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":298,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":299,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":300,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"deeheenguyen":31,"ChengSashankh":58,"anh2111":17,"-":181,"tiny767":13}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.logic.commands.CommandTestUtil.LINK_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SKILL_DESC_AMY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SKILL_DESC_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":28,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LINK_AMY;"},{"lineNumber":29,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LINK_BOB;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_SKILL_AMY;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":58,"author":{"gitID":"deeheenguyen"},"content":"                .withTags(VALID_TAG_FRIEND).withLink(VALID_LINK_BOB).build();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + LINK_DESC_AMY + SKILL_DESC_AMY, new AddCommand(expectedPerson));"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + LINK_DESC_AMY + SKILL_DESC_AMY, new AddCommand(expectedPerson));"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + LINK_DESC_AMY + SKILL_DESC_AMY, new AddCommand(expectedPerson));"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + LINK_DESC_AMY + SKILL_DESC_AMY, new AddCommand(expectedPerson));"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":78,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + LINK_DESC_AMY + SKILL_DESC_AMY, new AddCommand(expectedPerson));"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":83,"author":{"gitID":"deeheenguyen"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).withLink(VALID_LINK_BOB).build();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND"},{"lineNumber":86,"author":{"gitID":"-"},"content":"                + LINK_DESC_AMY + SKILL_DESC_AMY, new AddCommand(expectedPersonMultipleTags));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // zero tags"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags().withLink(VALID_LINK_AMY)"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                .withSkills(VALID_SKILL_AMY).build();"},{"lineNumber":95,"author":{"gitID":"deeheenguyen"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                        + ADDRESS_DESC_AMY + LINK_DESC_AMY + SKILL_DESC_AMY,"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        // missing phone prefix"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // missing email prefix"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // missing address prefix"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":129,"author":{"gitID":"deeheenguyen"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + LINK_DESC_AMY, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // invalid phone"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":133,"author":{"gitID":"deeheenguyen"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + LINK_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        // invalid email"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"},{"lineNumber":137,"author":{"gitID":"deeheenguyen"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + LINK_DESC_AMY, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        // invalid address"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":141,"author":{"gitID":"deeheenguyen"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + LINK_DESC_AMY, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // invalid tag"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":145,"author":{"gitID":"-"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FRIEND + LINK_DESC_AMY + SKILL_DESC_BOB, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":148,"author":{"gitID":"deeheenguyen"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":149,"author":{"gitID":"deeheenguyen"},"content":"                + LINK_DESC_AMY,"},{"lineNumber":150,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        // non-empty preamble"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":154,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":155,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"deeheenguyen":12,"-":145}},{"path":"src/test/java/seedu/address/logic/parser/ViewCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"deeheenguyen"},"content":"//@@author deeheenguyen"},{"lineNumber":2,"author":{"gitID":"deeheenguyen"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":4,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":8,"author":{"gitID":"deeheenguyen"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":10,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.logic.commands.ViewCommand;"},{"lineNumber":11,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":12,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.person.EmailFilter;"},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":"public class ViewCommandParserTest {"},{"lineNumber":15,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":16,"author":{"gitID":"deeheenguyen"},"content":"    private ViewCommandParser parser \u003d new ViewCommandParser();"},{"lineNumber":17,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":18,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"deeheenguyen"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":20,"author":{"gitID":"deeheenguyen"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"},{"lineNumber":21,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":23,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":"    public void parse_emptyArg_throwsIllegalException() {"},{"lineNumber":25,"author":{"gitID":"deeheenguyen"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":28,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"deeheenguyen"},"content":"    public void parse_validArgs_returnsViewCommand() {"},{"lineNumber":30,"author":{"gitID":"deeheenguyen"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":31,"author":{"gitID":"deeheenguyen"},"content":"        String example \u003d \"john@example.com\";"},{"lineNumber":32,"author":{"gitID":"deeheenguyen"},"content":"        Email email \u003d new Email(example);"},{"lineNumber":33,"author":{"gitID":"deeheenguyen"},"content":"        ViewCommand expectedViewCommand \u003d"},{"lineNumber":34,"author":{"gitID":"deeheenguyen"},"content":"                new ViewCommand(new EmailFilter(email));"},{"lineNumber":35,"author":{"gitID":"deeheenguyen"},"content":"        assertParseSuccess(parser, \"john@example.com\", expectedViewCommand);"},{"lineNumber":36,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"deeheenguyen"},"content":"}"}],"authorContributionMap":{"deeheenguyen":37}},{"path":"src/test/java/seedu/address/logic/parser/FacebookPostCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":7,"author":{"gitID":"deeheenguyen"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":9,"author":{"gitID":"tiny767"},"content":"import seedu.address.logic.commands.FacebookPostCommand;"},{"lineNumber":10,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":11,"author":{"gitID":"tiny767"},"content":"//@@author tiny767"},{"lineNumber":12,"author":{"gitID":"tiny767"},"content":"public class FacebookPostCommandParserTest {"},{"lineNumber":13,"author":{"gitID":"tiny767"},"content":"    private FacebookPostCommandParser parser \u003d new FacebookPostCommandParser();"},{"lineNumber":14,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":15,"author":{"gitID":"tiny767"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"tiny767"},"content":"    public void parse_validArgs_success() {"},{"lineNumber":17,"author":{"gitID":"tiny767"},"content":"        assertParseSuccess(parser, FacebookPostCommand.EXAMPLE_POST,"},{"lineNumber":18,"author":{"gitID":"tiny767"},"content":"                new FacebookPostCommand(FacebookPostCommand.EXAMPLE_POST));"},{"lineNumber":19,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":21,"author":{"gitID":"tiny767"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"tiny767"},"content":"    public void parse_invalidArgs_failure() {"},{"lineNumber":23,"author":{"gitID":"tiny767"},"content":"        assertParseFailure(parser, \" \","},{"lineNumber":24,"author":{"gitID":"tiny767"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FacebookPostCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"tiny767"},"content":"}"}],"authorContributionMap":{"deeheenguyen":3,"-":5,"tiny767":18}},{"path":"src/test/java/seedu/address/logic/commands/ThemeCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"tiny767"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":3,"author":{"gitID":"tiny767"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"tiny767"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"tiny767"},"content":"import static seedu.address.logic.commands.ThemeCommand.DARK_THEME;"},{"lineNumber":6,"author":{"gitID":"tiny767"},"content":"import static seedu.address.logic.commands.ThemeCommand.LIGHT_THEME;"},{"lineNumber":7,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":8,"author":{"gitID":"tiny767"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":10,"author":{"gitID":"tiny767"},"content":"//@@author tiny767"},{"lineNumber":11,"author":{"gitID":"tiny767"},"content":"public class ThemeCommandTest {"},{"lineNumber":12,"author":{"gitID":"tiny767"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"tiny767"},"content":"    public void equals() {"},{"lineNumber":14,"author":{"gitID":"tiny767"},"content":"        final ThemeCommand darkThemeCommand \u003d new ThemeCommand(DARK_THEME);"},{"lineNumber":15,"author":{"gitID":"tiny767"},"content":"        final ThemeCommand lightThemeCommand \u003d new ThemeCommand(LIGHT_THEME);"},{"lineNumber":16,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":17,"author":{"gitID":"tiny767"},"content":"        // same object -\u003e true"},{"lineNumber":18,"author":{"gitID":"tiny767"},"content":"        assertTrue(darkThemeCommand.equals(darkThemeCommand));"},{"lineNumber":19,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":20,"author":{"gitID":"tiny767"},"content":"        // same value -\u003e true"},{"lineNumber":21,"author":{"gitID":"tiny767"},"content":"        ThemeCommand anotherLightThemeCommand \u003d new ThemeCommand(LIGHT_THEME);"},{"lineNumber":22,"author":{"gitID":"tiny767"},"content":"        assertTrue(lightThemeCommand.equals(anotherLightThemeCommand));"},{"lineNumber":23,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":24,"author":{"gitID":"tiny767"},"content":"        // same value -\u003e true"},{"lineNumber":25,"author":{"gitID":"tiny767"},"content":"        ThemeCommand anotherDarkThemeCommand \u003d new ThemeCommand(DARK_THEME);"},{"lineNumber":26,"author":{"gitID":"tiny767"},"content":"        assertTrue(darkThemeCommand.equals(anotherDarkThemeCommand));"},{"lineNumber":27,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":28,"author":{"gitID":"tiny767"},"content":"        // different value -\u003e false"},{"lineNumber":29,"author":{"gitID":"tiny767"},"content":"        assertFalse(darkThemeCommand.equals(lightThemeCommand));"},{"lineNumber":30,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":31,"author":{"gitID":"tiny767"},"content":"        // different type -\u003e false"},{"lineNumber":32,"author":{"gitID":"tiny767"},"content":"        assertFalse(darkThemeCommand.equals(1));"},{"lineNumber":33,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":34,"author":{"gitID":"tiny767"},"content":"        // null -\u003e false"},{"lineNumber":35,"author":{"gitID":"tiny767"},"content":"        assertFalse(darkThemeCommand.equals(null));"},{"lineNumber":36,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":37,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"tiny767"},"content":"}"}],"authorContributionMap":{"tiny767":38}},{"path":"src/test/java/seedu/address/logic/parser/ArgumentWithOptionTest.java","lines":[{"lineNumber":1,"author":{"gitID":"anh2111"},"content":"// @@author anh2111"},{"lineNumber":2,"author":{"gitID":"anh2111"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":4,"author":{"gitID":"anh2111"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"anh2111"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"anh2111"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":8,"author":{"gitID":"anh2111"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":10,"author":{"gitID":"anh2111"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":12,"author":{"gitID":"anh2111"},"content":"public class ArgumentWithOptionTest {"},{"lineNumber":13,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":14,"author":{"gitID":"anh2111"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"anh2111"},"content":"    public void argumentWithOption_inputArgsWithoutOptions_success() throws ParseException {"},{"lineNumber":16,"author":{"gitID":"anh2111"},"content":"        String inputArgs \u003d \"n/Anh t/Software\";"},{"lineNumber":17,"author":{"gitID":"anh2111"},"content":"        ArgumentWithOption args \u003d new ArgumentWithOption(inputArgs);"},{"lineNumber":18,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":19,"author":{"gitID":"anh2111"},"content":"        assertFalse(args.isOption(\"add-tag\"));"},{"lineNumber":20,"author":{"gitID":"anh2111"},"content":"        assertEquals(inputArgs, args.getArgs());"},{"lineNumber":21,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":23,"author":{"gitID":"anh2111"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"anh2111"},"content":"    public void argumentWithOption_inputArgsWithSingleOption_success() throws ParseException {"},{"lineNumber":25,"author":{"gitID":"anh2111"},"content":"        String inputArgs \u003d \"-add-tag t/Anh t/Interview t/Screening\";"},{"lineNumber":26,"author":{"gitID":"anh2111"},"content":"        String expectedArgs \u003d \" t/Anh t/Interview t/Screening\";"},{"lineNumber":27,"author":{"gitID":"anh2111"},"content":"        String expectedOption \u003d \"add-tag\";"},{"lineNumber":28,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":29,"author":{"gitID":"anh2111"},"content":"        ArgumentWithOption args \u003d new ArgumentWithOption(inputArgs);"},{"lineNumber":30,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":31,"author":{"gitID":"anh2111"},"content":"        assertEquals(expectedArgs, args.getArgs());"},{"lineNumber":32,"author":{"gitID":"anh2111"},"content":"        assertTrue(args.isOption(expectedOption));"},{"lineNumber":33,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"anh2111"},"content":"}"},{"lineNumber":35,"author":{"gitID":"anh2111"},"content":"// @@author"}],"authorContributionMap":{"anh2111":35}},{"path":"src/test/java/seedu/address/logic/parser/RemarkCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":7,"author":{"gitID":"deeheenguyen"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":9,"author":{"gitID":"tiny767"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"tiny767"},"content":"import seedu.address.logic.commands.RemarkCommand;"},{"lineNumber":11,"author":{"gitID":"tiny767"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":12,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":13,"author":{"gitID":"tiny767"},"content":"//@@author tiny767"},{"lineNumber":14,"author":{"gitID":"tiny767"},"content":"public class RemarkCommandParserTest {"},{"lineNumber":15,"author":{"gitID":"tiny767"},"content":"    private RemarkCommandParser parser \u003d new RemarkCommandParser();"},{"lineNumber":16,"author":{"gitID":"tiny767"},"content":"    private final String emptyRemark \u003d \"\";"},{"lineNumber":17,"author":{"gitID":"tiny767"},"content":"    private final String nonEmptyRemark \u003d \"some remark\";"},{"lineNumber":18,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":19,"author":{"gitID":"tiny767"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"tiny767"},"content":"    public void parse_validArgs_success() throws Exception {"},{"lineNumber":21,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":22,"author":{"gitID":"tiny767"},"content":"        //has index, new remark is non-empty"},{"lineNumber":23,"author":{"gitID":"tiny767"},"content":"        assertParseSuccess(parser, \"1 r/\"  + nonEmptyRemark,"},{"lineNumber":24,"author":{"gitID":"tiny767"},"content":"            new RemarkCommand(Index.fromOneBased(1), new Remark(nonEmptyRemark)));"},{"lineNumber":25,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":26,"author":{"gitID":"tiny767"},"content":"        //has index, new remark is empty i.e. delete remark"},{"lineNumber":27,"author":{"gitID":"tiny767"},"content":"        assertParseSuccess(parser, \"1 r/\" + emptyRemark,"},{"lineNumber":28,"author":{"gitID":"tiny767"},"content":"            new RemarkCommand(Index.fromOneBased(1), new Remark(emptyRemark)));"},{"lineNumber":29,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":31,"author":{"gitID":"tiny767"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"tiny767"},"content":"    public void parse_missingIndex_failure() throws Exception {"},{"lineNumber":33,"author":{"gitID":"tiny767"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemarkCommand.MESSAGE_USAGE);"},{"lineNumber":34,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":35,"author":{"gitID":"tiny767"},"content":"        //no index"},{"lineNumber":36,"author":{"gitID":"tiny767"},"content":"        assertParseFailure(parser, nonEmptyRemark , expectedMessage);"},{"lineNumber":37,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":38,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"tiny767"},"content":"}"}],"authorContributionMap":{"deeheenguyen":3,"-":5,"tiny767":31}},{"path":"src/test/java/seedu/address/logic/parser/DeleteInterviewCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"deeheenguyen"},"content":"//@@author deeheenguyen"},{"lineNumber":2,"author":{"gitID":"deeheenguyen"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":4,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":9,"author":{"gitID":"deeheenguyen"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":11,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.logic.commands.DeleteInterviewCommand;"},{"lineNumber":12,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":15,"author":{"gitID":"deeheenguyen"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":16,"author":{"gitID":"deeheenguyen"},"content":" * same path through the DeleteCommand, and therefore we test only one of them."},{"lineNumber":17,"author":{"gitID":"deeheenguyen"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":18,"author":{"gitID":"deeheenguyen"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":19,"author":{"gitID":"deeheenguyen"},"content":" */"},{"lineNumber":20,"author":{"gitID":"deeheenguyen"},"content":"public class DeleteInterviewCommandParserTest {"},{"lineNumber":21,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":22,"author":{"gitID":"deeheenguyen"},"content":"    private DeleteInterviewCommandParser parser \u003d new DeleteInterviewCommandParser();"},{"lineNumber":23,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"deeheenguyen"},"content":"    public void parse_validArgs_returnsDeleteCommand() {"},{"lineNumber":26,"author":{"gitID":"deeheenguyen"},"content":"        assertParseSuccess(parser, \"1\", new DeleteInterviewCommand(INDEX_FIRST_PERSON));"},{"lineNumber":27,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":29,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"deeheenguyen"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":31,"author":{"gitID":"deeheenguyen"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":32,"author":{"gitID":"deeheenguyen"},"content":"                DeleteInterviewCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"deeheenguyen"},"content":"}"}],"authorContributionMap":{"deeheenguyen":34}},{"path":"src/test/java/seedu/address/logic/commands/FacebookLoginCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"tiny767"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":3,"author":{"gitID":"tiny767"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"tiny767"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":6,"author":{"gitID":"tiny767"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":8,"author":{"gitID":"tiny767"},"content":"//@@author tiny767"},{"lineNumber":9,"author":{"gitID":"tiny767"},"content":"public class FacebookLoginCommandTest {"},{"lineNumber":10,"author":{"gitID":"tiny767"},"content":"    @Test"},{"lineNumber":11,"author":{"gitID":"tiny767"},"content":"    public void equals() {"},{"lineNumber":12,"author":{"gitID":"tiny767"},"content":"        FacebookLoginCommand fbLoginCommand \u003d new FacebookLoginCommand();"},{"lineNumber":13,"author":{"gitID":"tiny767"},"content":"        // same object -\u003e returns true"},{"lineNumber":14,"author":{"gitID":"tiny767"},"content":"        assertTrue(fbLoginCommand.equals(fbLoginCommand));"},{"lineNumber":15,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":16,"author":{"gitID":"tiny767"},"content":"        // same values -\u003e returns true"},{"lineNumber":17,"author":{"gitID":"tiny767"},"content":"        FacebookLoginCommand anotherFbLoginCommand \u003d new FacebookLoginCommand();"},{"lineNumber":18,"author":{"gitID":"tiny767"},"content":"        assertTrue(fbLoginCommand.equals(anotherFbLoginCommand));"},{"lineNumber":19,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":20,"author":{"gitID":"tiny767"},"content":"        // different types -\u003e returns false"},{"lineNumber":21,"author":{"gitID":"tiny767"},"content":"        assertFalse(fbLoginCommand.equals(1));"},{"lineNumber":22,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":23,"author":{"gitID":"tiny767"},"content":"        // null -\u003e returns false"},{"lineNumber":24,"author":{"gitID":"tiny767"},"content":"        assertFalse(fbLoginCommand.equals(null));"},{"lineNumber":25,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":26,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"tiny767"},"content":"}"}],"authorContributionMap":{"tiny767":27}},{"path":"src/test/java/seedu/address/logic/commands/ViewCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"deeheenguyen"},"content":"//author@@ deeheenguyen"},{"lineNumber":2,"author":{"gitID":"deeheenguyen"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":4,"author":{"gitID":"deeheenguyen"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":8,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":19,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.person.EmailFilter;"},{"lineNumber":20,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":21,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":22,"author":{"gitID":"deeheenguyen"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"deeheenguyen"},"content":" * Contains integration tests (interaction with the Model) for {@code ViewCommand}."},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":" */"},{"lineNumber":25,"author":{"gitID":"deeheenguyen"},"content":"public class ViewCommandTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":30,"author":{"gitID":"deeheenguyen"},"content":"        EmailFilter firstPredicate \u003d"},{"lineNumber":31,"author":{"gitID":"deeheenguyen"},"content":"                new EmailFilter(new Email(\"abc@example.com\"));"},{"lineNumber":32,"author":{"gitID":"deeheenguyen"},"content":"        EmailFilter secondPredicate \u003d"},{"lineNumber":33,"author":{"gitID":"deeheenguyen"},"content":"                new EmailFilter(new Email(\"def@example.com\"));"},{"lineNumber":34,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":35,"author":{"gitID":"deeheenguyen"},"content":"        ViewCommand findFirstCommand \u003d new ViewCommand(firstPredicate);"},{"lineNumber":36,"author":{"gitID":"deeheenguyen"},"content":"        ViewCommand findSecondCommand \u003d new ViewCommand(secondPredicate);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"deeheenguyen"},"content":"    public void executeTest() {"},{"lineNumber":52,"author":{"gitID":"deeheenguyen"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":53,"author":{"gitID":"deeheenguyen"},"content":"        ViewCommand command \u003d prepareCommand(\"no@example.com\");"},{"lineNumber":54,"author":{"gitID":"deeheenguyen"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":55,"author":{"gitID":"deeheenguyen"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":56,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":58,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"deeheenguyen"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":60,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"deeheenguyen"},"content":"    private ViewCommand prepareCommand(String userInput) {"},{"lineNumber":62,"author":{"gitID":"deeheenguyen"},"content":"        ViewCommand command \u003d"},{"lineNumber":63,"author":{"gitID":"deeheenguyen"},"content":"                    new ViewCommand(new EmailFilter(new Email(userInput)));"},{"lineNumber":64,"author":{"gitID":"deeheenguyen"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":65,"author":{"gitID":"deeheenguyen"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Email(\" \"));"},{"lineNumber":66,"author":{"gitID":"deeheenguyen"},"content":"        return command;"},{"lineNumber":67,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":69,"author":{"gitID":"deeheenguyen"},"content":"}"},{"lineNumber":70,"author":{"gitID":"deeheenguyen"},"content":"//author@@ deeheenguyen"}],"authorContributionMap":{"deeheenguyen":44,"-":26}},{"path":"src/test/java/seedu/address/logic/commands/FacebookPostCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"tiny767"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":3,"author":{"gitID":"tiny767"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"tiny767"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":6,"author":{"gitID":"tiny767"},"content":"import org.junit.Rule;"},{"lineNumber":7,"author":{"gitID":"tiny767"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"tiny767"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":9,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":10,"author":{"gitID":"tiny767"},"content":"//@@author tiny767"},{"lineNumber":11,"author":{"gitID":"tiny767"},"content":"public class FacebookPostCommandTest {"},{"lineNumber":12,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":13,"author":{"gitID":"tiny767"},"content":"    @Rule"},{"lineNumber":14,"author":{"gitID":"tiny767"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":15,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":16,"author":{"gitID":"tiny767"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"tiny767"},"content":"    public void constructor_nullMessage_throwsNullPointerException() {"},{"lineNumber":18,"author":{"gitID":"tiny767"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":19,"author":{"gitID":"tiny767"},"content":"        new FacebookPostCommand(null);"},{"lineNumber":20,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":22,"author":{"gitID":"tiny767"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"tiny767"},"content":"    public void equals() {"},{"lineNumber":24,"author":{"gitID":"tiny767"},"content":"        FacebookPostCommand fbPostCommand \u003d new FacebookPostCommand(\"some message\");"},{"lineNumber":25,"author":{"gitID":"tiny767"},"content":"        // same object -\u003e returns true"},{"lineNumber":26,"author":{"gitID":"tiny767"},"content":"        assertTrue(fbPostCommand.equals(fbPostCommand));"},{"lineNumber":27,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":28,"author":{"gitID":"tiny767"},"content":"        // same values -\u003e returns true"},{"lineNumber":29,"author":{"gitID":"tiny767"},"content":"        FacebookPostCommand sameFbPostCommand \u003d new FacebookPostCommand(\"some message\");"},{"lineNumber":30,"author":{"gitID":"tiny767"},"content":"        assertTrue(fbPostCommand.equals(sameFbPostCommand));"},{"lineNumber":31,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":32,"author":{"gitID":"tiny767"},"content":"        // different types -\u003e returns false"},{"lineNumber":33,"author":{"gitID":"tiny767"},"content":"        assertFalse(fbPostCommand.equals(1));"},{"lineNumber":34,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":35,"author":{"gitID":"tiny767"},"content":"        // null -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"tiny767"},"content":"        assertFalse(fbPostCommand.equals(null));"},{"lineNumber":37,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":38,"author":{"gitID":"tiny767"},"content":"        FacebookPostCommand differentPostCommand \u003d new FacebookPostCommand(\"some other message\");"},{"lineNumber":39,"author":{"gitID":"tiny767"},"content":"        // different content -\u003e return false"},{"lineNumber":40,"author":{"gitID":"tiny767"},"content":"        assertFalse(fbPostCommand.equals(differentPostCommand));"},{"lineNumber":41,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":42,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":44,"author":{"gitID":"tiny767"},"content":"}"}],"authorContributionMap":{"tiny767":44}},{"path":"src/test/java/seedu/address/logic/commands/MatchJobCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showJobAtIndex;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_JOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalJobs.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"ChengSashankh"},"content":"//@@author ChengSashankh"},{"lineNumber":18,"author":{"gitID":"ChengSashankh"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"ChengSashankh"},"content":" * Contains integration tests (interaction with the Model) and unit tests for MatchJobCommand."},{"lineNumber":20,"author":{"gitID":"ChengSashankh"},"content":" */"},{"lineNumber":21,"author":{"gitID":"ChengSashankh"},"content":"public class MatchJobCommandTest {"},{"lineNumber":22,"author":{"gitID":"ChengSashankh"},"content":"    private Model model;"},{"lineNumber":23,"author":{"gitID":"ChengSashankh"},"content":"    private Model expectedModel;"},{"lineNumber":24,"author":{"gitID":"ChengSashankh"},"content":"    private ListJobsCommand listJobsCommand;"},{"lineNumber":25,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":26,"author":{"gitID":"ChengSashankh"},"content":"    @Before"},{"lineNumber":27,"author":{"gitID":"ChengSashankh"},"content":"    public void setUp() {"},{"lineNumber":28,"author":{"gitID":"ChengSashankh"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":29,"author":{"gitID":"ChengSashankh"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":31,"author":{"gitID":"ChengSashankh"},"content":"        listJobsCommand \u003d new ListJobsCommand();"},{"lineNumber":32,"author":{"gitID":"ChengSashankh"},"content":"        listJobsCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":33,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":35,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"ChengSashankh"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":37,"author":{"gitID":"ChengSashankh"},"content":"        assertCommandSuccess(listJobsCommand, model, ListJobsCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":38,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":40,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"ChengSashankh"},"content":"    public void execute_listIsFiltered_showsEverything() {"},{"lineNumber":42,"author":{"gitID":"ChengSashankh"},"content":"        showJobAtIndex(model, INDEX_FIRST_JOB);"},{"lineNumber":43,"author":{"gitID":"ChengSashankh"},"content":"        assertCommandSuccess(listJobsCommand, model, ListJobsCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":44,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"ChengSashankh"},"content":"}"},{"lineNumber":46,"author":{"gitID":"ChengSashankh"},"content":"//@@author"}],"authorContributionMap":{"ChengSashankh":30,"-":16}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":7,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":9,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INTERVIEW;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_JOBTITLE;"},{"lineNumber":11,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LINK;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SKILLS;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.Interview;"},{"lineNumber":30,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.InterviewMatchInterviewee;"},{"lineNumber":31,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.exceptions.InterviewNotFoundException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.job.JobMatchesKeywordsPredicate;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.person.PersonContainsKeywordsPredicate;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditJobDescriptorBuilder;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":41,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":42,"author":{"gitID":"-"},"content":" */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":53,"author":{"gitID":"tiny767"},"content":"    public static final String VALID_REMARK_AMY \u003d \"Has a pet\";"},{"lineNumber":54,"author":{"gitID":"tiny767"},"content":"    public static final String VALID_REMARK_BOB \u003d \"Comes from NUS\";"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_NONEXISTENT \u003d \"nonexistent\";"},{"lineNumber":58,"author":{"gitID":"deeheenguyen"},"content":"    public static final String VALID_LINK_AMY \u003d \"https://www.google.com.sg/\";"},{"lineNumber":59,"author":{"gitID":"deeheenguyen"},"content":"    public static final String VALID_LINK_BOB \u003d \"https://www.google.com.sg/\";"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String VALID_SKILL_AMY \u003d \"CSS\";"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final String VALID_SKILL_BOB \u003d \"CSS\";"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String VALID_JOBTITLE_FE \u003d \"Frontend Engineer\";"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String VALID_JOBTITLE_BE \u003d \"Backend Engineer\";"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final String VALID_LOCATION_FE \u003d \"Bayfront\";"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final String VALID_LOCATION_BE \u003d \"Kent Ridge\";"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static final String VALID_SKILL_FE \u003d \"HTML, CSS, JavaScript\";"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static final String VALID_SKILL_BE \u003d \"JavaScript, Python, Java\";"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FE \u003d \"FreshGrad\";"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_BE \u003d \"Intern\";"},{"lineNumber":71,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":82,"author":{"gitID":"deeheenguyen"},"content":"    public static final String LINK_DESC_AMY \u003d \" \" + PREFIX_LINK + VALID_LINK_AMY;"},{"lineNumber":83,"author":{"gitID":"deeheenguyen"},"content":"    public static final String LINK_DESC_BOB \u003d \" \" + PREFIX_LINK + VALID_LINK_BOB;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public static final String SKILL_DESC_AMY \u003d \" \" + PREFIX_SKILLS + VALID_SKILL_AMY;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public static final String SKILL_DESC_BOB \u003d \" \" + PREFIX_SKILLS + VALID_SKILL_BOB;"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public static final String JOBTITLE_DESC_FE \u003d \" \" + PREFIX_JOBTITLE + VALID_JOBTITLE_FE;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public static final String JOBTITLE_DESC_BE \u003d \" \" + PREFIX_JOBTITLE + VALID_JOBTITLE_BE;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public static final String LOCATION_DESC_FE \u003d \" \" + PREFIX_LOCATION + VALID_LOCATION_FE;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public static final String LOCATION_DESC_BE \u003d \" \" + PREFIX_LOCATION + VALID_LOCATION_BE;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public static final String SKILL_DESC_FE \u003d \" \" + PREFIX_SKILLS + VALID_SKILL_FE;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public static final String SKILL_DESC_BE \u003d \" \" + PREFIX_SKILLS + VALID_SKILL_BE;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FE \u003d \" \" + PREFIX_TAG + VALID_TAG_FE;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_BE \u003d \" \" + PREFIX_TAG + VALID_TAG_BE;"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":101,"author":{"gitID":"deeheenguyen"},"content":"    public static final String INVALID_LINK \u003d \" \" + PREFIX_LINK + \"abc.com\"; // \u0027should start with https\u0027"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    // TODO: Create correct invalid descriptors"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public static final String INVALID_JOBTITLE_DESC \u003d \" \" + PREFIX_JOBTITLE + \"SoftwareEngineer%\";"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    // \u0027%\u0027 is not allowed in job title"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public static final String INVALID_LOCATION_DESC \u003d \" \" + PREFIX_LOCATION + \" \"; // Location shouls not be empty"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public static final String INVALID_SKILL_DESC \u003d  \" \" + PREFIX_SKILLS + \"\"; // Alphanumeric skills are expected"},{"lineNumber":108,"author":{"gitID":"deeheenguyen"},"content":"    public static final String VALID_INTERVIEW_TITLE_SE \u003d \"SE INTERVIEW\";"},{"lineNumber":109,"author":{"gitID":"deeheenguyen"},"content":"    public static final String VALID_INTERVIEWEE_SE \u003d \"David\";"},{"lineNumber":110,"author":{"gitID":"deeheenguyen"},"content":"    public static final String VALID_INTERVIEW_LOCATION_SE \u003d \"NUS\";"},{"lineNumber":111,"author":{"gitID":"deeheenguyen"},"content":"    public static final String VALID_DATE_SE \u003d \"01.01.2018\";"},{"lineNumber":112,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":113,"author":{"gitID":"deeheenguyen"},"content":"    public static final String INTERVIEW_TITLE_DESC_SE \u003d \" \" + PREFIX_INTERVIEW + VALID_INTERVIEW_TITLE_SE;"},{"lineNumber":114,"author":{"gitID":"deeheenguyen"},"content":"    public static final String INTERVIEWEE_DESC_SE \u003d \" \" + PREFIX_NAME + VALID_INTERVIEWEE_SE;"},{"lineNumber":115,"author":{"gitID":"deeheenguyen"},"content":"    public static final String DATE_DESC_SE \u003d \" \" + PREFIX_DATE + VALID_DATE_SE;"},{"lineNumber":116,"author":{"gitID":"deeheenguyen"},"content":"    public static final String INTERVIEW_LOCATION_DESC_SE \u003d \" \" + PREFIX_LOCATION + VALID_INTERVIEW_LOCATION_SE;"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public static final EditJobCommand.EditJobDescriptor DESC_FE;"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public static final EditJobCommand.EditJobDescriptor DESC_BE;"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":129,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":130,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":133,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        DESC_FE \u003d new EditJobDescriptorBuilder().withJobTitle(VALID_JOBTITLE_FE).withLocation(VALID_LOCATION_FE)"},{"lineNumber":135,"author":{"gitID":"-"},"content":"                .withSkills(VALID_SKILL_FE).withTags(VALID_TAG_FE).build();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        DESC_BE \u003d new EditJobDescriptorBuilder().withJobTitle(VALID_JOBTITLE_BE).withLocation(VALID_LOCATION_BE)"},{"lineNumber":137,"author":{"gitID":"-"},"content":"                .withSkills(VALID_SKILL_BE).withTags(VALID_TAG_BE).build();"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":165,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":181,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new PersonContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the job at the given {@code targetIndex} in the"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":195,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    public static void showJobAtIndex(Model model, Index targetIndex) {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredJobList().size());"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        Job job \u003d model.getFilteredJobList().get(targetIndex.getZeroBased());"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d job.getJobTitle().fullTitle.split(\"\\\\s+\");"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        model.updateFilteredJobList(new JobMatchesKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredJobList().size());"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":208,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":219,"author":{"gitID":"deeheenguyen"},"content":"     * Updates {@code model}\u0027s filtered list to show only the interview at the given {@code targetIndex} in the"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":221,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":222,"author":{"gitID":"deeheenguyen"},"content":"    public static void showInterviewAtIndex(Model model, Index targetIndex) {"},{"lineNumber":223,"author":{"gitID":"deeheenguyen"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredInterviewList().size());"},{"lineNumber":224,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":225,"author":{"gitID":"deeheenguyen"},"content":"        Interview interview \u003d model.getFilteredInterviewList().get(targetIndex.getZeroBased());"},{"lineNumber":226,"author":{"gitID":"deeheenguyen"},"content":"        final String splitName \u003d interview.getInterviewee().fullName;"},{"lineNumber":227,"author":{"gitID":"deeheenguyen"},"content":"        model.updateFilteredInterviewList(new InterviewMatchInterviewee(splitName));"},{"lineNumber":228,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":229,"author":{"gitID":"deeheenguyen"},"content":"        assertEquals(1, model.getFilteredInterviewList().size());"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":234,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":235,"author":{"gitID":"deeheenguyen"},"content":"    public static void deleteFirstInterview (Model model) {"},{"lineNumber":236,"author":{"gitID":"deeheenguyen"},"content":"        Interview firstInterview \u003d model.getFilteredInterviewList().get(0);"},{"lineNumber":237,"author":{"gitID":"deeheenguyen"},"content":"        try {"},{"lineNumber":238,"author":{"gitID":"deeheenguyen"},"content":"            model.deleteInterview(firstInterview);"},{"lineNumber":239,"author":{"gitID":"deeheenguyen"},"content":"        } catch (InterviewNotFoundException pnfe) {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":242,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":246,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":254,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":255,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"deeheenguyen":35,"-":223,"tiny767":3}},{"path":"src/test/java/seedu/address/logic/commands/FindInterviewCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"deeheenguyen"},"content":"//@@author deeheenguyen"},{"lineNumber":2,"author":{"gitID":"deeheenguyen"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":4,"author":{"gitID":"deeheenguyen"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"deeheenguyen"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INTERVIEWS_LISTED_OVERVIEW;"},{"lineNumber":8,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.testutil.TypicalInterviews.SE_INTERVIEW;"},{"lineNumber":9,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.testutil.TypicalInterviews.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":11,"author":{"gitID":"deeheenguyen"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"deeheenguyen"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":15,"author":{"gitID":"deeheenguyen"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"deeheenguyen"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"deeheenguyen"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":19,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.Interview;"},{"lineNumber":26,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.InterviewMatchInterviewee;"},{"lineNumber":27,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":28,"author":{"gitID":"deeheenguyen"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"deeheenguyen"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":30,"author":{"gitID":"deeheenguyen"},"content":" */"},{"lineNumber":31,"author":{"gitID":"deeheenguyen"},"content":"public class FindInterviewCommandTest {"},{"lineNumber":32,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":33,"author":{"gitID":"deeheenguyen"},"content":"    @Rule"},{"lineNumber":34,"author":{"gitID":"deeheenguyen"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":35,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":36,"author":{"gitID":"deeheenguyen"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":38,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"deeheenguyen"},"content":"    public void equals() {"},{"lineNumber":40,"author":{"gitID":"deeheenguyen"},"content":"        InterviewMatchInterviewee firstPredicate \u003d"},{"lineNumber":41,"author":{"gitID":"deeheenguyen"},"content":"                new InterviewMatchInterviewee (\"first\");"},{"lineNumber":42,"author":{"gitID":"deeheenguyen"},"content":"        InterviewMatchInterviewee secondPredicate \u003d"},{"lineNumber":43,"author":{"gitID":"deeheenguyen"},"content":"                new InterviewMatchInterviewee(\"second\");"},{"lineNumber":44,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":45,"author":{"gitID":"deeheenguyen"},"content":"        FindInterviewCommand findFirstCommand \u003d new FindInterviewCommand(firstPredicate);"},{"lineNumber":46,"author":{"gitID":"deeheenguyen"},"content":"        FindInterviewCommand findSecondCommand \u003d new FindInterviewCommand(secondPredicate);"},{"lineNumber":47,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":48,"author":{"gitID":"deeheenguyen"},"content":"        // same object -\u003e returns true"},{"lineNumber":49,"author":{"gitID":"deeheenguyen"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":50,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":51,"author":{"gitID":"deeheenguyen"},"content":"        // same values -\u003e returns true"},{"lineNumber":52,"author":{"gitID":"deeheenguyen"},"content":"        FindInterviewCommand findFirstCommandCopy \u003d new FindInterviewCommand(firstPredicate);"},{"lineNumber":53,"author":{"gitID":"deeheenguyen"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":54,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":55,"author":{"gitID":"deeheenguyen"},"content":"        // different types -\u003e returns false"},{"lineNumber":56,"author":{"gitID":"deeheenguyen"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":57,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":58,"author":{"gitID":"deeheenguyen"},"content":"        // null -\u003e returns false"},{"lineNumber":59,"author":{"gitID":"deeheenguyen"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":60,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":61,"author":{"gitID":"deeheenguyen"},"content":"        // different person -\u003e returns false"},{"lineNumber":62,"author":{"gitID":"deeheenguyen"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":63,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":65,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"deeheenguyen"},"content":"    public void execute_zeroKeywords_noInterviewFound() {"},{"lineNumber":67,"author":{"gitID":"deeheenguyen"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INTERVIEWS_LISTED_OVERVIEW, 0);"},{"lineNumber":68,"author":{"gitID":"deeheenguyen"},"content":"        FindInterviewCommand command \u003d prepareCommand(\" \");"},{"lineNumber":69,"author":{"gitID":"deeheenguyen"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":70,"author":{"gitID":"deeheenguyen"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":71,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":73,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"deeheenguyen"},"content":"    public void execute_oneKeyword_interviewFound() {"},{"lineNumber":75,"author":{"gitID":"deeheenguyen"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INTERVIEWS_LISTED_OVERVIEW, 1);"},{"lineNumber":76,"author":{"gitID":"deeheenguyen"},"content":"        FindInterviewCommand command \u003d prepareCommand(\"Kelvin\");"},{"lineNumber":77,"author":{"gitID":"deeheenguyen"},"content":"        assertCommandSuccess(command, expectedMessage,"},{"lineNumber":78,"author":{"gitID":"deeheenguyen"},"content":"                Arrays.asList(SE_INTERVIEW));"},{"lineNumber":79,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":81,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"deeheenguyen"},"content":"     * Parses {@code userInput} into a {@code FindInterviewCommand}."},{"lineNumber":83,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"deeheenguyen"},"content":"    private FindInterviewCommand prepareCommand(String userInput) {"},{"lineNumber":85,"author":{"gitID":"deeheenguyen"},"content":"        FindInterviewCommand command \u003d"},{"lineNumber":86,"author":{"gitID":"deeheenguyen"},"content":"                new FindInterviewCommand(new InterviewMatchInterviewee(userInput));"},{"lineNumber":87,"author":{"gitID":"deeheenguyen"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":88,"author":{"gitID":"deeheenguyen"},"content":"        return command;"},{"lineNumber":89,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":91,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"deeheenguyen"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":93,"author":{"gitID":"deeheenguyen"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":94,"author":{"gitID":"deeheenguyen"},"content":"     *     - the {@code FilteredList\u003cInterview\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":95,"author":{"gitID":"deeheenguyen"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":96,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"deeheenguyen"},"content":"    private void assertCommandSuccess(FindInterviewCommand command, String expectedMessage,"},{"lineNumber":98,"author":{"gitID":"deeheenguyen"},"content":"                                      List\u003cInterview\u003e expectedList) {"},{"lineNumber":99,"author":{"gitID":"deeheenguyen"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":100,"author":{"gitID":"deeheenguyen"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":101,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":102,"author":{"gitID":"deeheenguyen"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":103,"author":{"gitID":"deeheenguyen"},"content":"        assertEquals(expectedList, model.getFilteredInterviewList());"},{"lineNumber":104,"author":{"gitID":"deeheenguyen"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":105,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"deeheenguyen"},"content":"}"}],"authorContributionMap":{"deeheenguyen":106}},{"path":"src/test/java/seedu/address/logic/commands/SaveReportCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":23,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.Interview;"},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.exceptions.DuplicateInterviewException;"},{"lineNumber":25,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.exceptions.InterviewNotFoundException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.job.exceptions.DuplicateJobException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.job.exceptions.JobNotFoundException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.report.Report;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.testutil.ReportBuilder;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"public class SaveReportCommandTest {"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void constructor_nullReport_throwsNullPointerException() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        new SaveReportCommand(null);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void execute_reportAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        ModelStubAcceptingReportAdded modelStub \u003d new ModelStubAcceptingReportAdded();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        Tag validTag \u003d new Tag(\"validTag\");"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Report validReport \u003d new ReportBuilder().build();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getSaveReportCommand(validTag, modelStub).execute();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertEquals(String.format(SaveReportCommand.MESSAGE_SUCCESS + validTag.tagName), commandResult.feedbackToUser);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validReport), modelStub.reportsAdded);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        Report screening \u003d new ReportBuilder().withPopulation(\"Screening\").build();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Report interviewing \u003d new ReportBuilder().withPopulation(\"Interviewing\").build();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        SaveReportCommand viewreportScreeningCommand \u003d new SaveReportCommand(new Tag(\"Screening\"));"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        SaveReportCommand viewreportInterviewingCommand \u003d new SaveReportCommand(new Tag(\"Interviewing\"));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertTrue(viewreportScreeningCommand.equals(viewreportScreeningCommand));"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        SaveReportCommand addScreeningCommandCopy \u003d new SaveReportCommand(new Tag(\"Screening\"));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertTrue(viewreportScreeningCommand.equals(addScreeningCommandCopy));"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertFalse(viewreportScreeningCommand.equals(1));"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertFalse(viewreportScreeningCommand.equals(null));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // different report -\u003e returns false"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertFalse(viewreportScreeningCommand.equals(viewreportInterviewingCommand));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Generates a new SaveReportCommand with the details of the given report."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    private SaveReportCommand getSaveReportCommand(Tag population, Model model) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        SaveReportCommand command \u003d new SaveReportCommand(population);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        public void addJob(Job job) throws DuplicateJobException {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"deeheenguyen"},"content":"        @Override"},{"lineNumber":107,"author":{"gitID":"deeheenguyen"},"content":"        public void addInterview(Interview interview) throws DuplicateInterviewException {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"deeheenguyen"},"content":"        @Override"},{"lineNumber":112,"author":{"gitID":"deeheenguyen"},"content":"        public void deleteInterview(Interview target) throws InterviewNotFoundException {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        public void addReport(Report report) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedReport)"},{"lineNumber":140,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        public void updateReport(Tag population) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        public Report getReport() {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        public void refreshReport() {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        public ObservableList\u003cReport\u003e getReportHistory() {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        public void updateFilteredJobList(Predicate\u003cJob\u003e predicate) {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        public ObservableList\u003cJob\u003e getFilteredJobList() {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        public void deleteJob(Job target) throws JobNotFoundException {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        public void updateJob(Job target, Job editedJob)"},{"lineNumber":195,"author":{"gitID":"-"},"content":"                throws DuplicateJobException {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"deeheenguyen"},"content":"        @Override"},{"lineNumber":200,"author":{"gitID":"deeheenguyen"},"content":"        public ObservableList\u003cInterview\u003e getFilteredInterviewList() {"},{"lineNumber":201,"author":{"gitID":"deeheenguyen"},"content":"            fail(\"this method should not be called\");"},{"lineNumber":202,"author":{"gitID":"deeheenguyen"},"content":"            return null;"},{"lineNumber":203,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":204,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":205,"author":{"gitID":"deeheenguyen"},"content":"        @Override"},{"lineNumber":206,"author":{"gitID":"deeheenguyen"},"content":"        public void updateFilteredInterviewList(Predicate\u003cInterview\u003e predicate) {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the report being added."},{"lineNumber":214,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingReportAdded extends ModelStub {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        final ArrayList\u003cReport\u003e reportsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        private Report report;"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        public void updateReport(Tag population) {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"            report \u003d new ReportBuilder().build();"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        public void addReport(Report reportToAdd) {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"            reportsAdded.add(reportToAdd);"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        public Report getReport() {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"            return report;"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"deeheenguyen":17,"-":223}},{"path":"src/test/java/seedu/address/logic/commands/ListInterviewCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"deeheenguyen"},"content":"//@@author deeheenguyen"},{"lineNumber":2,"author":{"gitID":"deeheenguyen"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":4,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showInterviewAtIndex;"},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INTERVIEW;"},{"lineNumber":7,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.testutil.TypicalInterviews.getTypicalAddressBook;"},{"lineNumber":8,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":9,"author":{"gitID":"deeheenguyen"},"content":"import org.junit.Before;"},{"lineNumber":10,"author":{"gitID":"deeheenguyen"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":12,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":16,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":18,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":19,"author":{"gitID":"deeheenguyen"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"deeheenguyen"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListJobsCommand."},{"lineNumber":21,"author":{"gitID":"deeheenguyen"},"content":" */"},{"lineNumber":22,"author":{"gitID":"deeheenguyen"},"content":"public class ListInterviewCommandTest {"},{"lineNumber":23,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":"    private Model model;"},{"lineNumber":25,"author":{"gitID":"deeheenguyen"},"content":"    private Model expectedModel;"},{"lineNumber":26,"author":{"gitID":"deeheenguyen"},"content":"    private ListInterviewCommand listInterviewCommand;"},{"lineNumber":27,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":28,"author":{"gitID":"deeheenguyen"},"content":"    @Before"},{"lineNumber":29,"author":{"gitID":"deeheenguyen"},"content":"    public void setUp() {"},{"lineNumber":30,"author":{"gitID":"deeheenguyen"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":31,"author":{"gitID":"deeheenguyen"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":32,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":33,"author":{"gitID":"deeheenguyen"},"content":"        listInterviewCommand \u003d new ListInterviewCommand();"},{"lineNumber":34,"author":{"gitID":"deeheenguyen"},"content":"        listInterviewCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":35,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":37,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"deeheenguyen"},"content":"    public void execute_interviewListIsNotFiltered_showsSameList() {"},{"lineNumber":39,"author":{"gitID":"deeheenguyen"},"content":"        assertCommandSuccess(listInterviewCommand, model, ListInterviewCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":40,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":42,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"deeheenguyen"},"content":"    public void execute_interviewListIsFiltered_showsEverything() {"},{"lineNumber":44,"author":{"gitID":"deeheenguyen"},"content":"        showInterviewAtIndex(model, INDEX_FIRST_INTERVIEW);"},{"lineNumber":45,"author":{"gitID":"deeheenguyen"},"content":"        assertCommandSuccess(listInterviewCommand, model, ListInterviewCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":46,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"deeheenguyen"},"content":"}"}],"authorContributionMap":{"deeheenguyen":47}},{"path":"src/test/java/seedu/address/logic/commands/RemarkCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"tiny767"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":3,"author":{"gitID":"tiny767"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"tiny767"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"tiny767"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_AMY;"},{"lineNumber":6,"author":{"gitID":"tiny767"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_BOB;"},{"lineNumber":7,"author":{"gitID":"tiny767"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"tiny767"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"tiny767"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":17,"author":{"gitID":"tiny767"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"tiny767"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"tiny767"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":23,"author":{"gitID":"tiny767"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":24,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":25,"author":{"gitID":"tiny767"},"content":"//@@author tiny767"},{"lineNumber":26,"author":{"gitID":"tiny767"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"tiny767"},"content":" * Contains tests for {@code RemarkCommand}"},{"lineNumber":28,"author":{"gitID":"tiny767"},"content":" */"},{"lineNumber":29,"author":{"gitID":"tiny767"},"content":"public class RemarkCommandTest {"},{"lineNumber":30,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":31,"author":{"gitID":"tiny767"},"content":"    private static final String SOME_REMARK \u003d \"some remark\";"},{"lineNumber":32,"author":{"gitID":"tiny767"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":34,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":35,"author":{"gitID":"tiny767"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"tiny767"},"content":"    public void execute_addRemark_success() throws Exception {"},{"lineNumber":37,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":38,"author":{"gitID":"tiny767"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":39,"author":{"gitID":"tiny767"},"content":"        Person remarkedPerson \u003d new PersonBuilder(firstPerson).withRemark(SOME_REMARK).build();"},{"lineNumber":40,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":41,"author":{"gitID":"tiny767"},"content":"        RemarkCommand remarkCommand \u003d makeCommand(Index.fromOneBased(1), SOME_REMARK);"},{"lineNumber":42,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":43,"author":{"gitID":"tiny767"},"content":"        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_ADD_REMARK_SUCCESS, remarkedPerson);"},{"lineNumber":44,"author":{"gitID":"tiny767"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":45,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":46,"author":{"gitID":"tiny767"},"content":"        expectedModel.updatePerson(firstPerson, remarkedPerson);"},{"lineNumber":47,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":48,"author":{"gitID":"tiny767"},"content":"        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"},{"lineNumber":49,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":50,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":52,"author":{"gitID":"tiny767"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"tiny767"},"content":"    public void execute_delRemark_success() throws Exception {"},{"lineNumber":54,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":55,"author":{"gitID":"tiny767"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":56,"author":{"gitID":"tiny767"},"content":"        Person remarkedPerson \u003d new PersonBuilder(firstPerson).withRemark(\"\").build();"},{"lineNumber":57,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":58,"author":{"gitID":"tiny767"},"content":"        RemarkCommand remarkCommand \u003d makeCommand(Index.fromOneBased(1), \"\");"},{"lineNumber":59,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":60,"author":{"gitID":"tiny767"},"content":"        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_DELETE_REMARK_SUCCESS, remarkedPerson);"},{"lineNumber":61,"author":{"gitID":"tiny767"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":62,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":63,"author":{"gitID":"tiny767"},"content":"        expectedModel.updatePerson(firstPerson, remarkedPerson);"},{"lineNumber":64,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":65,"author":{"gitID":"tiny767"},"content":"        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"},{"lineNumber":66,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":67,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":69,"author":{"gitID":"tiny767"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"tiny767"},"content":"    public void equals() throws Exception {"},{"lineNumber":71,"author":{"gitID":"tiny767"},"content":"        final RemarkCommand standardCommand \u003d new RemarkCommand(INDEX_FIRST_PERSON, new Remark(VALID_REMARK_AMY));"},{"lineNumber":72,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":73,"author":{"gitID":"tiny767"},"content":"        // same values -\u003e returns true"},{"lineNumber":74,"author":{"gitID":"tiny767"},"content":"        RemarkCommand commandWithSameValues \u003d new RemarkCommand(INDEX_FIRST_PERSON, new Remark(VALID_REMARK_AMY));"},{"lineNumber":75,"author":{"gitID":"tiny767"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":76,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":77,"author":{"gitID":"tiny767"},"content":"        // same object -\u003e returns true"},{"lineNumber":78,"author":{"gitID":"tiny767"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":79,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":80,"author":{"gitID":"tiny767"},"content":"        // null -\u003e returns false"},{"lineNumber":81,"author":{"gitID":"tiny767"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":82,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":83,"author":{"gitID":"tiny767"},"content":"        // different types -\u003e returns false"},{"lineNumber":84,"author":{"gitID":"tiny767"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":85,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":86,"author":{"gitID":"tiny767"},"content":"        // different index -\u003e returns false"},{"lineNumber":87,"author":{"gitID":"tiny767"},"content":"        assertFalse(standardCommand.equals(new RemarkCommand(INDEX_SECOND_PERSON, new Remark(VALID_REMARK_AMY))));"},{"lineNumber":88,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":89,"author":{"gitID":"tiny767"},"content":"        // different remark -\u003e returns false"},{"lineNumber":90,"author":{"gitID":"tiny767"},"content":"        assertFalse(standardCommand.equals(new RemarkCommand(INDEX_FIRST_PERSON, new Remark(VALID_REMARK_BOB))));"},{"lineNumber":91,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":92,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":94,"author":{"gitID":"tiny767"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"tiny767"},"content":"     * Returns a {@code RemarkCommand}"},{"lineNumber":96,"author":{"gitID":"tiny767"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"tiny767"},"content":"    private RemarkCommand makeCommand(Index index, String remark) {"},{"lineNumber":98,"author":{"gitID":"tiny767"},"content":"        RemarkCommand remarkCommand \u003d new RemarkCommand(index, new Remark(remark));"},{"lineNumber":99,"author":{"gitID":"tiny767"},"content":"        remarkCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":100,"author":{"gitID":"tiny767"},"content":"        return remarkCommand;"},{"lineNumber":101,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":103,"author":{"gitID":"tiny767"},"content":"}"}],"authorContributionMap":{"tiny767":93,"-":10}},{"path":"src/test/java/seedu/address/logic/commands/DeleteJobCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"tiny767"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":3,"author":{"gitID":"tiny767"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showJobAtIndex;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_JOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_JOB;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalJobs.getTypicalAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"ChengSashankh"},"content":"//@@author ChengSashankh"},{"lineNumber":26,"author":{"gitID":"ChengSashankh"},"content":"public class DeleteJobCommandTest {"},{"lineNumber":27,"author":{"gitID":"ChengSashankh"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":29,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"ChengSashankh"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":31,"author":{"gitID":"ChengSashankh"},"content":"        Job jobToDelete \u003d model.getFilteredJobList().get(INDEX_FIRST_JOB.getZeroBased());"},{"lineNumber":32,"author":{"gitID":"ChengSashankh"},"content":"        DeleteJobCommand deleteJobCommand \u003d prepareCommand(INDEX_FIRST_JOB);"},{"lineNumber":33,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":34,"author":{"gitID":"ChengSashankh"},"content":"        String expectedMessage \u003d String.format(DeleteJobCommand.MESSAGE_DELETE_JOB_SUCCESS, jobToDelete);"},{"lineNumber":35,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":36,"author":{"gitID":"ChengSashankh"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"ChengSashankh"},"content":"        expectedModel.deleteJob(jobToDelete);"},{"lineNumber":38,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":39,"author":{"gitID":"ChengSashankh"},"content":"        assertCommandSuccess(deleteJobCommand, model, expectedMessage, expectedModel);"},{"lineNumber":40,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":42,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"ChengSashankh"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":44,"author":{"gitID":"ChengSashankh"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredJobList().size() + 1);"},{"lineNumber":45,"author":{"gitID":"ChengSashankh"},"content":"        DeleteJobCommand deleteJobCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":46,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":47,"author":{"gitID":"ChengSashankh"},"content":"        assertCommandFailure(deleteJobCommand, model, Messages.MESSAGE_INVALID_JOB_DISPLAYED_INDEX);"},{"lineNumber":48,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":50,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"ChengSashankh"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":52,"author":{"gitID":"ChengSashankh"},"content":"        showJobAtIndex(model, INDEX_FIRST_JOB);"},{"lineNumber":53,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":54,"author":{"gitID":"ChengSashankh"},"content":"        Job jobToDelete \u003d model.getFilteredJobList().get(INDEX_FIRST_JOB.getZeroBased());"},{"lineNumber":55,"author":{"gitID":"ChengSashankh"},"content":"        DeleteJobCommand deleteJobCommand \u003d prepareCommand(INDEX_FIRST_JOB);"},{"lineNumber":56,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":57,"author":{"gitID":"ChengSashankh"},"content":"        String expectedMessage \u003d String.format(DeleteJobCommand.MESSAGE_DELETE_JOB_SUCCESS, jobToDelete);"},{"lineNumber":58,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":59,"author":{"gitID":"ChengSashankh"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":60,"author":{"gitID":"ChengSashankh"},"content":"        expectedModel.deleteJob(jobToDelete);"},{"lineNumber":61,"author":{"gitID":"ChengSashankh"},"content":"        showNoJob(expectedModel);"},{"lineNumber":62,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":63,"author":{"gitID":"ChengSashankh"},"content":"        assertCommandSuccess(deleteJobCommand, model, expectedMessage, expectedModel);"},{"lineNumber":64,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":66,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"ChengSashankh"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":68,"author":{"gitID":"ChengSashankh"},"content":"        showJobAtIndex(model, INDEX_FIRST_JOB);"},{"lineNumber":69,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":70,"author":{"gitID":"ChengSashankh"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_JOB;"},{"lineNumber":71,"author":{"gitID":"ChengSashankh"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":72,"author":{"gitID":"ChengSashankh"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getJobList().size());"},{"lineNumber":73,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":74,"author":{"gitID":"ChengSashankh"},"content":"        DeleteJobCommand deleteJobCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":75,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":76,"author":{"gitID":"ChengSashankh"},"content":"        assertCommandFailure(deleteJobCommand, model, Messages.MESSAGE_INVALID_JOB_DISPLAYED_INDEX);"},{"lineNumber":77,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":79,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"ChengSashankh"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":81,"author":{"gitID":"ChengSashankh"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":82,"author":{"gitID":"ChengSashankh"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":83,"author":{"gitID":"ChengSashankh"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":84,"author":{"gitID":"ChengSashankh"},"content":"        Job jobToDelete \u003d model.getFilteredJobList().get(INDEX_FIRST_JOB.getZeroBased());"},{"lineNumber":85,"author":{"gitID":"ChengSashankh"},"content":"        DeleteJobCommand deleteJobCommand \u003d prepareCommand(INDEX_FIRST_JOB);"},{"lineNumber":86,"author":{"gitID":"ChengSashankh"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":87,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":88,"author":{"gitID":"ChengSashankh"},"content":"        // delete -\u003e first job deleted"},{"lineNumber":89,"author":{"gitID":"ChengSashankh"},"content":"        deleteJobCommand.execute();"},{"lineNumber":90,"author":{"gitID":"ChengSashankh"},"content":"        undoRedoStack.push(deleteJobCommand);"},{"lineNumber":91,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":92,"author":{"gitID":"ChengSashankh"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered job list to show all jobs"},{"lineNumber":93,"author":{"gitID":"ChengSashankh"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":94,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":95,"author":{"gitID":"ChengSashankh"},"content":"        // redo -\u003e same first person deleted again"},{"lineNumber":96,"author":{"gitID":"ChengSashankh"},"content":"        expectedModel.deleteJob(jobToDelete);"},{"lineNumber":97,"author":{"gitID":"ChengSashankh"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":98,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":100,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"ChengSashankh"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":102,"author":{"gitID":"ChengSashankh"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":103,"author":{"gitID":"ChengSashankh"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":104,"author":{"gitID":"ChengSashankh"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":105,"author":{"gitID":"ChengSashankh"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredJobList().size() + 1);"},{"lineNumber":106,"author":{"gitID":"ChengSashankh"},"content":"        DeleteJobCommand deleteJobCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":107,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":108,"author":{"gitID":"ChengSashankh"},"content":"        // execution failed -\u003e deleteCommand not pushed into undoRedoStack"},{"lineNumber":109,"author":{"gitID":"ChengSashankh"},"content":"        assertCommandFailure(deleteJobCommand, model, Messages.MESSAGE_INVALID_JOB_DISPLAYED_INDEX);"},{"lineNumber":110,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":111,"author":{"gitID":"ChengSashankh"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":112,"author":{"gitID":"ChengSashankh"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":113,"author":{"gitID":"ChengSashankh"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":114,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":116,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"ChengSashankh"},"content":"    public void equals() throws Exception {"},{"lineNumber":118,"author":{"gitID":"ChengSashankh"},"content":"        DeleteJobCommand deleteFirstCommand \u003d prepareCommand(INDEX_FIRST_JOB);"},{"lineNumber":119,"author":{"gitID":"ChengSashankh"},"content":"        DeleteJobCommand deleteSecondCommand \u003d prepareCommand(INDEX_SECOND_JOB);"},{"lineNumber":120,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":121,"author":{"gitID":"ChengSashankh"},"content":"        // same object -\u003e returns true"},{"lineNumber":122,"author":{"gitID":"ChengSashankh"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":123,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":124,"author":{"gitID":"ChengSashankh"},"content":"        // same values -\u003e returns true"},{"lineNumber":125,"author":{"gitID":"ChengSashankh"},"content":"        DeleteJobCommand deleteFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_JOB);"},{"lineNumber":126,"author":{"gitID":"ChengSashankh"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":127,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":128,"author":{"gitID":"ChengSashankh"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":129,"author":{"gitID":"ChengSashankh"},"content":"        deleteFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":130,"author":{"gitID":"ChengSashankh"},"content":"        assertFalse(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":131,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":132,"author":{"gitID":"ChengSashankh"},"content":"        // different types -\u003e returns false"},{"lineNumber":133,"author":{"gitID":"ChengSashankh"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":134,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":135,"author":{"gitID":"ChengSashankh"},"content":"        // null -\u003e returns false"},{"lineNumber":136,"author":{"gitID":"ChengSashankh"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":137,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":138,"author":{"gitID":"ChengSashankh"},"content":"        // different person -\u003e returns false"},{"lineNumber":139,"author":{"gitID":"ChengSashankh"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":140,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":142,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"ChengSashankh"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":144,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"ChengSashankh"},"content":"    private DeleteJobCommand prepareCommand(Index index) {"},{"lineNumber":146,"author":{"gitID":"ChengSashankh"},"content":"        DeleteJobCommand deleteJobCommand \u003d new DeleteJobCommand(index);"},{"lineNumber":147,"author":{"gitID":"ChengSashankh"},"content":"        deleteJobCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":148,"author":{"gitID":"ChengSashankh"},"content":"        return deleteJobCommand;"},{"lineNumber":149,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":151,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"ChengSashankh"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":153,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"ChengSashankh"},"content":"    private void showNoJob(Model model) {"},{"lineNumber":155,"author":{"gitID":"ChengSashankh"},"content":"        model.updateFilteredJobList(p -\u003e false);"},{"lineNumber":156,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":157,"author":{"gitID":"ChengSashankh"},"content":"        assertTrue(model.getFilteredJobList().isEmpty());"},{"lineNumber":158,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"ChengSashankh"},"content":"}"},{"lineNumber":160,"author":{"gitID":"ChengSashankh"},"content":"//@@author"}],"authorContributionMap":{"ChengSashankh":136,"tiny767":3,"-":21}},{"path":"src/test/java/seedu/address/logic/commands/AddInterviewCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"deeheenguyen"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":3,"author":{"gitID":"deeheenguyen"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"deeheenguyen"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"deeheenguyen"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"deeheenguyen"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":9,"author":{"gitID":"deeheenguyen"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"deeheenguyen"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"deeheenguyen"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"deeheenguyen"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":17,"author":{"gitID":"deeheenguyen"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.Interview;"},{"lineNumber":25,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.exceptions.DuplicateInterviewException;"},{"lineNumber":26,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.exceptions.InterviewNotFoundException;"},{"lineNumber":27,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":28,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.job.exceptions.DuplicateJobException;"},{"lineNumber":29,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.job.exceptions.JobNotFoundException;"},{"lineNumber":30,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":31,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":32,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":33,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.report.Report;"},{"lineNumber":34,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":35,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.testutil.InterviewBuilder;"},{"lineNumber":36,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":37,"author":{"gitID":"deeheenguyen"},"content":"public class AddInterviewCommandTest {"},{"lineNumber":38,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":39,"author":{"gitID":"deeheenguyen"},"content":"    @Rule"},{"lineNumber":40,"author":{"gitID":"deeheenguyen"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":41,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":42,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"deeheenguyen"},"content":"    public void constructor_nullInterview_throwsNullPointerException() {"},{"lineNumber":44,"author":{"gitID":"deeheenguyen"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":45,"author":{"gitID":"deeheenguyen"},"content":"        new AddInterviewCommand(null);"},{"lineNumber":46,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":48,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"deeheenguyen"},"content":"    public void execute_interviewAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":50,"author":{"gitID":"deeheenguyen"},"content":"        ModelStubAcceptingInterviewAdded modelStub \u003d new ModelStubAcceptingInterviewAdded();"},{"lineNumber":51,"author":{"gitID":"deeheenguyen"},"content":"        Interview validInterview \u003d new InterviewBuilder().build();"},{"lineNumber":52,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":53,"author":{"gitID":"deeheenguyen"},"content":"        CommandResult commandResult \u003d getAddInterviewCommandForInterview(validInterview, modelStub).execute();"},{"lineNumber":54,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":55,"author":{"gitID":"deeheenguyen"},"content":"        assertEquals(String.format(AddInterviewCommand.MESSAGE_SUCCESS, validInterview), commandResult.feedbackToUser);"},{"lineNumber":56,"author":{"gitID":"deeheenguyen"},"content":"        assertEquals(Arrays.asList(validInterview), modelStub.interviewsAdded);"},{"lineNumber":57,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":59,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"deeheenguyen"},"content":"    public void execute_duplicateInterview_throwsCommandException() throws Exception {"},{"lineNumber":61,"author":{"gitID":"deeheenguyen"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateInterviewException();"},{"lineNumber":62,"author":{"gitID":"deeheenguyen"},"content":"        Interview validInterview \u003d new InterviewBuilder().build();"},{"lineNumber":63,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":64,"author":{"gitID":"deeheenguyen"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":65,"author":{"gitID":"deeheenguyen"},"content":"        thrown.expectMessage(AddInterviewCommand.MESSAGE_DUPLICATE_INTERVIEW);"},{"lineNumber":66,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":67,"author":{"gitID":"deeheenguyen"},"content":"        getAddInterviewCommandForInterview(validInterview, modelStub).execute();"},{"lineNumber":68,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":70,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"deeheenguyen"},"content":"    public void equals() {"},{"lineNumber":72,"author":{"gitID":"deeheenguyen"},"content":"        Interview alice \u003d new InterviewBuilder().withInterviewee(\"Alice\").build();"},{"lineNumber":73,"author":{"gitID":"deeheenguyen"},"content":"        Interview bob \u003d new InterviewBuilder().withInterviewee(\"Bob\").build();"},{"lineNumber":74,"author":{"gitID":"deeheenguyen"},"content":"        AddInterviewCommand addAliceCommand \u003d new AddInterviewCommand(alice);"},{"lineNumber":75,"author":{"gitID":"deeheenguyen"},"content":"        AddInterviewCommand addBobCommand \u003d new AddInterviewCommand(bob);"},{"lineNumber":76,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":77,"author":{"gitID":"deeheenguyen"},"content":"        // same object -\u003e returns true"},{"lineNumber":78,"author":{"gitID":"deeheenguyen"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":79,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":80,"author":{"gitID":"deeheenguyen"},"content":"        // same values -\u003e returns true"},{"lineNumber":81,"author":{"gitID":"deeheenguyen"},"content":"        AddInterviewCommand addAliceCommandCopy \u003d new AddInterviewCommand(alice);"},{"lineNumber":82,"author":{"gitID":"deeheenguyen"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":83,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":84,"author":{"gitID":"deeheenguyen"},"content":"        // different types -\u003e returns false"},{"lineNumber":85,"author":{"gitID":"deeheenguyen"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":86,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":87,"author":{"gitID":"deeheenguyen"},"content":"        // null -\u003e returns false"},{"lineNumber":88,"author":{"gitID":"deeheenguyen"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":89,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":90,"author":{"gitID":"deeheenguyen"},"content":"        // different person -\u003e returns false"},{"lineNumber":91,"author":{"gitID":"deeheenguyen"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":92,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":94,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"deeheenguyen"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":96,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"deeheenguyen"},"content":"    private AddInterviewCommand getAddInterviewCommandForInterview(Interview interview, Model model) {"},{"lineNumber":98,"author":{"gitID":"deeheenguyen"},"content":"        AddInterviewCommand command \u003d new AddInterviewCommand(interview);"},{"lineNumber":99,"author":{"gitID":"deeheenguyen"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":100,"author":{"gitID":"deeheenguyen"},"content":"        return command;"},{"lineNumber":101,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":103,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"deeheenguyen"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":105,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"deeheenguyen"},"content":"    private class ModelStub implements Model {"},{"lineNumber":107,"author":{"gitID":"deeheenguyen"},"content":"        @Override"},{"lineNumber":108,"author":{"gitID":"deeheenguyen"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":109,"author":{"gitID":"deeheenguyen"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":110,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":112,"author":{"gitID":"deeheenguyen"},"content":"        @Override"},{"lineNumber":113,"author":{"gitID":"deeheenguyen"},"content":"        public void addJob(Job job) throws DuplicateJobException {"},{"lineNumber":114,"author":{"gitID":"deeheenguyen"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":115,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":117,"author":{"gitID":"deeheenguyen"},"content":"        @Override"},{"lineNumber":118,"author":{"gitID":"deeheenguyen"},"content":"        public void addInterview(Interview interview) throws DuplicateInterviewException {"},{"lineNumber":119,"author":{"gitID":"deeheenguyen"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":120,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":122,"author":{"gitID":"deeheenguyen"},"content":"        @Override"},{"lineNumber":123,"author":{"gitID":"deeheenguyen"},"content":"        public void deleteInterview(Interview target) throws InterviewNotFoundException {"},{"lineNumber":124,"author":{"gitID":"deeheenguyen"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":125,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":127,"author":{"gitID":"deeheenguyen"},"content":"        @Override"},{"lineNumber":128,"author":{"gitID":"deeheenguyen"},"content":"        public void addReport(Report report) {"},{"lineNumber":129,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":130,"author":{"gitID":"deeheenguyen"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":131,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":133,"author":{"gitID":"deeheenguyen"},"content":"        @Override"},{"lineNumber":134,"author":{"gitID":"deeheenguyen"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":135,"author":{"gitID":"deeheenguyen"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":136,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":138,"author":{"gitID":"deeheenguyen"},"content":"        @Override"},{"lineNumber":139,"author":{"gitID":"deeheenguyen"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":140,"author":{"gitID":"deeheenguyen"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":141,"author":{"gitID":"deeheenguyen"},"content":"            return null;"},{"lineNumber":142,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":144,"author":{"gitID":"deeheenguyen"},"content":"        @Override"},{"lineNumber":145,"author":{"gitID":"deeheenguyen"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":146,"author":{"gitID":"deeheenguyen"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":147,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":149,"author":{"gitID":"deeheenguyen"},"content":"        @Override"},{"lineNumber":150,"author":{"gitID":"deeheenguyen"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":151,"author":{"gitID":"deeheenguyen"},"content":"                throws DuplicatePersonException {"},{"lineNumber":152,"author":{"gitID":"deeheenguyen"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":153,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":155,"author":{"gitID":"deeheenguyen"},"content":"        @Override"},{"lineNumber":156,"author":{"gitID":"deeheenguyen"},"content":"        public void updateReport(Tag population) {"},{"lineNumber":157,"author":{"gitID":"deeheenguyen"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":158,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":160,"author":{"gitID":"deeheenguyen"},"content":"        @Override"},{"lineNumber":161,"author":{"gitID":"deeheenguyen"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":162,"author":{"gitID":"deeheenguyen"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":163,"author":{"gitID":"deeheenguyen"},"content":"            return null;"},{"lineNumber":164,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":166,"author":{"gitID":"deeheenguyen"},"content":"        @Override"},{"lineNumber":167,"author":{"gitID":"deeheenguyen"},"content":"        public Report getReport() {"},{"lineNumber":168,"author":{"gitID":"deeheenguyen"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":169,"author":{"gitID":"deeheenguyen"},"content":"            return null;"},{"lineNumber":170,"author":{"gitID":"deeheenguyen"},"content":"        };"},{"lineNumber":171,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":172,"author":{"gitID":"deeheenguyen"},"content":"        @Override"},{"lineNumber":173,"author":{"gitID":"deeheenguyen"},"content":"        public void refreshReport() {"},{"lineNumber":174,"author":{"gitID":"deeheenguyen"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":175,"author":{"gitID":"deeheenguyen"},"content":"        };"},{"lineNumber":176,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":177,"author":{"gitID":"deeheenguyen"},"content":"        @Override"},{"lineNumber":178,"author":{"gitID":"deeheenguyen"},"content":"        public ObservableList\u003cReport\u003e getReportHistory() {"},{"lineNumber":179,"author":{"gitID":"deeheenguyen"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":180,"author":{"gitID":"deeheenguyen"},"content":"            return null;"},{"lineNumber":181,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":183,"author":{"gitID":"deeheenguyen"},"content":"        @Override"},{"lineNumber":184,"author":{"gitID":"deeheenguyen"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":185,"author":{"gitID":"deeheenguyen"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":186,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":188,"author":{"gitID":"deeheenguyen"},"content":"        @Override"},{"lineNumber":189,"author":{"gitID":"deeheenguyen"},"content":"        public void updateFilteredJobList(Predicate\u003cJob\u003e predicate) {"},{"lineNumber":190,"author":{"gitID":"deeheenguyen"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":191,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":193,"author":{"gitID":"deeheenguyen"},"content":"        @Override"},{"lineNumber":194,"author":{"gitID":"deeheenguyen"},"content":"        public ObservableList\u003cJob\u003e getFilteredJobList() {"},{"lineNumber":195,"author":{"gitID":"deeheenguyen"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":196,"author":{"gitID":"deeheenguyen"},"content":"            return null;"},{"lineNumber":197,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":198,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":199,"author":{"gitID":"deeheenguyen"},"content":"        @Override"},{"lineNumber":200,"author":{"gitID":"deeheenguyen"},"content":"        public void deleteJob(Job target) throws JobNotFoundException {"},{"lineNumber":201,"author":{"gitID":"deeheenguyen"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":202,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":204,"author":{"gitID":"deeheenguyen"},"content":"        @Override"},{"lineNumber":205,"author":{"gitID":"deeheenguyen"},"content":"        public void updateJob(Job target, Job editedJob)"},{"lineNumber":206,"author":{"gitID":"deeheenguyen"},"content":"                throws DuplicateJobException {"},{"lineNumber":207,"author":{"gitID":"deeheenguyen"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":208,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":210,"author":{"gitID":"deeheenguyen"},"content":"        @Override"},{"lineNumber":211,"author":{"gitID":"deeheenguyen"},"content":"        public ObservableList\u003cInterview\u003e getFilteredInterviewList() {"},{"lineNumber":212,"author":{"gitID":"deeheenguyen"},"content":"            fail(\"this method should not be called\");"},{"lineNumber":213,"author":{"gitID":"deeheenguyen"},"content":"            return null;"},{"lineNumber":214,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":215,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":216,"author":{"gitID":"deeheenguyen"},"content":"        @Override"},{"lineNumber":217,"author":{"gitID":"deeheenguyen"},"content":"        public void updateFilteredInterviewList(Predicate\u003cInterview\u003e predicate) {"},{"lineNumber":218,"author":{"gitID":"deeheenguyen"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":219,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":220,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":221,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":223,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":224,"author":{"gitID":"deeheenguyen"},"content":"     * A Model stub that always throw a DuplicateInterviewException when trying to add a interview."},{"lineNumber":225,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":226,"author":{"gitID":"deeheenguyen"},"content":"    private class ModelStubThrowingDuplicateInterviewException extends ModelStub {"},{"lineNumber":227,"author":{"gitID":"deeheenguyen"},"content":"        @Override"},{"lineNumber":228,"author":{"gitID":"deeheenguyen"},"content":"        public void addInterview(Interview interview) throws DuplicateInterviewException {"},{"lineNumber":229,"author":{"gitID":"deeheenguyen"},"content":"            throw new DuplicateInterviewException();"},{"lineNumber":230,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":231,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":232,"author":{"gitID":"deeheenguyen"},"content":"        @Override"},{"lineNumber":233,"author":{"gitID":"deeheenguyen"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":234,"author":{"gitID":"deeheenguyen"},"content":"            return new AddressBook();"},{"lineNumber":235,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":236,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":238,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":239,"author":{"gitID":"deeheenguyen"},"content":"     * A Model stub that always accept the interview being added."},{"lineNumber":240,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":241,"author":{"gitID":"deeheenguyen"},"content":"    private class ModelStubAcceptingInterviewAdded extends ModelStub {"},{"lineNumber":242,"author":{"gitID":"deeheenguyen"},"content":"        final ArrayList\u003cInterview\u003e interviewsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":243,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":244,"author":{"gitID":"deeheenguyen"},"content":"        @Override"},{"lineNumber":245,"author":{"gitID":"deeheenguyen"},"content":"        public void addInterview(Interview interview) throws DuplicateInterviewException {"},{"lineNumber":246,"author":{"gitID":"deeheenguyen"},"content":"            requireNonNull(interview);"},{"lineNumber":247,"author":{"gitID":"deeheenguyen"},"content":"            interviewsAdded.add(interview);"},{"lineNumber":248,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":249,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":250,"author":{"gitID":"deeheenguyen"},"content":"        @Override"},{"lineNumber":251,"author":{"gitID":"deeheenguyen"},"content":"        public void refreshReport() { }"},{"lineNumber":252,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":253,"author":{"gitID":"deeheenguyen"},"content":"        @Override"},{"lineNumber":254,"author":{"gitID":"deeheenguyen"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":255,"author":{"gitID":"deeheenguyen"},"content":"            return new AddressBook();"},{"lineNumber":256,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":257,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":259,"author":{"gitID":"deeheenguyen"},"content":"}"}],"authorContributionMap":{"deeheenguyen":259}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.Interview;"},{"lineNumber":25,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.exceptions.DuplicateInterviewException;"},{"lineNumber":26,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.exceptions.InterviewNotFoundException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.job.exceptions.DuplicateJobException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.job.exceptions.JobNotFoundException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.report.Report;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        public void addJob(Job job) throws DuplicateJobException {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"deeheenguyen"},"content":"        @Override"},{"lineNumber":118,"author":{"gitID":"deeheenguyen"},"content":"        public void addInterview(Interview interview) throws DuplicateInterviewException {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"deeheenguyen"},"content":"        @Override"},{"lineNumber":123,"author":{"gitID":"deeheenguyen"},"content":"        public void deleteInterview(Interview target) throws InterviewNotFoundException {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        public void addReport(Report report) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":151,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        public void updateReport(Tag population) {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        public Report getReport() {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        public void refreshReport() {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        public ObservableList\u003cReport\u003e getReportHistory() {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        public void updateFilteredJobList(Predicate\u003cJob\u003e predicate) {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        public ObservableList\u003cJob\u003e getFilteredJobList() {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":196,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        public void deleteJob(Job target) throws JobNotFoundException {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        public void updateJob(Job target, Job editedJob)"},{"lineNumber":206,"author":{"gitID":"-"},"content":"                throws DuplicateJobException {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"deeheenguyen"},"content":"        @Override"},{"lineNumber":211,"author":{"gitID":"deeheenguyen"},"content":"        public ObservableList\u003cInterview\u003e getFilteredInterviewList() {"},{"lineNumber":212,"author":{"gitID":"deeheenguyen"},"content":"            fail(\"this method should not be called\");"},{"lineNumber":213,"author":{"gitID":"deeheenguyen"},"content":"            return null;"},{"lineNumber":214,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":215,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":216,"author":{"gitID":"deeheenguyen"},"content":"        @Override"},{"lineNumber":217,"author":{"gitID":"deeheenguyen"},"content":"        public void updateFilteredInterviewList(Predicate\u003cInterview\u003e predicate) {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":225,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":234,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":240,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":246,"author":{"gitID":"-"},"content":"            requireNonNull(person);"},{"lineNumber":247,"author":{"gitID":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        public void refreshReport() { }"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"deeheenguyen":15,"-":244}},{"path":"src/test/java/seedu/address/logic/commands/ListJobCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showJobAtIndex;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_JOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalJobs.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"ChengSashankh"},"content":"//@@author ChengSashankh"},{"lineNumber":18,"author":{"gitID":"ChengSashankh"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"ChengSashankh"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListJobsCommand."},{"lineNumber":20,"author":{"gitID":"ChengSashankh"},"content":" */"},{"lineNumber":21,"author":{"gitID":"ChengSashankh"},"content":"public class ListJobCommandTest {"},{"lineNumber":22,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":23,"author":{"gitID":"ChengSashankh"},"content":"    private Model model;"},{"lineNumber":24,"author":{"gitID":"ChengSashankh"},"content":"    private Model expectedModel;"},{"lineNumber":25,"author":{"gitID":"ChengSashankh"},"content":"    private ListJobsCommand listJobsCommand;"},{"lineNumber":26,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":27,"author":{"gitID":"ChengSashankh"},"content":"    @Before"},{"lineNumber":28,"author":{"gitID":"ChengSashankh"},"content":"    public void setUp() {"},{"lineNumber":29,"author":{"gitID":"ChengSashankh"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"ChengSashankh"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":31,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":32,"author":{"gitID":"ChengSashankh"},"content":"        listJobsCommand \u003d new ListJobsCommand();"},{"lineNumber":33,"author":{"gitID":"ChengSashankh"},"content":"        listJobsCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":34,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":36,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"ChengSashankh"},"content":"    public void execute_jobListIsNotFiltered_showsSameList() {"},{"lineNumber":38,"author":{"gitID":"ChengSashankh"},"content":"        assertCommandSuccess(listJobsCommand, model, ListJobsCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":39,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":41,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"ChengSashankh"},"content":"    public void execute_jobListIsFiltered_showsEverything() {"},{"lineNumber":43,"author":{"gitID":"ChengSashankh"},"content":"        showJobAtIndex(model, INDEX_FIRST_JOB);"},{"lineNumber":44,"author":{"gitID":"ChengSashankh"},"content":"        assertCommandSuccess(listJobsCommand, model, ListJobsCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":45,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"ChengSashankh"},"content":"}"},{"lineNumber":47,"author":{"gitID":"ChengSashankh"},"content":"//@@author"}],"authorContributionMap":{"ChengSashankh":31,"-":16}},{"path":"src/test/java/seedu/address/logic/commands/PostJobCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.Interview;"},{"lineNumber":25,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.exceptions.DuplicateInterviewException;"},{"lineNumber":26,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.exceptions.InterviewNotFoundException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.job.exceptions.DuplicateJobException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.job.exceptions.JobNotFoundException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.report.Report;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.testutil.JobBuilder;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"ChengSashankh"},"content":"//@@author ChengSashankh"},{"lineNumber":38,"author":{"gitID":"ChengSashankh"},"content":"public class PostJobCommandTest {"},{"lineNumber":39,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":40,"author":{"gitID":"ChengSashankh"},"content":"    @Rule"},{"lineNumber":41,"author":{"gitID":"ChengSashankh"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":42,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":43,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"ChengSashankh"},"content":"    public void constructor_nullJob_throwsNullPointerException() {"},{"lineNumber":45,"author":{"gitID":"ChengSashankh"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":46,"author":{"gitID":"ChengSashankh"},"content":"        new PostJobCommand(null);"},{"lineNumber":47,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":49,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"ChengSashankh"},"content":"    public void execute_jobAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":51,"author":{"gitID":"ChengSashankh"},"content":"        ModelStubAcceptingJobAdded modelStub \u003d new PostJobCommandTest.ModelStubAcceptingJobAdded();"},{"lineNumber":52,"author":{"gitID":"ChengSashankh"},"content":"        Job validJob \u003d new JobBuilder().build();"},{"lineNumber":53,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":54,"author":{"gitID":"ChengSashankh"},"content":"        CommandResult commandResult \u003d getPostJobCommandForJob(validJob, modelStub).execute();"},{"lineNumber":55,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":56,"author":{"gitID":"ChengSashankh"},"content":"        assertEquals(String.format(PostJobCommand.MESSAGE_SUCCESS, validJob), commandResult.feedbackToUser);"},{"lineNumber":57,"author":{"gitID":"ChengSashankh"},"content":"        assertEquals(Arrays.asList(validJob), modelStub.jobsAdded);"},{"lineNumber":58,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":60,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"ChengSashankh"},"content":"    public void execute_duplicateJob_throwsCommandException() throws Exception {"},{"lineNumber":62,"author":{"gitID":"ChengSashankh"},"content":"        PostJobCommandTest.ModelStub modelStub \u003d new PostJobCommandTest.ModelStubThrowingDuplicateJobException();"},{"lineNumber":63,"author":{"gitID":"ChengSashankh"},"content":"        Job validJob \u003d new JobBuilder().build();"},{"lineNumber":64,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":65,"author":{"gitID":"ChengSashankh"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":66,"author":{"gitID":"ChengSashankh"},"content":"        thrown.expectMessage(PostJobCommand.MESSAGE_DUPLICATE_JOB);"},{"lineNumber":67,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":68,"author":{"gitID":"ChengSashankh"},"content":"        getPostJobCommandForJob(validJob, modelStub).execute();"},{"lineNumber":69,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":71,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"ChengSashankh"},"content":"    public void equals() {"},{"lineNumber":73,"author":{"gitID":"ChengSashankh"},"content":"        Job backendJob \u003d new JobBuilder().withJobTitle(\"Backend Job\").build();"},{"lineNumber":74,"author":{"gitID":"ChengSashankh"},"content":"        Job frontendJob \u003d new JobBuilder().withJobTitle(\"Frontend Job\").build();"},{"lineNumber":75,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":76,"author":{"gitID":"ChengSashankh"},"content":"        PostJobCommand addBackendJobCommand \u003d new PostJobCommand(backendJob);"},{"lineNumber":77,"author":{"gitID":"ChengSashankh"},"content":"        PostJobCommand addFrontendJobCommand \u003d new PostJobCommand(frontendJob);"},{"lineNumber":78,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":79,"author":{"gitID":"ChengSashankh"},"content":"        // same object -\u003e returns true"},{"lineNumber":80,"author":{"gitID":"ChengSashankh"},"content":"        assertTrue(addBackendJobCommand.equals(addBackendJobCommand));"},{"lineNumber":81,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":82,"author":{"gitID":"ChengSashankh"},"content":"        // same values -\u003e returns true"},{"lineNumber":83,"author":{"gitID":"ChengSashankh"},"content":"        PostJobCommand addBackendJobCommandCopy \u003d new PostJobCommand(backendJob);"},{"lineNumber":84,"author":{"gitID":"ChengSashankh"},"content":"        assertTrue(addBackendJobCommand.equals(addBackendJobCommandCopy));"},{"lineNumber":85,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":86,"author":{"gitID":"ChengSashankh"},"content":"        // different types -\u003e returns false"},{"lineNumber":87,"author":{"gitID":"ChengSashankh"},"content":"        assertFalse(addBackendJobCommand.equals(1));"},{"lineNumber":88,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":89,"author":{"gitID":"ChengSashankh"},"content":"        // null -\u003e returns false"},{"lineNumber":90,"author":{"gitID":"ChengSashankh"},"content":"        assertFalse(addBackendJobCommand.equals(null));"},{"lineNumber":91,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":92,"author":{"gitID":"ChengSashankh"},"content":"        // different person -\u003e returns false"},{"lineNumber":93,"author":{"gitID":"ChengSashankh"},"content":"        assertFalse(addBackendJobCommand.equals(addFrontendJobCommand));"},{"lineNumber":94,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":96,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"ChengSashankh"},"content":"     * Generates a new PostJobCommand with the details of the given job."},{"lineNumber":98,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"ChengSashankh"},"content":"    private PostJobCommand getPostJobCommandForJob(Job job, Model model) {"},{"lineNumber":100,"author":{"gitID":"ChengSashankh"},"content":"        PostJobCommand command \u003d new PostJobCommand(job);"},{"lineNumber":101,"author":{"gitID":"ChengSashankh"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":102,"author":{"gitID":"ChengSashankh"},"content":"        return command;"},{"lineNumber":103,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":105,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"ChengSashankh"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":107,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"ChengSashankh"},"content":"    private class ModelStub implements Model {"},{"lineNumber":109,"author":{"gitID":"ChengSashankh"},"content":"        @Override"},{"lineNumber":110,"author":{"gitID":"ChengSashankh"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":111,"author":{"gitID":"ChengSashankh"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":112,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":114,"author":{"gitID":"ChengSashankh"},"content":"        @Override"},{"lineNumber":115,"author":{"gitID":"ChengSashankh"},"content":"        public void addJob(Job job) throws DuplicateJobException {"},{"lineNumber":116,"author":{"gitID":"ChengSashankh"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":117,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":119,"author":{"gitID":"ChengSashankh"},"content":"        @Override"},{"lineNumber":120,"author":{"gitID":"ChengSashankh"},"content":"        public void addInterview(Interview interview) throws DuplicateInterviewException {"},{"lineNumber":121,"author":{"gitID":"ChengSashankh"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":122,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":124,"author":{"gitID":"ChengSashankh"},"content":"        @Override"},{"lineNumber":125,"author":{"gitID":"ChengSashankh"},"content":"        public void deleteInterview(Interview target) throws InterviewNotFoundException {"},{"lineNumber":126,"author":{"gitID":"ChengSashankh"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":127,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":129,"author":{"gitID":"ChengSashankh"},"content":"        @Override"},{"lineNumber":130,"author":{"gitID":"ChengSashankh"},"content":"        public void addReport(Report report) {"},{"lineNumber":131,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":132,"author":{"gitID":"ChengSashankh"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":133,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":135,"author":{"gitID":"ChengSashankh"},"content":"        @Override"},{"lineNumber":136,"author":{"gitID":"ChengSashankh"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":137,"author":{"gitID":"ChengSashankh"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":138,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":140,"author":{"gitID":"ChengSashankh"},"content":"        @Override"},{"lineNumber":141,"author":{"gitID":"ChengSashankh"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":142,"author":{"gitID":"ChengSashankh"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":143,"author":{"gitID":"ChengSashankh"},"content":"            return null;"},{"lineNumber":144,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":146,"author":{"gitID":"ChengSashankh"},"content":"        @Override"},{"lineNumber":147,"author":{"gitID":"ChengSashankh"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":148,"author":{"gitID":"ChengSashankh"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":149,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":151,"author":{"gitID":"ChengSashankh"},"content":"        @Override"},{"lineNumber":152,"author":{"gitID":"ChengSashankh"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":153,"author":{"gitID":"ChengSashankh"},"content":"                throws DuplicatePersonException {"},{"lineNumber":154,"author":{"gitID":"ChengSashankh"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":155,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":157,"author":{"gitID":"ChengSashankh"},"content":"        @Override"},{"lineNumber":158,"author":{"gitID":"ChengSashankh"},"content":"        public void updateReport(Tag population) {"},{"lineNumber":159,"author":{"gitID":"ChengSashankh"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":160,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":162,"author":{"gitID":"ChengSashankh"},"content":"        @Override"},{"lineNumber":163,"author":{"gitID":"ChengSashankh"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":164,"author":{"gitID":"ChengSashankh"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":165,"author":{"gitID":"ChengSashankh"},"content":"            return null;"},{"lineNumber":166,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":168,"author":{"gitID":"ChengSashankh"},"content":"        @Override"},{"lineNumber":169,"author":{"gitID":"ChengSashankh"},"content":"        public Report getReport() {"},{"lineNumber":170,"author":{"gitID":"ChengSashankh"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":171,"author":{"gitID":"ChengSashankh"},"content":"            return null;"},{"lineNumber":172,"author":{"gitID":"ChengSashankh"},"content":"        };"},{"lineNumber":173,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":174,"author":{"gitID":"ChengSashankh"},"content":"        @Override"},{"lineNumber":175,"author":{"gitID":"ChengSashankh"},"content":"        public void refreshReport() {"},{"lineNumber":176,"author":{"gitID":"ChengSashankh"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":177,"author":{"gitID":"ChengSashankh"},"content":"        };"},{"lineNumber":178,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":179,"author":{"gitID":"ChengSashankh"},"content":"        @Override"},{"lineNumber":180,"author":{"gitID":"ChengSashankh"},"content":"        public ObservableList\u003cReport\u003e getReportHistory() {"},{"lineNumber":181,"author":{"gitID":"ChengSashankh"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":182,"author":{"gitID":"ChengSashankh"},"content":"            return null;"},{"lineNumber":183,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":185,"author":{"gitID":"ChengSashankh"},"content":"        @Override"},{"lineNumber":186,"author":{"gitID":"ChengSashankh"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":187,"author":{"gitID":"ChengSashankh"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":188,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":190,"author":{"gitID":"ChengSashankh"},"content":"        @Override"},{"lineNumber":191,"author":{"gitID":"ChengSashankh"},"content":"        public void updateFilteredJobList(Predicate\u003cJob\u003e predicate) {"},{"lineNumber":192,"author":{"gitID":"ChengSashankh"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":193,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":195,"author":{"gitID":"ChengSashankh"},"content":"        @Override"},{"lineNumber":196,"author":{"gitID":"ChengSashankh"},"content":"        public ObservableList\u003cJob\u003e getFilteredJobList() {"},{"lineNumber":197,"author":{"gitID":"ChengSashankh"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":198,"author":{"gitID":"ChengSashankh"},"content":"            return null;"},{"lineNumber":199,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":200,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":201,"author":{"gitID":"ChengSashankh"},"content":"        @Override"},{"lineNumber":202,"author":{"gitID":"ChengSashankh"},"content":"        public void deleteJob(Job target) throws JobNotFoundException {"},{"lineNumber":203,"author":{"gitID":"ChengSashankh"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":204,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":205,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":206,"author":{"gitID":"ChengSashankh"},"content":"        @Override"},{"lineNumber":207,"author":{"gitID":"ChengSashankh"},"content":"        public void updateJob(Job target, Job editedJob)"},{"lineNumber":208,"author":{"gitID":"ChengSashankh"},"content":"                throws DuplicateJobException {"},{"lineNumber":209,"author":{"gitID":"ChengSashankh"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":210,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":212,"author":{"gitID":"ChengSashankh"},"content":"        @Override"},{"lineNumber":213,"author":{"gitID":"ChengSashankh"},"content":"        public ObservableList\u003cInterview\u003e getFilteredInterviewList() {"},{"lineNumber":214,"author":{"gitID":"ChengSashankh"},"content":"            fail(\"this method should not be called\");"},{"lineNumber":215,"author":{"gitID":"ChengSashankh"},"content":"            return null;"},{"lineNumber":216,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":217,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":218,"author":{"gitID":"ChengSashankh"},"content":"        @Override"},{"lineNumber":219,"author":{"gitID":"ChengSashankh"},"content":"        public void updateFilteredInterviewList(Predicate\u003cInterview\u003e predicate) {"},{"lineNumber":220,"author":{"gitID":"ChengSashankh"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":221,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":222,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":223,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":225,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":226,"author":{"gitID":"ChengSashankh"},"content":"     * A Model stub that always throw a DuplicateJobException when trying to add a job."},{"lineNumber":227,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":228,"author":{"gitID":"ChengSashankh"},"content":"    private class ModelStubThrowingDuplicateJobException extends PostJobCommandTest.ModelStub {"},{"lineNumber":229,"author":{"gitID":"ChengSashankh"},"content":"        @Override"},{"lineNumber":230,"author":{"gitID":"ChengSashankh"},"content":"        public void addJob(Job job) throws DuplicateJobException {"},{"lineNumber":231,"author":{"gitID":"ChengSashankh"},"content":"            throw new DuplicateJobException();"},{"lineNumber":232,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":233,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":234,"author":{"gitID":"ChengSashankh"},"content":"        @Override"},{"lineNumber":235,"author":{"gitID":"ChengSashankh"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":236,"author":{"gitID":"ChengSashankh"},"content":"            return new AddressBook();"},{"lineNumber":237,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":238,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":240,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":241,"author":{"gitID":"ChengSashankh"},"content":"     * A Model stub that always accept the job being added."},{"lineNumber":242,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":243,"author":{"gitID":"ChengSashankh"},"content":"    private class ModelStubAcceptingJobAdded extends PostJobCommandTest.ModelStub {"},{"lineNumber":244,"author":{"gitID":"ChengSashankh"},"content":"        final ArrayList\u003cJob\u003e jobsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":245,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":246,"author":{"gitID":"ChengSashankh"},"content":"        @Override"},{"lineNumber":247,"author":{"gitID":"ChengSashankh"},"content":"        public void addJob(Job job) throws DuplicateJobException {"},{"lineNumber":248,"author":{"gitID":"ChengSashankh"},"content":"            requireNonNull(job);"},{"lineNumber":249,"author":{"gitID":"ChengSashankh"},"content":"            jobsAdded.add(job);"},{"lineNumber":250,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":251,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":252,"author":{"gitID":"ChengSashankh"},"content":"        @Override"},{"lineNumber":253,"author":{"gitID":"ChengSashankh"},"content":"        public void refreshReport() { }"},{"lineNumber":254,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":255,"author":{"gitID":"ChengSashankh"},"content":"        @Override"},{"lineNumber":256,"author":{"gitID":"ChengSashankh"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":257,"author":{"gitID":"ChengSashankh"},"content":"            return new AddressBook();"},{"lineNumber":258,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":259,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":260,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":261,"author":{"gitID":"ChengSashankh"},"content":"}"},{"lineNumber":262,"author":{"gitID":"ChengSashankh"},"content":"//@@author"}],"authorContributionMap":{"deeheenguyen":3,"ChengSashankh":226,"-":33}},{"path":"src/test/java/seedu/address/logic/commands/ViewReportCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":21,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.Interview;"},{"lineNumber":22,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.exceptions.DuplicateInterviewException;"},{"lineNumber":23,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.exceptions.InterviewNotFoundException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.job.exceptions.DuplicateJobException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.job.exceptions.JobNotFoundException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.report.Report;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.testutil.ReportBuilder;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class ViewReportCommandTest {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void constructor_nullReport_throwsNullPointerException() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        new ViewReportCommand(null);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void execute_reportAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        ModelStubAcceptingReportUpdated modelStub \u003d new ModelStubAcceptingReportUpdated();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        Tag validTag \u003d new Tag(\"validTag\");"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Report validReport \u003d new ReportBuilder().build();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getViewReportCommand(validTag, modelStub).execute();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertEquals(String.format(ViewReportCommand.MESSAGE_SUCCESS + validTag.tagName), commandResult.feedbackToUser);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertEquals(validReport, modelStub.report);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Report screening \u003d new ReportBuilder().withPopulation(\"Screening\").build();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        Report interviewing \u003d new ReportBuilder().withPopulation(\"Interviewing\").build();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        ViewReportCommand viewreportScreeningCommand \u003d new ViewReportCommand(new Tag(\"Screening\"));"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        ViewReportCommand viewreportInterviewingCommand \u003d new ViewReportCommand(new Tag(\"Interviewing\"));"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertTrue(viewreportScreeningCommand.equals(viewreportScreeningCommand));"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        ViewReportCommand addScreeningCommandCopy \u003d new ViewReportCommand(new Tag(\"Screening\"));"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertTrue(viewreportScreeningCommand.equals(addScreeningCommandCopy));"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertFalse(viewreportScreeningCommand.equals(1));"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertFalse(viewreportScreeningCommand.equals(null));"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // different report -\u003e returns false"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertFalse(viewreportScreeningCommand.equals(viewreportInterviewingCommand));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Generates a new ViewReportCommand with the details of the given report."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    private ViewReportCommand getViewReportCommand(Tag population, Model model) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        ViewReportCommand command \u003d new ViewReportCommand(population);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        public void addJob(Job job) throws DuplicateJobException {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"deeheenguyen"},"content":"        @Override"},{"lineNumber":105,"author":{"gitID":"deeheenguyen"},"content":"        public void addInterview(Interview interview) throws DuplicateInterviewException {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"deeheenguyen"},"content":"        @Override"},{"lineNumber":110,"author":{"gitID":"deeheenguyen"},"content":"        public void deleteInterview(Interview target) throws InterviewNotFoundException {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        public void addReport(Report report) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedReport)"},{"lineNumber":138,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        public void updateReport(Tag population) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        public Report getReport() {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        public void refreshReport() {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        public ObservableList\u003cReport\u003e getReportHistory() {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        public void updateFilteredJobList(Predicate\u003cJob\u003e predicate) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        public ObservableList\u003cJob\u003e getFilteredJobList() {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        public void deleteJob(Job target) throws JobNotFoundException {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        public void updateJob(Job target, Job editedJob)"},{"lineNumber":193,"author":{"gitID":"-"},"content":"                throws DuplicateJobException {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"deeheenguyen"},"content":"        @Override"},{"lineNumber":198,"author":{"gitID":"deeheenguyen"},"content":"        public ObservableList\u003cInterview\u003e getFilteredInterviewList() {"},{"lineNumber":199,"author":{"gitID":"deeheenguyen"},"content":"            fail(\"this method should not be called\");"},{"lineNumber":200,"author":{"gitID":"deeheenguyen"},"content":"            return null;"},{"lineNumber":201,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":202,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":203,"author":{"gitID":"deeheenguyen"},"content":"        @Override"},{"lineNumber":204,"author":{"gitID":"deeheenguyen"},"content":"        public void updateFilteredInterviewList(Predicate\u003cInterview\u003e predicate) {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the report being added."},{"lineNumber":212,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingReportUpdated extends ModelStub {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        private Report report;"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        public void updateReport(Tag population) {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"            report \u003d new ReportBuilder().build();"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        public Report getReport() {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"            return report;"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"deeheenguyen":17,"-":216}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":16,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.person.Link;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.skill.Skill;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class XmlAdaptedPersonTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":28,"author":{"gitID":"deeheenguyen"},"content":"    private static final String INVALID_LINK \u003d \"abc\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String INVALID_SKILL \u003d \"\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":35,"author":{"gitID":"deeheenguyen"},"content":"    private static final String VALID_LINK \u003d BENSON.getLink().toString();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String VALID_SKILL \u003d BENSON.getSkills().toString();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                        VALID_ADDRESS, VALID_LINK, VALID_SKILL, VALID_TAGS);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":58,"author":{"gitID":"deeheenguyen"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                VALID_ADDRESS, VALID_LINK, VALID_SKILL, VALID_TAGS);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL,"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                        VALID_ADDRESS, VALID_LINK, VALID_SKILL, VALID_TAGS);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":75,"author":{"gitID":"deeheenguyen"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL,"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                VALID_ADDRESS, VALID_LINK, VALID_SKILL, VALID_TAGS);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL,"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                        VALID_ADDRESS, VALID_LINK, VALID_SKILL, VALID_TAGS);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":92,"author":{"gitID":"deeheenguyen"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE,"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                null, VALID_ADDRESS, VALID_LINK, VALID_SKILL, VALID_TAGS);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":101,"author":{"gitID":"deeheenguyen"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":102,"author":{"gitID":"-"},"content":"                        INVALID_ADDRESS, VALID_LINK, VALID_SKILL, VALID_TAGS);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":109,"author":{"gitID":"deeheenguyen"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                null, VALID_LINK, VALID_SKILL, VALID_TAGS);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"deeheenguyen"},"content":"    public void toModelType_nullLink_throwsIllegalValueException() {"},{"lineNumber":117,"author":{"gitID":"deeheenguyen"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                VALID_ADDRESS, null, VALID_SKILL, VALID_TAGS);"},{"lineNumber":119,"author":{"gitID":"deeheenguyen"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Link.class.getSimpleName());"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public void toModelType_nullSkill_throwsIllegalValueException() {"},{"lineNumber":125,"author":{"gitID":"deeheenguyen"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                VALID_ADDRESS, VALID_LINK, null, VALID_TAGS);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Skill.class.getSimpleName());"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":136,"author":{"gitID":"deeheenguyen"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":137,"author":{"gitID":"-"},"content":"                        VALID_ADDRESS, VALID_LINK, VALID_SKILL, invalidTags);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"deeheenguyen":14,"-":127}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedInterviewTest.java","lines":[{"lineNumber":1,"author":{"gitID":"deeheenguyen"},"content":"//@@author deeheenguyen"},{"lineNumber":2,"author":{"gitID":"deeheenguyen"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":4,"author":{"gitID":"deeheenguyen"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.storage.XmlAdaptedInterview.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.testutil.TypicalInterviews.SE_INTERVIEW;"},{"lineNumber":7,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":8,"author":{"gitID":"deeheenguyen"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":10,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.Date;"},{"lineNumber":12,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.InterviewLocation;"},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.InterviewTitle;"},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":15,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":16,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":17,"author":{"gitID":"deeheenguyen"},"content":"public class XmlAdaptedInterviewTest {"},{"lineNumber":18,"author":{"gitID":"deeheenguyen"},"content":"    private static final String INVALID_INTERTVIEW_TITLE \u003d \"R@chel\";"},{"lineNumber":19,"author":{"gitID":"deeheenguyen"},"content":"    private static final String INVALID_DATE \u003d \"+651234\";"},{"lineNumber":20,"author":{"gitID":"deeheenguyen"},"content":"    private static final String INVALID_INTERVIEW_LOCATION \u003d \" \";"},{"lineNumber":21,"author":{"gitID":"deeheenguyen"},"content":"    private static final String INVALID_INTERVIEWEE \u003d \"@@__\";"},{"lineNumber":22,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":23,"author":{"gitID":"deeheenguyen"},"content":"    private static final String VALID_INTERVIEW_TITLE \u003d SE_INTERVIEW.getInterviewTitle().toString();"},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":"    private static final String VALID_DATE \u003d SE_INTERVIEW.getDate().toString();"},{"lineNumber":25,"author":{"gitID":"deeheenguyen"},"content":"    private static final String VALID_INTERVIEWEE \u003d SE_INTERVIEW.getInterviewee().toString();"},{"lineNumber":26,"author":{"gitID":"deeheenguyen"},"content":"    private static final String VALID_INTERVIEW_LOCATION \u003d SE_INTERVIEW.getInterviewLocation().toString();"},{"lineNumber":27,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":28,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"deeheenguyen"},"content":"    public void toModelType_validInterviewDetails_returnsInterview() throws Exception {"},{"lineNumber":30,"author":{"gitID":"deeheenguyen"},"content":"        XmlAdaptedInterview interview \u003d new XmlAdaptedInterview(SE_INTERVIEW);"},{"lineNumber":31,"author":{"gitID":"deeheenguyen"},"content":"        assertEquals(SE_INTERVIEW, interview.toModelType());"},{"lineNumber":32,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":34,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"deeheenguyen"},"content":"    public void toModelType_invalidInterviewTitle_throwsIllegalValueException() {"},{"lineNumber":36,"author":{"gitID":"deeheenguyen"},"content":"        XmlAdaptedInterview interview \u003d"},{"lineNumber":37,"author":{"gitID":"deeheenguyen"},"content":"                new XmlAdaptedInterview(INVALID_INTERTVIEW_TITLE, VALID_INTERVIEWEE, VALID_DATE,"},{"lineNumber":38,"author":{"gitID":"deeheenguyen"},"content":"                        VALID_INTERVIEW_LOCATION);"},{"lineNumber":39,"author":{"gitID":"deeheenguyen"},"content":"        String expectedMessage \u003d InterviewTitle.MESSAGE_TITLE_CONSTRAINTS;"},{"lineNumber":40,"author":{"gitID":"deeheenguyen"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, interview::toModelType);"},{"lineNumber":41,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":43,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"deeheenguyen"},"content":"    public void toModelType_nullInterviewTitle_throwsIllegalValueException() {"},{"lineNumber":45,"author":{"gitID":"deeheenguyen"},"content":"        XmlAdaptedInterview interview \u003d new XmlAdaptedInterview(null, VALID_INTERVIEWEE,"},{"lineNumber":46,"author":{"gitID":"deeheenguyen"},"content":"                VALID_DATE, VALID_INTERVIEW_LOCATION);"},{"lineNumber":47,"author":{"gitID":"deeheenguyen"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, InterviewTitle.class.getSimpleName());"},{"lineNumber":48,"author":{"gitID":"deeheenguyen"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, interview::toModelType);"},{"lineNumber":49,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":51,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"deeheenguyen"},"content":"    public void toModelType_invalidInterviewee_throwsIllegalValueException() {"},{"lineNumber":53,"author":{"gitID":"deeheenguyen"},"content":"        XmlAdaptedInterview interview \u003d"},{"lineNumber":54,"author":{"gitID":"deeheenguyen"},"content":"                new XmlAdaptedInterview(VALID_INTERVIEW_TITLE, INVALID_INTERVIEWEE, VALID_DATE,"},{"lineNumber":55,"author":{"gitID":"deeheenguyen"},"content":"                        VALID_INTERVIEW_LOCATION);"},{"lineNumber":56,"author":{"gitID":"deeheenguyen"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":57,"author":{"gitID":"deeheenguyen"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, interview::toModelType);"},{"lineNumber":58,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":60,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"deeheenguyen"},"content":"    public void toModelType_nullInterviewee_throwsIllegalValueException() {"},{"lineNumber":62,"author":{"gitID":"deeheenguyen"},"content":"        XmlAdaptedInterview interview \u003d new XmlAdaptedInterview(VALID_INTERVIEW_TITLE, null, VALID_DATE,"},{"lineNumber":63,"author":{"gitID":"deeheenguyen"},"content":"                VALID_INTERVIEW_LOCATION);"},{"lineNumber":64,"author":{"gitID":"deeheenguyen"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":65,"author":{"gitID":"deeheenguyen"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, interview::toModelType);"},{"lineNumber":66,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":68,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"deeheenguyen"},"content":"    public void toModelType_invalidDate_throwsIllegalValueException() {"},{"lineNumber":70,"author":{"gitID":"deeheenguyen"},"content":"        XmlAdaptedInterview interview \u003d"},{"lineNumber":71,"author":{"gitID":"deeheenguyen"},"content":"                new XmlAdaptedInterview(VALID_INTERVIEW_TITLE, VALID_INTERVIEWEE, INVALID_DATE,"},{"lineNumber":72,"author":{"gitID":"deeheenguyen"},"content":"                        VALID_INTERVIEW_LOCATION);"},{"lineNumber":73,"author":{"gitID":"deeheenguyen"},"content":"        String expectedMessage \u003d Date.MESSAGE_DATE_CONSTRAINTS;"},{"lineNumber":74,"author":{"gitID":"deeheenguyen"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, interview::toModelType);"},{"lineNumber":75,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":77,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"deeheenguyen"},"content":"    public void toModelType_nullDate_throwsIllegalValueException() {"},{"lineNumber":79,"author":{"gitID":"deeheenguyen"},"content":"        XmlAdaptedInterview interview \u003d new XmlAdaptedInterview(VALID_INTERVIEW_TITLE, VALID_INTERVIEWEE,"},{"lineNumber":80,"author":{"gitID":"deeheenguyen"},"content":"                null, VALID_INTERVIEW_LOCATION);"},{"lineNumber":81,"author":{"gitID":"deeheenguyen"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName());"},{"lineNumber":82,"author":{"gitID":"deeheenguyen"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, interview::toModelType);"},{"lineNumber":83,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":85,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"deeheenguyen"},"content":"    public void toModelType_invalidInterviewLocation_throwsIllegalValueException() {"},{"lineNumber":87,"author":{"gitID":"deeheenguyen"},"content":"        XmlAdaptedInterview interview \u003d"},{"lineNumber":88,"author":{"gitID":"deeheenguyen"},"content":"                new XmlAdaptedInterview(VALID_INTERVIEW_TITLE, VALID_INTERVIEWEE, VALID_DATE,"},{"lineNumber":89,"author":{"gitID":"deeheenguyen"},"content":"                        INVALID_INTERVIEW_LOCATION);"},{"lineNumber":90,"author":{"gitID":"deeheenguyen"},"content":"        String expectedMessage \u003d InterviewLocation.MESSAGE_LOCATION_CONSTRAINTS;"},{"lineNumber":91,"author":{"gitID":"deeheenguyen"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, interview::toModelType);"},{"lineNumber":92,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":94,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"deeheenguyen"},"content":"    public void toModelType_nullInterviewLocation_throwsIllegalValueException() {"},{"lineNumber":96,"author":{"gitID":"deeheenguyen"},"content":"        XmlAdaptedInterview interview \u003d new XmlAdaptedInterview(VALID_INTERVIEW_TITLE, VALID_INTERVIEWEE, VALID_DATE,"},{"lineNumber":97,"author":{"gitID":"deeheenguyen"},"content":"                null);"},{"lineNumber":98,"author":{"gitID":"deeheenguyen"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, InterviewLocation.class.getSimpleName());"},{"lineNumber":99,"author":{"gitID":"deeheenguyen"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, interview::toModelType);"},{"lineNumber":100,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":102,"author":{"gitID":"deeheenguyen"},"content":"}"}],"authorContributionMap":{"deeheenguyen":102}},{"path":"src/test/java/seedu/address/model/person/EmailFilterTest.java","lines":[{"lineNumber":1,"author":{"gitID":"deeheenguyen"},"content":"//@@author deeheenguyen"},{"lineNumber":2,"author":{"gitID":"deeheenguyen"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":4,"author":{"gitID":"deeheenguyen"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"deeheenguyen"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":7,"author":{"gitID":"deeheenguyen"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":9,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":10,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":11,"author":{"gitID":"deeheenguyen"},"content":"public class EmailFilterTest {"},{"lineNumber":12,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":"    public void equals() {"},{"lineNumber":15,"author":{"gitID":"deeheenguyen"},"content":"        Email firstEmail \u003d new Email(\"abc@example.com\");"},{"lineNumber":16,"author":{"gitID":"deeheenguyen"},"content":"        Email secondEmail \u003d new Email(\"def@example.com\");"},{"lineNumber":17,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":18,"author":{"gitID":"deeheenguyen"},"content":"        EmailFilter firstPredicate \u003d new EmailFilter(firstEmail);"},{"lineNumber":19,"author":{"gitID":"deeheenguyen"},"content":"        EmailFilter secondPredicate \u003d new EmailFilter(secondEmail);"},{"lineNumber":20,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":21,"author":{"gitID":"deeheenguyen"},"content":"        // same object -\u003e returns true"},{"lineNumber":22,"author":{"gitID":"deeheenguyen"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":23,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":"        // same values -\u003e returns true"},{"lineNumber":25,"author":{"gitID":"deeheenguyen"},"content":"        EmailFilter firstPredicateCopy \u003d new EmailFilter(firstEmail);"},{"lineNumber":26,"author":{"gitID":"deeheenguyen"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":27,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":28,"author":{"gitID":"deeheenguyen"},"content":"        // different types -\u003e returns false"},{"lineNumber":29,"author":{"gitID":"deeheenguyen"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":30,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":31,"author":{"gitID":"deeheenguyen"},"content":"        // null -\u003e returns false"},{"lineNumber":32,"author":{"gitID":"deeheenguyen"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":33,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":34,"author":{"gitID":"deeheenguyen"},"content":"        // different person -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"deeheenguyen"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":36,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":38,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"deeheenguyen"},"content":"    public void tests() {"},{"lineNumber":40,"author":{"gitID":"deeheenguyen"},"content":"        EmailFilter predicate \u003d new EmailFilter(new Email(\"abc@example.com\"));"},{"lineNumber":41,"author":{"gitID":"deeheenguyen"},"content":"        assertTrue(predicate.test(new PersonBuilder().withEmail(\"abc@example.com\").build()));"},{"lineNumber":42,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"deeheenguyen"},"content":"}"}],"authorContributionMap":{"deeheenguyen":43}},{"path":"src/test/java/seedu/address/model/person/RemarkTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"tiny767"},"content":"//@@author tiny767"},{"lineNumber":9,"author":{"gitID":"tiny767"},"content":"public class RemarkTest {"},{"lineNumber":10,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":11,"author":{"gitID":"tiny767"},"content":"    @Test"},{"lineNumber":12,"author":{"gitID":"tiny767"},"content":"    public void equals() {"},{"lineNumber":13,"author":{"gitID":"tiny767"},"content":"        Remark remark \u003d new Remark(\"Like fishing\");"},{"lineNumber":14,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":15,"author":{"gitID":"tiny767"},"content":"        // same object -\u003e returns true"},{"lineNumber":16,"author":{"gitID":"tiny767"},"content":"        assertTrue(remark.equals(remark));"},{"lineNumber":17,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":18,"author":{"gitID":"tiny767"},"content":"        // same values -\u003e returns true"},{"lineNumber":19,"author":{"gitID":"tiny767"},"content":"        Remark remarkCopy \u003d new Remark(remark.value);"},{"lineNumber":20,"author":{"gitID":"tiny767"},"content":"        assertTrue(remark.equals(remarkCopy));"},{"lineNumber":21,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":22,"author":{"gitID":"tiny767"},"content":"        // different types -\u003e returns false"},{"lineNumber":23,"author":{"gitID":"tiny767"},"content":"        assertFalse(remark.equals(1));"},{"lineNumber":24,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":25,"author":{"gitID":"tiny767"},"content":"        // null -\u003e returns false"},{"lineNumber":26,"author":{"gitID":"tiny767"},"content":"        assertFalse(remark.equals(null));"},{"lineNumber":27,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":28,"author":{"gitID":"tiny767"},"content":"        // different remark -\u003e returns false"},{"lineNumber":29,"author":{"gitID":"tiny767"},"content":"        Remark differentRemark \u003d new Remark(\"Like walking\");"},{"lineNumber":30,"author":{"gitID":"tiny767"},"content":"        assertFalse(remark.equals(differentRemark));"},{"lineNumber":31,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"tiny767"},"content":"}"}],"authorContributionMap":{"-":7,"tiny767":25}},{"path":"src/test/java/seedu/address/logic/commands/EditJobCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_FE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_JOBTITLE_BE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_BE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_BE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showJobAtIndex;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_JOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_JOB;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalJobs.getTypicalAddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditJobDescriptorBuilder;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.testutil.JobBuilder;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"ChengSashankh"},"content":"//@@author ChengSashankh"},{"lineNumber":35,"author":{"gitID":"ChengSashankh"},"content":"public class EditJobCommandTest {"},{"lineNumber":36,"author":{"gitID":"ChengSashankh"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":38,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"ChengSashankh"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":40,"author":{"gitID":"ChengSashankh"},"content":"        Job editedJob \u003d new JobBuilder().build();"},{"lineNumber":41,"author":{"gitID":"ChengSashankh"},"content":"        EditJobCommand.EditJobDescriptor descriptor \u003d new EditJobDescriptorBuilder(editedJob).build();"},{"lineNumber":42,"author":{"gitID":"ChengSashankh"},"content":"        EditJobCommand editJobCommand \u003d prepareCommand(INDEX_FIRST_JOB, descriptor);"},{"lineNumber":43,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":44,"author":{"gitID":"ChengSashankh"},"content":"        String expectedMessage \u003d String.format(EditJobCommand.MESSAGE_EDIT_JOB_SUCCESS, editedJob);"},{"lineNumber":45,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":46,"author":{"gitID":"ChengSashankh"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":47,"author":{"gitID":"ChengSashankh"},"content":"        expectedModel.updateJob(model.getFilteredJobList().get(0), editedJob);"},{"lineNumber":48,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":49,"author":{"gitID":"ChengSashankh"},"content":"        assertCommandSuccess(editJobCommand, model, expectedMessage, expectedModel);"},{"lineNumber":50,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":52,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"ChengSashankh"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":54,"author":{"gitID":"ChengSashankh"},"content":"        Index indexLastJob \u003d Index.fromOneBased(model.getFilteredJobList().size());"},{"lineNumber":55,"author":{"gitID":"ChengSashankh"},"content":"        Job lastJob \u003d model.getFilteredJobList().get(indexLastJob.getZeroBased());"},{"lineNumber":56,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":57,"author":{"gitID":"ChengSashankh"},"content":"        JobBuilder jobInList \u003d new JobBuilder(lastJob);"},{"lineNumber":58,"author":{"gitID":"ChengSashankh"},"content":"        Job editedJob \u003d jobInList.withJobTitle(VALID_JOBTITLE_BE).withLocation(VALID_LOCATION_BE)"},{"lineNumber":59,"author":{"gitID":"ChengSashankh"},"content":"                .withTags(VALID_TAG_BE).build();"},{"lineNumber":60,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":61,"author":{"gitID":"ChengSashankh"},"content":"        EditJobCommand.EditJobDescriptor descriptor \u003d new EditJobDescriptorBuilder().withJobTitle(VALID_JOBTITLE_BE)"},{"lineNumber":62,"author":{"gitID":"ChengSashankh"},"content":"                .withLocation(VALID_LOCATION_BE).withTags(VALID_TAG_BE).build();"},{"lineNumber":63,"author":{"gitID":"ChengSashankh"},"content":"        EditJobCommand editJobCommand \u003d prepareCommand(indexLastJob, descriptor);"},{"lineNumber":64,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":65,"author":{"gitID":"ChengSashankh"},"content":"        String expectedMessage \u003d String.format(EditJobCommand.MESSAGE_EDIT_JOB_SUCCESS, editedJob);"},{"lineNumber":66,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":67,"author":{"gitID":"ChengSashankh"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":68,"author":{"gitID":"ChengSashankh"},"content":"        expectedModel.updateJob(lastJob, editedJob);"},{"lineNumber":69,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":70,"author":{"gitID":"ChengSashankh"},"content":"        assertCommandSuccess(editJobCommand, model, expectedMessage, expectedModel);"},{"lineNumber":71,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":73,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"ChengSashankh"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":75,"author":{"gitID":"ChengSashankh"},"content":"        EditJobCommand editJobCommand \u003d prepareCommand(INDEX_FIRST_JOB, new EditJobCommand.EditJobDescriptor());"},{"lineNumber":76,"author":{"gitID":"ChengSashankh"},"content":"        Job editedJob \u003d model.getFilteredJobList().get(INDEX_FIRST_JOB.getZeroBased());"},{"lineNumber":77,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":78,"author":{"gitID":"ChengSashankh"},"content":"        String expectedMessage \u003d String.format(EditJobCommand.MESSAGE_EDIT_JOB_SUCCESS, editedJob);"},{"lineNumber":79,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":80,"author":{"gitID":"ChengSashankh"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":81,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":82,"author":{"gitID":"ChengSashankh"},"content":"        assertCommandSuccess(editJobCommand, model, expectedMessage, expectedModel);"},{"lineNumber":83,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":85,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"ChengSashankh"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":87,"author":{"gitID":"ChengSashankh"},"content":"        showJobAtIndex(model, INDEX_FIRST_JOB);"},{"lineNumber":88,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":89,"author":{"gitID":"ChengSashankh"},"content":"        Job jobInFilteredList \u003d model.getFilteredJobList().get(INDEX_FIRST_JOB.getZeroBased());"},{"lineNumber":90,"author":{"gitID":"ChengSashankh"},"content":"        Job editedJob \u003d new JobBuilder(jobInFilteredList).withJobTitle(VALID_JOBTITLE_BE).build();"},{"lineNumber":91,"author":{"gitID":"ChengSashankh"},"content":"        EditJobCommand editJobCommand \u003d prepareCommand(INDEX_FIRST_JOB,"},{"lineNumber":92,"author":{"gitID":"ChengSashankh"},"content":"                new EditJobDescriptorBuilder().withJobTitle(VALID_JOBTITLE_BE).build());"},{"lineNumber":93,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":94,"author":{"gitID":"ChengSashankh"},"content":"        String expectedMessage \u003d String.format(EditJobCommand.MESSAGE_EDIT_JOB_SUCCESS, editedJob);"},{"lineNumber":95,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":96,"author":{"gitID":"ChengSashankh"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":97,"author":{"gitID":"ChengSashankh"},"content":"        expectedModel.updateJob(model.getFilteredJobList().get(0), editedJob);"},{"lineNumber":98,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":99,"author":{"gitID":"ChengSashankh"},"content":"        assertCommandSuccess(editJobCommand, model, expectedMessage, expectedModel);"},{"lineNumber":100,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":102,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"ChengSashankh"},"content":"    public void execute_duplicateJobUnfilteredList_failure() {"},{"lineNumber":104,"author":{"gitID":"ChengSashankh"},"content":"        Job firstJob \u003d model.getFilteredJobList().get(INDEX_FIRST_JOB.getZeroBased());"},{"lineNumber":105,"author":{"gitID":"ChengSashankh"},"content":"        EditJobCommand.EditJobDescriptor descriptor \u003d new EditJobDescriptorBuilder(firstJob).build();"},{"lineNumber":106,"author":{"gitID":"ChengSashankh"},"content":"        EditJobCommand editJobCommand \u003d prepareCommand(INDEX_SECOND_JOB, descriptor);"},{"lineNumber":107,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":108,"author":{"gitID":"ChengSashankh"},"content":"        assertCommandFailure(editJobCommand, model, EditJobCommand.MESSAGE_DUPLICATE_JOB);"},{"lineNumber":109,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":111,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"ChengSashankh"},"content":"    public void execute_duplicateJobFilteredList_failure() {"},{"lineNumber":113,"author":{"gitID":"ChengSashankh"},"content":"        showJobAtIndex(model, INDEX_FIRST_JOB);"},{"lineNumber":114,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":115,"author":{"gitID":"ChengSashankh"},"content":"        // edit job in filtered list into a duplicate in address book"},{"lineNumber":116,"author":{"gitID":"ChengSashankh"},"content":"        Job jobInList \u003d model.getAddressBook().getJobList().get(INDEX_SECOND_JOB.getZeroBased());"},{"lineNumber":117,"author":{"gitID":"ChengSashankh"},"content":"        EditJobCommand editJobCommand \u003d prepareCommand(INDEX_FIRST_JOB,"},{"lineNumber":118,"author":{"gitID":"ChengSashankh"},"content":"                new EditJobDescriptorBuilder(jobInList).build());"},{"lineNumber":119,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":120,"author":{"gitID":"ChengSashankh"},"content":"        assertCommandFailure(editJobCommand, model, EditJobCommand.MESSAGE_DUPLICATE_JOB);"},{"lineNumber":121,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":123,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":124,"author":{"gitID":"ChengSashankh"},"content":"    public void execute_invalidJobIndexUnfilteredList_failure() {"},{"lineNumber":125,"author":{"gitID":"ChengSashankh"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredJobList().size() + 1);"},{"lineNumber":126,"author":{"gitID":"ChengSashankh"},"content":"        EditJobCommand.EditJobDescriptor descriptor \u003d new EditJobDescriptorBuilder()"},{"lineNumber":127,"author":{"gitID":"ChengSashankh"},"content":"                .withJobTitle(VALID_JOBTITLE_BE).build();"},{"lineNumber":128,"author":{"gitID":"ChengSashankh"},"content":"        EditJobCommand editJobCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":129,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":130,"author":{"gitID":"ChengSashankh"},"content":"        assertCommandFailure(editJobCommand, model, Messages.MESSAGE_INVALID_JOB_DISPLAYED_INDEX);"},{"lineNumber":131,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":133,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"ChengSashankh"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":135,"author":{"gitID":"ChengSashankh"},"content":"     * but smaller than size of address book"},{"lineNumber":136,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":138,"author":{"gitID":"ChengSashankh"},"content":"    public void execute_invalidJobIndexFilteredList_failure() {"},{"lineNumber":139,"author":{"gitID":"ChengSashankh"},"content":"        showJobAtIndex(model, INDEX_FIRST_JOB);"},{"lineNumber":140,"author":{"gitID":"ChengSashankh"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_JOB;"},{"lineNumber":141,"author":{"gitID":"ChengSashankh"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":142,"author":{"gitID":"ChengSashankh"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getJobList().size());"},{"lineNumber":143,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":144,"author":{"gitID":"ChengSashankh"},"content":"        EditJobCommand editJobCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":145,"author":{"gitID":"ChengSashankh"},"content":"                new EditJobDescriptorBuilder().withJobTitle(VALID_JOBTITLE_BE).build());"},{"lineNumber":146,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":147,"author":{"gitID":"ChengSashankh"},"content":"        assertCommandFailure(editJobCommand, model, Messages.MESSAGE_INVALID_JOB_DISPLAYED_INDEX);"},{"lineNumber":148,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":150,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":151,"author":{"gitID":"ChengSashankh"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":152,"author":{"gitID":"ChengSashankh"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":153,"author":{"gitID":"ChengSashankh"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":154,"author":{"gitID":"ChengSashankh"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":155,"author":{"gitID":"ChengSashankh"},"content":"        Job editedJob \u003d new JobBuilder().build();"},{"lineNumber":156,"author":{"gitID":"ChengSashankh"},"content":"        Job jobToEdit \u003d model.getFilteredJobList().get(INDEX_FIRST_JOB.getZeroBased());"},{"lineNumber":157,"author":{"gitID":"ChengSashankh"},"content":"        EditJobCommand.EditJobDescriptor descriptor \u003d new EditJobDescriptorBuilder(editedJob).build();"},{"lineNumber":158,"author":{"gitID":"ChengSashankh"},"content":"        EditJobCommand editJobCommand \u003d prepareCommand(INDEX_FIRST_JOB, descriptor);"},{"lineNumber":159,"author":{"gitID":"ChengSashankh"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":160,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":161,"author":{"gitID":"ChengSashankh"},"content":"        // edit -\u003e first job edited"},{"lineNumber":162,"author":{"gitID":"ChengSashankh"},"content":"        editJobCommand.execute();"},{"lineNumber":163,"author":{"gitID":"ChengSashankh"},"content":"        undoRedoStack.push(editJobCommand);"},{"lineNumber":164,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":165,"author":{"gitID":"ChengSashankh"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered job list to show all job"},{"lineNumber":166,"author":{"gitID":"ChengSashankh"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":167,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":168,"author":{"gitID":"ChengSashankh"},"content":"        // redo -\u003e same first job edited again"},{"lineNumber":169,"author":{"gitID":"ChengSashankh"},"content":"        expectedModel.updateJob(jobToEdit, editedJob);"},{"lineNumber":170,"author":{"gitID":"ChengSashankh"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":171,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":173,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":174,"author":{"gitID":"ChengSashankh"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":175,"author":{"gitID":"ChengSashankh"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":176,"author":{"gitID":"ChengSashankh"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":177,"author":{"gitID":"ChengSashankh"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":178,"author":{"gitID":"ChengSashankh"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredJobList().size() + 1);"},{"lineNumber":179,"author":{"gitID":"ChengSashankh"},"content":"        EditJobCommand.EditJobDescriptor descriptor \u003d new EditJobDescriptorBuilder()"},{"lineNumber":180,"author":{"gitID":"ChengSashankh"},"content":"                .withJobTitle(VALID_JOBTITLE_BE).build();"},{"lineNumber":181,"author":{"gitID":"ChengSashankh"},"content":"        EditJobCommand editJobCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":182,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":183,"author":{"gitID":"ChengSashankh"},"content":"        // execution failed -\u003e editJobCommand not pushed into undoRedoStack"},{"lineNumber":184,"author":{"gitID":"ChengSashankh"},"content":"        assertCommandFailure(editJobCommand, model, Messages.MESSAGE_INVALID_JOB_DISPLAYED_INDEX);"},{"lineNumber":185,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":186,"author":{"gitID":"ChengSashankh"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":187,"author":{"gitID":"ChengSashankh"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":188,"author":{"gitID":"ChengSashankh"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":189,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":191,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":192,"author":{"gitID":"ChengSashankh"},"content":"     * 1. Edits a {@code Person} from a filtered list."},{"lineNumber":193,"author":{"gitID":"ChengSashankh"},"content":"     * 2. Undo the edit."},{"lineNumber":194,"author":{"gitID":"ChengSashankh"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"},{"lineNumber":195,"author":{"gitID":"ChengSashankh"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":196,"author":{"gitID":"ChengSashankh"},"content":"     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."},{"lineNumber":197,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":198,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":199,"author":{"gitID":"ChengSashankh"},"content":"    public void executeUndoRedo_validIndexFilteredList_sameJobEdited() throws Exception {"},{"lineNumber":200,"author":{"gitID":"ChengSashankh"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":201,"author":{"gitID":"ChengSashankh"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":202,"author":{"gitID":"ChengSashankh"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":203,"author":{"gitID":"ChengSashankh"},"content":"        Job editedJob \u003d new JobBuilder().build();"},{"lineNumber":204,"author":{"gitID":"ChengSashankh"},"content":"        EditJobCommand.EditJobDescriptor descriptor \u003d new EditJobDescriptorBuilder(editedJob).build();"},{"lineNumber":205,"author":{"gitID":"ChengSashankh"},"content":"        EditJobCommand editJobCommand \u003d prepareCommand(INDEX_FIRST_JOB, descriptor);"},{"lineNumber":206,"author":{"gitID":"ChengSashankh"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":207,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":208,"author":{"gitID":"ChengSashankh"},"content":"        showJobAtIndex(model, INDEX_SECOND_JOB);"},{"lineNumber":209,"author":{"gitID":"ChengSashankh"},"content":"        Job jobToEdit \u003d model.getFilteredJobList().get(INDEX_FIRST_JOB.getZeroBased());"},{"lineNumber":210,"author":{"gitID":"ChengSashankh"},"content":"        // edit -\u003e edits second job in unfiltered job list / first job in filtered job list"},{"lineNumber":211,"author":{"gitID":"ChengSashankh"},"content":"        editJobCommand.execute();"},{"lineNumber":212,"author":{"gitID":"ChengSashankh"},"content":"        undoRedoStack.push(editJobCommand);"},{"lineNumber":213,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":214,"author":{"gitID":"ChengSashankh"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered job list to show all jobs"},{"lineNumber":215,"author":{"gitID":"ChengSashankh"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":216,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":217,"author":{"gitID":"ChengSashankh"},"content":"        expectedModel.updateJob(jobToEdit, editedJob);"},{"lineNumber":218,"author":{"gitID":"ChengSashankh"},"content":"        assertNotEquals(model.getFilteredJobList().get(INDEX_FIRST_JOB.getZeroBased()), jobToEdit);"},{"lineNumber":219,"author":{"gitID":"ChengSashankh"},"content":"        // redo -\u003e edits same second person in unfiltered person list"},{"lineNumber":220,"author":{"gitID":"ChengSashankh"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":221,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":223,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":224,"author":{"gitID":"ChengSashankh"},"content":"    public void equals() throws Exception {"},{"lineNumber":225,"author":{"gitID":"ChengSashankh"},"content":"        final EditJobCommand standardCommand \u003d prepareCommand(INDEX_FIRST_JOB, DESC_FE);"},{"lineNumber":226,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":227,"author":{"gitID":"ChengSashankh"},"content":"        // same values -\u003e returns true"},{"lineNumber":228,"author":{"gitID":"ChengSashankh"},"content":"        EditJobCommand.EditJobDescriptor copyDescriptor \u003d new EditJobCommand.EditJobDescriptor(DESC_FE);"},{"lineNumber":229,"author":{"gitID":"ChengSashankh"},"content":"        EditJobCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_JOB, copyDescriptor);"},{"lineNumber":230,"author":{"gitID":"ChengSashankh"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":231,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":232,"author":{"gitID":"ChengSashankh"},"content":"        // same object -\u003e returns true"},{"lineNumber":233,"author":{"gitID":"ChengSashankh"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":234,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":235,"author":{"gitID":"ChengSashankh"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":236,"author":{"gitID":"ChengSashankh"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":237,"author":{"gitID":"ChengSashankh"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":238,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":239,"author":{"gitID":"ChengSashankh"},"content":"        // null -\u003e returns false"},{"lineNumber":240,"author":{"gitID":"ChengSashankh"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":241,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":242,"author":{"gitID":"ChengSashankh"},"content":"        // different types -\u003e returns false"},{"lineNumber":243,"author":{"gitID":"ChengSashankh"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":244,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":245,"author":{"gitID":"ChengSashankh"},"content":"        // different index -\u003e returns false"},{"lineNumber":246,"author":{"gitID":"ChengSashankh"},"content":"        assertFalse(standardCommand.equals(new EditJobCommand(INDEX_SECOND_JOB, DESC_FE)));"},{"lineNumber":247,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":248,"author":{"gitID":"ChengSashankh"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":249,"author":{"gitID":"ChengSashankh"},"content":"        assertFalse(standardCommand.equals(new EditJobCommand(INDEX_FIRST_JOB, DESC_BE)));"},{"lineNumber":250,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":252,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":253,"author":{"gitID":"ChengSashankh"},"content":"     * Returns an {@code EditJobCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":254,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":255,"author":{"gitID":"ChengSashankh"},"content":"    private EditJobCommand prepareCommand(Index index, EditJobCommand.EditJobDescriptor descriptor) {"},{"lineNumber":256,"author":{"gitID":"ChengSashankh"},"content":"        EditJobCommand editJobCommand \u003d new EditJobCommand(index, descriptor);"},{"lineNumber":257,"author":{"gitID":"ChengSashankh"},"content":"        editJobCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":258,"author":{"gitID":"ChengSashankh"},"content":"        return editJobCommand;"},{"lineNumber":259,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":260,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":261,"author":{"gitID":"ChengSashankh"},"content":"}"},{"lineNumber":262,"author":{"gitID":"ChengSashankh"},"content":"//@@author"}],"authorContributionMap":{"ChengSashankh":229,"-":33}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NONEXISTENT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":25,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.Interview;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.report.Report;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private final AddressBook addressBookWithBobAndAlice \u003d"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            new AddressBookBuilder().withPerson(BOB).withPerson(ALICE).build();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private final AddressBook addressBookWithBobAndAmy \u003d"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            new AddressBookBuilder().withPerson(BOB).withPerson(AMY).build();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void deleteTag_nonExistentTag_noChangesToAddressBook() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        addressBookWithBobAndAlice.deleteTag(new Tag(VALID_TAG_NONEXISTENT));"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(BOB).withPerson(ALICE).build();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddressBook, addressBookWithBobAndAlice);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void deleteTag_tagExistsForSomeUsers_tagRemovedFromAllPersons() throws Exception {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        addressBookWithBobAndAmy.deleteTag(new Tag(VALID_TAG_FRIEND));"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Person bobWithFriendTag \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        Person amyWithoutFriendTag \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                new AddressBookBuilder().withPerson(bobWithFriendTag).withPerson(amyWithoutFriendTag).build();"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddressBook, addressBookWithBobAndAmy);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        addressBook.getPersonList().remove(0);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons and tags lists can violate interface constraints."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cJob\u003e jobs \u003d FXCollections.observableArrayList();"},{"lineNumber":116,"author":{"gitID":"deeheenguyen"},"content":"        private final ObservableList\u003cInterview\u003e interviews \u003d FXCollections.observableArrayList();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cReport\u003e reports \u003d FXCollections.observableArrayList();"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003c? extends Tag\u003e tags) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003c? extends Tag\u003e tags, Collection\u003cJob\u003e jobs) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            this.jobs.setAll(jobs);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            return persons;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        public ObservableList\u003cJob\u003e getJobList() {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            return jobs;"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":146,"author":{"gitID":"deeheenguyen"},"content":"        @Override"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        public ObservableList\u003cReport\u003e getReportList() {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            return reports;"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":151,"author":{"gitID":"deeheenguyen"},"content":"        @Override"},{"lineNumber":152,"author":{"gitID":"deeheenguyen"},"content":"        public ObservableList\u003cInterview\u003e getInterviewList() {"},{"lineNumber":153,"author":{"gitID":"deeheenguyen"},"content":"            return interviews;"},{"lineNumber":154,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"deeheenguyen":9,"-":147}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedJobTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.storage.XmlAdaptedJob.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalJobs.FRONTEND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.job.JobTitle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Location;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.skill.Skill;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"ChengSashankh"},"content":"//@@author ChengSashankh"},{"lineNumber":19,"author":{"gitID":"ChengSashankh"},"content":"public class XmlAdaptedJobTest {"},{"lineNumber":20,"author":{"gitID":"ChengSashankh"},"content":"    private static final String INVALID_JOBTITLE \u003d \"B!@@#\";"},{"lineNumber":21,"author":{"gitID":"ChengSashankh"},"content":"    private static final String INVALID_LOCATION \u003d \" \";"},{"lineNumber":22,"author":{"gitID":"ChengSashankh"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":23,"author":{"gitID":"ChengSashankh"},"content":"    private static final String INVALID_SKILL \u003d \"\";"},{"lineNumber":24,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":25,"author":{"gitID":"ChengSashankh"},"content":"    private static final String VALID_JOBTITLE \u003d FRONTEND.getJobTitle().toString();"},{"lineNumber":26,"author":{"gitID":"ChengSashankh"},"content":"    private static final String VALID_LOCATION \u003d FRONTEND.getLocation().toString();"},{"lineNumber":27,"author":{"gitID":"ChengSashankh"},"content":"    private static final String VALID_SKILL \u003d FRONTEND.getSkills().toString();"},{"lineNumber":28,"author":{"gitID":"ChengSashankh"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d FRONTEND.getTags().stream()"},{"lineNumber":29,"author":{"gitID":"ChengSashankh"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":30,"author":{"gitID":"ChengSashankh"},"content":"            .collect(Collectors.toList());"},{"lineNumber":31,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":32,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"ChengSashankh"},"content":"    public void toModelType_invalidJobTitle_throwsIllegalValueException() {"},{"lineNumber":34,"author":{"gitID":"ChengSashankh"},"content":"        XmlAdaptedJob job \u003d"},{"lineNumber":35,"author":{"gitID":"ChengSashankh"},"content":"                new XmlAdaptedJob(INVALID_JOBTITLE, VALID_LOCATION, VALID_SKILL, VALID_TAGS);"},{"lineNumber":36,"author":{"gitID":"ChengSashankh"},"content":"        String expectedMessage \u003d JobTitle.MESSAGE_TITLE_CONSTRAINTS;"},{"lineNumber":37,"author":{"gitID":"ChengSashankh"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, job::toModelType);"},{"lineNumber":38,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":40,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"ChengSashankh"},"content":"    public void toModelType_nullJobTitle_throwsIllegalValueException() {"},{"lineNumber":42,"author":{"gitID":"ChengSashankh"},"content":"        XmlAdaptedJob job \u003d new XmlAdaptedJob(null, VALID_LOCATION, VALID_SKILL, VALID_TAGS);"},{"lineNumber":43,"author":{"gitID":"ChengSashankh"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, JobTitle.class.getSimpleName());"},{"lineNumber":44,"author":{"gitID":"ChengSashankh"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, job::toModelType);"},{"lineNumber":45,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":47,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"ChengSashankh"},"content":"    public void toModelType_invalidLocation_throwsIllegalValueException() {"},{"lineNumber":49,"author":{"gitID":"ChengSashankh"},"content":"        XmlAdaptedJob job \u003d"},{"lineNumber":50,"author":{"gitID":"ChengSashankh"},"content":"                new XmlAdaptedJob(VALID_JOBTITLE, INVALID_LOCATION, VALID_SKILL, VALID_TAGS);"},{"lineNumber":51,"author":{"gitID":"ChengSashankh"},"content":"        String expectedMessage \u003d Location.MESSAGE_LOCATION_CONSTRAINTS;"},{"lineNumber":52,"author":{"gitID":"ChengSashankh"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, job::toModelType);"},{"lineNumber":53,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":55,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"ChengSashankh"},"content":"    public void toModelType_nullLocation_throwsIllegalValueException() {"},{"lineNumber":57,"author":{"gitID":"ChengSashankh"},"content":"        XmlAdaptedJob job \u003d new XmlAdaptedJob(VALID_JOBTITLE, null, VALID_SKILL, VALID_TAGS);"},{"lineNumber":58,"author":{"gitID":"ChengSashankh"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Location.class.getSimpleName());"},{"lineNumber":59,"author":{"gitID":"ChengSashankh"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, job::toModelType);"},{"lineNumber":60,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":62,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"ChengSashankh"},"content":"    public void toModelType_invalidSkills_throwsIllegalValueException() {"},{"lineNumber":64,"author":{"gitID":"ChengSashankh"},"content":"        XmlAdaptedJob job \u003d"},{"lineNumber":65,"author":{"gitID":"ChengSashankh"},"content":"                new XmlAdaptedJob(VALID_JOBTITLE, VALID_LOCATION, INVALID_SKILL, VALID_TAGS);"},{"lineNumber":66,"author":{"gitID":"ChengSashankh"},"content":"        String expectedMessage \u003d Skill.MESSAGE_SKILL_CONSTRAINTS;"},{"lineNumber":67,"author":{"gitID":"ChengSashankh"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, job::toModelType);"},{"lineNumber":68,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":70,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"ChengSashankh"},"content":"    public void toModelType_nullSkills_throwsIllegalValueException() {"},{"lineNumber":72,"author":{"gitID":"ChengSashankh"},"content":"        XmlAdaptedJob job \u003d new XmlAdaptedJob(VALID_JOBTITLE, VALID_LOCATION, null, VALID_TAGS);"},{"lineNumber":73,"author":{"gitID":"ChengSashankh"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Skill.class.getSimpleName());"},{"lineNumber":74,"author":{"gitID":"ChengSashankh"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, job::toModelType);"},{"lineNumber":75,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":77,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"ChengSashankh"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":79,"author":{"gitID":"ChengSashankh"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":80,"author":{"gitID":"ChengSashankh"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":81,"author":{"gitID":"ChengSashankh"},"content":"        XmlAdaptedJob job \u003d"},{"lineNumber":82,"author":{"gitID":"ChengSashankh"},"content":"                new XmlAdaptedJob(VALID_JOBTITLE, VALID_LOCATION, VALID_SKILL, invalidTags);"},{"lineNumber":83,"author":{"gitID":"ChengSashankh"},"content":"        Assert.assertThrows(IllegalValueException.class, job::toModelType);"},{"lineNumber":84,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":86,"author":{"gitID":"ChengSashankh"},"content":"}"},{"lineNumber":87,"author":{"gitID":"ChengSashankh"},"content":"//@@author"}],"authorContributionMap":{"ChengSashankh":70,"-":17}},{"path":"src/test/java/seedu/address/model/interview/InterviewLocationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"deeheenguyen"},"content":"//author@@ deeheenguyen"},{"lineNumber":2,"author":{"gitID":"deeheenguyen"},"content":"package seedu.address.model.interview;"},{"lineNumber":3,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":11,"author":{"gitID":"deeheenguyen"},"content":"public class InterviewLocationTest {"},{"lineNumber":12,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"deeheenguyen"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new InterviewLocation(null));"},{"lineNumber":16,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":18,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"deeheenguyen"},"content":"    public void constructor_invalidLocation_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"deeheenguyen"},"content":"        String invalidInterviewLocation \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"deeheenguyen"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new InterviewLocation(invalidInterviewLocation));"},{"lineNumber":22,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"deeheenguyen"},"content":"    public void isValidLocation() {"},{"lineNumber":26,"author":{"gitID":"deeheenguyen"},"content":"        // null location"},{"lineNumber":27,"author":{"gitID":"deeheenguyen"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e InterviewLocation.isValidLocation(null));"},{"lineNumber":28,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":29,"author":{"gitID":"deeheenguyen"},"content":"        // invalid location"},{"lineNumber":30,"author":{"gitID":"deeheenguyen"},"content":"        assertFalse(InterviewLocation.isValidLocation(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"deeheenguyen"},"content":"        assertFalse(InterviewLocation.isValidLocation(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":33,"author":{"gitID":"deeheenguyen"},"content":"        // valid addresses"},{"lineNumber":34,"author":{"gitID":"deeheenguyen"},"content":"        assertTrue(InterviewLocation.isValidLocation(\"NUS\")); // Only alphabetic characters"},{"lineNumber":35,"author":{"gitID":"deeheenguyen"},"content":"        assertTrue(InterviewLocation.isValidLocation(\"UTOWN-NUS \")); // Contains non-alphanumeric characters"},{"lineNumber":36,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"deeheenguyen"},"content":"}"}],"authorContributionMap":{"deeheenguyen":32,"-":5}},{"path":"src/test/java/seedu/address/model/person/PersonContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"anh2111"},"content":"// @@author anh2111"},{"lineNumber":2,"author":{"gitID":"anh2111"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":4,"author":{"gitID":"anh2111"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"anh2111"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":7,"author":{"gitID":"anh2111"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"anh2111"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitID":"anh2111"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":11,"author":{"gitID":"anh2111"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":13,"author":{"gitID":"anh2111"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":14,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":15,"author":{"gitID":"anh2111"},"content":"public class PersonContainsKeywordsPredicateTest {"},{"lineNumber":16,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":17,"author":{"gitID":"anh2111"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"anh2111"},"content":"    public void equals() {"},{"lineNumber":19,"author":{"gitID":"anh2111"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":20,"author":{"gitID":"anh2111"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":21,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":22,"author":{"gitID":"anh2111"},"content":"        PersonContainsKeywordsPredicate firstPredicate;"},{"lineNumber":23,"author":{"gitID":"anh2111"},"content":"        firstPredicate \u003d new PersonContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":24,"author":{"gitID":"anh2111"},"content":"        PersonContainsKeywordsPredicate secondPredicate;"},{"lineNumber":25,"author":{"gitID":"anh2111"},"content":"        secondPredicate \u003d new PersonContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":26,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":27,"author":{"gitID":"anh2111"},"content":"        // same object -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"anh2111"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":29,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":30,"author":{"gitID":"anh2111"},"content":"        // same values -\u003e returns true"},{"lineNumber":31,"author":{"gitID":"anh2111"},"content":"        PersonContainsKeywordsPredicate firstPredicateCopy;"},{"lineNumber":32,"author":{"gitID":"anh2111"},"content":"        firstPredicateCopy \u003d new PersonContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":33,"author":{"gitID":"anh2111"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":34,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":35,"author":{"gitID":"anh2111"},"content":"        // different types -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"anh2111"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":37,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":38,"author":{"gitID":"anh2111"},"content":"        // null -\u003e returns false"},{"lineNumber":39,"author":{"gitID":"anh2111"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":40,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":41,"author":{"gitID":"anh2111"},"content":"        // different person -\u003e returns false"},{"lineNumber":42,"author":{"gitID":"anh2111"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":43,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":45,"author":{"gitID":"anh2111"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"anh2111"},"content":"    public void test_personContainsKeywords_returnsTrue() {"},{"lineNumber":47,"author":{"gitID":"anh2111"},"content":"        // One keyword"},{"lineNumber":48,"author":{"gitID":"anh2111"},"content":"        PersonContainsKeywordsPredicate predicate;"},{"lineNumber":49,"author":{"gitID":"anh2111"},"content":"        predicate \u003d new PersonContainsKeywordsPredicate(Collections.singletonList(\"55555\"));"},{"lineNumber":50,"author":{"gitID":"anh2111"},"content":"        assertTrue(predicate.test(new PersonBuilder().withPhone(\"55555\").build()));"},{"lineNumber":51,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":52,"author":{"gitID":"anh2111"},"content":"        predicate \u003d new PersonContainsKeywordsPredicate(Collections.singletonList(\"anh@gmail.com\"));"},{"lineNumber":53,"author":{"gitID":"anh2111"},"content":"        assertTrue(predicate.test(new PersonBuilder().withEmail(\"anh@gmail.com\").build()));"},{"lineNumber":54,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":55,"author":{"gitID":"anh2111"},"content":"        // Multiple keywords"},{"lineNumber":56,"author":{"gitID":"anh2111"},"content":"        predicate \u003d new PersonContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"},{"lineNumber":57,"author":{"gitID":"anh2111"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":58,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":59,"author":{"gitID":"anh2111"},"content":"        predicate \u003d new PersonContainsKeywordsPredicate(Arrays.asList(\"school\", \"friends\"));"},{"lineNumber":60,"author":{"gitID":"anh2111"},"content":"        assertTrue(predicate.test(new PersonBuilder().withTags(\"school\", \"friends\").build()));"},{"lineNumber":61,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":62,"author":{"gitID":"anh2111"},"content":"        // Only one matching keyword"},{"lineNumber":63,"author":{"gitID":"anh2111"},"content":"        predicate \u003d new PersonContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"},{"lineNumber":64,"author":{"gitID":"anh2111"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"},{"lineNumber":65,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":66,"author":{"gitID":"anh2111"},"content":"        // Mixed-case keywords"},{"lineNumber":67,"author":{"gitID":"anh2111"},"content":"        predicate \u003d new PersonContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"},{"lineNumber":68,"author":{"gitID":"anh2111"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":69,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":70,"author":{"gitID":"anh2111"},"content":"        predicate \u003d new PersonContainsKeywordsPredicate(Collections.singletonList(\"DUC@GMail.com\"));"},{"lineNumber":71,"author":{"gitID":"anh2111"},"content":"        assertTrue(predicate.test(new PersonBuilder().withEmail(\"duc@gmail.com\").build()));"},{"lineNumber":72,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":74,"author":{"gitID":"anh2111"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"anh2111"},"content":"    public void test_personDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":76,"author":{"gitID":"anh2111"},"content":"        // Zero keywords"},{"lineNumber":77,"author":{"gitID":"anh2111"},"content":"        PersonContainsKeywordsPredicate predicate \u003d new PersonContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":78,"author":{"gitID":"anh2111"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"},{"lineNumber":79,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":80,"author":{"gitID":"anh2111"},"content":"        // Non-matching keyword"},{"lineNumber":81,"author":{"gitID":"anh2111"},"content":"        predicate \u003d new PersonContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"},{"lineNumber":82,"author":{"gitID":"anh2111"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":83,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":84,"author":{"gitID":"anh2111"},"content":"        // Keywords match address, but does not match name or email or phone number or tags"},{"lineNumber":85,"author":{"gitID":"anh2111"},"content":"        predicate \u003d new PersonContainsKeywordsPredicate(Arrays.asList(\"Main\", \"Street\"));"},{"lineNumber":86,"author":{"gitID":"anh2111"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":87,"author":{"gitID":"anh2111"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withTags(\"school\", \"friends\").build()));"},{"lineNumber":88,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"anh2111"},"content":"}"},{"lineNumber":90,"author":{"gitID":"anh2111"},"content":"// @@author"}],"authorContributionMap":{"anh2111":90}},{"path":"src/test/java/seedu/address/model/interview/InterviewMatchIntervieweeTest.java","lines":[{"lineNumber":1,"author":{"gitID":"deeheenguyen"},"content":"//@@author deeheenguyen"},{"lineNumber":2,"author":{"gitID":"deeheenguyen"},"content":"package seedu.address.model.interview;"},{"lineNumber":3,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":4,"author":{"gitID":"deeheenguyen"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"deeheenguyen"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":7,"author":{"gitID":"deeheenguyen"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":9,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.testutil.InterviewBuilder;"},{"lineNumber":10,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":11,"author":{"gitID":"deeheenguyen"},"content":"public class InterviewMatchIntervieweeTest {"},{"lineNumber":12,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":"    public void equals() {"},{"lineNumber":15,"author":{"gitID":"deeheenguyen"},"content":"        String firstPredicateKeywordList \u003d \"first\";"},{"lineNumber":16,"author":{"gitID":"deeheenguyen"},"content":"        String secondPredicateKeywordList \u003d \"second\";"},{"lineNumber":17,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":18,"author":{"gitID":"deeheenguyen"},"content":"        InterviewMatchInterviewee firstPredicate;"},{"lineNumber":19,"author":{"gitID":"deeheenguyen"},"content":"        firstPredicate \u003d new InterviewMatchInterviewee(firstPredicateKeywordList);"},{"lineNumber":20,"author":{"gitID":"deeheenguyen"},"content":"        InterviewMatchInterviewee secondPredicate;"},{"lineNumber":21,"author":{"gitID":"deeheenguyen"},"content":"        secondPredicate \u003d new InterviewMatchInterviewee(secondPredicateKeywordList);"},{"lineNumber":22,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":23,"author":{"gitID":"deeheenguyen"},"content":"        // same object -\u003e returns true"},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":25,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":26,"author":{"gitID":"deeheenguyen"},"content":"        // same values -\u003e returns true"},{"lineNumber":27,"author":{"gitID":"deeheenguyen"},"content":"        InterviewMatchInterviewee firstPredicateCopy;"},{"lineNumber":28,"author":{"gitID":"deeheenguyen"},"content":"        firstPredicateCopy \u003d new InterviewMatchInterviewee(firstPredicateKeywordList);"},{"lineNumber":29,"author":{"gitID":"deeheenguyen"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":30,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":31,"author":{"gitID":"deeheenguyen"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitID":"deeheenguyen"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":33,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":34,"author":{"gitID":"deeheenguyen"},"content":"        // null -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"deeheenguyen"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":36,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":37,"author":{"gitID":"deeheenguyen"},"content":"        // different person -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"deeheenguyen"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":39,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":41,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"deeheenguyen"},"content":"    public void test_matchInterview_returnsTrue() {"},{"lineNumber":43,"author":{"gitID":"deeheenguyen"},"content":"        // One keyword"},{"lineNumber":44,"author":{"gitID":"deeheenguyen"},"content":"        InterviewMatchInterviewee predicate;"},{"lineNumber":45,"author":{"gitID":"deeheenguyen"},"content":"        predicate \u003d new InterviewMatchInterviewee(\"John\");"},{"lineNumber":46,"author":{"gitID":"deeheenguyen"},"content":"        assertTrue(predicate.test(new InterviewBuilder().withInterviewee(\"John\").build()));"},{"lineNumber":47,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":49,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"deeheenguyen"},"content":"    public void test_matchDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":51,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":52,"author":{"gitID":"deeheenguyen"},"content":"        InterviewMatchInterviewee predicate;"},{"lineNumber":53,"author":{"gitID":"deeheenguyen"},"content":"        predicate \u003d new InterviewMatchInterviewee(\"Alice\");"},{"lineNumber":54,"author":{"gitID":"deeheenguyen"},"content":"        assertFalse(predicate.test(new InterviewBuilder().withInterviewee(\"John\").build()));"},{"lineNumber":55,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"deeheenguyen"},"content":"}"}],"authorContributionMap":{"deeheenguyen":56}},{"path":"src/test/java/seedu/address/logic/commands/DeleteInterviewCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"deeheenguyen"},"content":"//@@author deeheenguyen"},{"lineNumber":2,"author":{"gitID":"deeheenguyen"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":4,"author":{"gitID":"deeheenguyen"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"deeheenguyen"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":8,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":9,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":10,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":11,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showInterviewAtIndex;"},{"lineNumber":12,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INTERVIEW;"},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_INTERVIEW;"},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.testutil.TypicalInterviews.getTypicalAddressBook;"},{"lineNumber":15,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":16,"author":{"gitID":"deeheenguyen"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":18,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.Interview;"},{"lineNumber":26,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":27,"author":{"gitID":"deeheenguyen"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"deeheenguyen"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":29,"author":{"gitID":"deeheenguyen"},"content":" * {@code DeleteInterviewCommand}."},{"lineNumber":30,"author":{"gitID":"deeheenguyen"},"content":" */"},{"lineNumber":31,"author":{"gitID":"deeheenguyen"},"content":"public class DeleteInterviewCommandTest {"},{"lineNumber":32,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":33,"author":{"gitID":"deeheenguyen"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":35,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"deeheenguyen"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":37,"author":{"gitID":"deeheenguyen"},"content":"        Interview interviewToDelete \u003d model.getFilteredInterviewList().get(INDEX_FIRST_INTERVIEW.getZeroBased());"},{"lineNumber":38,"author":{"gitID":"deeheenguyen"},"content":"        DeleteInterviewCommand deleteInterviewCommand \u003d prepareInterviewCommand(INDEX_FIRST_INTERVIEW);"},{"lineNumber":39,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":40,"author":{"gitID":"deeheenguyen"},"content":"        String expectedMessage \u003d String.format(DeleteInterviewCommand.MESSAGE_DELETE_INTERVIEW_SUCCESS,"},{"lineNumber":41,"author":{"gitID":"deeheenguyen"},"content":"                interviewToDelete);"},{"lineNumber":42,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":43,"author":{"gitID":"deeheenguyen"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":44,"author":{"gitID":"deeheenguyen"},"content":"        expectedModel.deleteInterview(interviewToDelete);"},{"lineNumber":45,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":46,"author":{"gitID":"deeheenguyen"},"content":"        assertCommandSuccess(deleteInterviewCommand, model, expectedMessage, expectedModel);"},{"lineNumber":47,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":49,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"deeheenguyen"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":51,"author":{"gitID":"deeheenguyen"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredInterviewList().size() + 1);"},{"lineNumber":52,"author":{"gitID":"deeheenguyen"},"content":"        DeleteInterviewCommand deleteInterviewCommand \u003d prepareInterviewCommand(outOfBoundIndex);"},{"lineNumber":53,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":54,"author":{"gitID":"deeheenguyen"},"content":"        assertCommandFailure(deleteInterviewCommand, model, Messages.MESSAGE_INVALID_INTERVIEW_DISPLAYED_INDEX);"},{"lineNumber":55,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":57,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"deeheenguyen"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":59,"author":{"gitID":"deeheenguyen"},"content":"        showInterviewAtIndex(model, INDEX_FIRST_INTERVIEW);"},{"lineNumber":60,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":61,"author":{"gitID":"deeheenguyen"},"content":"        Interview interviewToDelete \u003d model.getFilteredInterviewList().get(INDEX_FIRST_INTERVIEW.getZeroBased());"},{"lineNumber":62,"author":{"gitID":"deeheenguyen"},"content":"        DeleteInterviewCommand deleteInterviewCommand \u003d prepareInterviewCommand(INDEX_FIRST_INTERVIEW);"},{"lineNumber":63,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":64,"author":{"gitID":"deeheenguyen"},"content":"        String expectedMessage \u003d String.format(DeleteInterviewCommand.MESSAGE_DELETE_INTERVIEW_SUCCESS,"},{"lineNumber":65,"author":{"gitID":"deeheenguyen"},"content":"                interviewToDelete);"},{"lineNumber":66,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":67,"author":{"gitID":"deeheenguyen"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":68,"author":{"gitID":"deeheenguyen"},"content":"        expectedModel.deleteInterview(interviewToDelete);"},{"lineNumber":69,"author":{"gitID":"deeheenguyen"},"content":"        showNoInterview(expectedModel);"},{"lineNumber":70,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":71,"author":{"gitID":"deeheenguyen"},"content":"        assertCommandSuccess(deleteInterviewCommand, model, expectedMessage, expectedModel);"},{"lineNumber":72,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":74,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"deeheenguyen"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":76,"author":{"gitID":"deeheenguyen"},"content":"        showInterviewAtIndex(model, INDEX_FIRST_INTERVIEW);"},{"lineNumber":77,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":78,"author":{"gitID":"deeheenguyen"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_INTERVIEW;"},{"lineNumber":79,"author":{"gitID":"deeheenguyen"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":80,"author":{"gitID":"deeheenguyen"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getInterviewList().size());"},{"lineNumber":81,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":82,"author":{"gitID":"deeheenguyen"},"content":"        DeleteInterviewCommand deleteInterviewCommand \u003d prepareInterviewCommand(outOfBoundIndex);"},{"lineNumber":83,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":84,"author":{"gitID":"deeheenguyen"},"content":"        assertCommandFailure(deleteInterviewCommand, model, Messages.MESSAGE_INVALID_INTERVIEW_DISPLAYED_INDEX);"},{"lineNumber":85,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":87,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"deeheenguyen"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":89,"author":{"gitID":"deeheenguyen"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":90,"author":{"gitID":"deeheenguyen"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":91,"author":{"gitID":"deeheenguyen"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":92,"author":{"gitID":"deeheenguyen"},"content":"        Interview interviewToDelete \u003d model.getFilteredInterviewList().get(INDEX_FIRST_INTERVIEW.getZeroBased());"},{"lineNumber":93,"author":{"gitID":"deeheenguyen"},"content":"        DeleteInterviewCommand deleteInterviewCommand \u003d prepareInterviewCommand(INDEX_FIRST_INTERVIEW);"},{"lineNumber":94,"author":{"gitID":"deeheenguyen"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":95,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":96,"author":{"gitID":"deeheenguyen"},"content":"        // delete -\u003e first person deleted"},{"lineNumber":97,"author":{"gitID":"deeheenguyen"},"content":"        deleteInterviewCommand.execute();"},{"lineNumber":98,"author":{"gitID":"deeheenguyen"},"content":"        undoRedoStack.push(deleteInterviewCommand);"},{"lineNumber":99,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":100,"author":{"gitID":"deeheenguyen"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":101,"author":{"gitID":"deeheenguyen"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":102,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":103,"author":{"gitID":"deeheenguyen"},"content":"        // redo -\u003e same first person deleted again"},{"lineNumber":104,"author":{"gitID":"deeheenguyen"},"content":"        expectedModel.deleteInterview(interviewToDelete);"},{"lineNumber":105,"author":{"gitID":"deeheenguyen"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":106,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":108,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"deeheenguyen"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":110,"author":{"gitID":"deeheenguyen"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":111,"author":{"gitID":"deeheenguyen"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":112,"author":{"gitID":"deeheenguyen"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":113,"author":{"gitID":"deeheenguyen"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredInterviewList().size() + 1);"},{"lineNumber":114,"author":{"gitID":"deeheenguyen"},"content":"        DeleteInterviewCommand deleteInterviewCommand \u003d prepareInterviewCommand(outOfBoundIndex);"},{"lineNumber":115,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":116,"author":{"gitID":"deeheenguyen"},"content":"        // execution failed -\u003e deleteCommand not pushed into undoRedoStack"},{"lineNumber":117,"author":{"gitID":"deeheenguyen"},"content":"        assertCommandFailure(deleteInterviewCommand, model, Messages.MESSAGE_INVALID_INTERVIEW_DISPLAYED_INDEX);"},{"lineNumber":118,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":119,"author":{"gitID":"deeheenguyen"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":120,"author":{"gitID":"deeheenguyen"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":121,"author":{"gitID":"deeheenguyen"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":122,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":124,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"deeheenguyen"},"content":"     * 1. Deletes a {@code Interview} from a filtered list."},{"lineNumber":126,"author":{"gitID":"deeheenguyen"},"content":"     * 2. Undo the deletion."},{"lineNumber":127,"author":{"gitID":"deeheenguyen"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted interview in the"},{"lineNumber":128,"author":{"gitID":"deeheenguyen"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":129,"author":{"gitID":"deeheenguyen"},"content":"     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the interview object regardless of indexing."},{"lineNumber":130,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":132,"author":{"gitID":"deeheenguyen"},"content":"    public void executeUndoRedo_validIndexFilteredList_sameInterviewDeleted() throws Exception {"},{"lineNumber":133,"author":{"gitID":"deeheenguyen"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":134,"author":{"gitID":"deeheenguyen"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":135,"author":{"gitID":"deeheenguyen"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":136,"author":{"gitID":"deeheenguyen"},"content":"        DeleteInterviewCommand deleteInterviewCommand \u003d prepareInterviewCommand(INDEX_FIRST_INTERVIEW);"},{"lineNumber":137,"author":{"gitID":"deeheenguyen"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":138,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":139,"author":{"gitID":"deeheenguyen"},"content":"        showInterviewAtIndex(model, INDEX_SECOND_INTERVIEW);"},{"lineNumber":140,"author":{"gitID":"deeheenguyen"},"content":"        Interview interviewToDelete \u003d model.getFilteredInterviewList().get(INDEX_FIRST_INTERVIEW.getZeroBased());"},{"lineNumber":141,"author":{"gitID":"deeheenguyen"},"content":"        // delete -\u003e deletes second Interview in unfiltered interview list / first interview in filtered interview list"},{"lineNumber":142,"author":{"gitID":"deeheenguyen"},"content":"        deleteInterviewCommand.execute();"},{"lineNumber":143,"author":{"gitID":"deeheenguyen"},"content":"        undoRedoStack.push(deleteInterviewCommand);"},{"lineNumber":144,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":145,"author":{"gitID":"deeheenguyen"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered interview list to show all interviews"},{"lineNumber":146,"author":{"gitID":"deeheenguyen"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":147,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":148,"author":{"gitID":"deeheenguyen"},"content":"        expectedModel.deleteInterview(interviewToDelete);"},{"lineNumber":149,"author":{"gitID":"deeheenguyen"},"content":"        assertNotEquals(interviewToDelete, expectedModel.getFilteredInterviewList()"},{"lineNumber":150,"author":{"gitID":"deeheenguyen"},"content":"                .get(INDEX_FIRST_INTERVIEW.getZeroBased()));"},{"lineNumber":151,"author":{"gitID":"deeheenguyen"},"content":"        // redo -\u003e deletes same second interview in unfiltered interview list"},{"lineNumber":152,"author":{"gitID":"deeheenguyen"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":153,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":155,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":156,"author":{"gitID":"deeheenguyen"},"content":"    public void equals() throws Exception {"},{"lineNumber":157,"author":{"gitID":"deeheenguyen"},"content":"        DeleteInterviewCommand deleteFirstCommand \u003d prepareInterviewCommand(INDEX_FIRST_INTERVIEW);"},{"lineNumber":158,"author":{"gitID":"deeheenguyen"},"content":"        DeleteInterviewCommand deleteSecondCommand \u003d prepareInterviewCommand(INDEX_SECOND_INTERVIEW);"},{"lineNumber":159,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":160,"author":{"gitID":"deeheenguyen"},"content":"        // same object -\u003e returns true"},{"lineNumber":161,"author":{"gitID":"deeheenguyen"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":162,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":163,"author":{"gitID":"deeheenguyen"},"content":"        // same values -\u003e returns true"},{"lineNumber":164,"author":{"gitID":"deeheenguyen"},"content":"        DeleteInterviewCommand deleteFirstCommandCopy \u003d prepareInterviewCommand(INDEX_FIRST_INTERVIEW);"},{"lineNumber":165,"author":{"gitID":"deeheenguyen"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":166,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":167,"author":{"gitID":"deeheenguyen"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":168,"author":{"gitID":"deeheenguyen"},"content":"        deleteFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":169,"author":{"gitID":"deeheenguyen"},"content":"        assertFalse(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":170,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":171,"author":{"gitID":"deeheenguyen"},"content":"        // different types -\u003e returns false"},{"lineNumber":172,"author":{"gitID":"deeheenguyen"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":173,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":174,"author":{"gitID":"deeheenguyen"},"content":"        // null -\u003e returns false"},{"lineNumber":175,"author":{"gitID":"deeheenguyen"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":176,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":177,"author":{"gitID":"deeheenguyen"},"content":"        // different interview -\u003e returns false"},{"lineNumber":178,"author":{"gitID":"deeheenguyen"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":179,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":181,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":182,"author":{"gitID":"deeheenguyen"},"content":"     * Returns a {@code DeleteInterviewCommand} with the parameter {@code index}."},{"lineNumber":183,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":184,"author":{"gitID":"deeheenguyen"},"content":"    private DeleteInterviewCommand prepareInterviewCommand(Index index) {"},{"lineNumber":185,"author":{"gitID":"deeheenguyen"},"content":"        DeleteInterviewCommand deleteInterviewCommand \u003d new DeleteInterviewCommand(index);"},{"lineNumber":186,"author":{"gitID":"deeheenguyen"},"content":"        deleteInterviewCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":187,"author":{"gitID":"deeheenguyen"},"content":"        return deleteInterviewCommand;"},{"lineNumber":188,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":190,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":191,"author":{"gitID":"deeheenguyen"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":192,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":193,"author":{"gitID":"deeheenguyen"},"content":"    private void showNoInterview(Model model) {"},{"lineNumber":194,"author":{"gitID":"deeheenguyen"},"content":"        model.updateFilteredInterviewList(p -\u003e false);"},{"lineNumber":195,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":196,"author":{"gitID":"deeheenguyen"},"content":"        assertTrue(model.getFilteredInterviewList().isEmpty());"},{"lineNumber":197,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"deeheenguyen"},"content":"}"}],"authorContributionMap":{"deeheenguyen":198}},{"path":"src/test/java/seedu/address/model/interview/InterviewTitleTest.java","lines":[{"lineNumber":1,"author":{"gitID":"deeheenguyen"},"content":"//@@author deeheenguyen"},{"lineNumber":2,"author":{"gitID":"deeheenguyen"},"content":"package seedu.address.model.interview;"},{"lineNumber":3,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":4,"author":{"gitID":"deeheenguyen"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"deeheenguyen"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":7,"author":{"gitID":"deeheenguyen"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":9,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":11,"author":{"gitID":"deeheenguyen"},"content":"public class InterviewTitleTest {"},{"lineNumber":12,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"deeheenguyen"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new InterviewTitle(null));"},{"lineNumber":16,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":18,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"deeheenguyen"},"content":"    public void constructor_invalidJobTitle_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"deeheenguyen"},"content":"        String invalidInterviewTitle \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"deeheenguyen"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new InterviewTitle(invalidInterviewTitle));"},{"lineNumber":22,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"deeheenguyen"},"content":"    public void isValidInterviewTitle() {"},{"lineNumber":26,"author":{"gitID":"deeheenguyen"},"content":"        // null name"},{"lineNumber":27,"author":{"gitID":"deeheenguyen"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e InterviewTitle.isValidTitle(null));"},{"lineNumber":28,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":29,"author":{"gitID":"deeheenguyen"},"content":"        // invalid name"},{"lineNumber":30,"author":{"gitID":"deeheenguyen"},"content":"        assertFalse(InterviewTitle.isValidTitle(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"deeheenguyen"},"content":"        assertFalse(InterviewTitle.isValidTitle(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"deeheenguyen"},"content":"        assertFalse(InterviewTitle.isValidTitle(\"^\")); // only non-alphanumeric characters"},{"lineNumber":33,"author":{"gitID":"deeheenguyen"},"content":"        assertFalse(InterviewTitle.isValidTitle(\"$$*\")); // contains non-alphanumeric characters"},{"lineNumber":34,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":35,"author":{"gitID":"deeheenguyen"},"content":"        // valid name"},{"lineNumber":36,"author":{"gitID":"deeheenguyen"},"content":"        assertTrue(InterviewTitle.isValidTitle(\"backend interview\")); // alphabets only"},{"lineNumber":37,"author":{"gitID":"deeheenguyen"},"content":"        assertTrue(InterviewTitle.isValidTitle(\"11111\")); // numbers only"},{"lineNumber":38,"author":{"gitID":"deeheenguyen"},"content":"        assertTrue(InterviewTitle.isValidTitle(\"SE interview\")); // alphanumeric characters"},{"lineNumber":39,"author":{"gitID":"deeheenguyen"},"content":"        assertTrue(InterviewTitle.isValidTitle(\"INTERNSHIP INTERNVIEW\")); // with capital letters"},{"lineNumber":40,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"deeheenguyen"},"content":"}"},{"lineNumber":42,"author":{"gitID":"deeheenguyen"},"content":""}],"authorContributionMap":{"deeheenguyen":42}},{"path":"src/test/java/seedu/address/model/interview/DateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"deeheenguyen"},"content":"//@@author deeheenguyen"},{"lineNumber":2,"author":{"gitID":"deeheenguyen"},"content":"package seedu.address.model.interview;"},{"lineNumber":3,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":4,"author":{"gitID":"deeheenguyen"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"deeheenguyen"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":7,"author":{"gitID":"deeheenguyen"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":9,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":11,"author":{"gitID":"deeheenguyen"},"content":"public class DateTest {"},{"lineNumber":12,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"deeheenguyen"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Date(null));"},{"lineNumber":16,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":18,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"deeheenguyen"},"content":"    public void constructor_invalidPhone_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"deeheenguyen"},"content":"        String invalidDate \u003d \"0.0.0\";"},{"lineNumber":21,"author":{"gitID":"deeheenguyen"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Date(invalidDate));"},{"lineNumber":22,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"deeheenguyen"},"content":"    public void isValidDate() {"},{"lineNumber":26,"author":{"gitID":"deeheenguyen"},"content":"        // null date number"},{"lineNumber":27,"author":{"gitID":"deeheenguyen"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Date.isValidDate(null));"},{"lineNumber":28,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":29,"author":{"gitID":"deeheenguyen"},"content":"        // invalid phone numbers"},{"lineNumber":30,"author":{"gitID":"deeheenguyen"},"content":"        assertFalse(Date.isValidDate(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"deeheenguyen"},"content":"        assertFalse(Date.isValidDate(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"deeheenguyen"},"content":"        assertFalse(Date.isValidDate(\"91\")); // less than 3 numbers"},{"lineNumber":33,"author":{"gitID":"deeheenguyen"},"content":"        assertFalse(Date.isValidDate(\"phone\")); // non-numeric"},{"lineNumber":34,"author":{"gitID":"deeheenguyen"},"content":"        assertFalse(Date.isValidDate(\"9011p041\")); // alphabets within digits"},{"lineNumber":35,"author":{"gitID":"deeheenguyen"},"content":"        assertFalse(Date.isValidDate(\"9312 1534\")); // spaces within digits"},{"lineNumber":36,"author":{"gitID":"deeheenguyen"},"content":"        assertFalse(Date.isValidDate(\"31.14.2018\")); // invalid month"},{"lineNumber":37,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":38,"author":{"gitID":"deeheenguyen"},"content":"        // valid phone numbers"},{"lineNumber":39,"author":{"gitID":"deeheenguyen"},"content":"        assertTrue(Date.isValidDate(\"01.01.2018\")); // exactly 3 numbers"},{"lineNumber":40,"author":{"gitID":"deeheenguyen"},"content":"        assertTrue(Date.isValidDate(\"31.12.2018\"));"},{"lineNumber":41,"author":{"gitID":"deeheenguyen"},"content":"        assertTrue(Date.isValidDate(\"28.02.2018\")); // long phone numbers"},{"lineNumber":42,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"deeheenguyen"},"content":"}"}],"authorContributionMap":{"deeheenguyen":43}},{"path":"src/test/java/seedu/address/model/job/JobTitleTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.job;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"ChengSashankh"},"content":"//@@author ChengSashankh"},{"lineNumber":11,"author":{"gitID":"ChengSashankh"},"content":"public class JobTitleTest {"},{"lineNumber":12,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":13,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"ChengSashankh"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"ChengSashankh"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new JobTitle(null));"},{"lineNumber":16,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":18,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"ChengSashankh"},"content":"    public void constructor_invalidJobTitle_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"ChengSashankh"},"content":"        String invalidJobTitle \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"ChengSashankh"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new JobTitle(invalidJobTitle));"},{"lineNumber":22,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":24,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"ChengSashankh"},"content":"    public void isValidJobTitle() {"},{"lineNumber":26,"author":{"gitID":"ChengSashankh"},"content":"        // null name"},{"lineNumber":27,"author":{"gitID":"ChengSashankh"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e JobTitle.isValidTitle(null));"},{"lineNumber":28,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":29,"author":{"gitID":"ChengSashankh"},"content":"        // invalid name"},{"lineNumber":30,"author":{"gitID":"ChengSashankh"},"content":"        assertFalse(JobTitle.isValidTitle(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"ChengSashankh"},"content":"        assertFalse(JobTitle.isValidTitle(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"ChengSashankh"},"content":"        assertFalse(JobTitle.isValidTitle(\"^\")); // only non-alphanumeric characters"},{"lineNumber":33,"author":{"gitID":"ChengSashankh"},"content":"        assertFalse(JobTitle.isValidTitle(\"peter*\")); // contains non-alphanumeric characters"},{"lineNumber":34,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":35,"author":{"gitID":"ChengSashankh"},"content":"        // valid name"},{"lineNumber":36,"author":{"gitID":"ChengSashankh"},"content":"        assertTrue(JobTitle.isValidTitle(\"backend software engineer\")); // alphabets only"},{"lineNumber":37,"author":{"gitID":"ChengSashankh"},"content":"        assertTrue(JobTitle.isValidTitle(\"20180001\")); // numbers only"},{"lineNumber":38,"author":{"gitID":"ChengSashankh"},"content":"        assertTrue(JobTitle.isValidTitle(\"Software Engineer Intern 2018\")); // alphanumeric characters"},{"lineNumber":39,"author":{"gitID":"ChengSashankh"},"content":"        assertTrue(JobTitle.isValidTitle(\"Backend software Engineer\")); // with capital letters"},{"lineNumber":40,"author":{"gitID":"ChengSashankh"},"content":"        assertTrue(JobTitle.isValidTitle(\"Summer Software Engineering Intern Cloud Operations\")); // long names"},{"lineNumber":41,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"ChengSashankh"},"content":"}"},{"lineNumber":43,"author":{"gitID":"ChengSashankh"},"content":"//@@author"}],"authorContributionMap":{"ChengSashankh":34,"-":9}},{"path":"src/test/java/seedu/address/model/job/PersonMatchesJobPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.job;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.JobBuilder;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"ChengSashankh"},"content":"//@@author ChengSashankh"},{"lineNumber":12,"author":{"gitID":"ChengSashankh"},"content":"public class PersonMatchesJobPredicateTest {"},{"lineNumber":13,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"ChengSashankh"},"content":"    public void equals() {"},{"lineNumber":15,"author":{"gitID":"ChengSashankh"},"content":"        Job firstJobPosting \u003d new JobBuilder().withJobTitle(\"Sample Title\").withLocation(\"Geylang\")"},{"lineNumber":16,"author":{"gitID":"ChengSashankh"},"content":"                .withSkill(\"CSS\").build();"},{"lineNumber":17,"author":{"gitID":"ChengSashankh"},"content":"        Job secondJobPosting \u003d new JobBuilder().withJobTitle(\"Second Sample\").withLocation(\"Tampines\")"},{"lineNumber":18,"author":{"gitID":"ChengSashankh"},"content":"                .withSkill(\"HTML\").build();"},{"lineNumber":19,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":20,"author":{"gitID":"ChengSashankh"},"content":"        PersonMatchesJobPredicate firstPredicate;"},{"lineNumber":21,"author":{"gitID":"ChengSashankh"},"content":"        firstPredicate \u003d new PersonMatchesJobPredicate(firstJobPosting);"},{"lineNumber":22,"author":{"gitID":"ChengSashankh"},"content":"        PersonMatchesJobPredicate secondPredicate;"},{"lineNumber":23,"author":{"gitID":"ChengSashankh"},"content":"        secondPredicate \u003d new PersonMatchesJobPredicate(secondJobPosting);"},{"lineNumber":24,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":25,"author":{"gitID":"ChengSashankh"},"content":"        // same object -\u003e returns true"},{"lineNumber":26,"author":{"gitID":"ChengSashankh"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":27,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":28,"author":{"gitID":"ChengSashankh"},"content":"        // same values -\u003e returns true"},{"lineNumber":29,"author":{"gitID":"ChengSashankh"},"content":"        PersonMatchesJobPredicate firstPredicateCopy;"},{"lineNumber":30,"author":{"gitID":"ChengSashankh"},"content":"        firstPredicateCopy \u003d new PersonMatchesJobPredicate(firstJobPosting);"},{"lineNumber":31,"author":{"gitID":"ChengSashankh"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":32,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":33,"author":{"gitID":"ChengSashankh"},"content":"        // different types -\u003e returns false"},{"lineNumber":34,"author":{"gitID":"ChengSashankh"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":35,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":36,"author":{"gitID":"ChengSashankh"},"content":"        // null -\u003e returns false"},{"lineNumber":37,"author":{"gitID":"ChengSashankh"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":38,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":39,"author":{"gitID":"ChengSashankh"},"content":"        // different person -\u003e returns false"},{"lineNumber":40,"author":{"gitID":"ChengSashankh"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":41,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":43,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"ChengSashankh"},"content":"    public void test_personMatchesJob_returnsTrue() {"},{"lineNumber":45,"author":{"gitID":"ChengSashankh"},"content":"        // One keyword"},{"lineNumber":46,"author":{"gitID":"ChengSashankh"},"content":"        PersonMatchesJobPredicate predicate;"},{"lineNumber":47,"author":{"gitID":"ChengSashankh"},"content":"        predicate \u003d new PersonMatchesJobPredicate(new JobBuilder().withLocation(\"Geylang\").withSkill(\"ALL\")"},{"lineNumber":48,"author":{"gitID":"ChengSashankh"},"content":"                .withTags(\"ALL\").build());"},{"lineNumber":49,"author":{"gitID":"ChengSashankh"},"content":"        assertTrue(predicate.test(new PersonBuilder().withAddress(\"Geylang Street Area\").build()));"},{"lineNumber":50,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":51,"author":{"gitID":"ChengSashankh"},"content":"        predicate \u003d new PersonMatchesJobPredicate(new JobBuilder().withSkill(\"CSS\").withLocation(\"ALL\")"},{"lineNumber":52,"author":{"gitID":"ChengSashankh"},"content":"                .withTags(\"ALL\").build());"},{"lineNumber":53,"author":{"gitID":"ChengSashankh"},"content":"        assertTrue(predicate.test(new PersonBuilder().withSkills(\"CSS\").build()));"},{"lineNumber":54,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":55,"author":{"gitID":"ChengSashankh"},"content":"        // Multiple keywords"},{"lineNumber":56,"author":{"gitID":"ChengSashankh"},"content":"        predicate \u003d new PersonMatchesJobPredicate(new JobBuilder().withSkill(\"CSS\").withLocation(\"Geylang\")"},{"lineNumber":57,"author":{"gitID":"ChengSashankh"},"content":"                .withTags(\"ALL\").build());"},{"lineNumber":58,"author":{"gitID":"ChengSashankh"},"content":"        assertTrue(predicate.test(new PersonBuilder().withSkills(\"CSS\").withAddress(\"Geylang Street Area\").build()));"},{"lineNumber":59,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":60,"author":{"gitID":"ChengSashankh"},"content":"        predicate \u003d new PersonMatchesJobPredicate(new JobBuilder().withSkill(\"CSS\").withLocation(\"Geylang\")"},{"lineNumber":61,"author":{"gitID":"ChengSashankh"},"content":"                .withTags(\"FreshGrad\").build());"},{"lineNumber":62,"author":{"gitID":"ChengSashankh"},"content":"        assertTrue(predicate.test(new PersonBuilder().withSkills(\"CSS\").withAddress(\"Geylang Street Area\")"},{"lineNumber":63,"author":{"gitID":"ChengSashankh"},"content":"                .withTags(\"FreshGrad\").build()));"},{"lineNumber":64,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":66,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"ChengSashankh"},"content":"    public void test_personDoesNotMatchJobs_returnsFalse() {"},{"lineNumber":68,"author":{"gitID":"ChengSashankh"},"content":"        // Non-matching jobs and candidates"},{"lineNumber":69,"author":{"gitID":"ChengSashankh"},"content":"        PersonMatchesJobPredicate predicate \u003d new PersonMatchesJobPredicate(new JobBuilder().withSkill(\"UnknownSkill\")"},{"lineNumber":70,"author":{"gitID":"ChengSashankh"},"content":"                .withLocation(\"Batcave\").withTags(\"UnknownTag\").build());"},{"lineNumber":71,"author":{"gitID":"ChengSashankh"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"},{"lineNumber":72,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":73,"author":{"gitID":"ChengSashankh"},"content":"        // Keywords match location, but does not match skills or tags"},{"lineNumber":74,"author":{"gitID":"ChengSashankh"},"content":"        predicate \u003d new PersonMatchesJobPredicate(new JobBuilder().withSkill(\"UnknownSkill\")"},{"lineNumber":75,"author":{"gitID":"ChengSashankh"},"content":"                .withLocation(\"Matching Location\").withTags(\"UnknownTag\").build());"},{"lineNumber":76,"author":{"gitID":"ChengSashankh"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":77,"author":{"gitID":"ChengSashankh"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Matching Street\").withTags(\"school\", \"friends\")"},{"lineNumber":78,"author":{"gitID":"ChengSashankh"},"content":"                .withSkills(\"Non-matching skills\").build()));"},{"lineNumber":79,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":81,"author":{"gitID":"ChengSashankh"},"content":"}"},{"lineNumber":82,"author":{"gitID":"ChengSashankh"},"content":"//@@author"}],"authorContributionMap":{"ChengSashankh":72,"-":10}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":10,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.person.Link;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.skill.Skill;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        descriptor.setPhone(person.getPhone());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        descriptor.setEmail(person.getEmail());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        descriptor.setAddress(person.getAddress());"},{"lineNumber":41,"author":{"gitID":"deeheenguyen"},"content":"        descriptor.setLink(person.getLink());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        descriptor.setSkill(person.getSkills());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        descriptor.setTags(person.getTags());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Sets the {@code Proportion} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Sets the {@code Skills} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withSkills(String skills) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        descriptor.setSkill(new Skill(skills));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * that we are building."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"deeheenguyen"},"content":"     * Sets the {@code Link} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":98,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"deeheenguyen"},"content":"    public EditPersonDescriptorBuilder withLink(String link) {"},{"lineNumber":100,"author":{"gitID":"deeheenguyen"},"content":"        descriptor.setLink(new Link(link));"},{"lineNumber":101,"author":{"gitID":"deeheenguyen"},"content":"        return this;"},{"lineNumber":102,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return descriptor;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"deeheenguyen":10,"-":97}},{"path":"src/test/java/seedu/address/model/report/ProportionTest.java","lines":[{"lineNumber":1,"author":{"gitID":"anh2111"},"content":"// @@author anh2111"},{"lineNumber":2,"author":{"gitID":"anh2111"},"content":"package seedu.address.model.report;"},{"lineNumber":3,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":4,"author":{"gitID":"anh2111"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":6,"author":{"gitID":"anh2111"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":7,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":8,"author":{"gitID":"anh2111"},"content":"public class ProportionTest {"},{"lineNumber":9,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":10,"author":{"gitID":"anh2111"},"content":"    @Test"},{"lineNumber":11,"author":{"gitID":"anh2111"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":12,"author":{"gitID":"anh2111"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Proportion(null, 0, 0));"},{"lineNumber":13,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"anh2111"},"content":"}"},{"lineNumber":15,"author":{"gitID":"anh2111"},"content":"// @@author"}],"authorContributionMap":{"anh2111":15}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class TypicalIndexes {"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final Index INDEX_FIRST_JOB \u003d Index.fromOneBased(1);"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final Index INDEX_SECOND_JOB \u003d Index.fromOneBased(2);"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final Index INDEX_THIRD_JOB \u003d Index.fromOneBased(3);"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"deeheenguyen"},"content":"    public static final Index INDEX_FIRST_INTERVIEW \u003d Index.fromOneBased(1);"},{"lineNumber":18,"author":{"gitID":"deeheenguyen"},"content":"    public static final Index INDEX_SECOND_INTERVIEW \u003d Index.fromOneBased(2);"},{"lineNumber":19,"author":{"gitID":"deeheenguyen"},"content":"    public static final Index INDEX_THIRD_INTERVIEW \u003d Index.fromOneBased(3);"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"deeheenguyen":3,"-":18}},{"path":"src/test/java/seedu/address/model/job/SkillsTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.job;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.skill.Skill;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"ChengSashankh"},"content":"//@@author ChengSashankh"},{"lineNumber":12,"author":{"gitID":"ChengSashankh"},"content":"public class SkillsTest {"},{"lineNumber":13,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"ChengSashankh"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"ChengSashankh"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Skill(null));"},{"lineNumber":16,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":18,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"ChengSashankh"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"ChengSashankh"},"content":"        String invalidSkill \u003d \" \";"},{"lineNumber":21,"author":{"gitID":"ChengSashankh"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Skill(invalidSkill));"},{"lineNumber":22,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":24,"author":{"gitID":"ChengSashankh"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"ChengSashankh"},"content":"    public void isValidSkill() {"},{"lineNumber":26,"author":{"gitID":"ChengSashankh"},"content":"        // null skill"},{"lineNumber":27,"author":{"gitID":"ChengSashankh"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Skill.isValidSkill(null));"},{"lineNumber":28,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":29,"author":{"gitID":"ChengSashankh"},"content":"        // invalid skill"},{"lineNumber":30,"author":{"gitID":"ChengSashankh"},"content":"        assertFalse(Skill.isValidSkill(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"ChengSashankh"},"content":"        assertFalse(Skill.isValidSkill(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":33,"author":{"gitID":"ChengSashankh"},"content":"        // valid skill"},{"lineNumber":34,"author":{"gitID":"ChengSashankh"},"content":"        assertTrue(Skill.isValidSkill(\"peter*\")); // contains non-alphanumeric characters"},{"lineNumber":35,"author":{"gitID":"ChengSashankh"},"content":"        assertTrue(Skill.isValidSkill(\"peter jack\")); // alphabets only"},{"lineNumber":36,"author":{"gitID":"ChengSashankh"},"content":"        assertTrue(Skill.isValidSkill(\"12345\")); // numbers only"},{"lineNumber":37,"author":{"gitID":"ChengSashankh"},"content":"        assertTrue(Skill.isValidSkill(\"probability theory 2\")); // alphanumeric characters"},{"lineNumber":38,"author":{"gitID":"ChengSashankh"},"content":"        assertTrue(Skill.isValidSkill(\"Backend Engineering\")); // with capital letters"},{"lineNumber":39,"author":{"gitID":"ChengSashankh"},"content":"        assertTrue(Skill.isValidSkill(\"Statistics 2\")); // long names"},{"lineNumber":40,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"ChengSashankh"},"content":"}"},{"lineNumber":42,"author":{"gitID":"ChengSashankh"},"content":"//@@author"}],"authorContributionMap":{"ChengSashankh":32,"-":10}},{"path":"src/test/java/seedu/address/testutil/TypicalJobs.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.job.exceptions.DuplicateJobException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"ChengSashankh"},"content":"//@@author ChengSashankh"},{"lineNumber":12,"author":{"gitID":"ChengSashankh"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"ChengSashankh"},"content":" * A utility class containing a list of {@code Job} objects to be used in tests."},{"lineNumber":14,"author":{"gitID":"ChengSashankh"},"content":" */"},{"lineNumber":15,"author":{"gitID":"ChengSashankh"},"content":"public class TypicalJobs {"},{"lineNumber":16,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":17,"author":{"gitID":"ChengSashankh"},"content":"    public static final Job FRONTEND \u003d new JobBuilder().withJobTitle(\"Frontend Engineer\")"},{"lineNumber":18,"author":{"gitID":"ChengSashankh"},"content":"            .withLocation(\"Geylang\").withSkill(\"HTML, CSS, JavaScript\")"},{"lineNumber":19,"author":{"gitID":"ChengSashankh"},"content":"            .withTags(\"FreshGrad\").build();"},{"lineNumber":20,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":21,"author":{"gitID":"ChengSashankh"},"content":"    public static final Job BACKEND \u003d new JobBuilder().withJobTitle(\"Backend Engineer\")"},{"lineNumber":22,"author":{"gitID":"ChengSashankh"},"content":"            .withLocation(\"Clementi\").withSkill(\"Java, Python, SQL\")"},{"lineNumber":23,"author":{"gitID":"ChengSashankh"},"content":"            .withTags(\"Intern\").build();"},{"lineNumber":24,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":25,"author":{"gitID":"ChengSashankh"},"content":"    public static final Job SYSTEMS \u003d new JobBuilder().withJobTitle(\"Systems Engineer\")"},{"lineNumber":26,"author":{"gitID":"ChengSashankh"},"content":"            .withLocation(\"Ang Mo Kio\").withSkill(\"Java, C, Operating Systems\")"},{"lineNumber":27,"author":{"gitID":"ChengSashankh"},"content":"            .withTags(\"Experienced\").build();"},{"lineNumber":28,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":29,"author":{"gitID":"ChengSashankh"},"content":"    public static final String KEYWORD_MATCHING_FRONTEND \u003d \"Frontend\"; // A keyword that matches FRONTEND"},{"lineNumber":30,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":31,"author":{"gitID":"ChengSashankh"},"content":"    private TypicalJobs() {} // prevents instantiation"},{"lineNumber":32,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":33,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"ChengSashankh"},"content":"     * Returns an {@code AddressBook} with all the typical jobs."},{"lineNumber":35,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"ChengSashankh"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":37,"author":{"gitID":"ChengSashankh"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":38,"author":{"gitID":"ChengSashankh"},"content":"        for (Job job : getTypicalJobs()) {"},{"lineNumber":39,"author":{"gitID":"ChengSashankh"},"content":"            try {"},{"lineNumber":40,"author":{"gitID":"ChengSashankh"},"content":"                ab.addJob(job);"},{"lineNumber":41,"author":{"gitID":"ChengSashankh"},"content":"            } catch (DuplicateJobException e) {"},{"lineNumber":42,"author":{"gitID":"ChengSashankh"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":43,"author":{"gitID":"ChengSashankh"},"content":"            }"},{"lineNumber":44,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"ChengSashankh"},"content":"        return ab;"},{"lineNumber":46,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":48,"author":{"gitID":"ChengSashankh"},"content":"    public static List\u003cJob\u003e getTypicalJobs() {"},{"lineNumber":49,"author":{"gitID":"ChengSashankh"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(FRONTEND, BACKEND));"},{"lineNumber":50,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"ChengSashankh"},"content":"}"},{"lineNumber":52,"author":{"gitID":"ChengSashankh"},"content":"//@@author"}],"authorContributionMap":{"ChengSashankh":42,"-":10}},{"path":"src/test/java/seedu/address/testutil/ReportBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"anh2111"},"content":"// @@author anh2111"},{"lineNumber":2,"author":{"gitID":"anh2111"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":4,"author":{"gitID":"anh2111"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"anh2111"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":7,"author":{"gitID":"anh2111"},"content":"import seedu.address.model.report.Proportion;"},{"lineNumber":8,"author":{"gitID":"anh2111"},"content":"import seedu.address.model.report.Report;"},{"lineNumber":9,"author":{"gitID":"anh2111"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":11,"author":{"gitID":"anh2111"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"anh2111"},"content":" * A utility class to help with building Report objects."},{"lineNumber":13,"author":{"gitID":"anh2111"},"content":" */"},{"lineNumber":14,"author":{"gitID":"anh2111"},"content":"public class ReportBuilder {"},{"lineNumber":15,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":16,"author":{"gitID":"anh2111"},"content":"    public static final String DEFAULT_POPULATION \u003d \"SEIntern\";"},{"lineNumber":17,"author":{"gitID":"anh2111"},"content":"    public static final int DEFAULT_TOTAL_PERSONS \u003d 5;"},{"lineNumber":18,"author":{"gitID":"anh2111"},"content":"    public static final int DEFAULT_TOTAL_TAGS \u003d 5;"},{"lineNumber":19,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":20,"author":{"gitID":"anh2111"},"content":"    /** DEFAULT PORTION 1 */"},{"lineNumber":21,"author":{"gitID":"anh2111"},"content":"    public static final int DEFAULT_VALUE_1 \u003d 5;"},{"lineNumber":22,"author":{"gitID":"anh2111"},"content":"    public static final String DEFAULT_TAG_NAME_1 \u003d \"Screening\";"},{"lineNumber":23,"author":{"gitID":"anh2111"},"content":"    public static final int DEFAULT_TOTAL_PERSONS_1 \u003d 5;"},{"lineNumber":24,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":25,"author":{"gitID":"anh2111"},"content":"    private Tag population;"},{"lineNumber":26,"author":{"gitID":"anh2111"},"content":"    private  List\u003cProportion\u003e allProportions;"},{"lineNumber":27,"author":{"gitID":"anh2111"},"content":"    private  int totalTags;"},{"lineNumber":28,"author":{"gitID":"anh2111"},"content":"    private  int totalPersons;"},{"lineNumber":29,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":30,"author":{"gitID":"anh2111"},"content":"    public ReportBuilder() {"},{"lineNumber":31,"author":{"gitID":"anh2111"},"content":"        population \u003d new Tag(DEFAULT_POPULATION);"},{"lineNumber":32,"author":{"gitID":"anh2111"},"content":"        allProportions \u003d new ArrayList\u003c\u003e();"},{"lineNumber":33,"author":{"gitID":"anh2111"},"content":"        allProportions.add(new Proportion(DEFAULT_TAG_NAME_1, DEFAULT_VALUE_1, DEFAULT_TOTAL_PERSONS_1));"},{"lineNumber":34,"author":{"gitID":"anh2111"},"content":"        totalTags \u003d DEFAULT_TOTAL_TAGS;"},{"lineNumber":35,"author":{"gitID":"anh2111"},"content":"        totalPersons \u003d DEFAULT_TOTAL_PERSONS;"},{"lineNumber":36,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":38,"author":{"gitID":"anh2111"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"anh2111"},"content":"     * Sets the {@code Name} of the {@code Report} that we are building."},{"lineNumber":40,"author":{"gitID":"anh2111"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"anh2111"},"content":"    public ReportBuilder withPopulation(String tagName) {"},{"lineNumber":42,"author":{"gitID":"anh2111"},"content":"        this.population \u003d new Tag(tagName);"},{"lineNumber":43,"author":{"gitID":"anh2111"},"content":"        return this;"},{"lineNumber":44,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":46,"author":{"gitID":"anh2111"},"content":"    public Report build() {"},{"lineNumber":47,"author":{"gitID":"anh2111"},"content":"        return new Report(population, allProportions, totalPersons);"},{"lineNumber":48,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":50,"author":{"gitID":"anh2111"},"content":"}"},{"lineNumber":51,"author":{"gitID":"anh2111"},"content":"// @@author"}],"authorContributionMap":{"anh2111":51}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LINK;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SKILLS;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * A utility class for Person."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class PersonUtil {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static String getAddCommand(Person person) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static String getPersonDetails(Person person) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"},{"lineNumber":35,"author":{"gitID":"deeheenguyen"},"content":"        sb.append(PREFIX_LINK + person.getLink().value + \" \");"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_SKILLS + person.getSkills().value + \" \");"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":38,"author":{"gitID":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"deeheenguyen":2,"-":40}},{"path":"src/test/java/seedu/address/testutil/JobUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_JOBTITLE;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SKILLS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.PostJobCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"ChengSashankh"},"content":"//@@author ChengSashankh"},{"lineNumber":12,"author":{"gitID":"ChengSashankh"},"content":"/***"},{"lineNumber":13,"author":{"gitID":"ChengSashankh"},"content":" * A utility class for Job."},{"lineNumber":14,"author":{"gitID":"ChengSashankh"},"content":" */"},{"lineNumber":15,"author":{"gitID":"ChengSashankh"},"content":"public class JobUtil {"},{"lineNumber":16,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":17,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"ChengSashankh"},"content":"     * Returns an addjob command string for adding the {@code job}."},{"lineNumber":19,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"ChengSashankh"},"content":"    public static String getPostJobCommand(Job job) {"},{"lineNumber":21,"author":{"gitID":"ChengSashankh"},"content":"        return PostJobCommand.COMMAND_WORD + \" \" + getJobDetails(job);"},{"lineNumber":22,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":24,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"ChengSashankh"},"content":"     * Returns the part of command string for the given {@code job}\u0027s details."},{"lineNumber":26,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"ChengSashankh"},"content":"    public static String getJobDetails(Job job) {"},{"lineNumber":28,"author":{"gitID":"ChengSashankh"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":29,"author":{"gitID":"ChengSashankh"},"content":"        sb.append(PREFIX_JOBTITLE + job.getJobTitle().fullTitle + \" \");"},{"lineNumber":30,"author":{"gitID":"ChengSashankh"},"content":"        sb.append(PREFIX_LOCATION + job.getLocation().value + \" \");"},{"lineNumber":31,"author":{"gitID":"ChengSashankh"},"content":"        sb.append(PREFIX_SKILLS + job.getSkills().value + \" \");"},{"lineNumber":32,"author":{"gitID":"ChengSashankh"},"content":"        job.getTags().stream().forEach(s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \"));"},{"lineNumber":33,"author":{"gitID":"ChengSashankh"},"content":"        return sb.toString();"},{"lineNumber":34,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"ChengSashankh"},"content":"}"},{"lineNumber":36,"author":{"gitID":"ChengSashankh"},"content":"//@@author"}],"authorContributionMap":{"ChengSashankh":26,"-":10}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LINK_AMY;"},{"lineNumber":8,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_LINK_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class TypicalPersons {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            .withPhone(\"85355255\").withSkills(\"CSS\")"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            .withTags(\"friends\").withLink(\"https://www.google.com.sg/\").build();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\").withSkills(\"CSS\")"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").withLink(\"https://www.google.com.sg/\").build();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withLink(\"https://www.google.com.sg/\")"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            .withSkills(\"CSS\").build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\")"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            .withLink(\"https://www.google.com.sg/\").withSkills(\"CSS\").build();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withLink(\"https://www.google.com.sg/\")"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            .withSkills(\"CSS\").build();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withLink(\"https://www.google.com.sg/\")"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            .withSkills(\"CSS\").build();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withLink(\"https://www.google.com.sg/\")"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            .withSkills(\"CSS\").build();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withLink(\"https://www.google.com.sg/\")"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            .withSkills(\"CSS\").build();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withLink(\"https://www.google.com.sg/\")"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            .withSkills(\"CSS\").build();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":64,"author":{"gitID":"deeheenguyen"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            .withLink(VALID_LINK_AMY).withTags(VALID_TAG_FRIEND).withLink(\"https://www.google.com.sg/\")"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            .withSkills(\"CSS\").build();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":68,"author":{"gitID":"deeheenguyen"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":69,"author":{"gitID":"deeheenguyen"},"content":"            .withLink(VALID_LINK_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            .withSkills(\"CSS\").withLink(\"https://www.google.com.sg/\").build();"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"deeheenguyen":6,"-":88}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":8,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.person.Link;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":12,"author":{"gitID":"tiny767"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.skill.Skill;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class PersonBuilder {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":26,"author":{"gitID":"tiny767"},"content":"    public static final String DEFAULT_REMARK \u003d \"\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":28,"author":{"gitID":"deeheenguyen"},"content":"    public static final String DEFAULT_LINK \u003d \"https://www.google.com.sg/\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_SKILL \u003d \"CSS\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Email email;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Address address;"},{"lineNumber":35,"author":{"gitID":"tiny767"},"content":"    private Remark remark;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Skill skill;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":38,"author":{"gitID":"deeheenguyen"},"content":"    private Link link;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":45,"author":{"gitID":"tiny767"},"content":"        remark \u003d new Remark(DEFAULT_REMARK);"},{"lineNumber":46,"author":{"gitID":"deeheenguyen"},"content":"        link \u003d new Link(DEFAULT_LINK);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        skill \u003d new Skill(DEFAULT_SKILL);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":59,"author":{"gitID":"tiny767"},"content":"        remark \u003d personToCopy.getRemark();"},{"lineNumber":60,"author":{"gitID":"deeheenguyen"},"content":"        link \u003d personToCopy.getLink();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        skill \u003d personToCopy.getSkills();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"tiny767"},"content":"     * Sets the {@code Phone} of the {@code Person} that"},{"lineNumber":91,"author":{"gitID":"tiny767"},"content":"     * we are building."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"tiny767"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"tiny767"},"content":"     * Sets the {@code Remark} of the {@code Person} that we are building."},{"lineNumber":108,"author":{"gitID":"tiny767"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"tiny767"},"content":"    public PersonBuilder withRemark(String remark) {"},{"lineNumber":110,"author":{"gitID":"tiny767"},"content":"        this.remark \u003d new Remark(remark);"},{"lineNumber":111,"author":{"gitID":"tiny767"},"content":"        return this;"},{"lineNumber":112,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":114,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"deeheenguyen"},"content":"     * Sets the {@code Link} of the {@code Person} that we are building."},{"lineNumber":116,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"deeheenguyen"},"content":"    public PersonBuilder withLink(String link) {"},{"lineNumber":118,"author":{"gitID":"deeheenguyen"},"content":"        this.link \u003d new Link(link);"},{"lineNumber":119,"author":{"gitID":"deeheenguyen"},"content":"        return this;"},{"lineNumber":120,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * Sets the {@code Skill} of the {@code Person} that we are building."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public PersonBuilder withSkills(String skills) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        this.skill \u003d new Skill(skills);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public Person build() {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        return new Person(name, phone, email, address, remark, link, skill, tags);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"deeheenguyen":14,"-":106,"tiny767":14}},{"path":"src/test/java/seedu/address/testutil/JobBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.job.JobTitle;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Location;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.skill.Skill;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"ChengSashankh"},"content":"//@@author ChengSashankh"},{"lineNumber":14,"author":{"gitID":"ChengSashankh"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"ChengSashankh"},"content":" * A utility class to help with building Job objects."},{"lineNumber":16,"author":{"gitID":"ChengSashankh"},"content":" */"},{"lineNumber":17,"author":{"gitID":"ChengSashankh"},"content":"public class JobBuilder {"},{"lineNumber":18,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":19,"author":{"gitID":"ChengSashankh"},"content":"    public static final String DEFAULT_JOBTITLE \u003d \"Software Engineer\";"},{"lineNumber":20,"author":{"gitID":"ChengSashankh"},"content":"    public static final String DEFAULT_LOCATION \u003d \"Geylang\";"},{"lineNumber":21,"author":{"gitID":"ChengSashankh"},"content":"    public static final String DEFAULT_SKILL \u003d \"Java, C, JavaScript\";"},{"lineNumber":22,"author":{"gitID":"ChengSashankh"},"content":"    public static final String DEFAULT_TAGS \u003d \"FreshGrad\";"},{"lineNumber":23,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":24,"author":{"gitID":"ChengSashankh"},"content":"    private JobTitle jobTitle;"},{"lineNumber":25,"author":{"gitID":"ChengSashankh"},"content":"    private Skill skill;"},{"lineNumber":26,"author":{"gitID":"ChengSashankh"},"content":"    private Location location;"},{"lineNumber":27,"author":{"gitID":"ChengSashankh"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":28,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":29,"author":{"gitID":"ChengSashankh"},"content":"    public JobBuilder() {"},{"lineNumber":30,"author":{"gitID":"ChengSashankh"},"content":"        jobTitle \u003d new JobTitle(DEFAULT_JOBTITLE);"},{"lineNumber":31,"author":{"gitID":"ChengSashankh"},"content":"        location \u003d new Location(DEFAULT_LOCATION);"},{"lineNumber":32,"author":{"gitID":"ChengSashankh"},"content":"        skill \u003d new Skill(DEFAULT_SKILL);"},{"lineNumber":33,"author":{"gitID":"ChengSashankh"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":34,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":36,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"ChengSashankh"},"content":"     * Initializes the JobBuilder with the data of {@code jobToCopy}."},{"lineNumber":38,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"ChengSashankh"},"content":"    public JobBuilder(Job jobToCopy) {"},{"lineNumber":40,"author":{"gitID":"ChengSashankh"},"content":"        jobTitle \u003d jobToCopy.getJobTitle();"},{"lineNumber":41,"author":{"gitID":"ChengSashankh"},"content":"        location \u003d jobToCopy.getLocation();"},{"lineNumber":42,"author":{"gitID":"ChengSashankh"},"content":"        skill \u003d jobToCopy.getSkills();"},{"lineNumber":43,"author":{"gitID":"ChengSashankh"},"content":"        tags \u003d new HashSet\u003c\u003e(jobToCopy.getTags());"},{"lineNumber":44,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":46,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"ChengSashankh"},"content":"     * Sets the {@code JobTitle} of the {@code Job} that we are building."},{"lineNumber":48,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"ChengSashankh"},"content":"    public JobBuilder withJobTitle(String title) {"},{"lineNumber":50,"author":{"gitID":"ChengSashankh"},"content":"        this.jobTitle \u003d new JobTitle(title);"},{"lineNumber":51,"author":{"gitID":"ChengSashankh"},"content":"        return this;"},{"lineNumber":52,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":54,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"ChengSashankh"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Job} that we are building."},{"lineNumber":56,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"ChengSashankh"},"content":"    public JobBuilder withTags(String ... tags) {"},{"lineNumber":58,"author":{"gitID":"ChengSashankh"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":59,"author":{"gitID":"ChengSashankh"},"content":"        return this;"},{"lineNumber":60,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":62,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"ChengSashankh"},"content":"     * Sets the {@code Location} of the {@code Job} that we are building."},{"lineNumber":64,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"ChengSashankh"},"content":"    public JobBuilder withLocation(String title) {"},{"lineNumber":66,"author":{"gitID":"ChengSashankh"},"content":"        this.location \u003d new Location(title);"},{"lineNumber":67,"author":{"gitID":"ChengSashankh"},"content":"        return this;"},{"lineNumber":68,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":70,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"ChengSashankh"},"content":"     * Sets the {@code Phone} of the {@code Person} that"},{"lineNumber":72,"author":{"gitID":"ChengSashankh"},"content":"     * we are building."},{"lineNumber":73,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"ChengSashankh"},"content":"    public JobBuilder withSkill(String skill) {"},{"lineNumber":75,"author":{"gitID":"ChengSashankh"},"content":"        this.skill \u003d new Skill(skill);"},{"lineNumber":76,"author":{"gitID":"ChengSashankh"},"content":"        return this;"},{"lineNumber":77,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"ChengSashankh"},"content":"    public Job build() {"},{"lineNumber":79,"author":{"gitID":"ChengSashankh"},"content":"        return new Job(jobTitle, location, skill, tags);"},{"lineNumber":80,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":82,"author":{"gitID":"ChengSashankh"},"content":"}"},{"lineNumber":83,"author":{"gitID":"ChengSashankh"},"content":"//@@author"}],"authorContributionMap":{"ChengSashankh":71,"-":12}},{"path":"src/test/java/seedu/address/testutil/EditJobDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditJobCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.job.JobTitle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Location;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.skill.Skill;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"ChengSashankh"},"content":"//@@author ChengSashankh"},{"lineNumber":15,"author":{"gitID":"ChengSashankh"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"ChengSashankh"},"content":" * A utility class to help with building EditJobDescriptor objects."},{"lineNumber":17,"author":{"gitID":"ChengSashankh"},"content":" */"},{"lineNumber":18,"author":{"gitID":"ChengSashankh"},"content":"public class EditJobDescriptorBuilder {"},{"lineNumber":19,"author":{"gitID":"ChengSashankh"},"content":"    private EditJobCommand.EditJobDescriptor descriptor;"},{"lineNumber":20,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":21,"author":{"gitID":"ChengSashankh"},"content":"    public EditJobDescriptorBuilder() {"},{"lineNumber":22,"author":{"gitID":"ChengSashankh"},"content":"        descriptor \u003d new EditJobCommand.EditJobDescriptor();"},{"lineNumber":23,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":25,"author":{"gitID":"ChengSashankh"},"content":"    public EditJobDescriptorBuilder(EditJobCommand.EditJobDescriptor descriptor) {"},{"lineNumber":26,"author":{"gitID":"ChengSashankh"},"content":"        this.descriptor \u003d new EditJobCommand.EditJobDescriptor(descriptor);"},{"lineNumber":27,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":29,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"ChengSashankh"},"content":"     * Returns an {@code EditJobDescriptor} with fields containing {@code job}\u0027s details"},{"lineNumber":31,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"ChengSashankh"},"content":"    public EditJobDescriptorBuilder(Job job) {"},{"lineNumber":33,"author":{"gitID":"ChengSashankh"},"content":"        descriptor \u003d new EditJobCommand.EditJobDescriptor();"},{"lineNumber":34,"author":{"gitID":"ChengSashankh"},"content":"        descriptor.setJobTitle(job.getJobTitle());"},{"lineNumber":35,"author":{"gitID":"ChengSashankh"},"content":"        descriptor.setLocation(job.getLocation());"},{"lineNumber":36,"author":{"gitID":"ChengSashankh"},"content":"        descriptor.setSkill(job.getSkills());"},{"lineNumber":37,"author":{"gitID":"ChengSashankh"},"content":"        descriptor.setTags(job.getTags());"},{"lineNumber":38,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":40,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"ChengSashankh"},"content":"     * Sets the {@code JobTitle} of the {@code EditJobDescriptor} that we are building."},{"lineNumber":42,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"ChengSashankh"},"content":"    public EditJobDescriptorBuilder withJobTitle(String jobTitle) {"},{"lineNumber":44,"author":{"gitID":"ChengSashankh"},"content":"        descriptor.setJobTitle(new JobTitle(jobTitle));"},{"lineNumber":45,"author":{"gitID":"ChengSashankh"},"content":"        return this;"},{"lineNumber":46,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":48,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"ChengSashankh"},"content":"     * Sets the {@code Location} of the {@code EditJobDescriptor} that we are building."},{"lineNumber":50,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"ChengSashankh"},"content":"    public EditJobDescriptorBuilder withLocation(String location) {"},{"lineNumber":52,"author":{"gitID":"ChengSashankh"},"content":"        descriptor.setLocation(new Location(location));"},{"lineNumber":53,"author":{"gitID":"ChengSashankh"},"content":"        return this;"},{"lineNumber":54,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":56,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"ChengSashankh"},"content":"     * Sets the {@code Skills} of the {@code EditJobDescriptor} that we are building."},{"lineNumber":58,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"ChengSashankh"},"content":"    public EditJobDescriptorBuilder withSkills(String skills) {"},{"lineNumber":60,"author":{"gitID":"ChengSashankh"},"content":"        descriptor.setSkill(new Skill(skills));"},{"lineNumber":61,"author":{"gitID":"ChengSashankh"},"content":"        return this;"},{"lineNumber":62,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":64,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"ChengSashankh"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditJobDescriptor}"},{"lineNumber":66,"author":{"gitID":"ChengSashankh"},"content":"     * that we are building."},{"lineNumber":67,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"ChengSashankh"},"content":"    public EditJobDescriptorBuilder withTags(String... tags) {"},{"lineNumber":69,"author":{"gitID":"ChengSashankh"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":70,"author":{"gitID":"ChengSashankh"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":71,"author":{"gitID":"ChengSashankh"},"content":"        return this;"},{"lineNumber":72,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":74,"author":{"gitID":"ChengSashankh"},"content":"    public EditJobCommand.EditJobDescriptor build() {"},{"lineNumber":75,"author":{"gitID":"ChengSashankh"},"content":"        return descriptor;"},{"lineNumber":76,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"ChengSashankh"},"content":"}"},{"lineNumber":78,"author":{"gitID":"ChengSashankh"},"content":"//@@author"}],"authorContributionMap":{"ChengSashankh":65,"-":13}},{"path":"src/test/java/seedu/address/testutil/TypicalInterviews.java","lines":[{"lineNumber":1,"author":{"gitID":"deeheenguyen"},"content":"//@@author deeheenguyen"},{"lineNumber":2,"author":{"gitID":"deeheenguyen"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":4,"author":{"gitID":"deeheenguyen"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"deeheenguyen"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":8,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":9,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.Interview;"},{"lineNumber":10,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.exceptions.DuplicateInterviewException;"},{"lineNumber":11,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":12,"author":{"gitID":"deeheenguyen"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":" * A utility class containing a list of {@code Interview} objects to be used in tests."},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":" */"},{"lineNumber":15,"author":{"gitID":"deeheenguyen"},"content":"public class TypicalInterviews {"},{"lineNumber":16,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":17,"author":{"gitID":"deeheenguyen"},"content":"    public static final Interview SE_INTERVIEW \u003d new InterviewBuilder().withInterviewTitle(\"SE interview\")"},{"lineNumber":18,"author":{"gitID":"deeheenguyen"},"content":"            .withInterviewee(\"Kelvin\").withDate(\"01.02.2018\")"},{"lineNumber":19,"author":{"gitID":"deeheenguyen"},"content":"            .withInterviewLocation(\"NUS\").build();"},{"lineNumber":20,"author":{"gitID":"deeheenguyen"},"content":"    public static final Interview FINANCE_INTERVIEW \u003d new InterviewBuilder().withInterviewTitle(\"Finance interview\")"},{"lineNumber":21,"author":{"gitID":"deeheenguyen"},"content":"            .withInterviewee(\"Bob\").withDate(\"01.03.2018\")"},{"lineNumber":22,"author":{"gitID":"deeheenguyen"},"content":"            .withInterviewLocation(\"SOC\").build();"},{"lineNumber":23,"author":{"gitID":"deeheenguyen"},"content":"    public static final Interview TECH_INTERVIEW \u003d new InterviewBuilder().withInterviewTitle(\"Tech interview\")"},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":"            .withInterviewee(\"Lucian\").withDate(\"01.04.2018\")"},{"lineNumber":25,"author":{"gitID":"deeheenguyen"},"content":"            .withInterviewLocation(\"Science\").build();"},{"lineNumber":26,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":27,"author":{"gitID":"deeheenguyen"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":28,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":29,"author":{"gitID":"deeheenguyen"},"content":"    private TypicalInterviews() {} // prevents instantiation"},{"lineNumber":30,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":31,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"deeheenguyen"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":33,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"deeheenguyen"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":35,"author":{"gitID":"deeheenguyen"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":36,"author":{"gitID":"deeheenguyen"},"content":"        for (Interview interview : getTypicalInterviews()) {"},{"lineNumber":37,"author":{"gitID":"deeheenguyen"},"content":"            try {"},{"lineNumber":38,"author":{"gitID":"deeheenguyen"},"content":"                ab.addInterview(interview);"},{"lineNumber":39,"author":{"gitID":"deeheenguyen"},"content":"            } catch (DuplicateInterviewException e) {"},{"lineNumber":40,"author":{"gitID":"deeheenguyen"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":41,"author":{"gitID":"deeheenguyen"},"content":"            }"},{"lineNumber":42,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"deeheenguyen"},"content":"        return ab;"},{"lineNumber":44,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":46,"author":{"gitID":"deeheenguyen"},"content":"    public static List\u003cInterview\u003e getTypicalInterviews() {"},{"lineNumber":47,"author":{"gitID":"deeheenguyen"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(SE_INTERVIEW, FINANCE_INTERVIEW, TECH_INTERVIEW));"},{"lineNumber":48,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"deeheenguyen"},"content":"}"}],"authorContributionMap":{"deeheenguyen":49}},{"path":"src/test/java/guitests/guihandles/PersonCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Provides a handle to a person card in the person list panel."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#email\";"},{"lineNumber":19,"author":{"gitID":"tiny767"},"content":"    private static final String REMARK_FIELD_ID \u003d \"#remark\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Label addressLabel;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Label phoneLabel;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Label emailLabel;"},{"lineNumber":27,"author":{"gitID":"tiny767"},"content":"    private final Label remarkLabel;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public PersonCardHandle(Node cardNode) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"},{"lineNumber":37,"author":{"gitID":"tiny767"},"content":"        this.remarkLabel \u003d getChildNode(REMARK_FIELD_ID);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public String getAddress() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return addressLabel.getText();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public String getPhone() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return phoneLabel.getText();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public String getEmail() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return emailLabel.getText();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"deeheenguyen"},"content":"    public String getRemark() {"},{"lineNumber":68,"author":{"gitID":"deeheenguyen"},"content":"        return remarkLabel.getText();"},{"lineNumber":69,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"deeheenguyen":3,"-":70,"tiny767":4}},{"path":"src/test/java/guitests/guihandles/ReportPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"anh2111"},"content":"// @@author anh2111"},{"lineNumber":2,"author":{"gitID":"anh2111"},"content":"package guitests.guihandles;"},{"lineNumber":3,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":4,"author":{"gitID":"anh2111"},"content":"import javafx.scene.Node;"},{"lineNumber":5,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":6,"author":{"gitID":"anh2111"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"anh2111"},"content":" * A handler for the {@code BrowserPanel} of the UI."},{"lineNumber":8,"author":{"gitID":"anh2111"},"content":" */"},{"lineNumber":9,"author":{"gitID":"anh2111"},"content":"public class ReportPanelHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":10,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":11,"author":{"gitID":"anh2111"},"content":"    public static final String REPORT_ID \u003d \"#report\";"},{"lineNumber":12,"author":{"gitID":"anh2111"},"content":"    private boolean isReportPanelOpened \u003d false;"},{"lineNumber":13,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":14,"author":{"gitID":"anh2111"},"content":"    public ReportPanelHandle(Node reportPanelNode) {"},{"lineNumber":15,"author":{"gitID":"anh2111"},"content":"        super(reportPanelNode);"},{"lineNumber":16,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":18,"author":{"gitID":"anh2111"},"content":"    public boolean isOpened() {"},{"lineNumber":19,"author":{"gitID":"anh2111"},"content":"        return isReportPanelOpened;"},{"lineNumber":20,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"anh2111"},"content":"}"},{"lineNumber":22,"author":{"gitID":"anh2111"},"content":"// @@author"}],"authorContributionMap":{"anh2111":22}},{"path":"src/test/java/seedu/address/testutil/InterviewBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"deeheenguyen"},"content":"//@@author deeheenguyen"},{"lineNumber":2,"author":{"gitID":"deeheenguyen"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":4,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.Date;"},{"lineNumber":5,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.Interview;"},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.InterviewLocation;"},{"lineNumber":7,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.InterviewTitle;"},{"lineNumber":8,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":9,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":10,"author":{"gitID":"deeheenguyen"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"deeheenguyen"},"content":" * A utility class to help with building Person objects."},{"lineNumber":12,"author":{"gitID":"deeheenguyen"},"content":" */"},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":"public class InterviewBuilder {"},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":15,"author":{"gitID":"deeheenguyen"},"content":"    public static final String DEFAULT_INTERVIEW_TITLE \u003d \"Internship Interview\";"},{"lineNumber":16,"author":{"gitID":"deeheenguyen"},"content":"    public static final String DEFAULT_INTERVIEWEE \u003d \"David\";"},{"lineNumber":17,"author":{"gitID":"deeheenguyen"},"content":"    public static final String DEFAULT_INNTERVIEW_LOCATION \u003d \"NUS\";"},{"lineNumber":18,"author":{"gitID":"deeheenguyen"},"content":"    public static final String DEFAULT_DATE \u003d \"01.01.2018\";"},{"lineNumber":19,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":20,"author":{"gitID":"deeheenguyen"},"content":"    private Name interviewee;"},{"lineNumber":21,"author":{"gitID":"deeheenguyen"},"content":"    private InterviewTitle interviewTitle;"},{"lineNumber":22,"author":{"gitID":"deeheenguyen"},"content":"    private InterviewLocation interviewLocation;"},{"lineNumber":23,"author":{"gitID":"deeheenguyen"},"content":"    private Date date;"},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":25,"author":{"gitID":"deeheenguyen"},"content":"    public InterviewBuilder() {"},{"lineNumber":26,"author":{"gitID":"deeheenguyen"},"content":"        interviewee \u003d new Name(DEFAULT_INTERVIEWEE);"},{"lineNumber":27,"author":{"gitID":"deeheenguyen"},"content":"        interviewTitle \u003d new InterviewTitle(DEFAULT_INTERVIEW_TITLE);"},{"lineNumber":28,"author":{"gitID":"deeheenguyen"},"content":"        interviewLocation \u003d new InterviewLocation(DEFAULT_INNTERVIEW_LOCATION);"},{"lineNumber":29,"author":{"gitID":"deeheenguyen"},"content":"        date \u003d new Date(DEFAULT_DATE);"},{"lineNumber":30,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":32,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"deeheenguyen"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":34,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"deeheenguyen"},"content":"    public InterviewBuilder(Interview interviewToCopy) {"},{"lineNumber":36,"author":{"gitID":"deeheenguyen"},"content":"        interviewTitle \u003d interviewToCopy.getInterviewTitle();"},{"lineNumber":37,"author":{"gitID":"deeheenguyen"},"content":"        interviewee \u003d interviewToCopy.getInterviewee();"},{"lineNumber":38,"author":{"gitID":"deeheenguyen"},"content":"        interviewLocation \u003d interviewToCopy.getInterviewLocation();"},{"lineNumber":39,"author":{"gitID":"deeheenguyen"},"content":"        date \u003d interviewToCopy.getDate();"},{"lineNumber":40,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":42,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"deeheenguyen"},"content":"     * Sets the {@code Interviewee} of the {@code Interview} that we are building."},{"lineNumber":44,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"deeheenguyen"},"content":"    public InterviewBuilder withInterviewee(String name) {"},{"lineNumber":46,"author":{"gitID":"deeheenguyen"},"content":"        this.interviewee \u003d new Name(name);"},{"lineNumber":47,"author":{"gitID":"deeheenguyen"},"content":"        return this;"},{"lineNumber":48,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":50,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":51,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"deeheenguyen"},"content":"     * Sets the {@code InterviewLocation} of the {@code Person} that we are building."},{"lineNumber":53,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"deeheenguyen"},"content":"    public InterviewBuilder withInterviewLocation(String interviewLocation) {"},{"lineNumber":55,"author":{"gitID":"deeheenguyen"},"content":"        this.interviewLocation \u003d new InterviewLocation(interviewLocation);"},{"lineNumber":56,"author":{"gitID":"deeheenguyen"},"content":"        return this;"},{"lineNumber":57,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":59,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"deeheenguyen"},"content":"     * Sets the {@code Date} of the {@code Interview} that"},{"lineNumber":61,"author":{"gitID":"deeheenguyen"},"content":"     * we are building."},{"lineNumber":62,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"deeheenguyen"},"content":"    public InterviewBuilder withDate(String date) {"},{"lineNumber":64,"author":{"gitID":"deeheenguyen"},"content":"        this.date \u003d new Date(date);"},{"lineNumber":65,"author":{"gitID":"deeheenguyen"},"content":"        return this;"},{"lineNumber":66,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":68,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"deeheenguyen"},"content":"     * Sets the {@code InterviewTitle} of the {@code Interview} that we are building."},{"lineNumber":70,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"deeheenguyen"},"content":"    public InterviewBuilder withInterviewTitle(String interviewTitle) {"},{"lineNumber":72,"author":{"gitID":"deeheenguyen"},"content":"        this.interviewTitle \u003d new InterviewTitle(interviewTitle);"},{"lineNumber":73,"author":{"gitID":"deeheenguyen"},"content":"        return this;"},{"lineNumber":74,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":76,"author":{"gitID":"deeheenguyen"},"content":"    public Interview build() {"},{"lineNumber":77,"author":{"gitID":"deeheenguyen"},"content":"        return new Interview(interviewTitle, interviewee, date, interviewLocation);"},{"lineNumber":78,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":80,"author":{"gitID":"deeheenguyen"},"content":"}"},{"lineNumber":81,"author":{"gitID":"deeheenguyen"},"content":"//author @deeheenguyen"}],"authorContributionMap":{"deeheenguyen":81}},{"path":"src/main/java/seedu/address/ui/CommandBox.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.CommandCorrection.chooseSuggestion;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.CommandCorrection.getSuggestions;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.CommandCorrection.setRecentInput;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.CommandCorrection.setUpCommandCompletion;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.CommandCorrection.setUpCommandCorrection;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.CommandCorrection.updateTabCounter;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.CommandCorrection.updateTextToComplete;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.CommandCorrectedEvent;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandCorrection;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.ListElementPointer;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private final Logic logic;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private ListElementPointer historySnapshot;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private TextField commandTextField;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public CommandBox(Logic logic) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box."},{"lineNumber":48,"author":{"gitID":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Handles the key press event, {@code keyEvent}."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        switch (keyEvent.getCode()) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        case UP:"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            // As up and down buttons will alter the position of the caret,"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            // consuming it causes the caret\u0027s position to remain unchanged"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            navigateToPreviousInput();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        case DOWN:"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            navigateToNextInput();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        case SPACE:"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            navigateToCorrectedCommand();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        case TAB:"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            navigateToCompletedCommand();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            // let JavaFx handle the keypress"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Updates the text field with the previous input in {@code historySnapshot},"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * if there exists a previous input in {@code historySnapshot}"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    private void navigateToPreviousInput() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasPrevious()) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.previous());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Updates the text field with the next input in {@code historySnapshot},"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * if there exists a next input in {@code historySnapshot}"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    private void navigateToNextInput() {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasNext()) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.next());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"ChengSashankh"},"content":"    //@@author ChengSashankh"},{"lineNumber":108,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"ChengSashankh"},"content":"     * Updates the text field with the suggested text by auto-correct,"},{"lineNumber":110,"author":{"gitID":"ChengSashankh"},"content":"     * if there exists a suggestion."},{"lineNumber":111,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"ChengSashankh"},"content":"    private void navigateToCorrectedCommand() {"},{"lineNumber":113,"author":{"gitID":"ChengSashankh"},"content":"        setUpCommandCorrection();"},{"lineNumber":114,"author":{"gitID":"ChengSashankh"},"content":"        if (CommandCorrection.isCorrectCommand(commandTextField.getText())) {"},{"lineNumber":115,"author":{"gitID":"ChengSashankh"},"content":"            return;"},{"lineNumber":116,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":118,"author":{"gitID":"ChengSashankh"},"content":"        String textToCorrect \u003d commandTextField.getText();"},{"lineNumber":119,"author":{"gitID":"ChengSashankh"},"content":"        replaceText(CommandCorrection.nearestCorrection(textToCorrect));"},{"lineNumber":120,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":122,"author":{"gitID":"ChengSashankh"},"content":"    /***"},{"lineNumber":123,"author":{"gitID":"ChengSashankh"},"content":"     * Updates the text field with suggestion from auto-complete,"},{"lineNumber":124,"author":{"gitID":"ChengSashankh"},"content":"     * if there exists a suggested completion"},{"lineNumber":125,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"ChengSashankh"},"content":"    private void navigateToCompletedCommand() {"},{"lineNumber":127,"author":{"gitID":"ChengSashankh"},"content":"        setUpCommandCompletion();"},{"lineNumber":128,"author":{"gitID":"ChengSashankh"},"content":"        String textToComplete \u003d commandTextField.getText().trim();"},{"lineNumber":129,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":130,"author":{"gitID":"ChengSashankh"},"content":"        if (CommandCorrection.noTextToComplete(textToComplete)) {"},{"lineNumber":131,"author":{"gitID":"ChengSashankh"},"content":"            return;"},{"lineNumber":132,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":134,"author":{"gitID":"ChengSashankh"},"content":"        updateTabCounter(textToComplete);"},{"lineNumber":135,"author":{"gitID":"ChengSashankh"},"content":"        textToComplete \u003d updateTextToComplete(textToComplete);"},{"lineNumber":136,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":137,"author":{"gitID":"ChengSashankh"},"content":"        setRecentInput(textToComplete);"},{"lineNumber":138,"author":{"gitID":"ChengSashankh"},"content":"        int suggestionToChoose \u003d CommandCorrection.getTabCounter();"},{"lineNumber":139,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":140,"author":{"gitID":"ChengSashankh"},"content":"        ArrayList\u003cString\u003e suggestions \u003d getSuggestions(textToComplete);"},{"lineNumber":141,"author":{"gitID":"ChengSashankh"},"content":"        String chosenString \u003d chooseSuggestion(suggestions, suggestionToChoose,"},{"lineNumber":142,"author":{"gitID":"ChengSashankh"},"content":"                commandTextField.getText());"},{"lineNumber":143,"author":{"gitID":"ChengSashankh"},"content":"        if (suggestions.isEmpty()) {"},{"lineNumber":144,"author":{"gitID":"ChengSashankh"},"content":"            raise(new CommandCorrectedEvent("},{"lineNumber":145,"author":{"gitID":"ChengSashankh"},"content":"                    String.format(CommandCorrection.NO_MATCHES_FEEDBACK_TO_USER, chosenString)));"},{"lineNumber":146,"author":{"gitID":"ChengSashankh"},"content":"        } else {"},{"lineNumber":147,"author":{"gitID":"ChengSashankh"},"content":"            raise(new CommandCorrectedEvent("},{"lineNumber":148,"author":{"gitID":"ChengSashankh"},"content":"                    String.format(CommandCorrection.MATCH_FOUND_FEEDBACK_TO_USER, suggestions.toString()"},{"lineNumber":149,"author":{"gitID":"ChengSashankh"},"content":"                            .replace(\" \", \"\"))));"},{"lineNumber":150,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"ChengSashankh"},"content":"        replaceText(chosenString);"},{"lineNumber":152,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"ChengSashankh"},"content":"    //@@author"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * Sets {@code CommandBox}\u0027s text field with {@code text} and"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * positions the caret to the end of the {@code text}."},{"lineNumber":158,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    private void replaceText(String text) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        commandTextField.setText(text);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        commandTextField.positionCaret(commandTextField.getText().length());"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    private void handleCommandInputChanged() {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            historySnapshot.next();"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            // process result of the command"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            commandTextField.setText(\"\");"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            // handle command failure"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":182,"author":{"gitID":"-"},"content":"            logger.info(\"Invalid command: \" + commandTextField.getText());"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(e.getMessage()));"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * Initializes the history snapshot."},{"lineNumber":189,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    private void initHistory() {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        // the user if she tries to navigate past the most-recent end of the historySnapshot."},{"lineNumber":194,"author":{"gitID":"-"},"content":"        historySnapshot.add(\"\");"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * Sets the command box style to use the default style."},{"lineNumber":199,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    private void setStyleToDefault() {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":206,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"ChengSashankh":47,"-":170}},{"path":"src/main/java/seedu/address/ui/BrowserPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.event.Event;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"tiny767"},"content":"import javafx.scene.control.Label;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * The Browser Panel of the App."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class BrowserPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PAGE \u003d \"default.html\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String SEARCH_PAGE_URL \u003d"},{"lineNumber":27,"author":{"gitID":"deeheenguyen"},"content":"            \"https://www.google.com.sg/\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"BrowserPanel.fxml\";"},{"lineNumber":30,"author":{"gitID":"tiny767"},"content":"    private static String processType;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private WebView browser;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"tiny767"},"content":"    private Label location;"},{"lineNumber":38,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":39,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public BrowserPanel() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":44,"author":{"gitID":"-"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        loadDefaultPage();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"deeheenguyen"},"content":"     * Loading the personal page with the given url"},{"lineNumber":52,"author":{"gitID":"deeheenguyen"},"content":"     * If @param person is null. Return default page."},{"lineNumber":53,"author":{"gitID":"deeheenguyen"},"content":"    */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private void loadPersonPage(Person person) {"},{"lineNumber":55,"author":{"gitID":"deeheenguyen"},"content":"        if (person.getLink() \u003d\u003d null) {"},{"lineNumber":56,"author":{"gitID":"deeheenguyen"},"content":"            loadPage(SEARCH_PAGE_URL);"},{"lineNumber":57,"author":{"gitID":"deeheenguyen"},"content":"        } else {"},{"lineNumber":58,"author":{"gitID":"deeheenguyen"},"content":"            loadPage(person.getLink().value);"},{"lineNumber":59,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void loadPage(String url) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e browser.getEngine().load(url));"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Loads a default HTML file with a background that matches the general theme."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private void loadDefaultPage() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        loadPage(defaultPage.toExternalForm());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Frees resources allocated to the browser."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void freeResources() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        browser \u003d null;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        loadPersonPage(event.getNewSelection().person);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"deeheenguyen":10,"-":70,"tiny767":6}},{"path":"src/main/java/seedu/address/ui/ReportPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"anh2111"},"content":"// @@author anh2111"},{"lineNumber":2,"author":{"gitID":"anh2111"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":4,"author":{"gitID":"anh2111"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"anh2111"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":7,"author":{"gitID":"anh2111"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":8,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":9,"author":{"gitID":"anh2111"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"anh2111"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":12,"author":{"gitID":"anh2111"},"content":"import javafx.fxml.FXML;"},{"lineNumber":13,"author":{"gitID":"anh2111"},"content":"import javafx.scene.chart.BarChart;"},{"lineNumber":14,"author":{"gitID":"anh2111"},"content":"import javafx.scene.chart.PieChart;"},{"lineNumber":15,"author":{"gitID":"anh2111"},"content":"import javafx.scene.chart.XYChart;"},{"lineNumber":16,"author":{"gitID":"anh2111"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":17,"author":{"gitID":"anh2111"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":18,"author":{"gitID":"anh2111"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":19,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":20,"author":{"gitID":"anh2111"},"content":"import seedu.address.MainApp;"},{"lineNumber":21,"author":{"gitID":"anh2111"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":22,"author":{"gitID":"anh2111"},"content":"import seedu.address.model.report.Proportion;"},{"lineNumber":23,"author":{"gitID":"anh2111"},"content":"import seedu.address.model.report.Report;"},{"lineNumber":24,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":25,"author":{"gitID":"anh2111"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"anh2111"},"content":" * The Report Panel of the App."},{"lineNumber":27,"author":{"gitID":"anh2111"},"content":" */"},{"lineNumber":28,"author":{"gitID":"anh2111"},"content":"public class ReportPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":29,"author":{"gitID":"anh2111"},"content":"    private static final String FXML \u003d \"ReportPanel.fxml\";"},{"lineNumber":30,"author":{"gitID":"anh2111"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":31,"author":{"gitID":"anh2111"},"content":"    private static final Double CHART_BAR_GAP \u003d 0.1;"},{"lineNumber":32,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":33,"author":{"gitID":"anh2111"},"content":"    private Report pReport;"},{"lineNumber":34,"author":{"gitID":"anh2111"},"content":"    private ObservableList\u003cReport\u003e reportHistory;"},{"lineNumber":35,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":36,"author":{"gitID":"anh2111"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"anh2111"},"content":"    private PieChart pieChart;"},{"lineNumber":38,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":39,"author":{"gitID":"anh2111"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"anh2111"},"content":"    private BarChart barChart;"},{"lineNumber":41,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":42,"author":{"gitID":"anh2111"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"anh2111"},"content":"    private ListView\u003cReportCard\u003e reportListView;"},{"lineNumber":44,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":45,"author":{"gitID":"anh2111"},"content":"    public ReportPanel(Report report, ObservableList\u003cReport\u003e reportHistory) {"},{"lineNumber":46,"author":{"gitID":"anh2111"},"content":"        super(FXML);"},{"lineNumber":47,"author":{"gitID":"anh2111"},"content":"        pReport \u003d report;"},{"lineNumber":48,"author":{"gitID":"anh2111"},"content":"        this.reportHistory \u003d reportHistory;"},{"lineNumber":49,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":50,"author":{"gitID":"anh2111"},"content":"        setupPieChart();"},{"lineNumber":51,"author":{"gitID":"anh2111"},"content":"        setupBarChart();"},{"lineNumber":52,"author":{"gitID":"anh2111"},"content":"        setupHistoryTable();"},{"lineNumber":53,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":55,"author":{"gitID":"anh2111"},"content":"    private void setupPieChart() {"},{"lineNumber":56,"author":{"gitID":"anh2111"},"content":"        pieChart.setTitle(\"In \" + pReport.getTotalTags() + \" Tags\");"},{"lineNumber":57,"author":{"gitID":"anh2111"},"content":"        pieChart.setData(tabulateData());"},{"lineNumber":58,"author":{"gitID":"anh2111"},"content":"        pieChart.setLabelsVisible(false);"},{"lineNumber":59,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":61,"author":{"gitID":"anh2111"},"content":"    private void setupBarChart() {"},{"lineNumber":62,"author":{"gitID":"anh2111"},"content":"        String paneTitle \u003d  \"Statistics of #\" + pReport.getPopulation().tagName + \" candidates\\n\\n\";"},{"lineNumber":63,"author":{"gitID":"anh2111"},"content":"        String barChartTitle \u003d \"In \" + pReport.getTotalPersons() + \" candidates\";"},{"lineNumber":64,"author":{"gitID":"anh2111"},"content":"        int indentation \u003d Math.max((int) ((paneTitle.length() - barChartTitle.length()) * 0.8), 0);"},{"lineNumber":65,"author":{"gitID":"anh2111"},"content":"        String spacesInTitle \u003d new String(new char[indentation]).replace(\u0027\\0\u0027, \u0027 \u0027);"},{"lineNumber":66,"author":{"gitID":"anh2111"},"content":"        barChart.setTitle(paneTitle + spacesInTitle + barChartTitle);"},{"lineNumber":67,"author":{"gitID":"anh2111"},"content":"        barChart.setData(tabulateBarChartData());"},{"lineNumber":68,"author":{"gitID":"anh2111"},"content":"        barChart.setBarGap(CHART_BAR_GAP);"},{"lineNumber":69,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":71,"author":{"gitID":"anh2111"},"content":"    private void setupHistoryTable() {"},{"lineNumber":72,"author":{"gitID":"anh2111"},"content":"        ObservableList\u003cReportCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":73,"author":{"gitID":"anh2111"},"content":"                reportHistory, (p) -\u003e new ReportCard(p));"},{"lineNumber":74,"author":{"gitID":"anh2111"},"content":"        reportListView.setItems(mappedList);"},{"lineNumber":75,"author":{"gitID":"anh2111"},"content":"        reportListView.setCellFactory(listView -\u003e new ReportPanel.ReportListViewCell());"},{"lineNumber":76,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":78,"author":{"gitID":"anh2111"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"anh2111"},"content":"     * Formats the data into PieChart.Data for display"},{"lineNumber":80,"author":{"gitID":"anh2111"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"anh2111"},"content":"    private ObservableList\u003cPieChart.Data\u003e tabulateData() {"},{"lineNumber":82,"author":{"gitID":"anh2111"},"content":"        ArrayList\u003cPieChart.Data\u003e data \u003d new ArrayList\u003c\u003e();"},{"lineNumber":83,"author":{"gitID":"anh2111"},"content":"        int count \u003d 0;"},{"lineNumber":84,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":85,"author":{"gitID":"anh2111"},"content":"        for (Proportion p : pReport.getAllProportions()) {"},{"lineNumber":86,"author":{"gitID":"anh2111"},"content":"            count++;"},{"lineNumber":87,"author":{"gitID":"anh2111"},"content":"            int percent \u003d (int) ((p.value * 100.0f) / pReport.getTotalTags());"},{"lineNumber":88,"author":{"gitID":"anh2111"},"content":"            data.add(new PieChart.Data(count + \". \" + p.tagName + \" \" + percent + \"%\", p.value));"},{"lineNumber":89,"author":{"gitID":"anh2111"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"anh2111"},"content":"        return FXCollections.observableArrayList(data);"},{"lineNumber":91,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":93,"author":{"gitID":"anh2111"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"anh2111"},"content":"     * Formats the data into BarChart.Data for display"},{"lineNumber":95,"author":{"gitID":"anh2111"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"anh2111"},"content":"    private ObservableList\u003cXYChart.Series\u003cString, Integer\u003e\u003e tabulateBarChartData() {"},{"lineNumber":97,"author":{"gitID":"anh2111"},"content":"        ObservableList\u003cXYChart.Series\u003cString, Integer\u003e\u003e data \u003d FXCollections.observableArrayList();"},{"lineNumber":98,"author":{"gitID":"anh2111"},"content":"        XYChart.Series\u003cString, Integer\u003e series \u003d new XYChart.Series\u003cString, Integer\u003e();"},{"lineNumber":99,"author":{"gitID":"anh2111"},"content":"        series.setName(\"Number of Candidates Having The Tag\");"},{"lineNumber":100,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":101,"author":{"gitID":"anh2111"},"content":"        for (Proportion p : pReport.getAllProportions()) {"},{"lineNumber":102,"author":{"gitID":"anh2111"},"content":"            series.getData().add(new XYChart.Data(p.tagName, new Integer(p.totalPersons)));"},{"lineNumber":103,"author":{"gitID":"anh2111"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"anh2111"},"content":"        data.addAll(series);"},{"lineNumber":105,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":106,"author":{"gitID":"anh2111"},"content":"        return data;"},{"lineNumber":107,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":109,"author":{"gitID":"anh2111"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"anh2111"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code ReportCard}."},{"lineNumber":111,"author":{"gitID":"anh2111"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"anh2111"},"content":"    class ReportListViewCell extends ListCell\u003cReportCard\u003e {"},{"lineNumber":113,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":114,"author":{"gitID":"anh2111"},"content":"        @Override"},{"lineNumber":115,"author":{"gitID":"anh2111"},"content":"        protected void updateItem(ReportCard r, boolean empty) {"},{"lineNumber":116,"author":{"gitID":"anh2111"},"content":"            super.updateItem(r, empty);"},{"lineNumber":117,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":118,"author":{"gitID":"anh2111"},"content":"            if (empty || r \u003d\u003d null) {"},{"lineNumber":119,"author":{"gitID":"anh2111"},"content":"                setGraphic(null);"},{"lineNumber":120,"author":{"gitID":"anh2111"},"content":"                setText(null);"},{"lineNumber":121,"author":{"gitID":"anh2111"},"content":"            } else {"},{"lineNumber":122,"author":{"gitID":"anh2111"},"content":"                setGraphic(r.getRoot());"},{"lineNumber":123,"author":{"gitID":"anh2111"},"content":"            }"},{"lineNumber":124,"author":{"gitID":"anh2111"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"anh2111"},"content":"}"},{"lineNumber":127,"author":{"gitID":"anh2111"},"content":"// @@author"}],"authorContributionMap":{"anh2111":127}},{"path":"src/main/java/seedu/address/ui/InterviewListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"deeheenguyen"},"content":"//@@author deeheenguyen"},{"lineNumber":2,"author":{"gitID":"deeheenguyen"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":4,"author":{"gitID":"deeheenguyen"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":7,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":8,"author":{"gitID":"deeheenguyen"},"content":"import javafx.application.Platform;"},{"lineNumber":9,"author":{"gitID":"deeheenguyen"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":10,"author":{"gitID":"deeheenguyen"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"deeheenguyen"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":12,"author":{"gitID":"deeheenguyen"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.commons.events.ui.InterviewPanelSelectionChangedEvent;"},{"lineNumber":16,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.Interview;"},{"lineNumber":17,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":18,"author":{"gitID":"deeheenguyen"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"deeheenguyen"},"content":" * Panel containing the list of jobs."},{"lineNumber":20,"author":{"gitID":"deeheenguyen"},"content":" */"},{"lineNumber":21,"author":{"gitID":"deeheenguyen"},"content":"public class InterviewListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":22,"author":{"gitID":"deeheenguyen"},"content":"    private static final String FXML \u003d \"InterviewListPanel.fxml\";"},{"lineNumber":23,"author":{"gitID":"deeheenguyen"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(InterviewListPanel.class);"},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":25,"author":{"gitID":"deeheenguyen"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitID":"deeheenguyen"},"content":"    private ListView\u003cInterviewCard\u003e interviewListView;"},{"lineNumber":27,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":28,"author":{"gitID":"deeheenguyen"},"content":"    public InterviewListPanel(ObservableList\u003cInterview\u003e interviewList) {"},{"lineNumber":29,"author":{"gitID":"deeheenguyen"},"content":"        super(FXML);"},{"lineNumber":30,"author":{"gitID":"deeheenguyen"},"content":"        setConnections(interviewList);"},{"lineNumber":31,"author":{"gitID":"deeheenguyen"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":32,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":34,"author":{"gitID":"deeheenguyen"},"content":"    private void setConnections(ObservableList\u003cInterview\u003e interviewList) {"},{"lineNumber":35,"author":{"gitID":"deeheenguyen"},"content":"        ObservableList\u003cInterviewCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":36,"author":{"gitID":"deeheenguyen"},"content":"                interviewList, (interview) -\u003e"},{"lineNumber":37,"author":{"gitID":"deeheenguyen"},"content":"                        new InterviewCard(interview, interviewList.indexOf(interview) + 1));"},{"lineNumber":38,"author":{"gitID":"deeheenguyen"},"content":"        interviewListView.setItems(mappedList);"},{"lineNumber":39,"author":{"gitID":"deeheenguyen"},"content":"        interviewListView.setCellFactory(listView -\u003e new InterviewListViewCell());"},{"lineNumber":40,"author":{"gitID":"deeheenguyen"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":41,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":43,"author":{"gitID":"deeheenguyen"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":44,"author":{"gitID":"deeheenguyen"},"content":"        interviewListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":45,"author":{"gitID":"deeheenguyen"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":46,"author":{"gitID":"deeheenguyen"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":47,"author":{"gitID":"deeheenguyen"},"content":"                        logger.fine(\"Selection in interview list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":48,"author":{"gitID":"deeheenguyen"},"content":"                        raise(new InterviewPanelSelectionChangedEvent(newValue));"},{"lineNumber":49,"author":{"gitID":"deeheenguyen"},"content":"                    }"},{"lineNumber":50,"author":{"gitID":"deeheenguyen"},"content":"                });"},{"lineNumber":51,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":53,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":54,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"deeheenguyen"},"content":"     * Scrolls to the {@code JobCard} at the {@code index} and selects it."},{"lineNumber":56,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"deeheenguyen"},"content":"    private void scrollTo(int index) {"},{"lineNumber":58,"author":{"gitID":"deeheenguyen"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":59,"author":{"gitID":"deeheenguyen"},"content":"            interviewListView.scrollTo(index);"},{"lineNumber":60,"author":{"gitID":"deeheenguyen"},"content":"            interviewListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":61,"author":{"gitID":"deeheenguyen"},"content":"        });"},{"lineNumber":62,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":64,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"deeheenguyen"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code InterviewCard}."},{"lineNumber":66,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"deeheenguyen"},"content":"    class InterviewListViewCell extends ListCell\u003cInterviewCard\u003e {"},{"lineNumber":68,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":69,"author":{"gitID":"deeheenguyen"},"content":"        @Override"},{"lineNumber":70,"author":{"gitID":"deeheenguyen"},"content":"        protected void updateItem(InterviewCard interview, boolean empty) {"},{"lineNumber":71,"author":{"gitID":"deeheenguyen"},"content":"            super.updateItem(interview, empty);"},{"lineNumber":72,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":73,"author":{"gitID":"deeheenguyen"},"content":"            if (empty || interview \u003d\u003d null) {"},{"lineNumber":74,"author":{"gitID":"deeheenguyen"},"content":"                setGraphic(null);"},{"lineNumber":75,"author":{"gitID":"deeheenguyen"},"content":"                setText(null);"},{"lineNumber":76,"author":{"gitID":"deeheenguyen"},"content":"            } else {"},{"lineNumber":77,"author":{"gitID":"deeheenguyen"},"content":"                setGraphic(interview.getRoot());"},{"lineNumber":78,"author":{"gitID":"deeheenguyen"},"content":"            }"},{"lineNumber":79,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":82,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":83,"author":{"gitID":"deeheenguyen"},"content":"}"}],"authorContributionMap":{"deeheenguyen":83}},{"path":"src/test/java/guitests/guihandles/JobCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"ChengSashankh"},"content":"//@@author ChengSashankh"},{"lineNumber":11,"author":{"gitID":"ChengSashankh"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"ChengSashankh"},"content":" * Provides a handle to a job card in the job list panel."},{"lineNumber":13,"author":{"gitID":"ChengSashankh"},"content":" */"},{"lineNumber":14,"author":{"gitID":"ChengSashankh"},"content":"public class JobCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":15,"author":{"gitID":"ChengSashankh"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":16,"author":{"gitID":"ChengSashankh"},"content":"    private static final String JOBTITLE_FIELD_ID \u003d \"#jobTitle\";"},{"lineNumber":17,"author":{"gitID":"ChengSashankh"},"content":"    private static final String LOCATION_FIELD_ID \u003d \"#jobLocation\";"},{"lineNumber":18,"author":{"gitID":"ChengSashankh"},"content":"    private static final String SKILLS_FIELD_ID \u003d \"#jobSkills\";"},{"lineNumber":19,"author":{"gitID":"ChengSashankh"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":20,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":21,"author":{"gitID":"ChengSashankh"},"content":"    private final Label idLabel;"},{"lineNumber":22,"author":{"gitID":"ChengSashankh"},"content":"    private final Label jobTitleLabel;"},{"lineNumber":23,"author":{"gitID":"ChengSashankh"},"content":"    private final Label locationLabel;"},{"lineNumber":24,"author":{"gitID":"ChengSashankh"},"content":"    private final Label skillsLabel;"},{"lineNumber":25,"author":{"gitID":"ChengSashankh"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":26,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":27,"author":{"gitID":"ChengSashankh"},"content":"    public JobCardHandle(Node cardNode) {"},{"lineNumber":28,"author":{"gitID":"ChengSashankh"},"content":"        super(cardNode);"},{"lineNumber":29,"author":{"gitID":"ChengSashankh"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":30,"author":{"gitID":"ChengSashankh"},"content":"        this.jobTitleLabel \u003d getChildNode(JOBTITLE_FIELD_ID);"},{"lineNumber":31,"author":{"gitID":"ChengSashankh"},"content":"        this.locationLabel \u003d getChildNode(LOCATION_FIELD_ID);"},{"lineNumber":32,"author":{"gitID":"ChengSashankh"},"content":"        this.skillsLabel \u003d getChildNode(SKILLS_FIELD_ID);"},{"lineNumber":33,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":34,"author":{"gitID":"ChengSashankh"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":35,"author":{"gitID":"ChengSashankh"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":36,"author":{"gitID":"ChengSashankh"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":37,"author":{"gitID":"ChengSashankh"},"content":"                .stream()"},{"lineNumber":38,"author":{"gitID":"ChengSashankh"},"content":"                .map(Label.class::cast)"},{"lineNumber":39,"author":{"gitID":"ChengSashankh"},"content":"                .collect(Collectors.toList());"},{"lineNumber":40,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":42,"author":{"gitID":"ChengSashankh"},"content":"    public String getId() {"},{"lineNumber":43,"author":{"gitID":"ChengSashankh"},"content":"        return idLabel.getText();"},{"lineNumber":44,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":46,"author":{"gitID":"ChengSashankh"},"content":"    public String getJobTitle() {"},{"lineNumber":47,"author":{"gitID":"ChengSashankh"},"content":"        return jobTitleLabel.getText();"},{"lineNumber":48,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":50,"author":{"gitID":"ChengSashankh"},"content":"    public String getLocation() {"},{"lineNumber":51,"author":{"gitID":"ChengSashankh"},"content":"        return locationLabel.getText();"},{"lineNumber":52,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":54,"author":{"gitID":"ChengSashankh"},"content":"    public String getSkills() {"},{"lineNumber":55,"author":{"gitID":"ChengSashankh"},"content":"        return skillsLabel.getText();"},{"lineNumber":56,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":58,"author":{"gitID":"ChengSashankh"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":59,"author":{"gitID":"ChengSashankh"},"content":"        return tagLabels"},{"lineNumber":60,"author":{"gitID":"ChengSashankh"},"content":"                .stream()"},{"lineNumber":61,"author":{"gitID":"ChengSashankh"},"content":"                .map(Label::getText)"},{"lineNumber":62,"author":{"gitID":"ChengSashankh"},"content":"                .collect(Collectors.toList());"},{"lineNumber":63,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"ChengSashankh"},"content":"}"},{"lineNumber":65,"author":{"gitID":"ChengSashankh"},"content":"//@@author"}],"authorContributionMap":{"ChengSashankh":56,"-":9}},{"path":"src/main/java/seedu/address/ui/ReportCard.java","lines":[{"lineNumber":1,"author":{"gitID":"anh2111"},"content":"// @@author anh2111"},{"lineNumber":2,"author":{"gitID":"anh2111"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":4,"author":{"gitID":"anh2111"},"content":"import javafx.fxml.FXML;"},{"lineNumber":5,"author":{"gitID":"anh2111"},"content":"import javafx.scene.control.Label;"},{"lineNumber":6,"author":{"gitID":"anh2111"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":7,"author":{"gitID":"anh2111"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":8,"author":{"gitID":"anh2111"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"anh2111"},"content":"import seedu.address.model.report.Report;"},{"lineNumber":10,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":11,"author":{"gitID":"anh2111"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"anh2111"},"content":" * An UI component that displays information of a {@code Report}."},{"lineNumber":13,"author":{"gitID":"anh2111"},"content":" */"},{"lineNumber":14,"author":{"gitID":"anh2111"},"content":"public class ReportCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":15,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":16,"author":{"gitID":"anh2111"},"content":"    private static final String FXML \u003d \"ReportListCard.fxml\";"},{"lineNumber":17,"author":{"gitID":"anh2111"},"content":"    private static final String[] TAG_COLORS \u003d {\"red\", \"pink\", \"blue\"};"},{"lineNumber":18,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":19,"author":{"gitID":"anh2111"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"anh2111"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":21,"author":{"gitID":"anh2111"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":22,"author":{"gitID":"anh2111"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":23,"author":{"gitID":"anh2111"},"content":"     *"},{"lineNumber":24,"author":{"gitID":"anh2111"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":25,"author":{"gitID":"anh2111"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":27,"author":{"gitID":"anh2111"},"content":"    public final Report report;"},{"lineNumber":28,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":29,"author":{"gitID":"anh2111"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"anh2111"},"content":"    private HBox cardPane;"},{"lineNumber":31,"author":{"gitID":"anh2111"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"anh2111"},"content":"    private Label date;"},{"lineNumber":33,"author":{"gitID":"anh2111"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"anh2111"},"content":"    private FlowPane tags;"},{"lineNumber":35,"author":{"gitID":"anh2111"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"anh2111"},"content":"    private Label totalPersons;"},{"lineNumber":37,"author":{"gitID":"anh2111"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"anh2111"},"content":"    private Label totalTags;"},{"lineNumber":39,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":40,"author":{"gitID":"anh2111"},"content":"    public ReportCard(Report report) {"},{"lineNumber":41,"author":{"gitID":"anh2111"},"content":"        super(FXML);"},{"lineNumber":42,"author":{"gitID":"anh2111"},"content":"        this.report \u003d report;"},{"lineNumber":43,"author":{"gitID":"anh2111"},"content":"        totalPersons.setText(\"Total number of people: \" + report.getTotalPersons());"},{"lineNumber":44,"author":{"gitID":"anh2111"},"content":"        totalTags.setText(\"Total number of tags: \" + report.getTotalTags());"},{"lineNumber":45,"author":{"gitID":"anh2111"},"content":"        date.setText(\"Statistics at \" + report.getDate());"},{"lineNumber":46,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":47,"author":{"gitID":"anh2111"},"content":"        initTags(report);"},{"lineNumber":48,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":50,"author":{"gitID":"anh2111"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"anh2111"},"content":"     * Add comment!!"},{"lineNumber":52,"author":{"gitID":"anh2111"},"content":"     * @param report"},{"lineNumber":53,"author":{"gitID":"anh2111"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"anh2111"},"content":"    private void initTags(Report report) {"},{"lineNumber":55,"author":{"gitID":"anh2111"},"content":"        report.getAllProportions().forEach(p -\u003e {"},{"lineNumber":56,"author":{"gitID":"anh2111"},"content":"            Label label \u003d new Label(p.tagName + \"(\" + p.value + \")\");"},{"lineNumber":57,"author":{"gitID":"anh2111"},"content":"            label.getStyleClass().add(getTagColorFor(p.tagName));"},{"lineNumber":58,"author":{"gitID":"anh2111"},"content":"            tags.getChildren().add(label);"},{"lineNumber":59,"author":{"gitID":"anh2111"},"content":"        });"},{"lineNumber":60,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":62,"author":{"gitID":"anh2111"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"anh2111"},"content":"     * Add comment!!"},{"lineNumber":64,"author":{"gitID":"anh2111"},"content":"     * @param tagName"},{"lineNumber":65,"author":{"gitID":"anh2111"},"content":"     * @return"},{"lineNumber":66,"author":{"gitID":"anh2111"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"anh2111"},"content":"    private String getTagColorFor(String tagName) {"},{"lineNumber":68,"author":{"gitID":"anh2111"},"content":"        //some explanation"},{"lineNumber":69,"author":{"gitID":"anh2111"},"content":"        return TAG_COLORS[Math.abs(tagName.hashCode()) % TAG_COLORS.length];"},{"lineNumber":70,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":72,"author":{"gitID":"anh2111"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"anh2111"},"content":"    public boolean equals(Object other) {"},{"lineNumber":74,"author":{"gitID":"anh2111"},"content":"        // short circuit if same object"},{"lineNumber":75,"author":{"gitID":"anh2111"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":76,"author":{"gitID":"anh2111"},"content":"            return true;"},{"lineNumber":77,"author":{"gitID":"anh2111"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":79,"author":{"gitID":"anh2111"},"content":"        // instanceof handles nulls"},{"lineNumber":80,"author":{"gitID":"anh2111"},"content":"        if (!(other instanceof ReportCard)) {"},{"lineNumber":81,"author":{"gitID":"anh2111"},"content":"            return false;"},{"lineNumber":82,"author":{"gitID":"anh2111"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":84,"author":{"gitID":"anh2111"},"content":"        // state check"},{"lineNumber":85,"author":{"gitID":"anh2111"},"content":"        ReportCard card \u003d (ReportCard) other;"},{"lineNumber":86,"author":{"gitID":"anh2111"},"content":"        return date.getText().equals(card.date.getText())"},{"lineNumber":87,"author":{"gitID":"anh2111"},"content":"                \u0026\u0026 report.equals(card.report);"},{"lineNumber":88,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"anh2111"},"content":"}"},{"lineNumber":90,"author":{"gitID":"anh2111"},"content":"// @@author"}],"authorContributionMap":{"anh2111":90}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"tiny767"},"content":"import javafx.scene.Scene;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.RefreshReportPanelEvent;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ToggleBrowserPanelEvent;"},{"lineNumber":23,"author":{"gitID":"tiny767"},"content":"import seedu.address.commons.events.ui.ToggleFacebookPanelEvent;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ToggleReportPanelEvent;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":43,"author":{"gitID":"tiny767"},"content":"    private FacebookPanel facebookPanel;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private ReportPanel reportPanel;"},{"lineNumber":45,"author":{"gitID":"deeheenguyen"},"content":"    private InterviewListPanel interviewListPanel;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private JobListPanel jobListPanel;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private Boolean isReportPanelOpen;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private StackPane browserOrReportPlaceholder;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private StackPane reportPlaceholder;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private StackPane jobListPanelPlaceholder;"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"deeheenguyen"},"content":"    @FXML"},{"lineNumber":71,"author":{"gitID":"deeheenguyen"},"content":"    private StackPane interviewListPanelPlaceholder;"},{"lineNumber":72,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"tiny767"},"content":"        //@@author tiny767"},{"lineNumber":93,"author":{"gitID":"tiny767"},"content":"        Scene scene \u003d primaryStage.getScene();"},{"lineNumber":94,"author":{"gitID":"tiny767"},"content":"        UiTheme.getInstance().setScene(scene);"},{"lineNumber":95,"author":{"gitID":"tiny767"},"content":"        primaryStage.setScene(scene);"},{"lineNumber":96,"author":{"gitID":"tiny767"},"content":"        //@@author"},{"lineNumber":97,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":118,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":119,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":120,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":121,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":122,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":123,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":124,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":125,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":126,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":127,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":128,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":129,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":130,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":131,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":135,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        switchToBrowserPanel();"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        jobListPanel \u003d new JobListPanel(logic.getFilteredJobList());"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        jobListPanelPlaceholder.getChildren().add(jobListPanel.getRoot());"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"deeheenguyen"},"content":"        interviewListPanel \u003d new InterviewListPanel(logic.getFilteredInterviewList());"},{"lineNumber":152,"author":{"gitID":"deeheenguyen"},"content":"        interviewListPanelPlaceholder.getChildren().add(interviewListPanel.getRoot());"},{"lineNumber":153,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"anh2111"},"content":"    // @@author anh2111"},{"lineNumber":164,"author":{"gitID":"anh2111"},"content":"    /**"},{"lineNumber":165,"author":{"gitID":"anh2111"},"content":"     * Replace the current panel by Report panel"},{"lineNumber":166,"author":{"gitID":"anh2111"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"anh2111"},"content":"    void switchToReportPanel() {"},{"lineNumber":168,"author":{"gitID":"anh2111"},"content":"        reportPanel \u003d new ReportPanel(logic.getReport(), logic.getReportHistory());"},{"lineNumber":169,"author":{"gitID":"anh2111"},"content":"        browserOrReportPlaceholder.getChildren().clear();"},{"lineNumber":170,"author":{"gitID":"anh2111"},"content":"        browserOrReportPlaceholder.getChildren().add(reportPanel.getRoot());"},{"lineNumber":171,"author":{"gitID":"anh2111"},"content":"        isReportPanelOpen \u003d true;"},{"lineNumber":172,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":174,"author":{"gitID":"anh2111"},"content":"    /**"},{"lineNumber":175,"author":{"gitID":"anh2111"},"content":"     * Replace the current panel by Browser panel"},{"lineNumber":176,"author":{"gitID":"anh2111"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"anh2111"},"content":"    void switchToBrowserPanel() {"},{"lineNumber":178,"author":{"gitID":"anh2111"},"content":"        browserPanel \u003d new BrowserPanel();"},{"lineNumber":179,"author":{"gitID":"anh2111"},"content":"        browserOrReportPlaceholder.getChildren().clear();"},{"lineNumber":180,"author":{"gitID":"anh2111"},"content":"        browserOrReportPlaceholder.getChildren().add(browserPanel.getRoot());"},{"lineNumber":181,"author":{"gitID":"anh2111"},"content":"        isReportPanelOpen \u003d false;"},{"lineNumber":182,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":184,"author":{"gitID":"anh2111"},"content":"    // @@author"},{"lineNumber":185,"author":{"gitID":"tiny767"},"content":"    //@@author tiny767"},{"lineNumber":186,"author":{"gitID":"tiny767"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"tiny767"},"content":"     * Replace the current panel by Facebook panel"},{"lineNumber":188,"author":{"gitID":"tiny767"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"tiny767"},"content":"    void switchToFacebookPanel() {"},{"lineNumber":190,"author":{"gitID":"tiny767"},"content":"        facebookPanel \u003d new FacebookPanel();"},{"lineNumber":191,"author":{"gitID":"tiny767"},"content":"        browserOrReportPlaceholder.getChildren().clear();"},{"lineNumber":192,"author":{"gitID":"tiny767"},"content":"        browserOrReportPlaceholder.getChildren().add(facebookPanel.getRoot());"},{"lineNumber":193,"author":{"gitID":"tiny767"},"content":"        isReportPanelOpen \u003d false;"},{"lineNumber":194,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"tiny767"},"content":"    //@@author"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    private void handleRefreshReportPanel(RefreshReportPanelEvent event) {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        if (isReportPanelOpen) {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"            switchToReportPanel();"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":214,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":220,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":225,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":226,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":229,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":234,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":247,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        return this.personListPanel;"},{"lineNumber":255,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"    void releaseResources() {"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        browserPanel.freeResources();"},{"lineNumber":259,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"anh2111"},"content":"    // @@author anh2111"},{"lineNumber":267,"author":{"gitID":"anh2111"},"content":"    @Subscribe"},{"lineNumber":268,"author":{"gitID":"anh2111"},"content":"    private void handleToggleBrowserPanelEvent(ToggleBrowserPanelEvent event) {"},{"lineNumber":269,"author":{"gitID":"anh2111"},"content":"        switchToBrowserPanel();"},{"lineNumber":270,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":271,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":272,"author":{"gitID":"anh2111"},"content":"    @Subscribe"},{"lineNumber":273,"author":{"gitID":"anh2111"},"content":"    private void handleToggleReportPanelEvent(ToggleReportPanelEvent event) {"},{"lineNumber":274,"author":{"gitID":"anh2111"},"content":"        switchToReportPanel();"},{"lineNumber":275,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":276,"author":{"gitID":"anh2111"},"content":"    // @@author"},{"lineNumber":277,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":278,"author":{"gitID":"tiny767"},"content":"    @Subscribe"},{"lineNumber":279,"author":{"gitID":"tiny767"},"content":"    private void handleToggleFacebookPanelEvent(ToggleFacebookPanelEvent event) {"},{"lineNumber":280,"author":{"gitID":"tiny767"},"content":"        switchToFacebookPanel();"},{"lineNumber":281,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":282,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"deeheenguyen":7,"anh2111":33,"-":217,"tiny767":25}},{"path":"src/main/java/seedu/address/ui/JobListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JobPanelSelectionChangedEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToJobListRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"ChengSashankh"},"content":"//@@author ChengSashankh"},{"lineNumber":21,"author":{"gitID":"ChengSashankh"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"ChengSashankh"},"content":" * Panel containing the list of jobs."},{"lineNumber":23,"author":{"gitID":"ChengSashankh"},"content":" */"},{"lineNumber":24,"author":{"gitID":"ChengSashankh"},"content":"public class JobListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":25,"author":{"gitID":"ChengSashankh"},"content":"    private static final String FXML \u003d \"JobListPanel.fxml\";"},{"lineNumber":26,"author":{"gitID":"ChengSashankh"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(JobListPanel.class);"},{"lineNumber":27,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":28,"author":{"gitID":"ChengSashankh"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"ChengSashankh"},"content":"    private ListView\u003cJobCard\u003e jobListView;"},{"lineNumber":30,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":31,"author":{"gitID":"ChengSashankh"},"content":"    public JobListPanel(ObservableList\u003cJob\u003e jobList) {"},{"lineNumber":32,"author":{"gitID":"ChengSashankh"},"content":"        super(FXML);"},{"lineNumber":33,"author":{"gitID":"ChengSashankh"},"content":"        setConnections(jobList);"},{"lineNumber":34,"author":{"gitID":"ChengSashankh"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":35,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":37,"author":{"gitID":"ChengSashankh"},"content":"    private void setConnections(ObservableList\u003cJob\u003e jobList) {"},{"lineNumber":38,"author":{"gitID":"ChengSashankh"},"content":"        ObservableList\u003cJobCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":39,"author":{"gitID":"ChengSashankh"},"content":"                jobList, (job) -\u003e new JobCard(job, jobList.indexOf(job) + 1));"},{"lineNumber":40,"author":{"gitID":"ChengSashankh"},"content":"        jobListView.setItems(mappedList);"},{"lineNumber":41,"author":{"gitID":"ChengSashankh"},"content":"        jobListView.setCellFactory(listView -\u003e new JobListViewCell());"},{"lineNumber":42,"author":{"gitID":"ChengSashankh"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":43,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":45,"author":{"gitID":"ChengSashankh"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":46,"author":{"gitID":"ChengSashankh"},"content":"        jobListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":47,"author":{"gitID":"ChengSashankh"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":48,"author":{"gitID":"ChengSashankh"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":49,"author":{"gitID":"ChengSashankh"},"content":"                        logger.fine(\"Selection in job list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":50,"author":{"gitID":"ChengSashankh"},"content":"                        raise(new JobPanelSelectionChangedEvent(newValue));"},{"lineNumber":51,"author":{"gitID":"ChengSashankh"},"content":"                    }"},{"lineNumber":52,"author":{"gitID":"ChengSashankh"},"content":"                });"},{"lineNumber":53,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":55,"author":{"gitID":"ChengSashankh"},"content":"    @Subscribe"},{"lineNumber":56,"author":{"gitID":"ChengSashankh"},"content":"    private void handleJumpToJobListRequestEvent(JumpToJobListRequestEvent event) {"},{"lineNumber":57,"author":{"gitID":"ChengSashankh"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":58,"author":{"gitID":"ChengSashankh"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":59,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":61,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"ChengSashankh"},"content":"     * Scrolls to the {@code JobCard} at the {@code index} and selects it."},{"lineNumber":63,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"ChengSashankh"},"content":"    private void scrollTo(int index) {"},{"lineNumber":65,"author":{"gitID":"ChengSashankh"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":66,"author":{"gitID":"ChengSashankh"},"content":"            jobListView.scrollTo(index);"},{"lineNumber":67,"author":{"gitID":"ChengSashankh"},"content":"            jobListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":68,"author":{"gitID":"ChengSashankh"},"content":"        });"},{"lineNumber":69,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":71,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"ChengSashankh"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code JobCard}."},{"lineNumber":73,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"ChengSashankh"},"content":"    class JobListViewCell extends ListCell\u003cJobCard\u003e {"},{"lineNumber":75,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":76,"author":{"gitID":"ChengSashankh"},"content":"        @Override"},{"lineNumber":77,"author":{"gitID":"ChengSashankh"},"content":"        protected void updateItem(JobCard job, boolean empty) {"},{"lineNumber":78,"author":{"gitID":"ChengSashankh"},"content":"            super.updateItem(job, empty);"},{"lineNumber":79,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":80,"author":{"gitID":"ChengSashankh"},"content":"            if (empty || job \u003d\u003d null) {"},{"lineNumber":81,"author":{"gitID":"ChengSashankh"},"content":"                setGraphic(null);"},{"lineNumber":82,"author":{"gitID":"ChengSashankh"},"content":"                setText(null);"},{"lineNumber":83,"author":{"gitID":"ChengSashankh"},"content":"            } else {"},{"lineNumber":84,"author":{"gitID":"ChengSashankh"},"content":"                setGraphic(job.getRoot());"},{"lineNumber":85,"author":{"gitID":"ChengSashankh"},"content":"            }"},{"lineNumber":86,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"ChengSashankh"},"content":"}"},{"lineNumber":89,"author":{"gitID":"ChengSashankh"},"content":"//@@author"}],"authorContributionMap":{"ChengSashankh":70,"-":19}},{"path":"src/main/java/seedu/address/ui/UiTheme.java","lines":[{"lineNumber":1,"author":{"gitID":"tiny767"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":3,"author":{"gitID":"tiny767"},"content":"import javafx.scene.Scene;"},{"lineNumber":4,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":5,"author":{"gitID":"tiny767"},"content":"//@@author tiny767"},{"lineNumber":6,"author":{"gitID":"tiny767"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"tiny767"},"content":" * stores the styles that can be used for the interface"},{"lineNumber":8,"author":{"gitID":"tiny767"},"content":" */"},{"lineNumber":9,"author":{"gitID":"tiny767"},"content":"public class UiTheme {"},{"lineNumber":10,"author":{"gitID":"tiny767"},"content":"    private static final String LIGHT_THEME_STYLE \u003d \"view/LightTheme.css\";"},{"lineNumber":11,"author":{"gitID":"tiny767"},"content":"    private static final String DARK_THEME_STYLE \u003d \"view/DarkTheme.css\";"},{"lineNumber":12,"author":{"gitID":"tiny767"},"content":"    private static final String MORNING_THEME_STYLE \u003d \"view/MorningTheme.css\";"},{"lineNumber":13,"author":{"gitID":"tiny767"},"content":"    private static Scene scene \u003d null;"},{"lineNumber":14,"author":{"gitID":"tiny767"},"content":"    private static UiTheme instance \u003d null;"},{"lineNumber":15,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":16,"author":{"gitID":"tiny767"},"content":"    public static void setScene(Scene s) {"},{"lineNumber":17,"author":{"gitID":"tiny767"},"content":"        scene \u003d s;"},{"lineNumber":18,"author":{"gitID":"tiny767"},"content":"        setDefaultTheme();"},{"lineNumber":19,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":21,"author":{"gitID":"tiny767"},"content":"    private static void setDefaultTheme() {"},{"lineNumber":22,"author":{"gitID":"tiny767"},"content":"        setToMorningTheme();"},{"lineNumber":23,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":25,"author":{"gitID":"tiny767"},"content":"    public static void setToLightTheme() {"},{"lineNumber":26,"author":{"gitID":"tiny767"},"content":"        scene.getStylesheets().setAll(LIGHT_THEME_STYLE);"},{"lineNumber":27,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":29,"author":{"gitID":"tiny767"},"content":"    public static void setToDarkTheme() {"},{"lineNumber":30,"author":{"gitID":"tiny767"},"content":"        scene.getStylesheets().setAll(DARK_THEME_STYLE);"},{"lineNumber":31,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":33,"author":{"gitID":"tiny767"},"content":"    public static void setToMorningTheme() {"},{"lineNumber":34,"author":{"gitID":"tiny767"},"content":"        scene.getStylesheets().setAll(MORNING_THEME_STYLE);"},{"lineNumber":35,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":37,"author":{"gitID":"tiny767"},"content":"    public static UiTheme getInstance() {"},{"lineNumber":38,"author":{"gitID":"tiny767"},"content":"        if (instance \u003d\u003d null) {"},{"lineNumber":39,"author":{"gitID":"tiny767"},"content":"            instance \u003d new UiTheme();"},{"lineNumber":40,"author":{"gitID":"tiny767"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":42,"author":{"gitID":"tiny767"},"content":"        return instance;"},{"lineNumber":43,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"tiny767"},"content":"}"}],"authorContributionMap":{"tiny767":44}},{"path":"src/main/java/seedu/address/ui/InterviewCard.java","lines":[{"lineNumber":1,"author":{"gitID":"deeheenguyen"},"content":"//@@author deeheenguyen"},{"lineNumber":2,"author":{"gitID":"deeheenguyen"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":4,"author":{"gitID":"deeheenguyen"},"content":"import javafx.fxml.FXML;"},{"lineNumber":5,"author":{"gitID":"deeheenguyen"},"content":"import javafx.scene.control.Label;"},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"deeheenguyen"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.Interview;"},{"lineNumber":9,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":10,"author":{"gitID":"deeheenguyen"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"deeheenguyen"},"content":" * An UI component that displays information of a {@code Interview}."},{"lineNumber":12,"author":{"gitID":"deeheenguyen"},"content":" */"},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":"public class InterviewCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":"    private static final String FXML \u003d \"InterviewListCard.fxml\";"},{"lineNumber":15,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":16,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"deeheenguyen"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":18,"author":{"gitID":"deeheenguyen"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":19,"author":{"gitID":"deeheenguyen"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":20,"author":{"gitID":"deeheenguyen"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"deeheenguyen"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":22,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":"    public final Interview interview;"},{"lineNumber":25,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":26,"author":{"gitID":"deeheenguyen"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitID":"deeheenguyen"},"content":"    private HBox cardPane;"},{"lineNumber":28,"author":{"gitID":"deeheenguyen"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"deeheenguyen"},"content":"    private Label id;"},{"lineNumber":30,"author":{"gitID":"deeheenguyen"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"deeheenguyen"},"content":"    private Label interviewTitle;"},{"lineNumber":32,"author":{"gitID":"deeheenguyen"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"deeheenguyen"},"content":"    private Label interviewLocation;"},{"lineNumber":34,"author":{"gitID":"deeheenguyen"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"deeheenguyen"},"content":"    private Label interviewee;"},{"lineNumber":36,"author":{"gitID":"deeheenguyen"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"deeheenguyen"},"content":"    private Label date;"},{"lineNumber":38,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":39,"author":{"gitID":"deeheenguyen"},"content":"    public InterviewCard(Interview interview, int displayedIndex) {"},{"lineNumber":40,"author":{"gitID":"deeheenguyen"},"content":"        super(FXML);"},{"lineNumber":41,"author":{"gitID":"deeheenguyen"},"content":"        this.interview \u003d interview;"},{"lineNumber":42,"author":{"gitID":"deeheenguyen"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":43,"author":{"gitID":"deeheenguyen"},"content":"        interviewTitle.setText(interview.getInterviewTitle().toString());"},{"lineNumber":44,"author":{"gitID":"deeheenguyen"},"content":"        interviewLocation.setText(interview.getInterviewLocation().value);"},{"lineNumber":45,"author":{"gitID":"deeheenguyen"},"content":"        interviewee.setText(interview.getInterviewee().toString());"},{"lineNumber":46,"author":{"gitID":"deeheenguyen"},"content":"        date.setText(interview.getDate().toString());"},{"lineNumber":47,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":49,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":50,"author":{"gitID":"deeheenguyen"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"deeheenguyen"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitID":"deeheenguyen"},"content":"        // short circuit if same object"},{"lineNumber":53,"author":{"gitID":"deeheenguyen"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":54,"author":{"gitID":"deeheenguyen"},"content":"            return true;"},{"lineNumber":55,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":57,"author":{"gitID":"deeheenguyen"},"content":"        // instanceof handles nulls"},{"lineNumber":58,"author":{"gitID":"deeheenguyen"},"content":"        if (!(other instanceof JobCard)) {"},{"lineNumber":59,"author":{"gitID":"deeheenguyen"},"content":"            return false;"},{"lineNumber":60,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":62,"author":{"gitID":"deeheenguyen"},"content":"        // state check"},{"lineNumber":63,"author":{"gitID":"deeheenguyen"},"content":"        InterviewCard card \u003d (InterviewCard) other;"},{"lineNumber":64,"author":{"gitID":"deeheenguyen"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":65,"author":{"gitID":"deeheenguyen"},"content":"                \u0026\u0026 interview.equals(card.interview);"},{"lineNumber":66,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"deeheenguyen"},"content":"}"},{"lineNumber":68,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":69,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":70,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":71,"author":{"gitID":"deeheenguyen"},"content":""}],"authorContributionMap":{"deeheenguyen":71}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"tiny767"},"content":"    private static final String[] TAG_COLORS \u003d {\"red\", \"pink\", \"blue\"};"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public final Person person;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private Label skill;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":44,"author":{"gitID":"tiny767"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"tiny767"},"content":"    private Label remark;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":55,"author":{"gitID":"tiny767"},"content":"        remark.setText(person.getRemark().value);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        skill.setText(person.getSkills().value);"},{"lineNumber":57,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":58,"author":{"gitID":"tiny767"},"content":"        initTags(person);"},{"lineNumber":59,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":61,"author":{"gitID":"tiny767"},"content":"    //@@author tiny767"},{"lineNumber":62,"author":{"gitID":"tiny767"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"tiny767"},"content":"     * Sets up a person\u0027s tags"},{"lineNumber":64,"author":{"gitID":"tiny767"},"content":"     * @param person"},{"lineNumber":65,"author":{"gitID":"tiny767"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"tiny767"},"content":"    private void initTags(Person person) {"},{"lineNumber":67,"author":{"gitID":"tiny767"},"content":"        person.getTags().forEach(tag -\u003e {"},{"lineNumber":68,"author":{"gitID":"tiny767"},"content":"            Label label \u003d new Label(tag.tagName);"},{"lineNumber":69,"author":{"gitID":"tiny767"},"content":"            label.getStyleClass().add(getTagColorFor(tag.tagName));"},{"lineNumber":70,"author":{"gitID":"tiny767"},"content":"            tags.getChildren().add(label);"},{"lineNumber":71,"author":{"gitID":"tiny767"},"content":"        });"},{"lineNumber":72,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":74,"author":{"gitID":"tiny767"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"tiny767"},"content":"     * Gets the color for a tag based on its name"},{"lineNumber":76,"author":{"gitID":"tiny767"},"content":"     * @param tagName"},{"lineNumber":77,"author":{"gitID":"tiny767"},"content":"     * @return"},{"lineNumber":78,"author":{"gitID":"tiny767"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"tiny767"},"content":"    private String getTagColorFor(String tagName) {"},{"lineNumber":80,"author":{"gitID":"tiny767"},"content":"        return TAG_COLORS[Math.abs(tagName.hashCode()) % TAG_COLORS.length];"},{"lineNumber":81,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"tiny767"},"content":"    //@@author"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":71,"tiny767":30}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_JOB_DISPLAYED_INDEX \u003d \"The job index provided is invalid\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_JOBS_LISTED_OVERVIEW \u003d \"%1$d jobs listed!\";"},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":"    public static final String MESSAGE_INTERVIEWS_LISTED_OVERVIEW \u003d \"%1$d interviews listed!\";"},{"lineNumber":15,"author":{"gitID":"deeheenguyen"},"content":"    public static final String MESSAGE_INVALID_INTERVIEW_DISPLAYED_INDEX \u003d \"The interview index provided is invalid\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"deeheenguyen":2,"-":15}},{"path":"src/test/java/guitests/guihandles/JobListPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.ui.JobCard;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"ChengSashankh"},"content":"//@@author ChengSashankh"},{"lineNumber":11,"author":{"gitID":"ChengSashankh"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"ChengSashankh"},"content":" * Provides a handle for {@code JobListPanel} containing the list of {@code JobCard}."},{"lineNumber":13,"author":{"gitID":"ChengSashankh"},"content":" */"},{"lineNumber":14,"author":{"gitID":"ChengSashankh"},"content":"public class JobListPanelHandle extends NodeHandle\u003cListView\u003cJobCard\u003e\u003e {"},{"lineNumber":15,"author":{"gitID":"ChengSashankh"},"content":"    public static final String JOB_LIST_VIEW_ID \u003d \"#jobListView\";"},{"lineNumber":16,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":17,"author":{"gitID":"ChengSashankh"},"content":"    private Optional\u003cJobCard\u003e lastRememberedSelectedJobCard;"},{"lineNumber":18,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":19,"author":{"gitID":"ChengSashankh"},"content":"    public JobListPanelHandle(ListView\u003cJobCard\u003e jobListPanelNode) {"},{"lineNumber":20,"author":{"gitID":"ChengSashankh"},"content":"        super(jobListPanelNode);"},{"lineNumber":21,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":23,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"ChengSashankh"},"content":"     * Returns a handle to the selected {@code JobCardHandle}."},{"lineNumber":25,"author":{"gitID":"ChengSashankh"},"content":"     * A maximum of 1 item can be selected at any time."},{"lineNumber":26,"author":{"gitID":"ChengSashankh"},"content":"     * @throws AssertionError if no card is selected, or more than 1 card is selected."},{"lineNumber":27,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"ChengSashankh"},"content":"    public JobCardHandle getHandleToSelectedCard() {"},{"lineNumber":29,"author":{"gitID":"ChengSashankh"},"content":"        List\u003cJobCard\u003e jobList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":30,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":31,"author":{"gitID":"ChengSashankh"},"content":"        if (jobList.size() !\u003d 1) {"},{"lineNumber":32,"author":{"gitID":"ChengSashankh"},"content":"            throw new AssertionError(\"Job list size expected 1.\");"},{"lineNumber":33,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":35,"author":{"gitID":"ChengSashankh"},"content":"        return new JobCardHandle(jobList.get(0).getRoot());"},{"lineNumber":36,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":38,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"ChengSashankh"},"content":"     * Returns the index of the selected card."},{"lineNumber":40,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"ChengSashankh"},"content":"    public int getSelectedCardIndex() {"},{"lineNumber":42,"author":{"gitID":"ChengSashankh"},"content":"        return getRootNode().getSelectionModel().getSelectedIndex();"},{"lineNumber":43,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":45,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"ChengSashankh"},"content":"     * Returns true if a card is currently selected."},{"lineNumber":47,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"ChengSashankh"},"content":"    public boolean isAnyCardSelected() {"},{"lineNumber":49,"author":{"gitID":"ChengSashankh"},"content":"        List\u003cJobCard\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":50,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":51,"author":{"gitID":"ChengSashankh"},"content":"        if (selectedCardsList.size() \u003e 1) {"},{"lineNumber":52,"author":{"gitID":"ChengSashankh"},"content":"            throw new AssertionError(\"Card list size expected 0 or 1.\");"},{"lineNumber":53,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":55,"author":{"gitID":"ChengSashankh"},"content":"        return !selectedCardsList.isEmpty();"},{"lineNumber":56,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":58,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"ChengSashankh"},"content":"     * Navigates the listview to display and select the person."},{"lineNumber":60,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"ChengSashankh"},"content":"    public void navigateToCard(Job job) {"},{"lineNumber":62,"author":{"gitID":"ChengSashankh"},"content":"        List\u003cJobCard\u003e cards \u003d getRootNode().getItems();"},{"lineNumber":63,"author":{"gitID":"ChengSashankh"},"content":"        Optional\u003cJobCard\u003e matchingCard \u003d cards.stream().filter(card -\u003e card.job.equals(job)).findFirst();"},{"lineNumber":64,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":65,"author":{"gitID":"ChengSashankh"},"content":"        if (!matchingCard.isPresent()) {"},{"lineNumber":66,"author":{"gitID":"ChengSashankh"},"content":"            throw new IllegalArgumentException(\"Job does not exist.\");"},{"lineNumber":67,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":69,"author":{"gitID":"ChengSashankh"},"content":"        guiRobot.interact(() -\u003e {"},{"lineNumber":70,"author":{"gitID":"ChengSashankh"},"content":"            getRootNode().scrollTo(matchingCard.get());"},{"lineNumber":71,"author":{"gitID":"ChengSashankh"},"content":"            getRootNode().getSelectionModel().select(matchingCard.get());"},{"lineNumber":72,"author":{"gitID":"ChengSashankh"},"content":"        });"},{"lineNumber":73,"author":{"gitID":"ChengSashankh"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":74,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":76,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"ChengSashankh"},"content":"     * Returns the job card handle of a job associated with the {@code index} in the list."},{"lineNumber":78,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"ChengSashankh"},"content":"    public JobCardHandle getJobCardHandle(int index) {"},{"lineNumber":80,"author":{"gitID":"ChengSashankh"},"content":"        return getJobCardHandle(getRootNode().getItems().get(index).job);"},{"lineNumber":81,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":83,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"ChengSashankh"},"content":"     * Returns the {@code PersonCardHandle} of the specified {@code person} in the list."},{"lineNumber":85,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"ChengSashankh"},"content":"    public JobCardHandle getJobCardHandle(Job job) {"},{"lineNumber":87,"author":{"gitID":"ChengSashankh"},"content":"        Optional\u003cJobCardHandle\u003e handle \u003d getRootNode().getItems().stream()"},{"lineNumber":88,"author":{"gitID":"ChengSashankh"},"content":"                .filter(card -\u003e card.job.equals(job))"},{"lineNumber":89,"author":{"gitID":"ChengSashankh"},"content":"                .map(card -\u003e new JobCardHandle(card.getRoot()))"},{"lineNumber":90,"author":{"gitID":"ChengSashankh"},"content":"                .findFirst();"},{"lineNumber":91,"author":{"gitID":"ChengSashankh"},"content":"        return handle.orElseThrow(() -\u003e new IllegalArgumentException(\"Job does not exist.\"));"},{"lineNumber":92,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":94,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"ChengSashankh"},"content":"     * Selects the {@code JobCard} at {@code index} in the list."},{"lineNumber":96,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"ChengSashankh"},"content":"    public void select(int index) {"},{"lineNumber":98,"author":{"gitID":"ChengSashankh"},"content":"        getRootNode().getSelectionModel().select(index);"},{"lineNumber":99,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":101,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"ChengSashankh"},"content":"     * Remembers the selected {@code JobCard} in the list."},{"lineNumber":103,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"ChengSashankh"},"content":"    public void rememberSelectedJobCard() {"},{"lineNumber":105,"author":{"gitID":"ChengSashankh"},"content":"        List\u003cJobCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":106,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":107,"author":{"gitID":"ChengSashankh"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":108,"author":{"gitID":"ChengSashankh"},"content":"            lastRememberedSelectedJobCard \u003d Optional.empty();"},{"lineNumber":109,"author":{"gitID":"ChengSashankh"},"content":"        } else {"},{"lineNumber":110,"author":{"gitID":"ChengSashankh"},"content":"            lastRememberedSelectedJobCard \u003d Optional.of(selectedItems.get(0));"},{"lineNumber":111,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":114,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"ChengSashankh"},"content":"     * Returns true if the selected {@code JobCard} is different from the value remembered by the most recent"},{"lineNumber":116,"author":{"gitID":"ChengSashankh"},"content":"     * {@code rememberSelectedJobCard()} call."},{"lineNumber":117,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"ChengSashankh"},"content":"    public boolean isSelectedJobCardChanged() {"},{"lineNumber":119,"author":{"gitID":"ChengSashankh"},"content":"        List\u003cJobCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":120,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":121,"author":{"gitID":"ChengSashankh"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":122,"author":{"gitID":"ChengSashankh"},"content":"            return lastRememberedSelectedJobCard.isPresent();"},{"lineNumber":123,"author":{"gitID":"ChengSashankh"},"content":"        } else {"},{"lineNumber":124,"author":{"gitID":"ChengSashankh"},"content":"            return !lastRememberedSelectedJobCard.isPresent()"},{"lineNumber":125,"author":{"gitID":"ChengSashankh"},"content":"                    || !lastRememberedSelectedJobCard.get().equals(selectedItems.get(0));"},{"lineNumber":126,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":129,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"ChengSashankh"},"content":"     * Returns the size of the list."},{"lineNumber":131,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"ChengSashankh"},"content":"    public int getListSize() {"},{"lineNumber":133,"author":{"gitID":"ChengSashankh"},"content":"        return getRootNode().getItems().size();"},{"lineNumber":134,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"ChengSashankh"},"content":"}"},{"lineNumber":136,"author":{"gitID":"ChengSashankh"},"content":"//@@author"}],"authorContributionMap":{"ChengSashankh":127,"-":9}},{"path":"src/main/java/seedu/address/ui/JobCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"ChengSashankh"},"content":"//@@author ChengSashankh"},{"lineNumber":11,"author":{"gitID":"ChengSashankh"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"ChengSashankh"},"content":" * An UI component that displays information of a {@code Job}."},{"lineNumber":13,"author":{"gitID":"ChengSashankh"},"content":" */"},{"lineNumber":14,"author":{"gitID":"ChengSashankh"},"content":"public class JobCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":15,"author":{"gitID":"ChengSashankh"},"content":"    private static final String FXML \u003d \"JobListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"ChengSashankh"},"content":"    private static final String[] TAG_COLORS \u003d {\"red\", \"pink\", \"blue\"};"},{"lineNumber":17,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":18,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"ChengSashankh"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":20,"author":{"gitID":"ChengSashankh"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":21,"author":{"gitID":"ChengSashankh"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":22,"author":{"gitID":"ChengSashankh"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"ChengSashankh"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":24,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":26,"author":{"gitID":"ChengSashankh"},"content":"    public final Job job;"},{"lineNumber":27,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":28,"author":{"gitID":"ChengSashankh"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"ChengSashankh"},"content":"    private HBox cardPane;"},{"lineNumber":30,"author":{"gitID":"ChengSashankh"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"ChengSashankh"},"content":"    private Label id;"},{"lineNumber":32,"author":{"gitID":"ChengSashankh"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"ChengSashankh"},"content":"    private Label jobTitle;"},{"lineNumber":34,"author":{"gitID":"ChengSashankh"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"ChengSashankh"},"content":"    private Label jobLocation;"},{"lineNumber":36,"author":{"gitID":"ChengSashankh"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"ChengSashankh"},"content":"    private Label jobSkills;"},{"lineNumber":38,"author":{"gitID":"ChengSashankh"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"ChengSashankh"},"content":"    private FlowPane tags;"},{"lineNumber":40,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":41,"author":{"gitID":"ChengSashankh"},"content":"    public JobCard(Job job, int displayedIndex) {"},{"lineNumber":42,"author":{"gitID":"ChengSashankh"},"content":"        super(FXML);"},{"lineNumber":43,"author":{"gitID":"ChengSashankh"},"content":"        this.job \u003d job;"},{"lineNumber":44,"author":{"gitID":"ChengSashankh"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":45,"author":{"gitID":"ChengSashankh"},"content":"        jobTitle.setText(job.getJobTitle().fullTitle);"},{"lineNumber":46,"author":{"gitID":"ChengSashankh"},"content":"        jobLocation.setText(job.getLocation().value);"},{"lineNumber":47,"author":{"gitID":"ChengSashankh"},"content":"        jobSkills.setText(job.getSkills().toString());"},{"lineNumber":48,"author":{"gitID":"ChengSashankh"},"content":"        initTags(job);"},{"lineNumber":49,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":51,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"ChengSashankh"},"content":"     * Creates colored tags for each tag assigned to the {@code Job}."},{"lineNumber":53,"author":{"gitID":"ChengSashankh"},"content":"     * @param job is the job for which the tags are being populated."},{"lineNumber":54,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"ChengSashankh"},"content":"    private void initTags(Job job) {"},{"lineNumber":56,"author":{"gitID":"ChengSashankh"},"content":"        job.getTags().forEach(tag -\u003e {"},{"lineNumber":57,"author":{"gitID":"ChengSashankh"},"content":"            Label label \u003d new Label(tag.tagName);"},{"lineNumber":58,"author":{"gitID":"ChengSashankh"},"content":"            label.getStyleClass().add(getTagColorFor(tag.tagName));"},{"lineNumber":59,"author":{"gitID":"ChengSashankh"},"content":"            tags.getChildren().add(label);"},{"lineNumber":60,"author":{"gitID":"ChengSashankh"},"content":"        });"},{"lineNumber":61,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":63,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"ChengSashankh"},"content":"     * Chooses a color for the tag based on hashcode"},{"lineNumber":65,"author":{"gitID":"ChengSashankh"},"content":"     * @param tagName for which color is chosen."},{"lineNumber":66,"author":{"gitID":"ChengSashankh"},"content":"     * @return string containing the color name."},{"lineNumber":67,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"ChengSashankh"},"content":"    private String getTagColorFor(String tagName) {"},{"lineNumber":69,"author":{"gitID":"ChengSashankh"},"content":"        //some explanation"},{"lineNumber":70,"author":{"gitID":"ChengSashankh"},"content":"        return TAG_COLORS[Math.abs(tagName.hashCode()) % TAG_COLORS.length];"},{"lineNumber":71,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":73,"author":{"gitID":"ChengSashankh"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"ChengSashankh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":75,"author":{"gitID":"ChengSashankh"},"content":"        // short circuit if same object"},{"lineNumber":76,"author":{"gitID":"ChengSashankh"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":77,"author":{"gitID":"ChengSashankh"},"content":"            return true;"},{"lineNumber":78,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":80,"author":{"gitID":"ChengSashankh"},"content":"        // instanceof handles nulls"},{"lineNumber":81,"author":{"gitID":"ChengSashankh"},"content":"        if (!(other instanceof JobCard)) {"},{"lineNumber":82,"author":{"gitID":"ChengSashankh"},"content":"            return false;"},{"lineNumber":83,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":85,"author":{"gitID":"ChengSashankh"},"content":"        // state check"},{"lineNumber":86,"author":{"gitID":"ChengSashankh"},"content":"        JobCard card \u003d (JobCard) other;"},{"lineNumber":87,"author":{"gitID":"ChengSashankh"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":88,"author":{"gitID":"ChengSashankh"},"content":"                \u0026\u0026 job.equals(card.job);"},{"lineNumber":89,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"ChengSashankh"},"content":"}"},{"lineNumber":91,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":92,"author":{"gitID":"ChengSashankh"},"content":"//@@author"}],"authorContributionMap":{"ChengSashankh":83,"-":9}},{"path":"src/main/java/seedu/address/commons/events/ui/RefreshReportPanelEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"anh2111"},"content":"// @@author anh2111"},{"lineNumber":2,"author":{"gitID":"anh2111"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":3,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":4,"author":{"gitID":"anh2111"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":6,"author":{"gitID":"anh2111"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"anh2111"},"content":" * Indicates that report should be recalculated"},{"lineNumber":8,"author":{"gitID":"anh2111"},"content":" */"},{"lineNumber":9,"author":{"gitID":"anh2111"},"content":"public class RefreshReportPanelEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":11,"author":{"gitID":"anh2111"},"content":"    public RefreshReportPanelEvent() {"},{"lineNumber":12,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":14,"author":{"gitID":"anh2111"},"content":"    @Override"},{"lineNumber":15,"author":{"gitID":"anh2111"},"content":"    public String toString() {"},{"lineNumber":16,"author":{"gitID":"anh2111"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":17,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":19,"author":{"gitID":"anh2111"},"content":"}"},{"lineNumber":20,"author":{"gitID":"anh2111"},"content":"// @@author"}],"authorContributionMap":{"anh2111":20}},{"path":"src/main/java/seedu/address/commons/events/ui/ToggleBrowserPanelEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"anh2111"},"content":"// @@author anh2111"},{"lineNumber":2,"author":{"gitID":"anh2111"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":3,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":4,"author":{"gitID":"anh2111"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":6,"author":{"gitID":"anh2111"},"content":"/** Indicates that the Browser Panel should be toggled  */"},{"lineNumber":7,"author":{"gitID":"anh2111"},"content":"public class ToggleBrowserPanelEvent extends BaseEvent {"},{"lineNumber":8,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":9,"author":{"gitID":"anh2111"},"content":"    @Override"},{"lineNumber":10,"author":{"gitID":"anh2111"},"content":"    public String toString() {"},{"lineNumber":11,"author":{"gitID":"anh2111"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":12,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":14,"author":{"gitID":"anh2111"},"content":"}"},{"lineNumber":15,"author":{"gitID":"anh2111"},"content":"// @@author"}],"authorContributionMap":{"anh2111":15}},{"path":"src/main/java/seedu/address/commons/events/ui/JobPanelSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"ChengSashankh"},"content":"//@@author ChengSashankh"},{"lineNumber":2,"author":{"gitID":"ChengSashankh"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":3,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":4,"author":{"gitID":"ChengSashankh"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"ChengSashankh"},"content":"import seedu.address.ui.JobCard;"},{"lineNumber":6,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":7,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":8,"author":{"gitID":"ChengSashankh"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"ChengSashankh"},"content":" * Represents a selection change in the Job List Panel"},{"lineNumber":10,"author":{"gitID":"ChengSashankh"},"content":" */"},{"lineNumber":11,"author":{"gitID":"ChengSashankh"},"content":"public class JobPanelSelectionChangedEvent  extends BaseEvent {"},{"lineNumber":12,"author":{"gitID":"ChengSashankh"},"content":"    private final JobCard newSelection;"},{"lineNumber":13,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":14,"author":{"gitID":"ChengSashankh"},"content":"    public JobPanelSelectionChangedEvent(JobCard newSelection) {"},{"lineNumber":15,"author":{"gitID":"ChengSashankh"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":16,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":18,"author":{"gitID":"ChengSashankh"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"ChengSashankh"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"ChengSashankh"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":23,"author":{"gitID":"ChengSashankh"},"content":"    public JobCard getNewSelection() {"},{"lineNumber":24,"author":{"gitID":"ChengSashankh"},"content":"        return newSelection;"},{"lineNumber":25,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"ChengSashankh"},"content":"}"},{"lineNumber":27,"author":{"gitID":"ChengSashankh"},"content":"//@@author"}],"authorContributionMap":{"ChengSashankh":27}},{"path":"src/main/java/seedu/address/commons/events/ui/BrowserUrlChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"tiny767"},"content":"//@@author tiny767"},{"lineNumber":5,"author":{"gitID":"tiny767"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"tiny767"},"content":" * Indicates that the browser has changed"},{"lineNumber":7,"author":{"gitID":"tiny767"},"content":" */"},{"lineNumber":8,"author":{"gitID":"tiny767"},"content":"public class BrowserUrlChangedEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"tiny767"},"content":"    private String newUrl;"},{"lineNumber":10,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":11,"author":{"gitID":"tiny767"},"content":"    public BrowserUrlChangedEvent(String newUrl) {"},{"lineNumber":12,"author":{"gitID":"tiny767"},"content":"        this.newUrl \u003d newUrl;"},{"lineNumber":13,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"tiny767"},"content":"    public String getNewUrl() {"},{"lineNumber":15,"author":{"gitID":"tiny767"},"content":"        return newUrl;"},{"lineNumber":16,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":18,"author":{"gitID":"tiny767"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"tiny767"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"tiny767"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"tiny767"},"content":"}"}],"authorContributionMap":{"-":3,"tiny767":19}},{"path":"src/main/java/seedu/address/ui/FacebookPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"tiny767"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":3,"author":{"gitID":"tiny767"},"content":"import static seedu.address.logic.commands.FacebookLoginCommand.MESSAGE_FAILURE;"},{"lineNumber":4,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.event.Event;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"tiny767"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"tiny767"},"content":"import seedu.address.commons.events.ui.BrowserUrlChangedEvent;"},{"lineNumber":17,"author":{"gitID":"tiny767"},"content":"import seedu.address.logic.commands.FacebookLoginCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":20,"author":{"gitID":"tiny767"},"content":"//@@author tiny767"},{"lineNumber":21,"author":{"gitID":"tiny767"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"tiny767"},"content":" * The Facebook Panel of the App, used for facebook authentication and displaying profile"},{"lineNumber":23,"author":{"gitID":"tiny767"},"content":" */"},{"lineNumber":24,"author":{"gitID":"tiny767"},"content":"public class FacebookPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":25,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":26,"author":{"gitID":"tiny767"},"content":"    private static final String FXML \u003d \"FacebookPanel.fxml\";"},{"lineNumber":27,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":28,"author":{"gitID":"tiny767"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":29,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":30,"author":{"gitID":"tiny767"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"tiny767"},"content":"    private WebView browser;"},{"lineNumber":32,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":33,"author":{"gitID":"tiny767"},"content":"    private Label location;"},{"lineNumber":34,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":35,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":36,"author":{"gitID":"tiny767"},"content":"    public FacebookPanel() {"},{"lineNumber":37,"author":{"gitID":"tiny767"},"content":"        super(FXML);"},{"lineNumber":38,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":39,"author":{"gitID":"tiny767"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":40,"author":{"gitID":"tiny767"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":41,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":42,"author":{"gitID":"tiny767"},"content":"        facebookInit();"},{"lineNumber":43,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":44,"author":{"gitID":"tiny767"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":45,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"tiny767"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"tiny767"},"content":"     * Sets the browser up to for Facebook functionality"},{"lineNumber":48,"author":{"gitID":"tiny767"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"tiny767"},"content":"    private void facebookInit() {"},{"lineNumber":50,"author":{"gitID":"tiny767"},"content":"        FacebookLoginCommand.setWebEngine(browser.getEngine());"},{"lineNumber":51,"author":{"gitID":"tiny767"},"content":"        location \u003d new Label();"},{"lineNumber":52,"author":{"gitID":"tiny767"},"content":"        location.textProperty().bind(browser.getEngine().locationProperty());"},{"lineNumber":53,"author":{"gitID":"tiny767"},"content":"        setEventHandlerForBrowserUrlChangedEvent();"},{"lineNumber":54,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":56,"author":{"gitID":"tiny767"},"content":"    public void loadPage(String url) {"},{"lineNumber":57,"author":{"gitID":"tiny767"},"content":"        Platform.runLater(() -\u003e browser.getEngine().load(url));"},{"lineNumber":58,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":60,"author":{"gitID":"tiny767"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"tiny767"},"content":"     * Frees resources allocated to the browser."},{"lineNumber":62,"author":{"gitID":"tiny767"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"tiny767"},"content":"    public void freeResources() {"},{"lineNumber":64,"author":{"gitID":"tiny767"},"content":"        browser \u003d null;"},{"lineNumber":65,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":67,"author":{"gitID":"tiny767"},"content":"    private void setEventHandlerForBrowserUrlChangedEvent() {"},{"lineNumber":68,"author":{"gitID":"tiny767"},"content":"        location.textProperty().addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":69,"author":{"gitID":"tiny767"},"content":"            if (newValue.contains(\"access_token\")) {"},{"lineNumber":70,"author":{"gitID":"tiny767"},"content":"                logger.info(\"facebook panel url changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":71,"author":{"gitID":"tiny767"},"content":"                raise(new BrowserUrlChangedEvent(newValue));"},{"lineNumber":72,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":73,"author":{"gitID":"tiny767"},"content":"            }"},{"lineNumber":74,"author":{"gitID":"tiny767"},"content":"        });"},{"lineNumber":75,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"tiny767"},"content":"    @Subscribe"},{"lineNumber":77,"author":{"gitID":"tiny767"},"content":"    private void handleBrowserUrlChangedEvent(BrowserUrlChangedEvent event) throws CommandException {"},{"lineNumber":78,"author":{"gitID":"tiny767"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":79,"author":{"gitID":"tiny767"},"content":"        try {"},{"lineNumber":80,"author":{"gitID":"tiny767"},"content":"            FacebookLoginCommand.completeAuth(event.getNewUrl());"},{"lineNumber":81,"author":{"gitID":"tiny767"},"content":"        } catch (Exception e) {"},{"lineNumber":82,"author":{"gitID":"tiny767"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":83,"author":{"gitID":"tiny767"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"tiny767"},"content":"}"}],"authorContributionMap":{"tiny767":74,"-":11}},{"path":"src/main/java/seedu/address/commons/events/ui/ToggleReportPanelEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"anh2111"},"content":"// @@author anh2111"},{"lineNumber":2,"author":{"gitID":"anh2111"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":3,"author":{"gitID":"anh2111"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":5,"author":{"gitID":"anh2111"},"content":"/** Indicates the Report Panel should be toggled */"},{"lineNumber":6,"author":{"gitID":"anh2111"},"content":"public class ToggleReportPanelEvent extends BaseEvent {"},{"lineNumber":7,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":8,"author":{"gitID":"anh2111"},"content":"    @Override"},{"lineNumber":9,"author":{"gitID":"anh2111"},"content":"    public String toString() {"},{"lineNumber":10,"author":{"gitID":"anh2111"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":11,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":13,"author":{"gitID":"anh2111"},"content":"}"},{"lineNumber":14,"author":{"gitID":"anh2111"},"content":"// @@author"}],"authorContributionMap":{"anh2111":14}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.Interview;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.report.Report;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /** Returns the report. */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    Report getReport();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /** Returns the saved history of the report. */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    ObservableList\u003cReport\u003e getReportHistory();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of jobs */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    ObservableList\u003cJob\u003e getFilteredJobList();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"deeheenguyen"},"content":"    /** Returns an unmodifiable view of the filtered list of interviews */"},{"lineNumber":38,"author":{"gitID":"deeheenguyen"},"content":"    ObservableList\u003cInterview\u003e getFilteredInterviewList();"},{"lineNumber":39,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"deeheenguyen":4,"-":38}},{"path":"src/main/java/seedu/address/commons/events/ui/InterviewPanelSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.ui.InterviewCard;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents a selection change in the Job List Panel"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"deeheenguyen"},"content":"public class InterviewPanelSelectionChangedEvent  extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"deeheenguyen"},"content":"    private final InterviewCard newSelection;"},{"lineNumber":12,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":"    public InterviewPanelSelectionChangedEvent(InterviewCard newSelection) {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"deeheenguyen"},"content":"    public InterviewCard getNewSelection() {"},{"lineNumber":23,"author":{"gitID":"deeheenguyen"},"content":"        return newSelection;"},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"deeheenguyen"},"content":"}"}],"authorContributionMap":{"deeheenguyen":9,"-":16}},{"path":"src/main/java/seedu/address/commons/events/ui/ToggleFacebookPanelEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"tiny767"},"content":"//@@author tiny767"},{"lineNumber":6,"author":{"gitID":"tiny767"},"content":"/** Indicates that the Facebook Panel should be toggled  */"},{"lineNumber":7,"author":{"gitID":"tiny767"},"content":"public class ToggleFacebookPanelEvent extends BaseEvent {"},{"lineNumber":8,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":9,"author":{"gitID":"tiny767"},"content":"    @Override"},{"lineNumber":10,"author":{"gitID":"tiny767"},"content":"    public String toString() {"},{"lineNumber":11,"author":{"gitID":"tiny767"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":12,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":14,"author":{"gitID":"tiny767"},"content":"}"}],"authorContributionMap":{"-":4,"tiny767":10}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LINK;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SKILLS;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":20,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.person.Link;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":24,"author":{"gitID":"tiny767"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.skill.Skill;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":40,"author":{"gitID":"deeheenguyen"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                        PREFIX_LINK, PREFIX_SKILLS, PREFIX_TAG);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":53,"author":{"gitID":"tiny767"},"content":"            Remark remark \u003d new Remark(\"\");"},{"lineNumber":54,"author":{"gitID":"deeheenguyen"},"content":"            Link link \u003d ParserUtil.parseLink(argMultimap.getValue(PREFIX_LINK)).get();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            Skill skill \u003d ParserUtil.parseSkill(argMultimap.getValue(PREFIX_SKILLS)).get();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"            Person person \u003d new Person(name, phone, email, address, remark, link, skill, tagList);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"            return new AddCommand(person);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"deeheenguyen":4,"-":68,"tiny767":2}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.logic.commands.AddInterviewCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.logic.commands.DeleteInterviewCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteJobCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditJobCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":19,"author":{"gitID":"tiny767"},"content":"import seedu.address.logic.commands.FacebookLoginCommand;"},{"lineNumber":20,"author":{"gitID":"tiny767"},"content":"import seedu.address.logic.commands.FacebookPostCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":22,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.logic.commands.FindInterviewCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindJobCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":27,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.logic.commands.ListInterviewCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListJobsCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.MatchJobCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.PostJobCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":32,"author":{"gitID":"tiny767"},"content":"import seedu.address.logic.commands.RemarkCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SaveReportCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":35,"author":{"gitID":"tiny767"},"content":"import seedu.address.logic.commands.ThemeCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":37,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.logic.commands.ViewCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ViewReportCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":42,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":43,"author":{"gitID":"-"},"content":" */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":67,"author":{"gitID":"tiny767"},"content":"        case FacebookLoginCommand.COMMAND_WORD:"},{"lineNumber":68,"author":{"gitID":"tiny767"},"content":"            return new FacebookLoginCommand();"},{"lineNumber":69,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":70,"author":{"gitID":"tiny767"},"content":"        case FacebookLoginCommand.COMMAND_ALIAS:"},{"lineNumber":71,"author":{"gitID":"tiny767"},"content":"            return new FacebookLoginCommand();"},{"lineNumber":72,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":73,"author":{"gitID":"tiny767"},"content":"        case FacebookPostCommand.COMMAND_WORD:"},{"lineNumber":74,"author":{"gitID":"tiny767"},"content":"            return new FacebookPostCommandParser().parse(arguments);"},{"lineNumber":75,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":76,"author":{"gitID":"tiny767"},"content":"        case FacebookPostCommand.COMMAND_ALIAS:"},{"lineNumber":77,"author":{"gitID":"tiny767"},"content":"            return new FacebookPostCommandParser().parse(arguments);"},{"lineNumber":78,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":79,"author":{"gitID":"tiny767"},"content":"        case RemarkCommand.COMMAND_WORD:"},{"lineNumber":80,"author":{"gitID":"tiny767"},"content":"            return new RemarkCommandParser().parse(arguments);"},{"lineNumber":81,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":82,"author":{"gitID":"tiny767"},"content":"        case RemarkCommand.COMMAND_ALIAS:"},{"lineNumber":83,"author":{"gitID":"tiny767"},"content":"            return new RemarkCommandParser().parse(arguments);"},{"lineNumber":84,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":85,"author":{"gitID":"tiny767"},"content":"        case ThemeCommand.COMMAND_WORD:"},{"lineNumber":86,"author":{"gitID":"tiny767"},"content":"            return new ThemeCommandParser().parse(arguments);"},{"lineNumber":87,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":88,"author":{"gitID":"tiny767"},"content":"        case ThemeCommand.COMMAND_ALIAS:"},{"lineNumber":89,"author":{"gitID":"tiny767"},"content":"            return new ThemeCommandParser().parse(arguments);"},{"lineNumber":90,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":91,"author":{"gitID":"deeheenguyen"},"content":"        case AddCommand.COMMAND_ALIAS:"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":93,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":96,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        case PostJobCommand.COMMAND_WORD:"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            return new PostJobCommandParser().parse(arguments);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        case PostJobCommand.COMMAND_ALIAS:"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            return new PostJobCommandParser().parse(arguments);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        case MatchJobCommand.COMMAND_WORD:"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            return new MatchJobCommandParser().parse(arguments);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"deeheenguyen"},"content":"        case EditCommand.COMMAND_ALIAS:"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":108,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        case EditJobCommand.COMMAND_ALIAS:"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            return new EditJobCommandParser().parse(arguments);"},{"lineNumber":114,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        case EditJobCommand.COMMAND_WORD:"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            return new EditJobCommandParser().parse(arguments);"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"deeheenguyen"},"content":"        case SelectCommand.COMMAND_ALIAS:"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"deeheenguyen"},"content":"        case DeleteCommand.COMMAND_ALIAS:"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        case DeleteJobCommand.COMMAND_WORD:"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            return new DeleteJobCommandParser().parse(arguments);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        case DeleteJobCommand.COMMAND_ALIAS:"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            return new DeleteJobCommandParser().parse(arguments);"},{"lineNumber":132,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":133,"author":{"gitID":"deeheenguyen"},"content":"        case DeleteInterviewCommand.COMMAND_WORD:"},{"lineNumber":134,"author":{"gitID":"deeheenguyen"},"content":"            return new DeleteInterviewCommandParser().parse(arguments);"},{"lineNumber":135,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":136,"author":{"gitID":"deeheenguyen"},"content":"        case DeleteInterviewCommand.COMMAND_ALIAS:"},{"lineNumber":137,"author":{"gitID":"deeheenguyen"},"content":"            return new DeleteInterviewCommandParser().parse(arguments);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"deeheenguyen"},"content":"        case ClearCommand.COMMAND_ALIAS:"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        case FindJobCommand.COMMAND_WORD:"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            return new FindJobCommandParser().parse(arguments);"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"deeheenguyen"},"content":"        case FindInterviewCommand.COMMAND_WORD:"},{"lineNumber":155,"author":{"gitID":"deeheenguyen"},"content":"            return new FindInterviewCommandParser().parse(arguments);"},{"lineNumber":156,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":157,"author":{"gitID":"deeheenguyen"},"content":"        case ViewCommand.COMMAND_WORD:"},{"lineNumber":158,"author":{"gitID":"deeheenguyen"},"content":"            return new ViewCommandParser().parse(arguments);"},{"lineNumber":159,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"deeheenguyen"},"content":"        case ListInterviewCommand.COMMAND_WORD:"},{"lineNumber":164,"author":{"gitID":"deeheenguyen"},"content":"            return new ListInterviewCommand();"},{"lineNumber":165,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        case ListJobsCommand.COMMAND_WORD:"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            return new ListJobsCommand();"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":182,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        case ViewReportCommand.COMMAND_WORD:"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            return new ViewReportCommandParser().parse(arguments);"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        case ViewReportCommand.COMMAND_ALIAS:"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            return new ViewReportCommandParser().parse(arguments);"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        case SaveReportCommand.COMMAND_WORD:"},{"lineNumber":191,"author":{"gitID":"-"},"content":"            return new SaveReportCommandParser().parse(arguments);"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        case SaveReportCommand.COMMAND_ALIAS:"},{"lineNumber":194,"author":{"gitID":"-"},"content":"            return new SaveReportCommandParser().parse(arguments);"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"deeheenguyen"},"content":"        case AddInterviewCommand.COMMAND_WORD :"},{"lineNumber":197,"author":{"gitID":"deeheenguyen"},"content":"            return new AddInterviewCommandParser().parse(arguments);"},{"lineNumber":198,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":200,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"deeheenguyen":32,"-":144,"tiny767":28}},{"path":"src/main/java/seedu/address/logic/parser/RemarkCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"tiny767"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"tiny767"},"content":"import seedu.address.logic.commands.RemarkCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"tiny767"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":12,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":13,"author":{"gitID":"tiny767"},"content":"//@@author tiny767"},{"lineNumber":14,"author":{"gitID":"tiny767"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"tiny767"},"content":" * Parses input arguments and create a new {@code RemarkCommand} object"},{"lineNumber":16,"author":{"gitID":"tiny767"},"content":" */"},{"lineNumber":17,"author":{"gitID":"tiny767"},"content":"public class RemarkCommandParser implements Parser\u003cRemarkCommand\u003e {"},{"lineNumber":18,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":19,"author":{"gitID":"tiny767"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"tiny767"},"content":"     * Parses the given {@code String} of arguments in the context of the RemarkCommand"},{"lineNumber":21,"author":{"gitID":"tiny767"},"content":"     * and returns an RemarkCommand object for execution."},{"lineNumber":22,"author":{"gitID":"tiny767"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":23,"author":{"gitID":"tiny767"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"tiny767"},"content":"    public RemarkCommand parse(String args) throws ParseException {"},{"lineNumber":25,"author":{"gitID":"tiny767"},"content":"        requireNonNull(args);"},{"lineNumber":26,"author":{"gitID":"tiny767"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":27,"author":{"gitID":"tiny767"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_REMARK);"},{"lineNumber":28,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":29,"author":{"gitID":"tiny767"},"content":"        Index index;"},{"lineNumber":30,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":31,"author":{"gitID":"tiny767"},"content":"        try {"},{"lineNumber":32,"author":{"gitID":"tiny767"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":33,"author":{"gitID":"tiny767"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":34,"author":{"gitID":"tiny767"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemarkCommand.MESSAGE_USAGE));"},{"lineNumber":35,"author":{"gitID":"tiny767"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":37,"author":{"gitID":"tiny767"},"content":"        String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"},{"lineNumber":38,"author":{"gitID":"tiny767"},"content":"        return new RemarkCommand(index, new Remark(remark));"},{"lineNumber":39,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":40,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"tiny767"},"content":"}"}],"authorContributionMap":{"-":8,"tiny767":33}},{"path":"src/main/java/seedu/address/logic/parser/ArgumentWithOption.java","lines":[{"lineNumber":1,"author":{"gitID":"anh2111"},"content":"// @@author anh2111"},{"lineNumber":2,"author":{"gitID":"anh2111"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":4,"author":{"gitID":"anh2111"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"anh2111"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_OPTION;"},{"lineNumber":6,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":7,"author":{"gitID":"anh2111"},"content":"import java.util.regex.Matcher;"},{"lineNumber":8,"author":{"gitID":"anh2111"},"content":"import java.util.regex.Pattern;"},{"lineNumber":9,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":10,"author":{"gitID":"anh2111"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":11,"author":{"gitID":"anh2111"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":13,"author":{"gitID":"anh2111"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"anh2111"},"content":" *  ArgumentWithOption class encapsulates an argument in the format: [OPTION] ARGS, and handles the parsing, extracting"},{"lineNumber":15,"author":{"gitID":"anh2111"},"content":" *  option from the argument."},{"lineNumber":16,"author":{"gitID":"anh2111"},"content":" */"},{"lineNumber":17,"author":{"gitID":"anh2111"},"content":"public class ArgumentWithOption {"},{"lineNumber":18,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":19,"author":{"gitID":"anh2111"},"content":"    private static final Pattern ARGUMENT_FORMAT \u003d"},{"lineNumber":20,"author":{"gitID":"anh2111"},"content":"            Pattern.compile(\"(?\u003ccommandOption\u003e\" + PREFIX_OPTION.getPrefix() + \"\\\\S+)?(?\u003carguments\u003e.*)\");"},{"lineNumber":21,"author":{"gitID":"anh2111"},"content":"    private String rawArgs;"},{"lineNumber":22,"author":{"gitID":"anh2111"},"content":"    private final String option;"},{"lineNumber":23,"author":{"gitID":"anh2111"},"content":"    private String args;"},{"lineNumber":24,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":25,"author":{"gitID":"anh2111"},"content":"    public ArgumentWithOption(String rawArgs) throws ParseException {"},{"lineNumber":26,"author":{"gitID":"anh2111"},"content":"        this.rawArgs \u003d rawArgs.trim();"},{"lineNumber":27,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":28,"author":{"gitID":"anh2111"},"content":"        final Matcher matcher \u003d ARGUMENT_FORMAT.matcher(this.rawArgs);"},{"lineNumber":29,"author":{"gitID":"anh2111"},"content":"        if (!matcher.matches()) {"},{"lineNumber":30,"author":{"gitID":"anh2111"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"anh2111"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"anh2111"},"content":"        this.args \u003d matcher.group(\"arguments\");"},{"lineNumber":33,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":34,"author":{"gitID":"anh2111"},"content":"        String rawOption \u003d matcher.group(\"commandOption\");"},{"lineNumber":35,"author":{"gitID":"anh2111"},"content":"        this.option \u003d (rawOption !\u003d null) ?  rawOption.substring(PREFIX_OPTION.getPrefix().length()) : \"\";"},{"lineNumber":36,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":38,"author":{"gitID":"anh2111"},"content":"    public boolean isOption(String toCheck) {"},{"lineNumber":39,"author":{"gitID":"anh2111"},"content":"        return toCheck.equals(option);"},{"lineNumber":40,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":42,"author":{"gitID":"anh2111"},"content":"    public String getArgs() {"},{"lineNumber":43,"author":{"gitID":"anh2111"},"content":"        return args;"},{"lineNumber":44,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"anh2111"},"content":"}"},{"lineNumber":46,"author":{"gitID":"anh2111"},"content":"// @@author"}],"authorContributionMap":{"anh2111":46}},{"path":"src/main/java/seedu/address/logic/parser/FindInterviewCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"deeheenguyen"},"content":"//@@author deeheenguyen"},{"lineNumber":2,"author":{"gitID":"deeheenguyen"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":4,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.logic.commands.FindInterviewCommand;"},{"lineNumber":7,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.InterviewMatchInterviewee;"},{"lineNumber":9,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":10,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":11,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":12,"author":{"gitID":"deeheenguyen"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":" * Parses input arguments and creates a new FindCommand object"},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":" */"},{"lineNumber":15,"author":{"gitID":"deeheenguyen"},"content":"public class FindInterviewCommandParser implements Parser\u003cFindInterviewCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":17,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"deeheenguyen"},"content":"     * Parses the given {@code String} of arguments in the context of the FindInterviewCommand"},{"lineNumber":19,"author":{"gitID":"deeheenguyen"},"content":"     * and returns an FindInterviewCommand object for execution."},{"lineNumber":20,"author":{"gitID":"deeheenguyen"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"deeheenguyen"},"content":"    public FindInterviewCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"deeheenguyen"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":25,"author":{"gitID":"deeheenguyen"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"deeheenguyen"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindInterviewCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":29,"author":{"gitID":"deeheenguyen"},"content":"        String[] keywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":30,"author":{"gitID":"deeheenguyen"},"content":"        if (keywords.length \u003e 1 || keywords.length \u003d\u003d 0) {"},{"lineNumber":31,"author":{"gitID":"deeheenguyen"},"content":"            throw new ParseException("},{"lineNumber":32,"author":{"gitID":"deeheenguyen"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindInterviewCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"deeheenguyen"},"content":"        if (!Name.isValidName(keywords[0])) {"},{"lineNumber":35,"author":{"gitID":"deeheenguyen"},"content":"            throw new ParseException("},{"lineNumber":36,"author":{"gitID":"deeheenguyen"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindInterviewCommand.MESSAGE_USAGE));"},{"lineNumber":37,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"deeheenguyen"},"content":"        return new FindInterviewCommand(new InterviewMatchInterviewee(keywords[0]));"},{"lineNumber":39,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"deeheenguyen"},"content":"}"}],"authorContributionMap":{"deeheenguyen":40}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_POPULATION \u003d new Prefix(\"pop/\");"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_SKILLS \u003d new Prefix(\"s/\");"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_JOBTITLE \u003d new Prefix(\"j/\");"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_LOCATION \u003d new Prefix(\"l/\");"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_OPTION \u003d new Prefix(\"-\");"},{"lineNumber":19,"author":{"gitID":"tiny767"},"content":"    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");"},{"lineNumber":20,"author":{"gitID":"deeheenguyen"},"content":"    public static final Prefix PREFIX_LINK \u003d new Prefix(\"l/\");"},{"lineNumber":21,"author":{"gitID":"deeheenguyen"},"content":"    public static final Prefix PREFIX_INTERVIEW \u003d new Prefix(\"i/\");"},{"lineNumber":22,"author":{"gitID":"deeheenguyen"},"content":"    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"deeheenguyen":3,"-":20,"tiny767":1}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.Date;"},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.InterviewLocation;"},{"lineNumber":15,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.InterviewTitle;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.job.JobTitle;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Location;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":20,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.person.Link;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.skill.Skill;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":28,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":34,"author":{"gitID":"-"},"content":" */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * TODO: Change this after classes are created for each field."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a trimmed {@code String}."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code string} is invalid."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public static String parseString(String string) throws IllegalValueException {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        requireNonNull(string);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        String trimmedString \u003d string.trim();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedString)) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return trimmedString;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public static Optional\u003cString\u003e parseString(Optional\u003cString\u003e string) throws IllegalValueException {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        requireNonNull(string);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return string.isPresent() ? Optional.of(parseString(string.get())) : Optional.empty();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * TODO: Fix the javadoc comment"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Parses a {@code String string} into a trimmed {@code JobTitle}."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code string} is invalid."},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public static JobTitle parseJobTitle(String string) throws IllegalValueException {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        requireNonNull(string);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        String trimmedString \u003d string.trim();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        if (!JobTitle.isValidTitle(trimmedString)) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(JobTitle.MESSAGE_TITLE_CONSTRAINTS);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        return new JobTitle(trimmedString);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e string} into an {@code Optional\u003cJobTitle\u003e} if {@code string} is present."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public static Optional\u003cJobTitle\u003e parseJobTitle(Optional\u003cString\u003e string) throws IllegalValueException {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        requireNonNull(string);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        return string.isPresent() ? Optional.of(parseJobTitle(string.get())) : Optional.empty();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * Parses a {@code String string} into a trimmed {@code Location}."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code string} is invalid."},{"lineNumber":131,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public static Location parseLocation(String string) throws IllegalValueException {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        requireNonNull(string);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        String trimmedString \u003d string.trim();"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        if (!Location.isValidLocation(trimmedString)) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Location.MESSAGE_LOCATION_CONSTRAINTS);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        return new Location(trimmedString);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e string} into an {@code Optional\u003cLocation\u003e} if {@code string} is present."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    public static Optional\u003cLocation\u003e parseLocation(Optional\u003cString\u003e string) throws IllegalValueException {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        requireNonNull(string);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        return string.isPresent() ? Optional.of(parseLocation(string.get())) : Optional.empty();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Parses a {@code String string} into a trimmed {@code Skill}."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code string} is invalid."},{"lineNumber":155,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    public static Skill parseSkill(String string) throws IllegalValueException {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        requireNonNull(string);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        String trimmedString \u003d string.trim();"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        if (!Skill.isValidSkill(trimmedString)) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Location.MESSAGE_LOCATION_CONSTRAINTS);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        return new Skill(trimmedString);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e string} into an {@code Optional\u003cSkill\u003e} if {@code string} is present."},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":168,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    public static Optional\u003cSkill\u003e parseSkill(Optional\u003cString\u003e string) throws IllegalValueException {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        requireNonNull(string);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        return string.isPresent() ? Optional.of(parseSkill(string.get())) : Optional.empty();"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":177,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":179,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":190,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":192,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":201,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":203,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        if (!Address.isValidLocation(trimmedAddress)) {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":215,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":216,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":225,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":227,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":240,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":248,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":249,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":251,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":259,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":262,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":263,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":268,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":271,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":272,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":273,"author":{"gitID":"deeheenguyen"},"content":"    //@@author deeheenguyen"},{"lineNumber":274,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":275,"author":{"gitID":"deeheenguyen"},"content":"     * Parses a {@code String string} into a trimmed {@code Location}."},{"lineNumber":276,"author":{"gitID":"deeheenguyen"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":277,"author":{"gitID":"deeheenguyen"},"content":"     *"},{"lineNumber":278,"author":{"gitID":"deeheenguyen"},"content":"     * @throws IllegalValueException if the given {@code string} is invalid."},{"lineNumber":279,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":280,"author":{"gitID":"deeheenguyen"},"content":"    public static InterviewLocation parseInterviewLocation(String string) throws IllegalValueException {"},{"lineNumber":281,"author":{"gitID":"deeheenguyen"},"content":"        requireNonNull(string);"},{"lineNumber":282,"author":{"gitID":"deeheenguyen"},"content":"        String trimmedString \u003d string.trim();"},{"lineNumber":283,"author":{"gitID":"deeheenguyen"},"content":"        if (!Location.isValidLocation(trimmedString)) {"},{"lineNumber":284,"author":{"gitID":"deeheenguyen"},"content":"            throw new IllegalValueException(InterviewLocation.MESSAGE_LOCATION_CONSTRAINTS);"},{"lineNumber":285,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":286,"author":{"gitID":"deeheenguyen"},"content":"        return new InterviewLocation(trimmedString);"},{"lineNumber":287,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":288,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":289,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":290,"author":{"gitID":"deeheenguyen"},"content":"     * Parses a {@code Optional\u003cString\u003e string} into an {@code Optional\u003cLocation\u003e} if {@code string} is present."},{"lineNumber":291,"author":{"gitID":"deeheenguyen"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":292,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":293,"author":{"gitID":"deeheenguyen"},"content":"    public static Optional\u003cInterviewLocation\u003e parseInterviewLocation(Optional\u003cString\u003e string)"},{"lineNumber":294,"author":{"gitID":"deeheenguyen"},"content":"            throws IllegalValueException {"},{"lineNumber":295,"author":{"gitID":"deeheenguyen"},"content":"        requireNonNull(string);"},{"lineNumber":296,"author":{"gitID":"deeheenguyen"},"content":"        return string.isPresent() ? Optional.of(parseInterviewLocation(string.get())) : Optional.empty();"},{"lineNumber":297,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":298,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":299,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":300,"author":{"gitID":"deeheenguyen"},"content":"     * Parses a {@code String link} into an {@code Link}."},{"lineNumber":301,"author":{"gitID":"deeheenguyen"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":302,"author":{"gitID":"deeheenguyen"},"content":"     *"},{"lineNumber":303,"author":{"gitID":"deeheenguyen"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":304,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":305,"author":{"gitID":"deeheenguyen"},"content":"    public static Link parseLink(String link) throws IllegalValueException {"},{"lineNumber":306,"author":{"gitID":"deeheenguyen"},"content":"        requireNonNull(link);"},{"lineNumber":307,"author":{"gitID":"deeheenguyen"},"content":"        String trimmedLink \u003d link.trim();"},{"lineNumber":308,"author":{"gitID":"deeheenguyen"},"content":"        if (!Link.isValidLink(trimmedLink)) {"},{"lineNumber":309,"author":{"gitID":"deeheenguyen"},"content":"            throw new IllegalValueException(Link.MESSAGE_LINK_CONSTRAINTS);"},{"lineNumber":310,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":311,"author":{"gitID":"deeheenguyen"},"content":"        return new Link(link);"},{"lineNumber":312,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":313,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":314,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":315,"author":{"gitID":"deeheenguyen"},"content":"     * Parses a {@code Optional\u003cString\u003e link} into an {@code Optional\u003cLink\u003e} if {@code link} is present."},{"lineNumber":316,"author":{"gitID":"deeheenguyen"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":317,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":318,"author":{"gitID":"deeheenguyen"},"content":"    public static Optional\u003cLink\u003e parseLink(Optional\u003cString\u003e link) throws IllegalValueException {"},{"lineNumber":319,"author":{"gitID":"deeheenguyen"},"content":"        requireNonNull(link);"},{"lineNumber":320,"author":{"gitID":"deeheenguyen"},"content":"        return link.isPresent() ? Optional.of(parseLink(link.get())) : Optional.empty();"},{"lineNumber":321,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":322,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":323,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":324,"author":{"gitID":"deeheenguyen"},"content":"     * Parses a {@code String link} into an {@code Link}."},{"lineNumber":325,"author":{"gitID":"deeheenguyen"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":326,"author":{"gitID":"deeheenguyen"},"content":"     *"},{"lineNumber":327,"author":{"gitID":"deeheenguyen"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":328,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":329,"author":{"gitID":"deeheenguyen"},"content":"    public static InterviewTitle parseInterviewTitle(String interviewTitle) throws IllegalValueException {"},{"lineNumber":330,"author":{"gitID":"deeheenguyen"},"content":"        requireNonNull(interviewTitle);"},{"lineNumber":331,"author":{"gitID":"deeheenguyen"},"content":"        String trimmedInterviewTitle \u003d interviewTitle.trim();"},{"lineNumber":332,"author":{"gitID":"deeheenguyen"},"content":"        if (!Link.isValidLink(trimmedInterviewTitle)) {"},{"lineNumber":333,"author":{"gitID":"deeheenguyen"},"content":"            throw new IllegalValueException(InterviewTitle.MESSAGE_TITLE_CONSTRAINTS);"},{"lineNumber":334,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":335,"author":{"gitID":"deeheenguyen"},"content":"        return new InterviewTitle(interviewTitle);"},{"lineNumber":336,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":337,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":338,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":339,"author":{"gitID":"deeheenguyen"},"content":"     * Parses a {@code Optional\u003cString\u003e link} into an {@code Optional\u003cLink\u003e} if {@code link} is present."},{"lineNumber":340,"author":{"gitID":"deeheenguyen"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":341,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":342,"author":{"gitID":"deeheenguyen"},"content":"    public static Optional\u003cInterviewTitle\u003e parseInterviewTitle(Optional\u003cString\u003e interviewTitle)"},{"lineNumber":343,"author":{"gitID":"deeheenguyen"},"content":"                throws IllegalValueException {"},{"lineNumber":344,"author":{"gitID":"deeheenguyen"},"content":"        requireNonNull(interviewTitle);"},{"lineNumber":345,"author":{"gitID":"deeheenguyen"},"content":"        return interviewTitle.isPresent() ? Optional.of(parseInterviewTitle(interviewTitle.get())) : Optional.empty();"},{"lineNumber":346,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":347,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":348,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":349,"author":{"gitID":"deeheenguyen"},"content":"     * Parses a {@code String link} into an {@code Link}."},{"lineNumber":350,"author":{"gitID":"deeheenguyen"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":351,"author":{"gitID":"deeheenguyen"},"content":"     *"},{"lineNumber":352,"author":{"gitID":"deeheenguyen"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":353,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":354,"author":{"gitID":"deeheenguyen"},"content":"    public static Date parseDate(String date) throws IllegalValueException {"},{"lineNumber":355,"author":{"gitID":"deeheenguyen"},"content":"        requireNonNull(date);"},{"lineNumber":356,"author":{"gitID":"deeheenguyen"},"content":"        String trimmedDate \u003d date.trim();"},{"lineNumber":357,"author":{"gitID":"deeheenguyen"},"content":"        if (!Date.isValidDate(trimmedDate)) {"},{"lineNumber":358,"author":{"gitID":"deeheenguyen"},"content":"            throw new IllegalValueException(Date.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":359,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":360,"author":{"gitID":"deeheenguyen"},"content":"        return new Date(date);"},{"lineNumber":361,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":362,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":363,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":364,"author":{"gitID":"deeheenguyen"},"content":"     * Parses a {@code Optional\u003cString\u003e link} into an {@code Optional\u003cLink\u003e} if {@code link} is present."},{"lineNumber":365,"author":{"gitID":"deeheenguyen"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":366,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":367,"author":{"gitID":"deeheenguyen"},"content":"    public static Optional\u003cDate\u003e parseDate(Optional\u003cString\u003e date) throws IllegalValueException {"},{"lineNumber":368,"author":{"gitID":"deeheenguyen"},"content":"        requireNonNull(date);"},{"lineNumber":369,"author":{"gitID":"deeheenguyen"},"content":"        return date.isPresent() ? Optional.of(parseDate(date.get())) : Optional.empty();"},{"lineNumber":370,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":371,"author":{"gitID":"deeheenguyen"},"content":"}"}],"authorContributionMap":{"deeheenguyen":105,"-":266}},{"path":"src/main/java/seedu/address/logic/parser/AddInterviewCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"deeheenguyen"},"content":"//@@author deeheenguyen"},{"lineNumber":2,"author":{"gitID":"deeheenguyen"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":4,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INTERVIEW;"},{"lineNumber":7,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":8,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":10,"author":{"gitID":"deeheenguyen"},"content":"import java.util.stream.Stream;"},{"lineNumber":11,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":12,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.logic.commands.AddInterviewCommand;"},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.Date;"},{"lineNumber":16,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.Interview;"},{"lineNumber":17,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.InterviewLocation;"},{"lineNumber":18,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.InterviewTitle;"},{"lineNumber":19,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":20,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":21,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":22,"author":{"gitID":"deeheenguyen"},"content":"/***"},{"lineNumber":23,"author":{"gitID":"deeheenguyen"},"content":" * Parses input arguments and creates a new AddInterview1Command object"},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":" */"},{"lineNumber":25,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":26,"author":{"gitID":"deeheenguyen"},"content":"public class AddInterviewCommandParser implements Parser\u003cAddInterviewCommand\u003e {"},{"lineNumber":27,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"deeheenguyen"},"content":"     * Parses the given {@code String} of arguments in the context of the AddInterviewCommand"},{"lineNumber":29,"author":{"gitID":"deeheenguyen"},"content":"     * and returns an AddInterviewCommand object for execution."},{"lineNumber":30,"author":{"gitID":"deeheenguyen"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":31,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"deeheenguyen"},"content":"    public AddInterviewCommand parse(String args) throws ParseException {"},{"lineNumber":33,"author":{"gitID":"deeheenguyen"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":34,"author":{"gitID":"deeheenguyen"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_INTERVIEW, PREFIX_NAME, PREFIX_DATE, PREFIX_LOCATION);"},{"lineNumber":35,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":36,"author":{"gitID":"deeheenguyen"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_INTERVIEW, PREFIX_DATE, PREFIX_LOCATION)"},{"lineNumber":37,"author":{"gitID":"deeheenguyen"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":38,"author":{"gitID":"deeheenguyen"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddInterviewCommand.MESSAGE_USAGE));"},{"lineNumber":39,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":41,"author":{"gitID":"deeheenguyen"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"deeheenguyen"},"content":"            InterviewTitle title \u003d ParserUtil.parseInterviewTitle(argMultimap.getValue(PREFIX_INTERVIEW)).get();"},{"lineNumber":43,"author":{"gitID":"deeheenguyen"},"content":"            Name interviewee \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":44,"author":{"gitID":"deeheenguyen"},"content":"            Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE)).get();"},{"lineNumber":45,"author":{"gitID":"deeheenguyen"},"content":"            InterviewLocation location \u003d ParserUtil.parseInterviewLocation(argMultimap.getValue(PREFIX_LOCATION)).get();"},{"lineNumber":46,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":47,"author":{"gitID":"deeheenguyen"},"content":"            Interview interview \u003d new Interview(title, interviewee, date, location);"},{"lineNumber":48,"author":{"gitID":"deeheenguyen"},"content":"            return new AddInterviewCommand(interview);"},{"lineNumber":49,"author":{"gitID":"deeheenguyen"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":50,"author":{"gitID":"deeheenguyen"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":51,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":54,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"deeheenguyen"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":56,"author":{"gitID":"deeheenguyen"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":57,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"deeheenguyen"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":59,"author":{"gitID":"deeheenguyen"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":60,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":62,"author":{"gitID":"deeheenguyen"},"content":"}"},{"lineNumber":63,"author":{"gitID":"deeheenguyen"},"content":"//author@@"}],"authorContributionMap":{"deeheenguyen":63}},{"path":"src/main/java/seedu/address/logic/parser/ViewCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"deeheenguyen"},"content":"//@@author deeheenguyen"},{"lineNumber":2,"author":{"gitID":"deeheenguyen"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":4,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.logic.commands.ViewCommand;"},{"lineNumber":7,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":9,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.person.EmailFilter;"},{"lineNumber":10,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":11,"author":{"gitID":"deeheenguyen"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"deeheenguyen"},"content":" * Parses input arguments and creates a new ViewCommand object"},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":" */"},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":"public class ViewCommandParser implements Parser\u003cViewCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":16,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"deeheenguyen"},"content":"     * Parses the given {@code String} of arguments in the context of the ViewCommand"},{"lineNumber":18,"author":{"gitID":"deeheenguyen"},"content":"     * and returns an FindCommand object for execution."},{"lineNumber":19,"author":{"gitID":"deeheenguyen"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"deeheenguyen"},"content":"    public ViewCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"deeheenguyen"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":23,"author":{"gitID":"deeheenguyen"},"content":"        if (!Email.isValidEmail(trimmedArgs)) {"},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitID":"deeheenguyen"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":28,"author":{"gitID":"deeheenguyen"},"content":"        return new ViewCommand(new EmailFilter(new Email(trimmedArgs)));"},{"lineNumber":29,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"deeheenguyen"},"content":"}"},{"lineNumber":31,"author":{"gitID":"deeheenguyen"},"content":"//author@@ deeheenguyen"}],"authorContributionMap":{"deeheenguyen":31}},{"path":"src/main/java/seedu/address/logic/parser/FacebookPostCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":5,"author":{"gitID":"tiny767"},"content":"import seedu.address.logic.commands.FacebookPostCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"tiny767"},"content":"//@@author tiny767"},{"lineNumber":9,"author":{"gitID":"tiny767"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"tiny767"},"content":" * Parses input arguments and creates a new FacebookPostCommand object"},{"lineNumber":11,"author":{"gitID":"tiny767"},"content":" */"},{"lineNumber":12,"author":{"gitID":"tiny767"},"content":"public class FacebookPostCommandParser implements Parser\u003cFacebookPostCommand\u003e {"},{"lineNumber":13,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":14,"author":{"gitID":"tiny767"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"tiny767"},"content":"     * Parses the given {@code String} of arguments in the context of the FacebookAddCommand"},{"lineNumber":16,"author":{"gitID":"tiny767"},"content":"     * and returns an FacebookAddCommand object for execution."},{"lineNumber":17,"author":{"gitID":"tiny767"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":18,"author":{"gitID":"tiny767"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"tiny767"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"tiny767"},"content":"    public FacebookPostCommand parse(String input) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"tiny767"},"content":"        String trimmedInput \u003d input.trim();"},{"lineNumber":22,"author":{"gitID":"tiny767"},"content":"        if (trimmedInput.isEmpty()) {"},{"lineNumber":23,"author":{"gitID":"tiny767"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FacebookPostCommand.MESSAGE_USAGE));"},{"lineNumber":24,"author":{"gitID":"tiny767"},"content":"        }"},{"lineNumber":25,"author":{"gitID":"tiny767"},"content":"        return new FacebookPostCommand(trimmedInput);"},{"lineNumber":26,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"tiny767"},"content":"}"}],"authorContributionMap":{"-":5,"tiny767":22}},{"path":"src/main/java/seedu/address/logic/parser/DeleteInterviewCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"deeheenguyen"},"content":"//@@author deeheenguyen"},{"lineNumber":2,"author":{"gitID":"deeheenguyen"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":4,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.logic.commands.DeleteInterviewCommand;"},{"lineNumber":9,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":11,"author":{"gitID":"deeheenguyen"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"deeheenguyen"},"content":" * Parses input arguments and creates a new DeleteJobCommand object"},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":" */"},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":"public class DeleteInterviewCommandParser implements Parser\u003cDeleteInterviewCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":16,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"deeheenguyen"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteInterviewCommand"},{"lineNumber":18,"author":{"gitID":"deeheenguyen"},"content":"     * and returns an DeleteInterviewCommand object for execution."},{"lineNumber":19,"author":{"gitID":"deeheenguyen"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"deeheenguyen"},"content":"    public DeleteInterviewCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"deeheenguyen"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"deeheenguyen"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":"            return new DeleteInterviewCommand(index);"},{"lineNumber":25,"author":{"gitID":"deeheenguyen"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitID":"deeheenguyen"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"deeheenguyen"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteInterviewCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":31,"author":{"gitID":"deeheenguyen"},"content":"}"},{"lineNumber":32,"author":{"gitID":"deeheenguyen"},"content":""}],"authorContributionMap":{"deeheenguyen":32}},{"path":"src/main/java/seedu/address/logic/parser/ViewReportCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"anh2111"},"content":"// @@author anh2111"},{"lineNumber":2,"author":{"gitID":"anh2111"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":4,"author":{"gitID":"anh2111"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"anh2111"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"anh2111"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_POPULATION;"},{"lineNumber":7,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":8,"author":{"gitID":"anh2111"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"anh2111"},"content":"import java.util.stream.Stream;"},{"lineNumber":10,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":11,"author":{"gitID":"anh2111"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"anh2111"},"content":"import seedu.address.logic.commands.ViewReportCommand;"},{"lineNumber":13,"author":{"gitID":"anh2111"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitID":"anh2111"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"anh2111"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"anh2111"},"content":" * Parses input arguments and creates a new ViewReportCommand object"},{"lineNumber":17,"author":{"gitID":"anh2111"},"content":" */"},{"lineNumber":18,"author":{"gitID":"anh2111"},"content":"public class ViewReportCommandParser implements Parser\u003cViewReportCommand\u003e {"},{"lineNumber":19,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":20,"author":{"gitID":"anh2111"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"anh2111"},"content":"     * Parses the given {@code String} of arguments in the context of the ViewReportCommand"},{"lineNumber":22,"author":{"gitID":"anh2111"},"content":"     * and returns an ViewReportCommand object for execution."},{"lineNumber":23,"author":{"gitID":"anh2111"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":24,"author":{"gitID":"anh2111"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"anh2111"},"content":"    public ViewReportCommand parse(String args) throws ParseException {"},{"lineNumber":26,"author":{"gitID":"anh2111"},"content":"        requireNonNull(args);"},{"lineNumber":27,"author":{"gitID":"anh2111"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_POPULATION);"},{"lineNumber":28,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":29,"author":{"gitID":"anh2111"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_POPULATION)) {"},{"lineNumber":30,"author":{"gitID":"anh2111"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewReportCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"anh2111"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":33,"author":{"gitID":"anh2111"},"content":"        Set\u003cTag\u003e groups;"},{"lineNumber":34,"author":{"gitID":"anh2111"},"content":"        Tag populationTag;"},{"lineNumber":35,"author":{"gitID":"anh2111"},"content":"        try {"},{"lineNumber":36,"author":{"gitID":"anh2111"},"content":"            populationTag \u003d ParserUtil.parseTag(argMultimap.getValue(PREFIX_POPULATION).orElse(\"\"));"},{"lineNumber":37,"author":{"gitID":"anh2111"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":38,"author":{"gitID":"anh2111"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":39,"author":{"gitID":"anh2111"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":41,"author":{"gitID":"anh2111"},"content":"        return new ViewReportCommand(populationTag);"},{"lineNumber":42,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":44,"author":{"gitID":"anh2111"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"anh2111"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":46,"author":{"gitID":"anh2111"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":47,"author":{"gitID":"anh2111"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"anh2111"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":49,"author":{"gitID":"anh2111"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":50,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"anh2111"},"content":"}"},{"lineNumber":52,"author":{"gitID":"anh2111"},"content":"// @@author"}],"authorContributionMap":{"anh2111":52}},{"path":"src/main/java/seedu/address/logic/parser/ThemeCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"tiny767"},"content":"import seedu.address.logic.commands.ThemeCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"tiny767"},"content":"//@@author tiny767"},{"lineNumber":11,"author":{"gitID":"tiny767"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"tiny767"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":13,"author":{"gitID":"tiny767"},"content":" */"},{"lineNumber":14,"author":{"gitID":"tiny767"},"content":"public class ThemeCommandParser implements Parser\u003cThemeCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":16,"author":{"gitID":"tiny767"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"tiny767"},"content":"     * Parses the given {@code String} of arguments in the context of the ThemeCommand"},{"lineNumber":18,"author":{"gitID":"tiny767"},"content":"     * and returns a ThemeCommand object for execution."},{"lineNumber":19,"author":{"gitID":"tiny767"},"content":"         * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"tiny767"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"tiny767"},"content":"    public ThemeCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"tiny767"},"content":"        requireNonNull(args);"},{"lineNumber":23,"author":{"gitID":"tiny767"},"content":"        try {"},{"lineNumber":24,"author":{"gitID":"tiny767"},"content":"            String trimmedArgs \u003d args.trim();"},{"lineNumber":25,"author":{"gitID":"tiny767"},"content":"            if (!trimmedArgs.equalsIgnoreCase(ThemeCommand.LIGHT_THEME)"},{"lineNumber":26,"author":{"gitID":"tiny767"},"content":"                \u0026\u0026 !trimmedArgs.equalsIgnoreCase(ThemeCommand.DARK_THEME)"},{"lineNumber":27,"author":{"gitID":"tiny767"},"content":"                \u0026\u0026 !trimmedArgs.equalsIgnoreCase(ThemeCommand.MORNING_THEME)) {"},{"lineNumber":28,"author":{"gitID":"tiny767"},"content":"                throw new IllegalValueException(\"\");"},{"lineNumber":29,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":30,"author":{"gitID":"tiny767"},"content":"            } else {"},{"lineNumber":31,"author":{"gitID":"tiny767"},"content":"                return new ThemeCommand(trimmedArgs);"},{"lineNumber":32,"author":{"gitID":"tiny767"},"content":"            }"},{"lineNumber":33,"author":{"gitID":"tiny767"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":34,"author":{"gitID":"tiny767"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":35,"author":{"gitID":"tiny767"},"content":"                    ThemeCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitID":"tiny767"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":38,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":40,"author":{"gitID":"tiny767"},"content":"}"}],"authorContributionMap":{"-":8,"tiny767":32}},{"path":"src/main/java/seedu/address/logic/parser/SaveReportCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"anh2111"},"content":"// @@author anh2111"},{"lineNumber":2,"author":{"gitID":"anh2111"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":4,"author":{"gitID":"anh2111"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"anh2111"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"anh2111"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_POPULATION;"},{"lineNumber":7,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":8,"author":{"gitID":"anh2111"},"content":"import java.util.stream.Stream;"},{"lineNumber":9,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":10,"author":{"gitID":"anh2111"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"anh2111"},"content":"import seedu.address.logic.commands.SaveReportCommand;"},{"lineNumber":12,"author":{"gitID":"anh2111"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"anh2111"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"anh2111"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"anh2111"},"content":" * Parses input arguments and creates a new SaveReportCommand object"},{"lineNumber":16,"author":{"gitID":"anh2111"},"content":" */"},{"lineNumber":17,"author":{"gitID":"anh2111"},"content":"public class SaveReportCommandParser implements Parser\u003cSaveReportCommand\u003e {"},{"lineNumber":18,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":19,"author":{"gitID":"anh2111"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"anh2111"},"content":"     * Parses the given {@code String} of arguments in the context of the SaveReportCommand"},{"lineNumber":21,"author":{"gitID":"anh2111"},"content":"     * and returns an SaveReportCommand object for execution."},{"lineNumber":22,"author":{"gitID":"anh2111"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":23,"author":{"gitID":"anh2111"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"anh2111"},"content":"    public SaveReportCommand parse(String args) throws ParseException {"},{"lineNumber":25,"author":{"gitID":"anh2111"},"content":"        requireNonNull(args);"},{"lineNumber":26,"author":{"gitID":"anh2111"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_POPULATION);"},{"lineNumber":27,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":28,"author":{"gitID":"anh2111"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_POPULATION)) {"},{"lineNumber":29,"author":{"gitID":"anh2111"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SaveReportCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitID":"anh2111"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":32,"author":{"gitID":"anh2111"},"content":"        Tag populationTag;"},{"lineNumber":33,"author":{"gitID":"anh2111"},"content":"        try {"},{"lineNumber":34,"author":{"gitID":"anh2111"},"content":"            populationTag \u003d ParserUtil.parseTag(argMultimap.getValue(PREFIX_POPULATION).orElse(\"\"));"},{"lineNumber":35,"author":{"gitID":"anh2111"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":36,"author":{"gitID":"anh2111"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":37,"author":{"gitID":"anh2111"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":39,"author":{"gitID":"anh2111"},"content":"        return new SaveReportCommand(populationTag);"},{"lineNumber":40,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":42,"author":{"gitID":"anh2111"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"anh2111"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":44,"author":{"gitID":"anh2111"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":45,"author":{"gitID":"anh2111"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"anh2111"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":47,"author":{"gitID":"anh2111"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":48,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"anh2111"},"content":"}"},{"lineNumber":50,"author":{"gitID":"anh2111"},"content":"// @@author"}],"authorContributionMap":{"anh2111":50}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.RefreshReportPanelEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * Deletes a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":22,"author":{"gitID":"deeheenguyen"},"content":"    public static final String COMMAND_ALIAS \u003d \"d\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \": Deletes the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Person personToDelete;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        requireNonNull(personToDelete);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            model.deletePerson(personToDelete);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            model.refreshReport();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            EventsCenter.getInstance().post(new RefreshReportPanelEvent());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex) // state check"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(this.personToDelete, ((DeleteCommand) other).personToDelete));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"deeheenguyen":1,"-":71}},{"path":"src/main/java/seedu/address/logic/commands/ViewCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"deeheenguyen"},"content":"//@@author deeheenguyen"},{"lineNumber":2,"author":{"gitID":"deeheenguyen"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":4,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":5,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":7,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.commons.events.ui.ToggleBrowserPanelEvent;"},{"lineNumber":8,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.person.EmailFilter;"},{"lineNumber":9,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":10,"author":{"gitID":"deeheenguyen"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"deeheenguyen"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":12,"author":{"gitID":"deeheenguyen"},"content":" * Keyword matching is case sensitive."},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":" */"},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":"public class ViewCommand extends Command {"},{"lineNumber":15,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":16,"author":{"gitID":"deeheenguyen"},"content":"    public static final String COMMAND_WORD \u003d \"view\";"},{"lineNumber":17,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":18,"author":{"gitID":"deeheenguyen"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds the person with the email\\n\""},{"lineNumber":19,"author":{"gitID":"deeheenguyen"},"content":"            + \"Example: \" + COMMAND_WORD + \" abcd@gmail.com\";"},{"lineNumber":20,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":21,"author":{"gitID":"deeheenguyen"},"content":"    private final EmailFilter predicate;"},{"lineNumber":22,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":23,"author":{"gitID":"deeheenguyen"},"content":"    public ViewCommand(EmailFilter predicate) {"},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":25,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":27,"author":{"gitID":"deeheenguyen"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"deeheenguyen"},"content":"    public CommandResult execute() {"},{"lineNumber":29,"author":{"gitID":"deeheenguyen"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":30,"author":{"gitID":"deeheenguyen"},"content":"        Index targetIndex \u003d Index.fromOneBased(1);"},{"lineNumber":31,"author":{"gitID":"deeheenguyen"},"content":"        EventsCenter.getInstance().post(new ToggleBrowserPanelEvent());"},{"lineNumber":32,"author":{"gitID":"deeheenguyen"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":33,"author":{"gitID":"deeheenguyen"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":34,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":36,"author":{"gitID":"deeheenguyen"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"deeheenguyen"},"content":"    public boolean equals(Object other) {"},{"lineNumber":38,"author":{"gitID":"deeheenguyen"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":39,"author":{"gitID":"deeheenguyen"},"content":"                || (other instanceof ViewCommand // instanceof handles nulls"},{"lineNumber":40,"author":{"gitID":"deeheenguyen"},"content":"                \u0026\u0026 this.predicate.equals(((ViewCommand) other).predicate)); // state check"},{"lineNumber":41,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"deeheenguyen"},"content":"}"},{"lineNumber":43,"author":{"gitID":"deeheenguyen"},"content":"//@@author"}],"authorContributionMap":{"deeheenguyen":43}},{"path":"src/main/java/seedu/address/logic/commands/FindInterviewCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"deeheenguyen"},"content":"//author@@ deeheenguyen"},{"lineNumber":2,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.Interview;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Lists all persons in address book whose name, or email, or phone, or tags contain any of the argument keywords."},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Keyword matching is case sensitive."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"deeheenguyen"},"content":"public class FindInterviewCommand extends Command {"},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":"    public static final String COMMAND_WORD \u003d \"findInterview\";"},{"lineNumber":15,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":16,"author":{"gitID":"deeheenguyen"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all interviews of specific interview\\n\""},{"lineNumber":17,"author":{"gitID":"deeheenguyen"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":18,"author":{"gitID":"deeheenguyen"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice\";"},{"lineNumber":19,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":20,"author":{"gitID":"deeheenguyen"},"content":"    private final Predicate\u003cInterview\u003e predicate;"},{"lineNumber":21,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":22,"author":{"gitID":"deeheenguyen"},"content":"    public FindInterviewCommand(Predicate\u003cInterview\u003e predicate) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":28,"author":{"gitID":"deeheenguyen"},"content":"        model.updateFilteredInterviewList(predicate);"},{"lineNumber":29,"author":{"gitID":"deeheenguyen"},"content":"        return new CommandResult(getMessageForInterviewListShownSummary(model.getFilteredInterviewList().size()));"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":35,"author":{"gitID":"deeheenguyen"},"content":"                || (other instanceof FindInterviewCommand // instanceof handles nulls"},{"lineNumber":36,"author":{"gitID":"deeheenguyen"},"content":"                \u0026\u0026 this.predicate.equals(((FindInterviewCommand) other).predicate)); // state check"},{"lineNumber":37,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"deeheenguyen"},"content":"}"}],"authorContributionMap":{"deeheenguyen":19,"-":19}},{"path":"src/main/java/seedu/address/logic/commands/ThemeCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"tiny767"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":3,"author":{"gitID":"tiny767"},"content":"import seedu.address.ui.UiTheme;"},{"lineNumber":4,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":5,"author":{"gitID":"tiny767"},"content":"//@@author tiny767"},{"lineNumber":6,"author":{"gitID":"tiny767"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"tiny767"},"content":" * Change the theme of addressbook"},{"lineNumber":8,"author":{"gitID":"tiny767"},"content":" */"},{"lineNumber":9,"author":{"gitID":"tiny767"},"content":"public class ThemeCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":11,"author":{"gitID":"tiny767"},"content":"    public static final String COMMAND_WORD \u003d \"theme\";"},{"lineNumber":12,"author":{"gitID":"tiny767"},"content":"    public static final String COMMAND_ALIAS \u003d \"t\";"},{"lineNumber":13,"author":{"gitID":"tiny767"},"content":"    public static final String LIGHT_THEME \u003d \"light\";"},{"lineNumber":14,"author":{"gitID":"tiny767"},"content":"    public static final String DARK_THEME \u003d \"dark\";"},{"lineNumber":15,"author":{"gitID":"tiny767"},"content":"    public static final String MORNING_THEME \u003d \"morning\";"},{"lineNumber":16,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":17,"author":{"gitID":"tiny767"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Changes theme to. \""},{"lineNumber":18,"author":{"gitID":"tiny767"},"content":"            + \"Parameters: morning/light/dark\";"},{"lineNumber":19,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":20,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":21,"author":{"gitID":"tiny767"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Theme has been changed successfully\";"},{"lineNumber":22,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":23,"author":{"gitID":"tiny767"},"content":"    private final String theme;"},{"lineNumber":24,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":25,"author":{"gitID":"tiny767"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"tiny767"},"content":"     * Creates a ThemeCommand to change the theme to the specified {@code theme}"},{"lineNumber":27,"author":{"gitID":"tiny767"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"tiny767"},"content":"    public ThemeCommand(String theme) {"},{"lineNumber":29,"author":{"gitID":"tiny767"},"content":"        this.theme \u003d theme;"},{"lineNumber":30,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":32,"author":{"gitID":"tiny767"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"tiny767"},"content":"    public CommandResult execute() {"},{"lineNumber":34,"author":{"gitID":"tiny767"},"content":"        if (theme.equalsIgnoreCase(ThemeCommand.LIGHT_THEME)) {"},{"lineNumber":35,"author":{"gitID":"tiny767"},"content":"            UiTheme.getInstance().setToLightTheme();"},{"lineNumber":36,"author":{"gitID":"tiny767"},"content":"        } else if (theme.equalsIgnoreCase(ThemeCommand.DARK_THEME)) {"},{"lineNumber":37,"author":{"gitID":"tiny767"},"content":"            UiTheme.getInstance().setToDarkTheme();"},{"lineNumber":38,"author":{"gitID":"tiny767"},"content":"        } else if (theme.equalsIgnoreCase(ThemeCommand.MORNING_THEME)) {"},{"lineNumber":39,"author":{"gitID":"tiny767"},"content":"            UiTheme.getInstance().setToMorningTheme();"},{"lineNumber":40,"author":{"gitID":"tiny767"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":42,"author":{"gitID":"tiny767"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":43,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":44,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":46,"author":{"gitID":"tiny767"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"tiny767"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"tiny767"},"content":"        // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"tiny767"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":50,"author":{"gitID":"tiny767"},"content":"            return true;"},{"lineNumber":51,"author":{"gitID":"tiny767"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":53,"author":{"gitID":"tiny767"},"content":"        // instanceof handles nulls"},{"lineNumber":54,"author":{"gitID":"tiny767"},"content":"        if (!(other instanceof ThemeCommand)) {"},{"lineNumber":55,"author":{"gitID":"tiny767"},"content":"            return false;"},{"lineNumber":56,"author":{"gitID":"tiny767"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":58,"author":{"gitID":"tiny767"},"content":"        // state check"},{"lineNumber":59,"author":{"gitID":"tiny767"},"content":"        ThemeCommand t \u003d (ThemeCommand) other;"},{"lineNumber":60,"author":{"gitID":"tiny767"},"content":"        return theme.equals(t.theme);"},{"lineNumber":61,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"tiny767"},"content":"}"}],"authorContributionMap":{"tiny767":62}},{"path":"src/main/java/seedu/address/logic/commands/Command.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public abstract class Command {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    protected CommandHistory history;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    protected UndoRedoStack undoRedoStack;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of persons."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @param displaySize used to generate summary"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @return summary message for persons displayed"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static String getMessageForPersonListShownSummary(int displaySize) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        return String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, displaySize);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of jobs."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * @param displaySize used to generate summary"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * @return summary message for jobs displayed"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static String getMessageForJobListShownSummary(int displaySize) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        return String.format(Messages.MESSAGE_JOBS_LISTED_OVERVIEW, displaySize);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of persons."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @param displaySize used to generate summary"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @return summary message for persons displayed"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"deeheenguyen"},"content":"    public static String getMessageForInterviewListShownSummary(int displaySize) {"},{"lineNumber":44,"author":{"gitID":"deeheenguyen"},"content":"        return String.format(Messages.MESSAGE_INTERVIEWS_LISTED_OVERVIEW, displaySize);"},{"lineNumber":45,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result message."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * @return feedback message of the operation result for display"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public abstract CommandResult execute() throws CommandException;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Provides any needed dependencies to the command."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Commands making use of any of these should override this method to gain"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * access to the dependencies."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"deeheenguyen":3,"-":59}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.RefreshReportPanelEvent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Clears the address book."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class ClearCommand extends UndoableCommand {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":15,"author":{"gitID":"deeheenguyen"},"content":"    public static final String COMMAND_ALIAS \u003d \"c\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        model.refreshReport();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new RefreshReportPanelEvent());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        model.resetData(new AddressBook());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"deeheenguyen":1,"-":26}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LINK;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SKILLS;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.RefreshReportPanelEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Adds a person to the address book."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":"    public static final String COMMAND_ALIAS \u003d \"a\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":32,"author":{"gitID":"-"},"content":"            + PREFIX_SKILLS + \"SKILLS \""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + PREFIX_LINK + \"LINK \""},{"lineNumber":34,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":35,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":36,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":37,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":38,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":39,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":40,"author":{"gitID":"deeheenguyen"},"content":"            + PREFIX_LINK + \"link \""},{"lineNumber":41,"author":{"gitID":"-"},"content":"            + PREFIX_SKILLS + \"CSS\""},{"lineNumber":42,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":43,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private final Person toAdd;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        requireNonNull(person);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            model.refreshReport();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            EventsCenter.getInstance().post(new RefreshReportPanelEvent());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"deeheenguyen":4,"-":75}},{"path":"src/main/java/seedu/address/logic/CommandCorrection.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddInterviewCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteInterviewCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteJobCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditJobCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FacebookLoginCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindInterviewCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindJobCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListInterviewCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListJobsCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.MatchJobCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.PostJobCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":29,"author":{"gitID":"tiny767"},"content":"import seedu.address.logic.commands.RemarkCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SaveReportCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":32,"author":{"gitID":"tiny767"},"content":"import seedu.address.logic.commands.ThemeCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":34,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.logic.commands.ViewCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ViewReportCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"ChengSashankh"},"content":"//@@author ChengSashankh"},{"lineNumber":38,"author":{"gitID":"ChengSashankh"},"content":"/***"},{"lineNumber":39,"author":{"gitID":"ChengSashankh"},"content":" * Auto-correct and auto-completing the command words being typed by the user in the command box."},{"lineNumber":40,"author":{"gitID":"ChengSashankh"},"content":" */"},{"lineNumber":41,"author":{"gitID":"ChengSashankh"},"content":"public class CommandCorrection {"},{"lineNumber":42,"author":{"gitID":"ChengSashankh"},"content":"    public static final String MATCH_FOUND_FEEDBACK_TO_USER \u003d \"Auto-completions: %1$s\";"},{"lineNumber":43,"author":{"gitID":"ChengSashankh"},"content":"    public static final String NO_MATCHES_FEEDBACK_TO_USER \u003d \"No matching command completion found. \""},{"lineNumber":44,"author":{"gitID":"ChengSashankh"},"content":"            + \"Try SPACE key for auto-correct.\";"},{"lineNumber":45,"author":{"gitID":"ChengSashankh"},"content":"    private static final int NUMBER_ALPHABET \u003d 52;"},{"lineNumber":46,"author":{"gitID":"ChengSashankh"},"content":"    private static final int START_INDEX \u003d 0;"},{"lineNumber":47,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":48,"author":{"gitID":"ChengSashankh"},"content":"    private static boolean isFirstCall \u003d true;"},{"lineNumber":49,"author":{"gitID":"ChengSashankh"},"content":"    private static Set\u003cString\u003e commandDictionary;"},{"lineNumber":50,"author":{"gitID":"ChengSashankh"},"content":"    private static String commandParameters;"},{"lineNumber":51,"author":{"gitID":"ChengSashankh"},"content":"    private static String commandInput;"},{"lineNumber":52,"author":{"gitID":"ChengSashankh"},"content":"    private static ArrayList\u003cString\u003e latestSuggestionsList;"},{"lineNumber":53,"author":{"gitID":"ChengSashankh"},"content":"    private static String recentInput;"},{"lineNumber":54,"author":{"gitID":"ChengSashankh"},"content":"    private static String recentSuggestion;"},{"lineNumber":55,"author":{"gitID":"ChengSashankh"},"content":"    private static int tabCounter \u003d 0;"},{"lineNumber":56,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":57,"author":{"gitID":"ChengSashankh"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Common methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":58,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":59,"author":{"gitID":"ChengSashankh"},"content":"    public CommandCorrection() {"},{"lineNumber":60,"author":{"gitID":"ChengSashankh"},"content":"        createDictionary();"},{"lineNumber":61,"author":{"gitID":"ChengSashankh"},"content":"        latestSuggestionsList \u003d new ArrayList\u003cString\u003e();"},{"lineNumber":62,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":64,"author":{"gitID":"ChengSashankh"},"content":"    /***"},{"lineNumber":65,"author":{"gitID":"ChengSashankh"},"content":"     * Checks if the commandText that contains the command word is already a correct command."},{"lineNumber":66,"author":{"gitID":"ChengSashankh"},"content":"     * @param commandText string from the commandBox that was typed by the user."},{"lineNumber":67,"author":{"gitID":"ChengSashankh"},"content":"     * @return boolean indicating whether it is a correct command."},{"lineNumber":68,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"ChengSashankh"},"content":"    public static boolean isCorrectCommand(String commandText) {"},{"lineNumber":70,"author":{"gitID":"ChengSashankh"},"content":"        return commandDictionary.contains(commandText);"},{"lineNumber":71,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":73,"author":{"gitID":"ChengSashankh"},"content":"    /***"},{"lineNumber":74,"author":{"gitID":"ChengSashankh"},"content":"     * Creates a dictionary of all command words recognized by Infinity Book."},{"lineNumber":75,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"ChengSashankh"},"content":"    public static void createDictionary() {"},{"lineNumber":77,"author":{"gitID":"ChengSashankh"},"content":"        commandDictionary \u003d new HashSet\u003c\u003e();"},{"lineNumber":78,"author":{"gitID":"ChengSashankh"},"content":"        commandDictionary.add(AddCommand.COMMAND_WORD);"},{"lineNumber":79,"author":{"gitID":"ChengSashankh"},"content":"        commandDictionary.add(ClearCommand.COMMAND_WORD);"},{"lineNumber":80,"author":{"gitID":"ChengSashankh"},"content":"        commandDictionary.add(DeleteCommand.COMMAND_WORD);"},{"lineNumber":81,"author":{"gitID":"ChengSashankh"},"content":"        commandDictionary.add(DeleteJobCommand.COMMAND_WORD);"},{"lineNumber":82,"author":{"gitID":"ChengSashankh"},"content":"        commandDictionary.add(EditCommand.COMMAND_WORD);"},{"lineNumber":83,"author":{"gitID":"ChengSashankh"},"content":"        commandDictionary.add(EditJobCommand.COMMAND_WORD);"},{"lineNumber":84,"author":{"gitID":"ChengSashankh"},"content":"        commandDictionary.add(FindCommand.COMMAND_WORD);"},{"lineNumber":85,"author":{"gitID":"ChengSashankh"},"content":"        commandDictionary.add(FindJobCommand.COMMAND_WORD);"},{"lineNumber":86,"author":{"gitID":"ChengSashankh"},"content":"        commandDictionary.add(HelpCommand.COMMAND_WORD);"},{"lineNumber":87,"author":{"gitID":"ChengSashankh"},"content":"        commandDictionary.add(HistoryCommand.COMMAND_WORD);"},{"lineNumber":88,"author":{"gitID":"ChengSashankh"},"content":"        commandDictionary.add(ListCommand.COMMAND_WORD);"},{"lineNumber":89,"author":{"gitID":"ChengSashankh"},"content":"        commandDictionary.add(ListJobsCommand.COMMAND_WORD);"},{"lineNumber":90,"author":{"gitID":"ChengSashankh"},"content":"        commandDictionary.add(MatchJobCommand.COMMAND_WORD);"},{"lineNumber":91,"author":{"gitID":"ChengSashankh"},"content":"        commandDictionary.add(PostJobCommand.COMMAND_WORD);"},{"lineNumber":92,"author":{"gitID":"ChengSashankh"},"content":"        commandDictionary.add(RedoCommand.COMMAND_WORD);"},{"lineNumber":93,"author":{"gitID":"ChengSashankh"},"content":"        commandDictionary.add(RemarkCommand.COMMAND_WORD);"},{"lineNumber":94,"author":{"gitID":"ChengSashankh"},"content":"        commandDictionary.add(SelectCommand.COMMAND_WORD);"},{"lineNumber":95,"author":{"gitID":"ChengSashankh"},"content":"        commandDictionary.add(ThemeCommand.COMMAND_WORD);"},{"lineNumber":96,"author":{"gitID":"ChengSashankh"},"content":"        commandDictionary.add(UndoCommand.COMMAND_WORD);"},{"lineNumber":97,"author":{"gitID":"ChengSashankh"},"content":"        commandDictionary.add(ViewCommand.COMMAND_WORD);"},{"lineNumber":98,"author":{"gitID":"ChengSashankh"},"content":"        commandDictionary.add(ExitCommand.COMMAND_WORD);"},{"lineNumber":99,"author":{"gitID":"ChengSashankh"},"content":"        commandDictionary.add(AddInterviewCommand.COMMAND_WORD);"},{"lineNumber":100,"author":{"gitID":"ChengSashankh"},"content":"        commandDictionary.add(DeleteInterviewCommand.COMMAND_WORD);"},{"lineNumber":101,"author":{"gitID":"ChengSashankh"},"content":"        commandDictionary.add(ListInterviewCommand.COMMAND_WORD);"},{"lineNumber":102,"author":{"gitID":"ChengSashankh"},"content":"        commandDictionary.add(FindInterviewCommand.COMMAND_WORD);"},{"lineNumber":103,"author":{"gitID":"ChengSashankh"},"content":"        commandDictionary.add(FacebookLoginCommand.COMMAND_WORD);"},{"lineNumber":104,"author":{"gitID":"ChengSashankh"},"content":"        commandDictionary.add(ThemeCommand.COMMAND_WORD);"},{"lineNumber":105,"author":{"gitID":"ChengSashankh"},"content":"        commandDictionary.add(HistoryCommand.COMMAND_WORD);"},{"lineNumber":106,"author":{"gitID":"ChengSashankh"},"content":"        commandDictionary.add(ExitCommand.COMMAND_WORD);"},{"lineNumber":107,"author":{"gitID":"ChengSashankh"},"content":"        commandDictionary.add(UndoCommand.COMMAND_WORD);"},{"lineNumber":108,"author":{"gitID":"ChengSashankh"},"content":"        commandDictionary.add(ViewReportCommand.COMMAND_WORD);"},{"lineNumber":109,"author":{"gitID":"ChengSashankh"},"content":"        commandDictionary.add(SaveReportCommand.COMMAND_WORD);"},{"lineNumber":110,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":112,"author":{"gitID":"ChengSashankh"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Auto-complete methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":113,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":114,"author":{"gitID":"ChengSashankh"},"content":"    public static void setUpCommandCompletion() {"},{"lineNumber":115,"author":{"gitID":"ChengSashankh"},"content":"        if (isFirstCall) {"},{"lineNumber":116,"author":{"gitID":"ChengSashankh"},"content":"            recentInput \u003d \"\";"},{"lineNumber":117,"author":{"gitID":"ChengSashankh"},"content":"            recentSuggestion \u003d \"\";"},{"lineNumber":118,"author":{"gitID":"ChengSashankh"},"content":"            commandInput \u003d \"\";"},{"lineNumber":119,"author":{"gitID":"ChengSashankh"},"content":"            isFirstCall \u003d false;"},{"lineNumber":120,"author":{"gitID":"ChengSashankh"},"content":"            createDictionary();"},{"lineNumber":121,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":124,"author":{"gitID":"ChengSashankh"},"content":"    public static void setRecentInput(String recentInput) {"},{"lineNumber":125,"author":{"gitID":"ChengSashankh"},"content":"        CommandCorrection.recentInput \u003d recentInput;"},{"lineNumber":126,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":128,"author":{"gitID":"ChengSashankh"},"content":"    public static int getTabCounter() {"},{"lineNumber":129,"author":{"gitID":"ChengSashankh"},"content":"        return tabCounter;"},{"lineNumber":130,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":132,"author":{"gitID":"ChengSashankh"},"content":"    public static void resetTabCounter() {"},{"lineNumber":133,"author":{"gitID":"ChengSashankh"},"content":"        tabCounter \u003d 0;"},{"lineNumber":134,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":136,"author":{"gitID":"ChengSashankh"},"content":"    public static void incrementTabCounter() {"},{"lineNumber":137,"author":{"gitID":"ChengSashankh"},"content":"        tabCounter++;"},{"lineNumber":138,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":140,"author":{"gitID":"ChengSashankh"},"content":"    /***"},{"lineNumber":141,"author":{"gitID":"ChengSashankh"},"content":"     * Function attempts to complete command that is consistent with the text already typed."},{"lineNumber":142,"author":{"gitID":"ChengSashankh"},"content":"     * @param commandText string from the commandBox that was typed by the user."},{"lineNumber":143,"author":{"gitID":"ChengSashankh"},"content":"     * @returns ArrayList containing all possible suggestions as strings."},{"lineNumber":144,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"ChengSashankh"},"content":"    public static ArrayList\u003cString\u003e getSuggestions(String commandText) {"},{"lineNumber":146,"author":{"gitID":"ChengSashankh"},"content":"        updateSuggestionsList(commandText);"},{"lineNumber":147,"author":{"gitID":"ChengSashankh"},"content":"        commandInput \u003d commandText;"},{"lineNumber":148,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":149,"author":{"gitID":"ChengSashankh"},"content":"        return latestSuggestionsList;"},{"lineNumber":150,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":152,"author":{"gitID":"ChengSashankh"},"content":"    public static boolean noTextToComplete(String textToComplete) {"},{"lineNumber":153,"author":{"gitID":"ChengSashankh"},"content":"        return (textToComplete.trim().equals(\"\"));"},{"lineNumber":154,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":156,"author":{"gitID":"ChengSashankh"},"content":"    /***"},{"lineNumber":157,"author":{"gitID":"ChengSashankh"},"content":"     * Updates text to complete to original user input, if it has been altered."},{"lineNumber":158,"author":{"gitID":"ChengSashankh"},"content":"     * @param textToComplete stores the string in the commandBox currently."},{"lineNumber":159,"author":{"gitID":"ChengSashankh"},"content":"     * @return the original user input."},{"lineNumber":160,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"ChengSashankh"},"content":"    public static String updateTextToComplete(String textToComplete) {"},{"lineNumber":162,"author":{"gitID":"ChengSashankh"},"content":"        if (textToComplete.compareTo(recentSuggestion.trim()) \u003d\u003d 0) {"},{"lineNumber":163,"author":{"gitID":"ChengSashankh"},"content":"            return recentInput;"},{"lineNumber":164,"author":{"gitID":"ChengSashankh"},"content":"        } else {"},{"lineNumber":165,"author":{"gitID":"ChengSashankh"},"content":"            return textToComplete;"},{"lineNumber":166,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":169,"author":{"gitID":"ChengSashankh"},"content":"    /***"},{"lineNumber":170,"author":{"gitID":"ChengSashankh"},"content":"     * Picks the next auto-complete suggestion from the list of possible suggestions."},{"lineNumber":171,"author":{"gitID":"ChengSashankh"},"content":"     * @param suggestions contains all possible suggestions"},{"lineNumber":172,"author":{"gitID":"ChengSashankh"},"content":"     * @param suggestionToChoose indicates the suggestion to pick"},{"lineNumber":173,"author":{"gitID":"ChengSashankh"},"content":"     * @param commandText the string input from user"},{"lineNumber":174,"author":{"gitID":"ChengSashankh"},"content":"     * @return the suggested completion, if available. Else the input is returned."},{"lineNumber":175,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"ChengSashankh"},"content":"    public static String chooseSuggestion(ArrayList\u003cString\u003e suggestions, int suggestionToChoose,"},{"lineNumber":177,"author":{"gitID":"ChengSashankh"},"content":"                                          String commandText) {"},{"lineNumber":178,"author":{"gitID":"ChengSashankh"},"content":"        if (suggestions.size() !\u003d 0) {"},{"lineNumber":179,"author":{"gitID":"ChengSashankh"},"content":"            suggestionToChoose \u003d suggestionToChoose % suggestions.size();"},{"lineNumber":180,"author":{"gitID":"ChengSashankh"},"content":"            recentSuggestion \u003d suggestions.get(suggestionToChoose);"},{"lineNumber":181,"author":{"gitID":"ChengSashankh"},"content":"            return recentSuggestion;"},{"lineNumber":182,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"ChengSashankh"},"content":"        return commandText;"},{"lineNumber":184,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":186,"author":{"gitID":"ChengSashankh"},"content":"    /***"},{"lineNumber":187,"author":{"gitID":"ChengSashankh"},"content":"     * Updates the tab counter based on user input either incrementing or resetting."},{"lineNumber":188,"author":{"gitID":"ChengSashankh"},"content":"     * @param textToComplete stores the string input from the user."},{"lineNumber":189,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"ChengSashankh"},"content":"    public static void updateTabCounter(String textToComplete) {"},{"lineNumber":191,"author":{"gitID":"ChengSashankh"},"content":"        if (textToComplete.compareTo(recentSuggestion.trim()) \u003d\u003d 0) {"},{"lineNumber":192,"author":{"gitID":"ChengSashankh"},"content":"            CommandCorrection.incrementTabCounter();"},{"lineNumber":193,"author":{"gitID":"ChengSashankh"},"content":"        } else {"},{"lineNumber":194,"author":{"gitID":"ChengSashankh"},"content":"            CommandCorrection.resetTabCounter();"},{"lineNumber":195,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":196,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":198,"author":{"gitID":"ChengSashankh"},"content":"    /***"},{"lineNumber":199,"author":{"gitID":"ChengSashankh"},"content":"     * Updates the suggestions list based on the input string in commandBox"},{"lineNumber":200,"author":{"gitID":"ChengSashankh"},"content":"     * @param commandText string from the commandBox that was typed by the user."},{"lineNumber":201,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":202,"author":{"gitID":"ChengSashankh"},"content":"    public static void updateSuggestionsList(String commandText) {"},{"lineNumber":203,"author":{"gitID":"ChengSashankh"},"content":"        if (commandText.equals(commandInput)) {"},{"lineNumber":204,"author":{"gitID":"ChengSashankh"},"content":"            return;"},{"lineNumber":205,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":206,"author":{"gitID":"ChengSashankh"},"content":"        latestSuggestionsList \u003d new ArrayList\u003cString\u003e();"},{"lineNumber":207,"author":{"gitID":"ChengSashankh"},"content":"        Iterator\u003cString\u003e iterator \u003d commandDictionary.iterator();"},{"lineNumber":208,"author":{"gitID":"ChengSashankh"},"content":"        int commandTextLength \u003d commandText.length();"},{"lineNumber":209,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":210,"author":{"gitID":"ChengSashankh"},"content":"        while (iterator.hasNext()) {"},{"lineNumber":211,"author":{"gitID":"ChengSashankh"},"content":"            String nextCommand \u003d iterator.next();"},{"lineNumber":212,"author":{"gitID":"ChengSashankh"},"content":"            int nextCommandLength \u003d nextCommand.length();"},{"lineNumber":213,"author":{"gitID":"ChengSashankh"},"content":"            if (nextCommandLength \u003e\u003d commandTextLength) {"},{"lineNumber":214,"author":{"gitID":"ChengSashankh"},"content":"                String nextCommandSnippet \u003d nextCommand.substring(START_INDEX, commandTextLength);"},{"lineNumber":215,"author":{"gitID":"ChengSashankh"},"content":"                if (nextCommandSnippet.compareTo(commandText) \u003d\u003d 0) {"},{"lineNumber":216,"author":{"gitID":"ChengSashankh"},"content":"                    latestSuggestionsList.add(nextCommand.concat(\" \"));"},{"lineNumber":217,"author":{"gitID":"ChengSashankh"},"content":"                }"},{"lineNumber":218,"author":{"gitID":"ChengSashankh"},"content":"            }"},{"lineNumber":219,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":220,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":221,"author":{"gitID":"ChengSashankh"},"content":"        latestSuggestionsList.sort((string1, string2) -\u003e string1.compareToIgnoreCase(string2));"},{"lineNumber":222,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":224,"author":{"gitID":"ChengSashankh"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Auto-correct methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":225,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":226,"author":{"gitID":"ChengSashankh"},"content":"    /***"},{"lineNumber":227,"author":{"gitID":"ChengSashankh"},"content":"     * Sets up CommandCorrection by creating the dictionary."},{"lineNumber":228,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":229,"author":{"gitID":"ChengSashankh"},"content":"    public static void setUpCommandCorrection() {"},{"lineNumber":230,"author":{"gitID":"ChengSashankh"},"content":"        createDictionary();"},{"lineNumber":231,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":233,"author":{"gitID":"ChengSashankh"},"content":"    /***"},{"lineNumber":234,"author":{"gitID":"ChengSashankh"},"content":"     * Extracts the command word and corrects only the command word and stores the rest in {@code commandParameters}"},{"lineNumber":235,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":236,"author":{"gitID":"ChengSashankh"},"content":"    public static String extractCommandWord(String commandText) {"},{"lineNumber":237,"author":{"gitID":"ChengSashankh"},"content":"        String trimmedCommandText \u003d commandText.trim();"},{"lineNumber":238,"author":{"gitID":"ChengSashankh"},"content":"        String[] wordsInCommandText \u003d trimmedCommandText.split(\" \");"},{"lineNumber":239,"author":{"gitID":"ChengSashankh"},"content":"        commandParameters \u003d trimmedCommandText.replace(wordsInCommandText[0], \"\");"},{"lineNumber":240,"author":{"gitID":"ChengSashankh"},"content":"        return wordsInCommandText[0];"},{"lineNumber":241,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":243,"author":{"gitID":"ChengSashankh"},"content":"    /***"},{"lineNumber":244,"author":{"gitID":"ChengSashankh"},"content":"     * Finds the nearest correction that is found. If no correction is found the text is returned as is."},{"lineNumber":245,"author":{"gitID":"ChengSashankh"},"content":"     * @param commandText string from the commandBox that was typed by the user."},{"lineNumber":246,"author":{"gitID":"ChengSashankh"},"content":"     * @return corrected String according the rules."},{"lineNumber":247,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":248,"author":{"gitID":"ChengSashankh"},"content":"    public static String nearestCorrection(String commandText) {"},{"lineNumber":249,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":250,"author":{"gitID":"ChengSashankh"},"content":"        if (isCorrectCommand(commandText)) {"},{"lineNumber":251,"author":{"gitID":"ChengSashankh"},"content":"            return commandText;"},{"lineNumber":252,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":253,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":254,"author":{"gitID":"ChengSashankh"},"content":"        String extractedcommandText \u003d extractCommandWord(commandText);"},{"lineNumber":255,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":256,"author":{"gitID":"ChengSashankh"},"content":"        String nearestCorrectedCommand \u003d removeOneCharacter(extractedcommandText);"},{"lineNumber":257,"author":{"gitID":"ChengSashankh"},"content":"        if (nearestCorrectedCommand !\u003d null) {"},{"lineNumber":258,"author":{"gitID":"ChengSashankh"},"content":"            return nearestCorrectedCommand.concat(commandParameters);"},{"lineNumber":259,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":260,"author":{"gitID":"ChengSashankh"},"content":"        nearestCorrectedCommand \u003d addOneCharacter(extractedcommandText);"},{"lineNumber":261,"author":{"gitID":"ChengSashankh"},"content":"        if (nearestCorrectedCommand !\u003d null) {"},{"lineNumber":262,"author":{"gitID":"ChengSashankh"},"content":"            return nearestCorrectedCommand.concat(commandParameters);"},{"lineNumber":263,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":264,"author":{"gitID":"ChengSashankh"},"content":"        nearestCorrectedCommand \u003d swapTwoCharacters(extractedcommandText);"},{"lineNumber":265,"author":{"gitID":"ChengSashankh"},"content":"        if (nearestCorrectedCommand !\u003d null) {"},{"lineNumber":266,"author":{"gitID":"ChengSashankh"},"content":"            return nearestCorrectedCommand.concat(commandParameters);"},{"lineNumber":267,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":268,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":269,"author":{"gitID":"ChengSashankh"},"content":"        return commandText;"},{"lineNumber":270,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":271,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":272,"author":{"gitID":"ChengSashankh"},"content":"    /// Methods to search for auto-corrected command words."},{"lineNumber":273,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":274,"author":{"gitID":"ChengSashankh"},"content":"    /***"},{"lineNumber":275,"author":{"gitID":"ChengSashankh"},"content":"     * Searches for corrected command word by removing one character at a time."},{"lineNumber":276,"author":{"gitID":"ChengSashankh"},"content":"     * @param commandText string from the commandBox that was typed by the user."},{"lineNumber":277,"author":{"gitID":"ChengSashankh"},"content":"     * @return a corrected String, if available. Else returns the same string."},{"lineNumber":278,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":279,"author":{"gitID":"ChengSashankh"},"content":"    public static String removeOneCharacter(String commandText) {"},{"lineNumber":280,"author":{"gitID":"ChengSashankh"},"content":"        for (int index \u003d 0; index \u003c commandText.length(); index++) {"},{"lineNumber":281,"author":{"gitID":"ChengSashankh"},"content":"            StringBuilder stringBuilder \u003d new StringBuilder(commandText);"},{"lineNumber":282,"author":{"gitID":"ChengSashankh"},"content":"            stringBuilder.deleteCharAt(index);"},{"lineNumber":283,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":284,"author":{"gitID":"ChengSashankh"},"content":"            if (isCorrectCommand(stringBuilder.toString())) {"},{"lineNumber":285,"author":{"gitID":"ChengSashankh"},"content":"                return stringBuilder.toString();"},{"lineNumber":286,"author":{"gitID":"ChengSashankh"},"content":"            }"},{"lineNumber":287,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":288,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":289,"author":{"gitID":"ChengSashankh"},"content":"        return null;"},{"lineNumber":290,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":291,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":292,"author":{"gitID":"ChengSashankh"},"content":"    /***"},{"lineNumber":293,"author":{"gitID":"ChengSashankh"},"content":"     * Searches for corrected command word that by adding one character at a time."},{"lineNumber":294,"author":{"gitID":"ChengSashankh"},"content":"     * @param commandText string from the commandBox that was typed by the user."},{"lineNumber":295,"author":{"gitID":"ChengSashankh"},"content":"     * @returns a corrected String, if available. Else returns the same string."},{"lineNumber":296,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":297,"author":{"gitID":"ChengSashankh"},"content":"    public static String addOneCharacter(String commandText) {"},{"lineNumber":298,"author":{"gitID":"ChengSashankh"},"content":"        String alphabetString \u003d \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";"},{"lineNumber":299,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":300,"author":{"gitID":"ChengSashankh"},"content":"        for (int i \u003d 0; i \u003c NUMBER_ALPHABET; i++) {"},{"lineNumber":301,"author":{"gitID":"ChengSashankh"},"content":"            char alphabet \u003d alphabetString.charAt(i);"},{"lineNumber":302,"author":{"gitID":"ChengSashankh"},"content":"            for (int position \u003d 0; position \u003c\u003d commandText.length(); position++) {"},{"lineNumber":303,"author":{"gitID":"ChengSashankh"},"content":"                StringBuilder stringBuilder \u003d new StringBuilder(commandText);"},{"lineNumber":304,"author":{"gitID":"ChengSashankh"},"content":"                stringBuilder.insert(position, alphabet);"},{"lineNumber":305,"author":{"gitID":"ChengSashankh"},"content":"                String modifiedCommand \u003d stringBuilder.toString();"},{"lineNumber":306,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":307,"author":{"gitID":"ChengSashankh"},"content":"                if (isCorrectCommand(modifiedCommand)) {"},{"lineNumber":308,"author":{"gitID":"ChengSashankh"},"content":"                    return modifiedCommand;"},{"lineNumber":309,"author":{"gitID":"ChengSashankh"},"content":"                }"},{"lineNumber":310,"author":{"gitID":"ChengSashankh"},"content":"            }"},{"lineNumber":311,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":312,"author":{"gitID":"ChengSashankh"},"content":"        return null;"},{"lineNumber":313,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":314,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":315,"author":{"gitID":"ChengSashankh"},"content":"    /***"},{"lineNumber":316,"author":{"gitID":"ChengSashankh"},"content":"     * Returns correct word when two consecutive alphabets are swapped."},{"lineNumber":317,"author":{"gitID":"ChengSashankh"},"content":"     * @param commandText string from the commandBox that was typed by the user."},{"lineNumber":318,"author":{"gitID":"ChengSashankh"},"content":"     * @returns a corrected String, if available. Else returns the same string."},{"lineNumber":319,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":320,"author":{"gitID":"ChengSashankh"},"content":"    public static String swapTwoCharacters(String commandText) {"},{"lineNumber":321,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":322,"author":{"gitID":"ChengSashankh"},"content":"        for (int position \u003d 0; position \u003c commandText.length() - 1; position++) {"},{"lineNumber":323,"author":{"gitID":"ChengSashankh"},"content":"            StringBuilder stringBuilder \u003d new StringBuilder(commandText);"},{"lineNumber":324,"author":{"gitID":"ChengSashankh"},"content":"            char temp \u003d stringBuilder.charAt(position);"},{"lineNumber":325,"author":{"gitID":"ChengSashankh"},"content":"            stringBuilder.deleteCharAt(position);"},{"lineNumber":326,"author":{"gitID":"ChengSashankh"},"content":"            stringBuilder.insert(position + 1, temp);"},{"lineNumber":327,"author":{"gitID":"ChengSashankh"},"content":"            String modifiedCommand \u003d stringBuilder.toString();"},{"lineNumber":328,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":329,"author":{"gitID":"ChengSashankh"},"content":"            if (isCorrectCommand(modifiedCommand)) {"},{"lineNumber":330,"author":{"gitID":"ChengSashankh"},"content":"                return modifiedCommand;"},{"lineNumber":331,"author":{"gitID":"ChengSashankh"},"content":"            }"},{"lineNumber":332,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":333,"author":{"gitID":"ChengSashankh"},"content":"        return null;"},{"lineNumber":334,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":335,"author":{"gitID":"ChengSashankh"},"content":"}"},{"lineNumber":336,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":337,"author":{"gitID":"ChengSashankh"},"content":"//@@author"}],"authorContributionMap":{"deeheenguyen":1,"ChengSashankh":301,"-":33,"tiny767":2}},{"path":"src/main/java/seedu/address/logic/commands/FindJobCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"ChengSashankh"},"content":"//@@author ChengSashankh"},{"lineNumber":8,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":9,"author":{"gitID":"ChengSashankh"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"ChengSashankh"},"content":" * Lists all jobs in Infinity Book for which Job Title, Location or Tags contain any of the argument keywords."},{"lineNumber":11,"author":{"gitID":"ChengSashankh"},"content":" * Keyword matching is case insensitive."},{"lineNumber":12,"author":{"gitID":"ChengSashankh"},"content":" */"},{"lineNumber":13,"author":{"gitID":"ChengSashankh"},"content":"public class FindJobCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"ChengSashankh"},"content":"    public static final String COMMAND_WORD \u003d \"findjob\";"},{"lineNumber":15,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":16,"author":{"gitID":"ChengSashankh"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all jobs whose job title, location or tags\""},{"lineNumber":17,"author":{"gitID":"ChengSashankh"},"content":"            + \"contain any of the specified keywords (case-insensitive) and displays them as a list with index \""},{"lineNumber":18,"author":{"gitID":"ChengSashankh"},"content":"            + \"numbers.\\n\""},{"lineNumber":19,"author":{"gitID":"ChengSashankh"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":20,"author":{"gitID":"ChengSashankh"},"content":"            + \"Example: \" + COMMAND_WORD + \" frontend backend systems\";"},{"lineNumber":21,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":22,"author":{"gitID":"ChengSashankh"},"content":"    private final Predicate\u003cJob\u003e predicate;"},{"lineNumber":23,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":24,"author":{"gitID":"ChengSashankh"},"content":"    public FindJobCommand(Predicate\u003cJob\u003e predicate) {"},{"lineNumber":25,"author":{"gitID":"ChengSashankh"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":26,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":28,"author":{"gitID":"ChengSashankh"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"ChengSashankh"},"content":"    public CommandResult execute() {"},{"lineNumber":30,"author":{"gitID":"ChengSashankh"},"content":"        model.updateFilteredJobList(predicate);"},{"lineNumber":31,"author":{"gitID":"ChengSashankh"},"content":"        return new CommandResult(getMessageForJobListShownSummary(model.getFilteredJobList().size()));"},{"lineNumber":32,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":34,"author":{"gitID":"ChengSashankh"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"ChengSashankh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":36,"author":{"gitID":"ChengSashankh"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":37,"author":{"gitID":"ChengSashankh"},"content":"                || (other instanceof FindJobCommand // instanceof handles nulls"},{"lineNumber":38,"author":{"gitID":"ChengSashankh"},"content":"                \u0026\u0026 this.predicate.equals(((FindJobCommand) other).predicate)); // state check"},{"lineNumber":39,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"ChengSashankh"},"content":"}"},{"lineNumber":41,"author":{"gitID":"ChengSashankh"},"content":"//@@author"}],"authorContributionMap":{"ChengSashankh":35,"-":6}},{"path":"src/main/java/seedu/address/logic/commands/SaveReportCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"anh2111"},"content":"// @@author anh2111"},{"lineNumber":2,"author":{"gitID":"anh2111"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":4,"author":{"gitID":"anh2111"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":6,"author":{"gitID":"anh2111"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":7,"author":{"gitID":"anh2111"},"content":"import seedu.address.commons.events.ui.ToggleReportPanelEvent;"},{"lineNumber":8,"author":{"gitID":"anh2111"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":10,"author":{"gitID":"anh2111"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"anh2111"},"content":" * Adds a report to the address book."},{"lineNumber":12,"author":{"gitID":"anh2111"},"content":" */"},{"lineNumber":13,"author":{"gitID":"anh2111"},"content":"public class SaveReportCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"anh2111"},"content":"    public static final String COMMAND_WORD \u003d \"savereport\";"},{"lineNumber":15,"author":{"gitID":"anh2111"},"content":"    public static final String COMMAND_ALIAS \u003d \"sr\";"},{"lineNumber":16,"author":{"gitID":"anh2111"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":17,"author":{"gitID":"anh2111"},"content":"            + \": Save report at the current state.\\n\""},{"lineNumber":18,"author":{"gitID":"anh2111"},"content":"            + \"Parameters: pop/POPULATION_TAG\\n\""},{"lineNumber":19,"author":{"gitID":"anh2111"},"content":"            + \"Example: \" + COMMAND_WORD + \" pop/SEIntern OR \" + COMMAND_ALIAS + \" pop/SEIntern\";"},{"lineNumber":20,"author":{"gitID":"anh2111"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Saved report for #\";"},{"lineNumber":21,"author":{"gitID":"anh2111"},"content":"    public final Tag population;"},{"lineNumber":22,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":23,"author":{"gitID":"anh2111"},"content":"    public SaveReportCommand(Tag population) {"},{"lineNumber":24,"author":{"gitID":"anh2111"},"content":"        requireNonNull(population);"},{"lineNumber":25,"author":{"gitID":"anh2111"},"content":"        this.population \u003d population;"},{"lineNumber":26,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":28,"author":{"gitID":"anh2111"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"anh2111"},"content":"    public CommandResult execute() {"},{"lineNumber":30,"author":{"gitID":"anh2111"},"content":"        model.updateReport(population);"},{"lineNumber":31,"author":{"gitID":"anh2111"},"content":"        model.addReport(model.getReport());"},{"lineNumber":32,"author":{"gitID":"anh2111"},"content":"        EventsCenter.getInstance().post(new ToggleReportPanelEvent());"},{"lineNumber":33,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":34,"author":{"gitID":"anh2111"},"content":"        return new CommandResult(MESSAGE_SUCCESS + population.tagName);"},{"lineNumber":35,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":37,"author":{"gitID":"anh2111"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"anh2111"},"content":"    public boolean equals(Object other) {"},{"lineNumber":39,"author":{"gitID":"anh2111"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":40,"author":{"gitID":"anh2111"},"content":"                || (other instanceof SaveReportCommand // instanceof handles nulls"},{"lineNumber":41,"author":{"gitID":"anh2111"},"content":"                \u0026\u0026 this.population.equals(((SaveReportCommand) other).population)); // state check"},{"lineNumber":42,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"anh2111"},"content":"}"},{"lineNumber":44,"author":{"gitID":"anh2111"},"content":"// @@author"}],"authorContributionMap":{"anh2111":44}},{"path":"src/main/java/seedu/address/logic/commands/ViewReportCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"anh2111"},"content":"// @@author anh2111"},{"lineNumber":2,"author":{"gitID":"anh2111"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":4,"author":{"gitID":"anh2111"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":6,"author":{"gitID":"anh2111"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":7,"author":{"gitID":"anh2111"},"content":"import seedu.address.commons.events.ui.ToggleReportPanelEvent;"},{"lineNumber":8,"author":{"gitID":"anh2111"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":10,"author":{"gitID":"anh2111"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"anh2111"},"content":" * Displays the report to the user."},{"lineNumber":12,"author":{"gitID":"anh2111"},"content":" */"},{"lineNumber":13,"author":{"gitID":"anh2111"},"content":"public class ViewReportCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"anh2111"},"content":"    public static final String COMMAND_WORD \u003d \"viewreport\";"},{"lineNumber":15,"author":{"gitID":"anh2111"},"content":"    public static final String COMMAND_ALIAS \u003d \"vr\";"},{"lineNumber":16,"author":{"gitID":"anh2111"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":17,"author":{"gitID":"anh2111"},"content":"            + \": view the report for candidates tagged with #POPULATION_TAG\\n\""},{"lineNumber":18,"author":{"gitID":"anh2111"},"content":"            + \"Parameters: pop/POPULATION_TAG\\n\""},{"lineNumber":19,"author":{"gitID":"anh2111"},"content":"            + \"Example: \" + COMMAND_WORD + \" pop/SEIntern OR \" + COMMAND_ALIAS + \" pop/SEIntern\";"},{"lineNumber":20,"author":{"gitID":"anh2111"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Displayed report for #\";"},{"lineNumber":21,"author":{"gitID":"anh2111"},"content":"    public final Tag population;"},{"lineNumber":22,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":23,"author":{"gitID":"anh2111"},"content":"    public ViewReportCommand(Tag population) {"},{"lineNumber":24,"author":{"gitID":"anh2111"},"content":"        requireNonNull(population);"},{"lineNumber":25,"author":{"gitID":"anh2111"},"content":"        this.population \u003d population;"},{"lineNumber":26,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":28,"author":{"gitID":"anh2111"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"anh2111"},"content":"    public CommandResult execute() {"},{"lineNumber":30,"author":{"gitID":"anh2111"},"content":"        model.updateReport(population);"},{"lineNumber":31,"author":{"gitID":"anh2111"},"content":"        EventsCenter.getInstance().post(new ToggleReportPanelEvent());"},{"lineNumber":32,"author":{"gitID":"anh2111"},"content":"        return new CommandResult(MESSAGE_SUCCESS + population.tagName);"},{"lineNumber":33,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":35,"author":{"gitID":"anh2111"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"anh2111"},"content":"    public boolean equals(Object other) {"},{"lineNumber":37,"author":{"gitID":"anh2111"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":38,"author":{"gitID":"anh2111"},"content":"                || (other instanceof ViewReportCommand // instanceof handles nulls"},{"lineNumber":39,"author":{"gitID":"anh2111"},"content":"                \u0026\u0026 this.population.equals(((ViewReportCommand) other).population)); // state check"},{"lineNumber":40,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"anh2111"},"content":"}"},{"lineNumber":42,"author":{"gitID":"anh2111"},"content":"// @@author"}],"authorContributionMap":{"anh2111":42}},{"path":"src/main/java/seedu/address/logic/commands/FacebookLoginCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"tiny767"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":3,"author":{"gitID":"tiny767"},"content":"import com.restfb.DefaultFacebookClient;"},{"lineNumber":4,"author":{"gitID":"tiny767"},"content":"import com.restfb.Version;"},{"lineNumber":5,"author":{"gitID":"tiny767"},"content":"import com.restfb.types.User;"},{"lineNumber":6,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":7,"author":{"gitID":"tiny767"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"tiny767"},"content":"import javafx.scene.web.WebEngine;"},{"lineNumber":9,"author":{"gitID":"tiny767"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":10,"author":{"gitID":"tiny767"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":11,"author":{"gitID":"tiny767"},"content":"import seedu.address.commons.events.ui.ToggleFacebookPanelEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":14,"author":{"gitID":"tiny767"},"content":"//@@author tiny767"},{"lineNumber":15,"author":{"gitID":"tiny767"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"tiny767"},"content":" * Connects the address book to a personal Facebook account."},{"lineNumber":17,"author":{"gitID":"tiny767"},"content":" */"},{"lineNumber":18,"author":{"gitID":"tiny767"},"content":"public class FacebookLoginCommand extends Command {"},{"lineNumber":19,"author":{"gitID":"tiny767"},"content":"    public static final String COMMAND_WORD \u003d \"facebooklogin\";"},{"lineNumber":20,"author":{"gitID":"tiny767"},"content":"    public static final String COMMAND_ALIAS \u003d \"fblogin\";"},{"lineNumber":21,"author":{"gitID":"tiny767"},"content":"    public static final String MESSAGE_LOGIN_INIT \u003d \"Initiating authentication. \""},{"lineNumber":22,"author":{"gitID":"tiny767"},"content":"            + \"Please log into your Facebook account.\";"},{"lineNumber":23,"author":{"gitID":"tiny767"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"You are logged in to Facebook\";"},{"lineNumber":24,"author":{"gitID":"tiny767"},"content":"    public static final String MESSAGE_FAILURE \u003d \"Error in Facebook authorisation\";"},{"lineNumber":25,"author":{"gitID":"tiny767"},"content":"    public static final String FACEBOOK_DOMAIN \u003d \"https://www.facebook.com/\";"},{"lineNumber":26,"author":{"gitID":"tiny767"},"content":"    private static final String FACEBOOK_APP_ID \u003d \"199997423936335\";"},{"lineNumber":27,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":28,"author":{"gitID":"tiny767"},"content":"    private static final String FACEBOOK_PERMISSIONS \u003d \"user_about_me,email,publish_actions,user_birthday,\""},{"lineNumber":29,"author":{"gitID":"tiny767"},"content":"            + \"user_education_history,user_friends,user_games_activity,user_hometown,user_likes,\""},{"lineNumber":30,"author":{"gitID":"tiny767"},"content":"            + \"user_location,user_photos,user_posts,user_relationship_details,user_relationships,\""},{"lineNumber":31,"author":{"gitID":"tiny767"},"content":"            + \"user_religion_politics,user_status,user_tagged_places,user_videos,user_website,user_work_history,\""},{"lineNumber":32,"author":{"gitID":"tiny767"},"content":"            + \"ads_management,ads_read,business_management,manage_pages,pages_manage_cta,publish_pages,\""},{"lineNumber":33,"author":{"gitID":"tiny767"},"content":"            + \"user_actions.books,user_actions.fitness,read_custom_friendlists,\""},{"lineNumber":34,"author":{"gitID":"tiny767"},"content":"            + \"pages_messaging_phone_number,pages_messaging_subscriptions,pages_show_list,user_actions.music,\""},{"lineNumber":35,"author":{"gitID":"tiny767"},"content":"            + \"user_actions.news,rsvp_event,user_events,user_managed_groups,\""},{"lineNumber":36,"author":{"gitID":"tiny767"},"content":"            + \"pages_manage_instant_articles,user_actions.video,instagram_basic,instagram_manage_comments,\""},{"lineNumber":37,"author":{"gitID":"tiny767"},"content":"            + \"instagram_manage_insights,read_audience_network_insights,read_insights\";"},{"lineNumber":38,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":39,"author":{"gitID":"tiny767"},"content":"    private static final String FACEBOOK_AUTH_URL \u003d"},{"lineNumber":40,"author":{"gitID":"tiny767"},"content":"            \"https://graph.facebook.com/oauth/authorize?type\u003duser_agent\u0026client_id\u003d\" + FACEBOOK_APP_ID"},{"lineNumber":41,"author":{"gitID":"tiny767"},"content":"                    + \"\u0026redirect_uri\u003d\" + FACEBOOK_DOMAIN + \"\u0026scope\u003d\" + FACEBOOK_PERMISSIONS;"},{"lineNumber":42,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":43,"author":{"gitID":"tiny767"},"content":"    private static WebEngine webEngine;"},{"lineNumber":44,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":45,"author":{"gitID":"tiny767"},"content":"    private static String accessToken;"},{"lineNumber":46,"author":{"gitID":"tiny767"},"content":"    private static String authenticatedUsername;"},{"lineNumber":47,"author":{"gitID":"tiny767"},"content":"    private static String authenticatedUserId;"},{"lineNumber":48,"author":{"gitID":"tiny767"},"content":"    private static boolean isAuthenticated \u003d false;"},{"lineNumber":49,"author":{"gitID":"tiny767"},"content":"    private static String authenticatedUserPage;"},{"lineNumber":50,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":51,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":52,"author":{"gitID":"tiny767"},"content":"    private static DefaultFacebookClient fbClient;"},{"lineNumber":53,"author":{"gitID":"tiny767"},"content":"    private static User user;"},{"lineNumber":54,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":55,"author":{"gitID":"tiny767"},"content":"    public static DefaultFacebookClient getFbClient() {"},{"lineNumber":56,"author":{"gitID":"tiny767"},"content":"        return fbClient;"},{"lineNumber":57,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":59,"author":{"gitID":"tiny767"},"content":"    public static String getAuthenticatedUsername() {"},{"lineNumber":60,"author":{"gitID":"tiny767"},"content":"        return authenticatedUsername;"},{"lineNumber":61,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":63,"author":{"gitID":"tiny767"},"content":"    public static WebEngine getWebEngine() {"},{"lineNumber":64,"author":{"gitID":"tiny767"},"content":"        return webEngine;"},{"lineNumber":65,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":67,"author":{"gitID":"tiny767"},"content":"    public static String getAuthenticatedUserPage() {"},{"lineNumber":68,"author":{"gitID":"tiny767"},"content":"        return authenticatedUserPage;"},{"lineNumber":69,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":71,"author":{"gitID":"tiny767"},"content":"    public static boolean getAuthenticateState() {"},{"lineNumber":72,"author":{"gitID":"tiny767"},"content":"        return isAuthenticated;"},{"lineNumber":73,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":75,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":76,"author":{"gitID":"tiny767"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"tiny767"},"content":"     * Sets a WebEngine"},{"lineNumber":78,"author":{"gitID":"tiny767"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"tiny767"},"content":"    public static void setWebEngine(WebEngine webEngine) {"},{"lineNumber":80,"author":{"gitID":"tiny767"},"content":"        FacebookLoginCommand.webEngine \u003d webEngine;"},{"lineNumber":81,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":83,"author":{"gitID":"tiny767"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"tiny767"},"content":"     * Completes the authentication process by retrieving the token and setting up username and id"},{"lineNumber":85,"author":{"gitID":"tiny767"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"tiny767"},"content":"    public static void completeAuth(String urlWithToken) throws CommandException {"},{"lineNumber":87,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":88,"author":{"gitID":"tiny767"},"content":"        accessToken \u003d urlWithToken.replaceAll(\".*#access_token\u003d(.+)\u0026.*\", \"$1\");"},{"lineNumber":89,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":90,"author":{"gitID":"tiny767"},"content":"        fbClient \u003d new DefaultFacebookClient(accessToken, Version.LATEST);"},{"lineNumber":91,"author":{"gitID":"tiny767"},"content":"        user \u003d fbClient.fetchObject(\"me\", User.class);"},{"lineNumber":92,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":93,"author":{"gitID":"tiny767"},"content":"        try {"},{"lineNumber":94,"author":{"gitID":"tiny767"},"content":"            authenticatedUsername \u003d user.getName();"},{"lineNumber":95,"author":{"gitID":"tiny767"},"content":"            authenticatedUserId \u003d user.getId();"},{"lineNumber":96,"author":{"gitID":"tiny767"},"content":"        } catch (Exception e) {"},{"lineNumber":97,"author":{"gitID":"tiny767"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":98,"author":{"gitID":"tiny767"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":100,"author":{"gitID":"tiny767"},"content":"        if (accessToken !\u003d null) {"},{"lineNumber":101,"author":{"gitID":"tiny767"},"content":"            isAuthenticated \u003d true;"},{"lineNumber":102,"author":{"gitID":"tiny767"},"content":"            authenticatedUserPage \u003d FACEBOOK_DOMAIN + authenticatedUserId;"},{"lineNumber":103,"author":{"gitID":"tiny767"},"content":"            EventsCenter.getInstance().post(new NewResultAvailableEvent("},{"lineNumber":104,"author":{"gitID":"tiny767"},"content":"                    MESSAGE_SUCCESS + \"\\n\" + \"User name: \" + authenticatedUsername));"},{"lineNumber":105,"author":{"gitID":"tiny767"},"content":"        } else {"},{"lineNumber":106,"author":{"gitID":"tiny767"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":107,"author":{"gitID":"tiny767"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":110,"author":{"gitID":"tiny767"},"content":"    @Override"},{"lineNumber":111,"author":{"gitID":"tiny767"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":112,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":113,"author":{"gitID":"tiny767"},"content":"        EventsCenter.getInstance().post(new ToggleFacebookPanelEvent());"},{"lineNumber":114,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":115,"author":{"gitID":"tiny767"},"content":"        try {"},{"lineNumber":116,"author":{"gitID":"tiny767"},"content":"            Platform.runLater(() -\u003e webEngine.load(FACEBOOK_AUTH_URL));"},{"lineNumber":117,"author":{"gitID":"tiny767"},"content":"        } catch (Exception e) {"},{"lineNumber":118,"author":{"gitID":"tiny767"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":119,"author":{"gitID":"tiny767"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":121,"author":{"gitID":"tiny767"},"content":"        return new CommandResult(MESSAGE_LOGIN_INIT);"},{"lineNumber":122,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":124,"author":{"gitID":"tiny767"},"content":"    @Override"},{"lineNumber":125,"author":{"gitID":"tiny767"},"content":"    public boolean equals(Object other) {"},{"lineNumber":126,"author":{"gitID":"tiny767"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":127,"author":{"gitID":"tiny767"},"content":"                || (other instanceof FacebookLoginCommand); // instanceof handles nulls"},{"lineNumber":128,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"tiny767"},"content":"}"}],"authorContributionMap":{"tiny767":128,"-":1}},{"path":"src/main/java/seedu/address/logic/commands/AddInterviewCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"deeheenguyen"},"content":"//@@author deeheenguyen"},{"lineNumber":2,"author":{"gitID":"deeheenguyen"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":4,"author":{"gitID":"deeheenguyen"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INTERVIEW;"},{"lineNumber":7,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":8,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":10,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.Interview;"},{"lineNumber":12,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.exceptions.DuplicateInterviewException;"},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":"/***"},{"lineNumber":15,"author":{"gitID":"deeheenguyen"},"content":" * Adds an Interview to AddressBook"},{"lineNumber":16,"author":{"gitID":"deeheenguyen"},"content":" */"},{"lineNumber":17,"author":{"gitID":"deeheenguyen"},"content":"public class AddInterviewCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":19,"author":{"gitID":"deeheenguyen"},"content":"    public static final String COMMAND_WORD \u003d \"addInterview\";"},{"lineNumber":20,"author":{"gitID":"deeheenguyen"},"content":"    public static final String COMMAND_ALIAS \u003d \"ai\";"},{"lineNumber":21,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":22,"author":{"gitID":"deeheenguyen"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an interview to the address book.\\n\""},{"lineNumber":23,"author":{"gitID":"deeheenguyen"},"content":"            + \"Parameters: \""},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":"            + PREFIX_INTERVIEW + \"INTERVIEW \""},{"lineNumber":25,"author":{"gitID":"deeheenguyen"},"content":"            + PREFIX_NAME + \"INTERVIEWEE \""},{"lineNumber":26,"author":{"gitID":"deeheenguyen"},"content":"            + PREFIX_DATE + \"INTERVIEW_DATE \""},{"lineNumber":27,"author":{"gitID":"deeheenguyen"},"content":"            + PREFIX_LOCATION + \"INTERVIEW_LOCATION \\n\""},{"lineNumber":28,"author":{"gitID":"deeheenguyen"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":29,"author":{"gitID":"deeheenguyen"},"content":"            + PREFIX_INTERVIEW + \"SE INTERVIEW \""},{"lineNumber":30,"author":{"gitID":"deeheenguyen"},"content":"            + PREFIX_NAME + \"DAVID \""},{"lineNumber":31,"author":{"gitID":"deeheenguyen"},"content":"            + PREFIX_DATE + \"04.05.2018 \""},{"lineNumber":32,"author":{"gitID":"deeheenguyen"},"content":"            + PREFIX_LOCATION + \"SUNTEX CITY \";"},{"lineNumber":33,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":34,"author":{"gitID":"deeheenguyen"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New interview added: \";"},{"lineNumber":35,"author":{"gitID":"deeheenguyen"},"content":"    public static final String MESSAGE_DUPLICATE_INTERVIEW \u003d \"This interview already exists in the address book\";"},{"lineNumber":36,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":37,"author":{"gitID":"deeheenguyen"},"content":"    private final Interview toAdd;"},{"lineNumber":38,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":39,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"deeheenguyen"},"content":"     * Creates an AddCommand to add the specified {@code Job}"},{"lineNumber":41,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"deeheenguyen"},"content":"    public AddInterviewCommand(Interview interview) {"},{"lineNumber":43,"author":{"gitID":"deeheenguyen"},"content":"        requireNonNull(interview);"},{"lineNumber":44,"author":{"gitID":"deeheenguyen"},"content":"        toAdd \u003d interview;"},{"lineNumber":45,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":47,"author":{"gitID":"deeheenguyen"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"deeheenguyen"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":49,"author":{"gitID":"deeheenguyen"},"content":"        requireNonNull(model);"},{"lineNumber":50,"author":{"gitID":"deeheenguyen"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"deeheenguyen"},"content":"            model.addInterview(toAdd);"},{"lineNumber":52,"author":{"gitID":"deeheenguyen"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":53,"author":{"gitID":"deeheenguyen"},"content":"        } catch (DuplicateInterviewException e) {"},{"lineNumber":54,"author":{"gitID":"deeheenguyen"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_INTERVIEW);"},{"lineNumber":55,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":57,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":59,"author":{"gitID":"deeheenguyen"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"deeheenguyen"},"content":"    public boolean equals(Object other) {"},{"lineNumber":61,"author":{"gitID":"deeheenguyen"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":62,"author":{"gitID":"deeheenguyen"},"content":"                || (other instanceof AddInterviewCommand // instanceof handles nulls"},{"lineNumber":63,"author":{"gitID":"deeheenguyen"},"content":"                \u0026\u0026 toAdd.equals(((AddInterviewCommand) other).toAdd));"},{"lineNumber":64,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"deeheenguyen"},"content":"}"}],"authorContributionMap":{"deeheenguyen":65}},{"path":"src/main/java/seedu/address/logic/commands/RemarkCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"tiny767"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":3,"author":{"gitID":"tiny767"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"tiny767"},"content":"import static seedu.address.logic.commands.AddCommand.MESSAGE_DUPLICATE_PERSON;"},{"lineNumber":5,"author":{"gitID":"tiny767"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"},{"lineNumber":6,"author":{"gitID":"tiny767"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":7,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":8,"author":{"gitID":"tiny767"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":10,"author":{"gitID":"tiny767"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":11,"author":{"gitID":"tiny767"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"tiny767"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"tiny767"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":16,"author":{"gitID":"tiny767"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":17,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":18,"author":{"gitID":"tiny767"},"content":"//@@author tiny767"},{"lineNumber":19,"author":{"gitID":"tiny767"},"content":"//Solution below adapted from https://github.com/se-edu/addressbook-level4/pull/599"},{"lineNumber":20,"author":{"gitID":"tiny767"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"tiny767"},"content":" * Modifies the remark of a person in the address book"},{"lineNumber":22,"author":{"gitID":"tiny767"},"content":" */"},{"lineNumber":23,"author":{"gitID":"tiny767"},"content":"public class RemarkCommand extends UndoableCommand {"},{"lineNumber":24,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":25,"author":{"gitID":"tiny767"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";"},{"lineNumber":26,"author":{"gitID":"tiny767"},"content":"    public static final String COMMAND_ALIAS \u003d \"rm\";"},{"lineNumber":27,"author":{"gitID":"tiny767"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edit the remark of a person. \""},{"lineNumber":28,"author":{"gitID":"tiny767"},"content":"            + \"Parameters: \""},{"lineNumber":29,"author":{"gitID":"tiny767"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":30,"author":{"gitID":"tiny767"},"content":"            + PREFIX_REMARK + \"[REMARK]\\n\""},{"lineNumber":31,"author":{"gitID":"tiny767"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":32,"author":{"gitID":"tiny767"},"content":"            + PREFIX_REMARK + \"Is a very good coder.\";"},{"lineNumber":33,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":34,"author":{"gitID":"tiny767"},"content":"    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"},{"lineNumber":35,"author":{"gitID":"tiny767"},"content":"    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"},{"lineNumber":36,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":37,"author":{"gitID":"tiny767"},"content":"    private final Index index;"},{"lineNumber":38,"author":{"gitID":"tiny767"},"content":"    private final Remark remark;"},{"lineNumber":39,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":40,"author":{"gitID":"tiny767"},"content":"    private Person personToEdit;"},{"lineNumber":41,"author":{"gitID":"tiny767"},"content":"    private Person editedPerson;"},{"lineNumber":42,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":43,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":44,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":45,"author":{"gitID":"tiny767"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"tiny767"},"content":"     * Creates a remark command to edit the remark of the specified person based on the index"},{"lineNumber":47,"author":{"gitID":"tiny767"},"content":"     * @param index index of the person in the list to modify the remark"},{"lineNumber":48,"author":{"gitID":"tiny767"},"content":"     * @param remark content of the remark to be updated"},{"lineNumber":49,"author":{"gitID":"tiny767"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"tiny767"},"content":"    public RemarkCommand(Index index, Remark remark) {"},{"lineNumber":51,"author":{"gitID":"tiny767"},"content":"        requireNonNull(index);"},{"lineNumber":52,"author":{"gitID":"tiny767"},"content":"        requireNonNull(remark);"},{"lineNumber":53,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":54,"author":{"gitID":"tiny767"},"content":"        this.index \u003d index;"},{"lineNumber":55,"author":{"gitID":"tiny767"},"content":"        this.remark \u003d remark;"},{"lineNumber":56,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":57,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":59,"author":{"gitID":"tiny767"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"tiny767"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":61,"author":{"gitID":"tiny767"},"content":"        requireNonNull(personToEdit);"},{"lineNumber":62,"author":{"gitID":"tiny767"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":63,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":64,"author":{"gitID":"tiny767"},"content":"        try {"},{"lineNumber":65,"author":{"gitID":"tiny767"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":66,"author":{"gitID":"tiny767"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":67,"author":{"gitID":"tiny767"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":68,"author":{"gitID":"tiny767"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":69,"author":{"gitID":"tiny767"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":70,"author":{"gitID":"tiny767"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"tiny767"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":72,"author":{"gitID":"tiny767"},"content":"        return new CommandResult(createSuccessMessage(editedPerson));"},{"lineNumber":73,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":75,"author":{"gitID":"tiny767"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"tiny767"},"content":"     *Generate an execution success message based on whether the remark is adding to or removing from"},{"lineNumber":77,"author":{"gitID":"tiny767"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"tiny767"},"content":"    private String createSuccessMessage(Person editedPerson) {"},{"lineNumber":79,"author":{"gitID":"tiny767"},"content":"        String message \u003d remark.value.isEmpty() ? MESSAGE_DELETE_REMARK_SUCCESS : MESSAGE_ADD_REMARK_SUCCESS;"},{"lineNumber":80,"author":{"gitID":"tiny767"},"content":"        return String.format(message, editedPerson);"},{"lineNumber":81,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":83,"author":{"gitID":"tiny767"},"content":"    @Override"},{"lineNumber":84,"author":{"gitID":"tiny767"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":85,"author":{"gitID":"tiny767"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":86,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":87,"author":{"gitID":"tiny767"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":88,"author":{"gitID":"tiny767"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":89,"author":{"gitID":"tiny767"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":91,"author":{"gitID":"tiny767"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":92,"author":{"gitID":"tiny767"},"content":"        editedPerson \u003d new Person(personToEdit.getName(),"},{"lineNumber":93,"author":{"gitID":"tiny767"},"content":"                personToEdit.getPhone(),"},{"lineNumber":94,"author":{"gitID":"tiny767"},"content":"                personToEdit.getEmail(),"},{"lineNumber":95,"author":{"gitID":"tiny767"},"content":"                personToEdit.getAddress(),"},{"lineNumber":96,"author":{"gitID":"tiny767"},"content":"                this.remark,"},{"lineNumber":97,"author":{"gitID":"tiny767"},"content":"                personToEdit.getLink(),"},{"lineNumber":98,"author":{"gitID":"tiny767"},"content":"                personToEdit.getSkills(),"},{"lineNumber":99,"author":{"gitID":"tiny767"},"content":"                personToEdit.getTags());"},{"lineNumber":100,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":102,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":103,"author":{"gitID":"tiny767"},"content":"    @Override"},{"lineNumber":104,"author":{"gitID":"tiny767"},"content":"    public boolean equals(Object other) {"},{"lineNumber":105,"author":{"gitID":"tiny767"},"content":"        // short circuit if same object"},{"lineNumber":106,"author":{"gitID":"tiny767"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":107,"author":{"gitID":"tiny767"},"content":"            return true;"},{"lineNumber":108,"author":{"gitID":"tiny767"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":110,"author":{"gitID":"tiny767"},"content":"        // instanceof handles nulls"},{"lineNumber":111,"author":{"gitID":"tiny767"},"content":"        if (!(other instanceof RemarkCommand)) {"},{"lineNumber":112,"author":{"gitID":"tiny767"},"content":"            return false;"},{"lineNumber":113,"author":{"gitID":"tiny767"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":115,"author":{"gitID":"tiny767"},"content":"        // state check"},{"lineNumber":116,"author":{"gitID":"tiny767"},"content":"        RemarkCommand e \u003d (RemarkCommand) other;"},{"lineNumber":117,"author":{"gitID":"tiny767"},"content":"        return index.equals(e.index)"},{"lineNumber":118,"author":{"gitID":"tiny767"},"content":"                \u0026\u0026 remark.equals(e.remark);"},{"lineNumber":119,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":121,"author":{"gitID":"tiny767"},"content":"}"}],"authorContributionMap":{"tiny767":119,"-":2}},{"path":"src/main/java/seedu/address/logic/commands/ListInterviewCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"deeheenguyen"},"content":"//@@author deeheenguyen"},{"lineNumber":2,"author":{"gitID":"deeheenguyen"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":4,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_INTERVIEWS;"},{"lineNumber":5,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"deeheenguyen"},"content":" * Lists all jobs in the address book to the user."},{"lineNumber":8,"author":{"gitID":"deeheenguyen"},"content":" */"},{"lineNumber":9,"author":{"gitID":"deeheenguyen"},"content":"public class ListInterviewCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"deeheenguyen"},"content":"    public static final String COMMAND_WORD \u003d \"listInterview\";"},{"lineNumber":11,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":12,"author":{"gitID":"deeheenguyen"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all interviews\";"},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":"    @Override"},{"lineNumber":15,"author":{"gitID":"deeheenguyen"},"content":"    public CommandResult execute() {"},{"lineNumber":16,"author":{"gitID":"deeheenguyen"},"content":"        model.updateFilteredInterviewList(PREDICATE_SHOW_ALL_INTERVIEWS);"},{"lineNumber":17,"author":{"gitID":"deeheenguyen"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":18,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"deeheenguyen"},"content":"}"}],"authorContributionMap":{"deeheenguyen":19}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ToggleBrowserPanelEvent;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Selects a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":19,"author":{"gitID":"deeheenguyen"},"content":"    public static final String COMMAND_ALIAS \u003d \"s\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \": Selects the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new ToggleBrowserPanelEvent());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"deeheenguyen":1,"-":54}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SKILLS;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.RefreshReportPanelEvent;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":27,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.person.Link;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":31,"author":{"gitID":"tiny767"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.skill.Skill;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":38,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":39,"author":{"gitID":"-"},"content":" */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":43,"author":{"gitID":"deeheenguyen"},"content":"    public static final String COMMAND_ALIAS \u003d \"e\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String COMMAND_OPTION_ADD_TAG \u003d \"add-tag\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String COMMAND_OPTION_DELETE_TAG \u003d \"delete-tag\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":51,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":53,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":54,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":55,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_SKILLS + \"SKILLS] \""},{"lineNumber":56,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]... | \""},{"lineNumber":57,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":58,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":59,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\\n\""},{"lineNumber":60,"author":{"gitID":"-"},"content":"            + \"To modify tags (case-sensitive): \\n\""},{"lineNumber":61,"author":{"gitID":"-"},"content":"            + COMMAND_WORD + \" -\" + COMMAND_OPTION_ADD_TAG + \" INDEX t/[\" + PREFIX_TAG + \"TAG] to add one tag \\n\""},{"lineNumber":62,"author":{"gitID":"-"},"content":"            + COMMAND_WORD + \" -\" + COMMAND_OPTION_DELETE_TAG + \" INDEX t/[\" + PREFIX_TAG + \"TAG] to delete one tag\";"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    private Person personToEdit;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    private Person editedPerson;"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            model.refreshReport();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            EventsCenter.getInstance().post(new RefreshReportPanelEvent());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        editedPerson \u003d editPersonDescriptor.createEditedPerson(personToEdit);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":129,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"anh2111"},"content":"    // @@author anh2111"},{"lineNumber":132,"author":{"gitID":"anh2111"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"anh2111"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":134,"author":{"gitID":"anh2111"},"content":"     * corresponding field value of the person."},{"lineNumber":135,"author":{"gitID":"anh2111"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"anh2111"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":137,"author":{"gitID":"anh2111"},"content":"        private Name name;"},{"lineNumber":138,"author":{"gitID":"anh2111"},"content":"        private Phone phone;"},{"lineNumber":139,"author":{"gitID":"anh2111"},"content":"        private Email email;"},{"lineNumber":140,"author":{"gitID":"anh2111"},"content":"        private Address address;"},{"lineNumber":141,"author":{"gitID":"anh2111"},"content":"        private Link link;"},{"lineNumber":142,"author":{"gitID":"anh2111"},"content":"        private Skill skill;"},{"lineNumber":143,"author":{"gitID":"anh2111"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":144,"author":{"gitID":"anh2111"},"content":"        private Set\u003cTag\u003e newTags;"},{"lineNumber":145,"author":{"gitID":"anh2111"},"content":"        private Set\u003cTag\u003e deletedTags;"},{"lineNumber":146,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":147,"author":{"gitID":"anh2111"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":148,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":149,"author":{"gitID":"anh2111"},"content":"        /**"},{"lineNumber":150,"author":{"gitID":"anh2111"},"content":"         * Copy constructor."},{"lineNumber":151,"author":{"gitID":"anh2111"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":152,"author":{"gitID":"anh2111"},"content":"         */"},{"lineNumber":153,"author":{"gitID":"anh2111"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":154,"author":{"gitID":"anh2111"},"content":"            setName(toCopy.name);"},{"lineNumber":155,"author":{"gitID":"anh2111"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":156,"author":{"gitID":"anh2111"},"content":"            setEmail(toCopy.email);"},{"lineNumber":157,"author":{"gitID":"anh2111"},"content":"            setAddress(toCopy.address);"},{"lineNumber":158,"author":{"gitID":"anh2111"},"content":"            setLink(toCopy.link);"},{"lineNumber":159,"author":{"gitID":"anh2111"},"content":"            setSkill(toCopy.skill);"},{"lineNumber":160,"author":{"gitID":"anh2111"},"content":"            setTags(toCopy.tags);"},{"lineNumber":161,"author":{"gitID":"anh2111"},"content":"            setNewTags(toCopy.newTags);"},{"lineNumber":162,"author":{"gitID":"anh2111"},"content":"            setDeletedTags(toCopy.deletedTags);"},{"lineNumber":163,"author":{"gitID":"anh2111"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":165,"author":{"gitID":"anh2111"},"content":"        /**"},{"lineNumber":166,"author":{"gitID":"anh2111"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":167,"author":{"gitID":"anh2111"},"content":"         */"},{"lineNumber":168,"author":{"gitID":"anh2111"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":169,"author":{"gitID":"anh2111"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address, this.skill,"},{"lineNumber":170,"author":{"gitID":"anh2111"},"content":"                    this.tags, this.newTags, this.deletedTags);"},{"lineNumber":171,"author":{"gitID":"anh2111"},"content":"        }"},{"lineNumber":172,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":173,"author":{"gitID":"anh2111"},"content":"        public void setName(Name name) {"},{"lineNumber":174,"author":{"gitID":"anh2111"},"content":"            this.name \u003d name;"},{"lineNumber":175,"author":{"gitID":"anh2111"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":177,"author":{"gitID":"anh2111"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":178,"author":{"gitID":"anh2111"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":179,"author":{"gitID":"anh2111"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":181,"author":{"gitID":"anh2111"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":182,"author":{"gitID":"anh2111"},"content":"            this.phone \u003d phone;"},{"lineNumber":183,"author":{"gitID":"anh2111"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":185,"author":{"gitID":"anh2111"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":186,"author":{"gitID":"anh2111"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":187,"author":{"gitID":"anh2111"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":189,"author":{"gitID":"anh2111"},"content":"        public void setEmail(Email email) {"},{"lineNumber":190,"author":{"gitID":"anh2111"},"content":"            this.email \u003d email;"},{"lineNumber":191,"author":{"gitID":"anh2111"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":193,"author":{"gitID":"anh2111"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":194,"author":{"gitID":"anh2111"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":195,"author":{"gitID":"anh2111"},"content":"        }"},{"lineNumber":196,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":197,"author":{"gitID":"anh2111"},"content":"        public void setAddress(Address address) {"},{"lineNumber":198,"author":{"gitID":"anh2111"},"content":"            this.address \u003d address;"},{"lineNumber":199,"author":{"gitID":"anh2111"},"content":"        }"},{"lineNumber":200,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":201,"author":{"gitID":"anh2111"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":202,"author":{"gitID":"anh2111"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":203,"author":{"gitID":"anh2111"},"content":"        }"},{"lineNumber":204,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":205,"author":{"gitID":"anh2111"},"content":"        public void setSkill(Skill skill) {"},{"lineNumber":206,"author":{"gitID":"anh2111"},"content":"            this.skill \u003d skill;"},{"lineNumber":207,"author":{"gitID":"anh2111"},"content":"        }"},{"lineNumber":208,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":209,"author":{"gitID":"anh2111"},"content":"        public Optional\u003cSkill\u003e getSkill() {"},{"lineNumber":210,"author":{"gitID":"anh2111"},"content":"            return Optional.ofNullable(skill);"},{"lineNumber":211,"author":{"gitID":"anh2111"},"content":"        }"},{"lineNumber":212,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":213,"author":{"gitID":"anh2111"},"content":"        public void setLink(Link link) {"},{"lineNumber":214,"author":{"gitID":"anh2111"},"content":"            this.link \u003d link;"},{"lineNumber":215,"author":{"gitID":"anh2111"},"content":"        }"},{"lineNumber":216,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":217,"author":{"gitID":"anh2111"},"content":"        public Optional\u003cLink\u003e getLink() {"},{"lineNumber":218,"author":{"gitID":"anh2111"},"content":"            return Optional.ofNullable(link);"},{"lineNumber":219,"author":{"gitID":"anh2111"},"content":"        }"},{"lineNumber":220,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":221,"author":{"gitID":"anh2111"},"content":"        /**"},{"lineNumber":222,"author":{"gitID":"anh2111"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":223,"author":{"gitID":"anh2111"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":224,"author":{"gitID":"anh2111"},"content":"         */"},{"lineNumber":225,"author":{"gitID":"anh2111"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":226,"author":{"gitID":"anh2111"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":227,"author":{"gitID":"anh2111"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":229,"author":{"gitID":"anh2111"},"content":"        /**"},{"lineNumber":230,"author":{"gitID":"anh2111"},"content":"         * Add  {@code newTags} to this object\u0027s {@code newTags}."},{"lineNumber":231,"author":{"gitID":"anh2111"},"content":"         * A defensive copy of {@code newTags} is used internally."},{"lineNumber":232,"author":{"gitID":"anh2111"},"content":"         */"},{"lineNumber":233,"author":{"gitID":"anh2111"},"content":"        public void setNewTags(Set\u003cTag\u003e newTags) {"},{"lineNumber":234,"author":{"gitID":"anh2111"},"content":"            this.newTags \u003d (newTags !\u003d null) ? new HashSet\u003c\u003e(newTags) : null;"},{"lineNumber":235,"author":{"gitID":"anh2111"},"content":"        }"},{"lineNumber":236,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":237,"author":{"gitID":"anh2111"},"content":"        /**"},{"lineNumber":238,"author":{"gitID":"anh2111"},"content":"         * Add  {@code newTags} to this object\u0027s {@code tags}."},{"lineNumber":239,"author":{"gitID":"anh2111"},"content":"         * A defensive copy of {@code newTags} is used internally."},{"lineNumber":240,"author":{"gitID":"anh2111"},"content":"         */"},{"lineNumber":241,"author":{"gitID":"anh2111"},"content":"        public void setDeletedTags(Set\u003cTag\u003e deletedTags) {"},{"lineNumber":242,"author":{"gitID":"anh2111"},"content":"            this.deletedTags \u003d (deletedTags !\u003d null) ? new HashSet\u003c\u003e(deletedTags) : null;"},{"lineNumber":243,"author":{"gitID":"anh2111"},"content":"        }"},{"lineNumber":244,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":245,"author":{"gitID":"anh2111"},"content":"        /**"},{"lineNumber":246,"author":{"gitID":"anh2111"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":247,"author":{"gitID":"anh2111"},"content":"         * if modification is attempted."},{"lineNumber":248,"author":{"gitID":"anh2111"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":249,"author":{"gitID":"anh2111"},"content":"         */"},{"lineNumber":250,"author":{"gitID":"anh2111"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":251,"author":{"gitID":"anh2111"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":252,"author":{"gitID":"anh2111"},"content":"        }"},{"lineNumber":253,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":254,"author":{"gitID":"anh2111"},"content":"        /**"},{"lineNumber":255,"author":{"gitID":"anh2111"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":256,"author":{"gitID":"anh2111"},"content":"         * if modification is attempted."},{"lineNumber":257,"author":{"gitID":"anh2111"},"content":"         * Returns {@code Optional#empty()} if {@code newTags} is null."},{"lineNumber":258,"author":{"gitID":"anh2111"},"content":"         */"},{"lineNumber":259,"author":{"gitID":"anh2111"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getNewTags() {"},{"lineNumber":260,"author":{"gitID":"anh2111"},"content":"            return (newTags !\u003d null) ? Optional.of(Collections.unmodifiableSet(newTags)) : Optional.empty();"},{"lineNumber":261,"author":{"gitID":"anh2111"},"content":"        }"},{"lineNumber":262,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":263,"author":{"gitID":"anh2111"},"content":"        /**"},{"lineNumber":264,"author":{"gitID":"anh2111"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":265,"author":{"gitID":"anh2111"},"content":"         * if modification is attempted."},{"lineNumber":266,"author":{"gitID":"anh2111"},"content":"         * Returns {@code Optional#empty()} if {@code deletedTags} is null."},{"lineNumber":267,"author":{"gitID":"anh2111"},"content":"         */"},{"lineNumber":268,"author":{"gitID":"anh2111"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getDeletedTags() {"},{"lineNumber":269,"author":{"gitID":"anh2111"},"content":"            return (deletedTags !\u003d null) ? Optional.of(Collections.unmodifiableSet(deletedTags)) : Optional.empty();"},{"lineNumber":270,"author":{"gitID":"anh2111"},"content":"        }"},{"lineNumber":271,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":272,"author":{"gitID":"anh2111"},"content":"        /**"},{"lineNumber":273,"author":{"gitID":"anh2111"},"content":"         * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":274,"author":{"gitID":"anh2111"},"content":"         * edited with {@code editPersonDescriptor}."},{"lineNumber":275,"author":{"gitID":"anh2111"},"content":"         */"},{"lineNumber":276,"author":{"gitID":"anh2111"},"content":"        public Person createEditedPerson(Person personToEdit) {"},{"lineNumber":277,"author":{"gitID":"anh2111"},"content":"            boolean isTagsChanged \u003d getTags().isPresent();"},{"lineNumber":278,"author":{"gitID":"anh2111"},"content":"            boolean isNewTagsChanged \u003d getNewTags().isPresent();"},{"lineNumber":279,"author":{"gitID":"anh2111"},"content":"            boolean isDeletedTagsChanged \u003d getDeletedTags().isPresent();"},{"lineNumber":280,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":281,"author":{"gitID":"anh2111"},"content":"            boolean isMultipleTagsChanged \u003d (isTagsChanged \u0026\u0026 isNewTagsChanged)"},{"lineNumber":282,"author":{"gitID":"anh2111"},"content":"                    || (isTagsChanged \u0026\u0026 isDeletedTagsChanged) || (isDeletedTagsChanged \u0026\u0026 isNewTagsChanged);"},{"lineNumber":283,"author":{"gitID":"anh2111"},"content":"            assert !isMultipleTagsChanged;"},{"lineNumber":284,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":285,"author":{"gitID":"anh2111"},"content":"            assert personToEdit !\u003d null;"},{"lineNumber":286,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":287,"author":{"gitID":"anh2111"},"content":"            Name updatedName \u003d getName().orElse(personToEdit.getName());"},{"lineNumber":288,"author":{"gitID":"anh2111"},"content":"            Phone updatedPhone \u003d getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":289,"author":{"gitID":"anh2111"},"content":"            Email updatedEmail \u003d getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":290,"author":{"gitID":"anh2111"},"content":"            Skill updatedSkill \u003d getSkill().orElse(personToEdit.getSkills());"},{"lineNumber":291,"author":{"gitID":"anh2111"},"content":"            Remark updatedRemark \u003d personToEdit.getRemark();"},{"lineNumber":292,"author":{"gitID":"anh2111"},"content":"            Link updatedLink \u003d personToEdit.getLink();"},{"lineNumber":293,"author":{"gitID":"anh2111"},"content":"            Address updatedAddress \u003d getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":294,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":295,"author":{"gitID":"anh2111"},"content":"            Set\u003cTag\u003e updatedTags;"},{"lineNumber":296,"author":{"gitID":"anh2111"},"content":"            Set\u003cTag\u003e personTags \u003d new HashSet\u003c\u003e(personToEdit.getTags());"},{"lineNumber":297,"author":{"gitID":"anh2111"},"content":"            if (isTagsChanged) {"},{"lineNumber":298,"author":{"gitID":"anh2111"},"content":"                updatedTags \u003d getTags().orElse(null);"},{"lineNumber":299,"author":{"gitID":"anh2111"},"content":"            } else if (isNewTagsChanged) {"},{"lineNumber":300,"author":{"gitID":"anh2111"},"content":"                if (personTags.isEmpty()) {"},{"lineNumber":301,"author":{"gitID":"anh2111"},"content":"                    updatedTags \u003d getNewTags().orElse(null);"},{"lineNumber":302,"author":{"gitID":"anh2111"},"content":"                } else {"},{"lineNumber":303,"author":{"gitID":"anh2111"},"content":"                    updatedTags \u003d personTags;"},{"lineNumber":304,"author":{"gitID":"anh2111"},"content":"                    updatedTags.addAll(getNewTags().orElse(null));"},{"lineNumber":305,"author":{"gitID":"anh2111"},"content":"                }"},{"lineNumber":306,"author":{"gitID":"anh2111"},"content":"            } else if (isDeletedTagsChanged) {"},{"lineNumber":307,"author":{"gitID":"anh2111"},"content":"                updatedTags \u003d personTags;"},{"lineNumber":308,"author":{"gitID":"anh2111"},"content":"                if (!personTags.isEmpty()) {"},{"lineNumber":309,"author":{"gitID":"anh2111"},"content":"                    updatedTags.removeAll(getDeletedTags().orElse(null));"},{"lineNumber":310,"author":{"gitID":"anh2111"},"content":"                }"},{"lineNumber":311,"author":{"gitID":"anh2111"},"content":"            } else {"},{"lineNumber":312,"author":{"gitID":"anh2111"},"content":"                updatedTags \u003d personTags;"},{"lineNumber":313,"author":{"gitID":"anh2111"},"content":"            }"},{"lineNumber":314,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":315,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":316,"author":{"gitID":"anh2111"},"content":"            return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedRemark,"},{"lineNumber":317,"author":{"gitID":"anh2111"},"content":"                    updatedLink, updatedSkill, updatedTags);"},{"lineNumber":318,"author":{"gitID":"anh2111"},"content":"        }"},{"lineNumber":319,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":320,"author":{"gitID":"anh2111"},"content":"        @Override"},{"lineNumber":321,"author":{"gitID":"anh2111"},"content":"        public boolean equals(Object other) {"},{"lineNumber":322,"author":{"gitID":"anh2111"},"content":"            // short circuit if same object"},{"lineNumber":323,"author":{"gitID":"anh2111"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":324,"author":{"gitID":"anh2111"},"content":"                return true;"},{"lineNumber":325,"author":{"gitID":"anh2111"},"content":"            }"},{"lineNumber":326,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":327,"author":{"gitID":"anh2111"},"content":"            // instanceof handles nulls"},{"lineNumber":328,"author":{"gitID":"anh2111"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":329,"author":{"gitID":"anh2111"},"content":"                return false;"},{"lineNumber":330,"author":{"gitID":"anh2111"},"content":"            }"},{"lineNumber":331,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":332,"author":{"gitID":"anh2111"},"content":"            // state check"},{"lineNumber":333,"author":{"gitID":"anh2111"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":334,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":335,"author":{"gitID":"anh2111"},"content":"            return getName().equals(e.getName())"},{"lineNumber":336,"author":{"gitID":"anh2111"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":337,"author":{"gitID":"anh2111"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":338,"author":{"gitID":"anh2111"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":339,"author":{"gitID":"anh2111"},"content":"                    \u0026\u0026 getLink().equals(e.getLink())"},{"lineNumber":340,"author":{"gitID":"anh2111"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":341,"author":{"gitID":"anh2111"},"content":"        }"},{"lineNumber":342,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":343,"author":{"gitID":"anh2111"},"content":"    // @@author"},{"lineNumber":344,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"deeheenguyen":2,"anh2111":213,"-":128,"tiny767":1}},{"path":"src/main/java/seedu/address/logic/commands/DeleteJobCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.RefreshReportPanelEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.job.exceptions.JobNotFoundException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"ChengSashankh"},"content":"//@@author ChengSashankh"},{"lineNumber":17,"author":{"gitID":"ChengSashankh"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"ChengSashankh"},"content":" * Deletes a job identified using it\u0027s last displayed index from the address book."},{"lineNumber":19,"author":{"gitID":"ChengSashankh"},"content":" */"},{"lineNumber":20,"author":{"gitID":"ChengSashankh"},"content":"public class DeleteJobCommand extends UndoableCommand {"},{"lineNumber":21,"author":{"gitID":"ChengSashankh"},"content":"    public static final String COMMAND_WORD \u003d \"deletejob\";"},{"lineNumber":22,"author":{"gitID":"ChengSashankh"},"content":"    public static final String COMMAND_ALIAS \u003d \"dj\";"},{"lineNumber":23,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":24,"author":{"gitID":"ChengSashankh"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":25,"author":{"gitID":"ChengSashankh"},"content":"            + \": Deletes the job identified by the index number used in the last job listing.\\n\""},{"lineNumber":26,"author":{"gitID":"ChengSashankh"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":27,"author":{"gitID":"ChengSashankh"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":28,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":29,"author":{"gitID":"ChengSashankh"},"content":"    public static final String MESSAGE_DELETE_JOB_SUCCESS \u003d \"Deleted job: %1$s\";"},{"lineNumber":30,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":31,"author":{"gitID":"ChengSashankh"},"content":"    private final Index targetIndex;"},{"lineNumber":32,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":33,"author":{"gitID":"ChengSashankh"},"content":"    private Job jobToDelete;"},{"lineNumber":34,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":35,"author":{"gitID":"ChengSashankh"},"content":"    public DeleteJobCommand(Index targetIndex) {"},{"lineNumber":36,"author":{"gitID":"ChengSashankh"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":37,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":39,"author":{"gitID":"ChengSashankh"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"ChengSashankh"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":41,"author":{"gitID":"ChengSashankh"},"content":"        requireNonNull(jobToDelete);"},{"lineNumber":42,"author":{"gitID":"ChengSashankh"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"ChengSashankh"},"content":"            model.deleteJob(jobToDelete);"},{"lineNumber":44,"author":{"gitID":"ChengSashankh"},"content":"            model.refreshReport();"},{"lineNumber":45,"author":{"gitID":"ChengSashankh"},"content":"            EventsCenter.getInstance().post(new RefreshReportPanelEvent());"},{"lineNumber":46,"author":{"gitID":"ChengSashankh"},"content":"        } catch (JobNotFoundException jnfe) {"},{"lineNumber":47,"author":{"gitID":"ChengSashankh"},"content":"            throw new AssertionError(\"The target job cannot be missing\");"},{"lineNumber":48,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"ChengSashankh"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_JOB_SUCCESS, jobToDelete));"},{"lineNumber":50,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":52,"author":{"gitID":"ChengSashankh"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"ChengSashankh"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":54,"author":{"gitID":"ChengSashankh"},"content":"        List\u003cJob\u003e lastShownList \u003d model.getFilteredJobList();"},{"lineNumber":55,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":56,"author":{"gitID":"ChengSashankh"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":57,"author":{"gitID":"ChengSashankh"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_JOB_DISPLAYED_INDEX);"},{"lineNumber":58,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":60,"author":{"gitID":"ChengSashankh"},"content":"        jobToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":61,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":63,"author":{"gitID":"ChengSashankh"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"ChengSashankh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":65,"author":{"gitID":"ChengSashankh"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":66,"author":{"gitID":"ChengSashankh"},"content":"                || (other instanceof DeleteJobCommand // instanceof handles nulls"},{"lineNumber":67,"author":{"gitID":"ChengSashankh"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteJobCommand) other).targetIndex) // state check"},{"lineNumber":68,"author":{"gitID":"ChengSashankh"},"content":"                \u0026\u0026 Objects.equals(this.jobToDelete, ((DeleteJobCommand) other).jobToDelete));"},{"lineNumber":69,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":71,"author":{"gitID":"ChengSashankh"},"content":"}"},{"lineNumber":72,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":73,"author":{"gitID":"ChengSashankh"},"content":"//@@author"}],"authorContributionMap":{"ChengSashankh":58,"-":15}},{"path":"src/main/java/seedu/address/logic/commands/ListJobsCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_JOBS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"ChengSashankh"},"content":"//@@author ChengSashankh"},{"lineNumber":6,"author":{"gitID":"ChengSashankh"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"ChengSashankh"},"content":" * Lists all jobs in the address book to the user."},{"lineNumber":8,"author":{"gitID":"ChengSashankh"},"content":" */"},{"lineNumber":9,"author":{"gitID":"ChengSashankh"},"content":"public class ListJobsCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"ChengSashankh"},"content":"    public static final String COMMAND_WORD \u003d \"listjobs\";"},{"lineNumber":11,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":12,"author":{"gitID":"ChengSashankh"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all jobs\";"},{"lineNumber":13,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":14,"author":{"gitID":"ChengSashankh"},"content":"    @Override"},{"lineNumber":15,"author":{"gitID":"ChengSashankh"},"content":"    public CommandResult execute() {"},{"lineNumber":16,"author":{"gitID":"ChengSashankh"},"content":"        model.updateFilteredJobList(PREDICATE_SHOW_ALL_JOBS);"},{"lineNumber":17,"author":{"gitID":"ChengSashankh"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":18,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"ChengSashankh"},"content":"}"},{"lineNumber":20,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":21,"author":{"gitID":"ChengSashankh"},"content":"//@@author"}],"authorContributionMap":{"ChengSashankh":17,"-":4}},{"path":"src/main/java/seedu/address/logic/commands/PostJobCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_JOBTITLE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SKILLS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.job.exceptions.DuplicateJobException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"ChengSashankh"},"content":"//@@author ChengSashankh"},{"lineNumber":14,"author":{"gitID":"ChengSashankh"},"content":"/***"},{"lineNumber":15,"author":{"gitID":"ChengSashankh"},"content":" * Posts/adds a job posting to the infinity book."},{"lineNumber":16,"author":{"gitID":"ChengSashankh"},"content":" */"},{"lineNumber":17,"author":{"gitID":"ChengSashankh"},"content":"public class PostJobCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":19,"author":{"gitID":"ChengSashankh"},"content":"    public static final String COMMAND_WORD \u003d \"postjob\";"},{"lineNumber":20,"author":{"gitID":"ChengSashankh"},"content":"    public static final String COMMAND_ALIAS \u003d \"j\";"},{"lineNumber":21,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":22,"author":{"gitID":"ChengSashankh"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a job posting to the address book. \""},{"lineNumber":23,"author":{"gitID":"ChengSashankh"},"content":"            + \"Parameters: \""},{"lineNumber":24,"author":{"gitID":"ChengSashankh"},"content":"            + PREFIX_JOBTITLE + \"JOBTITLE \""},{"lineNumber":25,"author":{"gitID":"ChengSashankh"},"content":"            + PREFIX_LOCATION + \"LOCATION \""},{"lineNumber":26,"author":{"gitID":"ChengSashankh"},"content":"            + PREFIX_SKILLS + \"SKILLS \""},{"lineNumber":27,"author":{"gitID":"ChengSashankh"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":28,"author":{"gitID":"ChengSashankh"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":29,"author":{"gitID":"ChengSashankh"},"content":"            + PREFIX_JOBTITLE + \"Backend Engineer \""},{"lineNumber":30,"author":{"gitID":"ChengSashankh"},"content":"            + PREFIX_LOCATION + \"Singapore \""},{"lineNumber":31,"author":{"gitID":"ChengSashankh"},"content":"            + PREFIX_SKILLS + \"SQL, Javascript \""},{"lineNumber":32,"author":{"gitID":"ChengSashankh"},"content":"            + PREFIX_TAG + \"FreshGrad \";"},{"lineNumber":33,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":34,"author":{"gitID":"ChengSashankh"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New job added: %1$s\";"},{"lineNumber":35,"author":{"gitID":"ChengSashankh"},"content":"    public static final String MESSAGE_DUPLICATE_JOB \u003d \"This job already exists in the address book\";"},{"lineNumber":36,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":37,"author":{"gitID":"ChengSashankh"},"content":"    private final Job toAdd;"},{"lineNumber":38,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":39,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"ChengSashankh"},"content":"     * Creates an PostJobCommand to add the specified {@code Job}"},{"lineNumber":41,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"ChengSashankh"},"content":"    public PostJobCommand(Job job) {"},{"lineNumber":43,"author":{"gitID":"ChengSashankh"},"content":"        requireNonNull(job);"},{"lineNumber":44,"author":{"gitID":"ChengSashankh"},"content":"        toAdd \u003d job;"},{"lineNumber":45,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":47,"author":{"gitID":"ChengSashankh"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"ChengSashankh"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":49,"author":{"gitID":"ChengSashankh"},"content":"        requireNonNull(model);"},{"lineNumber":50,"author":{"gitID":"ChengSashankh"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"ChengSashankh"},"content":"            model.addJob(toAdd);"},{"lineNumber":52,"author":{"gitID":"ChengSashankh"},"content":"            // System.out.println(model.getFilteredJobList().get(0).toString());"},{"lineNumber":53,"author":{"gitID":"ChengSashankh"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":54,"author":{"gitID":"ChengSashankh"},"content":"        } catch (DuplicateJobException e) {"},{"lineNumber":55,"author":{"gitID":"ChengSashankh"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_JOB);"},{"lineNumber":56,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":58,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":60,"author":{"gitID":"ChengSashankh"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"ChengSashankh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":62,"author":{"gitID":"ChengSashankh"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":63,"author":{"gitID":"ChengSashankh"},"content":"                || (other instanceof PostJobCommand // instanceof handles nulls"},{"lineNumber":64,"author":{"gitID":"ChengSashankh"},"content":"                \u0026\u0026 toAdd.equals(((PostJobCommand) other).toAdd));"},{"lineNumber":65,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"ChengSashankh"},"content":"}"},{"lineNumber":67,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":68,"author":{"gitID":"ChengSashankh"},"content":"//@@author ChengSashankh"}],"authorContributionMap":{"ChengSashankh":56,"-":12}},{"path":"src/main/java/seedu/address/logic/commands/FacebookPostCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"tiny767"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":3,"author":{"gitID":"tiny767"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":5,"author":{"gitID":"tiny767"},"content":"import com.restfb.DefaultFacebookClient;"},{"lineNumber":6,"author":{"gitID":"tiny767"},"content":"import com.restfb.Parameter;"},{"lineNumber":7,"author":{"gitID":"tiny767"},"content":"import com.restfb.types.FacebookType;"},{"lineNumber":8,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":9,"author":{"gitID":"tiny767"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"tiny767"},"content":"import javafx.scene.web.WebEngine;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":12,"author":{"gitID":"tiny767"},"content":"import seedu.address.commons.events.ui.ToggleFacebookPanelEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":15,"author":{"gitID":"tiny767"},"content":"//@@author tiny767"},{"lineNumber":16,"author":{"gitID":"tiny767"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"tiny767"},"content":" * Posts a message to a personal Facebook account."},{"lineNumber":18,"author":{"gitID":"tiny767"},"content":" */"},{"lineNumber":19,"author":{"gitID":"tiny767"},"content":"public class FacebookPostCommand extends Command {"},{"lineNumber":20,"author":{"gitID":"tiny767"},"content":"    public static final String COMMAND_WORD \u003d \"facebookpost\";"},{"lineNumber":21,"author":{"gitID":"tiny767"},"content":"    public static final String COMMAND_ALIAS \u003d \"fbpost\";"},{"lineNumber":22,"author":{"gitID":"tiny767"},"content":"    public static final String EXAMPLE_POST \u003d \"Good morning!\";"},{"lineNumber":23,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":24,"author":{"gitID":"tiny767"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":25,"author":{"gitID":"tiny767"},"content":"            + \": make a post to Facebook wall \\n\""},{"lineNumber":26,"author":{"gitID":"tiny767"},"content":"            + \"Alias: \" + COMMAND_ALIAS + \"\\n\""},{"lineNumber":27,"author":{"gitID":"tiny767"},"content":"            + \"Parameters: MESSAGE\\n\""},{"lineNumber":28,"author":{"gitID":"tiny767"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + EXAMPLE_POST;"},{"lineNumber":29,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":30,"author":{"gitID":"tiny767"},"content":"    public static final String MESSAGE_FACEBOOK_POST_SUCCESS \u003d \"Attempted to post to Facebook\";"},{"lineNumber":31,"author":{"gitID":"tiny767"},"content":"    public static final String MESSAGE_FACEBOOK_POST_LOGIN \u003d \"User has not been authenticated\" + \"\\n\""},{"lineNumber":32,"author":{"gitID":"tiny767"},"content":"            + \"Please log in and then try posting again!\";"},{"lineNumber":33,"author":{"gitID":"tiny767"},"content":"    public static final String MESSAGE_FACEBOOK_POST_FAIL \u003d \"There was an error posting to Facebook\";"},{"lineNumber":34,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":35,"author":{"gitID":"tiny767"},"content":"    private static WebEngine webEngine;"},{"lineNumber":36,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":37,"author":{"gitID":"tiny767"},"content":"    private String toPost;"},{"lineNumber":38,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":39,"author":{"gitID":"tiny767"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"tiny767"},"content":"     * Creates an FacebookPostCommand based on the message"},{"lineNumber":41,"author":{"gitID":"tiny767"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"tiny767"},"content":"    public FacebookPostCommand(String message) {"},{"lineNumber":43,"author":{"gitID":"tiny767"},"content":"        requireNonNull(message);"},{"lineNumber":44,"author":{"gitID":"tiny767"},"content":"        toPost \u003d message;"},{"lineNumber":45,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":47,"author":{"gitID":"tiny767"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"tiny767"},"content":"     * Completes the post command"},{"lineNumber":49,"author":{"gitID":"tiny767"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"tiny767"},"content":"    public void completePost() throws CommandException {"},{"lineNumber":51,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":52,"author":{"gitID":"tiny767"},"content":"        DefaultFacebookClient fbClient \u003d FacebookLoginCommand.getFbClient();"},{"lineNumber":53,"author":{"gitID":"tiny767"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"tiny767"},"content":"            fbClient.publish(\"me/feed\", FacebookType.class, Parameter.with(\"message\", toPost));"},{"lineNumber":55,"author":{"gitID":"tiny767"},"content":"        } catch (Exception e) {"},{"lineNumber":56,"author":{"gitID":"tiny767"},"content":"            e.printStackTrace();"},{"lineNumber":57,"author":{"gitID":"tiny767"},"content":"            new CommandException(MESSAGE_FACEBOOK_POST_FAIL);"},{"lineNumber":58,"author":{"gitID":"tiny767"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":60,"author":{"gitID":"tiny767"},"content":"        EventsCenter.getInstance().post(new ToggleFacebookPanelEvent());"},{"lineNumber":61,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":62,"author":{"gitID":"tiny767"},"content":"        webEngine \u003d FacebookLoginCommand.getWebEngine();"},{"lineNumber":63,"author":{"gitID":"tiny767"},"content":"        Platform.runLater(() -\u003e webEngine.load(FacebookLoginCommand.getAuthenticatedUserPage()));"},{"lineNumber":64,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":66,"author":{"gitID":"tiny767"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"tiny767"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":68,"author":{"gitID":"tiny767"},"content":"        if (!FacebookLoginCommand.getAuthenticateState()) {"},{"lineNumber":69,"author":{"gitID":"tiny767"},"content":"            FacebookLoginCommand fbLoginCommand \u003d new FacebookLoginCommand();"},{"lineNumber":70,"author":{"gitID":"tiny767"},"content":"            fbLoginCommand.execute();"},{"lineNumber":71,"author":{"gitID":"tiny767"},"content":"            return new CommandResult(MESSAGE_FACEBOOK_POST_LOGIN);"},{"lineNumber":72,"author":{"gitID":"tiny767"},"content":"        } else {"},{"lineNumber":73,"author":{"gitID":"tiny767"},"content":"            completePost();"},{"lineNumber":74,"author":{"gitID":"tiny767"},"content":"            return new CommandResult(MESSAGE_FACEBOOK_POST_SUCCESS"},{"lineNumber":75,"author":{"gitID":"tiny767"},"content":"                +    \"\\nUsername: \" + FacebookLoginCommand.getAuthenticatedUsername()"},{"lineNumber":76,"author":{"gitID":"tiny767"},"content":"                +    \"\\nmessage: \u0027\" + toPost + \"\u0027\");"},{"lineNumber":77,"author":{"gitID":"tiny767"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":80,"author":{"gitID":"tiny767"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"tiny767"},"content":"    public boolean equals(Object other) {"},{"lineNumber":82,"author":{"gitID":"tiny767"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":83,"author":{"gitID":"tiny767"},"content":"                || (other instanceof FacebookPostCommand // instanceof handles nulls"},{"lineNumber":84,"author":{"gitID":"tiny767"},"content":"                \u0026\u0026 toPost.equals(((FacebookPostCommand) other).toPost));"},{"lineNumber":85,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"tiny767"},"content":"}"}],"authorContributionMap":{"tiny767":84,"-":2}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.Interview;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.report.Report;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        addressBookParser \u003d new AddressBookParser();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public ObservableList\u003cJob\u003e getFilteredJobList() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return model.getFilteredJobList();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"deeheenguyen"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"deeheenguyen"},"content":"    public ObservableList\u003cInterview\u003e getFilteredInterviewList() {"},{"lineNumber":63,"author":{"gitID":"deeheenguyen"},"content":"        return model.getFilteredInterviewList();"},{"lineNumber":64,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":66,"author":{"gitID":"anh2111"},"content":"    // @@author anh2111"},{"lineNumber":67,"author":{"gitID":"anh2111"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"anh2111"},"content":"    public ObservableList\u003cReport\u003e getReportHistory() {"},{"lineNumber":69,"author":{"gitID":"anh2111"},"content":"        return model.getReportHistory();"},{"lineNumber":70,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"anh2111"},"content":"    // @@author"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"anh2111"},"content":"    // @@author anh2111"},{"lineNumber":77,"author":{"gitID":"anh2111"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"anh2111"},"content":"    public Report getReport() {"},{"lineNumber":79,"author":{"gitID":"anh2111"},"content":"        return model.getReport();"},{"lineNumber":80,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"anh2111"},"content":"    // @@author"},{"lineNumber":82,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"deeheenguyen":6,"anh2111":12,"-":64}},{"path":"src/main/java/seedu/address/logic/commands/MatchJobCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.job.PersonMatchesJobPredicate;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"ChengSashankh"},"content":"//@@author ChengSashankh"},{"lineNumber":10,"author":{"gitID":"ChengSashankh"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"ChengSashankh"},"content":" * Finds and lists all persons in address book whose location, skills or tags match the job posting."},{"lineNumber":12,"author":{"gitID":"ChengSashankh"},"content":" * Keyword matching is case sensitive."},{"lineNumber":13,"author":{"gitID":"ChengSashankh"},"content":" */"},{"lineNumber":14,"author":{"gitID":"ChengSashankh"},"content":"public class MatchJobCommand extends Command {"},{"lineNumber":15,"author":{"gitID":"ChengSashankh"},"content":"    public static final String COMMAND_WORD \u003d \"matchjob\";"},{"lineNumber":16,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":17,"author":{"gitID":"ChengSashankh"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Matches all persons whose profiles match job posting \""},{"lineNumber":18,"author":{"gitID":"ChengSashankh"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":19,"author":{"gitID":"ChengSashankh"},"content":"            + \"Parameters: INDEX...\\n\""},{"lineNumber":20,"author":{"gitID":"ChengSashankh"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":21,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":22,"author":{"gitID":"ChengSashankh"},"content":"    private PersonMatchesJobPredicate predicate;"},{"lineNumber":23,"author":{"gitID":"ChengSashankh"},"content":"    private final Index index;"},{"lineNumber":24,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":25,"author":{"gitID":"ChengSashankh"},"content":"    public MatchJobCommand(Index index) {"},{"lineNumber":26,"author":{"gitID":"ChengSashankh"},"content":"        this.index \u003d index;"},{"lineNumber":27,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":29,"author":{"gitID":"ChengSashankh"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"ChengSashankh"},"content":"    public CommandResult execute() {"},{"lineNumber":31,"author":{"gitID":"ChengSashankh"},"content":"        ArrayList\u003cJob\u003e listOfJobs \u003d new ArrayList\u003c\u003e(model.getFilteredJobList());"},{"lineNumber":32,"author":{"gitID":"ChengSashankh"},"content":"        this.predicate \u003d new PersonMatchesJobPredicate(listOfJobs.get(index.getZeroBased()));"},{"lineNumber":33,"author":{"gitID":"ChengSashankh"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":34,"author":{"gitID":"ChengSashankh"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":35,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":37,"author":{"gitID":"ChengSashankh"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"ChengSashankh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":39,"author":{"gitID":"ChengSashankh"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":40,"author":{"gitID":"ChengSashankh"},"content":"                || (other instanceof MatchJobCommand // instanceof handles nulls"},{"lineNumber":41,"author":{"gitID":"ChengSashankh"},"content":"                \u0026\u0026 this.predicate.equals(((MatchJobCommand) other).predicate)); // state check"},{"lineNumber":42,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":44,"author":{"gitID":"ChengSashankh"},"content":"}"},{"lineNumber":45,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":46,"author":{"gitID":"ChengSashankh"},"content":"//@@author ChengSashankh"}],"authorContributionMap":{"ChengSashankh":38,"-":8}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.text.ParseException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Manages storage of AddressBook data in local storage."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class StorageManager extends ComponentManager implements Storage {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private AddressBookStorage addressBookStorage;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException, ParseException {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException,"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            ParseException {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"anh2111"},"content":"    //@@author anh2111"},{"lineNumber":83,"author":{"gitID":"anh2111"},"content":"    @Override"},{"lineNumber":84,"author":{"gitID":"anh2111"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":85,"author":{"gitID":"anh2111"},"content":"        addressBookStorage.backupAddressBook(addressBook);"},{"lineNumber":86,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"anh2111"},"content":"    //@@author"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            saveAddressBook(event.data);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"anh2111":6,"-":94}},{"path":"src/main/java/seedu/address/storage/XmlAddressBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.text.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * A class to access AddressBook data stored as an xml file on the hard disk."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class XmlAddressBookStorage implements AddressBookStorage {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private String filePath;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public XmlAddressBookStorage(String filePath) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException, ParseException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return readAddressBook(filePath);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Similar to {@link #readAddressBook()}"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException,"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            FileNotFoundException, ParseException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        File addressBookFile \u003d new File(filePath);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        if (!addressBookFile.exists()) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            logger.info(\"AddressBook file \"  + addressBookFile + \" not found\");"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook xmlAddressBook \u003d XmlFileStorage.loadDataFromSaveFile(new File(filePath));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            return Optional.of(xmlAddressBook.toModelType());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            logger.info(\"Illegal values found in \" + addressBookFile + \": \" + ive.getMessage());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        } catch (ParseException e) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            e.printStackTrace();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            throw new ParseException(\"Parse exception found\", 0);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"anh2111"},"content":"    // @@author anh2111"},{"lineNumber":68,"author":{"gitID":"anh2111"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"anh2111"},"content":"    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":70,"author":{"gitID":"anh2111"},"content":"        saveAddressBook(addressBook, filePath + \".backup\");"},{"lineNumber":71,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"anh2111"},"content":"    // @@author"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, filePath);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        requireNonNull(addressBook);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        XmlFileStorage.saveDataToFile(file, new XmlSerializableAddressBook(addressBook));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"anh2111":6,"-":86}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedProportion.java","lines":[{"lineNumber":1,"author":{"gitID":"anh2111"},"content":"// @@author anh2111"},{"lineNumber":2,"author":{"gitID":"anh2111"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":4,"author":{"gitID":"anh2111"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":5,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":6,"author":{"gitID":"anh2111"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"anh2111"},"content":"import seedu.address.model.report.Proportion;"},{"lineNumber":8,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":9,"author":{"gitID":"anh2111"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"anh2111"},"content":" * JAXB-friendly adapted version of the Proportion."},{"lineNumber":11,"author":{"gitID":"anh2111"},"content":" */"},{"lineNumber":12,"author":{"gitID":"anh2111"},"content":"public class XmlAdaptedProportion {"},{"lineNumber":13,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":14,"author":{"gitID":"anh2111"},"content":"    @XmlElement"},{"lineNumber":15,"author":{"gitID":"anh2111"},"content":"    private String proportionName;"},{"lineNumber":16,"author":{"gitID":"anh2111"},"content":"    @XmlElement"},{"lineNumber":17,"author":{"gitID":"anh2111"},"content":"    private String value;"},{"lineNumber":18,"author":{"gitID":"anh2111"},"content":"    @XmlElement"},{"lineNumber":19,"author":{"gitID":"anh2111"},"content":"    private String totalPersonsInProportion;"},{"lineNumber":20,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":21,"author":{"gitID":"anh2111"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"anh2111"},"content":"     * Constructs an XmlAdaptedProportion."},{"lineNumber":23,"author":{"gitID":"anh2111"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":24,"author":{"gitID":"anh2111"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"anh2111"},"content":"    public XmlAdaptedProportion() {}"},{"lineNumber":26,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":27,"author":{"gitID":"anh2111"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"anh2111"},"content":"     * Constructs a {@code XmlAdaptedProportion} with the given {@code proportionName}."},{"lineNumber":29,"author":{"gitID":"anh2111"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"anh2111"},"content":"    public XmlAdaptedProportion(String proportionName, int value, int totalPersons) {"},{"lineNumber":31,"author":{"gitID":"anh2111"},"content":"        this.proportionName \u003d proportionName;"},{"lineNumber":32,"author":{"gitID":"anh2111"},"content":"        this.value \u003d Integer.toString(value);"},{"lineNumber":33,"author":{"gitID":"anh2111"},"content":"        this.totalPersonsInProportion \u003d Integer.toString(totalPersons);"},{"lineNumber":34,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":36,"author":{"gitID":"anh2111"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"anh2111"},"content":"     * Converts a given Proportion into this class for JAXB use."},{"lineNumber":38,"author":{"gitID":"anh2111"},"content":"     *"},{"lineNumber":39,"author":{"gitID":"anh2111"},"content":"     * @param source future changes to this will not affect the created"},{"lineNumber":40,"author":{"gitID":"anh2111"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"anh2111"},"content":"    public XmlAdaptedProportion(Proportion source) {"},{"lineNumber":42,"author":{"gitID":"anh2111"},"content":"        proportionName \u003d source.tagName;"},{"lineNumber":43,"author":{"gitID":"anh2111"},"content":"        value \u003d Integer.toString(source.value);"},{"lineNumber":44,"author":{"gitID":"anh2111"},"content":"        totalPersonsInProportion \u003d Integer.toString(source.totalPersons);"},{"lineNumber":45,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":47,"author":{"gitID":"anh2111"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"anh2111"},"content":"     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."},{"lineNumber":49,"author":{"gitID":"anh2111"},"content":"     *"},{"lineNumber":50,"author":{"gitID":"anh2111"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":51,"author":{"gitID":"anh2111"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"anh2111"},"content":"    public Proportion toModelType() throws IllegalValueException {"},{"lineNumber":53,"author":{"gitID":"anh2111"},"content":"        return new Proportion(proportionName, Integer.parseInt(value), Integer.parseInt(totalPersonsInProportion));"},{"lineNumber":54,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":56,"author":{"gitID":"anh2111"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"anh2111"},"content":"    public boolean equals(Object other) {"},{"lineNumber":58,"author":{"gitID":"anh2111"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":59,"author":{"gitID":"anh2111"},"content":"            return true;"},{"lineNumber":60,"author":{"gitID":"anh2111"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":62,"author":{"gitID":"anh2111"},"content":"        if (!(other instanceof XmlAdaptedProportion)) {"},{"lineNumber":63,"author":{"gitID":"anh2111"},"content":"            return false;"},{"lineNumber":64,"author":{"gitID":"anh2111"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"anh2111"},"content":"        return proportionName.equals(((XmlAdaptedProportion) other).proportionName)"},{"lineNumber":66,"author":{"gitID":"anh2111"},"content":"            \u0026\u0026 value.equals(((XmlAdaptedProportion) other).value)"},{"lineNumber":67,"author":{"gitID":"anh2111"},"content":"            \u0026\u0026 totalPersonsInProportion.equals(((XmlAdaptedProportion) other).totalPersonsInProportion);"},{"lineNumber":68,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"anh2111"},"content":"}"},{"lineNumber":70,"author":{"gitID":"anh2111"},"content":"// @@author"}],"authorContributionMap":{"anh2111":70}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedReport.java","lines":[{"lineNumber":1,"author":{"gitID":"anh2111"},"content":"// @@author anh2111"},{"lineNumber":2,"author":{"gitID":"anh2111"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":4,"author":{"gitID":"anh2111"},"content":"import java.text.ParseException;"},{"lineNumber":5,"author":{"gitID":"anh2111"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"anh2111"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"anh2111"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":9,"author":{"gitID":"anh2111"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":11,"author":{"gitID":"anh2111"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"anh2111"},"content":"import seedu.address.model.report.Proportion;"},{"lineNumber":13,"author":{"gitID":"anh2111"},"content":"import seedu.address.model.report.Report;"},{"lineNumber":14,"author":{"gitID":"anh2111"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":16,"author":{"gitID":"anh2111"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"anh2111"},"content":" * JAXB-friendly version of the Report;"},{"lineNumber":18,"author":{"gitID":"anh2111"},"content":" */"},{"lineNumber":19,"author":{"gitID":"anh2111"},"content":"public class XmlAdaptedReport {"},{"lineNumber":20,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":21,"author":{"gitID":"anh2111"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":22,"author":{"gitID":"anh2111"},"content":"    private XmlAdaptedTag population;"},{"lineNumber":23,"author":{"gitID":"anh2111"},"content":"    @XmlElement(required \u003d true, defaultValue \u003d \"null\")"},{"lineNumber":24,"author":{"gitID":"anh2111"},"content":"    private Integer totalTags;"},{"lineNumber":25,"author":{"gitID":"anh2111"},"content":"    @XmlElement(required \u003d true, defaultValue \u003d \"null\")"},{"lineNumber":26,"author":{"gitID":"anh2111"},"content":"    private Integer totalPersons;"},{"lineNumber":27,"author":{"gitID":"anh2111"},"content":"    @XmlElement"},{"lineNumber":28,"author":{"gitID":"anh2111"},"content":"    private List\u003cXmlAdaptedProportion\u003e proportions \u003d new ArrayList\u003c\u003e();"},{"lineNumber":29,"author":{"gitID":"anh2111"},"content":"    @XmlElement"},{"lineNumber":30,"author":{"gitID":"anh2111"},"content":"    private String date;"},{"lineNumber":31,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":32,"author":{"gitID":"anh2111"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"anh2111"},"content":"     * Constructs an XmlAdaptedReport."},{"lineNumber":34,"author":{"gitID":"anh2111"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":35,"author":{"gitID":"anh2111"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"anh2111"},"content":"    public XmlAdaptedReport() {}"},{"lineNumber":37,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":38,"author":{"gitID":"anh2111"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"anh2111"},"content":"     * Constructs an {@code XmlAdaptedReport} with the given Report details."},{"lineNumber":40,"author":{"gitID":"anh2111"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"anh2111"},"content":"    public XmlAdaptedReport(XmlAdaptedTag population, int totalTags, int totalPersons,"},{"lineNumber":42,"author":{"gitID":"anh2111"},"content":"                                List\u003cXmlAdaptedProportion\u003e proportions, String date) {"},{"lineNumber":43,"author":{"gitID":"anh2111"},"content":"        this.population \u003d population;"},{"lineNumber":44,"author":{"gitID":"anh2111"},"content":"        this.totalPersons \u003d totalPersons;"},{"lineNumber":45,"author":{"gitID":"anh2111"},"content":"        this.totalTags \u003d totalTags;"},{"lineNumber":46,"author":{"gitID":"anh2111"},"content":"        this.proportions \u003d proportions;"},{"lineNumber":47,"author":{"gitID":"anh2111"},"content":"        this.date \u003d date;"},{"lineNumber":48,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":50,"author":{"gitID":"anh2111"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"anh2111"},"content":"     * Converts a given Report into this class for JAXB use."},{"lineNumber":52,"author":{"gitID":"anh2111"},"content":"     *"},{"lineNumber":53,"author":{"gitID":"anh2111"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedReport"},{"lineNumber":54,"author":{"gitID":"anh2111"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"anh2111"},"content":"    public XmlAdaptedReport(Report source) {"},{"lineNumber":56,"author":{"gitID":"anh2111"},"content":"        population \u003d new XmlAdaptedTag(source.getPopulation());"},{"lineNumber":57,"author":{"gitID":"anh2111"},"content":"        totalTags \u003d source.getTotalTags();"},{"lineNumber":58,"author":{"gitID":"anh2111"},"content":"        totalPersons \u003d source.getTotalPersons();"},{"lineNumber":59,"author":{"gitID":"anh2111"},"content":"        proportions \u003d new ArrayList\u003c\u003e();"},{"lineNumber":60,"author":{"gitID":"anh2111"},"content":"        for (Proportion p : source.getAllProportions()) {"},{"lineNumber":61,"author":{"gitID":"anh2111"},"content":"            proportions.add(new XmlAdaptedProportion(p));"},{"lineNumber":62,"author":{"gitID":"anh2111"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"anh2111"},"content":"        date \u003d source.getDate();"},{"lineNumber":64,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":66,"author":{"gitID":"anh2111"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"anh2111"},"content":"     * Converts this jaxb-friendly adapted Report object into the model\u0027s Report object."},{"lineNumber":68,"author":{"gitID":"anh2111"},"content":"     *"},{"lineNumber":69,"author":{"gitID":"anh2111"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted Proportion"},{"lineNumber":70,"author":{"gitID":"anh2111"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"anh2111"},"content":"    public Report toModelType() throws IllegalValueException, ParseException {"},{"lineNumber":72,"author":{"gitID":"anh2111"},"content":"        final List\u003cProportion\u003e proportions \u003d new ArrayList\u003c\u003e();"},{"lineNumber":73,"author":{"gitID":"anh2111"},"content":"        for (XmlAdaptedProportion p : this.proportions) {"},{"lineNumber":74,"author":{"gitID":"anh2111"},"content":"            proportions.add(p.toModelType());"},{"lineNumber":75,"author":{"gitID":"anh2111"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":77,"author":{"gitID":"anh2111"},"content":"        final Tag population \u003d this.population.toModelType();"},{"lineNumber":78,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":79,"author":{"gitID":"anh2111"},"content":"        return new Report(population, proportions, totalPersons, date);"},{"lineNumber":80,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":82,"author":{"gitID":"anh2111"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"anh2111"},"content":"    public boolean equals(Object other) {"},{"lineNumber":84,"author":{"gitID":"anh2111"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":85,"author":{"gitID":"anh2111"},"content":"            return true;"},{"lineNumber":86,"author":{"gitID":"anh2111"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":88,"author":{"gitID":"anh2111"},"content":"        if (!(other instanceof XmlAdaptedReport)) {"},{"lineNumber":89,"author":{"gitID":"anh2111"},"content":"            return false;"},{"lineNumber":90,"author":{"gitID":"anh2111"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":92,"author":{"gitID":"anh2111"},"content":"        XmlAdaptedReport otherReport \u003d (XmlAdaptedReport) other;"},{"lineNumber":93,"author":{"gitID":"anh2111"},"content":"        return Objects.equals(population, otherReport.population)"},{"lineNumber":94,"author":{"gitID":"anh2111"},"content":"                \u0026\u0026 proportions.equals(otherReport.proportions)"},{"lineNumber":95,"author":{"gitID":"anh2111"},"content":"                \u0026\u0026 totalPersons \u003d\u003d otherReport.totalPersons"},{"lineNumber":96,"author":{"gitID":"anh2111"},"content":"                \u0026\u0026 totalTags \u003d\u003d otherReport.totalTags;"},{"lineNumber":97,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"anh2111"},"content":"}"},{"lineNumber":99,"author":{"gitID":"anh2111"},"content":"// @@author"}],"authorContributionMap":{"anh2111":99}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.person.Link;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":18,"author":{"gitID":"tiny767"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.skill.Skill;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlAdaptedPerson {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private String address;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":38,"author":{"gitID":"tiny767"},"content":"    private String remark;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":40,"author":{"gitID":"deeheenguyen"},"content":"    private String link;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private String skill;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson() {}"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Constructs an {@code XmlAdaptedPerson} with the given person details."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"deeheenguyen"},"content":"    public XmlAdaptedPerson(String name, String phone, String email, String address,"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                            String link, String skills, List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":61,"author":{"gitID":"deeheenguyen"},"content":"        this.link \u003d link;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        this.skill \u003d skills;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(Person source) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":78,"author":{"gitID":"tiny767"},"content":"        remark \u003d source.getRemark().value;"},{"lineNumber":79,"author":{"gitID":"deeheenguyen"},"content":"        link \u003d source.getLink().value;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        skill \u003d source.getSkills().value;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        if (this.email \u003d\u003d null) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(this.email)) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        if (this.address \u003d\u003d null) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        if (!Address.isValidLocation(this.address)) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":128,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":130,"author":{"gitID":"deeheenguyen"},"content":"        if (this.link \u003d\u003d null) {"},{"lineNumber":131,"author":{"gitID":"deeheenguyen"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Link.class.getSimpleName()));"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":134,"author":{"gitID":"deeheenguyen"},"content":"        if (!Link.isValidLink(this.link)) {"},{"lineNumber":135,"author":{"gitID":"deeheenguyen"},"content":"            throw new IllegalValueException(Link.MESSAGE_LINK_CONSTRAINTS);"},{"lineNumber":136,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        if (this.skill \u003d\u003d null) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Skill.class.getSimpleName()));"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        if (!Skill.isValidSkill(this.skill)) {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Skill.MESSAGE_SKILL_CONSTRAINTS);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        final Skill skill \u003d new Skill(this.skill);"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"tiny767"},"content":"        final Remark remark \u003d new Remark(this.remark);"},{"lineNumber":150,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":152,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":153,"author":{"gitID":"deeheenguyen"},"content":"        final Link link \u003d new Link(this.link);"},{"lineNumber":154,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        return new Person(name, phone, email, address, remark, link, skill, tags);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedPerson)) {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        return Objects.equals(name, otherPerson.name)"},{"lineNumber":170,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"},{"lineNumber":171,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(email, otherPerson.email)"},{"lineNumber":172,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(address, otherPerson.address)"},{"lineNumber":173,"author":{"gitID":"-"},"content":"                \u0026\u0026 tagged.equals(otherPerson.tagged);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"deeheenguyen":17,"-":153,"tiny767":5}},{"path":"src/main/java/seedu/address/storage/XmlSerializableAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.text.ParseException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * An Immutable AddressBook that is serializable to XML format"},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"@XmlRootElement(name \u003d \"addressbook\")"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBook {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedPerson\u003e persons;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedJob\u003e jobs;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":28,"author":{"gitID":"deeheenguyen"},"content":"    private List\u003cXmlAdaptedInterview\u003e interviews;"},{"lineNumber":29,"author":{"gitID":"deeheenguyen"},"content":"    @XmlElement"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedReport\u003e reports;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Creates an empty XmlSerializableAddressBook."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        jobs \u003d new ArrayList\u003c\u003e();"},{"lineNumber":40,"author":{"gitID":"deeheenguyen"},"content":"        interviews \u003d new ArrayList\u003c\u003e();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        reports \u003d new ArrayList\u003c\u003e();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Conversion"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        jobs.addAll(src.getJobList().stream().map(XmlAdaptedJob::new).collect(Collectors.toList()));"},{"lineNumber":52,"author":{"gitID":"deeheenguyen"},"content":"        interviews.addAll(src.getInterviewList().stream().map(XmlAdaptedInterview::new).collect(Collectors.toList()));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        reports.addAll(src.getReportList().stream().map(XmlAdaptedReport::new).collect(Collectors.toList()));"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Converts this addressbook into the model\u0027s {@code AddressBook} object."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * {@code XmlAdaptedPerson} or {@code XmlAdaptedTag} or {@code XmlAdaptedJob}."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException, ParseException {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag t : tags) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            addressBook.addTag(t.toModelType());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        for (XmlAdaptedPerson p : persons) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            addressBook.addPerson(p.toModelType());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        for (XmlAdaptedJob j : jobs) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            addressBook.addJob(j.toModelType());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"deeheenguyen"},"content":"        for (XmlAdaptedInterview i: interviews) {"},{"lineNumber":74,"author":{"gitID":"deeheenguyen"},"content":"            addressBook.addInterview(i.toModelType());"},{"lineNumber":75,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        for (XmlAdaptedReport p : reports) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            addressBook.addReport(p.toModelType());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlSerializableAddressBook)) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook otherAb \u003d (XmlSerializableAddressBook) other;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return persons.equals(otherAb.persons) \u0026\u0026 tags.equals(otherAb.tags) \u0026\u0026 jobs.equals(otherAb.jobs)"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                \u0026\u0026 reports.equals(otherAb.reports);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"deeheenguyen":7,"-":89}},{"path":"src/main/java/seedu/address/logic/commands/EditJobCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_JOBTITLE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SKILLS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_JOBS;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.RefreshReportPanelEvent;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.job.JobTitle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Location;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.job.exceptions.DuplicateJobException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.job.exceptions.JobNotFoundException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.skill.Skill;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"ChengSashankh"},"content":"//@@author ChengSashankh"},{"lineNumber":32,"author":{"gitID":"ChengSashankh"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"ChengSashankh"},"content":" * Edits the details of an existing job in the address book."},{"lineNumber":34,"author":{"gitID":"ChengSashankh"},"content":" */"},{"lineNumber":35,"author":{"gitID":"ChengSashankh"},"content":"public class EditJobCommand extends UndoableCommand {"},{"lineNumber":36,"author":{"gitID":"ChengSashankh"},"content":"    public static final String COMMAND_WORD \u003d \"editjob\";"},{"lineNumber":37,"author":{"gitID":"ChengSashankh"},"content":"    public static final String COMMAND_ALIAS \u003d \"ej\";"},{"lineNumber":38,"author":{"gitID":"ChengSashankh"},"content":"    public static final String COMMAND_OPTION_ADD_TAG \u003d \"add-tag\";"},{"lineNumber":39,"author":{"gitID":"ChengSashankh"},"content":"    public static final String COMMAND_OPTION_DELETE_TAG \u003d \"delete-tag\";"},{"lineNumber":40,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":41,"author":{"gitID":"ChengSashankh"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the job identified \""},{"lineNumber":42,"author":{"gitID":"ChengSashankh"},"content":"            + \"by the index number used in the last job listing. \""},{"lineNumber":43,"author":{"gitID":"ChengSashankh"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":44,"author":{"gitID":"ChengSashankh"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":45,"author":{"gitID":"ChengSashankh"},"content":"            + \"[\" + PREFIX_JOBTITLE + \"JOBTITLE] \""},{"lineNumber":46,"author":{"gitID":"ChengSashankh"},"content":"            + \"[\" + PREFIX_LOCATION + \"LOCATION] \""},{"lineNumber":47,"author":{"gitID":"ChengSashankh"},"content":"            + \"[\" + PREFIX_SKILLS + \"SKILLS] \""},{"lineNumber":48,"author":{"gitID":"ChengSashankh"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]... | \\n\""},{"lineNumber":49,"author":{"gitID":"ChengSashankh"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":50,"author":{"gitID":"ChengSashankh"},"content":"            + PREFIX_JOBTITLE + \"Backend Engineer \""},{"lineNumber":51,"author":{"gitID":"ChengSashankh"},"content":"            + PREFIX_LOCATION + \"Singapore\\n\""},{"lineNumber":52,"author":{"gitID":"ChengSashankh"},"content":"            + \"To modify tags (case-sensitive): \\n\""},{"lineNumber":53,"author":{"gitID":"ChengSashankh"},"content":"            + COMMAND_WORD + \" -\" + COMMAND_OPTION_ADD_TAG + \" INDEX t/[\" + PREFIX_TAG + \"TAG] to add one tag \\n\""},{"lineNumber":54,"author":{"gitID":"ChengSashankh"},"content":"            + COMMAND_WORD + \" -\" + COMMAND_OPTION_DELETE_TAG + \" INDEX t/[\" + PREFIX_TAG + \"TAG] to delete one tag\";"},{"lineNumber":55,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":56,"author":{"gitID":"ChengSashankh"},"content":"    public static final String MESSAGE_EDIT_JOB_SUCCESS \u003d \"Edited Job: %1$s\";"},{"lineNumber":57,"author":{"gitID":"ChengSashankh"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":58,"author":{"gitID":"ChengSashankh"},"content":"    public static final String MESSAGE_DUPLICATE_JOB \u003d \"This job already exists in the address book.\";"},{"lineNumber":59,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":60,"author":{"gitID":"ChengSashankh"},"content":"    private final Index index;"},{"lineNumber":61,"author":{"gitID":"ChengSashankh"},"content":"    private final EditJobDescriptor editJobDescriptor;"},{"lineNumber":62,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":63,"author":{"gitID":"ChengSashankh"},"content":"    private Job jobToEdit;"},{"lineNumber":64,"author":{"gitID":"ChengSashankh"},"content":"    private Job editedJob;"},{"lineNumber":65,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":66,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"ChengSashankh"},"content":"     * @param index of the job in the filtered job list to edit"},{"lineNumber":68,"author":{"gitID":"ChengSashankh"},"content":"     * @param editJobDescriptor details to edit the job with"},{"lineNumber":69,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"ChengSashankh"},"content":"    public EditJobCommand(Index index, EditJobDescriptor editJobDescriptor) {"},{"lineNumber":71,"author":{"gitID":"ChengSashankh"},"content":"        requireNonNull(index);"},{"lineNumber":72,"author":{"gitID":"ChengSashankh"},"content":"        requireNonNull(editJobDescriptor);"},{"lineNumber":73,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":74,"author":{"gitID":"ChengSashankh"},"content":"        this.index \u003d index;"},{"lineNumber":75,"author":{"gitID":"ChengSashankh"},"content":"        this.editJobDescriptor \u003d new EditJobDescriptor(editJobDescriptor);"},{"lineNumber":76,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":78,"author":{"gitID":"ChengSashankh"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"ChengSashankh"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":80,"author":{"gitID":"ChengSashankh"},"content":"        try {"},{"lineNumber":81,"author":{"gitID":"ChengSashankh"},"content":"            model.updateJob(jobToEdit, editedJob);"},{"lineNumber":82,"author":{"gitID":"ChengSashankh"},"content":"            model.refreshReport();"},{"lineNumber":83,"author":{"gitID":"ChengSashankh"},"content":"            EventsCenter.getInstance().post(new RefreshReportPanelEvent());"},{"lineNumber":84,"author":{"gitID":"ChengSashankh"},"content":"        } catch (DuplicateJobException dje) {"},{"lineNumber":85,"author":{"gitID":"ChengSashankh"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_JOB);"},{"lineNumber":86,"author":{"gitID":"ChengSashankh"},"content":"        } catch (JobNotFoundException jnfe) {"},{"lineNumber":87,"author":{"gitID":"ChengSashankh"},"content":"            throw new AssertionError(\"The target job cannot be missing\");"},{"lineNumber":88,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"ChengSashankh"},"content":"        model.updateFilteredJobList(PREDICATE_SHOW_ALL_JOBS);"},{"lineNumber":90,"author":{"gitID":"ChengSashankh"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_JOB_SUCCESS, editedJob));"},{"lineNumber":91,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":93,"author":{"gitID":"ChengSashankh"},"content":"    @Override"},{"lineNumber":94,"author":{"gitID":"ChengSashankh"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":95,"author":{"gitID":"ChengSashankh"},"content":"        List\u003cJob\u003e lastShownList \u003d model.getFilteredJobList();"},{"lineNumber":96,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":97,"author":{"gitID":"ChengSashankh"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":98,"author":{"gitID":"ChengSashankh"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_JOB_DISPLAYED_INDEX);"},{"lineNumber":99,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":101,"author":{"gitID":"ChengSashankh"},"content":"        jobToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":102,"author":{"gitID":"ChengSashankh"},"content":"        editedJob \u003d editJobDescriptor.createEditedJob(jobToEdit);"},{"lineNumber":103,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":105,"author":{"gitID":"ChengSashankh"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"ChengSashankh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":107,"author":{"gitID":"ChengSashankh"},"content":"        // short circuit if same object"},{"lineNumber":108,"author":{"gitID":"ChengSashankh"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":109,"author":{"gitID":"ChengSashankh"},"content":"            return true;"},{"lineNumber":110,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":112,"author":{"gitID":"ChengSashankh"},"content":"        // instanceof handles nulls"},{"lineNumber":113,"author":{"gitID":"ChengSashankh"},"content":"        if (!(other instanceof EditJobCommand)) {"},{"lineNumber":114,"author":{"gitID":"ChengSashankh"},"content":"            return false;"},{"lineNumber":115,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":117,"author":{"gitID":"ChengSashankh"},"content":"        // state check"},{"lineNumber":118,"author":{"gitID":"ChengSashankh"},"content":"        EditJobCommand e \u003d (EditJobCommand) other;"},{"lineNumber":119,"author":{"gitID":"ChengSashankh"},"content":"        return index.equals(e.index)"},{"lineNumber":120,"author":{"gitID":"ChengSashankh"},"content":"                \u0026\u0026 editJobDescriptor.equals(e.editJobDescriptor)"},{"lineNumber":121,"author":{"gitID":"ChengSashankh"},"content":"                \u0026\u0026 Objects.equals(jobToEdit, e.jobToEdit);"},{"lineNumber":122,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":124,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"ChengSashankh"},"content":"     * Stores the details to edit the job with. Each non-empty field value will replace the"},{"lineNumber":126,"author":{"gitID":"ChengSashankh"},"content":"     * corresponding field value of the job."},{"lineNumber":127,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"ChengSashankh"},"content":"    public static class EditJobDescriptor {"},{"lineNumber":129,"author":{"gitID":"ChengSashankh"},"content":"        private JobTitle jobTitle;"},{"lineNumber":130,"author":{"gitID":"ChengSashankh"},"content":"        private Location location;"},{"lineNumber":131,"author":{"gitID":"ChengSashankh"},"content":"        private Skill skill;"},{"lineNumber":132,"author":{"gitID":"ChengSashankh"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":133,"author":{"gitID":"ChengSashankh"},"content":"        private Set\u003cTag\u003e newTags;"},{"lineNumber":134,"author":{"gitID":"ChengSashankh"},"content":"        private Set\u003cTag\u003e deletedTags;"},{"lineNumber":135,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":136,"author":{"gitID":"ChengSashankh"},"content":"        public EditJobDescriptor() {}"},{"lineNumber":137,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":138,"author":{"gitID":"ChengSashankh"},"content":"        /**"},{"lineNumber":139,"author":{"gitID":"ChengSashankh"},"content":"         * Copy constructor."},{"lineNumber":140,"author":{"gitID":"ChengSashankh"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":141,"author":{"gitID":"ChengSashankh"},"content":"         */"},{"lineNumber":142,"author":{"gitID":"ChengSashankh"},"content":"        public EditJobDescriptor(EditJobDescriptor toCopy) {"},{"lineNumber":143,"author":{"gitID":"ChengSashankh"},"content":"            setJobTitle(toCopy.jobTitle);"},{"lineNumber":144,"author":{"gitID":"ChengSashankh"},"content":"            setLocation(toCopy.location);"},{"lineNumber":145,"author":{"gitID":"ChengSashankh"},"content":"            setSkill(toCopy.skill);"},{"lineNumber":146,"author":{"gitID":"ChengSashankh"},"content":"            setTags(toCopy.tags);"},{"lineNumber":147,"author":{"gitID":"ChengSashankh"},"content":"            setNewTags(toCopy.newTags);"},{"lineNumber":148,"author":{"gitID":"ChengSashankh"},"content":"            setDeletedTags(toCopy.deletedTags);"},{"lineNumber":149,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":151,"author":{"gitID":"ChengSashankh"},"content":"        /**"},{"lineNumber":152,"author":{"gitID":"ChengSashankh"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":153,"author":{"gitID":"ChengSashankh"},"content":"         */"},{"lineNumber":154,"author":{"gitID":"ChengSashankh"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":155,"author":{"gitID":"ChengSashankh"},"content":"            return CollectionUtil.isAnyNonNull(this.jobTitle, this.location, this.skill,"},{"lineNumber":156,"author":{"gitID":"ChengSashankh"},"content":"                    this.tags, this.newTags, this.deletedTags);"},{"lineNumber":157,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":159,"author":{"gitID":"ChengSashankh"},"content":"        public void setJobTitle(JobTitle jobTitle) {"},{"lineNumber":160,"author":{"gitID":"ChengSashankh"},"content":"            this.jobTitle \u003d jobTitle;"},{"lineNumber":161,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":163,"author":{"gitID":"ChengSashankh"},"content":"        public Optional\u003cJobTitle\u003e getJobTitle() {"},{"lineNumber":164,"author":{"gitID":"ChengSashankh"},"content":"            return Optional.ofNullable(jobTitle);"},{"lineNumber":165,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":166,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":167,"author":{"gitID":"ChengSashankh"},"content":"        public void setLocation(Location location) {"},{"lineNumber":168,"author":{"gitID":"ChengSashankh"},"content":"            this.location \u003d location;"},{"lineNumber":169,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":171,"author":{"gitID":"ChengSashankh"},"content":"        public Optional\u003cLocation\u003e getLocation() {"},{"lineNumber":172,"author":{"gitID":"ChengSashankh"},"content":"            return Optional.ofNullable(location);"},{"lineNumber":173,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":175,"author":{"gitID":"ChengSashankh"},"content":"        public void setSkill(Skill skill) {"},{"lineNumber":176,"author":{"gitID":"ChengSashankh"},"content":"            this.skill \u003d skill;"},{"lineNumber":177,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":179,"author":{"gitID":"ChengSashankh"},"content":"        public Optional\u003cSkill\u003e getSkill() {"},{"lineNumber":180,"author":{"gitID":"ChengSashankh"},"content":"            return Optional.ofNullable(skill);"},{"lineNumber":181,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":183,"author":{"gitID":"ChengSashankh"},"content":"        /**"},{"lineNumber":184,"author":{"gitID":"ChengSashankh"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":185,"author":{"gitID":"ChengSashankh"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":186,"author":{"gitID":"ChengSashankh"},"content":"         */"},{"lineNumber":187,"author":{"gitID":"ChengSashankh"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":188,"author":{"gitID":"ChengSashankh"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":189,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":190,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":191,"author":{"gitID":"ChengSashankh"},"content":"        /**"},{"lineNumber":192,"author":{"gitID":"ChengSashankh"},"content":"         * Add  {@code newTags} to this object\u0027s {@code newTags}."},{"lineNumber":193,"author":{"gitID":"ChengSashankh"},"content":"         * A defensive copy of {@code newTags} is used internally."},{"lineNumber":194,"author":{"gitID":"ChengSashankh"},"content":"         */"},{"lineNumber":195,"author":{"gitID":"ChengSashankh"},"content":"        public void setNewTags(Set\u003cTag\u003e newTags) {"},{"lineNumber":196,"author":{"gitID":"ChengSashankh"},"content":"            this.newTags \u003d (newTags !\u003d null) ? new HashSet\u003c\u003e(newTags) : null;"},{"lineNumber":197,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":198,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":199,"author":{"gitID":"ChengSashankh"},"content":"        /**"},{"lineNumber":200,"author":{"gitID":"ChengSashankh"},"content":"         * Add  {@code newTags} to this object\u0027s {@code tags}."},{"lineNumber":201,"author":{"gitID":"ChengSashankh"},"content":"         * A defensive copy of {@code newTags} is used internally."},{"lineNumber":202,"author":{"gitID":"ChengSashankh"},"content":"         */"},{"lineNumber":203,"author":{"gitID":"ChengSashankh"},"content":"        public void setDeletedTags(Set\u003cTag\u003e deletedTags) {"},{"lineNumber":204,"author":{"gitID":"ChengSashankh"},"content":"            this.deletedTags \u003d (deletedTags !\u003d null) ? new HashSet\u003c\u003e(deletedTags) : null;"},{"lineNumber":205,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":206,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":207,"author":{"gitID":"ChengSashankh"},"content":"        /**"},{"lineNumber":208,"author":{"gitID":"ChengSashankh"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":209,"author":{"gitID":"ChengSashankh"},"content":"         * if modification is attempted."},{"lineNumber":210,"author":{"gitID":"ChengSashankh"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":211,"author":{"gitID":"ChengSashankh"},"content":"         */"},{"lineNumber":212,"author":{"gitID":"ChengSashankh"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":213,"author":{"gitID":"ChengSashankh"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":214,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":215,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":216,"author":{"gitID":"ChengSashankh"},"content":"        /**"},{"lineNumber":217,"author":{"gitID":"ChengSashankh"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":218,"author":{"gitID":"ChengSashankh"},"content":"         * if modification is attempted."},{"lineNumber":219,"author":{"gitID":"ChengSashankh"},"content":"         * Returns {@code Optional#empty()} if {@code newTags} is null."},{"lineNumber":220,"author":{"gitID":"ChengSashankh"},"content":"         */"},{"lineNumber":221,"author":{"gitID":"ChengSashankh"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getNewTags() {"},{"lineNumber":222,"author":{"gitID":"ChengSashankh"},"content":"            return (newTags !\u003d null) ? Optional.of(Collections.unmodifiableSet(newTags)) : Optional.empty();"},{"lineNumber":223,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":224,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":225,"author":{"gitID":"ChengSashankh"},"content":"        /**"},{"lineNumber":226,"author":{"gitID":"ChengSashankh"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":227,"author":{"gitID":"ChengSashankh"},"content":"         * if modification is attempted."},{"lineNumber":228,"author":{"gitID":"ChengSashankh"},"content":"         * Returns {@code Optional#empty()} if {@code deletedTags} is null."},{"lineNumber":229,"author":{"gitID":"ChengSashankh"},"content":"         */"},{"lineNumber":230,"author":{"gitID":"ChengSashankh"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getDeletedTags() {"},{"lineNumber":231,"author":{"gitID":"ChengSashankh"},"content":"            return (deletedTags !\u003d null) ? Optional.of(Collections.unmodifiableSet(deletedTags)) : Optional.empty();"},{"lineNumber":232,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":233,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":234,"author":{"gitID":"ChengSashankh"},"content":"        /**"},{"lineNumber":235,"author":{"gitID":"ChengSashankh"},"content":"         * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":236,"author":{"gitID":"ChengSashankh"},"content":"         * edited with {@code editPersonDescriptor}."},{"lineNumber":237,"author":{"gitID":"ChengSashankh"},"content":"         */"},{"lineNumber":238,"author":{"gitID":"ChengSashankh"},"content":"        public Job createEditedJob(Job jobToEdit) {"},{"lineNumber":239,"author":{"gitID":"ChengSashankh"},"content":"            boolean isTagsChanged \u003d getTags().isPresent();"},{"lineNumber":240,"author":{"gitID":"ChengSashankh"},"content":"            boolean isNewTagsChanged \u003d getNewTags().isPresent();"},{"lineNumber":241,"author":{"gitID":"ChengSashankh"},"content":"            boolean isDeletedTagsChanged \u003d getDeletedTags().isPresent();"},{"lineNumber":242,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":243,"author":{"gitID":"ChengSashankh"},"content":"            boolean isMultipleTagsChanged \u003d (isTagsChanged \u0026\u0026 isNewTagsChanged)"},{"lineNumber":244,"author":{"gitID":"ChengSashankh"},"content":"                    || (isTagsChanged \u0026\u0026 isDeletedTagsChanged) || (isDeletedTagsChanged \u0026\u0026 isNewTagsChanged);"},{"lineNumber":245,"author":{"gitID":"ChengSashankh"},"content":"            assert !isMultipleTagsChanged;"},{"lineNumber":246,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":247,"author":{"gitID":"ChengSashankh"},"content":"            assert jobToEdit !\u003d null;"},{"lineNumber":248,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":249,"author":{"gitID":"ChengSashankh"},"content":"            JobTitle updatedJobTitle \u003d getJobTitle().orElse(jobToEdit.getJobTitle());"},{"lineNumber":250,"author":{"gitID":"ChengSashankh"},"content":"            Location updatedLocation \u003d getLocation().orElse(jobToEdit.getLocation());"},{"lineNumber":251,"author":{"gitID":"ChengSashankh"},"content":"            Skill updatedSkill \u003d getSkill().orElse(jobToEdit.getSkills());"},{"lineNumber":252,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":253,"author":{"gitID":"ChengSashankh"},"content":"            //Adapted from EditCommand - writted by @anh2111"},{"lineNumber":254,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":255,"author":{"gitID":"ChengSashankh"},"content":"            Set\u003cTag\u003e updatedTags;"},{"lineNumber":256,"author":{"gitID":"ChengSashankh"},"content":"            Set\u003cTag\u003e jobTags \u003d new HashSet\u003c\u003e(jobToEdit.getTags());"},{"lineNumber":257,"author":{"gitID":"ChengSashankh"},"content":"            if (isTagsChanged) {"},{"lineNumber":258,"author":{"gitID":"ChengSashankh"},"content":"                updatedTags \u003d getTags().orElse(null);"},{"lineNumber":259,"author":{"gitID":"ChengSashankh"},"content":"            } else if (isNewTagsChanged) {"},{"lineNumber":260,"author":{"gitID":"ChengSashankh"},"content":"                if (jobTags.isEmpty()) {"},{"lineNumber":261,"author":{"gitID":"ChengSashankh"},"content":"                    updatedTags \u003d getNewTags().orElse(null);"},{"lineNumber":262,"author":{"gitID":"ChengSashankh"},"content":"                } else {"},{"lineNumber":263,"author":{"gitID":"ChengSashankh"},"content":"                    updatedTags \u003d jobTags;"},{"lineNumber":264,"author":{"gitID":"ChengSashankh"},"content":"                    updatedTags.addAll(getNewTags().orElse(null));"},{"lineNumber":265,"author":{"gitID":"ChengSashankh"},"content":"                }"},{"lineNumber":266,"author":{"gitID":"ChengSashankh"},"content":"            } else if (isDeletedTagsChanged) {"},{"lineNumber":267,"author":{"gitID":"ChengSashankh"},"content":"                updatedTags \u003d jobTags;"},{"lineNumber":268,"author":{"gitID":"ChengSashankh"},"content":"                if (!jobTags.isEmpty()) {"},{"lineNumber":269,"author":{"gitID":"ChengSashankh"},"content":"                    updatedTags.removeAll(getDeletedTags().orElse(null));"},{"lineNumber":270,"author":{"gitID":"ChengSashankh"},"content":"                }"},{"lineNumber":271,"author":{"gitID":"ChengSashankh"},"content":"            } else {"},{"lineNumber":272,"author":{"gitID":"ChengSashankh"},"content":"                updatedTags \u003d jobTags;"},{"lineNumber":273,"author":{"gitID":"ChengSashankh"},"content":"            }"},{"lineNumber":274,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":275,"author":{"gitID":"ChengSashankh"},"content":"            return new Job(updatedJobTitle, updatedLocation, updatedSkill, updatedTags);"},{"lineNumber":276,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":277,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":278,"author":{"gitID":"ChengSashankh"},"content":"        @Override"},{"lineNumber":279,"author":{"gitID":"ChengSashankh"},"content":"        public boolean equals(Object other) {"},{"lineNumber":280,"author":{"gitID":"ChengSashankh"},"content":"            // short circuit if same object"},{"lineNumber":281,"author":{"gitID":"ChengSashankh"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":282,"author":{"gitID":"ChengSashankh"},"content":"                return true;"},{"lineNumber":283,"author":{"gitID":"ChengSashankh"},"content":"            }"},{"lineNumber":284,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":285,"author":{"gitID":"ChengSashankh"},"content":"            // instanceof handles nulls"},{"lineNumber":286,"author":{"gitID":"ChengSashankh"},"content":"            if (!(other instanceof EditJobDescriptor)) {"},{"lineNumber":287,"author":{"gitID":"ChengSashankh"},"content":"                return false;"},{"lineNumber":288,"author":{"gitID":"ChengSashankh"},"content":"            }"},{"lineNumber":289,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":290,"author":{"gitID":"ChengSashankh"},"content":"            // state check"},{"lineNumber":291,"author":{"gitID":"ChengSashankh"},"content":"            EditJobDescriptor e \u003d (EditJobDescriptor) other;"},{"lineNumber":292,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":293,"author":{"gitID":"ChengSashankh"},"content":"            return getJobTitle().equals(e.getJobTitle())"},{"lineNumber":294,"author":{"gitID":"ChengSashankh"},"content":"                    \u0026\u0026 getLocation().equals(e.getLocation())"},{"lineNumber":295,"author":{"gitID":"ChengSashankh"},"content":"                    \u0026\u0026 getSkill().equals(e.getSkill())"},{"lineNumber":296,"author":{"gitID":"ChengSashankh"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":297,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":298,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":299,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":300,"author":{"gitID":"ChengSashankh"},"content":"}"},{"lineNumber":301,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":302,"author":{"gitID":"ChengSashankh"},"content":"//@@author"}],"authorContributionMap":{"ChengSashankh":272,"-":30}},{"path":"src/main/java/seedu/address/model/skill/Skill.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.skill;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"ChengSashankh"},"content":"//@@author ChengSashankh"},{"lineNumber":10,"author":{"gitID":"ChengSashankh"},"content":"/***"},{"lineNumber":11,"author":{"gitID":"ChengSashankh"},"content":" * Represents a Job\u0027s and Person\u0027s required Skills in the Infinity Book."},{"lineNumber":12,"author":{"gitID":"ChengSashankh"},"content":" * Guarantees: is valid as declared in {@link #isValidSkill(String)}"},{"lineNumber":13,"author":{"gitID":"ChengSashankh"},"content":" */"},{"lineNumber":14,"author":{"gitID":"ChengSashankh"},"content":"public class Skill {"},{"lineNumber":15,"author":{"gitID":"ChengSashankh"},"content":"    public static final String SKILL_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":16,"author":{"gitID":"ChengSashankh"},"content":"    public static final String MESSAGE_SKILL_CONSTRAINTS \u003d \"Skills can take any values, and should not be blank\";"},{"lineNumber":17,"author":{"gitID":"ChengSashankh"},"content":"    public final String value;"},{"lineNumber":18,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":19,"author":{"gitID":"ChengSashankh"},"content":"    private Set\u003cString\u003e skillSet;"},{"lineNumber":20,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":21,"author":{"gitID":"ChengSashankh"},"content":"    public Skill(String skills) {"},{"lineNumber":22,"author":{"gitID":"ChengSashankh"},"content":"        requireNonNull(skills);"},{"lineNumber":23,"author":{"gitID":"ChengSashankh"},"content":"        checkArgument(isValidSkill(skills), MESSAGE_SKILL_CONSTRAINTS);"},{"lineNumber":24,"author":{"gitID":"ChengSashankh"},"content":"        this.value \u003d skills;"},{"lineNumber":25,"author":{"gitID":"ChengSashankh"},"content":"        String[] skillsArray \u003d skills.split(\",\");"},{"lineNumber":26,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":27,"author":{"gitID":"ChengSashankh"},"content":"        skillSet \u003d new HashSet\u003cString\u003e();"},{"lineNumber":28,"author":{"gitID":"ChengSashankh"},"content":"        for (String entry : skillsArray) {"},{"lineNumber":29,"author":{"gitID":"ChengSashankh"},"content":"            skillSet.add(entry.trim());"},{"lineNumber":30,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":33,"author":{"gitID":"ChengSashankh"},"content":"    public Set\u003cString\u003e getSkillSet() {"},{"lineNumber":34,"author":{"gitID":"ChengSashankh"},"content":"        return skillSet;"},{"lineNumber":35,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":37,"author":{"gitID":"ChengSashankh"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"ChengSashankh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":39,"author":{"gitID":"ChengSashankh"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":40,"author":{"gitID":"ChengSashankh"},"content":"                || (other instanceof Skill // instanceof handles nulls"},{"lineNumber":41,"author":{"gitID":"ChengSashankh"},"content":"                \u0026\u0026 this.value.compareTo(((Skill) other).value) \u003d\u003d 0); // state check"},{"lineNumber":42,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":44,"author":{"gitID":"ChengSashankh"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitID":"ChengSashankh"},"content":"        return value;"},{"lineNumber":46,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":48,"author":{"gitID":"ChengSashankh"},"content":"    /***"},{"lineNumber":49,"author":{"gitID":"ChengSashankh"},"content":"     * Checks if a given string is a valid Skill."},{"lineNumber":50,"author":{"gitID":"ChengSashankh"},"content":"     * @param test is the String to be tested for validity"},{"lineNumber":51,"author":{"gitID":"ChengSashankh"},"content":"     * @return true if it is a valid skill."},{"lineNumber":52,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"ChengSashankh"},"content":"    public static boolean isValidSkill(String test) {"},{"lineNumber":54,"author":{"gitID":"ChengSashankh"},"content":"        return test.matches(SKILL_VALIDATION_REGEX);"},{"lineNumber":55,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":57,"author":{"gitID":"ChengSashankh"},"content":"}"},{"lineNumber":58,"author":{"gitID":"ChengSashankh"},"content":"//@@author"}],"authorContributionMap":{"ChengSashankh":50,"-":8}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedJob.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.job.JobTitle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Location;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.skill.Skill;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"ChengSashankh"},"content":"//@@author ChengSashankh"},{"lineNumber":19,"author":{"gitID":"ChengSashankh"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"ChengSashankh"},"content":" * JAXB-friendly version of the Job."},{"lineNumber":21,"author":{"gitID":"ChengSashankh"},"content":" */"},{"lineNumber":22,"author":{"gitID":"ChengSashankh"},"content":"public class XmlAdaptedJob {"},{"lineNumber":23,"author":{"gitID":"ChengSashankh"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Job\u0027s %s field is missing!\";"},{"lineNumber":24,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":25,"author":{"gitID":"ChengSashankh"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":26,"author":{"gitID":"ChengSashankh"},"content":"    private String jobTitle;"},{"lineNumber":27,"author":{"gitID":"ChengSashankh"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":28,"author":{"gitID":"ChengSashankh"},"content":"    private String location;"},{"lineNumber":29,"author":{"gitID":"ChengSashankh"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":30,"author":{"gitID":"ChengSashankh"},"content":"    private String skills;"},{"lineNumber":31,"author":{"gitID":"ChengSashankh"},"content":"    @XmlElement"},{"lineNumber":32,"author":{"gitID":"ChengSashankh"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":33,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":34,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"ChengSashankh"},"content":"     * Constructs an XmlAdaptedJob."},{"lineNumber":36,"author":{"gitID":"ChengSashankh"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":37,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"ChengSashankh"},"content":"    public XmlAdaptedJob() {}"},{"lineNumber":39,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":40,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"ChengSashankh"},"content":"     * Constructs an {@code XmlAdaptedJob} with the given job details."},{"lineNumber":42,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"ChengSashankh"},"content":"    public XmlAdaptedJob(String jobTitle, String location, String skills, List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":44,"author":{"gitID":"ChengSashankh"},"content":"        this.jobTitle \u003d jobTitle;"},{"lineNumber":45,"author":{"gitID":"ChengSashankh"},"content":"        this.location \u003d location;"},{"lineNumber":46,"author":{"gitID":"ChengSashankh"},"content":"        this.skills \u003d skills;"},{"lineNumber":47,"author":{"gitID":"ChengSashankh"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":48,"author":{"gitID":"ChengSashankh"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":49,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":52,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"ChengSashankh"},"content":"     * Converts a given Job into this class for JAXB use."},{"lineNumber":54,"author":{"gitID":"ChengSashankh"},"content":"     *"},{"lineNumber":55,"author":{"gitID":"ChengSashankh"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":56,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"ChengSashankh"},"content":"    public XmlAdaptedJob(Job source) {"},{"lineNumber":58,"author":{"gitID":"ChengSashankh"},"content":"        jobTitle \u003d source.getJobTitle().fullTitle;"},{"lineNumber":59,"author":{"gitID":"ChengSashankh"},"content":"        location \u003d source.getLocation().value;"},{"lineNumber":60,"author":{"gitID":"ChengSashankh"},"content":"        skills \u003d source.getSkills().value;"},{"lineNumber":61,"author":{"gitID":"ChengSashankh"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":62,"author":{"gitID":"ChengSashankh"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":63,"author":{"gitID":"ChengSashankh"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":64,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":67,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"ChengSashankh"},"content":"     * Converts this jaxb-friendly adapted job object into the model\u0027s {@code Job} object."},{"lineNumber":69,"author":{"gitID":"ChengSashankh"},"content":"     *"},{"lineNumber":70,"author":{"gitID":"ChengSashankh"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted job"},{"lineNumber":71,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"ChengSashankh"},"content":"    public Job toModelType() throws IllegalValueException {"},{"lineNumber":73,"author":{"gitID":"ChengSashankh"},"content":"        final List\u003cTag\u003e jobTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":74,"author":{"gitID":"ChengSashankh"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":75,"author":{"gitID":"ChengSashankh"},"content":"            jobTags.add(tag.toModelType());"},{"lineNumber":76,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":78,"author":{"gitID":"ChengSashankh"},"content":"        if (this.jobTitle \u003d\u003d null) {"},{"lineNumber":79,"author":{"gitID":"ChengSashankh"},"content":"            throw new IllegalValueException("},{"lineNumber":80,"author":{"gitID":"ChengSashankh"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, JobTitle.class.getSimpleName()));"},{"lineNumber":81,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"ChengSashankh"},"content":"        if (!JobTitle.isValidTitle(this.jobTitle)) {"},{"lineNumber":83,"author":{"gitID":"ChengSashankh"},"content":"            throw new IllegalValueException(JobTitle.MESSAGE_TITLE_CONSTRAINTS);"},{"lineNumber":84,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"ChengSashankh"},"content":"        final JobTitle jobTitle \u003d new JobTitle(this.jobTitle);"},{"lineNumber":86,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":87,"author":{"gitID":"ChengSashankh"},"content":"        if (this.location \u003d\u003d null) {"},{"lineNumber":88,"author":{"gitID":"ChengSashankh"},"content":"            throw new IllegalValueException("},{"lineNumber":89,"author":{"gitID":"ChengSashankh"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Location.class.getSimpleName()));"},{"lineNumber":90,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"ChengSashankh"},"content":"        if (!Location.isValidLocation(this.location)) {"},{"lineNumber":92,"author":{"gitID":"ChengSashankh"},"content":"            throw new IllegalValueException(Location.MESSAGE_LOCATION_CONSTRAINTS);"},{"lineNumber":93,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"ChengSashankh"},"content":"        final Location location \u003d new Location(this.location);"},{"lineNumber":95,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":96,"author":{"gitID":"ChengSashankh"},"content":"        if (this.skills \u003d\u003d null) {"},{"lineNumber":97,"author":{"gitID":"ChengSashankh"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Skill.class.getSimpleName()));"},{"lineNumber":98,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"ChengSashankh"},"content":"        if (!Skill.isValidSkill(this.skills)) {"},{"lineNumber":100,"author":{"gitID":"ChengSashankh"},"content":"            throw new IllegalValueException(Skill.MESSAGE_SKILL_CONSTRAINTS);"},{"lineNumber":101,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"ChengSashankh"},"content":"        final Skill skill \u003d new Skill(this.skills);"},{"lineNumber":103,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":104,"author":{"gitID":"ChengSashankh"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(jobTags);"},{"lineNumber":105,"author":{"gitID":"ChengSashankh"},"content":"        return new Job(jobTitle, location, skill, tags);"},{"lineNumber":106,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":108,"author":{"gitID":"ChengSashankh"},"content":"    @Override"},{"lineNumber":109,"author":{"gitID":"ChengSashankh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":110,"author":{"gitID":"ChengSashankh"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":111,"author":{"gitID":"ChengSashankh"},"content":"            return true;"},{"lineNumber":112,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":114,"author":{"gitID":"ChengSashankh"},"content":"        if (!(other instanceof XmlAdaptedJob)) {"},{"lineNumber":115,"author":{"gitID":"ChengSashankh"},"content":"            return false;"},{"lineNumber":116,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":118,"author":{"gitID":"ChengSashankh"},"content":"        XmlAdaptedJob otherJob \u003d (XmlAdaptedJob) other;"},{"lineNumber":119,"author":{"gitID":"ChengSashankh"},"content":"        return Objects.equals(jobTitle, otherJob.jobTitle)"},{"lineNumber":120,"author":{"gitID":"ChengSashankh"},"content":"                \u0026\u0026 Objects.equals(location, otherJob.location)"},{"lineNumber":121,"author":{"gitID":"ChengSashankh"},"content":"                \u0026\u0026 Objects.equals(skills, otherJob.skills)"},{"lineNumber":122,"author":{"gitID":"ChengSashankh"},"content":"                \u0026\u0026 tagged.equals(otherJob.tagged);"},{"lineNumber":123,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"ChengSashankh"},"content":"}"},{"lineNumber":125,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":126,"author":{"gitID":"ChengSashankh"},"content":"//@@author"}],"authorContributionMap":{"ChengSashankh":109,"-":17}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.concurrent.TimeUnit;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":11,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.Date;"},{"lineNumber":12,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.Interview;"},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.InterviewLocation;"},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.InterviewTitle;"},{"lineNumber":15,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.exceptions.DuplicateInterviewException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.job.JobTitle;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Location;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.job.exceptions.DuplicateJobException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":22,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.person.Link;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":26,"author":{"gitID":"tiny767"},"content":"import seedu.address.model.person.Remark;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.report.Proportion;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.report.Report;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.skill.Skill;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":35,"author":{"gitID":"-"},"content":" */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":37,"author":{"gitID":"tiny767"},"content":"    public static final Remark EMPTY_REMARK \u003d new Remark(\"\");"},{"lineNumber":38,"author":{"gitID":"tiny767"},"content":"    public static final Remark SAMPLE_REMARK \u003d new Remark(\"Like fishing\");"},{"lineNumber":39,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":40,"author":{"gitID":"deeheenguyen"},"content":"    public static final Link INIT_LINK \u003d new Link(\"https://github.com/CS2103JAN2018-W11-B3/main\");"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final Skill SAMPLE_SKILL \u003d new Skill(\"Java\");"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final Skill DATA_SKILL \u003d new Skill(\"Python\");"},{"lineNumber":43,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":44,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return new Person[] {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                       new Address(\"Blk 30 Geylang Street 29, #06-40\"), EMPTY_REMARK, INIT_LINK, SAMPLE_SKILL,"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                       getTagSet(\"FreshGrad\", \"Computing\")),"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                       new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), EMPTY_REMARK, INIT_LINK, SAMPLE_SKILL,"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                       getTagSet(\"FreshGrad\", \"Business\")),"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                       new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), EMPTY_REMARK, INIT_LINK, SAMPLE_SKILL,"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                       getTagSet(\"SEIntern\", \"Interviewing\")),"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                       new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                    EMPTY_REMARK, INIT_LINK, SAMPLE_SKILL, getTagSet(\"SEIntern\", \"Offered\")),"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                       new Address(\"Blk 47 Tampines Street 20, #17-35\"), EMPTY_REMARK, INIT_LINK, SAMPLE_SKILL,"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                       getTagSet(\"SEIntern\", \"Screening\")),"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Clinton Francis Barton\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                       new Address(\"Blk 45 Aljunied Street 85, #11-31\"), SAMPLE_REMARK, INIT_LINK, SAMPLE_SKILL,"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                       getTagSet(\"SEIntern\", \"Screening\")),"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"a@example.com\"),"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                    new Address(\"Blk 45 Aljunied Street 85, #11-31\"), SAMPLE_REMARK, INIT_LINK, SAMPLE_SKILL,"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                    getTagSet(\"SEIntern\", \"Screening\")),"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Roy Doe\"), new Phone(\"92624417\"), new Email(\"b@example.com\"),"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                    new Address(\"Blk 45 Aljunied Street 85, #11-31\"), SAMPLE_REMARK, INIT_LINK, SAMPLE_SKILL,"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                    getTagSet(\"SEIntern\", \"Rejected\")),"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Sam Balakrishnan\"), new Phone(\"92624417\"), new Email(\"c@example.com\"),"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                    new Address(\"Blk 45 Aljunied Street 85, #11-31\"), SAMPLE_REMARK, INIT_LINK, SAMPLE_SKILL,"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                    getTagSet(\"SEIntern\", \"Offered\")),"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Alex Smith\"), new Phone(\"92624417\"), new Email(\"d@example.com\"),"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                    new Address(\"Blk 45 Aljunied Street 85, #11-31\"), SAMPLE_REMARK, INIT_LINK, SAMPLE_SKILL,"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                    getTagSet(\"SEIntern\", \"Interviewing\")),"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Jacques Duquesne\"), new Phone(\"92624417\"), new Email(\"e@example.com\"),"},{"lineNumber":78,"author":{"gitID":"-"},"content":"                    new Address(\"Blk 45 Aljunied Street 85, #11-31\"), SAMPLE_REMARK, INIT_LINK, DATA_SKILL,"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                    getTagSet(\"SEIntern\", \"Interviewing\", \"Intern\")),"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Pietro Maximoff\"), new Phone(\"92624417\"), new Email(\"f@example.com\"),"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                    new Address(\"Blk 45 Aljunied Street 85, #11-31\"), SAMPLE_REMARK, INIT_LINK, SAMPLE_SKILL,"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                    getTagSet(\"SEIntern\", \"Screening\")),"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Wanda Maximoff\"), new Phone(\"92624417\"), new Email(\"j@example.com\"),"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                    new Address(\"Blk 45 Aljunied Street 85, #11-31\"), SAMPLE_REMARK, INIT_LINK, SAMPLE_SKILL,"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                    getTagSet(\"SEIntern\", \"Screening\", \"Experienced\"))"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public static Job[] getSampleJobs() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return new Job[] {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            new Job(new JobTitle(\"Backend Engineer\"), new Location(\"Geylang\"), new Skill(\"Java,SQL\"),"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                    getTagSet(\"SEIntern\")),"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            new Job(new JobTitle(\"Frontend Engineer\"), new Location(\"Serangoon\"), new Skill(\"JavaScript,CSS,HTML\"),"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                    getTagSet(\"FreshGrad\")),"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            new Job(new JobTitle(\"Data Scientist\"), new Location(\"Ang Mo Kio\"), new Skill(\"Python, R\"),"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                    getTagSet(\"Experienced\")),"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            new Job(new JobTitle(\"Systems Engineer\"), new Location(\"Tampines\"), new Skill(\"ALL\"),"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                    getTagSet(\"ALL\")),"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            new Job(new JobTitle(\"Frontend Developer\"), new Location(\"Aljunied\"), new Skill(\"ALL\"),"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                    getTagSet(\"Experienced\")),"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            new Job(new JobTitle(\"Data Engineer\"), new Location(\"ALL\"), new Skill(\"Python, R\"),"},{"lineNumber":102,"author":{"gitID":"-"},"content":"                    getTagSet(\"Intern\"))"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"anh2111"},"content":"    // @@author anh2111"},{"lineNumber":106,"author":{"gitID":"anh2111"},"content":"    public static Report[] getSampleReports() throws InterruptedException {"},{"lineNumber":107,"author":{"gitID":"anh2111"},"content":"        ArrayList\u003cReport\u003e sampleHistory \u003d new ArrayList\u003c\u003e();"},{"lineNumber":108,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":109,"author":{"gitID":"anh2111"},"content":"        Tag samplePopulation \u003d new Tag(\"SEIntern\");"},{"lineNumber":110,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":111,"author":{"gitID":"anh2111"},"content":"        List\u003cProportion\u003e sampleListA \u003d new ArrayList\u003c\u003e();"},{"lineNumber":112,"author":{"gitID":"anh2111"},"content":"        sampleListA.add(new Proportion(\"Screening\", 10, 10));"},{"lineNumber":113,"author":{"gitID":"anh2111"},"content":"        sampleListA.add(new Proportion(\"Interviewing\", 1, 1));"},{"lineNumber":114,"author":{"gitID":"anh2111"},"content":"        Report reportA \u003d new Report(samplePopulation, sampleListA, 11);"},{"lineNumber":115,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":116,"author":{"gitID":"anh2111"},"content":"        TimeUnit.SECONDS.sleep(2); // to make the data more reasonable"},{"lineNumber":117,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":118,"author":{"gitID":"anh2111"},"content":"        List\u003cProportion\u003e sampleListB \u003d new ArrayList\u003c\u003e();"},{"lineNumber":119,"author":{"gitID":"anh2111"},"content":"        sampleListB.add(new Proportion(\"Screening\", 9, 9));"},{"lineNumber":120,"author":{"gitID":"anh2111"},"content":"        sampleListB.add(new Proportion(\"Interviewing\", 2, 2));"},{"lineNumber":121,"author":{"gitID":"anh2111"},"content":"        Report reportB \u003d new Report(samplePopulation, sampleListB, 11);"},{"lineNumber":122,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":123,"author":{"gitID":"anh2111"},"content":"        TimeUnit.SECONDS.sleep(2); // to make the data more reasonable"},{"lineNumber":124,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":125,"author":{"gitID":"anh2111"},"content":"        List\u003cProportion\u003e sampleListC \u003d new ArrayList\u003c\u003e();"},{"lineNumber":126,"author":{"gitID":"anh2111"},"content":"        sampleListC.add(new Proportion(\"Screening\", 8, 8));"},{"lineNumber":127,"author":{"gitID":"anh2111"},"content":"        sampleListC.add(new Proportion(\"Interviewing\", 3, 3));"},{"lineNumber":128,"author":{"gitID":"anh2111"},"content":"        Report reportC \u003d new Report(samplePopulation, sampleListC, 11);"},{"lineNumber":129,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":130,"author":{"gitID":"anh2111"},"content":"        return new Report[] {"},{"lineNumber":131,"author":{"gitID":"anh2111"},"content":"            reportA,"},{"lineNumber":132,"author":{"gitID":"anh2111"},"content":"            reportB,"},{"lineNumber":133,"author":{"gitID":"anh2111"},"content":"            reportC"},{"lineNumber":134,"author":{"gitID":"anh2111"},"content":"        };"},{"lineNumber":135,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"anh2111"},"content":"    // @@author"},{"lineNumber":137,"author":{"gitID":"deeheenguyen"},"content":"    public static Interview[] getSampleInterviews() {"},{"lineNumber":138,"author":{"gitID":"deeheenguyen"},"content":"        return new Interview[] {"},{"lineNumber":139,"author":{"gitID":"deeheenguyen"},"content":"            new Interview(new InterviewTitle(\"Backend Interview\"), new Name(\"David\"), new Date(\"01.01.2015\"),"},{"lineNumber":140,"author":{"gitID":"deeheenguyen"},"content":"                    new InterviewLocation(\"One North\")),"},{"lineNumber":141,"author":{"gitID":"deeheenguyen"},"content":"            new Interview(new InterviewTitle(\"Frontend Interview\"), new Name(\"Joe\"), new Date(\"01.02.2016\"),"},{"lineNumber":142,"author":{"gitID":"deeheenguyen"},"content":"                    new InterviewLocation(\"SOC\")),"},{"lineNumber":143,"author":{"gitID":"deeheenguyen"},"content":"            new Interview(new InterviewTitle(\"Data Scientist Interview\"), new Name(\"Kelvin\"),"},{"lineNumber":144,"author":{"gitID":"deeheenguyen"},"content":"                    new Date(\"01.03.2017\"), new InterviewLocation(\"NUS\")),"},{"lineNumber":145,"author":{"gitID":"deeheenguyen"},"content":"        };"},{"lineNumber":146,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            for (Job sampleJob : getSampleJobs()) {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"                sampleAb.addJob(sampleJob);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            for (Report sampleReport : getSampleReports()) {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"                sampleAb.addReport(sampleReport);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":160,"author":{"gitID":"deeheenguyen"},"content":"            for (Interview sampleInterview: getSampleInterviews()) {"},{"lineNumber":161,"author":{"gitID":"deeheenguyen"},"content":"                sampleAb.addInterview(sampleInterview);"},{"lineNumber":162,"author":{"gitID":"deeheenguyen"},"content":"            }"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        } catch (DuplicateJobException e) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate jobs\", e);"},{"lineNumber":168,"author":{"gitID":"deeheenguyen"},"content":"        } catch (DuplicateInterviewException e) {"},{"lineNumber":169,"author":{"gitID":"deeheenguyen"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate interviews\", e);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        } catch (InterruptedException e) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            throw new Error(\"error in generating sample reports\", e);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":177,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"deeheenguyen":24,"anh2111":32,"-":126,"tiny767":5}},{"path":"src/main/java/seedu/address/model/person/PersonContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"anh2111"},"content":"// @@author anh2111"},{"lineNumber":2,"author":{"gitID":"anh2111"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":4,"author":{"gitID":"anh2111"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"anh2111"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":7,"author":{"gitID":"anh2111"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":8,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":9,"author":{"gitID":"anh2111"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"anh2111"},"content":" * Tests that a {@code Person}\u0027s {@code Name} or {@code Email} or {@code Phone} or {@code Tags} matches any of the"},{"lineNumber":11,"author":{"gitID":"anh2111"},"content":" * keywords given."},{"lineNumber":12,"author":{"gitID":"anh2111"},"content":" */"},{"lineNumber":13,"author":{"gitID":"anh2111"},"content":"public class PersonContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":14,"author":{"gitID":"anh2111"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":15,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":16,"author":{"gitID":"anh2111"},"content":"    public PersonContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":17,"author":{"gitID":"anh2111"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":18,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":20,"author":{"gitID":"anh2111"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"anh2111"},"content":"    public boolean test(Person person) {"},{"lineNumber":22,"author":{"gitID":"anh2111"},"content":"        return keywords.stream()"},{"lineNumber":23,"author":{"gitID":"anh2111"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword)"},{"lineNumber":24,"author":{"gitID":"anh2111"},"content":"                                || StringUtil.containsWordIgnoreCase(person.getEmail().toString(), keyword)"},{"lineNumber":25,"author":{"gitID":"anh2111"},"content":"                                || StringUtil.containsWordIgnoreCase(person.getPhone().toString(), keyword)"},{"lineNumber":26,"author":{"gitID":"anh2111"},"content":"                                || person.getTags().stream()"},{"lineNumber":27,"author":{"gitID":"anh2111"},"content":"                                    .anyMatch(tag -\u003e StringUtil.containsWordIgnoreCase(tag.tagName, keyword)));"},{"lineNumber":28,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":30,"author":{"gitID":"anh2111"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"anh2111"},"content":"    public boolean equals(Object other) {"},{"lineNumber":32,"author":{"gitID":"anh2111"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":33,"author":{"gitID":"anh2111"},"content":"                || (other instanceof PersonContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":34,"author":{"gitID":"anh2111"},"content":"                \u0026\u0026 this.keywords.equals(((PersonContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":35,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":37,"author":{"gitID":"anh2111"},"content":"}"},{"lineNumber":38,"author":{"gitID":"anh2111"},"content":"// @@author"}],"authorContributionMap":{"anh2111":38}},{"path":"src/main/java/seedu/address/model/person/Link.java","lines":[{"lineNumber":1,"author":{"gitID":"deeheenguyen"},"content":"//@@author deeheenguyen"},{"lineNumber":2,"author":{"gitID":"deeheenguyen"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":4,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"deeheenguyen"},"content":" * Represents a Tag in the address book."},{"lineNumber":8,"author":{"gitID":"deeheenguyen"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"},{"lineNumber":9,"author":{"gitID":"deeheenguyen"},"content":" */"},{"lineNumber":10,"author":{"gitID":"deeheenguyen"},"content":"public class Link {"},{"lineNumber":11,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":12,"author":{"gitID":"deeheenguyen"},"content":"    public static final String MESSAGE_LINK_CONSTRAINTS \u003d \"Link should be start with http\";"},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":"    public static final String LINK_VALIDATION_REGEX \u003d"},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":"            \"^(https?:\\\\\\\\/\\\\\\\\/)?(www\\\\.)?([\\\\\\\\w]+\\\\\\\\.)+[\\u200C\\u200B\\\\\\\\w]{2,63}\\\\\\\\/?\";"},{"lineNumber":15,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":16,"author":{"gitID":"deeheenguyen"},"content":"    public final String value;"},{"lineNumber":17,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":18,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"deeheenguyen"},"content":"     * Constructs a {@code Tag}."},{"lineNumber":20,"author":{"gitID":"deeheenguyen"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"deeheenguyen"},"content":"     * @param link A valid url."},{"lineNumber":22,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"deeheenguyen"},"content":"    public Link(String link) {"},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":"        checkArgument(isValidLink(link), MESSAGE_LINK_CONSTRAINTS);"},{"lineNumber":25,"author":{"gitID":"deeheenguyen"},"content":"        this.value \u003d link;"},{"lineNumber":26,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":28,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"deeheenguyen"},"content":"     * Returns true if a given string is a valid link name."},{"lineNumber":30,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"deeheenguyen"},"content":"    public static boolean isValidLink(String test) {"},{"lineNumber":32,"author":{"gitID":"deeheenguyen"},"content":"        //return test.matches(LINK_VALIDATION_REGEX);"},{"lineNumber":33,"author":{"gitID":"deeheenguyen"},"content":"        return true;"},{"lineNumber":34,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":36,"author":{"gitID":"deeheenguyen"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"deeheenguyen"},"content":"    public boolean equals(Object other) {"},{"lineNumber":38,"author":{"gitID":"deeheenguyen"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":39,"author":{"gitID":"deeheenguyen"},"content":"                || (other instanceof Link // instanceof handles nulls"},{"lineNumber":40,"author":{"gitID":"deeheenguyen"},"content":"                \u0026\u0026 this.value.equals(((Link) other).value)); // state check"},{"lineNumber":41,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":43,"author":{"gitID":"deeheenguyen"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"deeheenguyen"},"content":"    public int hashCode() {"},{"lineNumber":45,"author":{"gitID":"deeheenguyen"},"content":"        return value.hashCode();"},{"lineNumber":46,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":48,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"deeheenguyen"},"content":"     * Format state as text for viewing."},{"lineNumber":50,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"deeheenguyen"},"content":"    public String toString() {"},{"lineNumber":52,"author":{"gitID":"deeheenguyen"},"content":"        return \u0027[\u0027 + value + \u0027]\u0027;"},{"lineNumber":53,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":55,"author":{"gitID":"deeheenguyen"},"content":"}"}],"authorContributionMap":{"deeheenguyen":55}},{"path":"src/main/java/seedu/address/model/person/EmailFilter.java","lines":[{"lineNumber":1,"author":{"gitID":"deeheenguyen"},"content":"//@@author deeheenguyen"},{"lineNumber":2,"author":{"gitID":"deeheenguyen"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":4,"author":{"gitID":"deeheenguyen"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":7,"author":{"gitID":"deeheenguyen"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"deeheenguyen"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":9,"author":{"gitID":"deeheenguyen"},"content":" */"},{"lineNumber":10,"author":{"gitID":"deeheenguyen"},"content":"public class EmailFilter implements Predicate\u003cPerson\u003e {"},{"lineNumber":11,"author":{"gitID":"deeheenguyen"},"content":"    private final String email;"},{"lineNumber":12,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":"    public EmailFilter (Email email) {"},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":"        this.email \u003d email.toString();"},{"lineNumber":15,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":17,"author":{"gitID":"deeheenguyen"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"deeheenguyen"},"content":"    public boolean test(Person person) {"},{"lineNumber":19,"author":{"gitID":"deeheenguyen"},"content":"        return person.getEmail().toString().equals(this.email);"},{"lineNumber":20,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":22,"author":{"gitID":"deeheenguyen"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"deeheenguyen"},"content":"    public boolean equals(Object other) {"},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":25,"author":{"gitID":"deeheenguyen"},"content":"                || (other instanceof EmailFilter // instanceof handles nulls"},{"lineNumber":26,"author":{"gitID":"deeheenguyen"},"content":"                \u0026\u0026 this.email.equals(((EmailFilter) other).email)); // state check"},{"lineNumber":27,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":29,"author":{"gitID":"deeheenguyen"},"content":"}"}],"authorContributionMap":{"deeheenguyen":29}},{"path":"src/main/java/seedu/address/logic/commands/DeleteInterviewCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"deeheenguyen"},"content":"//@@author deeheenguyen"},{"lineNumber":2,"author":{"gitID":"deeheenguyen"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":4,"author":{"gitID":"deeheenguyen"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"deeheenguyen"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":9,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":10,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":11,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.commons.events.ui.RefreshReportPanelEvent;"},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.Interview;"},{"lineNumber":15,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.exceptions.InterviewNotFoundException;"},{"lineNumber":16,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":17,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":18,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":19,"author":{"gitID":"deeheenguyen"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"deeheenguyen"},"content":" * Deletes a job identified using it\u0027s last displayed index from the address book."},{"lineNumber":21,"author":{"gitID":"deeheenguyen"},"content":" */"},{"lineNumber":22,"author":{"gitID":"deeheenguyen"},"content":"public class DeleteInterviewCommand extends UndoableCommand {"},{"lineNumber":23,"author":{"gitID":"deeheenguyen"},"content":"    public static final String COMMAND_WORD \u003d \"deleteInterview\";"},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":"    public static final String COMMAND_ALIAS \u003d \"di\";"},{"lineNumber":25,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":26,"author":{"gitID":"deeheenguyen"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":27,"author":{"gitID":"deeheenguyen"},"content":"            + \": Deletes the interview identified by the index number used in the last interview listing.\\n\""},{"lineNumber":28,"author":{"gitID":"deeheenguyen"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":29,"author":{"gitID":"deeheenguyen"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":30,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":31,"author":{"gitID":"deeheenguyen"},"content":"    public static final String MESSAGE_DELETE_INTERVIEW_SUCCESS \u003d \"Deleted Interview: %1$s\";"},{"lineNumber":32,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":33,"author":{"gitID":"deeheenguyen"},"content":"    private final Index targetIndex;"},{"lineNumber":34,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":35,"author":{"gitID":"deeheenguyen"},"content":"    private Interview interviewToDelete;"},{"lineNumber":36,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":37,"author":{"gitID":"deeheenguyen"},"content":"    public DeleteInterviewCommand(Index targetIndex) {"},{"lineNumber":38,"author":{"gitID":"deeheenguyen"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":39,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":41,"author":{"gitID":"deeheenguyen"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"deeheenguyen"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":43,"author":{"gitID":"deeheenguyen"},"content":"        requireNonNull(interviewToDelete);"},{"lineNumber":44,"author":{"gitID":"deeheenguyen"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"deeheenguyen"},"content":"            model.deleteInterview(interviewToDelete);"},{"lineNumber":46,"author":{"gitID":"deeheenguyen"},"content":"            model.refreshReport();"},{"lineNumber":47,"author":{"gitID":"deeheenguyen"},"content":"            EventsCenter.getInstance().post(new RefreshReportPanelEvent());"},{"lineNumber":48,"author":{"gitID":"deeheenguyen"},"content":"        } catch (InterviewNotFoundException jnfe) {"},{"lineNumber":49,"author":{"gitID":"deeheenguyen"},"content":"            throw new AssertionError(\"The target interview cannot be missing\");"},{"lineNumber":50,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":52,"author":{"gitID":"deeheenguyen"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_INTERVIEW_SUCCESS, interviewToDelete));"},{"lineNumber":53,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":55,"author":{"gitID":"deeheenguyen"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"deeheenguyen"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":57,"author":{"gitID":"deeheenguyen"},"content":"        List\u003cInterview\u003e lastShownList \u003d model.getFilteredInterviewList();"},{"lineNumber":58,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":59,"author":{"gitID":"deeheenguyen"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":60,"author":{"gitID":"deeheenguyen"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_INTERVIEW_DISPLAYED_INDEX);"},{"lineNumber":61,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":63,"author":{"gitID":"deeheenguyen"},"content":"        interviewToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":64,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":66,"author":{"gitID":"deeheenguyen"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"deeheenguyen"},"content":"    public boolean equals(Object other) {"},{"lineNumber":68,"author":{"gitID":"deeheenguyen"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":69,"author":{"gitID":"deeheenguyen"},"content":"                || (other instanceof DeleteInterviewCommand // instanceof handles nulls"},{"lineNumber":70,"author":{"gitID":"deeheenguyen"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteInterviewCommand) other).targetIndex) // state check"},{"lineNumber":71,"author":{"gitID":"deeheenguyen"},"content":"                \u0026\u0026 Objects.equals(this.interviewToDelete, ((DeleteInterviewCommand) other).interviewToDelete));"},{"lineNumber":72,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":74,"author":{"gitID":"deeheenguyen"},"content":"}"},{"lineNumber":75,"author":{"gitID":"deeheenguyen"},"content":""}],"authorContributionMap":{"deeheenguyen":75}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.skill.Skill;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class Person {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Phone phone;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Email email;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Address address;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Skill skills;"},{"lineNumber":24,"author":{"gitID":"tiny767"},"content":"    private final Remark remark;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":26,"author":{"gitID":"deeheenguyen"},"content":"    private final Link link;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Remark remark, Link link, Skill skill,"},{"lineNumber":32,"author":{"gitID":"-"},"content":"                  Set\u003cTag\u003e tags) {"},{"lineNumber":33,"author":{"gitID":"tiny767"},"content":"        requireAllNonNull(name, phone, email, address, remark, tags);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":38,"author":{"gitID":"tiny767"},"content":"        this.remark \u003d remark;"},{"lineNumber":39,"author":{"gitID":"deeheenguyen"},"content":"        this.link \u003d link;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.skills \u003d skill;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"deeheenguyen"},"content":"    public Link getLink() {"},{"lineNumber":58,"author":{"gitID":"deeheenguyen"},"content":"        return link;"},{"lineNumber":59,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public Skill getSkills() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return skills;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"tiny767"},"content":"    public Remark getRemark() {"},{"lineNumber":70,"author":{"gitID":"tiny767"},"content":"        return remark;"},{"lineNumber":71,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        //TODO: Update this with comparison with getskills as well."},{"lineNumber":92,"author":{"gitID":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return otherPerson.getName().equals(this.getName())"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress())"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getLink().equals(this.getLink());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        //\u0026\u0026 otherPerson.getSkills().equals(this.getSkills());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        return Objects.hash(name, phone, email, address, skills, tags);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                .append(\" Address: \")"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                .append(getAddress())"},{"lineNumber":117,"author":{"gitID":"deeheenguyen"},"content":"                .append(\" Link: \")"},{"lineNumber":118,"author":{"gitID":"deeheenguyen"},"content":"                .append(getLink())"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                .append(\" Skills: \")"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                .append(getSkills())"},{"lineNumber":121,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"deeheenguyen":8,"-":111,"tiny767":7}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.Interview;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.report.Report;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the jobs list."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate jobs."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    ObservableList\u003cJob\u003e getJobList();"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"deeheenguyen"},"content":"     * Returns an unmodifiable view of the interviews list."},{"lineNumber":35,"author":{"gitID":"deeheenguyen"},"content":"     * This list will not contain any duplicate interviews."},{"lineNumber":36,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"deeheenguyen"},"content":"    ObservableList\u003cInterview\u003e getInterviewList();"},{"lineNumber":38,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the reports list."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate reports;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    ObservableList\u003cReport\u003e getReportList();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"deeheenguyen":7,"-":37}},{"path":"src/main/java/seedu/address/model/person/Remark.java","lines":[{"lineNumber":1,"author":{"gitID":"tiny767"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":3,"author":{"gitID":"tiny767"},"content":"//@@author tiny767"},{"lineNumber":4,"author":{"gitID":"tiny767"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"tiny767"},"content":" * Represents a Person\u0027s remark in the address book."},{"lineNumber":6,"author":{"gitID":"tiny767"},"content":" */"},{"lineNumber":7,"author":{"gitID":"tiny767"},"content":"public class Remark {"},{"lineNumber":8,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":9,"author":{"gitID":"tiny767"},"content":"    public static final String MESSAGE_REMARK_CONSTRAINTS \u003d"},{"lineNumber":10,"author":{"gitID":"tiny767"},"content":"            \"Person remark can take any values, and it can be blank\";"},{"lineNumber":11,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":12,"author":{"gitID":"tiny767"},"content":"    public final String value;"},{"lineNumber":13,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":14,"author":{"gitID":"tiny767"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"tiny767"},"content":"     * Constructs an {@code Remark}."},{"lineNumber":16,"author":{"gitID":"tiny767"},"content":"     *"},{"lineNumber":17,"author":{"gitID":"tiny767"},"content":"     * @param remark A valid address."},{"lineNumber":18,"author":{"gitID":"tiny767"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"tiny767"},"content":"    public Remark(String remark) {"},{"lineNumber":20,"author":{"gitID":"tiny767"},"content":"        this.value \u003d remark;"},{"lineNumber":21,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":23,"author":{"gitID":"tiny767"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"tiny767"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitID":"tiny767"},"content":"        return value;"},{"lineNumber":26,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":28,"author":{"gitID":"tiny767"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"tiny767"},"content":"    public boolean equals(Object other) {"},{"lineNumber":30,"author":{"gitID":"tiny767"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":31,"author":{"gitID":"tiny767"},"content":"                || (other instanceof Remark // instanceof handles nulls"},{"lineNumber":32,"author":{"gitID":"tiny767"},"content":"                \u0026\u0026 this.value.equals(((Remark) other).value)); // state check"},{"lineNumber":33,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":35,"author":{"gitID":"tiny767"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"tiny767"},"content":"    public int hashCode() {"},{"lineNumber":37,"author":{"gitID":"tiny767"},"content":"        return value.hashCode();"},{"lineNumber":38,"author":{"gitID":"tiny767"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"tiny767"},"content":""},{"lineNumber":40,"author":{"gitID":"tiny767"},"content":"}"}],"authorContributionMap":{"tiny767":40}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.rmi.NoSuchObjectException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":16,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":17,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.Interview;"},{"lineNumber":18,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.UniqueInterviewList;"},{"lineNumber":19,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.exceptions.DuplicateInterviewException;"},{"lineNumber":20,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.exceptions.InterviewNotFoundException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.job.UniqueJobList;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.job.exceptions.DuplicateJobException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.job.exceptions.JobNotFoundException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.report.Report;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.report.UniqueReportList;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":36,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":37,"author":{"gitID":"-"},"content":" */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":42,"author":{"gitID":"deeheenguyen"},"content":"    private final UniqueInterviewList interviews;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private final UniqueJobList jobs;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private final UniqueReportList reports;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":56,"author":{"gitID":"deeheenguyen"},"content":"        interviews \u003d new UniqueInterviewList();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        jobs \u003d new UniqueJobList();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        reports \u003d new UniqueReportList();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void setJobs(List\u003cJob\u003e jobs) throws  DuplicateJobException {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        this.jobs.setJobs(jobs);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"deeheenguyen"},"content":"    public void setInterviews(List\u003cInterview\u003e interviews) throws DuplicateInterviewException {"},{"lineNumber":86,"author":{"gitID":"deeheenguyen"},"content":"        this.interviews.setInterviews(interviews);"},{"lineNumber":87,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void setReports(List\u003cReport\u003e reports) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        this.reports.setReports(reports);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            setJobs(new ArrayList\u003cJob\u003e(newData.getJobList()));"},{"lineNumber":106,"author":{"gitID":"deeheenguyen"},"content":"            setInterviews(new ArrayList\u003cInterview\u003e(newData.getInterviewList()));"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            setReports(new ArrayList\u003cReport\u003e(newData.getReportList()));"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        } catch (DuplicateJobException e) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate job postings\");"},{"lineNumber":112,"author":{"gitID":"deeheenguyen"},"content":"        } catch (DuplicateInterviewException e) {"},{"lineNumber":113,"author":{"gitID":"deeheenguyen"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate interviews \");"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":129,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":131,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":150,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":152,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     *  Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":157,"author":{"gitID":"-"},"content":"     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":159,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":170,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        return new Person("},{"lineNumber":173,"author":{"gitID":"tiny767"},"content":"                person.getName(), person.getPhone(), person.getEmail(), person.getAddress(),"},{"lineNumber":174,"author":{"gitID":"-"},"content":"                person.getRemark(), person.getLink(), person.getSkills(), correctTagReferences);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"ChengSashankh"},"content":"    //@@author ChengSashankh"},{"lineNumber":178,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":179,"author":{"gitID":"ChengSashankh"},"content":"     *  Updates the master tag list to include tags in {@code job} that are not in the list."},{"lineNumber":180,"author":{"gitID":"ChengSashankh"},"content":"     *  @return a copy of this {@code job} such that every tag in this person points to a Tag object in the master"},{"lineNumber":181,"author":{"gitID":"ChengSashankh"},"content":"     *  list."},{"lineNumber":182,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":183,"author":{"gitID":"ChengSashankh"},"content":"    private Job syncWithMasterTagList(Job job) {"},{"lineNumber":184,"author":{"gitID":"ChengSashankh"},"content":"        final UniqueTagList jobTags \u003d new UniqueTagList(job.getTags());"},{"lineNumber":185,"author":{"gitID":"ChengSashankh"},"content":"        tags.mergeFrom(jobTags);"},{"lineNumber":186,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":187,"author":{"gitID":"ChengSashankh"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":188,"author":{"gitID":"ChengSashankh"},"content":"        // used for checking job tag references"},{"lineNumber":189,"author":{"gitID":"ChengSashankh"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":190,"author":{"gitID":"ChengSashankh"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":191,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":192,"author":{"gitID":"ChengSashankh"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":193,"author":{"gitID":"ChengSashankh"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":194,"author":{"gitID":"ChengSashankh"},"content":"        jobTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":195,"author":{"gitID":"ChengSashankh"},"content":"        return new Job("},{"lineNumber":196,"author":{"gitID":"ChengSashankh"},"content":"                job.getJobTitle(), job.getLocation(), job.getSkills(), correctTagReferences);"},{"lineNumber":197,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"ChengSashankh"},"content":"    //@@author"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":203,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"    /***"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * Removes {@code tag} from the chosen {@code person} in the {@code AddressBook}"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     *@throws PersonNotFoundException if the {@code person} is not found in the {@code AddressBook}"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"    public void deleteTagFromPerson(Tag tag, Person person) throws PersonNotFoundException {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e modifiedTags \u003d new HashSet\u003cTag\u003e(person.getTags());"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"        if (!modifiedTags.remove(tag)) {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"        Person modifiedPerson \u003d"},{"lineNumber":225,"author":{"gitID":"tiny767"},"content":"                new Person(person.getName(), person.getPhone(), person.getEmail(), person.getAddress(),"},{"lineNumber":226,"author":{"gitID":"-"},"content":"                        person.getRemark(), person.getLink(), person.getSkills(), modifiedTags);"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"            updatePerson(person, modifiedPerson);"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException duplictePersonException) {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Modifying \""},{"lineNumber":232,"author":{"gitID":"-"},"content":"                    + \"a person\u0027s tags only should not result in a duplicate. \" + \"See Person#equals(Object).\");"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"    /***"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * Deletes chosen tag {@code tag} from all persons in this {@code AddressBook}"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    public void deleteTag(Tag tag) throws NoSuchObjectException {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"            for (Person person : persons) {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"                deleteTagFromPerson(tag, person);"},{"lineNumber":250,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException personNotFoundException) {"},{"lineNumber":252,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Impossible: Person was found in AddressBook.\");"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"        if (!tagExistsInAddressBook(tag)) {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"            tags.remove(tag);"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"    /***"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * Checks if {@code tag} is assigned to atleast one {@code person} in the {@code AddressBook}"},{"lineNumber":262,"author":{"gitID":"-"},"content":"     * @param tag"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     * @return a boolean value indicating the presence of the tag somewhere on the list"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    public boolean tagExistsInAddressBook(Tag tag) {"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        for (Person person : persons) {"},{"lineNumber":267,"author":{"gitID":"-"},"content":"            if (person.getTags().contains(tag)) {"},{"lineNumber":268,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":269,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        return false;"},{"lineNumber":272,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":273,"author":{"gitID":"-"},"content":""},{"lineNumber":274,"author":{"gitID":"deeheenguyen"},"content":"    //// interview-level operations"},{"lineNumber":275,"author":{"gitID":"deeheenguyen"},"content":"    //@@author deeheenguyen"},{"lineNumber":276,"author":{"gitID":"deeheenguyen"},"content":"    public void addInterview(Interview interview) throws DuplicateInterviewException {"},{"lineNumber":277,"author":{"gitID":"deeheenguyen"},"content":"        interviews.add(interview);"},{"lineNumber":278,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":279,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":280,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":281,"author":{"gitID":"deeheenguyen"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":282,"author":{"gitID":"deeheenguyen"},"content":"     * @throws InterviewNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":283,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":284,"author":{"gitID":"deeheenguyen"},"content":"    public boolean removeInterview(Interview key) throws InterviewNotFoundException {"},{"lineNumber":285,"author":{"gitID":"deeheenguyen"},"content":"        if (interviews.remove(key)) {"},{"lineNumber":286,"author":{"gitID":"deeheenguyen"},"content":"            return true;"},{"lineNumber":287,"author":{"gitID":"deeheenguyen"},"content":"        } else {"},{"lineNumber":288,"author":{"gitID":"deeheenguyen"},"content":"            throw new InterviewNotFoundException();"},{"lineNumber":289,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":290,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":291,"author":{"gitID":"deeheenguyen"},"content":"    //@@author"},{"lineNumber":292,"author":{"gitID":"-"},"content":"    //// job methods"},{"lineNumber":293,"author":{"gitID":"ChengSashankh"},"content":"    //@@author ChengSashankh"},{"lineNumber":294,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":295,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":296,"author":{"gitID":"ChengSashankh"},"content":"     * Adds a job to the address book."},{"lineNumber":297,"author":{"gitID":"ChengSashankh"},"content":"     *"},{"lineNumber":298,"author":{"gitID":"ChengSashankh"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":299,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":300,"author":{"gitID":"ChengSashankh"},"content":"    public void addJob(Job j) throws DuplicateJobException {"},{"lineNumber":301,"author":{"gitID":"ChengSashankh"},"content":"        Job job \u003d syncWithMasterTagList(j);"},{"lineNumber":302,"author":{"gitID":"ChengSashankh"},"content":"        jobs.add(job);"},{"lineNumber":303,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":304,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":305,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":306,"author":{"gitID":"ChengSashankh"},"content":"     * Replaces the given job {@code target} in the list with {@code editedJob}."},{"lineNumber":307,"author":{"gitID":"ChengSashankh"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedJob}."},{"lineNumber":308,"author":{"gitID":"ChengSashankh"},"content":"     *"},{"lineNumber":309,"author":{"gitID":"ChengSashankh"},"content":"     * @throws DuplicateJobException if updating the job\u0027s details causes the person to be equivalent to"},{"lineNumber":310,"author":{"gitID":"ChengSashankh"},"content":"     *      another existing job in the list."},{"lineNumber":311,"author":{"gitID":"ChengSashankh"},"content":"     * @throws JobNotFoundException if {@code target} could not be found in the list."},{"lineNumber":312,"author":{"gitID":"ChengSashankh"},"content":"     *"},{"lineNumber":313,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":314,"author":{"gitID":"ChengSashankh"},"content":"    public void updateJob(Job target, Job editedJob)"},{"lineNumber":315,"author":{"gitID":"ChengSashankh"},"content":"            throws DuplicateJobException, JobNotFoundException {"},{"lineNumber":316,"author":{"gitID":"ChengSashankh"},"content":"        requireNonNull(editedJob);"},{"lineNumber":317,"author":{"gitID":"ChengSashankh"},"content":"        Job syncedEditedJob \u003d syncWithMasterTagList(editedJob);"},{"lineNumber":318,"author":{"gitID":"ChengSashankh"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":319,"author":{"gitID":"ChengSashankh"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":320,"author":{"gitID":"ChengSashankh"},"content":"        // in the person list."},{"lineNumber":321,"author":{"gitID":"ChengSashankh"},"content":"        jobs.setJob(target, syncedEditedJob);"},{"lineNumber":322,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":323,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":324,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":325,"author":{"gitID":"ChengSashankh"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":326,"author":{"gitID":"ChengSashankh"},"content":"     * @throws JobNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":327,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":328,"author":{"gitID":"ChengSashankh"},"content":"    public boolean removeJob(Job key) throws JobNotFoundException {"},{"lineNumber":329,"author":{"gitID":"ChengSashankh"},"content":"        if (jobs.remove(key)) {"},{"lineNumber":330,"author":{"gitID":"ChengSashankh"},"content":"            return true;"},{"lineNumber":331,"author":{"gitID":"ChengSashankh"},"content":"        } else {"},{"lineNumber":332,"author":{"gitID":"ChengSashankh"},"content":"            throw new JobNotFoundException();"},{"lineNumber":333,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":334,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":335,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":336,"author":{"gitID":"ChengSashankh"},"content":"    //@@author"},{"lineNumber":337,"author":{"gitID":"-"},"content":""},{"lineNumber":338,"author":{"gitID":"-"},"content":"    //// report methods"},{"lineNumber":339,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":340,"author":{"gitID":"-"},"content":"     * Adds a report to the address book."},{"lineNumber":341,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":342,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":343,"author":{"gitID":"-"},"content":"    public void addReport(Report r) {"},{"lineNumber":344,"author":{"gitID":"-"},"content":"        reports.add(r);"},{"lineNumber":345,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":346,"author":{"gitID":"-"},"content":""},{"lineNumber":347,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":348,"author":{"gitID":"-"},"content":""},{"lineNumber":349,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":350,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":351,"author":{"gitID":"-"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags\""},{"lineNumber":352,"author":{"gitID":"-"},"content":"                + reports.asObservableList().size() + \" reports\" + jobs.asObservableList().size() + \" jobs.\";"},{"lineNumber":353,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":354,"author":{"gitID":"-"},"content":""},{"lineNumber":355,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":356,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":357,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":358,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":359,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":360,"author":{"gitID":"-"},"content":"    public ObservableList\u003cJob\u003e getJobList() {"},{"lineNumber":361,"author":{"gitID":"-"},"content":"        return jobs.asObservableList();"},{"lineNumber":362,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":363,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":364,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":365,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":366,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":367,"author":{"gitID":"deeheenguyen"},"content":"    @Override"},{"lineNumber":368,"author":{"gitID":"deeheenguyen"},"content":"    public ObservableList\u003cInterview\u003e getInterviewList() {"},{"lineNumber":369,"author":{"gitID":"deeheenguyen"},"content":"        return interviews.asObservableList();"},{"lineNumber":370,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":371,"author":{"gitID":"-"},"content":""},{"lineNumber":372,"author":{"gitID":"-"},"content":"    public ObservableList\u003cReport\u003e getReportList() {"},{"lineNumber":373,"author":{"gitID":"-"},"content":"        return reports.asObservableList();"},{"lineNumber":374,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":375,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":376,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":377,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":378,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":379,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":380,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":381,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"},{"lineNumber":382,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":383,"author":{"gitID":"-"},"content":""},{"lineNumber":384,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":385,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":386,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":387,"author":{"gitID":"-"},"content":"        return Objects.hash(persons, jobs, reports, tags);"},{"lineNumber":388,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":389,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"deeheenguyen":37,"ChengSashankh":66,"-":284,"tiny767":2}},{"path":"src/main/java/seedu/address/model/interview/exceptions/DuplicateInterviewException.java","lines":[{"lineNumber":1,"author":{"gitID":"deeheenguyen"},"content":"package seedu.address.model.interview.exceptions;"},{"lineNumber":2,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":5,"author":{"gitID":"deeheenguyen"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":" * Signals that the operation will result in duplicate Interview objects."},{"lineNumber":7,"author":{"gitID":"deeheenguyen"},"content":" */"},{"lineNumber":8,"author":{"gitID":"deeheenguyen"},"content":"public class DuplicateInterviewException extends DuplicateDataException {"},{"lineNumber":9,"author":{"gitID":"deeheenguyen"},"content":"    public DuplicateInterviewException() {"},{"lineNumber":10,"author":{"gitID":"-"},"content":"        super(\"Operation would result in duplicate jobs\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"deeheenguyen":8,"-":4}},{"path":"src/main/java/seedu/address/model/interview/exceptions/InterviewNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"deeheenguyen"},"content":"package seedu.address.model.interview.exceptions;"},{"lineNumber":2,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":3,"author":{"gitID":"deeheenguyen"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"deeheenguyen"},"content":" * Signals that the operation is unable to find the specified interview."},{"lineNumber":5,"author":{"gitID":"deeheenguyen"},"content":" */"},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":"public class InterviewNotFoundException extends Exception {}"}],"authorContributionMap":{"deeheenguyen":6}},{"path":"src/main/java/seedu/address/model/interview/InterviewTitle.java","lines":[{"lineNumber":1,"author":{"gitID":"deeheenguyen"},"content":"//@@author deeheenguyen"},{"lineNumber":2,"author":{"gitID":"deeheenguyen"},"content":"package seedu.address.model.interview;"},{"lineNumber":3,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":4,"author":{"gitID":"deeheenguyen"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":7,"author":{"gitID":"deeheenguyen"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"deeheenguyen"},"content":" * Represents a Interview\u0027s title in the address book."},{"lineNumber":9,"author":{"gitID":"deeheenguyen"},"content":" * Guarantees: immutable; is valid as declared in {@title #isValidTitle(String)}"},{"lineNumber":10,"author":{"gitID":"deeheenguyen"},"content":" */"},{"lineNumber":11,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":12,"author":{"gitID":"deeheenguyen"},"content":"public class InterviewTitle {"},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":"    public static final String MESSAGE_TITLE_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":"            \"Interview Title should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":15,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":16,"author":{"gitID":"deeheenguyen"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"deeheenguyen"},"content":"     * The first character of the name must not be a whitespace,"},{"lineNumber":18,"author":{"gitID":"deeheenguyen"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"deeheenguyen"},"content":"    public static final String TITLE_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":21,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":22,"author":{"gitID":"deeheenguyen"},"content":"    public final String fullTitle;"},{"lineNumber":23,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"deeheenguyen"},"content":"     * Constructs a {@code JobTitle}."},{"lineNumber":26,"author":{"gitID":"deeheenguyen"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"deeheenguyen"},"content":"     * @param title A valid interview title."},{"lineNumber":28,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"deeheenguyen"},"content":"    public InterviewTitle(String title) {"},{"lineNumber":30,"author":{"gitID":"deeheenguyen"},"content":"        requireNonNull(title);"},{"lineNumber":31,"author":{"gitID":"deeheenguyen"},"content":"        checkArgument(isValidTitle(title), MESSAGE_TITLE_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"deeheenguyen"},"content":"        this.fullTitle \u003d title;"},{"lineNumber":33,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":35,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"deeheenguyen"},"content":"     * Returns true if a given string is a valid job title."},{"lineNumber":37,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"deeheenguyen"},"content":"    public static boolean isValidTitle(String test) {"},{"lineNumber":39,"author":{"gitID":"deeheenguyen"},"content":"        return test.matches(TITLE_VALIDATION_REGEX);"},{"lineNumber":40,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":42,"author":{"gitID":"deeheenguyen"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"deeheenguyen"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"deeheenguyen"},"content":"        return fullTitle;"},{"lineNumber":45,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":47,"author":{"gitID":"deeheenguyen"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"deeheenguyen"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"deeheenguyen"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"deeheenguyen"},"content":"                || (other instanceof seedu.address.model.interview.InterviewTitle // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"deeheenguyen"},"content":"                \u0026\u0026 this.fullTitle.equals(((InterviewTitle) other).fullTitle)); // state check"},{"lineNumber":52,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":54,"author":{"gitID":"deeheenguyen"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"deeheenguyen"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"deeheenguyen"},"content":"        return fullTitle.hashCode();"},{"lineNumber":57,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"deeheenguyen"},"content":"}"},{"lineNumber":59,"author":{"gitID":"deeheenguyen"},"content":"//author@@ deeheenguyen"}],"authorContributionMap":{"deeheenguyen":59}},{"path":"src/main/java/seedu/address/model/interview/Interview.java","lines":[{"lineNumber":1,"author":{"gitID":"deeheenguyen"},"content":"//@@author deeheenguyen"},{"lineNumber":2,"author":{"gitID":"deeheenguyen"},"content":"package seedu.address.model.interview;"},{"lineNumber":3,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":4,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":8,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":9,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":10,"author":{"gitID":"deeheenguyen"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"deeheenguyen"},"content":" * Represents an Interview in the address book."},{"lineNumber":12,"author":{"gitID":"deeheenguyen"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":" */"},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":"public class Interview {"},{"lineNumber":15,"author":{"gitID":"deeheenguyen"},"content":"    private InterviewTitle interviewTitle;"},{"lineNumber":16,"author":{"gitID":"deeheenguyen"},"content":"    private Name interviewee;"},{"lineNumber":17,"author":{"gitID":"deeheenguyen"},"content":"    private Date date;"},{"lineNumber":18,"author":{"gitID":"deeheenguyen"},"content":"    private InterviewLocation interviewLocation;"},{"lineNumber":19,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":20,"author":{"gitID":"deeheenguyen"},"content":"    public Interview(InterviewTitle interviewTitle, Name interviewee, Date date, InterviewLocation location) {"},{"lineNumber":21,"author":{"gitID":"deeheenguyen"},"content":"        requireAllNonNull(interviewTitle, interviewee, date, location);"},{"lineNumber":22,"author":{"gitID":"deeheenguyen"},"content":"        this.interviewTitle \u003d interviewTitle;"},{"lineNumber":23,"author":{"gitID":"deeheenguyen"},"content":"        this.interviewee \u003d interviewee;"},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":"        this.date \u003d date;"},{"lineNumber":25,"author":{"gitID":"deeheenguyen"},"content":"        this.interviewLocation \u003d location;"},{"lineNumber":26,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":28,"author":{"gitID":"deeheenguyen"},"content":"    public InterviewTitle getInterviewTitle() {"},{"lineNumber":29,"author":{"gitID":"deeheenguyen"},"content":"        return this.interviewTitle;"},{"lineNumber":30,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":32,"author":{"gitID":"deeheenguyen"},"content":"    public Name getInterviewee() {"},{"lineNumber":33,"author":{"gitID":"deeheenguyen"},"content":"        return this.interviewee;"},{"lineNumber":34,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":36,"author":{"gitID":"deeheenguyen"},"content":"    public Date getDate() {"},{"lineNumber":37,"author":{"gitID":"deeheenguyen"},"content":"        return this.date;"},{"lineNumber":38,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":40,"author":{"gitID":"deeheenguyen"},"content":"    public InterviewLocation getInterviewLocation() {"},{"lineNumber":41,"author":{"gitID":"deeheenguyen"},"content":"        return this.interviewLocation;"},{"lineNumber":42,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":44,"author":{"gitID":"deeheenguyen"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"deeheenguyen"},"content":"    public boolean equals(Object other) {"},{"lineNumber":46,"author":{"gitID":"deeheenguyen"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":47,"author":{"gitID":"deeheenguyen"},"content":"            return true;"},{"lineNumber":48,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":50,"author":{"gitID":"deeheenguyen"},"content":"        if (!(other instanceof Interview)) {"},{"lineNumber":51,"author":{"gitID":"deeheenguyen"},"content":"            return false;"},{"lineNumber":52,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"deeheenguyen"},"content":"        Interview otherInterview \u003d (Interview) other;"},{"lineNumber":54,"author":{"gitID":"deeheenguyen"},"content":"        return otherInterview.getInterviewTitle().equals(this.getInterviewTitle())"},{"lineNumber":55,"author":{"gitID":"deeheenguyen"},"content":"                \u0026\u0026 otherInterview.getInterviewee().equals(this.getInterviewee())"},{"lineNumber":56,"author":{"gitID":"deeheenguyen"},"content":"                \u0026\u0026 otherInterview.getDate().equals(this.getDate())"},{"lineNumber":57,"author":{"gitID":"deeheenguyen"},"content":"                \u0026\u0026 otherInterview.getInterviewLocation().equals(this.getInterviewLocation());"},{"lineNumber":58,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":60,"author":{"gitID":"deeheenguyen"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"deeheenguyen"},"content":"    public int hashCode() {"},{"lineNumber":62,"author":{"gitID":"deeheenguyen"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":63,"author":{"gitID":"deeheenguyen"},"content":"        return Objects.hash(interviewTitle, interviewee, date, interviewLocation);"},{"lineNumber":64,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":66,"author":{"gitID":"deeheenguyen"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"deeheenguyen"},"content":"    public String toString() {"},{"lineNumber":68,"author":{"gitID":"deeheenguyen"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":69,"author":{"gitID":"deeheenguyen"},"content":"        builder.append(\" Interview Title: \")"},{"lineNumber":70,"author":{"gitID":"deeheenguyen"},"content":"                .append(getInterviewTitle())"},{"lineNumber":71,"author":{"gitID":"deeheenguyen"},"content":"                .append(\" Interviewee: \")"},{"lineNumber":72,"author":{"gitID":"deeheenguyen"},"content":"                .append(getInterviewee())"},{"lineNumber":73,"author":{"gitID":"deeheenguyen"},"content":"                .append(\" Date: \")"},{"lineNumber":74,"author":{"gitID":"deeheenguyen"},"content":"                .append(getDate())"},{"lineNumber":75,"author":{"gitID":"deeheenguyen"},"content":"                .append(\" Interview Location: \")"},{"lineNumber":76,"author":{"gitID":"deeheenguyen"},"content":"                .append(getInterviewLocation());"},{"lineNumber":77,"author":{"gitID":"deeheenguyen"},"content":"        return builder.toString();"},{"lineNumber":78,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"deeheenguyen"},"content":"}"}],"authorContributionMap":{"deeheenguyen":79}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedInterview.java","lines":[{"lineNumber":1,"author":{"gitID":"deeheenguyen"},"content":"//@@author deeheenguyen"},{"lineNumber":2,"author":{"gitID":"deeheenguyen"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":4,"author":{"gitID":"deeheenguyen"},"content":"import java.util.Objects;"},{"lineNumber":5,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":7,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":8,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.Date;"},{"lineNumber":10,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.Interview;"},{"lineNumber":11,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.InterviewLocation;"},{"lineNumber":12,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.InterviewTitle;"},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":15,"author":{"gitID":"deeheenguyen"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"deeheenguyen"},"content":" * JAXB-friendly version of the Job."},{"lineNumber":17,"author":{"gitID":"deeheenguyen"},"content":" */"},{"lineNumber":18,"author":{"gitID":"deeheenguyen"},"content":"public class XmlAdaptedInterview {"},{"lineNumber":19,"author":{"gitID":"deeheenguyen"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Interview\u0027s %s field is missing!\";"},{"lineNumber":20,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":21,"author":{"gitID":"deeheenguyen"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":22,"author":{"gitID":"deeheenguyen"},"content":"    private String interviewTitle;"},{"lineNumber":23,"author":{"gitID":"deeheenguyen"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":"    private String interviewLocation;"},{"lineNumber":25,"author":{"gitID":"deeheenguyen"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":26,"author":{"gitID":"deeheenguyen"},"content":"    private String interviewee;"},{"lineNumber":27,"author":{"gitID":"deeheenguyen"},"content":"    @XmlElement (required \u003d true)"},{"lineNumber":28,"author":{"gitID":"deeheenguyen"},"content":"    private String date;"},{"lineNumber":29,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":30,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"deeheenguyen"},"content":"     * Constructs an XmlAdaptedInterview."},{"lineNumber":32,"author":{"gitID":"deeheenguyen"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":33,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"deeheenguyen"},"content":"    public XmlAdaptedInterview() {}"},{"lineNumber":35,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":36,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"deeheenguyen"},"content":"     * Constructs an {@code XmlAdaptedInterview} with the given interview details."},{"lineNumber":38,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"deeheenguyen"},"content":"    public XmlAdaptedInterview(String interviewTitle, String interviewee, String date, String location) {"},{"lineNumber":40,"author":{"gitID":"deeheenguyen"},"content":"        this.interviewTitle \u003d interviewTitle;"},{"lineNumber":41,"author":{"gitID":"deeheenguyen"},"content":"        this.interviewLocation \u003d location;"},{"lineNumber":42,"author":{"gitID":"deeheenguyen"},"content":"        this.date \u003d date;"},{"lineNumber":43,"author":{"gitID":"deeheenguyen"},"content":"        this.interviewee \u003d interviewee;"},{"lineNumber":44,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":46,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"deeheenguyen"},"content":"     * Converts a given Interview into this class for JAXB use."},{"lineNumber":48,"author":{"gitID":"deeheenguyen"},"content":"     *"},{"lineNumber":49,"author":{"gitID":"deeheenguyen"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedInterview"},{"lineNumber":50,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"deeheenguyen"},"content":"    public XmlAdaptedInterview(Interview source) {"},{"lineNumber":52,"author":{"gitID":"deeheenguyen"},"content":"        interviewTitle \u003d source.getInterviewTitle().toString();"},{"lineNumber":53,"author":{"gitID":"deeheenguyen"},"content":"        interviewLocation \u003d source.getInterviewLocation().toString();"},{"lineNumber":54,"author":{"gitID":"deeheenguyen"},"content":"        interviewee \u003d source.getInterviewee().toString();"},{"lineNumber":55,"author":{"gitID":"deeheenguyen"},"content":"        date \u003d source.getDate().toString();"},{"lineNumber":56,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":58,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"deeheenguyen"},"content":"     * Converts this jaxb-friendly adapted interview object into the model\u0027s job object."},{"lineNumber":60,"author":{"gitID":"deeheenguyen"},"content":"     *"},{"lineNumber":61,"author":{"gitID":"deeheenguyen"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted interview"},{"lineNumber":62,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"deeheenguyen"},"content":"    public Interview toModelType() throws IllegalValueException {"},{"lineNumber":64,"author":{"gitID":"deeheenguyen"},"content":"        if (this.interviewTitle \u003d\u003d null) {"},{"lineNumber":65,"author":{"gitID":"deeheenguyen"},"content":"            throw new IllegalValueException("},{"lineNumber":66,"author":{"gitID":"deeheenguyen"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, InterviewTitle.class.getSimpleName()));"},{"lineNumber":67,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"deeheenguyen"},"content":"        if (!InterviewTitle.isValidTitle(this.interviewTitle)) {"},{"lineNumber":69,"author":{"gitID":"deeheenguyen"},"content":"            throw new IllegalValueException(InterviewTitle.MESSAGE_TITLE_CONSTRAINTS);"},{"lineNumber":70,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"deeheenguyen"},"content":"        final InterviewTitle interviewTitle \u003d new InterviewTitle(this.interviewTitle);"},{"lineNumber":72,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":73,"author":{"gitID":"deeheenguyen"},"content":"        if (this.interviewee \u003d\u003d null) {"},{"lineNumber":74,"author":{"gitID":"deeheenguyen"},"content":"            throw new IllegalValueException("},{"lineNumber":75,"author":{"gitID":"deeheenguyen"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":76,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"deeheenguyen"},"content":"        if (!Name.isValidName(this.interviewee)) {"},{"lineNumber":78,"author":{"gitID":"deeheenguyen"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":79,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"deeheenguyen"},"content":"        final Name interviewee \u003d new Name(this.interviewee);"},{"lineNumber":81,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":82,"author":{"gitID":"deeheenguyen"},"content":"        if (this.interviewLocation \u003d\u003d null) {"},{"lineNumber":83,"author":{"gitID":"deeheenguyen"},"content":"            throw new IllegalValueException("},{"lineNumber":84,"author":{"gitID":"deeheenguyen"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, InterviewLocation.class.getSimpleName()));"},{"lineNumber":85,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"deeheenguyen"},"content":"        if (!InterviewLocation.isValidLocation(this.interviewLocation)) {"},{"lineNumber":87,"author":{"gitID":"deeheenguyen"},"content":"            throw new IllegalValueException(InterviewLocation.MESSAGE_LOCATION_CONSTRAINTS);"},{"lineNumber":88,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"deeheenguyen"},"content":"        final InterviewLocation interviewLocation \u003d new InterviewLocation(this.interviewLocation);"},{"lineNumber":90,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":91,"author":{"gitID":"deeheenguyen"},"content":"        if (this.date \u003d\u003d null) {"},{"lineNumber":92,"author":{"gitID":"deeheenguyen"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"},{"lineNumber":93,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"deeheenguyen"},"content":"        if (!Date.isValidDate(this.date)) {"},{"lineNumber":95,"author":{"gitID":"deeheenguyen"},"content":"            throw new IllegalValueException(Date.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":96,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"deeheenguyen"},"content":"        final Date date \u003d new Date(this.date);"},{"lineNumber":98,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":99,"author":{"gitID":"deeheenguyen"},"content":"        return new Interview(interviewTitle, interviewee, date, interviewLocation);"},{"lineNumber":100,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":102,"author":{"gitID":"deeheenguyen"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"deeheenguyen"},"content":"    public boolean equals(Object other) {"},{"lineNumber":104,"author":{"gitID":"deeheenguyen"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":105,"author":{"gitID":"deeheenguyen"},"content":"            return true;"},{"lineNumber":106,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":108,"author":{"gitID":"deeheenguyen"},"content":"        if (!(other instanceof XmlAdaptedInterview)) {"},{"lineNumber":109,"author":{"gitID":"deeheenguyen"},"content":"            return false;"},{"lineNumber":110,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":112,"author":{"gitID":"deeheenguyen"},"content":"        XmlAdaptedInterview otherInterview \u003d (XmlAdaptedInterview) other;"},{"lineNumber":113,"author":{"gitID":"deeheenguyen"},"content":"        return Objects.equals(interviewTitle, otherInterview.interviewTitle)"},{"lineNumber":114,"author":{"gitID":"deeheenguyen"},"content":"                \u0026\u0026 Objects.equals(interviewee, otherInterview.interviewee)"},{"lineNumber":115,"author":{"gitID":"deeheenguyen"},"content":"                \u0026\u0026 Objects.equals(interviewLocation, otherInterview.interviewLocation)"},{"lineNumber":116,"author":{"gitID":"deeheenguyen"},"content":"                \u0026\u0026 Objects.equals(date, otherInterview.date);"},{"lineNumber":117,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"deeheenguyen"},"content":"}"},{"lineNumber":119,"author":{"gitID":"deeheenguyen"},"content":""}],"authorContributionMap":{"deeheenguyen":119}},{"path":"src/main/java/seedu/address/model/interview/InterviewLocation.java","lines":[{"lineNumber":1,"author":{"gitID":"deeheenguyen"},"content":"//@@author deeheenguyen"},{"lineNumber":2,"author":{"gitID":"deeheenguyen"},"content":"package seedu.address.model.interview;"},{"lineNumber":3,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":4,"author":{"gitID":"deeheenguyen"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":7,"author":{"gitID":"deeheenguyen"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"deeheenguyen"},"content":" * Represents a Interview\u0027s location in the address book."},{"lineNumber":9,"author":{"gitID":"deeheenguyen"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidLocation(String)}"},{"lineNumber":10,"author":{"gitID":"deeheenguyen"},"content":" */"},{"lineNumber":11,"author":{"gitID":"deeheenguyen"},"content":"public class InterviewLocation {"},{"lineNumber":12,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":"    public static final String MESSAGE_LOCATION_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":"            \"Interview locations can take any values, and it should not be blank\";"},{"lineNumber":15,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":16,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":17,"author":{"gitID":"deeheenguyen"},"content":"    /*"},{"lineNumber":18,"author":{"gitID":"deeheenguyen"},"content":"     * The first character of the location must not be a whitespace,"},{"lineNumber":19,"author":{"gitID":"deeheenguyen"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":20,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"deeheenguyen"},"content":"    public static final String LOCATION_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":22,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":23,"author":{"gitID":"deeheenguyen"},"content":"    public final String value;"},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":25,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"deeheenguyen"},"content":"     * Constructs an {@code Location}."},{"lineNumber":27,"author":{"gitID":"deeheenguyen"},"content":"     *"},{"lineNumber":28,"author":{"gitID":"deeheenguyen"},"content":"     * @param location A valid location."},{"lineNumber":29,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"deeheenguyen"},"content":"    public InterviewLocation(String location) {"},{"lineNumber":31,"author":{"gitID":"deeheenguyen"},"content":"        requireNonNull(location);"},{"lineNumber":32,"author":{"gitID":"deeheenguyen"},"content":"        checkArgument(isValidLocation(location), MESSAGE_LOCATION_CONSTRAINTS);"},{"lineNumber":33,"author":{"gitID":"deeheenguyen"},"content":"        this.value \u003d location;"},{"lineNumber":34,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":36,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"deeheenguyen"},"content":"     * Returns true if a given string is a valid interview location."},{"lineNumber":38,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"deeheenguyen"},"content":"    public static boolean isValidLocation(String test) {"},{"lineNumber":40,"author":{"gitID":"deeheenguyen"},"content":"        return test.matches(LOCATION_VALIDATION_REGEX);"},{"lineNumber":41,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":43,"author":{"gitID":"deeheenguyen"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"deeheenguyen"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitID":"deeheenguyen"},"content":"        return value;"},{"lineNumber":46,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":48,"author":{"gitID":"deeheenguyen"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"deeheenguyen"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"deeheenguyen"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"deeheenguyen"},"content":"                || (other instanceof seedu.address.model.interview.InterviewLocation // instanceof handles nulls"},{"lineNumber":52,"author":{"gitID":"deeheenguyen"},"content":"                \u0026\u0026 this.value.equals(((seedu.address.model.interview.InterviewLocation) other).value)); // state check"},{"lineNumber":53,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":55,"author":{"gitID":"deeheenguyen"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"deeheenguyen"},"content":"    public int hashCode() {"},{"lineNumber":57,"author":{"gitID":"deeheenguyen"},"content":"        return value.hashCode();"},{"lineNumber":58,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":60,"author":{"gitID":"deeheenguyen"},"content":"}"},{"lineNumber":61,"author":{"gitID":"deeheenguyen"},"content":"//author@@ deeheenguyen"}],"authorContributionMap":{"deeheenguyen":61}},{"path":"src/main/java/seedu/address/model/interview/Date.java","lines":[{"lineNumber":1,"author":{"gitID":"deeheenguyen"},"content":"//@@author deeheenguyen"},{"lineNumber":2,"author":{"gitID":"deeheenguyen"},"content":"package seedu.address.model.interview;"},{"lineNumber":3,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":4,"author":{"gitID":"deeheenguyen"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":7,"author":{"gitID":"deeheenguyen"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"deeheenguyen"},"content":" * Represents a Interview\u0027s location in the address book."},{"lineNumber":9,"author":{"gitID":"deeheenguyen"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"},{"lineNumber":10,"author":{"gitID":"deeheenguyen"},"content":" */"},{"lineNumber":11,"author":{"gitID":"deeheenguyen"},"content":"public class Date {"},{"lineNumber":12,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":"    public static final String MESSAGE_DATE_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":"            \"Date must be in format dd.mm.yyyy, and it should not be blank\";"},{"lineNumber":15,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":16,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":17,"author":{"gitID":"deeheenguyen"},"content":"    /*"},{"lineNumber":18,"author":{"gitID":"deeheenguyen"},"content":"     * The first character of the date  must not be a whitespace,"},{"lineNumber":19,"author":{"gitID":"deeheenguyen"},"content":"     * be format dd-mm-yyyy."},{"lineNumber":20,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"deeheenguyen"},"content":"    public static final String DATE_VALIDATION_REGEX \u003d"},{"lineNumber":22,"author":{"gitID":"deeheenguyen"},"content":"            \"^\\\\s*(3[01]|[12][0-9]|0?[1-9])\\\\.(1[012]|0?[1-9])\\\\.((?:19|20)\\\\d{2})\\\\s*$\";"},{"lineNumber":23,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":"    public final String value;"},{"lineNumber":25,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":26,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"deeheenguyen"},"content":"     * Constructs an {@code Location}."},{"lineNumber":28,"author":{"gitID":"deeheenguyen"},"content":"     *"},{"lineNumber":29,"author":{"gitID":"deeheenguyen"},"content":"     * @param date A valid date."},{"lineNumber":30,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"deeheenguyen"},"content":"    public Date(String date) {"},{"lineNumber":32,"author":{"gitID":"deeheenguyen"},"content":"        requireNonNull(date);"},{"lineNumber":33,"author":{"gitID":"deeheenguyen"},"content":"        checkArgument(isValidDate(date), MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":34,"author":{"gitID":"deeheenguyen"},"content":"        this.value \u003d date;"},{"lineNumber":35,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":37,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"deeheenguyen"},"content":"     * Returns true if a given string is a valid interview location."},{"lineNumber":39,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"deeheenguyen"},"content":"    public static boolean isValidDate(String test) {"},{"lineNumber":41,"author":{"gitID":"deeheenguyen"},"content":"        return test.matches(DATE_VALIDATION_REGEX);"},{"lineNumber":42,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":44,"author":{"gitID":"deeheenguyen"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"deeheenguyen"},"content":"    public String toString() {"},{"lineNumber":46,"author":{"gitID":"deeheenguyen"},"content":"        return value;"},{"lineNumber":47,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":49,"author":{"gitID":"deeheenguyen"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"deeheenguyen"},"content":"    public boolean equals(Object other) {"},{"lineNumber":51,"author":{"gitID":"deeheenguyen"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":52,"author":{"gitID":"deeheenguyen"},"content":"                || (other instanceof seedu.address.model.interview.Date // instanceof handles nulls"},{"lineNumber":53,"author":{"gitID":"deeheenguyen"},"content":"                \u0026\u0026 this.value.equals(((seedu.address.model.interview.Date) other).value)); // state check"},{"lineNumber":54,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":56,"author":{"gitID":"deeheenguyen"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"deeheenguyen"},"content":"    public int hashCode() {"},{"lineNumber":58,"author":{"gitID":"deeheenguyen"},"content":"        return value.hashCode();"},{"lineNumber":59,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":61,"author":{"gitID":"deeheenguyen"},"content":"}"},{"lineNumber":62,"author":{"gitID":"deeheenguyen"},"content":"//author@@ deeheenguyen"}],"authorContributionMap":{"deeheenguyen":62}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.util.Pair;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":22,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.Interview;"},{"lineNumber":23,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.exceptions.DuplicateInterviewException;"},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.exceptions.InterviewNotFoundException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.job.exceptions.DuplicateJobException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.job.exceptions.JobNotFoundException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.report.Proportion;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.report.Report;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":37,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":38,"author":{"gitID":"-"},"content":" */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final Tag defaultPopulation \u003d new Tag(\"SEIntern\");"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cJob\u003e filteredJobs;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private Report report;"},{"lineNumber":47,"author":{"gitID":"deeheenguyen"},"content":"    private final FilteredList\u003cInterview\u003e filteredInterviews;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cReport\u003e reportList;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        filteredJobs \u003d new FilteredList\u003c\u003e(this.addressBook.getJobList());"},{"lineNumber":62,"author":{"gitID":"deeheenguyen"},"content":"        filteredInterviews \u003d new FilteredList\u003c\u003e(this.addressBook.getInterviewList());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        reportList \u003d new FilteredList\u003c\u003e(this.addressBook.getReportList());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        this.updateReport(defaultPopulation);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"anh2111"},"content":"    // @@author anh2111"},{"lineNumber":109,"author":{"gitID":"anh2111"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"anh2111"},"content":"    public synchronized void addReport(Report report) {"},{"lineNumber":111,"author":{"gitID":"anh2111"},"content":"        addressBook.addReport(report);"},{"lineNumber":112,"author":{"gitID":"anh2111"},"content":"        indicateAddressBookChanged();"},{"lineNumber":113,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"anh2111"},"content":"    // @@author"},{"lineNumber":115,"author":{"gitID":"ChengSashankh"},"content":"    //@@author ChengSashankh"},{"lineNumber":116,"author":{"gitID":"ChengSashankh"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Job List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":117,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":118,"author":{"gitID":"ChengSashankh"},"content":"    @Override"},{"lineNumber":119,"author":{"gitID":"ChengSashankh"},"content":"    public synchronized void addJob(Job job) throws DuplicateJobException {"},{"lineNumber":120,"author":{"gitID":"ChengSashankh"},"content":"        addressBook.addJob(job);"},{"lineNumber":121,"author":{"gitID":"ChengSashankh"},"content":"        updateFilteredJobList(PREDICATE_SHOW_ALL_JOBS);"},{"lineNumber":122,"author":{"gitID":"ChengSashankh"},"content":"        indicateAddressBookChanged();"},{"lineNumber":123,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":125,"author":{"gitID":"ChengSashankh"},"content":"    @Override"},{"lineNumber":126,"author":{"gitID":"ChengSashankh"},"content":"    public void updateJob(Job target, Job editedJob)"},{"lineNumber":127,"author":{"gitID":"ChengSashankh"},"content":"            throws DuplicateJobException, JobNotFoundException {"},{"lineNumber":128,"author":{"gitID":"ChengSashankh"},"content":"        requireAllNonNull(target, editedJob);"},{"lineNumber":129,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":130,"author":{"gitID":"ChengSashankh"},"content":"        addressBook.updateJob(target, editedJob);"},{"lineNumber":131,"author":{"gitID":"ChengSashankh"},"content":"        indicateAddressBookChanged();"},{"lineNumber":132,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":134,"author":{"gitID":"ChengSashankh"},"content":"    @Override"},{"lineNumber":135,"author":{"gitID":"ChengSashankh"},"content":"    public synchronized void deleteJob(Job target) throws JobNotFoundException {"},{"lineNumber":136,"author":{"gitID":"ChengSashankh"},"content":"        addressBook.removeJob(target);"},{"lineNumber":137,"author":{"gitID":"ChengSashankh"},"content":"        indicateAddressBookChanged();"},{"lineNumber":138,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":140,"author":{"gitID":"ChengSashankh"},"content":"    @Override"},{"lineNumber":141,"author":{"gitID":"ChengSashankh"},"content":"    public void updateFilteredJobList(Predicate\u003cJob\u003e predicate) {"},{"lineNumber":142,"author":{"gitID":"ChengSashankh"},"content":"        requireNonNull(predicate);"},{"lineNumber":143,"author":{"gitID":"ChengSashankh"},"content":"        filteredJobs.setPredicate(predicate);"},{"lineNumber":144,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":146,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"ChengSashankh"},"content":"     * Returns an unmodifiable view of the list of {@code Job} backed by the internal list of"},{"lineNumber":148,"author":{"gitID":"ChengSashankh"},"content":"     * {@code addressBook}"},{"lineNumber":149,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"ChengSashankh"},"content":"    @Override"},{"lineNumber":151,"author":{"gitID":"ChengSashankh"},"content":"    public ObservableList\u003cJob\u003e getFilteredJobList() {"},{"lineNumber":152,"author":{"gitID":"ChengSashankh"},"content":"        return FXCollections.unmodifiableObservableList(filteredJobs);"},{"lineNumber":153,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":155,"author":{"gitID":"ChengSashankh"},"content":"    //@@author"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Report Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":175,"author":{"gitID":"anh2111"},"content":"    // @@author anh2111"},{"lineNumber":176,"author":{"gitID":"anh2111"},"content":"    @Override"},{"lineNumber":177,"author":{"gitID":"anh2111"},"content":"    public Report getReport() {"},{"lineNumber":178,"author":{"gitID":"anh2111"},"content":"        return report;"},{"lineNumber":179,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":181,"author":{"gitID":"anh2111"},"content":"    @Override"},{"lineNumber":182,"author":{"gitID":"anh2111"},"content":"    public void updateReport(Tag population) {"},{"lineNumber":183,"author":{"gitID":"anh2111"},"content":"        FilteredList\u003cPerson\u003e allPersonList \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":184,"author":{"gitID":"anh2111"},"content":"        Predicate\u003cPerson\u003e personContainsPopulationTagPredicate \u003d"},{"lineNumber":185,"author":{"gitID":"anh2111"},"content":"            new Predicate\u003cPerson\u003e() {"},{"lineNumber":186,"author":{"gitID":"anh2111"},"content":"                @Override"},{"lineNumber":187,"author":{"gitID":"anh2111"},"content":"                public boolean test(Person person) {"},{"lineNumber":188,"author":{"gitID":"anh2111"},"content":"                    return person.getTags().stream()"},{"lineNumber":189,"author":{"gitID":"anh2111"},"content":"                            .anyMatch(tag -\u003e StringUtil.containsWordIgnoreCase(tag.tagName, population.tagName));"},{"lineNumber":190,"author":{"gitID":"anh2111"},"content":"                }"},{"lineNumber":191,"author":{"gitID":"anh2111"},"content":"            };"},{"lineNumber":192,"author":{"gitID":"anh2111"},"content":"        allPersonList.setPredicate(personContainsPopulationTagPredicate);"},{"lineNumber":193,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":194,"author":{"gitID":"anh2111"},"content":"        Map\u003cString, Pair\u003cInteger, Integer\u003e\u003e counts \u003d new HashMap\u003c\u003e();"},{"lineNumber":195,"author":{"gitID":"anh2111"},"content":"        allPersonList.forEach((p) -\u003e {"},{"lineNumber":196,"author":{"gitID":"anh2111"},"content":"            Set\u003cTag\u003e allTags \u003d p.getTags();"},{"lineNumber":197,"author":{"gitID":"anh2111"},"content":"            for (Tag t : allTags) {"},{"lineNumber":198,"author":{"gitID":"anh2111"},"content":"                if (!t.tagName.equalsIgnoreCase(population.tagName)) {"},{"lineNumber":199,"author":{"gitID":"anh2111"},"content":"                    counts.merge(t.tagName, new Pair\u003c\u003e(1, 1), (a, b) -\u003e"},{"lineNumber":200,"author":{"gitID":"anh2111"},"content":"                            new Pair(a.getKey() + b.getKey(), a.getValue() + b.getValue()));"},{"lineNumber":201,"author":{"gitID":"anh2111"},"content":"                }"},{"lineNumber":202,"author":{"gitID":"anh2111"},"content":"            }"},{"lineNumber":203,"author":{"gitID":"anh2111"},"content":"        });"},{"lineNumber":204,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":205,"author":{"gitID":"anh2111"},"content":"        List\u003cProportion\u003e allProportions \u003d new ArrayList\u003c\u003e();"},{"lineNumber":206,"author":{"gitID":"anh2111"},"content":"        for (Map.Entry\u003cString, Pair\u003cInteger, Integer\u003e\u003e entry : counts.entrySet()) {"},{"lineNumber":207,"author":{"gitID":"anh2111"},"content":"            allProportions.add(new Proportion(entry.getKey(), entry.getValue().getKey(), entry.getValue().getValue()));"},{"lineNumber":208,"author":{"gitID":"anh2111"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":210,"author":{"gitID":"anh2111"},"content":"        report \u003d new Report(population, allProportions, allPersonList.size());"},{"lineNumber":211,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":213,"author":{"gitID":"anh2111"},"content":"    @Override"},{"lineNumber":214,"author":{"gitID":"anh2111"},"content":"    public void refreshReport() {"},{"lineNumber":215,"author":{"gitID":"anh2111"},"content":"        this.updateReport(this.report.getPopulation());"},{"lineNumber":216,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"anh2111"},"content":"    // @@author"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":227,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":233,"author":{"gitID":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"},{"lineNumber":234,"author":{"gitID":"-"},"content":"                \u0026\u0026 filteredJobs.equals(other.filteredJobs);"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"deeheenguyen"},"content":"    //@@author deeheenguyen"},{"lineNumber":238,"author":{"gitID":"deeheenguyen"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Interview List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":239,"author":{"gitID":"deeheenguyen"},"content":"    @Override"},{"lineNumber":240,"author":{"gitID":"deeheenguyen"},"content":"    public synchronized void addInterview(Interview interview) throws DuplicateInterviewException {"},{"lineNumber":241,"author":{"gitID":"deeheenguyen"},"content":"        addressBook.addInterview(interview);"},{"lineNumber":242,"author":{"gitID":"deeheenguyen"},"content":"        updateFilteredInterviewList(PREDICATE_SHOW_ALL_INTERVIEWS);"},{"lineNumber":243,"author":{"gitID":"deeheenguyen"},"content":"        indicateAddressBookChanged();"},{"lineNumber":244,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":246,"author":{"gitID":"deeheenguyen"},"content":"    @Override"},{"lineNumber":247,"author":{"gitID":"deeheenguyen"},"content":"    public synchronized void deleteInterview(Interview target) throws InterviewNotFoundException {"},{"lineNumber":248,"author":{"gitID":"deeheenguyen"},"content":"        addressBook.removeInterview(target);"},{"lineNumber":249,"author":{"gitID":"deeheenguyen"},"content":"        indicateAddressBookChanged();"},{"lineNumber":250,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":252,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":253,"author":{"gitID":"deeheenguyen"},"content":"     * Returns an unmodifiable view of the list of {@code Interview} backed by the internal list of"},{"lineNumber":254,"author":{"gitID":"deeheenguyen"},"content":"     * {@code addressBook}"},{"lineNumber":255,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":256,"author":{"gitID":"deeheenguyen"},"content":"    @Override"},{"lineNumber":257,"author":{"gitID":"deeheenguyen"},"content":"    public ObservableList\u003cInterview\u003e getFilteredInterviewList() {"},{"lineNumber":258,"author":{"gitID":"deeheenguyen"},"content":"        return FXCollections.unmodifiableObservableList(filteredInterviews);"},{"lineNumber":259,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":260,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":261,"author":{"gitID":"deeheenguyen"},"content":"    @Override"},{"lineNumber":262,"author":{"gitID":"deeheenguyen"},"content":"    public void updateFilteredInterviewList(Predicate\u003cInterview\u003e predicate) {"},{"lineNumber":263,"author":{"gitID":"deeheenguyen"},"content":"        requireNonNull(predicate);"},{"lineNumber":264,"author":{"gitID":"deeheenguyen"},"content":"        filteredInterviews.setPredicate(predicate);"},{"lineNumber":265,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"deeheenguyen"},"content":"    //@@author"},{"lineNumber":267,"author":{"gitID":"anh2111"},"content":"    // @@author anh2111"},{"lineNumber":268,"author":{"gitID":"anh2111"},"content":"    /**"},{"lineNumber":269,"author":{"gitID":"anh2111"},"content":"     * Returns an unmodifiable view of the list of {@code Report} backed by the internal list of"},{"lineNumber":270,"author":{"gitID":"anh2111"},"content":"     * {@code addressBook}"},{"lineNumber":271,"author":{"gitID":"anh2111"},"content":"     */"},{"lineNumber":272,"author":{"gitID":"anh2111"},"content":"    @Override"},{"lineNumber":273,"author":{"gitID":"anh2111"},"content":"    public ObservableList\u003cReport\u003e getReportHistory() {"},{"lineNumber":274,"author":{"gitID":"anh2111"},"content":"        reportList.setPredicate(new Predicate\u003cReport\u003e() {"},{"lineNumber":275,"author":{"gitID":"anh2111"},"content":"            @Override"},{"lineNumber":276,"author":{"gitID":"anh2111"},"content":"            public boolean test(Report oldReport) {"},{"lineNumber":277,"author":{"gitID":"anh2111"},"content":"                return oldReport.getPopulation().tagName.equalsIgnoreCase(report.getPopulation().tagName);"},{"lineNumber":278,"author":{"gitID":"anh2111"},"content":"            }"},{"lineNumber":279,"author":{"gitID":"anh2111"},"content":"        });"},{"lineNumber":280,"author":{"gitID":"anh2111"},"content":"        return FXCollections.unmodifiableObservableList(reportList);"},{"lineNumber":281,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":282,"author":{"gitID":"anh2111"},"content":"    // @@author"},{"lineNumber":283,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"deeheenguyen":35,"ChengSashankh":41,"anh2111":66,"-":141}},{"path":"src/main/java/seedu/address/model/interview/UniqueInterviewList.java","lines":[{"lineNumber":1,"author":{"gitID":"deeheenguyen"},"content":"//@@author deeheenguyen"},{"lineNumber":2,"author":{"gitID":"deeheenguyen"},"content":"package seedu.address.model.interview;"},{"lineNumber":3,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":4,"author":{"gitID":"deeheenguyen"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"deeheenguyen"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":7,"author":{"gitID":"deeheenguyen"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"deeheenguyen"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":10,"author":{"gitID":"deeheenguyen"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"deeheenguyen"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.exceptions.DuplicateInterviewException;"},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.exceptions.InterviewNotFoundException;"},{"lineNumber":15,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":16,"author":{"gitID":"deeheenguyen"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"deeheenguyen"},"content":" * A list of interviews that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":18,"author":{"gitID":"deeheenguyen"},"content":" *"},{"lineNumber":19,"author":{"gitID":"deeheenguyen"},"content":" * Supports a minimal set of list operations."},{"lineNumber":20,"author":{"gitID":"deeheenguyen"},"content":" *"},{"lineNumber":21,"author":{"gitID":"deeheenguyen"},"content":" * @see Interview#equals(Object)"},{"lineNumber":22,"author":{"gitID":"deeheenguyen"},"content":" */"},{"lineNumber":23,"author":{"gitID":"deeheenguyen"},"content":"public class UniqueInterviewList implements Iterable\u003cInterview\u003e {"},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":25,"author":{"gitID":"deeheenguyen"},"content":"    private final ObservableList\u003cInterview\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":26,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":27,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"deeheenguyen"},"content":"     * Returns true if the list contains an equivalent person as the given argument."},{"lineNumber":29,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"deeheenguyen"},"content":"    public boolean contains(Interview toCheck) {"},{"lineNumber":31,"author":{"gitID":"deeheenguyen"},"content":"        requireNonNull(toCheck);"},{"lineNumber":32,"author":{"gitID":"deeheenguyen"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":33,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":35,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"deeheenguyen"},"content":"     * Adds a person to the list."},{"lineNumber":37,"author":{"gitID":"deeheenguyen"},"content":"     *"},{"lineNumber":38,"author":{"gitID":"deeheenguyen"},"content":"     * @throws DuplicateInterviewException if the person to add is a duplicate of an existing person in the list."},{"lineNumber":39,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"deeheenguyen"},"content":"    public void add(Interview toAdd) throws DuplicateInterviewException {"},{"lineNumber":41,"author":{"gitID":"deeheenguyen"},"content":"        requireNonNull(toAdd);"},{"lineNumber":42,"author":{"gitID":"deeheenguyen"},"content":"        if (contains(toAdd)) {"},{"lineNumber":43,"author":{"gitID":"deeheenguyen"},"content":"            throw new DuplicateInterviewException();"},{"lineNumber":44,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"deeheenguyen"},"content":"        internalList.add(toAdd);"},{"lineNumber":46,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":48,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"deeheenguyen"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}."},{"lineNumber":50,"author":{"gitID":"deeheenguyen"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"deeheenguyen"},"content":"     * @throws DuplicateInterviewException if the replacement is equivalent to another existing person in the list."},{"lineNumber":52,"author":{"gitID":"deeheenguyen"},"content":"     * @throws InterviewNotFoundException if {@code target} could not be found in the list."},{"lineNumber":53,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"deeheenguyen"},"content":"    public void setInterview(Interview target, Interview editedInterview)"},{"lineNumber":55,"author":{"gitID":"deeheenguyen"},"content":"            throws DuplicateInterviewException, InterviewNotFoundException {"},{"lineNumber":56,"author":{"gitID":"deeheenguyen"},"content":"        requireNonNull(editedInterview);"},{"lineNumber":57,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":58,"author":{"gitID":"deeheenguyen"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":59,"author":{"gitID":"deeheenguyen"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":60,"author":{"gitID":"deeheenguyen"},"content":"            throw new InterviewNotFoundException();"},{"lineNumber":61,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":63,"author":{"gitID":"deeheenguyen"},"content":"        if (!target.equals(editedInterview) \u0026\u0026 internalList.contains(editedInterview)) {"},{"lineNumber":64,"author":{"gitID":"deeheenguyen"},"content":"            throw new DuplicateInterviewException();"},{"lineNumber":65,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":67,"author":{"gitID":"deeheenguyen"},"content":"        internalList.set(index, editedInterview);"},{"lineNumber":68,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":70,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"deeheenguyen"},"content":"     * Removes the equivalent person from the list."},{"lineNumber":72,"author":{"gitID":"deeheenguyen"},"content":"     *"},{"lineNumber":73,"author":{"gitID":"deeheenguyen"},"content":"     * @throws InterviewNotFoundException if no such person could be found in the list."},{"lineNumber":74,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"deeheenguyen"},"content":"    public boolean remove(Interview toRemove) throws InterviewNotFoundException {"},{"lineNumber":76,"author":{"gitID":"deeheenguyen"},"content":"        requireNonNull(toRemove);"},{"lineNumber":77,"author":{"gitID":"deeheenguyen"},"content":"        final boolean interviewFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":78,"author":{"gitID":"deeheenguyen"},"content":"        if (!interviewFoundAndDeleted) {"},{"lineNumber":79,"author":{"gitID":"deeheenguyen"},"content":"            throw new InterviewNotFoundException();"},{"lineNumber":80,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"deeheenguyen"},"content":"        return interviewFoundAndDeleted;"},{"lineNumber":82,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":84,"author":{"gitID":"deeheenguyen"},"content":"    public void setInterviews(UniqueInterviewList replacement) {"},{"lineNumber":85,"author":{"gitID":"deeheenguyen"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":86,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":88,"author":{"gitID":"deeheenguyen"},"content":"    public void setInterviews(List\u003cInterview\u003e interviews) throws DuplicateInterviewException {"},{"lineNumber":89,"author":{"gitID":"deeheenguyen"},"content":"        requireAllNonNull(interviews);"},{"lineNumber":90,"author":{"gitID":"deeheenguyen"},"content":"        final UniqueInterviewList replacement \u003d new UniqueInterviewList();"},{"lineNumber":91,"author":{"gitID":"deeheenguyen"},"content":"        for (final Interview interview : interviews) {"},{"lineNumber":92,"author":{"gitID":"deeheenguyen"},"content":"            replacement.add(interview);"},{"lineNumber":93,"author":{"gitID":"deeheenguyen"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"deeheenguyen"},"content":"        setInterviews(replacement);"},{"lineNumber":95,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":97,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"deeheenguyen"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":99,"author":{"gitID":"deeheenguyen"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"deeheenguyen"},"content":"    public ObservableList\u003cInterview\u003e asObservableList() {"},{"lineNumber":101,"author":{"gitID":"deeheenguyen"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":102,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":104,"author":{"gitID":"deeheenguyen"},"content":"    @Override"},{"lineNumber":105,"author":{"gitID":"deeheenguyen"},"content":"    public Iterator\u003cInterview\u003e iterator() {"},{"lineNumber":106,"author":{"gitID":"deeheenguyen"},"content":"        return internalList.iterator();"},{"lineNumber":107,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":109,"author":{"gitID":"deeheenguyen"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"deeheenguyen"},"content":"    public boolean equals(Object other) {"},{"lineNumber":111,"author":{"gitID":"deeheenguyen"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":112,"author":{"gitID":"deeheenguyen"},"content":"                || (other instanceof UniqueInterviewList // instanceof handles nulls"},{"lineNumber":113,"author":{"gitID":"deeheenguyen"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueInterviewList) other).internalList));"},{"lineNumber":114,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":116,"author":{"gitID":"deeheenguyen"},"content":"    @Override"},{"lineNumber":117,"author":{"gitID":"deeheenguyen"},"content":"    public int hashCode() {"},{"lineNumber":118,"author":{"gitID":"deeheenguyen"},"content":"        return internalList.hashCode();"},{"lineNumber":119,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"deeheenguyen"},"content":"}"},{"lineNumber":121,"author":{"gitID":"deeheenguyen"},"content":"//author@@ deeheenguyen"}],"authorContributionMap":{"deeheenguyen":121}},{"path":"src/main/java/seedu/address/model/interview/InterviewMatchInterviewee.java","lines":[{"lineNumber":1,"author":{"gitID":"deeheenguyen"},"content":"//@@author deeheenguyen"},{"lineNumber":2,"author":{"gitID":"deeheenguyen"},"content":"package seedu.address.model.interview;"},{"lineNumber":3,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":4,"author":{"gitID":"deeheenguyen"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":8,"author":{"gitID":"deeheenguyen"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"deeheenguyen"},"content":" * Tests that a {@code Person}\u0027s {@code skills or address} matches any of the keywords given."},{"lineNumber":10,"author":{"gitID":"deeheenguyen"},"content":" */"},{"lineNumber":11,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":12,"author":{"gitID":"deeheenguyen"},"content":"public class InterviewMatchInterviewee implements Predicate\u003cInterview\u003e {"},{"lineNumber":13,"author":{"gitID":"deeheenguyen"},"content":"    private final String keyword;"},{"lineNumber":14,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":15,"author":{"gitID":"deeheenguyen"},"content":"    public InterviewMatchInterviewee(String keyword) {"},{"lineNumber":16,"author":{"gitID":"deeheenguyen"},"content":"        this.keyword \u003d keyword;"},{"lineNumber":17,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":19,"author":{"gitID":"deeheenguyen"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"deeheenguyen"},"content":"    public boolean test(Interview interview) {"},{"lineNumber":21,"author":{"gitID":"deeheenguyen"},"content":"        return StringUtil.containsWordIgnoreCase(interview.getInterviewee().fullName, keyword);"},{"lineNumber":22,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":24,"author":{"gitID":"deeheenguyen"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"deeheenguyen"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitID":"deeheenguyen"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":27,"author":{"gitID":"deeheenguyen"},"content":"                || (other instanceof InterviewMatchInterviewee // instanceof handles nulls"},{"lineNumber":28,"author":{"gitID":"deeheenguyen"},"content":"                \u0026\u0026 this.keyword.equals(((InterviewMatchInterviewee) other).keyword)); // state check"},{"lineNumber":29,"author":{"gitID":"deeheenguyen"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":31,"author":{"gitID":"deeheenguyen"},"content":"}"},{"lineNumber":32,"author":{"gitID":"deeheenguyen"},"content":"//author@@"}],"authorContributionMap":{"deeheenguyen":32}},{"path":"src/main/java/seedu/address/model/job/exceptions/JobNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.job.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"ChengSashankh"},"content":"//@@author ChengSashankh"},{"lineNumber":4,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":5,"author":{"gitID":"ChengSashankh"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"ChengSashankh"},"content":" * Signals that the operation is unable to find the specified job."},{"lineNumber":7,"author":{"gitID":"ChengSashankh"},"content":" */"},{"lineNumber":8,"author":{"gitID":"ChengSashankh"},"content":"public class JobNotFoundException extends Exception {}"},{"lineNumber":9,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":10,"author":{"gitID":"ChengSashankh"},"content":"//@@author ChengSashankh"}],"authorContributionMap":{"ChengSashankh":8,"-":2}},{"path":"src/main/java/seedu/address/model/job/exceptions/DuplicateJobException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.job.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"ChengSashankh"},"content":"//@@author ChengSashankh"},{"lineNumber":6,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":7,"author":{"gitID":"ChengSashankh"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"ChengSashankh"},"content":" * Signals that the operation will result in duplicate Job objects."},{"lineNumber":9,"author":{"gitID":"ChengSashankh"},"content":" */"},{"lineNumber":10,"author":{"gitID":"ChengSashankh"},"content":"public class DuplicateJobException extends DuplicateDataException {"},{"lineNumber":11,"author":{"gitID":"ChengSashankh"},"content":"    public DuplicateJobException() {"},{"lineNumber":12,"author":{"gitID":"ChengSashankh"},"content":"        super(\"Operation would result in duplicate jobs\");"},{"lineNumber":13,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"ChengSashankh"},"content":"}"},{"lineNumber":15,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":16,"author":{"gitID":"ChengSashankh"},"content":"//@@author"}],"authorContributionMap":{"ChengSashankh":12,"-":4}},{"path":"src/main/java/seedu/address/model/job/PersonMatchesJobPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.job;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"ChengSashankh"},"content":"//@@author ChengSashankh"},{"lineNumber":10,"author":{"gitID":"ChengSashankh"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"ChengSashankh"},"content":" * Tests that a {@code Person}\u0027s {@code skills, address or tags} matches any of the keywords given."},{"lineNumber":12,"author":{"gitID":"ChengSashankh"},"content":" */"},{"lineNumber":13,"author":{"gitID":"ChengSashankh"},"content":"public class PersonMatchesJobPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":14,"author":{"gitID":"ChengSashankh"},"content":"    private final List\u003cString\u003e locationKeywords;"},{"lineNumber":15,"author":{"gitID":"ChengSashankh"},"content":"    private final List\u003cString\u003e skillsKeywords;"},{"lineNumber":16,"author":{"gitID":"ChengSashankh"},"content":"    private final List\u003cString\u003e tagsKeywords;"},{"lineNumber":17,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":18,"author":{"gitID":"ChengSashankh"},"content":"    private final boolean notLocationBound;"},{"lineNumber":19,"author":{"gitID":"ChengSashankh"},"content":"    private final boolean notTagsBound;"},{"lineNumber":20,"author":{"gitID":"ChengSashankh"},"content":"    private final boolean notSkillsBound;"},{"lineNumber":21,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":22,"author":{"gitID":"ChengSashankh"},"content":"    public PersonMatchesJobPredicate(Job job) {"},{"lineNumber":23,"author":{"gitID":"ChengSashankh"},"content":"        this.locationKeywords \u003d new ArrayList\u003cString\u003e();"},{"lineNumber":24,"author":{"gitID":"ChengSashankh"},"content":"        this.tagsKeywords \u003d new ArrayList\u003cString\u003e();"},{"lineNumber":25,"author":{"gitID":"ChengSashankh"},"content":"        this.skillsKeywords \u003d new ArrayList\u003cString\u003e();"},{"lineNumber":26,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":27,"author":{"gitID":"ChengSashankh"},"content":"        for (String entry : job.getSkills().getSkillSet()) {"},{"lineNumber":28,"author":{"gitID":"ChengSashankh"},"content":"            if (!(entry.compareTo(\"ALL\") \u003d\u003d 0)) {"},{"lineNumber":29,"author":{"gitID":"ChengSashankh"},"content":"                this.skillsKeywords.add(entry);"},{"lineNumber":30,"author":{"gitID":"ChengSashankh"},"content":"            }"},{"lineNumber":31,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":33,"author":{"gitID":"ChengSashankh"},"content":"        for (String entry : job.getLocation().toString().split(\",\")) {"},{"lineNumber":34,"author":{"gitID":"ChengSashankh"},"content":"            if (!(entry.compareTo(\"ALL\") \u003d\u003d 0)) {"},{"lineNumber":35,"author":{"gitID":"ChengSashankh"},"content":"                this.locationKeywords.add(entry);"},{"lineNumber":36,"author":{"gitID":"ChengSashankh"},"content":"            }"},{"lineNumber":37,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":39,"author":{"gitID":"ChengSashankh"},"content":"        for (String entry : job.getTags().toString().split(\",\")) {"},{"lineNumber":40,"author":{"gitID":"ChengSashankh"},"content":"            if (!(entry.compareTo(\"ALL\") \u003d\u003d 0)) {"},{"lineNumber":41,"author":{"gitID":"ChengSashankh"},"content":"                entry \u003d entry.trim();"},{"lineNumber":42,"author":{"gitID":"ChengSashankh"},"content":"                entry \u003d entry.replaceAll(\"\\\\[\", \"\");"},{"lineNumber":43,"author":{"gitID":"ChengSashankh"},"content":"                entry \u003d entry.replaceAll(\"\\\\]\", \"\");"},{"lineNumber":44,"author":{"gitID":"ChengSashankh"},"content":"                this.tagsKeywords.add(entry);"},{"lineNumber":45,"author":{"gitID":"ChengSashankh"},"content":"            }"},{"lineNumber":46,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":48,"author":{"gitID":"ChengSashankh"},"content":"        notLocationBound \u003d (job.getLocation().toString().equals(\"ALL\"));"},{"lineNumber":49,"author":{"gitID":"ChengSashankh"},"content":"        notTagsBound \u003d (job.getTags().toString().contains(\"ALL\"));"},{"lineNumber":50,"author":{"gitID":"ChengSashankh"},"content":"        notSkillsBound \u003d (job.getSkills().toString().equals(\"ALL\"));"},{"lineNumber":51,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":53,"author":{"gitID":"ChengSashankh"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"ChengSashankh"},"content":"    public boolean test(Person person) {"},{"lineNumber":55,"author":{"gitID":"ChengSashankh"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();"},{"lineNumber":56,"author":{"gitID":"ChengSashankh"},"content":"        String toMatchPersonAddress \u003d setUpAddressSearch(person, stringBuilder);"},{"lineNumber":57,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":58,"author":{"gitID":"ChengSashankh"},"content":"        stringBuilder \u003d new StringBuilder();"},{"lineNumber":59,"author":{"gitID":"ChengSashankh"},"content":"        String toMatchPersonSkills \u003d setUpSkillsSearch(person, stringBuilder);"},{"lineNumber":60,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":61,"author":{"gitID":"ChengSashankh"},"content":"        stringBuilder \u003d new StringBuilder();"},{"lineNumber":62,"author":{"gitID":"ChengSashankh"},"content":"        String toMatchPersonTags \u003d setUpTagsSearch(person, stringBuilder);"},{"lineNumber":63,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":64,"author":{"gitID":"ChengSashankh"},"content":"        boolean locationMatch \u003d"},{"lineNumber":65,"author":{"gitID":"ChengSashankh"},"content":"                locationKeywords.stream().anyMatch(keyword -\u003e toMatchPersonAddress.contains(keyword.toLowerCase()));"},{"lineNumber":66,"author":{"gitID":"ChengSashankh"},"content":"        boolean skillsMatch \u003d"},{"lineNumber":67,"author":{"gitID":"ChengSashankh"},"content":"                skillsKeywords.stream().anyMatch(keyword -\u003e toMatchPersonSkills.contains(keyword.toLowerCase()));"},{"lineNumber":68,"author":{"gitID":"ChengSashankh"},"content":"        boolean tagsMatch \u003d"},{"lineNumber":69,"author":{"gitID":"ChengSashankh"},"content":"                tagsKeywords.stream().anyMatch(keyword -\u003e toMatchPersonTags.contains(keyword.toLowerCase()));"},{"lineNumber":70,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":71,"author":{"gitID":"ChengSashankh"},"content":"        locationMatch \u003d isLocationMatchSatisfied(locationMatch);"},{"lineNumber":72,"author":{"gitID":"ChengSashankh"},"content":"        skillsMatch \u003d isSkillsMatchSatisfied(skillsMatch);"},{"lineNumber":73,"author":{"gitID":"ChengSashankh"},"content":"        tagsMatch \u003d isTagsMatchSatisfied(tagsMatch);"},{"lineNumber":74,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":75,"author":{"gitID":"ChengSashankh"},"content":"        return locationMatch \u0026\u0026 skillsMatch \u0026\u0026 tagsMatch;"},{"lineNumber":76,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":78,"author":{"gitID":"ChengSashankh"},"content":"    /***"},{"lineNumber":79,"author":{"gitID":"ChengSashankh"},"content":"     * Checks if tag match conditions are satisfied."},{"lineNumber":80,"author":{"gitID":"ChengSashankh"},"content":"     * @param tagsMatch is the boolean variable to be set"},{"lineNumber":81,"author":{"gitID":"ChengSashankh"},"content":"     * @return appropriate value of tagsMatch"},{"lineNumber":82,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"ChengSashankh"},"content":"    private boolean isTagsMatchSatisfied(boolean tagsMatch) {"},{"lineNumber":84,"author":{"gitID":"ChengSashankh"},"content":"        if (notTagsBound) {"},{"lineNumber":85,"author":{"gitID":"ChengSashankh"},"content":"            tagsMatch \u003d true;"},{"lineNumber":86,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"ChengSashankh"},"content":"        return tagsMatch;"},{"lineNumber":88,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":90,"author":{"gitID":"ChengSashankh"},"content":"    /***"},{"lineNumber":91,"author":{"gitID":"ChengSashankh"},"content":"     * Checks if skills match conditions are satisfied."},{"lineNumber":92,"author":{"gitID":"ChengSashankh"},"content":"     * @param skillsMatch is the boolean variable to be set"},{"lineNumber":93,"author":{"gitID":"ChengSashankh"},"content":"     * @return appropriate value of skillsMatch"},{"lineNumber":94,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"ChengSashankh"},"content":"    private boolean isSkillsMatchSatisfied(boolean skillsMatch) {"},{"lineNumber":96,"author":{"gitID":"ChengSashankh"},"content":"        if (notSkillsBound) {"},{"lineNumber":97,"author":{"gitID":"ChengSashankh"},"content":"            skillsMatch \u003d true;"},{"lineNumber":98,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"ChengSashankh"},"content":"        return skillsMatch;"},{"lineNumber":100,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":102,"author":{"gitID":"ChengSashankh"},"content":"    /***"},{"lineNumber":103,"author":{"gitID":"ChengSashankh"},"content":"     * Checks if location match conditions are satisfied."},{"lineNumber":104,"author":{"gitID":"ChengSashankh"},"content":"     * @param locationMatch is the boolean variable to be set"},{"lineNumber":105,"author":{"gitID":"ChengSashankh"},"content":"     * @return appropriate value of locationMatch"},{"lineNumber":106,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"ChengSashankh"},"content":"    private boolean isLocationMatchSatisfied(boolean locationMatch) {"},{"lineNumber":108,"author":{"gitID":"ChengSashankh"},"content":"        if (notLocationBound) {"},{"lineNumber":109,"author":{"gitID":"ChengSashankh"},"content":"            locationMatch \u003d true;"},{"lineNumber":110,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"ChengSashankh"},"content":"        return locationMatch;"},{"lineNumber":112,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":114,"author":{"gitID":"ChengSashankh"},"content":"    /***"},{"lineNumber":115,"author":{"gitID":"ChengSashankh"},"content":"     * Identifies the set of keywords to be matched for tags based matching of candidates."},{"lineNumber":116,"author":{"gitID":"ChengSashankh"},"content":"     * @param person who is tested for a match currently"},{"lineNumber":117,"author":{"gitID":"ChengSashankh"},"content":"     * @param stringBuilder which accumulates the keyword string"},{"lineNumber":118,"author":{"gitID":"ChengSashankh"},"content":"     * @return the complete keywords string"},{"lineNumber":119,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"ChengSashankh"},"content":"    private String setUpTagsSearch(Person person, StringBuilder stringBuilder) {"},{"lineNumber":121,"author":{"gitID":"ChengSashankh"},"content":"        String[] toMatchPersonTagsWords \u003d person.getTags().toString().split(\",\");"},{"lineNumber":122,"author":{"gitID":"ChengSashankh"},"content":"        for (String entry : toMatchPersonTagsWords) {"},{"lineNumber":123,"author":{"gitID":"ChengSashankh"},"content":"            if (!(entry.compareTo(\"ALL\") \u003d\u003d 0)) {"},{"lineNumber":124,"author":{"gitID":"ChengSashankh"},"content":"                entry \u003d entry.trim().toLowerCase();"},{"lineNumber":125,"author":{"gitID":"ChengSashankh"},"content":"                entry \u003d entry.replaceAll(\"\\\\[\", \"\");"},{"lineNumber":126,"author":{"gitID":"ChengSashankh"},"content":"                entry \u003d entry.replaceAll(\"\\\\]\", \"\");"},{"lineNumber":127,"author":{"gitID":"ChengSashankh"},"content":"                stringBuilder.append(\" \" + entry + \" \");"},{"lineNumber":128,"author":{"gitID":"ChengSashankh"},"content":"            }"},{"lineNumber":129,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"ChengSashankh"},"content":"        return stringBuilder.toString();"},{"lineNumber":131,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":133,"author":{"gitID":"ChengSashankh"},"content":"    /***"},{"lineNumber":134,"author":{"gitID":"ChengSashankh"},"content":"     * Identifies the set of keywords to be matched for skills based matching of candidates."},{"lineNumber":135,"author":{"gitID":"ChengSashankh"},"content":"     * @param person who is tested for a match currently"},{"lineNumber":136,"author":{"gitID":"ChengSashankh"},"content":"     * @param stringBuilder which accumulates the keyword string"},{"lineNumber":137,"author":{"gitID":"ChengSashankh"},"content":"     * @return the complete keywords string"},{"lineNumber":138,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"ChengSashankh"},"content":"    private String setUpSkillsSearch(Person person, StringBuilder stringBuilder) {"},{"lineNumber":140,"author":{"gitID":"ChengSashankh"},"content":"        String[] toMatchPersonSkillsWords \u003d person.getSkills().toString().split(\",\");"},{"lineNumber":141,"author":{"gitID":"ChengSashankh"},"content":"        for (String entry : toMatchPersonSkillsWords) {"},{"lineNumber":142,"author":{"gitID":"ChengSashankh"},"content":"            if (!(entry.compareTo(\"ALL\") \u003d\u003d 0)) {"},{"lineNumber":143,"author":{"gitID":"ChengSashankh"},"content":"                entry \u003d entry.trim().toLowerCase();"},{"lineNumber":144,"author":{"gitID":"ChengSashankh"},"content":"                stringBuilder.append(\" \" + entry + \" \");"},{"lineNumber":145,"author":{"gitID":"ChengSashankh"},"content":"            }"},{"lineNumber":146,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"ChengSashankh"},"content":"        return stringBuilder.toString();"},{"lineNumber":148,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":150,"author":{"gitID":"ChengSashankh"},"content":"    /***"},{"lineNumber":151,"author":{"gitID":"ChengSashankh"},"content":"     * Identifies the set of keywords to be matched for location based matching of candidates."},{"lineNumber":152,"author":{"gitID":"ChengSashankh"},"content":"     * @param person who is tested for a match currently"},{"lineNumber":153,"author":{"gitID":"ChengSashankh"},"content":"     * @param stringBuilder which accumulates the keyword string"},{"lineNumber":154,"author":{"gitID":"ChengSashankh"},"content":"     * @return the complete keywords string"},{"lineNumber":155,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"ChengSashankh"},"content":"    private String setUpAddressSearch(Person person, StringBuilder stringBuilder) {"},{"lineNumber":157,"author":{"gitID":"ChengSashankh"},"content":"        String[] toMatchPersonAddressWords \u003d person.getAddress().toString().split(\",\");"},{"lineNumber":158,"author":{"gitID":"ChengSashankh"},"content":"        for (String entry : toMatchPersonAddressWords) {"},{"lineNumber":159,"author":{"gitID":"ChengSashankh"},"content":"            if (!(entry.compareTo(\"ALL\") \u003d\u003d 0)) {"},{"lineNumber":160,"author":{"gitID":"ChengSashankh"},"content":"                entry \u003d entry.trim().toLowerCase();"},{"lineNumber":161,"author":{"gitID":"ChengSashankh"},"content":"                stringBuilder.append(\" \" + entry + \" \");"},{"lineNumber":162,"author":{"gitID":"ChengSashankh"},"content":"            }"},{"lineNumber":163,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"ChengSashankh"},"content":"        return stringBuilder.toString();"},{"lineNumber":165,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":167,"author":{"gitID":"ChengSashankh"},"content":"    @Override"},{"lineNumber":168,"author":{"gitID":"ChengSashankh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":169,"author":{"gitID":"ChengSashankh"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":170,"author":{"gitID":"ChengSashankh"},"content":"                || (other instanceof PersonMatchesJobPredicate// instanceof handles nulls"},{"lineNumber":171,"author":{"gitID":"ChengSashankh"},"content":"                \u0026\u0026 this.locationKeywords.equals(("},{"lineNumber":172,"author":{"gitID":"ChengSashankh"},"content":"                        (PersonMatchesJobPredicate) other).locationKeywords)"},{"lineNumber":173,"author":{"gitID":"ChengSashankh"},"content":"                \u0026\u0026 this.skillsKeywords.equals(("},{"lineNumber":174,"author":{"gitID":"ChengSashankh"},"content":"                (PersonMatchesJobPredicate) other).skillsKeywords)"},{"lineNumber":175,"author":{"gitID":"ChengSashankh"},"content":"                \u0026\u0026 this.tagsKeywords.equals(("},{"lineNumber":176,"author":{"gitID":"ChengSashankh"},"content":"                (PersonMatchesJobPredicate) other).tagsKeywords)); // state check"},{"lineNumber":177,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"ChengSashankh"},"content":"}"},{"lineNumber":179,"author":{"gitID":"ChengSashankh"},"content":"//@@author"}],"authorContributionMap":{"ChengSashankh":171,"-":8}},{"path":"src/main/java/seedu/address/model/job/JobTitle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.job;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"ChengSashankh"},"content":"//@@author ChengSashankh"},{"lineNumber":7,"author":{"gitID":"ChengSashankh"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"ChengSashankh"},"content":" * Represents a Job\u0027s title in the address book."},{"lineNumber":9,"author":{"gitID":"ChengSashankh"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidTitle(String)}"},{"lineNumber":10,"author":{"gitID":"ChengSashankh"},"content":" */"},{"lineNumber":11,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":12,"author":{"gitID":"ChengSashankh"},"content":"public class JobTitle {"},{"lineNumber":13,"author":{"gitID":"ChengSashankh"},"content":"    public static final String MESSAGE_TITLE_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"ChengSashankh"},"content":"            \"Job title should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":15,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":16,"author":{"gitID":"ChengSashankh"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"ChengSashankh"},"content":"     * The first character of the jobTitle must not be a whitespace,"},{"lineNumber":18,"author":{"gitID":"ChengSashankh"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"ChengSashankh"},"content":"    public static final String TITLE_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":21,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":22,"author":{"gitID":"ChengSashankh"},"content":"    public final String fullTitle;"},{"lineNumber":23,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":24,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"ChengSashankh"},"content":"     * Constructs a {@code JobTitle}."},{"lineNumber":26,"author":{"gitID":"ChengSashankh"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"ChengSashankh"},"content":"     * @param title A valid job title."},{"lineNumber":28,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"ChengSashankh"},"content":"    public JobTitle(String title) {"},{"lineNumber":30,"author":{"gitID":"ChengSashankh"},"content":"        requireNonNull(title);"},{"lineNumber":31,"author":{"gitID":"ChengSashankh"},"content":"        checkArgument(isValidTitle(title), MESSAGE_TITLE_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"ChengSashankh"},"content":"        this.fullTitle \u003d title;"},{"lineNumber":33,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":35,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"ChengSashankh"},"content":"     * Returns true if a given string is a valid job title."},{"lineNumber":37,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"ChengSashankh"},"content":"    public static boolean isValidTitle(String test) {"},{"lineNumber":39,"author":{"gitID":"ChengSashankh"},"content":"        return test.matches(TITLE_VALIDATION_REGEX);"},{"lineNumber":40,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":42,"author":{"gitID":"ChengSashankh"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"ChengSashankh"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"ChengSashankh"},"content":"        return fullTitle;"},{"lineNumber":45,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":47,"author":{"gitID":"ChengSashankh"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"ChengSashankh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"ChengSashankh"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"ChengSashankh"},"content":"                || (other instanceof seedu.address.model.job.JobTitle // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"ChengSashankh"},"content":"                \u0026\u0026 this.fullTitle.compareTo(((JobTitle) other).fullTitle) \u003d\u003d 0); // state check"},{"lineNumber":52,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":54,"author":{"gitID":"ChengSashankh"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"ChengSashankh"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"ChengSashankh"},"content":"        return fullTitle.hashCode();"},{"lineNumber":57,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"ChengSashankh"},"content":"}"},{"lineNumber":59,"author":{"gitID":"ChengSashankh"},"content":"//@@author"}],"authorContributionMap":{"ChengSashankh":54,"-":5}},{"path":"src/main/java/seedu/address/model/job/JobMatchesKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.job;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"ChengSashankh"},"content":"//@@author ChengSashankh"},{"lineNumber":9,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":10,"author":{"gitID":"ChengSashankh"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"ChengSashankh"},"content":" * Tests that a {@code Job}\u0027s {@code JobTitle} or {@code Location} or {@code Tags} matches any of the"},{"lineNumber":12,"author":{"gitID":"ChengSashankh"},"content":" * keywords given."},{"lineNumber":13,"author":{"gitID":"ChengSashankh"},"content":" */"},{"lineNumber":14,"author":{"gitID":"ChengSashankh"},"content":"public class JobMatchesKeywordsPredicate implements Predicate\u003cJob\u003e {"},{"lineNumber":15,"author":{"gitID":"ChengSashankh"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":16,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":17,"author":{"gitID":"ChengSashankh"},"content":"    public JobMatchesKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":18,"author":{"gitID":"ChengSashankh"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":19,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":21,"author":{"gitID":"ChengSashankh"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"ChengSashankh"},"content":"    public boolean test(Job job) {"},{"lineNumber":23,"author":{"gitID":"ChengSashankh"},"content":"        return keywords.stream()"},{"lineNumber":24,"author":{"gitID":"ChengSashankh"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(job.getJobTitle().fullTitle, keyword)"},{"lineNumber":25,"author":{"gitID":"ChengSashankh"},"content":"                        || StringUtil.containsWordIgnoreCase(job.getLocation().toString(), keyword)"},{"lineNumber":26,"author":{"gitID":"ChengSashankh"},"content":"                        || job.getTags().stream()"},{"lineNumber":27,"author":{"gitID":"ChengSashankh"},"content":"                        .anyMatch(tag -\u003e StringUtil.containsWordIgnoreCase(tag.tagName, keyword)));"},{"lineNumber":28,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":30,"author":{"gitID":"ChengSashankh"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"ChengSashankh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":32,"author":{"gitID":"ChengSashankh"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":33,"author":{"gitID":"ChengSashankh"},"content":"                || (other instanceof JobMatchesKeywordsPredicate // instanceof handles nulls"},{"lineNumber":34,"author":{"gitID":"ChengSashankh"},"content":"                \u0026\u0026 this.keywords.equals(((JobMatchesKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":35,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":37,"author":{"gitID":"ChengSashankh"},"content":"}"},{"lineNumber":38,"author":{"gitID":"ChengSashankh"},"content":"//@@author"}],"authorContributionMap":{"ChengSashankh":31,"-":7}},{"path":"src/main/java/seedu/address/model/job/Job.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.job;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.skill.Skill;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"ChengSashankh"},"content":"//@@author ChengSashankh"},{"lineNumber":12,"author":{"gitID":"ChengSashankh"},"content":"/***"},{"lineNumber":13,"author":{"gitID":"ChengSashankh"},"content":" * Represents a Job in the address book."},{"lineNumber":14,"author":{"gitID":"ChengSashankh"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitID":"ChengSashankh"},"content":" */"},{"lineNumber":16,"author":{"gitID":"ChengSashankh"},"content":"public class Job {"},{"lineNumber":17,"author":{"gitID":"ChengSashankh"},"content":"    private final JobTitle jobTitle;"},{"lineNumber":18,"author":{"gitID":"ChengSashankh"},"content":"    private final Location location;"},{"lineNumber":19,"author":{"gitID":"ChengSashankh"},"content":"    private final Skill skills;"},{"lineNumber":20,"author":{"gitID":"ChengSashankh"},"content":"    private final UniqueTagList tags;"},{"lineNumber":21,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":22,"author":{"gitID":"ChengSashankh"},"content":"    public Job(JobTitle jobTitle, Location location, Skill skills, Set\u003cTag\u003e tags) {"},{"lineNumber":23,"author":{"gitID":"ChengSashankh"},"content":"        this.jobTitle \u003d jobTitle;"},{"lineNumber":24,"author":{"gitID":"ChengSashankh"},"content":"        this.location \u003d location;"},{"lineNumber":25,"author":{"gitID":"ChengSashankh"},"content":"        this.skills \u003d skills;"},{"lineNumber":26,"author":{"gitID":"ChengSashankh"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":27,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":29,"author":{"gitID":"ChengSashankh"},"content":"    public JobTitle getJobTitle() {"},{"lineNumber":30,"author":{"gitID":"ChengSashankh"},"content":"        return jobTitle;"},{"lineNumber":31,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":33,"author":{"gitID":"ChengSashankh"},"content":"    public Location getLocation() {"},{"lineNumber":34,"author":{"gitID":"ChengSashankh"},"content":"        return location;"},{"lineNumber":35,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":37,"author":{"gitID":"ChengSashankh"},"content":"    public Skill getSkills() {"},{"lineNumber":38,"author":{"gitID":"ChengSashankh"},"content":"        return skills;"},{"lineNumber":39,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":41,"author":{"gitID":"ChengSashankh"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":42,"author":{"gitID":"ChengSashankh"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":43,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":45,"author":{"gitID":"ChengSashankh"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"ChengSashankh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":47,"author":{"gitID":"ChengSashankh"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":48,"author":{"gitID":"ChengSashankh"},"content":"            return true;"},{"lineNumber":49,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":51,"author":{"gitID":"ChengSashankh"},"content":"        if (!(other instanceof Job)) {"},{"lineNumber":52,"author":{"gitID":"ChengSashankh"},"content":"            return false;"},{"lineNumber":53,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":55,"author":{"gitID":"ChengSashankh"},"content":"        Job otherJob \u003d (Job) other;"},{"lineNumber":56,"author":{"gitID":"ChengSashankh"},"content":"        return otherJob.getJobTitle().equals(this.getJobTitle())"},{"lineNumber":57,"author":{"gitID":"ChengSashankh"},"content":"                \u0026\u0026 otherJob.getLocation().equals(this.getLocation())"},{"lineNumber":58,"author":{"gitID":"ChengSashankh"},"content":"                \u0026\u0026 otherJob.getSkills().equals(this.getSkills())"},{"lineNumber":59,"author":{"gitID":"ChengSashankh"},"content":"                \u0026\u0026 otherJob.getTags().equals(this.getTags());"},{"lineNumber":60,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":62,"author":{"gitID":"ChengSashankh"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"ChengSashankh"},"content":"    public int hashCode() {"},{"lineNumber":64,"author":{"gitID":"ChengSashankh"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":65,"author":{"gitID":"ChengSashankh"},"content":"        return Objects.hash(jobTitle, skills, location, tags);"},{"lineNumber":66,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":68,"author":{"gitID":"ChengSashankh"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"ChengSashankh"},"content":"    public String toString() {"},{"lineNumber":70,"author":{"gitID":"ChengSashankh"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":71,"author":{"gitID":"ChengSashankh"},"content":"        builder.append(getJobTitle())"},{"lineNumber":72,"author":{"gitID":"ChengSashankh"},"content":"                .append(\" Location: \")"},{"lineNumber":73,"author":{"gitID":"ChengSashankh"},"content":"                .append(getLocation())"},{"lineNumber":74,"author":{"gitID":"ChengSashankh"},"content":"                .append(\" Skills: \")"},{"lineNumber":75,"author":{"gitID":"ChengSashankh"},"content":"                .append(getSkills())"},{"lineNumber":76,"author":{"gitID":"ChengSashankh"},"content":"                .append(\" Tags: \");"},{"lineNumber":77,"author":{"gitID":"ChengSashankh"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":78,"author":{"gitID":"ChengSashankh"},"content":"        return builder.toString();"},{"lineNumber":79,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":81,"author":{"gitID":"ChengSashankh"},"content":"}"},{"lineNumber":82,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":83,"author":{"gitID":"ChengSashankh"},"content":"//@@author"}],"authorContributionMap":{"ChengSashankh":73,"-":10}},{"path":"src/main/java/seedu/address/model/job/Location.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.job;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"ChengSashankh"},"content":"//@@author ChengSashankh"},{"lineNumber":7,"author":{"gitID":"ChengSashankh"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"ChengSashankh"},"content":" * Represents a Job\u0027s location in the address book."},{"lineNumber":9,"author":{"gitID":"ChengSashankh"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidLocation(String)}"},{"lineNumber":10,"author":{"gitID":"ChengSashankh"},"content":" */"},{"lineNumber":11,"author":{"gitID":"ChengSashankh"},"content":"public class Location {"},{"lineNumber":12,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":13,"author":{"gitID":"ChengSashankh"},"content":"    public static final String MESSAGE_LOCATION_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"ChengSashankh"},"content":"            \"Job locations can take any values, and it should not be blank\";"},{"lineNumber":15,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":16,"author":{"gitID":"ChengSashankh"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"ChengSashankh"},"content":"     * The first character of the location must not be a whitespace,"},{"lineNumber":18,"author":{"gitID":"ChengSashankh"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"ChengSashankh"},"content":"    public static final String LOCATION_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":21,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":22,"author":{"gitID":"ChengSashankh"},"content":"    public final String value;"},{"lineNumber":23,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":24,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"ChengSashankh"},"content":"     * Constructs an {@code Location}."},{"lineNumber":26,"author":{"gitID":"ChengSashankh"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"ChengSashankh"},"content":"     * @param location A valid location."},{"lineNumber":28,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"ChengSashankh"},"content":"    public Location(String location) {"},{"lineNumber":30,"author":{"gitID":"ChengSashankh"},"content":"        requireNonNull(location);"},{"lineNumber":31,"author":{"gitID":"ChengSashankh"},"content":"        checkArgument(isValidLocation(location), MESSAGE_LOCATION_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"ChengSashankh"},"content":"        this.value \u003d location;"},{"lineNumber":33,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":35,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"ChengSashankh"},"content":"     * Returns true if a given string is a valid job location."},{"lineNumber":37,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"ChengSashankh"},"content":"    public static boolean isValidLocation(String test) {"},{"lineNumber":39,"author":{"gitID":"ChengSashankh"},"content":"        return test.matches(LOCATION_VALIDATION_REGEX);"},{"lineNumber":40,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":42,"author":{"gitID":"ChengSashankh"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"ChengSashankh"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"ChengSashankh"},"content":"        return value;"},{"lineNumber":45,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":47,"author":{"gitID":"ChengSashankh"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"ChengSashankh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"ChengSashankh"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"ChengSashankh"},"content":"                || (other instanceof Location // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"ChengSashankh"},"content":"                \u0026\u0026 this.value.compareTo(((Location) other).value) \u003d\u003d 0); // state check"},{"lineNumber":52,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":54,"author":{"gitID":"ChengSashankh"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"ChengSashankh"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"ChengSashankh"},"content":"        return value.hashCode();"},{"lineNumber":57,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":59,"author":{"gitID":"ChengSashankh"},"content":"}"},{"lineNumber":60,"author":{"gitID":"ChengSashankh"},"content":"//@@author"}],"authorContributionMap":{"ChengSashankh":55,"-":5}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.Interview;"},{"lineNumber":7,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.exceptions.DuplicateInterviewException;"},{"lineNumber":8,"author":{"gitID":"deeheenguyen"},"content":"import seedu.address.model.interview.exceptions.InterviewNotFoundException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.job.Job;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.job.exceptions.DuplicateJobException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.job.exceptions.JobNotFoundException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.report.Report;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    Predicate\u003cJob\u003e PREDICATE_SHOW_ALL_JOBS \u003d unused -\u003e true;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":29,"author":{"gitID":"deeheenguyen"},"content":"    Predicate\u003cInterview\u003e PREDICATE_SHOW_ALL_INTERVIEWS \u003d unused -\u003e true;"},{"lineNumber":30,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    void deletePerson(Person target) throws PersonNotFoundException;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    void addPerson(Person person) throws DuplicatePersonException;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    void updatePerson(Person target, Person editedPerson)"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered job list */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    ObservableList\u003cJob\u003e getFilteredJobList();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"deeheenguyen"},"content":"    /** Returns an unmodifiable view of the filtered interview list */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    ObservableList\u003cReport\u003e getReportHistory();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"deeheenguyen"},"content":"    /** Returns an unmodifiable view of the filtered interview list */"},{"lineNumber":63,"author":{"gitID":"deeheenguyen"},"content":"    ObservableList\u003cInterview\u003e getFilteredInterviewList();"},{"lineNumber":64,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /* Adds the given job. */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    void addJob(Job j) throws DuplicateJobException;"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /** Deletes the given job. */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    void deleteJob(Job target) throws JobNotFoundException;"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Replaces the given job {@code target} with {@code editedJob}."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * @throws DuplicateJobException if updating the job\u0027s details causes the job to be equivalent to"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * @throws JobNotFoundException if {@code target} could not be found in the list."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    void updateJob(Job target, Job editedJob)"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            throws DuplicateJobException, JobNotFoundException;"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered job list to filter by the given {@code predicate}."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    void updateFilteredJobList(Predicate\u003cJob\u003e predicate);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"deeheenguyen"},"content":"    /* Adds the give interview. */"},{"lineNumber":95,"author":{"gitID":"deeheenguyen"},"content":"    void addInterview(Interview interview) throws DuplicateInterviewException;"},{"lineNumber":96,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":97,"author":{"gitID":"deeheenguyen"},"content":"    /** Deletes the given interview. */"},{"lineNumber":98,"author":{"gitID":"deeheenguyen"},"content":"    void deleteInterview(Interview target) throws InterviewNotFoundException;"},{"lineNumber":99,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":100,"author":{"gitID":"deeheenguyen"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"deeheenguyen"},"content":"     * Updates the filter of the filtered interview list to filter by the given {@code predicate}."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"deeheenguyen"},"content":"    void updateFilteredInterviewList(Predicate\u003cInterview\u003e predicate);"},{"lineNumber":105,"author":{"gitID":"deeheenguyen"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    /** Adds the given report */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    void addReport(Report report);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * Updates the {@code population} of the report."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    void updateReport(Tag population);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * refresh the report of the AddressBook."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    void refreshReport();"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * Get the report of the AddressBook."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    Report getReport();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"deeheenguyen":19,"-":104}},{"path":"src/main/java/seedu/address/model/report/Proportion.java","lines":[{"lineNumber":1,"author":{"gitID":"anh2111"},"content":"//@@author anh2111"},{"lineNumber":2,"author":{"gitID":"anh2111"},"content":"package seedu.address.model.report;"},{"lineNumber":3,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":4,"author":{"gitID":"anh2111"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":6,"author":{"gitID":"anh2111"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":8,"author":{"gitID":"anh2111"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"anh2111"},"content":" * Represents a Proportion of a report in the address book."},{"lineNumber":10,"author":{"gitID":"anh2111"},"content":" */"},{"lineNumber":11,"author":{"gitID":"anh2111"},"content":"public class Proportion {"},{"lineNumber":12,"author":{"gitID":"anh2111"},"content":"    public final String tagName;"},{"lineNumber":13,"author":{"gitID":"anh2111"},"content":"    public final int value;"},{"lineNumber":14,"author":{"gitID":"anh2111"},"content":"    public final int totalPersons;"},{"lineNumber":15,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":16,"author":{"gitID":"anh2111"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"anh2111"},"content":"     * Constructs a {@code Proportion}."},{"lineNumber":18,"author":{"gitID":"anh2111"},"content":"     *"},{"lineNumber":19,"author":{"gitID":"anh2111"},"content":"     * @param tagName a valid tag name."},{"lineNumber":20,"author":{"gitID":"anh2111"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"anh2111"},"content":"    public Proportion(String tagName, int value, int totalPersons) {"},{"lineNumber":22,"author":{"gitID":"anh2111"},"content":"        requireNonNull(tagName);"},{"lineNumber":23,"author":{"gitID":"anh2111"},"content":"        assert value \u003e\u003d 0 \u0026\u0026 totalPersons \u003e\u003d 0;"},{"lineNumber":24,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":25,"author":{"gitID":"anh2111"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":26,"author":{"gitID":"anh2111"},"content":"        this.value \u003d value;"},{"lineNumber":27,"author":{"gitID":"anh2111"},"content":"        this.totalPersons \u003d totalPersons;"},{"lineNumber":28,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":30,"author":{"gitID":"anh2111"},"content":"    public String toString() {"},{"lineNumber":31,"author":{"gitID":"anh2111"},"content":"        return tagName + \": \" + Integer.toString(value);"},{"lineNumber":32,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":34,"author":{"gitID":"anh2111"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"anh2111"},"content":"    public boolean equals(Object other) {"},{"lineNumber":36,"author":{"gitID":"anh2111"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":37,"author":{"gitID":"anh2111"},"content":"                || (other instanceof Proportion // instanceof handles nulls"},{"lineNumber":38,"author":{"gitID":"anh2111"},"content":"                \u0026\u0026 this.tagName.equals(((Proportion) other).tagName)) // state check"},{"lineNumber":39,"author":{"gitID":"anh2111"},"content":"                \u0026\u0026 this.value \u003d\u003d ((Proportion) other).value"},{"lineNumber":40,"author":{"gitID":"anh2111"},"content":"                \u0026\u0026 this.totalPersons \u003d\u003d ((Proportion) other).totalPersons;"},{"lineNumber":41,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":43,"author":{"gitID":"anh2111"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"anh2111"},"content":"    public int hashCode() {"},{"lineNumber":45,"author":{"gitID":"anh2111"},"content":"        return Objects.hash(tagName, value, totalPersons);"},{"lineNumber":46,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"anh2111"},"content":"}"},{"lineNumber":48,"author":{"gitID":"anh2111"},"content":"//@@author"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":""}],"authorContributionMap":{"anh2111":48,"-":2}},{"path":"src/main/java/seedu/address/model/job/UniqueJobList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.job;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.job.exceptions.DuplicateJobException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.job.exceptions.JobNotFoundException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"ChengSashankh"},"content":"//@@author ChengSashankh"},{"lineNumber":17,"author":{"gitID":"ChengSashankh"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"ChengSashankh"},"content":" * A list of jobs that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":19,"author":{"gitID":"ChengSashankh"},"content":" *"},{"lineNumber":20,"author":{"gitID":"ChengSashankh"},"content":" * Supports a minimal set of list operations."},{"lineNumber":21,"author":{"gitID":"ChengSashankh"},"content":" *"},{"lineNumber":22,"author":{"gitID":"ChengSashankh"},"content":" * @see Job#equals(Object)"},{"lineNumber":23,"author":{"gitID":"ChengSashankh"},"content":" */"},{"lineNumber":24,"author":{"gitID":"ChengSashankh"},"content":"public class UniqueJobList implements Iterable\u003cJob\u003e {"},{"lineNumber":25,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":26,"author":{"gitID":"ChengSashankh"},"content":"    private final ObservableList\u003cJob\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":27,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":28,"author":{"gitID":"ChengSashankh"},"content":"    /***"},{"lineNumber":29,"author":{"gitID":"ChengSashankh"},"content":"     * Returns true if the list contains an equivalent job as the given argument."},{"lineNumber":30,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"ChengSashankh"},"content":"    public boolean contains(Job toCheck) {"},{"lineNumber":32,"author":{"gitID":"ChengSashankh"},"content":"        requireNonNull(toCheck);"},{"lineNumber":33,"author":{"gitID":"ChengSashankh"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":34,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":36,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"ChengSashankh"},"content":"     * Adds a job to the list."},{"lineNumber":38,"author":{"gitID":"ChengSashankh"},"content":"     *"},{"lineNumber":39,"author":{"gitID":"ChengSashankh"},"content":"     * @throws DuplicateJobException if the job to add is a duplicate of an existing person in the list."},{"lineNumber":40,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"ChengSashankh"},"content":"    public void add(Job toAdd) throws DuplicateJobException {"},{"lineNumber":42,"author":{"gitID":"ChengSashankh"},"content":"        requireNonNull(toAdd);"},{"lineNumber":43,"author":{"gitID":"ChengSashankh"},"content":"        if (contains(toAdd)) {"},{"lineNumber":44,"author":{"gitID":"ChengSashankh"},"content":"            throw new DuplicateJobException();"},{"lineNumber":45,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"ChengSashankh"},"content":"        internalList.add(toAdd);"},{"lineNumber":47,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":49,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"ChengSashankh"},"content":"     * Replaces the job {@code target} in the list with {@code editedJob}."},{"lineNumber":51,"author":{"gitID":"ChengSashankh"},"content":"     *"},{"lineNumber":52,"author":{"gitID":"ChengSashankh"},"content":"     * @throws DuplicateJobException if the replacement is equivalent to another existing person in the list."},{"lineNumber":53,"author":{"gitID":"ChengSashankh"},"content":"     * @throws seedu.address.model.job.exceptions.JobNotFoundException if {@code target} could not be found in the list."},{"lineNumber":54,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"ChengSashankh"},"content":"    public void setJob(Job target, Job editedJob)"},{"lineNumber":56,"author":{"gitID":"ChengSashankh"},"content":"            throws DuplicateJobException, JobNotFoundException {"},{"lineNumber":57,"author":{"gitID":"ChengSashankh"},"content":"        requireNonNull(editedJob);"},{"lineNumber":58,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":59,"author":{"gitID":"ChengSashankh"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":60,"author":{"gitID":"ChengSashankh"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":61,"author":{"gitID":"ChengSashankh"},"content":"            throw new JobNotFoundException();"},{"lineNumber":62,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":64,"author":{"gitID":"ChengSashankh"},"content":"        if (!target.equals(editedJob) \u0026\u0026 internalList.contains(editedJob)) {"},{"lineNumber":65,"author":{"gitID":"ChengSashankh"},"content":"            throw new DuplicateJobException();"},{"lineNumber":66,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":68,"author":{"gitID":"ChengSashankh"},"content":"        internalList.set(index, editedJob);"},{"lineNumber":69,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":71,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"ChengSashankh"},"content":"     * Removes the equivalent person from the list."},{"lineNumber":73,"author":{"gitID":"ChengSashankh"},"content":"     *"},{"lineNumber":74,"author":{"gitID":"ChengSashankh"},"content":"     * @throws PersonNotFoundException if no such person could be found in the list."},{"lineNumber":75,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"ChengSashankh"},"content":"    public boolean remove(Job toRemove) throws JobNotFoundException {"},{"lineNumber":77,"author":{"gitID":"ChengSashankh"},"content":"        requireNonNull(toRemove);"},{"lineNumber":78,"author":{"gitID":"ChengSashankh"},"content":"        final boolean jobFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":79,"author":{"gitID":"ChengSashankh"},"content":"        if (!jobFoundAndDeleted) {"},{"lineNumber":80,"author":{"gitID":"ChengSashankh"},"content":"            throw new JobNotFoundException();"},{"lineNumber":81,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"ChengSashankh"},"content":"        return jobFoundAndDeleted;"},{"lineNumber":83,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":85,"author":{"gitID":"ChengSashankh"},"content":"    public void setJobs(UniqueJobList replacement) {"},{"lineNumber":86,"author":{"gitID":"ChengSashankh"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":87,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":89,"author":{"gitID":"ChengSashankh"},"content":"    public void setJobs(List\u003cJob\u003e jobs) throws DuplicateJobException {"},{"lineNumber":90,"author":{"gitID":"ChengSashankh"},"content":"        requireAllNonNull(jobs);"},{"lineNumber":91,"author":{"gitID":"ChengSashankh"},"content":"        final UniqueJobList replacement \u003d new UniqueJobList();"},{"lineNumber":92,"author":{"gitID":"ChengSashankh"},"content":"        for (final Job job : jobs) {"},{"lineNumber":93,"author":{"gitID":"ChengSashankh"},"content":"            replacement.add(job);"},{"lineNumber":94,"author":{"gitID":"ChengSashankh"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"ChengSashankh"},"content":"        setJobs(replacement);"},{"lineNumber":96,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":98,"author":{"gitID":"ChengSashankh"},"content":"    public Job getJob(Index index) {"},{"lineNumber":99,"author":{"gitID":"ChengSashankh"},"content":"        return internalList.get(index.getZeroBased());"},{"lineNumber":100,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":102,"author":{"gitID":"ChengSashankh"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"ChengSashankh"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":104,"author":{"gitID":"ChengSashankh"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"ChengSashankh"},"content":"    public ObservableList\u003cJob\u003e asObservableList() {"},{"lineNumber":106,"author":{"gitID":"ChengSashankh"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":107,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":109,"author":{"gitID":"ChengSashankh"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"ChengSashankh"},"content":"    public Iterator\u003cJob\u003e iterator() {"},{"lineNumber":111,"author":{"gitID":"ChengSashankh"},"content":"        return internalList.iterator();"},{"lineNumber":112,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":114,"author":{"gitID":"ChengSashankh"},"content":"    @Override"},{"lineNumber":115,"author":{"gitID":"ChengSashankh"},"content":"    public boolean equals(Object other) {"},{"lineNumber":116,"author":{"gitID":"ChengSashankh"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":117,"author":{"gitID":"ChengSashankh"},"content":"                || (other instanceof UniqueJobList // instanceof handles nulls"},{"lineNumber":118,"author":{"gitID":"ChengSashankh"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueJobList) other).internalList));"},{"lineNumber":119,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"ChengSashankh"},"content":""},{"lineNumber":121,"author":{"gitID":"ChengSashankh"},"content":"    @Override"},{"lineNumber":122,"author":{"gitID":"ChengSashankh"},"content":"    public int hashCode() {"},{"lineNumber":123,"author":{"gitID":"ChengSashankh"},"content":"        return internalList.hashCode();"},{"lineNumber":124,"author":{"gitID":"ChengSashankh"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"ChengSashankh"},"content":"}"},{"lineNumber":126,"author":{"gitID":"ChengSashankh"},"content":"//@@author"}],"authorContributionMap":{"ChengSashankh":111,"-":15}},{"path":"src/main/java/seedu/address/model/report/Report.java","lines":[{"lineNumber":1,"author":{"gitID":"anh2111"},"content":"//@@author anh2111"},{"lineNumber":2,"author":{"gitID":"anh2111"},"content":"package seedu.address.model.report;"},{"lineNumber":3,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":4,"author":{"gitID":"anh2111"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":6,"author":{"gitID":"anh2111"},"content":"import java.text.DateFormat;"},{"lineNumber":7,"author":{"gitID":"anh2111"},"content":"import java.text.ParseException;"},{"lineNumber":8,"author":{"gitID":"anh2111"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":9,"author":{"gitID":"anh2111"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"anh2111"},"content":"import java.util.Calendar;"},{"lineNumber":11,"author":{"gitID":"anh2111"},"content":"import java.util.Date;"},{"lineNumber":12,"author":{"gitID":"anh2111"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"anh2111"},"content":"import java.util.Objects;"},{"lineNumber":14,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":15,"author":{"gitID":"anh2111"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":16,"author":{"gitID":"anh2111"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitID":"anh2111"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":18,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":19,"author":{"gitID":"anh2111"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"anh2111"},"content":" * Represents a Report in the address book."},{"lineNumber":21,"author":{"gitID":"anh2111"},"content":" */"},{"lineNumber":22,"author":{"gitID":"anh2111"},"content":"public class Report {"},{"lineNumber":23,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":24,"author":{"gitID":"anh2111"},"content":"    private final Tag population;"},{"lineNumber":25,"author":{"gitID":"anh2111"},"content":"    private final List\u003cProportion\u003e allProportions;"},{"lineNumber":26,"author":{"gitID":"anh2111"},"content":"    private final int totalTags;"},{"lineNumber":27,"author":{"gitID":"anh2111"},"content":"    private final int totalPersons;"},{"lineNumber":28,"author":{"gitID":"anh2111"},"content":"    private final Date date;"},{"lineNumber":29,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":30,"author":{"gitID":"anh2111"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"anh2111"},"content":"     * Every field must be present and not null."},{"lineNumber":32,"author":{"gitID":"anh2111"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"anh2111"},"content":"    public Report(Tag population, List\u003cProportion\u003e allProportions, int totalPersons) {"},{"lineNumber":34,"author":{"gitID":"anh2111"},"content":"        requireAllNonNull(population, allProportions);"},{"lineNumber":35,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":36,"author":{"gitID":"anh2111"},"content":"        this.date \u003d Calendar.getInstance().getTime();"},{"lineNumber":37,"author":{"gitID":"anh2111"},"content":"        this.population \u003d population;"},{"lineNumber":38,"author":{"gitID":"anh2111"},"content":"        // protect internal allProportions from changes in the arg list"},{"lineNumber":39,"author":{"gitID":"anh2111"},"content":"        this.allProportions \u003d new ArrayList\u003c\u003e(allProportions);"},{"lineNumber":40,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":41,"author":{"gitID":"anh2111"},"content":"        int sum \u003d 0;"},{"lineNumber":42,"author":{"gitID":"anh2111"},"content":"        for (Proportion p : allProportions) {"},{"lineNumber":43,"author":{"gitID":"anh2111"},"content":"            sum +\u003d p.value;"},{"lineNumber":44,"author":{"gitID":"anh2111"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"anh2111"},"content":"        this.totalTags \u003d sum;"},{"lineNumber":46,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":47,"author":{"gitID":"anh2111"},"content":"        this.totalPersons \u003d totalPersons;"},{"lineNumber":48,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":50,"author":{"gitID":"anh2111"},"content":"    public Report(Tag population, List\u003cProportion\u003e allProportions, int totalPersons, String date)"},{"lineNumber":51,"author":{"gitID":"anh2111"},"content":"            throws ParseException {"},{"lineNumber":52,"author":{"gitID":"anh2111"},"content":"        requireAllNonNull(population, allProportions);"},{"lineNumber":53,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":54,"author":{"gitID":"anh2111"},"content":"        DateFormat formater \u003d new SimpleDateFormat(\"MM/dd/yyyy HH:mm:ss\");"},{"lineNumber":55,"author":{"gitID":"anh2111"},"content":"        this.date \u003d formater.parse(date);"},{"lineNumber":56,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":57,"author":{"gitID":"anh2111"},"content":"        this.population \u003d population;"},{"lineNumber":58,"author":{"gitID":"anh2111"},"content":"        // protect internal allProportions from changes in the arg list"},{"lineNumber":59,"author":{"gitID":"anh2111"},"content":"        this.allProportions \u003d new ArrayList\u003c\u003e(allProportions);"},{"lineNumber":60,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":61,"author":{"gitID":"anh2111"},"content":"        int sum \u003d 0;"},{"lineNumber":62,"author":{"gitID":"anh2111"},"content":"        for (Proportion p : allProportions) {"},{"lineNumber":63,"author":{"gitID":"anh2111"},"content":"            sum +\u003d p.value;"},{"lineNumber":64,"author":{"gitID":"anh2111"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"anh2111"},"content":"        this.totalTags \u003d sum;"},{"lineNumber":66,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":67,"author":{"gitID":"anh2111"},"content":"        this.totalPersons \u003d totalPersons;"},{"lineNumber":68,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":70,"author":{"gitID":"anh2111"},"content":"    public Tag getPopulation() {"},{"lineNumber":71,"author":{"gitID":"anh2111"},"content":"        return population;"},{"lineNumber":72,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":74,"author":{"gitID":"anh2111"},"content":"    public ObservableList\u003cProportion\u003e getAllProportions() {"},{"lineNumber":75,"author":{"gitID":"anh2111"},"content":"        return FXCollections.unmodifiableObservableList(FXCollections.observableArrayList(allProportions));"},{"lineNumber":76,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":78,"author":{"gitID":"anh2111"},"content":"    public int getTotalTags() {"},{"lineNumber":79,"author":{"gitID":"anh2111"},"content":"        return totalTags;"},{"lineNumber":80,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":82,"author":{"gitID":"anh2111"},"content":"    public int getTotalPersons() {"},{"lineNumber":83,"author":{"gitID":"anh2111"},"content":"        return totalPersons;"},{"lineNumber":84,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":86,"author":{"gitID":"anh2111"},"content":"    public String getDate() {"},{"lineNumber":87,"author":{"gitID":"anh2111"},"content":"        DateFormat formater \u003d new SimpleDateFormat(\"MM/dd/yyyy HH:mm:ss\");"},{"lineNumber":88,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":89,"author":{"gitID":"anh2111"},"content":"        return formater.format(date);"},{"lineNumber":90,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":92,"author":{"gitID":"anh2111"},"content":"    @Override"},{"lineNumber":93,"author":{"gitID":"anh2111"},"content":"    public boolean equals(Object other) {"},{"lineNumber":94,"author":{"gitID":"anh2111"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":95,"author":{"gitID":"anh2111"},"content":"            return true;"},{"lineNumber":96,"author":{"gitID":"anh2111"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":98,"author":{"gitID":"anh2111"},"content":"        if (!(other instanceof Report)) {"},{"lineNumber":99,"author":{"gitID":"anh2111"},"content":"            return false;"},{"lineNumber":100,"author":{"gitID":"anh2111"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":102,"author":{"gitID":"anh2111"},"content":"        Report otherPerson \u003d (Report) other;"},{"lineNumber":103,"author":{"gitID":"anh2111"},"content":"        return otherPerson.getPopulation().equals(this.getPopulation())"},{"lineNumber":104,"author":{"gitID":"anh2111"},"content":"                \u0026\u0026 otherPerson.getAllProportions().equals(this.getAllProportions())"},{"lineNumber":105,"author":{"gitID":"anh2111"},"content":"                \u0026\u0026 otherPerson.getPopulation().equals(this.getPopulation());"},{"lineNumber":106,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":108,"author":{"gitID":"anh2111"},"content":"    @Override"},{"lineNumber":109,"author":{"gitID":"anh2111"},"content":"    public int hashCode() {"},{"lineNumber":110,"author":{"gitID":"anh2111"},"content":"        return Objects.hash(population, allProportions);"},{"lineNumber":111,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":113,"author":{"gitID":"anh2111"},"content":"    @Override"},{"lineNumber":114,"author":{"gitID":"anh2111"},"content":"    public String toString() {"},{"lineNumber":115,"author":{"gitID":"anh2111"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":116,"author":{"gitID":"anh2111"},"content":"        builder.append(population.tagName);"},{"lineNumber":117,"author":{"gitID":"anh2111"},"content":"        return builder.toString();"},{"lineNumber":118,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":120,"author":{"gitID":"anh2111"},"content":"}"},{"lineNumber":121,"author":{"gitID":"anh2111"},"content":"//@@author"}],"authorContributionMap":{"anh2111":121}},{"path":"src/main/java/seedu/address/model/report/UniqueReportList.java","lines":[{"lineNumber":1,"author":{"gitID":"anh2111"},"content":"// @@author anh2111"},{"lineNumber":2,"author":{"gitID":"anh2111"},"content":"package seedu.address.model.report;"},{"lineNumber":3,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":4,"author":{"gitID":"anh2111"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"anh2111"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":6,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":7,"author":{"gitID":"anh2111"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"anh2111"},"content":"import java.util.Iterator;"},{"lineNumber":9,"author":{"gitID":"anh2111"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"anh2111"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":12,"author":{"gitID":"anh2111"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":13,"author":{"gitID":"anh2111"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"anh2111"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":15,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":16,"author":{"gitID":"anh2111"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"anh2111"},"content":" * A list of reports that enforces no nulls and uniqueness between its elements."},{"lineNumber":18,"author":{"gitID":"anh2111"},"content":" *"},{"lineNumber":19,"author":{"gitID":"anh2111"},"content":" * Supports minimal set of list operations for the app\u0027s features."},{"lineNumber":20,"author":{"gitID":"anh2111"},"content":" *"},{"lineNumber":21,"author":{"gitID":"anh2111"},"content":" * @see #equals(Object)"},{"lineNumber":22,"author":{"gitID":"anh2111"},"content":" */"},{"lineNumber":23,"author":{"gitID":"anh2111"},"content":"public class UniqueReportList implements Iterable\u003cReport\u003e {"},{"lineNumber":24,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":25,"author":{"gitID":"anh2111"},"content":"    private final ObservableList\u003cReport\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":26,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":27,"author":{"gitID":"anh2111"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"anh2111"},"content":"     * Constructs empty TagList."},{"lineNumber":29,"author":{"gitID":"anh2111"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"anh2111"},"content":"    public UniqueReportList() {}"},{"lineNumber":31,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":32,"author":{"gitID":"anh2111"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"anh2111"},"content":"     * Creates a UniqueReportList using given reports."},{"lineNumber":34,"author":{"gitID":"anh2111"},"content":"     * Enforces no nulls."},{"lineNumber":35,"author":{"gitID":"anh2111"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"anh2111"},"content":"    public UniqueReportList(List\u003cReport\u003e reports) {"},{"lineNumber":37,"author":{"gitID":"anh2111"},"content":"        requireAllNonNull(reports);"},{"lineNumber":38,"author":{"gitID":"anh2111"},"content":"        internalList.addAll();"},{"lineNumber":39,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":40,"author":{"gitID":"anh2111"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":41,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":43,"author":{"gitID":"anh2111"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"anh2111"},"content":"     * Returns all reports in this list as a Set."},{"lineNumber":45,"author":{"gitID":"anh2111"},"content":"     * This set is mutable and change-insulated against the internal list."},{"lineNumber":46,"author":{"gitID":"anh2111"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"anh2111"},"content":"    public Set\u003cReport\u003e toSet() {"},{"lineNumber":48,"author":{"gitID":"anh2111"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":49,"author":{"gitID":"anh2111"},"content":"        return new HashSet\u003c\u003e(internalList);"},{"lineNumber":50,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":52,"author":{"gitID":"anh2111"},"content":"    public void setReports(UniqueReportList replacement) {"},{"lineNumber":53,"author":{"gitID":"anh2111"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":54,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":56,"author":{"gitID":"anh2111"},"content":"    public void setReports(List\u003cReport\u003e  reports) {"},{"lineNumber":57,"author":{"gitID":"anh2111"},"content":"        requireAllNonNull(reports);"},{"lineNumber":58,"author":{"gitID":"anh2111"},"content":"        final UniqueReportList replacement \u003d new UniqueReportList();"},{"lineNumber":59,"author":{"gitID":"anh2111"},"content":"        for (final Report report : reports) {"},{"lineNumber":60,"author":{"gitID":"anh2111"},"content":"            replacement.add(report);"},{"lineNumber":61,"author":{"gitID":"anh2111"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"anh2111"},"content":"        setReports(replacement);"},{"lineNumber":63,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":65,"author":{"gitID":"anh2111"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"anh2111"},"content":"     * Returns true if the list contains an equivalent Tag as the given argument."},{"lineNumber":67,"author":{"gitID":"anh2111"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"anh2111"},"content":"    public boolean contains(Report toCheck) {"},{"lineNumber":69,"author":{"gitID":"anh2111"},"content":"        requireNonNull(toCheck);"},{"lineNumber":70,"author":{"gitID":"anh2111"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":71,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":73,"author":{"gitID":"anh2111"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"anh2111"},"content":"     * Adds a Tag to the list."},{"lineNumber":75,"author":{"gitID":"anh2111"},"content":"     *"},{"lineNumber":76,"author":{"gitID":"anh2111"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"anh2111"},"content":"    public void add(Report toAdd) {"},{"lineNumber":78,"author":{"gitID":"anh2111"},"content":"        requireNonNull(toAdd);"},{"lineNumber":79,"author":{"gitID":"anh2111"},"content":"        internalList.add(toAdd);"},{"lineNumber":80,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":81,"author":{"gitID":"anh2111"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":82,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":84,"author":{"gitID":"anh2111"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"anh2111"},"content":"     * Removes a Report from the list."},{"lineNumber":86,"author":{"gitID":"anh2111"},"content":"     *"},{"lineNumber":87,"author":{"gitID":"anh2111"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"anh2111"},"content":"    public void remove(Report toRemove) {"},{"lineNumber":89,"author":{"gitID":"anh2111"},"content":"        requireNonNull(toRemove);"},{"lineNumber":90,"author":{"gitID":"anh2111"},"content":"        if (contains(toRemove)) {"},{"lineNumber":91,"author":{"gitID":"anh2111"},"content":"            internalList.remove(toRemove);"},{"lineNumber":92,"author":{"gitID":"anh2111"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"anh2111"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":94,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":96,"author":{"gitID":"anh2111"},"content":"    @Override"},{"lineNumber":97,"author":{"gitID":"anh2111"},"content":"    public Iterator\u003cReport\u003e iterator() {"},{"lineNumber":98,"author":{"gitID":"anh2111"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":99,"author":{"gitID":"anh2111"},"content":"        return internalList.iterator();"},{"lineNumber":100,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":102,"author":{"gitID":"anh2111"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"anh2111"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":104,"author":{"gitID":"anh2111"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"anh2111"},"content":"    public ObservableList\u003cReport\u003e asObservableList() {"},{"lineNumber":106,"author":{"gitID":"anh2111"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":107,"author":{"gitID":"anh2111"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":108,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":110,"author":{"gitID":"anh2111"},"content":"    @Override"},{"lineNumber":111,"author":{"gitID":"anh2111"},"content":"    public boolean equals(Object other) {"},{"lineNumber":112,"author":{"gitID":"anh2111"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":113,"author":{"gitID":"anh2111"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":114,"author":{"gitID":"anh2111"},"content":"                || (other instanceof UniqueReportList // instanceof handles nulls"},{"lineNumber":115,"author":{"gitID":"anh2111"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueReportList) other).internalList));"},{"lineNumber":116,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":118,"author":{"gitID":"anh2111"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"anh2111"},"content":"     * Returns true if the element in this list is equal to the elements in {@code other}."},{"lineNumber":120,"author":{"gitID":"anh2111"},"content":"     * The elements do not have to be in the same order."},{"lineNumber":121,"author":{"gitID":"anh2111"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"anh2111"},"content":"    public boolean equalsOrderInsensitive(UniqueReportList other) {"},{"lineNumber":123,"author":{"gitID":"anh2111"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":124,"author":{"gitID":"anh2111"},"content":"        assert CollectionUtil.elementsAreUnique(other.internalList);"},{"lineNumber":125,"author":{"gitID":"anh2111"},"content":"        return this \u003d\u003d other || new HashSet\u003c\u003e(this.internalList).equals(new HashSet\u003c\u003e(other.internalList));"},{"lineNumber":126,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"anh2111"},"content":""},{"lineNumber":128,"author":{"gitID":"anh2111"},"content":"    @Override"},{"lineNumber":129,"author":{"gitID":"anh2111"},"content":"    public int hashCode() {"},{"lineNumber":130,"author":{"gitID":"anh2111"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":131,"author":{"gitID":"anh2111"},"content":"        return internalList.hashCode();"},{"lineNumber":132,"author":{"gitID":"anh2111"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"anh2111"},"content":"}"},{"lineNumber":134,"author":{"gitID":"anh2111"},"content":"// @@author"}],"authorContributionMap":{"anh2111":134}}]
