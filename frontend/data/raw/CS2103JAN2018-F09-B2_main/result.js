var resultJson = [{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d ReciRecipé - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: short"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":":warning-caption: :warning:"},{"lineNumber":14,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":15,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-F09-B2/main"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"By: `Team F09-B2`      Since: `Jan 2018`      Licence: `MIT`"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"[.print-only]"},{"lineNumber":20,"author":{"gitID":"-"},"content":"Please visit the https://recirecipe.netlify.com/userguide[online page] to view the User Guide in full formatting (some images may only be viewable on the online page)."},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"---"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"// tag::applicationDescription[]"},{"lineNumber":27,"author":{"gitID":"-"},"content":"*\u003c\u003cReciRecipe,ReciRecipé\u003e\u003e* is *a recipe management desktop app with a built-in web browser*. ReciRecipé is optimized for those who prefer to work with keyboard while still having the benefits of an intuitive user interface. +"},{"lineNumber":28,"author":{"gitID":"-"},"content":"// end::applicationDescription[]"},{"lineNumber":29,"author":{"gitID":"-"},"content":"So if you are a home cook or are just interested in being exposed to more interesting recipes out there, this app is just for you. It provides an easy way to save old recipes, craft new ones, or just pull the many variations already available online! There are even ways to organise, manage and search through your saved recipes for easy retrieval. +"},{"lineNumber":30,"author":{"gitID":"-"},"content":"This user guide will systematically take you through all the functions available in ReciRecipé and teach you how to use them efficiently. Interested? Jump to \u003c\u003cQuick start\u003e\u003e to get started. Enjoy!"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"[WARNING]"},{"lineNumber":33,"author":{"gitID":"-"},"content":"This product only works on computers with monitors having resolution of at least 1000x600."},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"\u003d\u003d Quick start"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":39,"author":{"gitID":"-"},"content":"You can use kbd:[Ctrl]+kbd:[F] to search for words in the user guide."},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"To start using ReciRecipé, please follow the steps below carefully:"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":".  Ensure you have Java Runtime Environment (\u003c\u003cJRE, JRE\u003e\u003e) 1.8.0_60 or later installed in your Computer. You can download from http://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html[here]."},{"lineNumber":44,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":45,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":46,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":".. Usually, you will find two versions of JRE there, e.g. 8u161 and 8u162. You can download either of these *but not both*."},{"lineNumber":49,"author":{"gitID":"-"},"content":".. To download, click on \"Accept License Agreement\" first (refer to \u003c\u003cjava-download\u003e\u003e). +"},{"lineNumber":50,"author":{"gitID":"-"},"content":"+"},{"lineNumber":51,"author":{"gitID":"-"},"content":"[[java-download]]"},{"lineNumber":52,"author":{"gitID":"-"},"content":".JRE license agreement"},{"lineNumber":53,"author":{"gitID":"-"},"content":"image::JREdownload.png[width\u003d\"500\"]"},{"lineNumber":54,"author":{"gitID":"-"},"content":"+"},{"lineNumber":55,"author":{"gitID":"-"},"content":".. Then select the version according to what system you are running on. The file you need to download will be around 60-80MB in size. +"},{"lineNumber":56,"author":{"gitID":"-"},"content":"+"},{"lineNumber":57,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":58,"author":{"gitID":"-"},"content":"If you are using Windows, please download the Offline version. The installation file should end with _.exe_. +"},{"lineNumber":59,"author":{"gitID":"-"},"content":"If you don\u0027t know whether to download the x64 or x86 version, you can download and install both!"},{"lineNumber":60,"author":{"gitID":"-"},"content":"+"},{"lineNumber":61,"author":{"gitID":"-"},"content":".  Download the latest _recipebook.jar_ link:{repoURL}/releases[here]."},{"lineNumber":62,"author":{"gitID":"-"},"content":".  Copy the file to the folder you want to use as the home folder for your Recipe Book."},{"lineNumber":63,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. ReciRecipé should appear in a few seconds (refer to \u003c\u003crecirecipe-gui\u003e\u003e)."},{"lineNumber":64,"author":{"gitID":"-"},"content":"+"},{"lineNumber":65,"author":{"gitID":"-"},"content":"[[recirecipe-gui]]"},{"lineNumber":66,"author":{"gitID":"-"},"content":".ReciRecipé\u0027s user interface"},{"lineNumber":67,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":68,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":69,"author":{"gitID":"-"},"content":"Referring to \u003c\u003crecirecipe-gui\u003e\u003e above:"},{"lineNumber":70,"author":{"gitID":"-"},"content":".. On the left section, we have the display page that gives more details about a specific recipe selected."},{"lineNumber":71,"author":{"gitID":"-"},"content":".. On the upper-half of the center section, we have the command box where commands are entered."},{"lineNumber":72,"author":{"gitID":"-"},"content":".. On the bottom-half of the center section, we have the response box where the application will provide feedback on the commands you have executed."},{"lineNumber":73,"author":{"gitID":"-"},"content":".. On the right section, we have the list of recipes which will display a brief summary of the first few recipes saved in ReciRecipé."},{"lineNumber":74,"author":{"gitID":"-"},"content":".  Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":75,"author":{"gitID":"-"},"content":"E.g. typing `help` and pressing kbd:[Enter] will open the help window."},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":78,"author":{"gitID":"-"},"content":"If you counter any problems while using ReciRecipé, you might want to refer to \u003c\u003cfaq, the FAQ\u003e\u003e."},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":81,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"// tag::command-format[]"},{"lineNumber":84,"author":{"gitID":"-"},"content":"[[CommandFormat]]"},{"lineNumber":85,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"Words in upper case are the parameters to be supplied by the user. For example:"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"* `add name/NAME calories/CALORIES`, *_NAME_* and *_CALORIES_* are parameters which can be substituted in this manner *`add name/Chicken rice calories/500`*."},{"lineNumber":90,"author":{"gitID":"-"},"content":"* `add name/NAME ingredient/INGREDIENT instruction/INSTRUCTION`,*_NAME_*, *_INGREDIENT_* and *_INSTRUCTION_* are parameters which can be substituted in this manner *`add name/Chicken rice ingredient/chicken, rice instruction/cut chicken into strips before cooking`*."},{"lineNumber":91,"author":{"gitID":"-"},"content":"* Below is a list of the remaining parameters with examples of their acceptable formats:"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"** *_INGREDIENT_* is a list of ingredients, delimited by commas. E.g. `chicken,fish,rice` and `chicken, fish, rice` are valid."},{"lineNumber":94,"author":{"gitID":"-"},"content":"** *_INSTRUCTION_* can receive multiple lines as its value."},{"lineNumber":95,"author":{"gitID":"-"},"content":"** *_PREPARATION_TIME_* and *_COOKING_TIME_* fields accept a number of formats: `1h20m`, `1h20min`, `1 hour 20 minutes`, `80m`, `80min`, `80 mins`, etc. However, sticking to the most simple format `80m` is recommended."},{"lineNumber":96,"author":{"gitID":"-"},"content":"** *_CALORIES_* and *_SERVINGS_* are positive numbers. E.g. `120`, `5000`, etc."},{"lineNumber":97,"author":{"gitID":"-"},"content":"** *_URL_* takes a valid website address as its value. E.g. `http://google.com`."},{"lineNumber":98,"author":{"gitID":"-"},"content":"** *_IMAGE_* takes a valid image path as its value (E.g. for macOS: `/Users/administrator/Desktop/image.png`, for Windows: `C:\\Users\\admin\\image.png`). Or it can also be a valid image URL, for example, `https://i.imgur.com/FhRsgCK.jpg`."},{"lineNumber":99,"author":{"gitID":"-"},"content":"* Items in square brackets are optional e.g. `name/NAME [tag/TAG]` can be used as *`name/Chicken rice tag/chicken`* or as *`name/Chicken rice`*."},{"lineNumber":100,"author":{"gitID":"-"},"content":"* Items with `...` after them can be used multiple times including zero times e.g. `[tag/TAG]...` can be used as `{nbsp}` (i.e. 0 times), *`tag/rice`*, *`tag/rice tag/chicken`*, or `ingredient KEYWORD [MORE_KEYWORDS]...` can be used as `ingredient chicken rice salt`."},{"lineNumber":101,"author":{"gitID":"hoangduong1607"},"content":"* Parameters can be in any order. E.g. if the command specifies `name/RECIPE_NAME instruction/INSTRUCTION`, `instruction/INSTRUCTION name/RECIPE_NAME` has the same effect."},{"lineNumber":102,"author":{"gitID":"-"},"content":"* White spaces after a slash are automatically trimmed. For example, `add name/ Chicken rice` and `add name/Chicken rice` are the same. However, the former is more visually pleasing."},{"lineNumber":103,"author":{"gitID":"-"},"content":"* You can split a command into multiple lines for ease of input."},{"lineNumber":104,"author":{"gitID":"-"},"content":"// end::command-format[]"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"// tag::app-navigation[]"},{"lineNumber":107,"author":{"gitID":"-"},"content":"[[Navigation]]"},{"lineNumber":108,"author":{"gitID":"-"},"content":"*Navigation*"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"* Press kbd:[Enter] while holding down kbd:[Shift] to add a new line to your input."},{"lineNumber":111,"author":{"gitID":"-"},"content":"* Press kbd:[Enter] to submit a command."},{"lineNumber":112,"author":{"gitID":"-"},"content":"* Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows while holding down kbd:[Ctrl] will display the previous and next input respectively in the command box."},{"lineNumber":113,"author":{"gitID":"-"},"content":"* Press kbd:[Ctrl]+kbd:[Tab]/kbd:[Tab] to quickly move the caret to previous/next field. (*NOTE:* kbd:[Ctrl]+kbd:[Tab] may not work for Mac users.)"},{"lineNumber":114,"author":{"gitID":"-"},"content":"// end::app-navigation[]"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"// tag::auto-completion[]"},{"lineNumber":117,"author":{"gitID":"-"},"content":"[[Auto-completion]]"},{"lineNumber":118,"author":{"gitID":"-"},"content":"*Auto-completion*"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"* Press kbd:[Tab] while holding down kbd:[Shift] to display a list of suggestions for your input. The list will contain application keywords (i.e, commands, field prefixes in commands) that match your current input. If there are words matching your input, they will be shown in alphabetical order. If there is no word found, the list will not be displayed."},{"lineNumber":121,"author":{"gitID":"-"},"content":"** If you did not type anything, the list will suggest the first commands."},{"lineNumber":122,"author":{"gitID":"-"},"content":"** If you are typing the first word, the list will suggest some commands that match your current input. For example, if you are typing *`a`*, some commands starting with *`a`* will be displayed."},{"lineNumber":123,"author":{"gitID":"-"},"content":"** If you are typing not the first word, there are two possible cases:"},{"lineNumber":124,"author":{"gitID":"-"},"content":"*** The first word you typed is not a command keyword, then the list will suggest some commands that match your last word (can be empty string if you have a whitespace at the end of your input)."},{"lineNumber":125,"author":{"gitID":"-"},"content":"*** The first word you typed is a command keyword, then the list will suggest some possible field prefixes of that command. If the command has no field prefix, the list will not be displayed."},{"lineNumber":126,"author":{"gitID":"-"},"content":"* Press kbd:[\u0026uarr;] and kbd:[\u0026darr;] to choose a suggestion you want."},{"lineNumber":127,"author":{"gitID":"-"},"content":"* Press kbd:[Enter] to choose the suggestion."},{"lineNumber":128,"author":{"gitID":"-"},"content":"* The suggestion will be added to your input automatically."},{"lineNumber":129,"author":{"gitID":"-"},"content":"** If you choose a command keyword, it will replace your current input with the command and possible field prefixes (may be none, some or all possible field prefixes, depending on command)."},{"lineNumber":130,"author":{"gitID":"-"},"content":"** If you choose a field prefix, it will replace the word right before the caret (i.e, the word used to find suggestion)."},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":133,"author":{"gitID":"-"},"content":"If you choose auto-completion for a command, your input will be cleared and replaced by the command with field prefixes (if any)."},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"// end::auto-completion[]"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d *`add`* : Adding a recipe"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"Adds a recipe to the recipe book."},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"Format: `add name/RECIPE_NAME [ingredient/INGREDIENT] [instruction/INSTRUCTION] [cooking_time/COOKING_TIME] [preparation_time/PREPARATION_TIME] [calories/CALORIES] [servings/SERVINGS] [url/URL] [img/IMAGE] [tag/TAG]...`"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":144,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":145,"author":{"gitID":"-"},"content":"You can add any number of tags (including 0) for a recipe."},{"lineNumber":146,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"****"},{"lineNumber":149,"author":{"gitID":"-"},"content":"* See \u003c\u003cCommandFormat,Command Format\u003e\u003e for more details on which input is acceptable for each field."},{"lineNumber":150,"author":{"gitID":"-"},"content":"****"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"* *`add name/Chicken Rice ingredient/chicken, rice cooking_time/10m tag/good tag/fast`* +"},{"lineNumber":155,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":156,"author":{"gitID":"-"},"content":"You can split the command into multiple lines as shown in the figure below. In case you forgot how to add a new line, it\u0027s kbd:[Shift]+kbd:[Enter]. +"},{"lineNumber":157,"author":{"gitID":"-"},"content":"+"},{"lineNumber":158,"author":{"gitID":"-"},"content":".Add a recipe with multiple lines"},{"lineNumber":159,"author":{"gitID":"-"},"content":"image::Ui_MultipleLine.PNG[width\u003d\"500\"]"},{"lineNumber":160,"author":{"gitID":"-"},"content":"+"},{"lineNumber":161,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":162,"author":{"gitID":"-"},"content":"If you follow the instructions correctly, the result box will inform you and your recipe will be added to the book (\u003c\u003cfig-AddRecipeResult\u003e\u003e)."},{"lineNumber":163,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":164,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":165,"author":{"gitID":"-"},"content":"+"},{"lineNumber":166,"author":{"gitID":"-"},"content":"[[fig-AddRecipeResult]]"},{"lineNumber":167,"author":{"gitID":"-"},"content":".After adding a recipe"},{"lineNumber":168,"author":{"gitID":"-"},"content":"image::Ui_AddCommand.PNG[width\u003d\"750\"]"},{"lineNumber":169,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":172,"author":{"gitID":"-"},"content":"You can use kbd:[Shift]+kbd:[Tab] for command auto-completion. After choosing auto-completion for a command, all fields associated with that command will be automatically filled."},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":".Auto-completion for command"},{"lineNumber":176,"author":{"gitID":"-"},"content":"image::AutoCompletion.png[width\u003d\"750\"]"},{"lineNumber":177,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d *`clear`* : Clearing all entries"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"Clears all entries from the recipe book."},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"Format: `clear`"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"[WARNING]"},{"lineNumber":186,"author":{"gitID":"-"},"content":"This command clears all data in the application. Use it cautiously."},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"See \u003c\u003cfig-ClearCommand\u003e\u003e for the expected behavior of this command. +"},{"lineNumber":189,"author":{"gitID":"-"},"content":"{nbsp}"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"[[fig-ClearCommand]]"},{"lineNumber":192,"author":{"gitID":"-"},"content":".Effect of the clear command"},{"lineNumber":193,"author":{"gitID":"-"},"content":"image::Ui_Clear.PNG[width\u003d\"950\"]"},{"lineNumber":194,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":195,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":196,"author":{"gitID":"-"},"content":"If you clear your recipe book by mistake, you can reverse the command with an `undo` *if you haven\u0027t closed the application*."},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d *`delete`* : Deleting a recipe"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"Deletes the specified recipe from the recipe book."},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"****"},{"lineNumber":205,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":206,"author":{"gitID":"-"},"content":"* The index *must be a positive integer*, e.g. 1, 2, 3, ..."},{"lineNumber":207,"author":{"gitID":"-"},"content":"****"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"* *`list`* +"},{"lineNumber":212,"author":{"gitID":"-"},"content":"*`delete 2`* +"},{"lineNumber":213,"author":{"gitID":"-"},"content":"Deletes the 2nd recipe in the recipe book."},{"lineNumber":214,"author":{"gitID":"-"},"content":"* *`find Chicken`* +"},{"lineNumber":215,"author":{"gitID":"-"},"content":"*`delete 1`* +"},{"lineNumber":216,"author":{"gitID":"-"},"content":"Deletes the 1st recipe in the results of the *`find`* command."},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d *`edit`* : Editing a recipe"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"Edits an existing recipe in the recipe book."},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"Format: `edit INDEX [name/RECIPE_NAME] [ingredient/INGREDIENT] [instruction/INSTRUCTION] [cooking_time/COOKING_TIME] [preparation_time/PREPARATION_TIME] [calories/CALORIES] [servings/SERVINGS] [url/URL] [tag/TAG]`"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"****"},{"lineNumber":225,"author":{"gitID":"-"},"content":"* See \u003c\u003cCommandFormat,Command Format\u003e\u003e for more details on which input is acceptable for each field."},{"lineNumber":226,"author":{"gitID":"-"},"content":"* *_INDEX_* refers to the index number shown in the last recipe listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":227,"author":{"gitID":"-"},"content":"* At least one of the optional fields *must* be provided."},{"lineNumber":228,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":229,"author":{"gitID":"-"},"content":"* To remove an image attached to a recipe, use \"-\" as a placeholder (eg. *`edit 1 img/-`*)."},{"lineNumber":230,"author":{"gitID":"-"},"content":"* To remove an embedded URL of a recipe, use \"-\" as a placeholder (eg. *`edit 1 url/-`*)."},{"lineNumber":231,"author":{"gitID":"-"},"content":"* When editing tags, the existing tags of the recipe will be removed, i.e. adding of tags is not cumulative."},{"lineNumber":232,"author":{"gitID":"-"},"content":"* You can remove all the recipe\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":233,"author":{"gitID":"-"},"content":"****"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"hoangduong1607"},"content":"* *`edit 1 ingredient/fish, bread cooking_time/5m`* +"},{"lineNumber":238,"author":{"gitID":"-"},"content":"Edits the ingredient and cooking time of the 1st recipe to be `_fish, bread_` and `_5m_` respectively."},{"lineNumber":239,"author":{"gitID":"hoangduong1607"},"content":"* *`edit 2 name/Pizza tag/`* +"},{"lineNumber":240,"author":{"gitID":"-"},"content":"Edits the name of the 2nd recipe to be `_Pizza_` and clears all of its existing tags."},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d *`exit`* : Exiting the program"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"Exits the program."},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"hoangduong1607"},"content":"Format: `exit`"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d *`find`* : Locating recipes by name"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"Finds recipes whose names contain any of the given keywords."},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"****"},{"lineNumber":255,"author":{"gitID":"-"},"content":"* The search is case-insensitive. e.g *`find chicken`* will match `_Chicken_`."},{"lineNumber":256,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. *`find Rice Chicken`* will match `_Chicken rice_`."},{"lineNumber":257,"author":{"gitID":"-"},"content":"* Only the name is searched."},{"lineNumber":258,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. *`find Chic`* will not match `_Chicken_`."},{"lineNumber":259,"author":{"gitID":"-"},"content":"* Recipes matching at least one keyword will be returned (i.e. \"OR\" search). E.g. *`find Chicken Pizza`* will return `_Chicken rice_` and `_Pizza_`."},{"lineNumber":260,"author":{"gitID":"-"},"content":"****"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"* *`find chicken`* +"},{"lineNumber":265,"author":{"gitID":"-"},"content":"Returns `_Chicken rice_` and `_Chicken pizza_`."},{"lineNumber":266,"author":{"gitID":"-"},"content":"* *`find chicken fish pasta`* +"},{"lineNumber":267,"author":{"gitID":"-"},"content":"Returns any recipe having substrings `_chicken_`, `_fish_`, or `_pasta_`."},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"// tag::group-command[]"},{"lineNumber":270,"author":{"gitID":"hoangduong1607"},"content":"\u003d\u003d\u003d *`group`* : Creating a custom group of recipes"},{"lineNumber":271,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":272,"author":{"gitID":"hoangduong1607"},"content":"Creates a group of one or multiple recipes by the index or indices used in the last recipe listing."},{"lineNumber":273,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":274,"author":{"gitID":"-"},"content":"Format: `group group_name/GROUP_NAME index/INDEX [index/INDEX]...`"},{"lineNumber":275,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":276,"author":{"gitID":"hoangduong1607"},"content":"****"},{"lineNumber":277,"author":{"gitID":"-"},"content":"* Group name is case sensitive."},{"lineNumber":278,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":279,"author":{"gitID":"hoangduong1607"},"content":"* The index *must be a positive integer*, e.g. \"1, 2, 3, …\".."},{"lineNumber":280,"author":{"gitID":"hoangduong1607"},"content":"****"},{"lineNumber":281,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":283,"author":{"gitID":"-"},"content":"If your group name is the same as one of an existing group, the recipes listed in your command will be added to existing group. +"},{"lineNumber":284,"author":{"gitID":"-"},"content":"If you want to avoid this situation, you are advised to use `view_group` command to check whether a group name exists before creating a recipe group."},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"hoangduong1607"},"content":"Examples:"},{"lineNumber":287,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":288,"author":{"gitID":"hoangduong1607"},"content":"* *`list`* +"},{"lineNumber":289,"author":{"gitID":"hoangduong1607"},"content":"*`group group_name/ My best index/ 1 index/ 3`* +"},{"lineNumber":290,"author":{"gitID":"-"},"content":"Creates a group that contains 1st recipe and 3rd recipe and names the group as `_My best_`. +"},{"lineNumber":291,"author":{"gitID":"-"},"content":"*`group group_name/ My best index/ 2`* +"},{"lineNumber":292,"author":{"gitID":"-"},"content":"Adds 2nd recipe to `_My best_` group. `_My best_` now contains 1st recipe, 2nd recipe and 3rd recipe."},{"lineNumber":293,"author":{"gitID":"-"},"content":"// end::group-command[]"},{"lineNumber":294,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":295,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d *`help`* : Viewing help"},{"lineNumber":296,"author":{"gitID":"-"},"content":""},{"lineNumber":297,"author":{"gitID":"-"},"content":"Shows the user guide."},{"lineNumber":298,"author":{"gitID":"-"},"content":""},{"lineNumber":299,"author":{"gitID":"-"},"content":"Format: `help`"},{"lineNumber":300,"author":{"gitID":"-"},"content":""},{"lineNumber":301,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d *`history`* : Listing entered commands"},{"lineNumber":302,"author":{"gitID":"-"},"content":""},{"lineNumber":303,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order."},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"hoangduong1607"},"content":"Format: `history`"},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":308,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":309,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows while holding down kbd:[Ctrl] will display the previous and next input respectively in the command box."},{"lineNumber":310,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":311,"author":{"gitID":"-"},"content":""},{"lineNumber":312,"author":{"gitID":"-"},"content":"// tag::ingredientCommand[]"},{"lineNumber":313,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d *`ingredient`* : Locating recipes by ingredients"},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"Finds recipes whose ingredients contain all of the given keywords."},{"lineNumber":316,"author":{"gitID":"-"},"content":""},{"lineNumber":317,"author":{"gitID":"-"},"content":"Format: `ingredient KEYWORD [MORE_KEYWORDS]...`"},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"-"},"content":"****"},{"lineNumber":320,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g *`ingredient chicken`* will match _Chicken_."},{"lineNumber":321,"author":{"gitID":"-"},"content":"* Only the ingredients are searched."},{"lineNumber":322,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. *`ingredient Chic`* will not match `_Chicken_`."},{"lineNumber":323,"author":{"gitID":"-"},"content":"* Only recipes matching all keywords will be returned (i.e. \"AND\" search). E.g. *`ingredient Chicken Pizza`* will only return recipes with both _Chicken_ AND _Pizza_ as their ingredients."},{"lineNumber":324,"author":{"gitID":"-"},"content":"****"},{"lineNumber":325,"author":{"gitID":"-"},"content":""},{"lineNumber":326,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":327,"author":{"gitID":"-"},"content":""},{"lineNumber":328,"author":{"gitID":"-"},"content":"* *`ingredient chicken`* +"},{"lineNumber":329,"author":{"gitID":"-"},"content":"Returns recipe with ingredient _Chicken_."},{"lineNumber":330,"author":{"gitID":"-"},"content":"* *`ingredient chicken fish pasta`* +"},{"lineNumber":331,"author":{"gitID":"-"},"content":"Returns only recipes that contain all `_chicken_`, `_fish_`, and `_pasta_` as ingredients."},{"lineNumber":332,"author":{"gitID":"-"},"content":"// end::ingredientCommand[]"},{"lineNumber":333,"author":{"gitID":"-"},"content":""},{"lineNumber":334,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d *`list`* : Listing all recipes"},{"lineNumber":335,"author":{"gitID":"-"},"content":""},{"lineNumber":336,"author":{"gitID":"-"},"content":"Shows a list of all recipes in the recipe book."},{"lineNumber":337,"author":{"gitID":"-"},"content":""},{"lineNumber":338,"author":{"gitID":"hoangduong1607"},"content":"Format: `list`"},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"//tag::web-parse[]"},{"lineNumber":341,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d *`parse`* : Parsing a recipe from a website"},{"lineNumber":342,"author":{"gitID":"-"},"content":""},{"lineNumber":343,"author":{"gitID":"-"},"content":"Gets a recipe from a website loaded in the browser panel."},{"lineNumber":344,"author":{"gitID":"-"},"content":""},{"lineNumber":345,"author":{"gitID":"-"},"content":"Format: `parse`"},{"lineNumber":346,"author":{"gitID":"-"},"content":""},{"lineNumber":347,"author":{"gitID":"-"},"content":"To use this command, you do a `search` first (see \u003c\u003cSearch\u003e\u003e) then select a recipe. +"},{"lineNumber":348,"author":{"gitID":"-"},"content":"Suppose you have that done and you are at this step (see \u003c\u003cfig-InternetSearchResult0\u003e\u003e). +"},{"lineNumber":349,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":350,"author":{"gitID":"-"},"content":""},{"lineNumber":351,"author":{"gitID":"-"},"content":"[[fig-InternetSearchResult0]]"},{"lineNumber":352,"author":{"gitID":"-"},"content":".After you click on a result"},{"lineNumber":353,"author":{"gitID":"-"},"content":"image::Search_Click.PNG[width\u003d\"450\"]"},{"lineNumber":354,"author":{"gitID":"-"},"content":""},{"lineNumber":355,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":356,"author":{"gitID":"-"},"content":"Type *`parse`* in the command box, press kbd:[Enter] and you have \u003c\u003cfig-ParseCommand\u003e\u003e. +"},{"lineNumber":357,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":358,"author":{"gitID":"-"},"content":"[[fig-ParseCommand]]"},{"lineNumber":359,"author":{"gitID":"-"},"content":".Parsed result"},{"lineNumber":360,"author":{"gitID":"-"},"content":"image::Parse_Success.PNG[width\u003d\"450\"]"},{"lineNumber":361,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":362,"author":{"gitID":"-"},"content":"After that, you can add more fields if you want, or you can just press kbd:[Enter] to submit an `add` command!"},{"lineNumber":363,"author":{"gitID":"-"},"content":""},{"lineNumber":364,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":365,"author":{"gitID":"-"},"content":"Currently only http://recipes.wikia.com/ and its children sites, e.g. http://cocktails.wikia.com/, http://japaneserecipes.wikia.com/ are supported!"},{"lineNumber":366,"author":{"gitID":"-"},"content":"//end::web-parse[]"},{"lineNumber":367,"author":{"gitID":"-"},"content":""},{"lineNumber":368,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d *`redo`* : Redoing the previously undone command"},{"lineNumber":369,"author":{"gitID":"-"},"content":""},{"lineNumber":370,"author":{"gitID":"-"},"content":"Reverses the most recent *`undo`* command."},{"lineNumber":371,"author":{"gitID":"-"},"content":""},{"lineNumber":372,"author":{"gitID":"hoangduong1607"},"content":"Format: `redo`"},{"lineNumber":373,"author":{"gitID":"-"},"content":""},{"lineNumber":374,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":375,"author":{"gitID":"-"},"content":""},{"lineNumber":376,"author":{"gitID":"-"},"content":"* *`delete 1`* +"},{"lineNumber":377,"author":{"gitID":"-"},"content":"*`undo`* +"},{"lineNumber":378,"author":{"gitID":"-"},"content":"Reverses the *`delete 1`* command. +"},{"lineNumber":379,"author":{"gitID":"-"},"content":"*`redo`* +"},{"lineNumber":380,"author":{"gitID":"-"},"content":"Reapplies the *`delete 1`* command. +"},{"lineNumber":381,"author":{"gitID":"-"},"content":""},{"lineNumber":382,"author":{"gitID":"-"},"content":"* *`delete 1`* +"},{"lineNumber":383,"author":{"gitID":"-"},"content":"*`redo`* +"},{"lineNumber":384,"author":{"gitID":"-"},"content":"The *`redo`* command fails as there are no *`undo`* commands executed previously."},{"lineNumber":385,"author":{"gitID":"-"},"content":""},{"lineNumber":386,"author":{"gitID":"-"},"content":"* *`delete 1`* +"},{"lineNumber":387,"author":{"gitID":"-"},"content":"*`clear`* +"},{"lineNumber":388,"author":{"gitID":"-"},"content":"*`undo`* +"},{"lineNumber":389,"author":{"gitID":"-"},"content":"Reverses the *`clear`* command. +"},{"lineNumber":390,"author":{"gitID":"-"},"content":"*`undo`* +"},{"lineNumber":391,"author":{"gitID":"-"},"content":"Reverses the *`delete 1`* command. +"},{"lineNumber":392,"author":{"gitID":"-"},"content":"*`redo`* +"},{"lineNumber":393,"author":{"gitID":"-"},"content":"Reapplies the *`delete 1`* command. +"},{"lineNumber":394,"author":{"gitID":"-"},"content":"*`redo`* +"},{"lineNumber":395,"author":{"gitID":"-"},"content":"Reapplies the *`clear`* command. +"},{"lineNumber":396,"author":{"gitID":"-"},"content":""},{"lineNumber":397,"author":{"gitID":"-"},"content":"//tag::internet-search[]"},{"lineNumber":398,"author":{"gitID":"-"},"content":"[[Search]]"},{"lineNumber":399,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d *`search`* : Searching on the Internet"},{"lineNumber":400,"author":{"gitID":"-"},"content":""},{"lineNumber":401,"author":{"gitID":"-"},"content":"Searches for your recipe on the Internet."},{"lineNumber":402,"author":{"gitID":"-"},"content":""},{"lineNumber":403,"author":{"gitID":"-"},"content":"Format: `search RECIPE_NAME`"},{"lineNumber":404,"author":{"gitID":"-"},"content":""},{"lineNumber":405,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":406,"author":{"gitID":"-"},"content":""},{"lineNumber":407,"author":{"gitID":"-"},"content":"* *`search hainanese chicken rice`* +"},{"lineNumber":408,"author":{"gitID":"-"},"content":"See \u003c\u003cfig-InternetSearchCommand\u003e\u003e for the result of this command example. +"},{"lineNumber":409,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":410,"author":{"gitID":"-"},"content":"+"},{"lineNumber":411,"author":{"gitID":"-"},"content":"[[fig-InternetSearchCommand]]"},{"lineNumber":412,"author":{"gitID":"-"},"content":".Result of `search hainanese chicken rice`"},{"lineNumber":413,"author":{"gitID":"-"},"content":"image::Search_Result.PNG[width\u003d\"450\"]"},{"lineNumber":414,"author":{"gitID":"-"},"content":"//end::internet-search[]"},{"lineNumber":415,"author":{"gitID":"-"},"content":"+"},{"lineNumber":416,"author":{"gitID":"-"},"content":"[.not-print]"},{"lineNumber":417,"author":{"gitID":"-"},"content":"From there, you can click on any recipes that you want. Let\u0027s say we click on the first search result, and \u003c\u003cfig-InternetSearchResult\u003e\u003e will be what you see on ReciRecipé. +"},{"lineNumber":418,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":419,"author":{"gitID":"-"},"content":"+"},{"lineNumber":420,"author":{"gitID":"-"},"content":"[.not-print]"},{"lineNumber":421,"author":{"gitID":"-"},"content":"[[fig-InternetSearchResult]]"},{"lineNumber":422,"author":{"gitID":"-"},"content":".After you click on a result"},{"lineNumber":423,"author":{"gitID":"-"},"content":"image::Search_Click.PNG[width\u003d\"450\"]"},{"lineNumber":424,"author":{"gitID":"-"},"content":""},{"lineNumber":425,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d *`select`* : Selecting a recipe"},{"lineNumber":426,"author":{"gitID":"-"},"content":""},{"lineNumber":427,"author":{"gitID":"-"},"content":"Selects the recipe identified by the index number used in the last recipe listing."},{"lineNumber":428,"author":{"gitID":"-"},"content":""},{"lineNumber":429,"author":{"gitID":"hoangduong1607"},"content":"Format: `select INDEX`"},{"lineNumber":430,"author":{"gitID":"-"},"content":""},{"lineNumber":431,"author":{"gitID":"-"},"content":"****"},{"lineNumber":432,"author":{"gitID":"-"},"content":"* If the selected recipe has a URL, the in-app browser will load that URL. Otherwise, it will load the recipe contents."},{"lineNumber":433,"author":{"gitID":"-"},"content":"* If the selected recipe has a valid embedded URL, the in-app browser will load that URL."},{"lineNumber":434,"author":{"gitID":"-"},"content":"* If the selected recipe has an invalid embedded URL, the in-app browser will not update upon a recipe selection change."},{"lineNumber":435,"author":{"gitID":"-"},"content":"* If the recipe has no embedded URL, the in-app browser will load the recipe contents."},{"lineNumber":436,"author":{"gitID":"-"},"content":"* The result box will always show the recipe content regardless of whether there is an embedded URL or not."},{"lineNumber":437,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":438,"author":{"gitID":"-"},"content":"* The index *must be a positive integer*, e.g. \"1, 2, 3, ...\"."},{"lineNumber":439,"author":{"gitID":"-"},"content":"****"},{"lineNumber":440,"author":{"gitID":"-"},"content":""},{"lineNumber":441,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":442,"author":{"gitID":"-"},"content":""},{"lineNumber":443,"author":{"gitID":"-"},"content":"* *`list`* +"},{"lineNumber":444,"author":{"gitID":"-"},"content":"*`select 2`* +"},{"lineNumber":445,"author":{"gitID":"-"},"content":"Selects the 2nd recipe in the recipe book."},{"lineNumber":446,"author":{"gitID":"-"},"content":"* *`find Chicken`* +"},{"lineNumber":447,"author":{"gitID":"-"},"content":"*`select 1`* +"},{"lineNumber":448,"author":{"gitID":"-"},"content":"Selects the 1st recipe in the results of the *`find`* command."},{"lineNumber":449,"author":{"gitID":"-"},"content":""},{"lineNumber":450,"author":{"gitID":"-"},"content":"//tag::share-command[]"},{"lineNumber":451,"author":{"gitID":"RyanAngJY"},"content":"\u003d\u003d\u003d *`share`*: Sharing a recipe on Facebook"},{"lineNumber":452,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":453,"author":{"gitID":"RyanAngJY"},"content":"Initiates the sharing of a recipe to Facebook, identified by the index number used in the last recipe listing."},{"lineNumber":454,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":455,"author":{"gitID":"RyanAngJY"},"content":"Format: `share INDEX`"},{"lineNumber":456,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":457,"author":{"gitID":"RyanAngJY"},"content":"****"},{"lineNumber":458,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":459,"author":{"gitID":"-"},"content":"* The index *must be a positive integer*, e.g. \"1, 2, 3, ...\"."},{"lineNumber":460,"author":{"gitID":"RyanAngJY"},"content":"****"},{"lineNumber":461,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":462,"author":{"gitID":"RyanAngJY"},"content":"Examples:"},{"lineNumber":463,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":464,"author":{"gitID":"RyanAngJY"},"content":"* *`list`* +"},{"lineNumber":465,"author":{"gitID":"RyanAngJY"},"content":"*`share 2`* +"},{"lineNumber":466,"author":{"gitID":"RyanAngJY"},"content":"Shares the 2nd recipe in the recipe book."},{"lineNumber":467,"author":{"gitID":"-"},"content":"The Facebook authentication page is shown on the browser for the User to log in."},{"lineNumber":468,"author":{"gitID":"-"},"content":""},{"lineNumber":469,"author":{"gitID":"-"},"content":"[[fig-FacebookAuthentication]]"},{"lineNumber":470,"author":{"gitID":"-"},"content":".Facebook Authentication Page"},{"lineNumber":471,"author":{"gitID":"-"},"content":"image::FacebookAuthentication.jpg[width\u003d\"600\"]"},{"lineNumber":472,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":473,"author":{"gitID":"-"},"content":"Upon logging in: if the shared recipe has a URL, the in-app browser will load a feed dialog for the User to share the URL as shown below (see \u003c\u003cfig-FacebookFeedDialog\u003e\u003e)."},{"lineNumber":474,"author":{"gitID":"-"},"content":"The contents in the recipe would have been copied to the clipboard for the User to paste into the Facebook post."},{"lineNumber":475,"author":{"gitID":"-"},"content":""},{"lineNumber":476,"author":{"gitID":"-"},"content":"[[fig-FacebookFeedDialog]]"},{"lineNumber":477,"author":{"gitID":"-"},"content":".Facebook Feed Dialog"},{"lineNumber":478,"author":{"gitID":"-"},"content":"image::FacebookFeedDialog.jpg[width\u003d\"600\"]"},{"lineNumber":479,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":480,"author":{"gitID":"-"},"content":"The User will be redirected back to his/her Facebook feed once the post has been made."},{"lineNumber":481,"author":{"gitID":"-"},"content":"//end::share-command[]"},{"lineNumber":482,"author":{"gitID":"-"},"content":""},{"lineNumber":483,"author":{"gitID":"-"},"content":"// tag::tagCommand[]"},{"lineNumber":484,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d *`tag`* : Locating recipes by tags"},{"lineNumber":485,"author":{"gitID":"-"},"content":""},{"lineNumber":486,"author":{"gitID":"-"},"content":"Finds recipe whose tags contain any of the given keywords."},{"lineNumber":487,"author":{"gitID":"-"},"content":""},{"lineNumber":488,"author":{"gitID":"-"},"content":"Format: `tag KEYWORD [MORE_KEYWORDS]...`"},{"lineNumber":489,"author":{"gitID":"-"},"content":""},{"lineNumber":490,"author":{"gitID":"-"},"content":"****"},{"lineNumber":491,"author":{"gitID":"-"},"content":"* The search is case sensitive. For example, *`tag drinks`* will not match `_Drinks_`."},{"lineNumber":492,"author":{"gitID":"-"},"content":"* Only the tags are searched."},{"lineNumber":493,"author":{"gitID":"-"},"content":"* Only full words will be matched. For example, *`tag drinks`* will not match `_drink_`."},{"lineNumber":494,"author":{"gitID":"-"},"content":"* Recipes matching at least one keyword will be returned (i.e. \"OR\" search). E.g. *`tag fast drink`* will return recipes with either `_fast_` OR `_drink_` as one of their tags."},{"lineNumber":495,"author":{"gitID":"-"},"content":"****"},{"lineNumber":496,"author":{"gitID":"-"},"content":""},{"lineNumber":497,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":498,"author":{"gitID":"-"},"content":""},{"lineNumber":499,"author":{"gitID":"-"},"content":"* *`tag drink`* +"},{"lineNumber":500,"author":{"gitID":"-"},"content":"Returns all recipes with the tag `_drink_`."},{"lineNumber":501,"author":{"gitID":"-"},"content":"* *`tag drink Food`* +"},{"lineNumber":502,"author":{"gitID":"-"},"content":"Returns any recipe with the tag `_drink_` or `_Food_`."},{"lineNumber":503,"author":{"gitID":"-"},"content":"// end::tagCommand[]"},{"lineNumber":504,"author":{"gitID":"-"},"content":""},{"lineNumber":505,"author":{"gitID":"-"},"content":"//tag::change-theme[]"},{"lineNumber":506,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d *`theme`* : Changing theme"},{"lineNumber":507,"author":{"gitID":"-"},"content":""},{"lineNumber":508,"author":{"gitID":"-"},"content":"Toggles between colourful theme and white theme."},{"lineNumber":509,"author":{"gitID":"-"},"content":""},{"lineNumber":510,"author":{"gitID":"-"},"content":"Format: `theme`"},{"lineNumber":511,"author":{"gitID":"-"},"content":""},{"lineNumber":512,"author":{"gitID":"-"},"content":"You can enjoy the two bright and visually pleasing themes as shown on \u003c\u003cfig-ChangeThemeCommand\u003e\u003e. +"},{"lineNumber":513,"author":{"gitID":"-"},"content":"{nbsp}"},{"lineNumber":514,"author":{"gitID":"-"},"content":""},{"lineNumber":515,"author":{"gitID":"-"},"content":"[[fig-ChangeThemeCommand]]"},{"lineNumber":516,"author":{"gitID":"-"},"content":".Two themes provided for ReciRecipé"},{"lineNumber":517,"author":{"gitID":"-"},"content":"image::ChangeTheme.PNG[width\u003d\"750\"]"},{"lineNumber":518,"author":{"gitID":"-"},"content":""},{"lineNumber":519,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":520,"author":{"gitID":"-"},"content":"You can change theme from the menu bar or by pressing F2 too!"},{"lineNumber":521,"author":{"gitID":"-"},"content":"//end::change-theme[]"},{"lineNumber":522,"author":{"gitID":"-"},"content":""},{"lineNumber":523,"author":{"gitID":"-"},"content":"// tag::tokenCommand[]"},{"lineNumber":524,"author":{"gitID":"-"},"content":"[[token]]"},{"lineNumber":525,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d *`token`* : Exchanging authorization code for access token"},{"lineNumber":526,"author":{"gitID":"-"},"content":""},{"lineNumber":527,"author":{"gitID":"-"},"content":"Takes in the code given during the user\u0027s authorization of our app in Dropbox and coverts it into an access token that can be used to upload files to that specific Dropbox account."},{"lineNumber":528,"author":{"gitID":"-"},"content":""},{"lineNumber":529,"author":{"gitID":"-"},"content":"Format: `token AUTHORIZATION_CODE`"},{"lineNumber":530,"author":{"gitID":"-"},"content":""},{"lineNumber":531,"author":{"gitID":"-"},"content":"See \u003c\u003cfig-AuthorizationCode\u003e\u003e for more information. +"},{"lineNumber":532,"author":{"gitID":"-"},"content":"{nbsp}"},{"lineNumber":533,"author":{"gitID":"-"},"content":""},{"lineNumber":534,"author":{"gitID":"-"},"content":"[[fig-AuthorizationCode]]"},{"lineNumber":535,"author":{"gitID":"-"},"content":".Allow ReciRecipé access to your Dropbox"},{"lineNumber":536,"author":{"gitID":"-"},"content":"image::AuthorizationCode.PNG[width\u003d\"500\"]"},{"lineNumber":537,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":538,"author":{"gitID":"-"},"content":""},{"lineNumber":539,"author":{"gitID":"-"},"content":"****"},{"lineNumber":540,"author":{"gitID":"-"},"content":"* This command only accepts valid authorization codes."},{"lineNumber":541,"author":{"gitID":"-"},"content":"* If the authorization code is invalid, an error will be thrown indicating that the application was unable to upload the file."},{"lineNumber":542,"author":{"gitID":"-"},"content":"****"},{"lineNumber":543,"author":{"gitID":"-"},"content":"// end::tokenCommand[]"},{"lineNumber":544,"author":{"gitID":"-"},"content":""},{"lineNumber":545,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d *`undo`* : Undoing previous command"},{"lineNumber":546,"author":{"gitID":"-"},"content":""},{"lineNumber":547,"author":{"gitID":"hoangduong1607"},"content":"Restores the recipe book to the state before the previous _undoable_ command was executed."},{"lineNumber":548,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":549,"author":{"gitID":"hoangduong1607"},"content":"Format: `undo`"},{"lineNumber":550,"author":{"gitID":"-"},"content":""},{"lineNumber":551,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":552,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":553,"author":{"gitID":"-"},"content":"Undoable commands: those commands that modify the recipe book\u0027s content (*`add`*, *`delete`*, *`edit`*, and *`clear`*)."},{"lineNumber":554,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":555,"author":{"gitID":"-"},"content":""},{"lineNumber":556,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":557,"author":{"gitID":"-"},"content":""},{"lineNumber":558,"author":{"gitID":"-"},"content":"* *`delete 1`* +"},{"lineNumber":559,"author":{"gitID":"-"},"content":"*`list`* +"},{"lineNumber":560,"author":{"gitID":"-"},"content":"*`undo`* +"},{"lineNumber":561,"author":{"gitID":"-"},"content":"Reverses the `delete 1` command. +"},{"lineNumber":562,"author":{"gitID":"-"},"content":""},{"lineNumber":563,"author":{"gitID":"-"},"content":"* *`select 1`* +"},{"lineNumber":564,"author":{"gitID":"-"},"content":"*`list`* +"},{"lineNumber":565,"author":{"gitID":"-"},"content":"*`undo`* +"},{"lineNumber":566,"author":{"gitID":"-"},"content":"The *`undo`* command fails as there are no undoable commands executed previously."},{"lineNumber":567,"author":{"gitID":"-"},"content":""},{"lineNumber":568,"author":{"gitID":"-"},"content":"* *`delete 1`* +"},{"lineNumber":569,"author":{"gitID":"-"},"content":"*`clear`* +"},{"lineNumber":570,"author":{"gitID":"-"},"content":"*`undo`* +"},{"lineNumber":571,"author":{"gitID":"-"},"content":"Reverses the *`clear`* command. +"},{"lineNumber":572,"author":{"gitID":"-"},"content":"*`undo`* +"},{"lineNumber":573,"author":{"gitID":"-"},"content":"Reverses the *`delete 1`* command. +"},{"lineNumber":574,"author":{"gitID":"-"},"content":""},{"lineNumber":575,"author":{"gitID":"-"},"content":"// tag::uploadCommand[]"},{"lineNumber":576,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d *`upload`* : Uploading all recipes"},{"lineNumber":577,"author":{"gitID":"-"},"content":""},{"lineNumber":578,"author":{"gitID":"-"},"content":"Uploads the xml file containing data of all recipes to Dropbox, giving it the specified filename."},{"lineNumber":579,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":580,"author":{"gitID":"hoangduong1607"},"content":"Format: `upload FILENAME`"},{"lineNumber":581,"author":{"gitID":"-"},"content":""},{"lineNumber":582,"author":{"gitID":"-"},"content":"****"},{"lineNumber":583,"author":{"gitID":"-"},"content":"* The filename must not contain any invalid characters as defined by Dropbox https://www.dropbox.com/help/syncing-uploads/files-not-syncing[here]."},{"lineNumber":584,"author":{"gitID":"-"},"content":"* The filename will be concatenated with .xml to maintain formatting."},{"lineNumber":585,"author":{"gitID":"-"},"content":"* If that exact filename already exists in the user\u0027s Dropbox, one of two things will happen:"},{"lineNumber":586,"author":{"gitID":"-"},"content":"** File will not be uploaded if contents of the two files are similar."},{"lineNumber":587,"author":{"gitID":"-"},"content":"** File will be uploaded and renamed to *_FILENAME(1..)_* if contents of the two files are different."},{"lineNumber":588,"author":{"gitID":"-"},"content":"****"},{"lineNumber":589,"author":{"gitID":"-"},"content":""},{"lineNumber":590,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":591,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":592,"author":{"gitID":"-"},"content":"If it is the first time the user is using the `upload` command, you will be prompted to login to Dropbox and authorize this app."},{"lineNumber":593,"author":{"gitID":"-"},"content":"An authorization code will then be given to you which you should copy and paste into this app. See \u003c\u003ctoken\u003e\u003e for details."},{"lineNumber":594,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":595,"author":{"gitID":"-"},"content":""},{"lineNumber":596,"author":{"gitID":"-"},"content":"Example:"},{"lineNumber":597,"author":{"gitID":"-"},"content":""},{"lineNumber":598,"author":{"gitID":"-"},"content":"* *`upload RecipeBook`* +"},{"lineNumber":599,"author":{"gitID":"-"},"content":"Data file will be uploaded to Dropbox with the name RecipeBook.xml. +"},{"lineNumber":600,"author":{"gitID":"-"},"content":"*`add`*, *`delete`* or *`edit`*. +"},{"lineNumber":601,"author":{"gitID":"-"},"content":"*`upload RecipeBook`* +"},{"lineNumber":602,"author":{"gitID":"-"},"content":"Updated data file will be uploaded to Dropbox with the name RecipeBook(1).xml."},{"lineNumber":603,"author":{"gitID":"-"},"content":"// end::uploadCommand[]"},{"lineNumber":604,"author":{"gitID":"-"},"content":""},{"lineNumber":605,"author":{"gitID":"-"},"content":"// tag::view-group-command[]"},{"lineNumber":606,"author":{"gitID":"hoangduong1607"},"content":"\u003d\u003d\u003d *`view_group`* : Viewing groups of recipes"},{"lineNumber":607,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":608,"author":{"gitID":"hoangduong1607"},"content":"Views recipes inside a group."},{"lineNumber":609,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":610,"author":{"gitID":"hoangduong1607"},"content":"Format: `view_group GROUP_NAME`"},{"lineNumber":611,"author":{"gitID":"-"},"content":"****"},{"lineNumber":612,"author":{"gitID":"-"},"content":"* Group name is case sensitive."},{"lineNumber":613,"author":{"gitID":"-"},"content":"****"},{"lineNumber":614,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":615,"author":{"gitID":"hoangduong1607"},"content":"Examples:"},{"lineNumber":616,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":617,"author":{"gitID":"-"},"content":"* *`group group_name/ My best index/ 1 index/ 3`* +"},{"lineNumber":618,"author":{"gitID":"-"},"content":"Creates `_My best_` group that contains 1st recipe and 3rd recipe. +"},{"lineNumber":619,"author":{"gitID":"-"},"content":"*`view_group My best`* +"},{"lineNumber":620,"author":{"gitID":"-"},"content":"Lists all recipes inside `_My best_` group (i.e, 1st recipe and 3rd recipe). +"},{"lineNumber":621,"author":{"gitID":"-"},"content":"*`view_group my best`* +"},{"lineNumber":622,"author":{"gitID":"-"},"content":"Shows an empty list and a message to inform that the group does not exist since group name is case sensitive (i.e, `_my best_` is different from `_My best_`)."},{"lineNumber":623,"author":{"gitID":"-"},"content":"// end::view-group-command[]"},{"lineNumber":624,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":625,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":626,"author":{"gitID":"-"},"content":""},{"lineNumber":627,"author":{"gitID":"-"},"content":"No specific command is required to save data in this application. ReciRecipé saves data in the hard disk automatically after any command that changes the data (`add`, `edit`, `clear`, ...). +"},{"lineNumber":628,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":629,"author":{"gitID":"-"},"content":""},{"lineNumber":630,"author":{"gitID":"-"},"content":"\u003d\u003d Upcoming features"},{"lineNumber":631,"author":{"gitID":"-"},"content":""},{"lineNumber":632,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d *`pull`* : Getting a recipe from the recipes database (Coming in v2.0)"},{"lineNumber":633,"author":{"gitID":"-"},"content":""},{"lineNumber":634,"author":{"gitID":"-"},"content":"Downloads a recipe from the recipes server."},{"lineNumber":635,"author":{"gitID":"-"},"content":""},{"lineNumber":636,"author":{"gitID":"-"},"content":"Format: `pull RECIPE_NAME`"},{"lineNumber":637,"author":{"gitID":"-"},"content":""},{"lineNumber":638,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":639,"author":{"gitID":"-"},"content":""},{"lineNumber":640,"author":{"gitID":"-"},"content":"* *`pull chicken rice`* +"},{"lineNumber":641,"author":{"gitID":"hoangduong1607"},"content":"Downloads all recipes that match the query `_Chicken rice_` from the server."},{"lineNumber":642,"author":{"gitID":"-"},"content":""},{"lineNumber":643,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d *`push`* : Uploading a recipe to the recipes database (Coming in v2.0)"},{"lineNumber":644,"author":{"gitID":"-"},"content":""},{"lineNumber":645,"author":{"gitID":"-"},"content":"Uploads a selected recipe to the recipes server."},{"lineNumber":646,"author":{"gitID":"-"},"content":""},{"lineNumber":647,"author":{"gitID":"-"},"content":"Format: `push INDEX`"},{"lineNumber":648,"author":{"gitID":"-"},"content":""},{"lineNumber":649,"author":{"gitID":"-"},"content":"****"},{"lineNumber":650,"author":{"gitID":"RyanAngJY"},"content":"* If the selected recipe has a URL, the in-app browser will load that URL."},{"lineNumber":651,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":652,"author":{"gitID":"-"},"content":"* The index *must be a positive integer*, e.g. \"1, 2, 3, ...\"."},{"lineNumber":653,"author":{"gitID":"-"},"content":"****"},{"lineNumber":654,"author":{"gitID":"-"},"content":""},{"lineNumber":655,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":656,"author":{"gitID":"-"},"content":""},{"lineNumber":657,"author":{"gitID":"-"},"content":"* *`push 6`* +"},{"lineNumber":658,"author":{"gitID":"-"},"content":"Uploads the 6th recipe in the recipe book to the server."},{"lineNumber":659,"author":{"gitID":"-"},"content":""},{"lineNumber":660,"author":{"gitID":"-"},"content":"[[faq]]"},{"lineNumber":661,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":662,"author":{"gitID":"-"},"content":""},{"lineNumber":663,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another computer? +"},{"lineNumber":664,"author":{"gitID":"-"},"content":"*A*: Install the app on the other computer and overwrite the empty data file it creates with the file that contains the data of your previous ReciRecipé."},{"lineNumber":665,"author":{"gitID":"-"},"content":""},{"lineNumber":666,"author":{"gitID":"-"},"content":"*Q*: Where do I find my data file? +"},{"lineNumber":667,"author":{"gitID":"-"},"content":"*A*: image:FAQ2.PNG[width\u003d\"450\"]"},{"lineNumber":668,"author":{"gitID":"-"},"content":"{nbsp}"},{"lineNumber":669,"author":{"gitID":"-"},"content":""},{"lineNumber":670,"author":{"gitID":"-"},"content":"*Q*: There is still something I don\u0027t understand after reading this guide! +"},{"lineNumber":671,"author":{"gitID":"-"},"content":"*A*: Please https://github.com/CS2103JAN2018-F09-B2/main/issues[create a new issue in our repo] about what you\u0027re confused about. We will try our best to answer your query."},{"lineNumber":672,"author":{"gitID":"-"},"content":""},{"lineNumber":673,"author":{"gitID":"-"},"content":"*Q*: None of the commands work! Why? +"},{"lineNumber":674,"author":{"gitID":"-"},"content":"*A*: Are you copying from the *command* section instead of the *example* section? If you want to use `add name/RECIPE_NAME [ingredient/INGREDIENT]`, a valid command would be *`add name/Chicken rice ingredient/chicken, rice`* instead of *`add name/Chicken rice [ingredient/chicken, rice]`*."},{"lineNumber":675,"author":{"gitID":"-"},"content":""},{"lineNumber":676,"author":{"gitID":"-"},"content":"*Q*: ReciRecipé doesn\u0027t appear when I double click _recipebook.jar_! What should I do? +"},{"lineNumber":677,"author":{"gitID":"-"},"content":"*A*: If you are using Windows and ReciRecipé doesn\u0027t appear, it might be due to conflicting versions of JRE. +"},{"lineNumber":678,"author":{"gitID":"-"},"content":"As a work around, hold kbd:[Shift] and right click on any blank space in the folder you are using as the home folder for ReciRecipé (refer to \u003c\u003cright-click-windows\u003e\u003e). +"},{"lineNumber":679,"author":{"gitID":"-"},"content":"[[right-click-windows]]"},{"lineNumber":680,"author":{"gitID":"-"},"content":".Windows context menu"},{"lineNumber":681,"author":{"gitID":"-"},"content":"image::WindowsContext.png[width\u003d\"276\"]"},{"lineNumber":682,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":683,"author":{"gitID":"-"},"content":"Select *Open command window here* (earlier versions of Windows) or *Open PowerShell window here* (Windows 10), type in `java -jar recipebook.jar`. +"},{"lineNumber":684,"author":{"gitID":"-"},"content":"After this step, you should get something like \u003c\u003cpowershell\u003e\u003e or \u003c\u003ccmd\u003e\u003e depending on the version of Windows you are running:"},{"lineNumber":685,"author":{"gitID":"-"},"content":"[[powershell]]"},{"lineNumber":686,"author":{"gitID":"-"},"content":".Windows PowerShell"},{"lineNumber":687,"author":{"gitID":"-"},"content":"image::WindowsPowerShell.png[width\u003d\"400\"]"},{"lineNumber":688,"author":{"gitID":"-"},"content":"[[cmd]]"},{"lineNumber":689,"author":{"gitID":"-"},"content":".Windows command"},{"lineNumber":690,"author":{"gitID":"-"},"content":"image::WindowsCMD.png[width\u003d\"400\"]"},{"lineNumber":691,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":692,"author":{"gitID":"-"},"content":"Then press kbd:[Enter] to launch ReciRecipé."},{"lineNumber":693,"author":{"gitID":"-"},"content":""},{"lineNumber":694,"author":{"gitID":"-"},"content":"*Q*: I cannot add an online image to my recipe! Why? +"},{"lineNumber":695,"author":{"gitID":"-"},"content":"*A*: Please check if your device is connected to the Internet. Image downloading only works when there is an Internet connection."},{"lineNumber":696,"author":{"gitID":"-"},"content":""},{"lineNumber":697,"author":{"gitID":"-"},"content":"*Q*: I found a bug in your program, what should I do? +"},{"lineNumber":698,"author":{"gitID":"-"},"content":"*A*: Please check \u003c\u003ccurrent-issues\u003e\u003e to see whether your bug has been reported already. If it is a new bug, please https://github.com/CS2103JAN2018-F09-B2/main/issues[create a new issue in our repo] describing the problem you encountered as detailed as possible and upload your log file when you create the issue. Usually, the log file has a name like _recipebook.log.0_ or _recipebook.log.1_. You can find the log file in the folder you store ReciRecipé."},{"lineNumber":699,"author":{"gitID":"-"},"content":""},{"lineNumber":700,"author":{"gitID":"-"},"content":"*Q*: I know how to code, how can I contribute to your project? +"},{"lineNumber":701,"author":{"gitID":"RyanAngJY"},"content":"*A*: Code contributors are always appreciated! Please https://github.com/CS2103JAN2018-F09-B2/main/pulls[create a PR] with your contribution. You might want to take a look at the \u003c\u003cDeveloperGuide#,Developer Guide\u003e\u003e to get started."},{"lineNumber":702,"author":{"gitID":"-"},"content":""},{"lineNumber":703,"author":{"gitID":"-"},"content":"\u003d\u003d Cheatsheet"},{"lineNumber":704,"author":{"gitID":"-"},"content":"[width\u003d100%, cols\u003d\"1,5,5\"]"},{"lineNumber":705,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":706,"author":{"gitID":"-"},"content":"| Command | Format | Example"},{"lineNumber":707,"author":{"gitID":"-"},"content":""},{"lineNumber":708,"author":{"gitID":"-"},"content":"| *Add*             |   `add name/RECIPE_NAME [ingredient/INGREDIENT] [instruction/INSTRUCTION] [cooking_time/COOKING_TIME] [preparation_time/PREPARATION_TIME] [calories/CALORIES] [servings/SERVINGS] [url/URL] [img/IMAGE] [tag/TAG]...`"},{"lineNumber":709,"author":{"gitID":"-"},"content":"                    |   *`add name/Chicken Rice ingredient/chicken, rice cooking_time/10m tag/good tag/fast`*"},{"lineNumber":710,"author":{"gitID":"-"},"content":"| *Change theme*    |  `theme`"},{"lineNumber":711,"author":{"gitID":"-"},"content":"                    |  *`theme`*"},{"lineNumber":712,"author":{"gitID":"-"},"content":"| *Clear*           |  `clear`"},{"lineNumber":713,"author":{"gitID":"-"},"content":"                    |  *`clear`*"},{"lineNumber":714,"author":{"gitID":"-"},"content":"| *Delete*          |  `delete INDEX`"},{"lineNumber":715,"author":{"gitID":"-"},"content":"                    |   *`delete 3`*"},{"lineNumber":716,"author":{"gitID":"-"},"content":"| *Edit*            |  `edit INDEX [name/RECIPE_NAME] [ingredient/INGREDIENT] [instruction/INSTRUCTION] [cooking_time/COOKING_TIME] [preparation_time/PREPARATION_TIME] [calories/CALORIES] [servings/SERVINGS] [url/URL] [img/IMAGE] [tag/TAG]`"},{"lineNumber":717,"author":{"gitID":"-"},"content":"                    |   *`edit 2 name/Chicken pizza ingredient/flour,chicken,pepper`*"},{"lineNumber":718,"author":{"gitID":"-"},"content":"| *Find*            |  `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":719,"author":{"gitID":"-"},"content":"                    |   *`find Chicken Pizza`*"},{"lineNumber":720,"author":{"gitID":"-"},"content":"| *Group*           |  `group group_name/GROUP_NAME index/INDEX [index/INDEX]...`"},{"lineNumber":721,"author":{"gitID":"-"},"content":"                    |   *`group group_name/ Best index/ 1 index/ 3`*"},{"lineNumber":722,"author":{"gitID":"-"},"content":"| *Help*            |  `help`"},{"lineNumber":723,"author":{"gitID":"-"},"content":"                    |  *`help`*"},{"lineNumber":724,"author":{"gitID":"-"},"content":"| *History*         |  `history`"},{"lineNumber":725,"author":{"gitID":"-"},"content":"                    |  *`history`*"},{"lineNumber":726,"author":{"gitID":"-"},"content":"| *Ingredient search* |  `ingredient KEYWORD [MORE_KEYWORDS]...`"},{"lineNumber":727,"author":{"gitID":"-"},"content":"                    |   *`ingredient chicken rice`*"},{"lineNumber":728,"author":{"gitID":"-"},"content":"| *Internet search* |  `search RECIPE_NAME`"},{"lineNumber":729,"author":{"gitID":"-"},"content":"                    |   *`search hainanese chicken rice`*"},{"lineNumber":730,"author":{"gitID":"-"},"content":"| *List*            |  `list`"},{"lineNumber":731,"author":{"gitID":"-"},"content":"                    |  *`list`*"},{"lineNumber":732,"author":{"gitID":"-"},"content":"| *Parse*           |  `parse`"},{"lineNumber":733,"author":{"gitID":"-"},"content":"                    |  *`parse`*"},{"lineNumber":734,"author":{"gitID":"-"},"content":"| *Redo*            |  `redo`"},{"lineNumber":735,"author":{"gitID":"-"},"content":"                    |  *`redo`*"},{"lineNumber":736,"author":{"gitID":"-"},"content":"| *Select*          |  `select INDEX`"},{"lineNumber":737,"author":{"gitID":"-"},"content":"                    |   *`select 2`*"},{"lineNumber":738,"author":{"gitID":"-"},"content":"| *Share*           |  `share INDEX`"},{"lineNumber":739,"author":{"gitID":"-"},"content":"                    |   *`share 2`*"},{"lineNumber":740,"author":{"gitID":"-"},"content":"| *Tag*             |  `tag KEYWORD [MORE_KEYWORDS]...`"},{"lineNumber":741,"author":{"gitID":"-"},"content":"                    |   *`tag Cucumber Tomato Egg`*"},{"lineNumber":742,"author":{"gitID":"-"},"content":"| *Token*           |   `token AUTHORIZATION_CODE`"},{"lineNumber":743,"author":{"gitID":"-"},"content":"                    |   *`token someValidCode123456`*"},{"lineNumber":744,"author":{"gitID":"-"},"content":"| *Undo*            |  `undo`"},{"lineNumber":745,"author":{"gitID":"-"},"content":"                    |  *`undo`*"},{"lineNumber":746,"author":{"gitID":"-"},"content":"| *Upload*          |  `upload FILENAME`"},{"lineNumber":747,"author":{"gitID":"-"},"content":"                    |   *`upload RecipeBook`*"},{"lineNumber":748,"author":{"gitID":"-"},"content":"| *View group*      |  `view_group GROUP_NAME`"},{"lineNumber":749,"author":{"gitID":"-"},"content":"                    |   *`view_group Best`*"},{"lineNumber":750,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":751,"author":{"gitID":"-"},"content":""},{"lineNumber":752,"author":{"gitID":"-"},"content":"\u003d\u003d Keyboard shortcuts"},{"lineNumber":753,"author":{"gitID":"-"},"content":""},{"lineNumber":754,"author":{"gitID":"-"},"content":"[width\u003d100%, cols\u003d\"2,4\"]"},{"lineNumber":755,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":756,"author":{"gitID":"-"},"content":"| Shortcut                  |   Function"},{"lineNumber":757,"author":{"gitID":"-"},"content":""},{"lineNumber":758,"author":{"gitID":"-"},"content":"| kbd:[Enter]               |   Command submission"},{"lineNumber":759,"author":{"gitID":"-"},"content":"| kbd:[Ctrl] + kbd:[\u0026uarr;] |   Previous command"},{"lineNumber":760,"author":{"gitID":"-"},"content":"| kbd:[Ctrl] + kbd:[\u0026darr;] |   Next command"},{"lineNumber":761,"author":{"gitID":"-"},"content":"| kbd:[Shift] + kbd:[Enter] |   New line in command"},{"lineNumber":762,"author":{"gitID":"-"},"content":"| kbd:[Shift] + kbd:[Tab]   |   Show command suggestions"},{"lineNumber":763,"author":{"gitID":"-"},"content":"| kbd:[Ctrl] + kbd:[Tab]    |   Previous field in command"},{"lineNumber":764,"author":{"gitID":"-"},"content":"| kbd:[Tab]                 |   Next field in command"},{"lineNumber":765,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":766,"author":{"gitID":"-"},"content":""},{"lineNumber":767,"author":{"gitID":"-"},"content":"[[current-issues]]"},{"lineNumber":768,"author":{"gitID":"-"},"content":"//tag::current-issues[]"},{"lineNumber":769,"author":{"gitID":"-"},"content":"\u003d\u003d Current issues"},{"lineNumber":770,"author":{"gitID":"-"},"content":"These are issues that have been reported and might be resolved in the future:"},{"lineNumber":771,"author":{"gitID":"-"},"content":""},{"lineNumber":772,"author":{"gitID":"-"},"content":"* `parse` command does not work on some sites. +"},{"lineNumber":773,"author":{"gitID":"-"},"content":"_Currently `parse` only works with http://recipes.wikia.com/ and its children sites (both desktop and mobile versions). Support for other sites will be considered for v2.0._"},{"lineNumber":774,"author":{"gitID":"-"},"content":"* `parse` command returns results for pages that are not recipes / doesn\u0027t return result for pages that are recipes / returns incorrect results. +"},{"lineNumber":775,"author":{"gitID":"-"},"content":"_A powerful text analyzer that can parse almost anything with high accuracy is out of our product scale. However, we will try our best to improve the parser quality so that you can enjoy a better product._"},{"lineNumber":776,"author":{"gitID":"-"},"content":"* *_PREPARATION_TIME_* and *_COOKING_TIME_* accept invalid time values, e.g. `1h90m`, `200 mins 2 hours`, etc. +"},{"lineNumber":777,"author":{"gitID":"-"},"content":"_We expect you to provide ReciRecipé with a correct and valid time value like `150m` instead of `1h90m`. More restrictive formats will be considered for v2.0._"},{"lineNumber":778,"author":{"gitID":"-"},"content":"* Sometimes `add` command hangs ReciRecipé. +"},{"lineNumber":779,"author":{"gitID":"-"},"content":"_This is likely due to a tricky input that confuses our product. If you encounter such an event while using ReciRecipé, please https://github.com/CS2103JAN2018-F09-B2/main/issues[send us a feedback] with the input that caused the problem._"},{"lineNumber":780,"author":{"gitID":"-"},"content":"* kbd:[F1] and kbd:[F2] sometimes don\u0027t work. +"},{"lineNumber":781,"author":{"gitID":"-"},"content":"_This is a known problem with current versions of Java. We have been looking into this problem and the issue might be resolved soon._"},{"lineNumber":782,"author":{"gitID":"-"},"content":"* Big images make ReciRecipé laggy. +"},{"lineNumber":783,"author":{"gitID":"-"},"content":"_Currently, ReciRecipé does not distinguish between large and small images. You should use images under 1MB as a workaround for now. This problem will be resolved in v2.0._ +"},{"lineNumber":784,"author":{"gitID":"-"},"content":"* Suggestion list (auto-completion) sometimes does not show below caret position. +"},{"lineNumber":785,"author":{"gitID":"-"},"content":"_This is due to the limited support of `CommandBox` to get coordinates of caret inside it. We have tried to fix this but have not found an efficient solution. This problem will be resolved in v2.0. Currently, our solution is to show suggestion list at the bottom of `CommandBox` if the input text is long enough to cause the problem. If the input text is short, suggestion list will still be shown below caret position._"},{"lineNumber":786,"author":{"gitID":"-"},"content":"//end:current-issues[]"},{"lineNumber":787,"author":{"gitID":"-"},"content":""},{"lineNumber":788,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":789,"author":{"gitID":"-"},"content":""},{"lineNumber":790,"author":{"gitID":"-"},"content":"include::./Glossary.adoc[]"},{"lineNumber":791,"author":{"gitID":"-"},"content":""},{"lineNumber":792,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":793,"author":{"gitID":"-"},"content":"include::./NavBar.adoc[]"},{"lineNumber":794,"author":{"gitID":"-"},"content":"endif::[]"}],"authorContributionMap":{"RyanAngJY":16,"hoangduong1607":37,"-":741}},{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"RyanAngJY"},"content":"ReciRecipé was developed by the team below. +"},{"lineNumber":7,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Nguyen Cong Thanh"},{"lineNumber":12,"author":{"gitID":"-"},"content":"image::kokonguyen191.jpeg[width\u003d\"144\", align\u003d\"left\"]"},{"lineNumber":13,"author":{"gitID":"-"},"content":"{empty}https://github.com/kokonguyen191[github] | \u003c\u003cThanhNguyen#, portfolio\u003e\u003e"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"Role: Team Lead, DevOps, FS Dev +"},{"lineNumber":16,"author":{"gitID":"-"},"content":"Responsibilities: Logic, UI, Storage"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Ryan Ang Jia Yong"},{"lineNumber":21,"author":{"gitID":"-"},"content":"image::ryanangjy.jpeg[width\u003d\"144\", align\u003d\"left\"]"},{"lineNumber":22,"author":{"gitID":"-"},"content":"{empty}https://github.com/RyanAngJY[github] | \u003c\u003cRyanAng#,portfolio\u003e\u003e"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"Role: FS Dev, UX Designer +"},{"lineNumber":25,"author":{"gitID":"-"},"content":"Responsibilities: Logic, UX, Storage, Model"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"RyanAngJY"},"content":"\u003d\u003d\u003d Hoang Duong"},{"lineNumber":30,"author":{"gitID":"-"},"content":"image::hoangduong1607.jpeg[width\u003d\"144\", align\u003d\"left\"]"},{"lineNumber":31,"author":{"gitID":"-"},"content":"{empty}https://github.com/hoangduong1607[github] | \u003c\u003cHoangDuong#, portfolio\u003e\u003e"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"Role: FS Dev +"},{"lineNumber":34,"author":{"gitID":"-"},"content":"Responsibilities: Logic, UI, Model"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Nicholas Ang Cheng Xue"},{"lineNumber":39,"author":{"gitID":"-"},"content":"image::nicholasangcx.jpeg[width\u003d\"144\", align\u003d\"left\"]"},{"lineNumber":40,"author":{"gitID":"-"},"content":"{empty}https://github.com/nicholasangcx[github] | \u003c\u003cNicholasAng#, portfolio\u003e\u003e"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"Role: FS Dev, Releases, Documentation +"},{"lineNumber":43,"author":{"gitID":"-"},"content":"Responsibilities: Logic, UI, Storage"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":48,"author":{"gitID":"-"},"content":"include::./NavBar.adoc[]"},{"lineNumber":49,"author":{"gitID":"-"},"content":"endif::[]"}],"authorContributionMap":{"RyanAngJY":2,"-":47}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"RyanAngJY"},"content":"\u003d ReciRecipé"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"https://travis-ci.org/CS2103JAN2018-F09-B2/main[image:https://travis-ci.org/CS2103JAN2018-F09-B2/main.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":5,"author":{"gitID":"-"},"content":"https://ci.appveyor.com/project/kokonguyen191/main/branch/master[image:https://ci.appveyor.com/api/projects/status/9gwtvvply06uogsd/branch/master?svg\u003dtrue[Build status]]"},{"lineNumber":6,"author":{"gitID":"-"},"content":"https://coveralls.io/github/CS2103JAN2018-F09-B2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-F09-B2/main/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":7,"author":{"gitID":"-"},"content":"https://www.codacy.com/app/kokonguyen191/main?utm_source\u003dgithub.com\u0026amp;utm_medium\u003dreferral\u0026amp;utm_content\u003dCS2103JAN2018-F09-B2/main\u0026amp;utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/f3f1b716cac244338ea565c73d592d82[Codacy Badge]]"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":"image::images/Ui.PNG[width\u003d\"600\"]"},{"lineNumber":11,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":15,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"Are you a professional chef who is too lazy to manually flip through each page of your recipe book to find your favorite recipe? Are you a home cook who is lost and doesn\u0027t know what to have to dinner? Or are you just a perfectionist who prefers to have all of his recipes in one place, organized, systematic, well-structured?"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"Then **ReciRecipé** is the solution for you!"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"* It is a CLI (Command Line Interface) application, so you can save time using your keyboard instead of your mouse to nagivate."},{"lineNumber":22,"author":{"gitID":"-"},"content":"* What you can do with **ReciRecipé**:"},{"lineNumber":23,"author":{"gitID":"RyanAngJY"},"content":"** Keyboard shortcuts to speed up the process of typing and adding a recipe."},{"lineNumber":24,"author":{"gitID":"RyanAngJY"},"content":"** Social media compatibility for sharing of recipes."},{"lineNumber":25,"author":{"gitID":"RyanAngJY"},"content":"** Ability to add images to recipes."},{"lineNumber":26,"author":{"gitID":"RyanAngJY"},"content":"** Cloud storage to access recipes anytime, anywhere."},{"lineNumber":27,"author":{"gitID":"-"},"content":"** And a lot more!"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":30,"author":{"gitID":"-"},"content":"\u003d\u003d https://recirecipe.netlify.com/[Website]"},{"lineNumber":31,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":34,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":37,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":38,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":39,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":40,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"* ReciRecipé was built on AddressBook-Level4 project created by SE-EDU initiative at https://github.com/se-edu/"},{"lineNumber":45,"author":{"gitID":"-"},"content":"* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":46,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":47,"author":{"gitID":"-"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4], https://jsoup.org[jSoup]."},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"RyanAngJY":5,"-":44}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.CALORIES_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.CALORIES_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.COOKING_TIME_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.COOKING_TIME_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.IMG_DESC_AMY;"},{"lineNumber":9,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.IMG_DESC_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INGREDIENT_DESC_AMY;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INGREDIENT_DESC_BOB;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INSTRUCTION_DESC_AMY;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INSTRUCTION_DESC_BOB;"},{"lineNumber":14,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_IMG_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_INGREDIENT_DESC;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_INSTRUCTION_DESC;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_PREPARATION_TIME_DESC;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":20,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_URL_DESC;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.PREPARATION_TIME_DESC_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.PREPARATION_TIME_DESC_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.SERVINGS_DESC_AMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.SERVINGS_DESC_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":29,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.URL_DESC_AMY;"},{"lineNumber":30,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.URL_DESC_BOB;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_CALORIES_AMY;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_COOKING_TIME_AMY;"},{"lineNumber":33,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_IMG_AMY;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_INGREDIENT_AMY;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_INGREDIENT_BOB;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_INSTRUCTION_AMY;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_INSTRUCTION_BOB;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_PREPARATION_TIME_AMY;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_SERVINGS_AMY;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":43,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_URL_AMY;"},{"lineNumber":44,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_URL_BOB;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import static seedu.recipe.testutil.TypicalRecipes.ALICE;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import static seedu.recipe.testutil.TypicalRecipes.AMY;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import static seedu.recipe.testutil.TypicalRecipes.BOB;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import static seedu.recipe.testutil.TypicalRecipes.CARL;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import static seedu.recipe.testutil.TypicalRecipes.HOON;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import static seedu.recipe.testutil.TypicalRecipes.IDA;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import static seedu.recipe.testutil.TypicalRecipes.KEYWORD_MATCHING_MEIER;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.Messages;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.index.Index;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.AddCommand;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.RedoCommand;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.UndoCommand;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"import seedu.recipe.model.Model;"},{"lineNumber":62,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.model.recipe.Image;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Ingredient;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Instruction;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Name;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.PreparationTime;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Recipe;"},{"lineNumber":68,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.model.recipe.Url;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.exceptions.DuplicateRecipeException;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"import seedu.recipe.model.tag.Tag;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"import seedu.recipe.testutil.RecipeBuilder;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"import seedu.recipe.testutil.RecipeUtil;"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends RecipeBookSystemTest {"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        /* Case: add a recipe without tags to a non-empty recipe book, command with leading spaces and trailing spaces"},{"lineNumber":83,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":84,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        Recipe toAdd \u003d AMY;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + INGREDIENT_DESC_AMY + \" \""},{"lineNumber":87,"author":{"gitID":"-"},"content":"                + INSTRUCTION_DESC_AMY + \"   \" + PREPARATION_TIME_DESC_AMY + \"   \" + COOKING_TIME_DESC_AMY + \"   \""},{"lineNumber":88,"author":{"gitID":"-"},"content":"                + CALORIES_DESC_AMY + \"   \" + SERVINGS_DESC_AMY + \"   \" + URL_DESC_AMY + \"   \""},{"lineNumber":89,"author":{"gitID":"RyanAngJY"},"content":"                + IMG_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        model.addRecipe(toAdd);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        /* Case: add a recipe with all fields same as another recipe in the recipe book except name -\u003e added */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        toAdd \u003d new RecipeBuilder()"},{"lineNumber":105,"author":{"gitID":"-"},"content":"                .withName(VALID_NAME_BOB)"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                .withIngredient(VALID_INGREDIENT_AMY)"},{"lineNumber":107,"author":{"gitID":"-"},"content":"                .withInstruction(VALID_INSTRUCTION_AMY)"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                .withCookingTime(VALID_COOKING_TIME_AMY)"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                .withPreparationTime(VALID_PREPARATION_TIME_AMY)"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                .withCalories(VALID_CALORIES_AMY)"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                .withServings(VALID_SERVINGS_AMY)"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                .withUrl(VALID_URL_AMY)"},{"lineNumber":113,"author":{"gitID":"RyanAngJY"},"content":"                .withImage(VALID_IMG_AMY)"},{"lineNumber":114,"author":{"gitID":"RyanAngJY"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                + NAME_DESC_BOB"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                + INGREDIENT_DESC_AMY"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                + INSTRUCTION_DESC_AMY"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                + COOKING_TIME_DESC_AMY"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                + PREPARATION_TIME_DESC_AMY"},{"lineNumber":121,"author":{"gitID":"-"},"content":"                + CALORIES_DESC_AMY"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                + SERVINGS_DESC_AMY"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                + URL_DESC_AMY"},{"lineNumber":124,"author":{"gitID":"RyanAngJY"},"content":"                + IMG_DESC_AMY"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        /* Case: add a recipe with all fields same as another recipe in the recipe book except ingredient -\u003e added */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        toAdd \u003d new RecipeBuilder()"},{"lineNumber":130,"author":{"gitID":"-"},"content":"                .withName(VALID_NAME_AMY)"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                .withIngredient(VALID_INGREDIENT_BOB)"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                .withInstruction(VALID_INSTRUCTION_AMY)"},{"lineNumber":133,"author":{"gitID":"-"},"content":"                .withCookingTime(VALID_COOKING_TIME_AMY)"},{"lineNumber":134,"author":{"gitID":"-"},"content":"                .withPreparationTime(VALID_PREPARATION_TIME_AMY)"},{"lineNumber":135,"author":{"gitID":"-"},"content":"                .withCalories(VALID_CALORIES_AMY)"},{"lineNumber":136,"author":{"gitID":"-"},"content":"                .withServings(VALID_SERVINGS_AMY)"},{"lineNumber":137,"author":{"gitID":"-"},"content":"                .withUrl(VALID_URL_AMY)"},{"lineNumber":138,"author":{"gitID":"RyanAngJY"},"content":"                .withImage(VALID_IMG_AMY)"},{"lineNumber":139,"author":{"gitID":"RyanAngJY"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD"},{"lineNumber":141,"author":{"gitID":"-"},"content":"                + NAME_DESC_AMY"},{"lineNumber":142,"author":{"gitID":"-"},"content":"                + INGREDIENT_DESC_BOB"},{"lineNumber":143,"author":{"gitID":"-"},"content":"                + INSTRUCTION_DESC_AMY"},{"lineNumber":144,"author":{"gitID":"-"},"content":"                + COOKING_TIME_DESC_AMY"},{"lineNumber":145,"author":{"gitID":"-"},"content":"                + PREPARATION_TIME_DESC_AMY"},{"lineNumber":146,"author":{"gitID":"-"},"content":"                + CALORIES_DESC_AMY"},{"lineNumber":147,"author":{"gitID":"-"},"content":"                + SERVINGS_DESC_AMY"},{"lineNumber":148,"author":{"gitID":"-"},"content":"                + URL_DESC_AMY"},{"lineNumber":149,"author":{"gitID":"RyanAngJY"},"content":"                + IMG_DESC_AMY"},{"lineNumber":150,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        /* Case: add a recipe with all fields same as another recipe in the recipe book except inst -\u003e added */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        toAdd \u003d new RecipeBuilder()"},{"lineNumber":155,"author":{"gitID":"-"},"content":"                .withName(VALID_NAME_AMY)"},{"lineNumber":156,"author":{"gitID":"-"},"content":"                .withIngredient(VALID_INGREDIENT_AMY)"},{"lineNumber":157,"author":{"gitID":"-"},"content":"                .withInstruction(VALID_INSTRUCTION_BOB)"},{"lineNumber":158,"author":{"gitID":"-"},"content":"                .withCookingTime(VALID_COOKING_TIME_AMY)"},{"lineNumber":159,"author":{"gitID":"-"},"content":"                .withPreparationTime(VALID_PREPARATION_TIME_AMY)"},{"lineNumber":160,"author":{"gitID":"-"},"content":"                .withCalories(VALID_CALORIES_AMY)"},{"lineNumber":161,"author":{"gitID":"-"},"content":"                .withServings(VALID_SERVINGS_AMY)"},{"lineNumber":162,"author":{"gitID":"-"},"content":"                .withUrl(VALID_URL_AMY)"},{"lineNumber":163,"author":{"gitID":"RyanAngJY"},"content":"                .withImage(VALID_IMG_AMY)"},{"lineNumber":164,"author":{"gitID":"RyanAngJY"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD"},{"lineNumber":166,"author":{"gitID":"-"},"content":"                + NAME_DESC_AMY"},{"lineNumber":167,"author":{"gitID":"-"},"content":"                + INGREDIENT_DESC_AMY"},{"lineNumber":168,"author":{"gitID":"-"},"content":"                + INSTRUCTION_DESC_BOB"},{"lineNumber":169,"author":{"gitID":"-"},"content":"                + COOKING_TIME_DESC_AMY"},{"lineNumber":170,"author":{"gitID":"-"},"content":"                + PREPARATION_TIME_DESC_AMY"},{"lineNumber":171,"author":{"gitID":"-"},"content":"                + CALORIES_DESC_AMY"},{"lineNumber":172,"author":{"gitID":"-"},"content":"                + SERVINGS_DESC_AMY"},{"lineNumber":173,"author":{"gitID":"-"},"content":"                + URL_DESC_AMY"},{"lineNumber":174,"author":{"gitID":"RyanAngJY"},"content":"                + IMG_DESC_AMY"},{"lineNumber":175,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        /* Case: add a recipe with all fields same as another recipe in the recipe book except URL -\u003e added */"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        toAdd \u003d new RecipeBuilder()"},{"lineNumber":181,"author":{"gitID":"-"},"content":"                .withName(VALID_NAME_AMY)"},{"lineNumber":182,"author":{"gitID":"-"},"content":"                .withIngredient(VALID_INGREDIENT_AMY)"},{"lineNumber":183,"author":{"gitID":"-"},"content":"                .withInstruction(VALID_INSTRUCTION_AMY)"},{"lineNumber":184,"author":{"gitID":"-"},"content":"                .withCookingTime(VALID_COOKING_TIME_AMY)"},{"lineNumber":185,"author":{"gitID":"-"},"content":"                .withPreparationTime(VALID_PREPARATION_TIME_AMY)"},{"lineNumber":186,"author":{"gitID":"-"},"content":"                .withCalories(VALID_CALORIES_AMY)"},{"lineNumber":187,"author":{"gitID":"-"},"content":"                .withServings(VALID_SERVINGS_AMY)"},{"lineNumber":188,"author":{"gitID":"-"},"content":"                .withUrl(VALID_URL_BOB)"},{"lineNumber":189,"author":{"gitID":"RyanAngJY"},"content":"                .withImage(VALID_IMG_AMY)"},{"lineNumber":190,"author":{"gitID":"RyanAngJY"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD"},{"lineNumber":192,"author":{"gitID":"-"},"content":"                + NAME_DESC_AMY"},{"lineNumber":193,"author":{"gitID":"-"},"content":"                + INGREDIENT_DESC_AMY"},{"lineNumber":194,"author":{"gitID":"-"},"content":"                + INSTRUCTION_DESC_AMY"},{"lineNumber":195,"author":{"gitID":"-"},"content":"                + COOKING_TIME_DESC_AMY"},{"lineNumber":196,"author":{"gitID":"-"},"content":"                + PREPARATION_TIME_DESC_AMY"},{"lineNumber":197,"author":{"gitID":"-"},"content":"                + CALORIES_DESC_AMY"},{"lineNumber":198,"author":{"gitID":"-"},"content":"                + SERVINGS_DESC_AMY"},{"lineNumber":199,"author":{"gitID":"-"},"content":"                + URL_DESC_BOB"},{"lineNumber":200,"author":{"gitID":"RyanAngJY"},"content":"                + IMG_DESC_AMY"},{"lineNumber":201,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"        /* Case: add to empty recipe book -\u003e added */"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        deleteAllRecipes();"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"        /* Case: add a recipe with tags, command with parameters in random order -\u003e added */"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":210,"author":{"gitID":"RyanAngJY"},"content":"        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + URL_DESC_BOB + PREPARATION_TIME_DESC_BOB"},{"lineNumber":211,"author":{"gitID":"RyanAngJY"},"content":"                + COOKING_TIME_DESC_BOB + CALORIES_DESC_BOB + SERVINGS_DESC_BOB + IMG_DESC_BOB"},{"lineNumber":212,"author":{"gitID":"RyanAngJY"},"content":"                + INSTRUCTION_DESC_BOB + NAME_DESC_BOB + TAG_DESC_HUSBAND + INGREDIENT_DESC_BOB;"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"        /* Case: add a recipe, missing tags -\u003e added */"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"        /* Case: filters the recipe list before adding -\u003e added */"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        showRecipesWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operation while a recipe card is selected --------------------------- */"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the recipe list, add a recipe -\u003e added, card selection remains unchanged */"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        selectRecipe(Index.fromOneBased(1));"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate recipe -\u003e rejected */"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        command \u003d RecipeUtil.getAddCommand(HOON);"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_RECIPE);"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate recipe except with different tags -\u003e rejected */"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalRecipes#ALICE"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        // RecipeBook#addRecipe(Recipe)"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        command \u003d RecipeUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_RECIPE);"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + PREPARATION_TIME_DESC_AMY + INGREDIENT_DESC_AMY + INSTRUCTION_DESC_AMY;"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + RecipeUtil.getRecipeDetails(toAdd);"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PREPARATION_TIME_DESC_AMY + INGREDIENT_DESC_AMY"},{"lineNumber":253,"author":{"gitID":"-"},"content":"                + INSTRUCTION_DESC_AMY;"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"        /* Case: invalid preparation time -\u003e rejected */"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PREPARATION_TIME_DESC + INGREDIENT_DESC_AMY"},{"lineNumber":258,"author":{"gitID":"-"},"content":"                + INSTRUCTION_DESC_AMY;"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, PreparationTime.MESSAGE_PREPARATION_TIME_CONSTRAINTS);"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"        /* Case: invalid ingredient -\u003e rejected */"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PREPARATION_TIME_DESC_AMY + INVALID_INGREDIENT_DESC"},{"lineNumber":263,"author":{"gitID":"-"},"content":"                + INSTRUCTION_DESC_AMY;"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Ingredient.MESSAGE_INGREDIENT_CONSTRAINTS);"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"        /* Case: invalid recipe -\u003e rejected */"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PREPARATION_TIME_DESC_AMY + INGREDIENT_DESC_AMY"},{"lineNumber":268,"author":{"gitID":"-"},"content":"                + INVALID_INSTRUCTION_DESC;"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Instruction.MESSAGE_INSTRUCTION_CONSTRAINTS);"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"RyanAngJY"},"content":"        /* Case: invalid url -\u003e rejected */"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PREPARATION_TIME_DESC_AMY + INGREDIENT_DESC_AMY"},{"lineNumber":273,"author":{"gitID":"RyanAngJY"},"content":"                + INSTRUCTION_DESC_AMY + INVALID_URL_DESC;"},{"lineNumber":274,"author":{"gitID":"RyanAngJY"},"content":"        assertCommandFailure(command, Url.MESSAGE_URL_CONSTRAINTS);"},{"lineNumber":275,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":276,"author":{"gitID":"RyanAngJY"},"content":"        /* Case: invalid image -\u003e rejected */"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PREPARATION_TIME_DESC_AMY + INGREDIENT_DESC_AMY"},{"lineNumber":278,"author":{"gitID":"RyanAngJY"},"content":"                + INSTRUCTION_DESC_AMY + INVALID_IMG_DESC;"},{"lineNumber":279,"author":{"gitID":"RyanAngJY"},"content":"        assertCommandFailure(command, Image.MESSAGE_IMAGE_CONSTRAINTS);"},{"lineNumber":280,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PREPARATION_TIME_DESC_AMY + INGREDIENT_DESC_AMY"},{"lineNumber":283,"author":{"gitID":"-"},"content":"                + INSTRUCTION_DESC_AMY + INVALID_TAG_DESC;"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":285,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":286,"author":{"gitID":"-"},"content":""},{"lineNumber":287,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":288,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":289,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":290,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":291,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":292,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":293,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code RecipeListPanel} equal to the corresponding components in"},{"lineNumber":294,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":295,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":296,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":297,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":298,"author":{"gitID":"-"},"content":"     * {@code RecipeBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":299,"author":{"gitID":"RyanAngJY"},"content":"     *"},{"lineNumber":300,"author":{"gitID":"-"},"content":"     * @see RecipeBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":301,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":302,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Recipe toAdd) {"},{"lineNumber":303,"author":{"gitID":"-"},"content":"        assertCommandSuccess(RecipeUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":304,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":305,"author":{"gitID":"-"},"content":""},{"lineNumber":306,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":307,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Recipe)}. Executes {@code command}"},{"lineNumber":308,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":309,"author":{"gitID":"RyanAngJY"},"content":"     *"},{"lineNumber":310,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Recipe)"},{"lineNumber":311,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":312,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Recipe toAdd) {"},{"lineNumber":313,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":314,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":315,"author":{"gitID":"-"},"content":"            expectedModel.addRecipe(toAdd);"},{"lineNumber":316,"author":{"gitID":"-"},"content":"        } catch (DuplicateRecipeException dpe) {"},{"lineNumber":317,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":318,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":319,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":322,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":323,"author":{"gitID":"-"},"content":""},{"lineNumber":324,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":325,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Recipe)} except asserts that"},{"lineNumber":326,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":327,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":328,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code RecipeListPanel} equal to the corresponding components in"},{"lineNumber":329,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":330,"author":{"gitID":"RyanAngJY"},"content":"     *"},{"lineNumber":331,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Recipe)"},{"lineNumber":332,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":333,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":334,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":335,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":336,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":337,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":338,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":339,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":340,"author":{"gitID":"-"},"content":""},{"lineNumber":341,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":342,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":343,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":344,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":345,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":346,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code RecipeListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":347,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":348,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":349,"author":{"gitID":"-"},"content":"     * {@code RecipeBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":350,"author":{"gitID":"RyanAngJY"},"content":"     *"},{"lineNumber":351,"author":{"gitID":"-"},"content":"     * @see RecipeBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":352,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":353,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":354,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":355,"author":{"gitID":"-"},"content":""},{"lineNumber":356,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":357,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":358,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":359,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":360,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":361,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":362,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":39,"-":323}},{"path":"src/test/java/systemtests/ParseCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"kokonguyen191"},"content":"//@@author kokonguyen191"},{"lineNumber":2,"author":{"gitID":"kokonguyen191"},"content":"package systemtests;"},{"lineNumber":3,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":4,"author":{"gitID":"kokonguyen191"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"},{"lineNumber":6,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.testutil.TypicalIndexes.INDEX_SECOND_RECIPE;"},{"lineNumber":7,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.testutil.TypicalIndexes.INDEX_THIRD_RECIPE;"},{"lineNumber":8,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.testutil.TypicalRecipes.getTypicalRecipeBook;"},{"lineNumber":9,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.testutil.TypicalRecipes.getTypicalRecipes;"},{"lineNumber":10,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.testutil.WikiaRecipes.HAINANESE_CHICKEN_RICE;"},{"lineNumber":11,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.testutil.WikiaRecipes.MOBILE_WIKIA_UGANDAN_ADD_COMMAND;"},{"lineNumber":12,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.testutil.WikiaRecipes.UGANDAN_CHICKEN_STEW;"},{"lineNumber":13,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.testutil.WikiaRecipes.WIKIA_CHICKEN_ADD_COMMAND;"},{"lineNumber":14,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":15,"author":{"gitID":"kokonguyen191"},"content":"import java.io.File;"},{"lineNumber":16,"author":{"gitID":"kokonguyen191"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":18,"author":{"gitID":"kokonguyen191"},"content":"import org.junit.After;"},{"lineNumber":19,"author":{"gitID":"kokonguyen191"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":21,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.logic.commands.ParseCommand;"},{"lineNumber":22,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.logic.commands.SelectCommand;"},{"lineNumber":23,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.logic.commands.UndoCommand;"},{"lineNumber":24,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.model.Model;"},{"lineNumber":25,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.model.recipe.Image;"},{"lineNumber":28,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.model.recipe.Recipe;"},{"lineNumber":29,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.storage.ImageDownloader;"},{"lineNumber":30,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.testutil.RecipeBuilder;"},{"lineNumber":31,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":32,"author":{"gitID":"kokonguyen191"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"kokonguyen191"},"content":" * A system test class for the parse command, which contains interaction with other UI components."},{"lineNumber":34,"author":{"gitID":"kokonguyen191"},"content":" */"},{"lineNumber":35,"author":{"gitID":"kokonguyen191"},"content":"public class ParseCommandSystemTest extends RecipeBookSystemTest {"},{"lineNumber":36,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":37,"author":{"gitID":"kokonguyen191"},"content":"    private static final String HAINANESE_CHICKEN_RICE_IMAGE_PATH \u003d"},{"lineNumber":38,"author":{"gitID":"kokonguyen191"},"content":"            Image.IMAGE_STORAGE_FOLDER + \"7F474E50D9E9F21A980A30B4D54308AD.\""},{"lineNumber":39,"author":{"gitID":"kokonguyen191"},"content":"                    + ImageDownloader.DOWNLOADED_IMAGE_FORMAT;"},{"lineNumber":40,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":41,"author":{"gitID":"kokonguyen191"},"content":"    private Model model \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs());"},{"lineNumber":42,"author":{"gitID":"kokonguyen191"},"content":"    private List\u003cRecipe\u003e recipes \u003d getTypicalRecipes();"},{"lineNumber":43,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":44,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"kokonguyen191"},"content":"    public void parse() {"},{"lineNumber":46,"author":{"gitID":"kokonguyen191"},"content":"        // First add"},{"lineNumber":47,"author":{"gitID":"kokonguyen191"},"content":"        String command \u003d SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RECIPE.getOneBased();"},{"lineNumber":48,"author":{"gitID":"kokonguyen191"},"content":"        executeCommand(command);"},{"lineNumber":49,"author":{"gitID":"kokonguyen191"},"content":"        assertCommandSuccess(WIKIA_CHICKEN_ADD_COMMAND);"},{"lineNumber":50,"author":{"gitID":"kokonguyen191"},"content":"        getCommandBox().submitCommand();"},{"lineNumber":51,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":52,"author":{"gitID":"kokonguyen191"},"content":"        Recipe testRecipe \u003d new RecipeBuilder(HAINANESE_CHICKEN_RICE).withImage("},{"lineNumber":53,"author":{"gitID":"kokonguyen191"},"content":"                HAINANESE_CHICKEN_RICE_IMAGE_PATH).build();"},{"lineNumber":54,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":55,"author":{"gitID":"kokonguyen191"},"content":"        recipes.add(testRecipe);"},{"lineNumber":56,"author":{"gitID":"kokonguyen191"},"content":"        assertEquals(recipes, getModel().getFilteredRecipeList());"},{"lineNumber":57,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":58,"author":{"gitID":"kokonguyen191"},"content":"        // Remove recipe"},{"lineNumber":59,"author":{"gitID":"kokonguyen191"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":60,"author":{"gitID":"kokonguyen191"},"content":"        executeCommand(command);"},{"lineNumber":61,"author":{"gitID":"kokonguyen191"},"content":"        recipes.remove(testRecipe);"},{"lineNumber":62,"author":{"gitID":"kokonguyen191"},"content":"        assertEquals(recipes, getModel().getFilteredRecipeList());"},{"lineNumber":63,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":64,"author":{"gitID":"kokonguyen191"},"content":"        // Then add again"},{"lineNumber":65,"author":{"gitID":"kokonguyen191"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RECIPE.getOneBased();"},{"lineNumber":66,"author":{"gitID":"kokonguyen191"},"content":"        executeCommand(command);"},{"lineNumber":67,"author":{"gitID":"kokonguyen191"},"content":"        assertCommandSuccess(WIKIA_CHICKEN_ADD_COMMAND);"},{"lineNumber":68,"author":{"gitID":"kokonguyen191"},"content":"        getCommandBox().submitCommand();"},{"lineNumber":69,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":70,"author":{"gitID":"kokonguyen191"},"content":"        recipes.add(testRecipe);"},{"lineNumber":71,"author":{"gitID":"kokonguyen191"},"content":"        assertEquals(recipes, getModel().getFilteredRecipeList());"},{"lineNumber":72,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":73,"author":{"gitID":"kokonguyen191"},"content":"        // Try to parse and add another recipe"},{"lineNumber":74,"author":{"gitID":"kokonguyen191"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + INDEX_SECOND_RECIPE.getOneBased();"},{"lineNumber":75,"author":{"gitID":"kokonguyen191"},"content":"        executeCommand(command);"},{"lineNumber":76,"author":{"gitID":"kokonguyen191"},"content":"        assertCommandSuccess(MOBILE_WIKIA_UGANDAN_ADD_COMMAND);"},{"lineNumber":77,"author":{"gitID":"kokonguyen191"},"content":"        getCommandBox().submitCommand();"},{"lineNumber":78,"author":{"gitID":"kokonguyen191"},"content":"        recipes.add(UGANDAN_CHICKEN_STEW);"},{"lineNumber":79,"author":{"gitID":"kokonguyen191"},"content":"        assertEquals(recipes, getModel().getFilteredRecipeList());"},{"lineNumber":80,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":81,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":82,"author":{"gitID":"kokonguyen191"},"content":"        // Not supported site"},{"lineNumber":83,"author":{"gitID":"kokonguyen191"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + INDEX_THIRD_RECIPE.getOneBased();"},{"lineNumber":84,"author":{"gitID":"kokonguyen191"},"content":"        executeCommand(command);"},{"lineNumber":85,"author":{"gitID":"kokonguyen191"},"content":"        assertCommandSuccess(\"\");"},{"lineNumber":86,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":88,"author":{"gitID":"kokonguyen191"},"content":"    @After"},{"lineNumber":89,"author":{"gitID":"kokonguyen191"},"content":"    public void cleanUp() {"},{"lineNumber":90,"author":{"gitID":"kokonguyen191"},"content":"        File file \u003d new File(HAINANESE_CHICKEN_RICE_IMAGE_PATH);"},{"lineNumber":91,"author":{"gitID":"kokonguyen191"},"content":"        file.delete();"},{"lineNumber":92,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":94,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"kokonguyen191"},"content":"     * Asserts that the {@code SearchCommand} was executed correctly"},{"lineNumber":96,"author":{"gitID":"kokonguyen191"},"content":"     * and the current content of the CommandBox is {@code content}"},{"lineNumber":97,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"kokonguyen191"},"content":"    private void assertCommandSuccess(String content) {"},{"lineNumber":99,"author":{"gitID":"kokonguyen191"},"content":"        executeCommand(ParseCommand.COMMAND_WORD);"},{"lineNumber":100,"author":{"gitID":"kokonguyen191"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":101,"author":{"gitID":"kokonguyen191"},"content":"        assertCommandBoxContent(content);"},{"lineNumber":102,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"kokonguyen191"},"content":"}"}],"authorContributionMap":{"kokonguyen191":103}},{"path":"src/test/java/systemtests/ChangeThemeSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"kokonguyen191"},"content":"//@@author kokonguyen191"},{"lineNumber":2,"author":{"gitID":"kokonguyen191"},"content":"package systemtests;"},{"lineNumber":3,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":4,"author":{"gitID":"kokonguyen191"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.TestApp.APP_TITLE;"},{"lineNumber":6,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"},{"lineNumber":7,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.testutil.TypicalRecipes.getTypicalRecipeBook;"},{"lineNumber":8,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.ui.MainWindow.GIRL_THEME_CSS;"},{"lineNumber":9,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.ui.MainWindow.LIGHT_THEME_CSS;"},{"lineNumber":10,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":11,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":12,"author":{"gitID":"kokonguyen191"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":14,"author":{"gitID":"kokonguyen191"},"content":"import guitests.GuiRobot;"},{"lineNumber":15,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.MainApp;"},{"lineNumber":16,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.logic.commands.ChangeThemeCommand;"},{"lineNumber":17,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.logic.commands.SelectCommand;"},{"lineNumber":18,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.model.Model;"},{"lineNumber":19,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":22,"author":{"gitID":"kokonguyen191"},"content":"public class ChangeThemeSystemTest extends RecipeBookSystemTest {"},{"lineNumber":23,"author":{"gitID":"kokonguyen191"},"content":"    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""},{"lineNumber":24,"author":{"gitID":"kokonguyen191"},"content":"            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""},{"lineNumber":25,"author":{"gitID":"kokonguyen191"},"content":"            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""},{"lineNumber":26,"author":{"gitID":"kokonguyen191"},"content":"            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"},{"lineNumber":27,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":28,"author":{"gitID":"kokonguyen191"},"content":"    private Model model \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs());"},{"lineNumber":29,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":30,"author":{"gitID":"kokonguyen191"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":31,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":32,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"kokonguyen191"},"content":"    public void changeTheme() {"},{"lineNumber":34,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":35,"author":{"gitID":"kokonguyen191"},"content":"        // Use accelerator"},{"lineNumber":36,"author":{"gitID":"kokonguyen191"},"content":"        getCommandBox().click();"},{"lineNumber":37,"author":{"gitID":"kokonguyen191"},"content":"        getMainMenu().changeThemeUsingAccelerator();"},{"lineNumber":38,"author":{"gitID":"kokonguyen191"},"content":"        assertDarkTheme();"},{"lineNumber":39,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":40,"author":{"gitID":"kokonguyen191"},"content":"        getResultDisplay().click();"},{"lineNumber":41,"author":{"gitID":"kokonguyen191"},"content":"        getMainMenu().changeThemeUsingAccelerator();"},{"lineNumber":42,"author":{"gitID":"kokonguyen191"},"content":"        assertLightTheme();"},{"lineNumber":43,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":44,"author":{"gitID":"kokonguyen191"},"content":"        getResultDisplay().click();"},{"lineNumber":45,"author":{"gitID":"kokonguyen191"},"content":"        getMainMenu().changeThemeUsingAccelerator();"},{"lineNumber":46,"author":{"gitID":"kokonguyen191"},"content":"        assertDarkTheme();"},{"lineNumber":47,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":48,"author":{"gitID":"kokonguyen191"},"content":"        getCommandBox().click();"},{"lineNumber":49,"author":{"gitID":"kokonguyen191"},"content":"        getMainMenu().changeThemeUsingAccelerator();"},{"lineNumber":50,"author":{"gitID":"kokonguyen191"},"content":"        assertLightTheme();"},{"lineNumber":51,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":52,"author":{"gitID":"kokonguyen191"},"content":"        // Use menu button"},{"lineNumber":53,"author":{"gitID":"kokonguyen191"},"content":"        getMainMenu().changeThemeUsingMenu();"},{"lineNumber":54,"author":{"gitID":"kokonguyen191"},"content":"        assertDarkTheme();"},{"lineNumber":55,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":56,"author":{"gitID":"kokonguyen191"},"content":"        getMainMenu().changeThemeUsingMenu();"},{"lineNumber":57,"author":{"gitID":"kokonguyen191"},"content":"        assertLightTheme();"},{"lineNumber":58,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":59,"author":{"gitID":"kokonguyen191"},"content":"        // Change theme with command"},{"lineNumber":60,"author":{"gitID":"kokonguyen191"},"content":"        executeCommand(ChangeThemeCommand.COMMAND_WORD);"},{"lineNumber":61,"author":{"gitID":"kokonguyen191"},"content":"        assertDarkTheme();"},{"lineNumber":62,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":63,"author":{"gitID":"kokonguyen191"},"content":"        executeCommand(ChangeThemeCommand.COMMAND_WORD);"},{"lineNumber":64,"author":{"gitID":"kokonguyen191"},"content":"        assertLightTheme();"},{"lineNumber":65,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":66,"author":{"gitID":"kokonguyen191"},"content":"        String command \u003d SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RECIPE.getOneBased();"},{"lineNumber":67,"author":{"gitID":"kokonguyen191"},"content":"        executeCommand(command);"},{"lineNumber":68,"author":{"gitID":"kokonguyen191"},"content":"        executeCommand(ChangeThemeCommand.COMMAND_WORD);"},{"lineNumber":69,"author":{"gitID":"kokonguyen191"},"content":"        assertDarkTheme();"},{"lineNumber":70,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":72,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"kokonguyen191"},"content":"     * Asserts that the current theme color is dark"},{"lineNumber":74,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"kokonguyen191"},"content":"    private void assertDarkTheme() {"},{"lineNumber":76,"author":{"gitID":"kokonguyen191"},"content":"        assertTrue(ERROR_MESSAGE, guiRobot.getStage(APP_TITLE).getScene().getStylesheets().get(0)"},{"lineNumber":77,"author":{"gitID":"kokonguyen191"},"content":"                .equals(MainApp.class.getResource(FXML_FILE_FOLDER + GIRL_THEME_CSS).toExternalForm()));"},{"lineNumber":78,"author":{"gitID":"kokonguyen191"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":79,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":81,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"kokonguyen191"},"content":"     * Asserts that the current theme color is light"},{"lineNumber":83,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"kokonguyen191"},"content":"    private void assertLightTheme() {"},{"lineNumber":85,"author":{"gitID":"kokonguyen191"},"content":"        assertTrue(ERROR_MESSAGE, guiRobot.getStage(APP_TITLE).getScene().getStylesheets().get(0)"},{"lineNumber":86,"author":{"gitID":"kokonguyen191"},"content":"                .equals(MainApp.class.getResource(FXML_FILE_FOLDER + LIGHT_THEME_CSS).toExternalForm()));"},{"lineNumber":87,"author":{"gitID":"kokonguyen191"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":88,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"kokonguyen191"},"content":"}"}],"authorContributionMap":{"kokonguyen191":89}},{"path":"src/test/java/systemtests/GroupCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"hoangduong1607"},"content":"//@@author hoangduong1607"},{"lineNumber":2,"author":{"gitID":"hoangduong1607"},"content":"package systemtests;"},{"lineNumber":3,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":4,"author":{"gitID":"hoangduong1607"},"content":"import static seedu.recipe.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":6,"author":{"gitID":"hoangduong1607"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":8,"author":{"gitID":"hoangduong1607"},"content":"import seedu.recipe.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"hoangduong1607"},"content":"import seedu.recipe.logic.commands.GroupCommand;"},{"lineNumber":10,"author":{"gitID":"hoangduong1607"},"content":"import seedu.recipe.logic.parser.CliSyntax;"},{"lineNumber":11,"author":{"gitID":"hoangduong1607"},"content":"import seedu.recipe.model.Model;"},{"lineNumber":12,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":13,"author":{"gitID":"hoangduong1607"},"content":"public class GroupCommandSystemTest extends RecipeBookSystemTest {"},{"lineNumber":14,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":15,"author":{"gitID":"hoangduong1607"},"content":"    private static final String GROUP_NAME \u003d \"My best\";"},{"lineNumber":16,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":17,"author":{"gitID":"hoangduong1607"},"content":"    private static final String WHITESPACE \u003d \" \";"},{"lineNumber":18,"author":{"gitID":"hoangduong1607"},"content":"    private static final String FIRST_INDEX \u003d \"1\";"},{"lineNumber":19,"author":{"gitID":"hoangduong1607"},"content":"    private static final String SECOND_INDEX \u003d \"2\";"},{"lineNumber":20,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":21,"author":{"gitID":"hoangduong1607"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"hoangduong1607"},"content":"    public void group() throws Exception {"},{"lineNumber":23,"author":{"gitID":"hoangduong1607"},"content":"        final Model defaultModel \u003d getModel();"},{"lineNumber":24,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":25,"author":{"gitID":"hoangduong1607"},"content":"        /* Case: group with valid name and indices -\u003e successful */"},{"lineNumber":26,"author":{"gitID":"hoangduong1607"},"content":"        String command \u003d GroupCommand.COMMAND_WORD + WHITESPACE + CliSyntax.PREFIX_GROUP_NAME + GROUP_NAME + WHITESPACE"},{"lineNumber":27,"author":{"gitID":"hoangduong1607"},"content":"                + CliSyntax.PREFIX_INDEX + FIRST_INDEX + WHITESPACE + CliSyntax.PREFIX_INDEX + SECOND_INDEX;"},{"lineNumber":28,"author":{"gitID":"hoangduong1607"},"content":"        String expectedResultMessage \u003d String.format(GroupCommand.MESSAGE_SUCCESS, GROUP_NAME);"},{"lineNumber":29,"author":{"gitID":"hoangduong1607"},"content":"        assertCommandSuccess(command, expectedResultMessage, defaultModel);"},{"lineNumber":30,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":31,"author":{"gitID":"hoangduong1607"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":32,"author":{"gitID":"hoangduong1607"},"content":"        assertCommandFailure(\"gRoUp\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":33,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":34,"author":{"gitID":"hoangduong1607"},"content":"        /*Case: invalid index -\u003e rejected */"},{"lineNumber":35,"author":{"gitID":"hoangduong1607"},"content":"        String invalidIndex \u003d String.valueOf(defaultModel.getRecipeBook().getRecipeList().size() + 1);"},{"lineNumber":36,"author":{"gitID":"hoangduong1607"},"content":"        command \u003d GroupCommand.COMMAND_WORD + WHITESPACE + CliSyntax.PREFIX_GROUP_NAME + GROUP_NAME + WHITESPACE"},{"lineNumber":37,"author":{"gitID":"hoangduong1607"},"content":"                + CliSyntax.PREFIX_INDEX + invalidIndex;"},{"lineNumber":38,"author":{"gitID":"hoangduong1607"},"content":"        expectedResultMessage \u003d Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX;"},{"lineNumber":39,"author":{"gitID":"hoangduong1607"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":40,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":42,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"hoangduong1607"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"},{"lineNumber":44,"author":{"gitID":"hoangduong1607"},"content":"     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."},{"lineNumber":45,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"hoangduong1607"},"content":"    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"},{"lineNumber":47,"author":{"gitID":"hoangduong1607"},"content":"        executeCommand(command);"},{"lineNumber":48,"author":{"gitID":"hoangduong1607"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":49,"author":{"gitID":"hoangduong1607"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":50,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":52,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"hoangduong1607"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":54,"author":{"gitID":"hoangduong1607"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":55,"author":{"gitID":"hoangduong1607"},"content":"     * These verifications are done by"},{"lineNumber":56,"author":{"gitID":"hoangduong1607"},"content":"     * {@code RecipeBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":57,"author":{"gitID":"hoangduong1607"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":58,"author":{"gitID":"hoangduong1607"},"content":"     * error style."},{"lineNumber":59,"author":{"gitID":"hoangduong1607"},"content":"     *"},{"lineNumber":60,"author":{"gitID":"hoangduong1607"},"content":"     * @see RecipeBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":61,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"hoangduong1607"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":63,"author":{"gitID":"hoangduong1607"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":64,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":65,"author":{"gitID":"hoangduong1607"},"content":"        executeCommand(command);"},{"lineNumber":66,"author":{"gitID":"hoangduong1607"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":67,"author":{"gitID":"hoangduong1607"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":68,"author":{"gitID":"hoangduong1607"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":69,"author":{"gitID":"hoangduong1607"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":70,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"hoangduong1607"},"content":"}"}],"authorContributionMap":{"hoangduong1607":71}},{"path":"src/test/java/systemtests/SelectCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.recipe.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.SelectCommand.MESSAGE_SELECT_RECIPE_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.recipe.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.recipe.testutil.TypicalRecipes.KEYWORD_MATCHING_MEIER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.recipe.testutil.TypicalRecipes.getTypicalRecipes;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.RedoCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.SelectCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.UndoCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.recipe.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class SelectCommandSystemTest extends RecipeBookSystemTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void select() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        /* Case: select the first card in the recipe list, command with leading spaces and trailing spaces"},{"lineNumber":26,"author":{"gitID":"-"},"content":"         * -\u003e selected"},{"lineNumber":27,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RECIPE.getOneBased() + \"   \";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, INDEX_FIRST_RECIPE);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        /* Case: select the last card in the recipe list -\u003e selected */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Index recipeCount \u003d Index.fromOneBased(getTypicalRecipes().size());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + recipeCount.getOneBased();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, recipeCount);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        /* Case: undo previous selection -\u003e rejected */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        /* Case: redo selecting last card in the list -\u003e rejected */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        /* Case: select the middle card in the recipe list -\u003e selected */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Index middleIndex \u003d Index.fromOneBased(recipeCount.getOneBased() / 2);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        /* Case: select the current selected card -\u003e selected */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: filtered recipe list, select index within bounds of recipe book but out of bounds of recipe list"},{"lineNumber":57,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":58,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        showRecipesWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getRecipeBook().getRecipeList().size();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        /* Case: filtered recipe list, select index within bounds of recipe book and recipe list -\u003e selected */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Index validIndex \u003d Index.fromOneBased(1);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredRecipeList().size());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, validIndex);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredRecipeList().size() + 1;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","},{"lineNumber":85,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","},{"lineNumber":89,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: select from empty recipe book -\u003e rejected */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        deleteAllRecipes();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RECIPE.getOneBased(),"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex} of the selected recipe.\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code RecipeListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * {@code RecipeBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * @see RecipeBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * @see RecipeBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":116,"author":{"gitID":"RyanAngJY"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_SELECT_RECIPE_SUCCESS,"},{"lineNumber":117,"author":{"gitID":"RyanAngJY"},"content":"                expectedModel.getFilteredRecipeList().get(expectedSelectedCardIndex.getZeroBased())"},{"lineNumber":118,"author":{"gitID":"RyanAngJY"},"content":"                        .getTextFormattedRecipe());"},{"lineNumber":119,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        int preExecutionSelectedCardIndex \u003d getRecipeListPanel().getSelectedCardIndex();"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code RecipeListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * {@code RecipeBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * @see RecipeBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":4,"-":151}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.CALORIES_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.CALORIES_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.COOKING_TIME_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.COOKING_TIME_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.IMG_DESC_AMY;"},{"lineNumber":10,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.IMG_DESC_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INGREDIENT_DESC_AMY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INGREDIENT_DESC_BOB;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INSTRUCTION_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INSTRUCTION_DESC_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_INGREDIENT_DESC;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_INSTRUCTION_DESC;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_PREPARATION_TIME_DESC;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.PREPARATION_TIME_DESC_AMY;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.PREPARATION_TIME_DESC_BOB;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.SERVINGS_DESC_AMY;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.SERVINGS_DESC_BOB;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":28,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.URL_DESC_AMY;"},{"lineNumber":29,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.URL_DESC_BOB;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_CALORIES_BOB;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_COOKING_TIME_BOB;"},{"lineNumber":32,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_IMG_BOB;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_INGREDIENT_BOB;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_INSTRUCTION_BOB;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_PREPARATION_TIME_BOB;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_SERVINGS_BOB;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":40,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_URL_BOB;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.recipe.model.Model.PREDICATE_SHOW_ALL_RECIPES;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import static seedu.recipe.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import static seedu.recipe.testutil.TypicalRecipes.AMY;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import static seedu.recipe.testutil.TypicalRecipes.BOB;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import static seedu.recipe.testutil.TypicalRecipes.KEYWORD_MATCHING_MEIER;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.Messages;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.index.Index;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.EditCommand;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.RedoCommand;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.UndoCommand;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.recipe.model.Model;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Ingredient;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Instruction;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Name;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.PreparationTime;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Recipe;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.exceptions.DuplicateRecipeException;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.exceptions.RecipeNotFoundException;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"import seedu.recipe.model.tag.Tag;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"import seedu.recipe.testutil.RecipeBuilder;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"import seedu.recipe.testutil.RecipeUtil;"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"public class EditCommandSystemTest extends RecipeBookSystemTest {"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":76,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":77,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_RECIPE;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""},{"lineNumber":80,"author":{"gitID":"-"},"content":"                + INGREDIENT_DESC_BOB + \"  \" + INSTRUCTION_DESC_BOB + \" \" + PREPARATION_TIME_DESC_BOB + \" \""},{"lineNumber":81,"author":{"gitID":"-"},"content":"                + COOKING_TIME_DESC_BOB + \" \" + CALORIES_DESC_BOB + \" \" + SERVINGS_DESC_BOB + \" \""},{"lineNumber":82,"author":{"gitID":"RyanAngJY"},"content":"                + URL_DESC_BOB + IMG_DESC_BOB + TAG_DESC_HUSBAND + \" \";"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        Recipe editedRecipe \u003d new RecipeBuilder()"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                .withName(VALID_NAME_BOB)"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                .withIngredient(VALID_INGREDIENT_BOB)"},{"lineNumber":86,"author":{"gitID":"-"},"content":"                .withInstruction(VALID_INSTRUCTION_BOB)"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                .withCookingTime(VALID_COOKING_TIME_BOB)"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                .withPreparationTime(VALID_PREPARATION_TIME_BOB)"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                .withCalories(VALID_CALORIES_BOB)"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                .withServings(VALID_SERVINGS_BOB)"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                .withUrl(VALID_URL_BOB)"},{"lineNumber":92,"author":{"gitID":"RyanAngJY"},"content":"                .withImage(VALID_IMG_BOB)"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedRecipe);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        /* Case: undo editing the last recipe in the list -\u003e last recipe restored */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        /* Case: redo editing the last recipe in the list -\u003e last recipe edited again */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        model.updateRecipe("},{"lineNumber":105,"author":{"gitID":"-"},"content":"                getModel().getFilteredRecipeList().get(INDEX_FIRST_RECIPE.getZeroBased()), editedRecipe);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        /* Case: edit a recipe with new values same as existing values -\u003e edited */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PREPARATION_TIME_DESC_BOB"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                + COOKING_TIME_DESC_BOB + PREPARATION_TIME_DESC_BOB + CALORIES_DESC_BOB + SERVINGS_DESC_BOB"},{"lineNumber":111,"author":{"gitID":"RyanAngJY"},"content":"                + INGREDIENT_DESC_BOB + INSTRUCTION_DESC_BOB + URL_DESC_BOB"},{"lineNumber":112,"author":{"gitID":"RyanAngJY"},"content":"                + IMG_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, BOB);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_RECIPE;"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        Recipe recipeToEdit \u003d getModel().getFilteredRecipeList().get(index.getZeroBased());"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        editedRecipe \u003d new RecipeBuilder(recipeToEdit).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedRecipe);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_RECIPE;"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        editedRecipe \u003d new RecipeBuilder(recipeToEdit).withTags().build();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedRecipe);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        /* Case: filtered recipe list, edit index within bounds of recipe book and recipe list -\u003e edited */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        showRecipesWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_RECIPE;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredRecipeList().size());"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        recipeToEdit \u003d getModel().getFilteredRecipeList().get(index.getZeroBased());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        editedRecipe \u003d new RecipeBuilder(recipeToEdit).withName(VALID_NAME_BOB).build();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedRecipe);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        /* Case: filtered recipe list, edit index within bounds of recipe book but out of bounds of recipe list"},{"lineNumber":140,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":141,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        showRecipesWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getRecipeBook().getRecipeList().size();"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":145,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        /* --------------------- Performing edit operation while a recipe card is selected -------------------------- */"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the recipe list, edit a recipe -\u003e edited, card selection remains unchanged but"},{"lineNumber":150,"author":{"gitID":"-"},"content":"         * browser url changes"},{"lineNumber":151,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        showAllRecipes();"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_RECIPE;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        selectRecipe(index);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PREPARATION_TIME_DESC_AMY"},{"lineNumber":156,"author":{"gitID":"RyanAngJY"},"content":"                + COOKING_TIME_DESC_AMY + SERVINGS_DESC_AMY + CALORIES_DESC_AMY + INGREDIENT_DESC_AMY"},{"lineNumber":157,"author":{"gitID":"RyanAngJY"},"content":"                + INSTRUCTION_DESC_AMY  + URL_DESC_AMY + IMG_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        // browser\u0027s url is updated to reflect the new recipe\u0027s name"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, AMY, index);"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":166,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":170,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredRecipeList().size() + 1;"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":175,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"},{"lineNumber":179,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RECIPE.getOneBased(),"},{"lineNumber":183,"author":{"gitID":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RECIPE.getOneBased()"},{"lineNumber":187,"author":{"gitID":"-"},"content":"                + INVALID_NAME_DESC,"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        /* Case: invalid preparation time -\u003e rejected */"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RECIPE.getOneBased()"},{"lineNumber":192,"author":{"gitID":"-"},"content":"                + INVALID_PREPARATION_TIME_DESC,"},{"lineNumber":193,"author":{"gitID":"-"},"content":"                PreparationTime.MESSAGE_PREPARATION_TIME_CONSTRAINTS);"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"        /* Case: invalid ingredient -\u003e rejected */"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RECIPE.getOneBased()"},{"lineNumber":197,"author":{"gitID":"-"},"content":"                + INVALID_INGREDIENT_DESC,"},{"lineNumber":198,"author":{"gitID":"-"},"content":"                Ingredient.MESSAGE_INGREDIENT_CONSTRAINTS);"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"        /* Case: invalid recipe -\u003e rejected */"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RECIPE.getOneBased()"},{"lineNumber":202,"author":{"gitID":"-"},"content":"                + INVALID_INSTRUCTION_DESC,"},{"lineNumber":203,"author":{"gitID":"-"},"content":"                Instruction.MESSAGE_INSTRUCTION_CONSTRAINTS);"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RECIPE.getOneBased()"},{"lineNumber":207,"author":{"gitID":"-"},"content":"                + INVALID_TAG_DESC,"},{"lineNumber":208,"author":{"gitID":"-"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"        /* Case: edit a recipe with new values same as another recipe\u0027s values -\u003e rejected */"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        executeCommand(RecipeUtil.getAddCommand(BOB));"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getRecipeBook().getRecipeList().contains(BOB));"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_RECIPE;"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getFilteredRecipeList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PREPARATION_TIME_DESC_BOB"},{"lineNumber":216,"author":{"gitID":"-"},"content":"                + COOKING_TIME_DESC_BOB + PREPARATION_TIME_DESC_BOB + CALORIES_DESC_BOB + SERVINGS_DESC_BOB"},{"lineNumber":217,"author":{"gitID":"RyanAngJY"},"content":"                + INGREDIENT_DESC_BOB + INSTRUCTION_DESC_BOB + URL_DESC_BOB + IMG_DESC_BOB + TAG_DESC_FRIEND"},{"lineNumber":218,"author":{"gitID":"RyanAngJY"},"content":"                + TAG_DESC_HUSBAND;"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_RECIPE);"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"        /* Case: edit a recipe with new values same as another recipe\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PREPARATION_TIME_DESC_BOB"},{"lineNumber":223,"author":{"gitID":"-"},"content":"                + COOKING_TIME_DESC_BOB + PREPARATION_TIME_DESC_BOB + CALORIES_DESC_BOB + SERVINGS_DESC_BOB"},{"lineNumber":224,"author":{"gitID":"RyanAngJY"},"content":"                + INGREDIENT_DESC_BOB + INSTRUCTION_DESC_BOB + URL_DESC_BOB + IMG_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_RECIPE);"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Recipe, Index)} except that"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Recipe, Index)"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Recipe editedRecipe) {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toEdit, editedRecipe, null);"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the recipe at index {@code toEdit} being"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * updated to values specified {@code editedRecipe}.\u003cbr\u003e"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Recipe editedRecipe,"},{"lineNumber":247,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":250,"author":{"gitID":"-"},"content":"            expectedModel.updateRecipe("},{"lineNumber":251,"author":{"gitID":"-"},"content":"                    expectedModel.getFilteredRecipeList().get(toEdit.getZeroBased()), editedRecipe);"},{"lineNumber":252,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        } catch (DuplicateRecipeException | RecipeNotFoundException e) {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":255,"author":{"gitID":"-"},"content":"                    \"editedRecipe is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":259,"author":{"gitID":"-"},"content":"                String.format(EditCommand.MESSAGE_EDIT_RECIPE_SUCCESS, editedRecipe), expectedSelectedCardIndex);"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":265,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":267,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":273,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":274,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":275,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":276,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":277,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":278,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":279,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":280,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":281,"author":{"gitID":"-"},"content":"     * {@code RecipeBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":282,"author":{"gitID":"-"},"content":"     * @see RecipeBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":283,"author":{"gitID":"-"},"content":"     * @see RecipeBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":284,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":285,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":286,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":288,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"},{"lineNumber":289,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":292,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":293,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":294,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":295,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":296,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":297,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":298,"author":{"gitID":"-"},"content":""},{"lineNumber":299,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":300,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":301,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":302,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":303,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":304,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":305,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":306,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":307,"author":{"gitID":"-"},"content":"     * {@code RecipeBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":308,"author":{"gitID":"-"},"content":"     * @see RecipeBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":309,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":310,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":311,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":314,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":315,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":316,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":317,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":318,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":319,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":15,"-":304}},{"path":"src/test/java/systemtests/RecipeBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.recipe.ui.BrowserPanel.DEFAULT_PAGE_LIGHT;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.recipe.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.recipe.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.recipe.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.recipe.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import guitests.guihandles.RecipeListPanelHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.recipe.MainApp;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.recipe.TestApp;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.EventsCenter;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.index.Index;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.ClearCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.FindCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.ListCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.SelectCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.recipe.model.Model;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.recipe.model.RecipeBook;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.recipe.testutil.TypicalRecipes;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.recipe.ui.CommandBox;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":45,"author":{"gitID":"-"},"content":" * A system test class for RecipeBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":46,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":47,"author":{"gitID":"-"},"content":" */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"public abstract class RecipeBookSystemTest {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-area\");"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-area\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    protected RecipeBook getInitialData() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return TypicalRecipes.getTypicalRecipeBook();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public RecipeListPanelHandle getRecipeListPanel() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getRecipeListPanel();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getBrowserPanel();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":131,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Displays all recipes in the recipe book."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    protected void showAllRecipes() {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertEquals(getModel().getRecipeBook().getRecipeList().size(), getModel().getFilteredRecipeList().size());"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * Displays all recipes with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":148,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    protected void showRecipesWithName(String keyword) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getFilteredRecipeList().size() \u003c getModel().getRecipeBook().getRecipeList().size());"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * Selects the recipe at {@code index} of the displayed list."},{"lineNumber":156,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    protected void selectRecipe(Index index) {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertEquals(index.getZeroBased(), getRecipeListPanel().getSelectedCardIndex());"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * Deletes all recipes in the recipe book."},{"lineNumber":164,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    protected void deleteAllRecipes() {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertEquals(0, getModel().getRecipeBook().getRecipeList().size());"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same recipe objects as {@code expectedModel}"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * and the recipe list panel displays the recipes in the model correctly."},{"lineNumber":174,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getRecipeBook(), testApp.readStorageRecipeBook());"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertListMatching(getRecipeListPanel(), expectedModel.getFilteredRecipeList());"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * Calls {@code BrowserPanelHandle}, {@code RecipeListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":187,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        getBrowserPanel().rememberUrl();"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        getRecipeListPanel().rememberSelectedRecipeCard();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * of the previously selected recipe."},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertFalse(getRecipeListPanel().isAnyCardSelected());"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the recipe in the recipe list panel at"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * @see RecipeListPanelHandle#isSelectedRecipeCardChanged()"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        String selectedCardName \u003d getRecipeListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        URL expectedUrl;"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":216,"author":{"gitID":"RyanAngJY"},"content":"            expectedUrl \u003d new URL(getRecipeListPanel().getHandleToSelectedCard().getUrl());"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"URL expected to be valid.\");"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getRecipeListPanel().getSelectedCardIndex());"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url and the selected card in the recipe list panel remain unchanged."},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * @see RecipeListPanelHandle#isSelectedRecipeCardChanged()"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        assertFalse(getRecipeListPanel().isSelectedRecipeCardChanged());"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":237,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":244,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":245,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"kokonguyen191"},"content":"    //@@author kokonguyen191"},{"lineNumber":250,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":251,"author":{"gitID":"kokonguyen191"},"content":"     * Asserts that the command box is showing the {@code content}"},{"lineNumber":252,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":253,"author":{"gitID":"kokonguyen191"},"content":"    protected void assertCommandBoxContent(String content) {"},{"lineNumber":254,"author":{"gitID":"kokonguyen191"},"content":"        assertEquals(content, getCommandBox().getInput());"},{"lineNumber":255,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":256,"author":{"gitID":"kokonguyen191"},"content":"    //@@author"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":260,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":268,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":270,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":271,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":277,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":278,"author":{"gitID":"-"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":280,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":281,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":282,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":284,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":285,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":286,"author":{"gitID":"-"},"content":"            assertListMatching(getRecipeListPanel(), getModel().getFilteredRecipeList());"},{"lineNumber":287,"author":{"gitID":"-"},"content":"            assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE_LIGHT),"},{"lineNumber":288,"author":{"gitID":"-"},"content":"                    getBrowserPanel().getLoadedUrl());"},{"lineNumber":289,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":290,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":292,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":293,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":294,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":297,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":298,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":299,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":300,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":301,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":302,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kokonguyen191":8,"RyanAngJY":1,"-":293}},{"path":"src/test/java/systemtests/SearchCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"kokonguyen191"},"content":"//@@author kokonguyen191"},{"lineNumber":2,"author":{"gitID":"kokonguyen191"},"content":"package systemtests;"},{"lineNumber":3,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":4,"author":{"gitID":"kokonguyen191"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.testutil.TypicalRecipes.getTypicalRecipeBook;"},{"lineNumber":6,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":7,"author":{"gitID":"kokonguyen191"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":9,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.logic.commands.SearchCommand;"},{"lineNumber":10,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.logic.commands.util.WikiaQueryHandler;"},{"lineNumber":11,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.model.Model;"},{"lineNumber":12,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.model.ModelManager;"},{"lineNumber":13,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.model.UserPrefs;"},{"lineNumber":14,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":15,"author":{"gitID":"kokonguyen191"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"kokonguyen191"},"content":" * A system test class for the search command, which contains interaction with other UI components."},{"lineNumber":17,"author":{"gitID":"kokonguyen191"},"content":" */"},{"lineNumber":18,"author":{"gitID":"kokonguyen191"},"content":"public class SearchCommandSystemTest extends RecipeBookSystemTest {"},{"lineNumber":19,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":20,"author":{"gitID":"kokonguyen191"},"content":"    private Model model \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs());"},{"lineNumber":21,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":22,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"kokonguyen191"},"content":"    public void search() {"},{"lineNumber":24,"author":{"gitID":"kokonguyen191"},"content":"        String query \u003d \"bot\";"},{"lineNumber":25,"author":{"gitID":"kokonguyen191"},"content":"        assertCommandSuccess(query);"},{"lineNumber":26,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":27,"author":{"gitID":"kokonguyen191"},"content":"        query \u003d \"chicken rice\";"},{"lineNumber":28,"author":{"gitID":"kokonguyen191"},"content":"        assertCommandSuccess(query);"},{"lineNumber":29,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":30,"author":{"gitID":"kokonguyen191"},"content":"        query \u003d \"blah\";"},{"lineNumber":31,"author":{"gitID":"kokonguyen191"},"content":"        assertCommandSuccess(query);"},{"lineNumber":32,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":34,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"kokonguyen191"},"content":"     * Assert that the {@code BrowserPanel} is currently loaded with given {@code url}"},{"lineNumber":36,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"kokonguyen191"},"content":"    private void assertBrowserPanel(String url) {"},{"lineNumber":38,"author":{"gitID":"kokonguyen191"},"content":"        assertEquals(getBrowserPanel().getLoadedUrl().toExternalForm(), url);"},{"lineNumber":39,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":41,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"kokonguyen191"},"content":"     * Assert that the {@code SearchCommand} was executed correctly with the given {@code query}."},{"lineNumber":43,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"kokonguyen191"},"content":"    private void assertCommandSuccess(String query) {"},{"lineNumber":45,"author":{"gitID":"kokonguyen191"},"content":"        executeCommand(SearchCommand.COMMAND_WORD + \" \" + query);"},{"lineNumber":46,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":47,"author":{"gitID":"kokonguyen191"},"content":"        WikiaQueryHandler wikiaQueryHandler \u003d new WikiaQueryHandler(query.replaceAll(\"\\\\s+\", \"+\"));"},{"lineNumber":48,"author":{"gitID":"kokonguyen191"},"content":"        int noOfResults \u003d wikiaQueryHandler.getQueryNumberOfResults();"},{"lineNumber":49,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":50,"author":{"gitID":"kokonguyen191"},"content":"        if (noOfResults \u003d\u003d 0) {"},{"lineNumber":51,"author":{"gitID":"kokonguyen191"},"content":"            assertApplicationDisplaysExpected(\"\", SearchCommand.MESSAGE_NO_RESULT, model);"},{"lineNumber":52,"author":{"gitID":"kokonguyen191"},"content":"        } else {"},{"lineNumber":53,"author":{"gitID":"kokonguyen191"},"content":"            assertApplicationDisplaysExpected(\"\", String.format(SearchCommand.MESSAGE_SUCCESS, noOfResults), model);"},{"lineNumber":54,"author":{"gitID":"kokonguyen191"},"content":"            assertBrowserPanel(wikiaQueryHandler.getRecipeQueryUrl());"},{"lineNumber":55,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"kokonguyen191"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":57,"author":{"gitID":"kokonguyen191"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":58,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"kokonguyen191"},"content":"}"}],"authorContributionMap":{"kokonguyen191":59}},{"path":"src/test/java/systemtests/ViewGroupCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"hoangduong1607"},"content":"//@@author hoangduong1607"},{"lineNumber":2,"author":{"gitID":"hoangduong1607"},"content":"package systemtests;"},{"lineNumber":3,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":4,"author":{"gitID":"hoangduong1607"},"content":"import static seedu.recipe.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":6,"author":{"gitID":"hoangduong1607"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"hoangduong1607"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":9,"author":{"gitID":"hoangduong1607"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":11,"author":{"gitID":"hoangduong1607"},"content":"import seedu.recipe.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"hoangduong1607"},"content":"import seedu.recipe.logic.commands.GroupCommand;"},{"lineNumber":13,"author":{"gitID":"hoangduong1607"},"content":"import seedu.recipe.logic.commands.ViewGroupCommand;"},{"lineNumber":14,"author":{"gitID":"hoangduong1607"},"content":"import seedu.recipe.logic.parser.CliSyntax;"},{"lineNumber":15,"author":{"gitID":"hoangduong1607"},"content":"import seedu.recipe.model.Model;"},{"lineNumber":16,"author":{"gitID":"hoangduong1607"},"content":"import seedu.recipe.model.recipe.Recipe;"},{"lineNumber":17,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":18,"author":{"gitID":"hoangduong1607"},"content":"public class ViewGroupCommandSystemTest extends RecipeBookSystemTest {"},{"lineNumber":19,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":20,"author":{"gitID":"hoangduong1607"},"content":"    private static final String GROUP_THAT_EXISTS \u003d \"My best\";"},{"lineNumber":21,"author":{"gitID":"hoangduong1607"},"content":"    private static final String GROUP_THAT_DOES_NOT_EXIST \u003d \"Best\";"},{"lineNumber":22,"author":{"gitID":"hoangduong1607"},"content":"    private static final String WHITESPACE \u003d \" \";"},{"lineNumber":23,"author":{"gitID":"hoangduong1607"},"content":"    private static final String FIRST_INDEX \u003d \"1\";"},{"lineNumber":24,"author":{"gitID":"hoangduong1607"},"content":"    private static final String SECOND_INDEX \u003d \"2\";"},{"lineNumber":25,"author":{"gitID":"hoangduong1607"},"content":"    private static final List\u003cRecipe\u003e EMPTY_LIST \u003d new ArrayList\u003c\u003e();"},{"lineNumber":26,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":27,"author":{"gitID":"hoangduong1607"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"hoangduong1607"},"content":"    public void group() throws Exception {"},{"lineNumber":29,"author":{"gitID":"hoangduong1607"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":30,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":31,"author":{"gitID":"hoangduong1607"},"content":"        String groupCommand \u003d GroupCommand.COMMAND_WORD + WHITESPACE + CliSyntax.PREFIX_GROUP_NAME + GROUP_THAT_EXISTS"},{"lineNumber":32,"author":{"gitID":"hoangduong1607"},"content":"                + WHITESPACE + CliSyntax.PREFIX_INDEX + FIRST_INDEX + WHITESPACE + CliSyntax.PREFIX_INDEX"},{"lineNumber":33,"author":{"gitID":"hoangduong1607"},"content":"                + SECOND_INDEX;"},{"lineNumber":34,"author":{"gitID":"hoangduong1607"},"content":"        String expectedResultMessage \u003d String.format(GroupCommand.MESSAGE_SUCCESS, GROUP_THAT_EXISTS);"},{"lineNumber":35,"author":{"gitID":"hoangduong1607"},"content":"        assertCommandSuccess(groupCommand, expectedResultMessage, expectedModel);"},{"lineNumber":36,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":37,"author":{"gitID":"hoangduong1607"},"content":"        /* Case: view a group that exists -\u003e show recipe(s) in the group */"},{"lineNumber":38,"author":{"gitID":"hoangduong1607"},"content":"        String viewGroupCommand \u003d ViewGroupCommand.COMMAND_WORD + WHITESPACE + GROUP_THAT_EXISTS;"},{"lineNumber":39,"author":{"gitID":"hoangduong1607"},"content":"        expectedResultMessage \u003d String.format(ViewGroupCommand.MESSAGE_SUCCESS, GROUP_THAT_EXISTS);"},{"lineNumber":40,"author":{"gitID":"hoangduong1607"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":41,"author":{"gitID":"hoangduong1607"},"content":"        ModelHelper.setFilteredList(expectedModel,"},{"lineNumber":42,"author":{"gitID":"hoangduong1607"},"content":"                expectedModel.getFilteredRecipeList()"},{"lineNumber":43,"author":{"gitID":"hoangduong1607"},"content":"                        .get(Index.fromOneBased(Integer.valueOf(FIRST_INDEX)).getZeroBased()),"},{"lineNumber":44,"author":{"gitID":"hoangduong1607"},"content":"                expectedModel.getFilteredRecipeList()"},{"lineNumber":45,"author":{"gitID":"hoangduong1607"},"content":"                        .get(Index.fromOneBased(Integer.valueOf(SECOND_INDEX)).getZeroBased()));"},{"lineNumber":46,"author":{"gitID":"hoangduong1607"},"content":"        assertCommandSuccess(viewGroupCommand, expectedResultMessage, expectedModel);"},{"lineNumber":47,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":48,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":49,"author":{"gitID":"hoangduong1607"},"content":"        /*Case: view a group that does not exist -\u003e show empty list and inform user that the group does not exist */"},{"lineNumber":50,"author":{"gitID":"hoangduong1607"},"content":"        viewGroupCommand \u003d ViewGroupCommand.COMMAND_WORD + WHITESPACE + GROUP_THAT_DOES_NOT_EXIST;"},{"lineNumber":51,"author":{"gitID":"hoangduong1607"},"content":"        expectedResultMessage \u003d ViewGroupCommand.MESSAGE_GROUP_NOT_FOUND;"},{"lineNumber":52,"author":{"gitID":"hoangduong1607"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":53,"author":{"gitID":"hoangduong1607"},"content":"        ModelHelper.setFilteredList(expectedModel, EMPTY_LIST);"},{"lineNumber":54,"author":{"gitID":"hoangduong1607"},"content":"        assertCommandSuccess(viewGroupCommand, expectedResultMessage, expectedModel);"},{"lineNumber":55,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":56,"author":{"gitID":"hoangduong1607"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":57,"author":{"gitID":"hoangduong1607"},"content":"        assertCommandFailure(\"View_Group\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":58,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":60,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"hoangduong1607"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"},{"lineNumber":62,"author":{"gitID":"hoangduong1607"},"content":"     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."},{"lineNumber":63,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"hoangduong1607"},"content":"    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"},{"lineNumber":65,"author":{"gitID":"hoangduong1607"},"content":"        executeCommand(command);"},{"lineNumber":66,"author":{"gitID":"hoangduong1607"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":67,"author":{"gitID":"hoangduong1607"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":68,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":70,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"hoangduong1607"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":72,"author":{"gitID":"hoangduong1607"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":73,"author":{"gitID":"hoangduong1607"},"content":"     * These verifications are done by"},{"lineNumber":74,"author":{"gitID":"hoangduong1607"},"content":"     * {@code RecipeBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":75,"author":{"gitID":"hoangduong1607"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":76,"author":{"gitID":"hoangduong1607"},"content":"     * error style."},{"lineNumber":77,"author":{"gitID":"hoangduong1607"},"content":"     *"},{"lineNumber":78,"author":{"gitID":"hoangduong1607"},"content":"     * @see RecipeBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":79,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"hoangduong1607"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":81,"author":{"gitID":"hoangduong1607"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":82,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":83,"author":{"gitID":"hoangduong1607"},"content":"        executeCommand(command);"},{"lineNumber":84,"author":{"gitID":"hoangduong1607"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":85,"author":{"gitID":"hoangduong1607"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":86,"author":{"gitID":"hoangduong1607"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":87,"author":{"gitID":"hoangduong1607"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":88,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"hoangduong1607"},"content":"}"}],"authorContributionMap":{"hoangduong1607":89}},{"path":"src/test/java/seedu/recipe/ui/CommandBoxTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.recipe.ui.util.KeyboardShortcutsMapping.LAST_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.recipe.ui.util.KeyboardShortcutsMapping.NEXT_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":14,"author":{"gitID":"hoangduong1607"},"content":"import javafx.scene.input.KeyCodeCombination;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.Logic;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.LogicManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.ListCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.recipe.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.recipe.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"hoangduong1607"},"content":"import seedu.recipe.ui.util.KeyboardShortcutsMapping;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class CommandBoxTest extends GuiUnitTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String LF \u003d \"\\n\";"},{"lineNumber":25,"author":{"gitID":"hoangduong1607"},"content":"    private static final String WHITESPACE \u003d \" \";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String FIRST_LINE_OF_COMMAND_THAT_HAS_MULTIPLE_LINES \u003d \"add\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String SECOND_LINE_OF_COMMAND_THAT_HAS_MULTIPLE_LINES \u003d \"should not work for now\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_HAS_MULTIPLE_LINES \u003d FIRST_LINE_OF_COMMAND_THAT_HAS_MULTIPLE_LINES + LF"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + SECOND_LINE_OF_COMMAND_THAT_HAS_MULTIPLE_LINES;"},{"lineNumber":32,"author":{"gitID":"hoangduong1607"},"content":"    private static final String ADD_COMMAND \u003d \"add\";"},{"lineNumber":33,"author":{"gitID":"hoangduong1607"},"content":"    private static final String SECOND_FIELD_OF_ADD_COMMAND \u003d \"cooking_time/\";"},{"lineNumber":34,"author":{"gitID":"hoangduong1607"},"content":"    private static final String PREFIX_CALORIES \u003d \"calories/\";"},{"lineNumber":35,"author":{"gitID":"hoangduong1607"},"content":"    private static final String PREFIX_COOKING_TIME \u003d \"cooking_time/\";"},{"lineNumber":36,"author":{"gitID":"hoangduong1607"},"content":"    private static final String PREFIX_IMG \u003d \"img/\";"},{"lineNumber":37,"author":{"gitID":"hoangduong1607"},"content":"    private static final String PREFIX_INGREDIENT \u003d \"ingredient/\";"},{"lineNumber":38,"author":{"gitID":"hoangduong1607"},"content":"    private static final String PREFIX_INSTRUCTION \u003d \"instruction/\";"},{"lineNumber":39,"author":{"gitID":"hoangduong1607"},"content":"    private static final String PREFIX_NAME \u003d \"name/\";"},{"lineNumber":40,"author":{"gitID":"hoangduong1607"},"content":"    private static final String PREFIX_PREPARATION_TIME \u003d \"preparation_time/\";"},{"lineNumber":41,"author":{"gitID":"hoangduong1607"},"content":"    private static final String PREFIX_SERVINGS \u003d \"servings/\";"},{"lineNumber":42,"author":{"gitID":"hoangduong1607"},"content":"    private static final String PREFIX_TAG \u003d \"tag/\";"},{"lineNumber":43,"author":{"gitID":"hoangduong1607"},"content":"    private static final String PREFIX_URL \u003d \"url/\";"},{"lineNumber":44,"author":{"gitID":"hoangduong1607"},"content":"    private static final String RECIPE_NAME \u003d \"Chicken rice\";"},{"lineNumber":45,"author":{"gitID":"hoangduong1607"},"content":"    private static final String TAG \u003d \"Best\";"},{"lineNumber":46,"author":{"gitID":"hoangduong1607"},"content":"    private static final String ADD_COMMAND_WITH_PREFIX_NAME \u003d ADD_COMMAND + WHITESPACE + PREFIX_NAME;"},{"lineNumber":47,"author":{"gitID":"hoangduong1607"},"content":"    private static final String AUTO_COMPLETION_FOR_ADD_COMMAND \u003d ADD_COMMAND + WHITESPACE + LF + PREFIX_NAME"},{"lineNumber":48,"author":{"gitID":"hoangduong1607"},"content":"            + WHITESPACE + LF + PREFIX_INGREDIENT + WHITESPACE + LF + PREFIX_INSTRUCTION + WHITESPACE + LF"},{"lineNumber":49,"author":{"gitID":"hoangduong1607"},"content":"            + PREFIX_COOKING_TIME + WHITESPACE + LF + PREFIX_PREPARATION_TIME + WHITESPACE + LF + PREFIX_CALORIES"},{"lineNumber":50,"author":{"gitID":"hoangduong1607"},"content":"            + WHITESPACE + LF + PREFIX_SERVINGS + WHITESPACE + LF + PREFIX_URL + WHITESPACE + LF + PREFIX_IMG"},{"lineNumber":51,"author":{"gitID":"hoangduong1607"},"content":"            + WHITESPACE + LF + PREFIX_TAG;"},{"lineNumber":52,"author":{"gitID":"hoangduong1607"},"content":"    private static final String AUTO_COMPLETION_FOR_ADD_COMMAND_WITH_RECIPE_NAME \u003d ADD_COMMAND + WHITESPACE + LF"},{"lineNumber":53,"author":{"gitID":"hoangduong1607"},"content":"            + PREFIX_NAME + RECIPE_NAME + WHITESPACE + LF + PREFIX_INGREDIENT + WHITESPACE + LF + PREFIX_INSTRUCTION"},{"lineNumber":54,"author":{"gitID":"hoangduong1607"},"content":"            + WHITESPACE + LF + PREFIX_COOKING_TIME + WHITESPACE + LF + PREFIX_PREPARATION_TIME + WHITESPACE + LF"},{"lineNumber":55,"author":{"gitID":"hoangduong1607"},"content":"            + PREFIX_CALORIES + WHITESPACE + LF + PREFIX_SERVINGS + WHITESPACE + LF + PREFIX_URL + WHITESPACE + LF"},{"lineNumber":56,"author":{"gitID":"hoangduong1607"},"content":"            + PREFIX_IMG + WHITESPACE + LF + PREFIX_TAG;"},{"lineNumber":57,"author":{"gitID":"hoangduong1607"},"content":"    private static final String AUTO_COMPLETION_FOR_ADD_COMMAND_WITH_RECIPE_NAME_AND_TAG \u003d ADD_COMMAND + WHITESPACE + LF"},{"lineNumber":58,"author":{"gitID":"hoangduong1607"},"content":"            + PREFIX_NAME + RECIPE_NAME + WHITESPACE + LF + PREFIX_INGREDIENT + WHITESPACE + LF + PREFIX_INSTRUCTION"},{"lineNumber":59,"author":{"gitID":"hoangduong1607"},"content":"            + WHITESPACE + LF + PREFIX_COOKING_TIME + WHITESPACE + LF + PREFIX_PREPARATION_TIME + WHITESPACE + LF"},{"lineNumber":60,"author":{"gitID":"hoangduong1607"},"content":"            + PREFIX_CALORIES + WHITESPACE + LF + PREFIX_SERVINGS + WHITESPACE + LF + PREFIX_URL + WHITESPACE + LF"},{"lineNumber":61,"author":{"gitID":"hoangduong1607"},"content":"            + PREFIX_IMG + WHITESPACE + LF + PREFIX_TAG + TAG;"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private CommandBoxHandle commandBoxHandle;"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Logic logic \u003d new LogicManager(model);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(commandBox);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithSuccessfulCommand() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithFailedCommand() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        // verify that style is changed correctly even after multiple consecutive failed commands"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public void commandBox_handleKeyPress() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.ESCAPE);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.A);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"kokonguyen191"},"content":"    //@@author kokonguyen191"},{"lineNumber":113,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"kokonguyen191"},"content":"    public void commandBox_handleMultipleLinesCommand() {"},{"lineNumber":115,"author":{"gitID":"kokonguyen191"},"content":"        commandBoxHandle.appendText(FIRST_LINE_OF_COMMAND_THAT_HAS_MULTIPLE_LINES);"},{"lineNumber":116,"author":{"gitID":"kokonguyen191"},"content":"        guiRobot.push(KeyboardShortcutsMapping.NEW_LINE_IN_COMMAND);"},{"lineNumber":117,"author":{"gitID":"kokonguyen191"},"content":"        commandBoxHandle.appendText(SECOND_LINE_OF_COMMAND_THAT_HAS_MULTIPLE_LINES);"},{"lineNumber":118,"author":{"gitID":"kokonguyen191"},"content":"        assertInput(COMMAND_THAT_HAS_MULTIPLE_LINES);"},{"lineNumber":119,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"kokonguyen191"},"content":"    //@@author"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"hoangduong1607"},"content":"    //@@author hoangduong1607"},{"lineNumber":123,"author":{"gitID":"hoangduong1607"},"content":"    @Test"},{"lineNumber":124,"author":{"gitID":"hoangduong1607"},"content":"    public void commandBox_handleShowingSuggestions() {"},{"lineNumber":125,"author":{"gitID":"hoangduong1607"},"content":"        commandBoxHandle.insertText(ADD_COMMAND);"},{"lineNumber":126,"author":{"gitID":"hoangduong1607"},"content":"        commandBoxHandle.insertText(WHITESPACE);"},{"lineNumber":127,"author":{"gitID":"hoangduong1607"},"content":"        commandBoxHandle.insertText(String.valueOf(PREFIX_NAME.charAt(0)));"},{"lineNumber":128,"author":{"gitID":"hoangduong1607"},"content":"        guiRobot.push(KeyboardShortcutsMapping.SHOW_SUGGESTIONS_COMMAND);"},{"lineNumber":129,"author":{"gitID":"hoangduong1607"},"content":"        guiRobot.push(KeyCode.DOWN);"},{"lineNumber":130,"author":{"gitID":"hoangduong1607"},"content":"        guiRobot.push(KeyCode.ENTER);"},{"lineNumber":131,"author":{"gitID":"hoangduong1607"},"content":"        assertInput(ADD_COMMAND_WITH_PREFIX_NAME);"},{"lineNumber":132,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":133,"author":{"gitID":"hoangduong1607"},"content":"        commandBoxHandle.insertText(WHITESPACE);"},{"lineNumber":134,"author":{"gitID":"hoangduong1607"},"content":"        guiRobot.push(KeyboardShortcutsMapping.SHOW_SUGGESTIONS_COMMAND);"},{"lineNumber":135,"author":{"gitID":"hoangduong1607"},"content":"        guiRobot.push(KeyCode.DOWN);"},{"lineNumber":136,"author":{"gitID":"hoangduong1607"},"content":"        guiRobot.push(KeyCode.DOWN);"},{"lineNumber":137,"author":{"gitID":"hoangduong1607"},"content":"        guiRobot.push(KeyCode.ENTER);"},{"lineNumber":138,"author":{"gitID":"hoangduong1607"},"content":"        assertInput(ADD_COMMAND_WITH_PREFIX_NAME + WHITESPACE + SECOND_FIELD_OF_ADD_COMMAND);"},{"lineNumber":139,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":141,"author":{"gitID":"hoangduong1607"},"content":"    @Test"},{"lineNumber":142,"author":{"gitID":"hoangduong1607"},"content":"    public void commandBox_handleAutoCompletion() {"},{"lineNumber":143,"author":{"gitID":"hoangduong1607"},"content":"        guiRobot.push(KeyboardShortcutsMapping.SHOW_SUGGESTIONS_COMMAND);"},{"lineNumber":144,"author":{"gitID":"hoangduong1607"},"content":"        guiRobot.push(KeyCode.DOWN);"},{"lineNumber":145,"author":{"gitID":"hoangduong1607"},"content":"        guiRobot.push(KeyCode.ENTER);"},{"lineNumber":146,"author":{"gitID":"hoangduong1607"},"content":"        assertInput(AUTO_COMPLETION_FOR_ADD_COMMAND);"},{"lineNumber":147,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":148,"author":{"gitID":"hoangduong1607"},"content":"        guiRobot.push(KeyboardShortcutsMapping.NEXT_FIELD);"},{"lineNumber":149,"author":{"gitID":"hoangduong1607"},"content":"        commandBoxHandle.insertText(RECIPE_NAME);"},{"lineNumber":150,"author":{"gitID":"hoangduong1607"},"content":"        assertInput(AUTO_COMPLETION_FOR_ADD_COMMAND_WITH_RECIPE_NAME);"},{"lineNumber":151,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":152,"author":{"gitID":"hoangduong1607"},"content":"        guiRobot.push(KeyboardShortcutsMapping.PREV_FIELD);"},{"lineNumber":153,"author":{"gitID":"hoangduong1607"},"content":"        guiRobot.push(KeyboardShortcutsMapping.PREV_FIELD);"},{"lineNumber":154,"author":{"gitID":"hoangduong1607"},"content":"        commandBoxHandle.insertText(TAG);"},{"lineNumber":155,"author":{"gitID":"hoangduong1607"},"content":"        assertInput(AUTO_COMPLETION_FOR_ADD_COMMAND_WITH_RECIPE_NAME_AND_TAG);"},{"lineNumber":156,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":158,"author":{"gitID":"hoangduong1607"},"content":"    //@@author"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithUp() {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertInputHistory(LAST_COMMAND, \"\");"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertInputHistory(NEXT_COMMAND, \"\");"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertInputHistory(LAST_COMMAND, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertInputHistory(NEXT_COMMAND, \"\");"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        // two commands (latest command is failure)"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertInputHistory(LAST_COMMAND, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertInputHistory(LAST_COMMAND, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertInputHistory(NEXT_COMMAND, COMMAND_THAT_FAILS);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertInputHistory(NEXT_COMMAND, \"\");"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertInputHistory(NEXT_COMMAND, \"\");"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        assertInputHistory(LAST_COMMAND, COMMAND_THAT_FAILS);"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        guiRobot.push(LAST_COMMAND);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertInputHistory(LAST_COMMAND, thirdCommand);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        assertInputHistory(LAST_COMMAND, COMMAND_THAT_FAILS);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertInputHistory(LAST_COMMAND, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertInputHistory(NEXT_COMMAND, COMMAND_THAT_FAILS);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertInputHistory(NEXT_COMMAND, thirdCommand);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        assertInputHistory(NEXT_COMMAND, \"\");"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithDown() {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertInputHistory(NEXT_COMMAND, \"\");"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertInputHistory(LAST_COMMAND, \"\");"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertInputHistory(NEXT_COMMAND, \"\");"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        assertInputHistory(LAST_COMMAND, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"        // two commands"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        assertInputHistory(NEXT_COMMAND, \"\");"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        assertInputHistory(LAST_COMMAND, COMMAND_THAT_FAILS);"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        guiRobot.push(LAST_COMMAND);"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        assertInputHistory(NEXT_COMMAND, \"\");"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        assertInputHistory(LAST_COMMAND, thirdCommand);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":216,"author":{"gitID":"-"},"content":"     * Runs a command that fails, then verifies that \u003cbr\u003e"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * - the text remains \u003cbr\u003e"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."},{"lineNumber":219,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    private void assertBehaviorForFailedCommand() {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * Runs a command that succeeds, then verifies that \u003cbr\u003e"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * - the text is cleared \u003cbr\u003e"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."},{"lineNumber":230,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    private void assertBehaviorForSuccessfulCommand() {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        assertEquals(\"\", commandBoxHandle.getInput());"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."},{"lineNumber":239,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    private void assertInputHistory(KeyCodeCombination keyCodeCombination, String expectedCommand) {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        guiRobot.push(keyCodeCombination);"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, commandBoxHandle.getInput());"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."},{"lineNumber":247,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        guiRobot.push(keycode);"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, commandBoxHandle.getInput());"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"kokonguyen191"},"content":"    //@@author kokonguyen191"},{"lineNumber":254,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":255,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":256,"author":{"gitID":"kokonguyen191"},"content":"     * Checks that the input in the {@code commandBox} equals to {@code expectedCommand}."},{"lineNumber":257,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":258,"author":{"gitID":"kokonguyen191"},"content":"    private void assertInput(String expectedCommand) {"},{"lineNumber":259,"author":{"gitID":"kokonguyen191"},"content":"        assertEquals(expectedCommand, commandBoxHandle.getInput());"},{"lineNumber":260,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"kokonguyen191"},"content":"}"}],"authorContributionMap":{"kokonguyen191":18,"hoangduong1607":70,"-":173}},{"path":"src/test/java/seedu/recipe/ui/parser/MobileWikiaParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"kokonguyen191"},"content":"//@@author kokonguyen191"},{"lineNumber":2,"author":{"gitID":"kokonguyen191"},"content":"package seedu.recipe.ui.parser;"},{"lineNumber":3,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":4,"author":{"gitID":"kokonguyen191"},"content":"import static org.junit.Assert.assertArrayEquals;"},{"lineNumber":5,"author":{"gitID":"kokonguyen191"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":6,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.testutil.WikiaRecipes.CHICKEN_INGREDIENT;"},{"lineNumber":7,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.testutil.WikiaRecipes.CHICKEN_INSTRUCTION;"},{"lineNumber":8,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.testutil.WikiaRecipes.CHICKEN_NAME;"},{"lineNumber":9,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.testutil.WikiaRecipes.CHICKEN_TAGS;"},{"lineNumber":10,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.testutil.WikiaRecipes.MOBILE_CHICKEN_RICE_IMAGE_URL;"},{"lineNumber":11,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.testutil.WikiaRecipes.MOBILE_WIKIA_CHICKEN_ADD_COMMAND;"},{"lineNumber":12,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.testutil.WikiaRecipes.MOBILE_WIKIA_RECIPE_URL_CHICKEN;"},{"lineNumber":13,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.testutil.WikiaRecipes.MOBILE_WIKIA_RECIPE_URL_UGANDAN;"},{"lineNumber":14,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.testutil.WikiaRecipes.MOBILE_WIKIA_UGANDAN_ADD_COMMAND;"},{"lineNumber":15,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.testutil.WikiaRecipes.UGANDAN_INGREDIENT;"},{"lineNumber":16,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.testutil.WikiaRecipes.UGANDAN_INSTRUCTION;"},{"lineNumber":17,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.testutil.WikiaRecipes.UGANDAN_NAME;"},{"lineNumber":18,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.testutil.WikiaRecipes.UGANDAN_TAGS;"},{"lineNumber":19,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":20,"author":{"gitID":"kokonguyen191"},"content":"import java.io.IOException;"},{"lineNumber":21,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":22,"author":{"gitID":"kokonguyen191"},"content":"import org.jsoup.Jsoup;"},{"lineNumber":23,"author":{"gitID":"kokonguyen191"},"content":"import org.junit.Before;"},{"lineNumber":24,"author":{"gitID":"kokonguyen191"},"content":"import org.junit.Rule;"},{"lineNumber":25,"author":{"gitID":"kokonguyen191"},"content":"import org.junit.Test;"},{"lineNumber":26,"author":{"gitID":"kokonguyen191"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":27,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":28,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.ui.GuiUnitTest;"},{"lineNumber":29,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":30,"author":{"gitID":"kokonguyen191"},"content":"public class MobileWikiaParserTest extends GuiUnitTest {"},{"lineNumber":31,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":32,"author":{"gitID":"kokonguyen191"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"kokonguyen191"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":34,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":35,"author":{"gitID":"kokonguyen191"},"content":"    private MobileWikiaParser wikiaParserChicken;"},{"lineNumber":36,"author":{"gitID":"kokonguyen191"},"content":"    private MobileWikiaParser wikiaParserUgandan;"},{"lineNumber":37,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":38,"author":{"gitID":"kokonguyen191"},"content":"    @Before"},{"lineNumber":39,"author":{"gitID":"kokonguyen191"},"content":"    public void setUp() throws IOException {"},{"lineNumber":40,"author":{"gitID":"kokonguyen191"},"content":"        wikiaParserChicken \u003d new MobileWikiaParser(Jsoup.connect(MOBILE_WIKIA_RECIPE_URL_CHICKEN).get());"},{"lineNumber":41,"author":{"gitID":"kokonguyen191"},"content":"        wikiaParserUgandan \u003d new MobileWikiaParser(Jsoup.connect(MOBILE_WIKIA_RECIPE_URL_UGANDAN).get());"},{"lineNumber":42,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":44,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"kokonguyen191"},"content":"    public void constructor_nullArgument_throwsException() {"},{"lineNumber":46,"author":{"gitID":"kokonguyen191"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":47,"author":{"gitID":"kokonguyen191"},"content":"        new MobileWikiaParser(null);"},{"lineNumber":48,"author":{"gitID":"kokonguyen191"},"content":"        new MobileWikiaParser(null, \"\");"},{"lineNumber":49,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":51,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"kokonguyen191"},"content":"    public void equals() {"},{"lineNumber":53,"author":{"gitID":"kokonguyen191"},"content":"        String testDocumentString \u003d \"\u003chtml\u003eTest\u003c/html\u003e\";"},{"lineNumber":54,"author":{"gitID":"kokonguyen191"},"content":"        String testUrl \u003d \"127.0.0.1\";"},{"lineNumber":55,"author":{"gitID":"kokonguyen191"},"content":"        MobileWikiaParser wikiaParserA \u003d new MobileWikiaParser(testDocumentString, testUrl);"},{"lineNumber":56,"author":{"gitID":"kokonguyen191"},"content":"        MobileWikiaParser wikiaParserB \u003d new MobileWikiaParser(Jsoup.parse(testDocumentString, testUrl));"},{"lineNumber":57,"author":{"gitID":"kokonguyen191"},"content":"        assertEquals(wikiaParserA, wikiaParserB);"},{"lineNumber":58,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":60,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"kokonguyen191"},"content":"    public void getName_validRecipes_returnsResult() throws Exception {"},{"lineNumber":62,"author":{"gitID":"kokonguyen191"},"content":"        assertEquals(CHICKEN_NAME, wikiaParserChicken.getName());"},{"lineNumber":63,"author":{"gitID":"kokonguyen191"},"content":"        assertEquals(UGANDAN_NAME, wikiaParserUgandan.getName());"},{"lineNumber":64,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":66,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"kokonguyen191"},"content":"    public void getIngredient_validRecipes_returnsResult() throws Exception {"},{"lineNumber":68,"author":{"gitID":"kokonguyen191"},"content":"        assertEquals(CHICKEN_INGREDIENT, wikiaParserChicken.getIngredient());"},{"lineNumber":69,"author":{"gitID":"kokonguyen191"},"content":"        assertEquals(UGANDAN_INGREDIENT, wikiaParserUgandan.getIngredient());"},{"lineNumber":70,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":72,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"kokonguyen191"},"content":"    public void getInstruction_validRecipes_returnsResult() throws Exception {"},{"lineNumber":74,"author":{"gitID":"kokonguyen191"},"content":"        assertEquals(CHICKEN_INSTRUCTION, wikiaParserChicken.getInstruction());"},{"lineNumber":75,"author":{"gitID":"kokonguyen191"},"content":"        assertEquals(UGANDAN_INSTRUCTION, wikiaParserUgandan.getInstruction());"},{"lineNumber":76,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":78,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"kokonguyen191"},"content":"    public void getImageUrl_validRecipes_returnsResult() throws Exception {"},{"lineNumber":80,"author":{"gitID":"kokonguyen191"},"content":"        assertEquals(MOBILE_CHICKEN_RICE_IMAGE_URL, wikiaParserChicken.getImageUrl());"},{"lineNumber":81,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":83,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"kokonguyen191"},"content":"    public void getUrl_validRecipes_returnsResult() throws Exception {"},{"lineNumber":85,"author":{"gitID":"kokonguyen191"},"content":"        assertEquals(MOBILE_WIKIA_RECIPE_URL_CHICKEN, wikiaParserChicken.getUrl());"},{"lineNumber":86,"author":{"gitID":"kokonguyen191"},"content":"        assertEquals(MOBILE_WIKIA_RECIPE_URL_UGANDAN, wikiaParserUgandan.getUrl());"},{"lineNumber":87,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":89,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"kokonguyen191"},"content":"    public void getTags_validRecipes_returnsResult() throws Exception {"},{"lineNumber":91,"author":{"gitID":"kokonguyen191"},"content":"        assertArrayEquals(CHICKEN_TAGS, wikiaParserChicken.getTags());"},{"lineNumber":92,"author":{"gitID":"kokonguyen191"},"content":"        assertArrayEquals(UGANDAN_TAGS, wikiaParserUgandan.getTags());"},{"lineNumber":93,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":95,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"kokonguyen191"},"content":"    public void parseRecipe_validRecipe_returnsValidCommand() throws Exception {"},{"lineNumber":97,"author":{"gitID":"kokonguyen191"},"content":"        assertEquals(MOBILE_WIKIA_CHICKEN_ADD_COMMAND, wikiaParserChicken.parseRecipe());"},{"lineNumber":98,"author":{"gitID":"kokonguyen191"},"content":"        assertEquals(MOBILE_WIKIA_UGANDAN_ADD_COMMAND, wikiaParserUgandan.parseRecipe());"},{"lineNumber":99,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"kokonguyen191"},"content":"}"}],"authorContributionMap":{"kokonguyen191":100}},{"path":"src/test/java/seedu/recipe/ui/parser/WebParserHandlerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"kokonguyen191"},"content":"//@@author kokonguyen191"},{"lineNumber":2,"author":{"gitID":"kokonguyen191"},"content":"package seedu.recipe.ui.parser;"},{"lineNumber":3,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":4,"author":{"gitID":"kokonguyen191"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":6,"author":{"gitID":"kokonguyen191"},"content":"import javax.xml.parsers.ParserConfigurationException;"},{"lineNumber":7,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":8,"author":{"gitID":"kokonguyen191"},"content":"import org.jsoup.nodes.Document;"},{"lineNumber":9,"author":{"gitID":"kokonguyen191"},"content":"import org.junit.Rule;"},{"lineNumber":10,"author":{"gitID":"kokonguyen191"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"kokonguyen191"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":12,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":13,"author":{"gitID":"kokonguyen191"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":14,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.ui.BrowserPanel;"},{"lineNumber":15,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.ui.GuiUnitTest;"},{"lineNumber":16,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":17,"author":{"gitID":"kokonguyen191"},"content":"public class WebParserHandlerTest extends GuiUnitTest {"},{"lineNumber":18,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":19,"author":{"gitID":"kokonguyen191"},"content":"    private static final String WIKIA_RECIPE_URL \u003d \"http://recipes.wikia.com/wiki/Hainanese_Chicken_Rice\";"},{"lineNumber":20,"author":{"gitID":"kokonguyen191"},"content":"    private static final String DUMMY_URL \u003d \"https://google.com/\";"},{"lineNumber":21,"author":{"gitID":"kokonguyen191"},"content":"    private static final String DUMMY_DOCUMENT_WIKIA \u003d \"\u003chtml\u003e\u003cdiv id\u003d\\\"mw-content-text\\\"\u003esomething\u003c/div\u003e\u003c/html\u003e\";"},{"lineNumber":22,"author":{"gitID":"kokonguyen191"},"content":"    private static final String DUMMY_DOCUMENT_WIKIA_MOBILE \u003d \"\u003chtml\u003e\u003c/html\u003e\";"},{"lineNumber":23,"author":{"gitID":"kokonguyen191"},"content":"    private static final String EMPTY_STRING \u003d \"\";"},{"lineNumber":24,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":25,"author":{"gitID":"kokonguyen191"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"kokonguyen191"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":27,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":28,"author":{"gitID":"kokonguyen191"},"content":"    private WebParserHandler webParserHandler;"},{"lineNumber":29,"author":{"gitID":"kokonguyen191"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":30,"author":{"gitID":"kokonguyen191"},"content":"    private BrowserPanelHandle browserPanelHandle;"},{"lineNumber":31,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":32,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"kokonguyen191"},"content":"    public void constructor_nullBrowser_throwsException() throws Exception {"},{"lineNumber":34,"author":{"gitID":"kokonguyen191"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":35,"author":{"gitID":"kokonguyen191"},"content":"        webParserHandler \u003d new WebParserHandler(null);"},{"lineNumber":36,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":38,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"kokonguyen191"},"content":"    public void getWebParser_nothingLoaded_returnNull() throws Exception {"},{"lineNumber":40,"author":{"gitID":"kokonguyen191"},"content":"        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel(true));"},{"lineNumber":41,"author":{"gitID":"kokonguyen191"},"content":"        uiPartRule.setUiPart(browserPanel);"},{"lineNumber":42,"author":{"gitID":"kokonguyen191"},"content":"        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"},{"lineNumber":43,"author":{"gitID":"kokonguyen191"},"content":"        webParserHandler \u003d new WebParserHandler(browserPanel.getBrowser());"},{"lineNumber":44,"author":{"gitID":"kokonguyen191"},"content":"        WebParser actualWebParser \u003d webParserHandler.getWebParser();"},{"lineNumber":45,"author":{"gitID":"kokonguyen191"},"content":"        assertEquals(null, actualWebParser);"},{"lineNumber":46,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":48,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"kokonguyen191"},"content":"    public void getWebParser_unparsableWebsite_returnNull() throws Exception {"},{"lineNumber":50,"author":{"gitID":"kokonguyen191"},"content":"        assertNullWebParser(DUMMY_URL, EMPTY_STRING);"},{"lineNumber":51,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":53,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"kokonguyen191"},"content":"    public void getWebParser_wikiaLoaded_returnWikiaParser() throws Exception {"},{"lineNumber":55,"author":{"gitID":"kokonguyen191"},"content":"        assertWebParser(WIKIA_RECIPE_URL, DUMMY_DOCUMENT_WIKIA,"},{"lineNumber":56,"author":{"gitID":"kokonguyen191"},"content":"                new WikiaParser(new Document(EMPTY_STRING)));"},{"lineNumber":57,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":59,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"kokonguyen191"},"content":"    public void getWebParser_mobileWikiaLoaded_returnMobileWikiaParser() throws Exception {"},{"lineNumber":61,"author":{"gitID":"kokonguyen191"},"content":"        assertWebParser(WIKIA_RECIPE_URL, DUMMY_DOCUMENT_WIKIA_MOBILE,"},{"lineNumber":62,"author":{"gitID":"kokonguyen191"},"content":"                new MobileWikiaParser(new Document(EMPTY_STRING)));"},{"lineNumber":63,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":65,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"kokonguyen191"},"content":"     * Asserts that the created WebParser from the {@code url} matches the {@code expectedWebParser}"},{"lineNumber":67,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"kokonguyen191"},"content":"    private void assertWebParser(String url, String documentString, WebParser expectedWebParser)"},{"lineNumber":69,"author":{"gitID":"kokonguyen191"},"content":"            throws ParserConfigurationException {"},{"lineNumber":70,"author":{"gitID":"kokonguyen191"},"content":"        WebParser actualWebParser \u003d WebParserHandler.getWebParser(url, documentString);"},{"lineNumber":71,"author":{"gitID":"kokonguyen191"},"content":"        assertEquals(expectedWebParser.getClass(), actualWebParser.getClass());"},{"lineNumber":72,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":74,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"kokonguyen191"},"content":"     * Asserts that the created WebParser from the {@code url} doesn\u0027t exist"},{"lineNumber":76,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"kokonguyen191"},"content":"    private void assertNullWebParser(String url, String documentString) throws ParserConfigurationException {"},{"lineNumber":78,"author":{"gitID":"kokonguyen191"},"content":"        WebParser actualWebParser \u003d WebParserHandler.getWebParser(url, documentString);"},{"lineNumber":79,"author":{"gitID":"kokonguyen191"},"content":"        assertEquals(null, actualWebParser);"},{"lineNumber":80,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"kokonguyen191"},"content":"}"}],"authorContributionMap":{"kokonguyen191":81}},{"path":"src/test/java/seedu/recipe/ui/parser/WikiaParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"kokonguyen191"},"content":"//@@author kokonguyen191"},{"lineNumber":2,"author":{"gitID":"kokonguyen191"},"content":"package seedu.recipe.ui.parser;"},{"lineNumber":3,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":4,"author":{"gitID":"kokonguyen191"},"content":"import static org.junit.Assert.assertArrayEquals;"},{"lineNumber":5,"author":{"gitID":"kokonguyen191"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":6,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.testutil.WikiaRecipes.BEEF_INGREDIENT;"},{"lineNumber":7,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.testutil.WikiaRecipes.CHICKEN_INGREDIENT;"},{"lineNumber":8,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.testutil.WikiaRecipes.CHICKEN_INSTRUCTION;"},{"lineNumber":9,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.testutil.WikiaRecipes.CHICKEN_NAME;"},{"lineNumber":10,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.testutil.WikiaRecipes.CHICKEN_RICE_IMAGE_URL;"},{"lineNumber":11,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.testutil.WikiaRecipes.CHICKEN_TAGS;"},{"lineNumber":12,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.testutil.WikiaRecipes.DEVIL_INSTRUCTION;"},{"lineNumber":13,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.testutil.WikiaRecipes.UGANDAN_INGREDIENT;"},{"lineNumber":14,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.testutil.WikiaRecipes.UGANDAN_INSTRUCTION;"},{"lineNumber":15,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.testutil.WikiaRecipes.UGANDAN_NAME;"},{"lineNumber":16,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.testutil.WikiaRecipes.UGANDAN_TAGS;"},{"lineNumber":17,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.testutil.WikiaRecipes.WIKIA_CHICKEN_ADD_COMMAND;"},{"lineNumber":18,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.testutil.WikiaRecipes.WIKIA_NOT_RECIPE;"},{"lineNumber":19,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.testutil.WikiaRecipes.WIKIA_RECIPE_URL_BEEF;"},{"lineNumber":20,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.testutil.WikiaRecipes.WIKIA_RECIPE_URL_CHICKEN;"},{"lineNumber":21,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.testutil.WikiaRecipes.WIKIA_RECIPE_URL_DEVIL;"},{"lineNumber":22,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.testutil.WikiaRecipes.WIKIA_RECIPE_URL_UGANDAN;"},{"lineNumber":23,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.testutil.WikiaRecipes.WIKIA_UGANDAN_ADD_COMMAND;"},{"lineNumber":24,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":25,"author":{"gitID":"kokonguyen191"},"content":"import java.io.IOException;"},{"lineNumber":26,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":27,"author":{"gitID":"kokonguyen191"},"content":"import org.jsoup.Jsoup;"},{"lineNumber":28,"author":{"gitID":"kokonguyen191"},"content":"import org.junit.Before;"},{"lineNumber":29,"author":{"gitID":"kokonguyen191"},"content":"import org.junit.Rule;"},{"lineNumber":30,"author":{"gitID":"kokonguyen191"},"content":"import org.junit.Test;"},{"lineNumber":31,"author":{"gitID":"kokonguyen191"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":32,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":33,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.ui.GuiUnitTest;"},{"lineNumber":34,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":35,"author":{"gitID":"kokonguyen191"},"content":"public class WikiaParserTest extends GuiUnitTest {"},{"lineNumber":36,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":37,"author":{"gitID":"kokonguyen191"},"content":"    @Rule"},{"lineNumber":38,"author":{"gitID":"kokonguyen191"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":39,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":40,"author":{"gitID":"kokonguyen191"},"content":"    private WikiaParser wikiaParserChicken;"},{"lineNumber":41,"author":{"gitID":"kokonguyen191"},"content":"    private WikiaParser wikiaParserBeef;"},{"lineNumber":42,"author":{"gitID":"kokonguyen191"},"content":"    private WikiaParser wikiaParserUgandan;"},{"lineNumber":43,"author":{"gitID":"kokonguyen191"},"content":"    private WikiaParser wikiaParserDevil;"},{"lineNumber":44,"author":{"gitID":"kokonguyen191"},"content":"    private WikiaParser wikiaParserNotRecipe;"},{"lineNumber":45,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":46,"author":{"gitID":"kokonguyen191"},"content":"    @Before"},{"lineNumber":47,"author":{"gitID":"kokonguyen191"},"content":"    public void setUp() throws IOException {"},{"lineNumber":48,"author":{"gitID":"kokonguyen191"},"content":"        wikiaParserChicken \u003d new WikiaParser(Jsoup.connect(WIKIA_RECIPE_URL_CHICKEN).get());"},{"lineNumber":49,"author":{"gitID":"kokonguyen191"},"content":"        wikiaParserUgandan \u003d new WikiaParser(Jsoup.connect(WIKIA_RECIPE_URL_UGANDAN).get());"},{"lineNumber":50,"author":{"gitID":"kokonguyen191"},"content":"        wikiaParserBeef \u003d new WikiaParser(Jsoup.connect(WIKIA_RECIPE_URL_BEEF).get());"},{"lineNumber":51,"author":{"gitID":"kokonguyen191"},"content":"        wikiaParserDevil \u003d new WikiaParser(Jsoup.connect(WIKIA_RECIPE_URL_DEVIL).get());"},{"lineNumber":52,"author":{"gitID":"kokonguyen191"},"content":"        wikiaParserNotRecipe \u003d new WikiaParser(Jsoup.connect(WIKIA_NOT_RECIPE).get());"},{"lineNumber":53,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":55,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"kokonguyen191"},"content":"    public void constructor_nullArgument_throwsException() {"},{"lineNumber":57,"author":{"gitID":"kokonguyen191"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":58,"author":{"gitID":"kokonguyen191"},"content":"        new WikiaParser(null);"},{"lineNumber":59,"author":{"gitID":"kokonguyen191"},"content":"        new WikiaParser(null, \"\");"},{"lineNumber":60,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":62,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"kokonguyen191"},"content":"    public void equals() {"},{"lineNumber":64,"author":{"gitID":"kokonguyen191"},"content":"        String testDocumentString \u003d \"\u003chtml\u003eTest\u003c/html\u003e\";"},{"lineNumber":65,"author":{"gitID":"kokonguyen191"},"content":"        String testUrl \u003d \"127.0.0.1\";"},{"lineNumber":66,"author":{"gitID":"kokonguyen191"},"content":"        WikiaParser wikiaParserA \u003d new WikiaParser(testDocumentString, testUrl);"},{"lineNumber":67,"author":{"gitID":"kokonguyen191"},"content":"        WikiaParser wikiaParserB \u003d new WikiaParser(Jsoup.parse(testDocumentString, testUrl));"},{"lineNumber":68,"author":{"gitID":"kokonguyen191"},"content":"        assertEquals(wikiaParserA, wikiaParserB);"},{"lineNumber":69,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":71,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"kokonguyen191"},"content":"    public void getName_validRecipes_returnsResult() throws Exception {"},{"lineNumber":73,"author":{"gitID":"kokonguyen191"},"content":"        assertEquals(CHICKEN_NAME, wikiaParserChicken.getName());"},{"lineNumber":74,"author":{"gitID":"kokonguyen191"},"content":"        assertEquals(UGANDAN_NAME, wikiaParserUgandan.getName());"},{"lineNumber":75,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":77,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"kokonguyen191"},"content":"    public void getIngredient_validRecipes_returnsResult() throws Exception {"},{"lineNumber":79,"author":{"gitID":"kokonguyen191"},"content":"        assertEquals(BEEF_INGREDIENT, wikiaParserBeef.getIngredient());"},{"lineNumber":80,"author":{"gitID":"kokonguyen191"},"content":"        assertEquals(CHICKEN_INGREDIENT, wikiaParserChicken.getIngredient());"},{"lineNumber":81,"author":{"gitID":"kokonguyen191"},"content":"        assertEquals(UGANDAN_INGREDIENT, wikiaParserUgandan.getIngredient());"},{"lineNumber":82,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":84,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"kokonguyen191"},"content":"    public void getInstruction_validRecipes_returnsResult() throws Exception {"},{"lineNumber":86,"author":{"gitID":"kokonguyen191"},"content":"        assertEquals(CHICKEN_INSTRUCTION, wikiaParserChicken.getInstruction());"},{"lineNumber":87,"author":{"gitID":"kokonguyen191"},"content":"        assertEquals(UGANDAN_INSTRUCTION, wikiaParserUgandan.getInstruction());"},{"lineNumber":88,"author":{"gitID":"kokonguyen191"},"content":"        assertEquals(DEVIL_INSTRUCTION, wikiaParserDevil.getInstruction());"},{"lineNumber":89,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":91,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"kokonguyen191"},"content":"    public void getImageUrl_validRecipes_returnsResult() throws Exception {"},{"lineNumber":93,"author":{"gitID":"kokonguyen191"},"content":"        assertEquals(CHICKEN_RICE_IMAGE_URL, wikiaParserChicken.getImageUrl());"},{"lineNumber":94,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":96,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"kokonguyen191"},"content":"    public void getUrl_validRecipes_returnsResult() throws Exception {"},{"lineNumber":98,"author":{"gitID":"kokonguyen191"},"content":"        assertEquals(WIKIA_RECIPE_URL_CHICKEN, wikiaParserChicken.getUrl());"},{"lineNumber":99,"author":{"gitID":"kokonguyen191"},"content":"        assertEquals(WIKIA_RECIPE_URL_UGANDAN, wikiaParserUgandan.getUrl());"},{"lineNumber":100,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":102,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"kokonguyen191"},"content":"    public void getTags_validRecipes_returnsResult() throws Exception {"},{"lineNumber":104,"author":{"gitID":"kokonguyen191"},"content":"        assertArrayEquals(CHICKEN_TAGS, wikiaParserChicken.getTags());"},{"lineNumber":105,"author":{"gitID":"kokonguyen191"},"content":"        assertArrayEquals(UGANDAN_TAGS, wikiaParserUgandan.getTags());"},{"lineNumber":106,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":108,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"kokonguyen191"},"content":"    public void parseRecipe_validRecipe_returnsValidCommand() throws Exception {"},{"lineNumber":110,"author":{"gitID":"kokonguyen191"},"content":"        String a \u003d WIKIA_CHICKEN_ADD_COMMAND;"},{"lineNumber":111,"author":{"gitID":"kokonguyen191"},"content":"        assertEquals(WIKIA_CHICKEN_ADD_COMMAND, wikiaParserChicken.parseRecipe());"},{"lineNumber":112,"author":{"gitID":"kokonguyen191"},"content":"        assertEquals(WIKIA_UGANDAN_ADD_COMMAND, wikiaParserUgandan.parseRecipe());"},{"lineNumber":113,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":115,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"kokonguyen191"},"content":"    public void getName_notRecipe_throwsNullPointer() throws Exception {"},{"lineNumber":117,"author":{"gitID":"kokonguyen191"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":118,"author":{"gitID":"kokonguyen191"},"content":"        wikiaParserNotRecipe.getName();"},{"lineNumber":119,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":121,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":122,"author":{"gitID":"kokonguyen191"},"content":"    public void getIngredient_notRecipe_throwsNullPointer() throws Exception {"},{"lineNumber":123,"author":{"gitID":"kokonguyen191"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":124,"author":{"gitID":"kokonguyen191"},"content":"        wikiaParserNotRecipe.getIngredient();"},{"lineNumber":125,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":127,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":128,"author":{"gitID":"kokonguyen191"},"content":"    public void getInstruction_notRecipe_throwsNullPointer() throws Exception {"},{"lineNumber":129,"author":{"gitID":"kokonguyen191"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":130,"author":{"gitID":"kokonguyen191"},"content":"        wikiaParserNotRecipe.getInstruction();"},{"lineNumber":131,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":133,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":134,"author":{"gitID":"kokonguyen191"},"content":"    public void getImageUrl_notRecipe_throwsNullPointer() throws Exception {"},{"lineNumber":135,"author":{"gitID":"kokonguyen191"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":136,"author":{"gitID":"kokonguyen191"},"content":"        wikiaParserNotRecipe.getImageUrl();"},{"lineNumber":137,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":139,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":140,"author":{"gitID":"kokonguyen191"},"content":"    public void parseRecipe_notRecipe_throwsNullPointer() throws Exception {"},{"lineNumber":141,"author":{"gitID":"kokonguyen191"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":142,"author":{"gitID":"kokonguyen191"},"content":"        wikiaParserNotRecipe.parseRecipe();"},{"lineNumber":143,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"kokonguyen191"},"content":"}"}],"authorContributionMap":{"kokonguyen191":144}},{"path":"src/test/java/seedu/recipe/ui/UiUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"RyanAngJY"},"content":"//@@author RyanAngJY"},{"lineNumber":2,"author":{"gitID":"RyanAngJY"},"content":"package seedu.recipe.ui;"},{"lineNumber":3,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":4,"author":{"gitID":"RyanAngJY"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.ui.util.UiUtil.HEX_COLOR_BLACK;"},{"lineNumber":6,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.ui.util.UiUtil.HEX_COLOR_WHITE;"},{"lineNumber":7,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":8,"author":{"gitID":"RyanAngJY"},"content":"import java.util.regex.Pattern;"},{"lineNumber":9,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":10,"author":{"gitID":"RyanAngJY"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":12,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.ui.util.UiUtil;"},{"lineNumber":13,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":14,"author":{"gitID":"RyanAngJY"},"content":"public class UiUtilTest {"},{"lineNumber":15,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":16,"author":{"gitID":"RyanAngJY"},"content":"    private static final String LIGHT_COLOR_CODE \u003d \"#FFFFFF\";"},{"lineNumber":17,"author":{"gitID":"RyanAngJY"},"content":"    private static final String DARK_COLOR_CODE \u003d \"#000000\";"},{"lineNumber":18,"author":{"gitID":"RyanAngJY"},"content":"    private static final String VALID_STRING \u003d \"This is a valid string\";"},{"lineNumber":19,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":20,"author":{"gitID":"RyanAngJY"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"RyanAngJY"},"content":"    public void convertStringToValidColorCode() {"},{"lineNumber":22,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":23,"author":{"gitID":"RyanAngJY"},"content":"        // empty string"},{"lineNumber":24,"author":{"gitID":"RyanAngJY"},"content":"        assertTrue(Pattern.matches(UiUtil.HEX_COLOR_REGEX,"},{"lineNumber":25,"author":{"gitID":"RyanAngJY"},"content":"                UiUtil.convertStringToValidColorCode(\"\")));"},{"lineNumber":26,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":27,"author":{"gitID":"RyanAngJY"},"content":"        // valid hexadecimal"},{"lineNumber":28,"author":{"gitID":"RyanAngJY"},"content":"        assertTrue(Pattern.matches(UiUtil.HEX_COLOR_REGEX,"},{"lineNumber":29,"author":{"gitID":"RyanAngJY"},"content":"                UiUtil.convertStringToValidColorCode(\"01fb45\")));"},{"lineNumber":30,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":31,"author":{"gitID":"RyanAngJY"},"content":"        // valid hexadecimal with random whitespaces"},{"lineNumber":32,"author":{"gitID":"RyanAngJY"},"content":"        assertTrue(Pattern.matches(UiUtil.HEX_COLOR_REGEX,"},{"lineNumber":33,"author":{"gitID":"RyanAngJY"},"content":"                UiUtil.convertStringToValidColorCode(\"  cd  eff  f\")));"},{"lineNumber":34,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":35,"author":{"gitID":"RyanAngJY"},"content":"        // valid hexadecimal with varying lengths"},{"lineNumber":36,"author":{"gitID":"RyanAngJY"},"content":"        assertTrue(Pattern.matches(UiUtil.HEX_COLOR_REGEX,"},{"lineNumber":37,"author":{"gitID":"RyanAngJY"},"content":"                UiUtil.convertStringToValidColorCode(\"1a2b\")));"},{"lineNumber":38,"author":{"gitID":"RyanAngJY"},"content":"        assertTrue(Pattern.matches(UiUtil.HEX_COLOR_REGEX,"},{"lineNumber":39,"author":{"gitID":"RyanAngJY"},"content":"                UiUtil.convertStringToValidColorCode(\"1a2bfc124ab\")));"},{"lineNumber":40,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":41,"author":{"gitID":"RyanAngJY"},"content":"        // valid hexadecimal with varying lengths and with random whitespaces"},{"lineNumber":42,"author":{"gitID":"RyanAngJY"},"content":"        assertTrue(Pattern.matches(UiUtil.HEX_COLOR_REGEX,"},{"lineNumber":43,"author":{"gitID":"RyanAngJY"},"content":"                UiUtil.convertStringToValidColorCode(\"  1  a  2b \")));"},{"lineNumber":44,"author":{"gitID":"RyanAngJY"},"content":"        assertTrue(Pattern.matches(UiUtil.HEX_COLOR_REGEX,"},{"lineNumber":45,"author":{"gitID":"RyanAngJY"},"content":"                UiUtil.convertStringToValidColorCode(\" 1a2 bfc12  4ab \")));"},{"lineNumber":46,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":47,"author":{"gitID":"RyanAngJY"},"content":"        // invalid hexadecimal"},{"lineNumber":48,"author":{"gitID":"RyanAngJY"},"content":"        assertTrue(Pattern.matches(UiUtil.HEX_COLOR_REGEX,"},{"lineNumber":49,"author":{"gitID":"RyanAngJY"},"content":"                UiUtil.convertStringToValidColorCode(\"i#tov129nfoiZZ!!Za\")));"},{"lineNumber":50,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":51,"author":{"gitID":"RyanAngJY"},"content":"        // invalid hexadecimal with random whitespaces"},{"lineNumber":52,"author":{"gitID":"RyanAngJY"},"content":"        assertTrue(Pattern.matches(UiUtil.HEX_COLOR_REGEX,"},{"lineNumber":53,"author":{"gitID":"RyanAngJY"},"content":"                UiUtil.convertStringToValidColorCode(\" i t#ov   129 nfoi  ZZ !! Za \")));"},{"lineNumber":54,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":56,"author":{"gitID":"RyanAngJY"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"RyanAngJY"},"content":"    public void getMatchingColorFromGivenColor() {"},{"lineNumber":58,"author":{"gitID":"RyanAngJY"},"content":"        // invalid CSS color code"},{"lineNumber":59,"author":{"gitID":"RyanAngJY"},"content":"        assertTrue(HEX_COLOR_BLACK.equals(UiUtil.getMatchingColorFromGivenColor(\"asdio 42oi n\")));"},{"lineNumber":60,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":61,"author":{"gitID":"RyanAngJY"},"content":"        // light CSS color code"},{"lineNumber":62,"author":{"gitID":"RyanAngJY"},"content":"        assertTrue(HEX_COLOR_BLACK.equals(UiUtil.getMatchingColorFromGivenColor(LIGHT_COLOR_CODE)));"},{"lineNumber":63,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":64,"author":{"gitID":"RyanAngJY"},"content":"        // dark CSS color code"},{"lineNumber":65,"author":{"gitID":"RyanAngJY"},"content":"        assertTrue(HEX_COLOR_WHITE.equals(UiUtil.getMatchingColorFromGivenColor(DARK_COLOR_CODE)));"},{"lineNumber":66,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"RyanAngJY"},"content":"}"},{"lineNumber":68,"author":{"gitID":"RyanAngJY"},"content":"//@@author"}],"authorContributionMap":{"RyanAngJY":68}},{"path":"src/test/java/seedu/recipe/ui/testutil/FacebookHandlerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"RyanAngJY"},"content":"package seedu.recipe.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":3,"author":{"gitID":"RyanAngJY"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":7,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.ui.util.FacebookHandler.ACCESS_TOKEN_IDENTIFIER;"},{"lineNumber":8,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.ui.util.FacebookHandler.REDIRECT_DOMAIN;"},{"lineNumber":9,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":10,"author":{"gitID":"RyanAngJY"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":12,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.ui.util.FacebookHandler;"},{"lineNumber":13,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":14,"author":{"gitID":"RyanAngJY"},"content":"//@@author RyanAngJY"},{"lineNumber":15,"author":{"gitID":"RyanAngJY"},"content":"public class FacebookHandlerTest {"},{"lineNumber":16,"author":{"gitID":"RyanAngJY"},"content":"    public static final String ACCESS_TOKEN_STUB \u003d \"123\";"},{"lineNumber":17,"author":{"gitID":"RyanAngJY"},"content":"    public static final String VALID_EMBEDDED_ACCESS_TOKEN \u003d REDIRECT_DOMAIN"},{"lineNumber":18,"author":{"gitID":"RyanAngJY"},"content":"            + ACCESS_TOKEN_IDENTIFIER + ACCESS_TOKEN_STUB + \"\u0026\";"},{"lineNumber":19,"author":{"gitID":"RyanAngJY"},"content":"    public static final String INVALID_EMBEDDED_ACCESS_TOKEN \u003d REDIRECT_DOMAIN"},{"lineNumber":20,"author":{"gitID":"RyanAngJY"},"content":"            + ACCESS_TOKEN_STUB; // without token identifier"},{"lineNumber":21,"author":{"gitID":"RyanAngJY"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"RyanAngJY"},"content":"    public void hasAccessToken() {"},{"lineNumber":23,"author":{"gitID":"RyanAngJY"},"content":"        FacebookHandler.setAccessToken(null);"},{"lineNumber":24,"author":{"gitID":"RyanAngJY"},"content":"        assertFalse(FacebookHandler.hasAccessToken());"},{"lineNumber":25,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":26,"author":{"gitID":"RyanAngJY"},"content":"        FacebookHandler.setAccessToken(ACCESS_TOKEN_STUB);"},{"lineNumber":27,"author":{"gitID":"RyanAngJY"},"content":"        assertTrue(FacebookHandler.hasAccessToken());"},{"lineNumber":28,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":30,"author":{"gitID":"RyanAngJY"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"RyanAngJY"},"content":"    public void extractAccessToken() {"},{"lineNumber":32,"author":{"gitID":"RyanAngJY"},"content":"        assertTrue(FacebookHandler.extractAccessToken(VALID_EMBEDDED_ACCESS_TOKEN)"},{"lineNumber":33,"author":{"gitID":"RyanAngJY"},"content":"                .equals(ACCESS_TOKEN_STUB));"},{"lineNumber":34,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":36,"author":{"gitID":"RyanAngJY"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"RyanAngJY"},"content":"    public void checkAndSetAccessToken() {"},{"lineNumber":38,"author":{"gitID":"RyanAngJY"},"content":"        assertTrue(FacebookHandler.checkAndSetAccessToken(VALID_EMBEDDED_ACCESS_TOKEN));"},{"lineNumber":39,"author":{"gitID":"RyanAngJY"},"content":"        assertFalse(FacebookHandler.checkAndSetAccessToken(INVALID_EMBEDDED_ACCESS_TOKEN));"},{"lineNumber":40,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":42,"author":{"gitID":"RyanAngJY"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"RyanAngJY"},"content":"    public void getPostDomain() {"},{"lineNumber":44,"author":{"gitID":"RyanAngJY"},"content":"        assertEquals(FacebookHandler.getPostDomain(), FacebookHandler.POST_DOMAIN);"},{"lineNumber":45,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":47,"author":{"gitID":"RyanAngJY"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"RyanAngJY"},"content":"    public void getRedirectEmbedded() {"},{"lineNumber":49,"author":{"gitID":"RyanAngJY"},"content":"        assertEquals(FacebookHandler.getRedirectEmbedded(), FacebookHandler.REDIRECT_EMBEDDED);"},{"lineNumber":50,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"RyanAngJY"},"content":"}"},{"lineNumber":52,"author":{"gitID":"RyanAngJY"},"content":"//@@author"}],"authorContributionMap":{"RyanAngJY":50,"-":2}},{"path":"src/test/java/seedu/recipe/ui/testutil/TextInputProcessorUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"hoangduong1607"},"content":"//@@author hoangduong1607"},{"lineNumber":2,"author":{"gitID":"hoangduong1607"},"content":"package seedu.recipe.ui.testutil;"},{"lineNumber":3,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":4,"author":{"gitID":"hoangduong1607"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":6,"author":{"gitID":"hoangduong1607"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":8,"author":{"gitID":"hoangduong1607"},"content":"import seedu.recipe.ui.util.TextInputProcessorUtil;"},{"lineNumber":9,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":10,"author":{"gitID":"hoangduong1607"},"content":"public class TextInputProcessorUtilTest {"},{"lineNumber":11,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":12,"author":{"gitID":"hoangduong1607"},"content":"    private static final char WHITESPACE \u003d \u0027 \u0027;"},{"lineNumber":13,"author":{"gitID":"hoangduong1607"},"content":"    private static final char LF \u003d \u0027\\n\u0027;"},{"lineNumber":14,"author":{"gitID":"hoangduong1607"},"content":"    private static final String EMPTY_STRING \u003d \"\";"},{"lineNumber":15,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":16,"author":{"gitID":"hoangduong1607"},"content":"    private static final String FIRST_WORD \u003d \"HELLO\";"},{"lineNumber":17,"author":{"gitID":"hoangduong1607"},"content":"    private static final String SECOND_WORD \u003d \"WORLD\";"},{"lineNumber":18,"author":{"gitID":"hoangduong1607"},"content":"    private static final String THIRD_WORD \u003d \"MY\";"},{"lineNumber":19,"author":{"gitID":"hoangduong1607"},"content":"    private static final String FOURTH_WORD \u003d \"NAME\";"},{"lineNumber":20,"author":{"gitID":"hoangduong1607"},"content":"    private static final String FIFTH_WORD \u003d \"IS\";"},{"lineNumber":21,"author":{"gitID":"hoangduong1607"},"content":"    private static final String FIRST_SINGLE_LINE_SENTENCE \u003d FIRST_WORD + WHITESPACE + SECOND_WORD;"},{"lineNumber":22,"author":{"gitID":"hoangduong1607"},"content":"    private static final String SECOND_SINGLE_LINE_SENTENCE \u003d WHITESPACE + THIRD_WORD + WHITESPACE + FOURTH_WORD"},{"lineNumber":23,"author":{"gitID":"hoangduong1607"},"content":"            + WHITESPACE + FIFTH_WORD + WHITESPACE;"},{"lineNumber":24,"author":{"gitID":"hoangduong1607"},"content":"    private static final String MULTIPLE_LINES_SENTENCE \u003d FIRST_SINGLE_LINE_SENTENCE + LF + SECOND_SINGLE_LINE_SENTENCE;"},{"lineNumber":25,"author":{"gitID":"hoangduong1607"},"content":"    private static final String TEN_LINE_SENTENCE \u003d FIRST_SINGLE_LINE_SENTENCE + LF + LF + LF + LF + LF + LF + LF + LF"},{"lineNumber":26,"author":{"gitID":"hoangduong1607"},"content":"            + SECOND_SINGLE_LINE_SENTENCE;"},{"lineNumber":27,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":28,"author":{"gitID":"hoangduong1607"},"content":"    private static TextInputProcessorUtil textInputProcessor \u003d new TextInputProcessorUtil();"},{"lineNumber":29,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":30,"author":{"gitID":"hoangduong1607"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"hoangduong1607"},"content":"    public void getLastWord_success() {"},{"lineNumber":32,"author":{"gitID":"hoangduong1607"},"content":"        textInputProcessor.setContent(FIRST_SINGLE_LINE_SENTENCE);"},{"lineNumber":33,"author":{"gitID":"hoangduong1607"},"content":"        assertEquals(SECOND_WORD, textInputProcessor.getLastWord());"},{"lineNumber":34,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":35,"author":{"gitID":"hoangduong1607"},"content":"        textInputProcessor.setContent(MULTIPLE_LINES_SENTENCE);"},{"lineNumber":36,"author":{"gitID":"hoangduong1607"},"content":"        assertEquals(EMPTY_STRING, textInputProcessor.getLastWord());"},{"lineNumber":37,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":39,"author":{"gitID":"hoangduong1607"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"hoangduong1607"},"content":"    public void getFirstWord_success() {"},{"lineNumber":41,"author":{"gitID":"hoangduong1607"},"content":"        textInputProcessor.setContent(FIRST_SINGLE_LINE_SENTENCE);"},{"lineNumber":42,"author":{"gitID":"hoangduong1607"},"content":"        assertEquals(FIRST_WORD, textInputProcessor.getFirstWord());"},{"lineNumber":43,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":44,"author":{"gitID":"hoangduong1607"},"content":"        textInputProcessor.setContent(MULTIPLE_LINES_SENTENCE);"},{"lineNumber":45,"author":{"gitID":"hoangduong1607"},"content":"        assertEquals(FIRST_WORD, textInputProcessor.getFirstWord());"},{"lineNumber":46,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":48,"author":{"gitID":"hoangduong1607"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"hoangduong1607"},"content":"    public void getLastLine_success() {"},{"lineNumber":50,"author":{"gitID":"hoangduong1607"},"content":"        textInputProcessor.setContent(MULTIPLE_LINES_SENTENCE);"},{"lineNumber":51,"author":{"gitID":"hoangduong1607"},"content":"        assertEquals(SECOND_SINGLE_LINE_SENTENCE, textInputProcessor.getLastLine());"},{"lineNumber":52,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":54,"author":{"gitID":"hoangduong1607"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"hoangduong1607"},"content":"    public void isTextTooLong_success() {"},{"lineNumber":56,"author":{"gitID":"hoangduong1607"},"content":"        textInputProcessor.setContent(TEN_LINE_SENTENCE);"},{"lineNumber":57,"author":{"gitID":"hoangduong1607"},"content":"        assertEquals(true, textInputProcessor.isTextTooLong());"},{"lineNumber":58,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"hoangduong1607"},"content":"}"}],"authorContributionMap":{"hoangduong1607":59}},{"path":"src/test/java/seedu/recipe/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.RecipeCardHandle;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.RecipeListPanelHandle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Recipe;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(RecipeCardHandle expectedCard, RecipeCardHandle actualCard) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPreparationTime(), actualCard.getPreparationTime());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getServings(), actualCard.getServings());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getCalories(), actualCard.getCalories());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getIngredient(), actualCard.getIngredient());"},{"lineNumber":27,"author":{"gitID":"RyanAngJY"},"content":"        assertEquals(expectedCard.getUrl(), actualCard.getUrl());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedRecipe}."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysRecipe(Recipe expectedRecipe, RecipeCardHandle actualCard) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertEquals(expectedRecipe.getName().fullName, actualCard.getName());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(expectedRecipe.getCalories().value,"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                actualCard.getCalories());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertEquals(expectedRecipe.getPreparationTime().value,"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                actualCard.getPreparationTime());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertEquals(expectedRecipe.getServings().value,"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                actualCard.getServings());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertEquals(expectedRecipe.getIngredient().value,"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                actualCard.getIngredient());"},{"lineNumber":44,"author":{"gitID":"RyanAngJY"},"content":"        assertEquals(expectedRecipe.getUrl().value, actualCard.getUrl());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertEquals(expectedRecipe.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                actualCard.getTags());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code recipeListPanelHandle} displays the details of {@code recipes} correctly and"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static void assertListMatching(RecipeListPanelHandle recipeListPanelHandle, Recipe... recipes) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c recipes.length; i++) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            assertCardDisplaysRecipe(recipes[i], recipeListPanelHandle.getRecipeCardHandle(i));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code recipeListPanelHandle} displays the details of {@code recipes} correctly and"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static void assertListMatching(RecipeListPanelHandle recipeListPanelHandle, List\u003cRecipe\u003e recipes) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertListMatching(recipeListPanelHandle, recipes.toArray(new Recipe[0]));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code recipeListPanelHandle} equals to {@code size}."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static void assertListSize(RecipeListPanelHandle recipeListPanelHandle, int size) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d recipeListPanelHandle.getListSize();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":2,"-":79}},{"path":"src/test/java/seedu/recipe/ui/testutil/CloudStorageUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"nicholasangcx"},"content":"//@@author nicholasangcx"},{"lineNumber":2,"author":{"gitID":"nicholasangcx"},"content":"package seedu.recipe.ui.testutil;"},{"lineNumber":3,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":4,"author":{"gitID":"nicholasangcx"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"nicholasangcx"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":7,"author":{"gitID":"nicholasangcx"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"nicholasangcx"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"nicholasangcx"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":11,"author":{"gitID":"nicholasangcx"},"content":"import com.dropbox.core.DbxException;"},{"lineNumber":12,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":13,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.ui.util.CloudStorageUtil;"},{"lineNumber":14,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":15,"author":{"gitID":"nicholasangcx"},"content":"public class CloudStorageUtilTest {"},{"lineNumber":16,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":17,"author":{"gitID":"nicholasangcx"},"content":"    private static final String WRONG_AUTHORIZATION_CODE \u003d \"abcdefg\";"},{"lineNumber":18,"author":{"gitID":"nicholasangcx"},"content":"    private static final String ACCESS_TOKEN_STUB \u003d \"adjhsj\";"},{"lineNumber":19,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":20,"author":{"gitID":"nicholasangcx"},"content":"    @Rule"},{"lineNumber":21,"author":{"gitID":"nicholasangcx"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":22,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":23,"author":{"gitID":"nicholasangcx"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"nicholasangcx"},"content":"    public void hasAccessToken() {"},{"lineNumber":25,"author":{"gitID":"nicholasangcx"},"content":"        CloudStorageUtil.setAccessToken(null);"},{"lineNumber":26,"author":{"gitID":"nicholasangcx"},"content":"        assertFalse(CloudStorageUtil.hasAccessToken());"},{"lineNumber":27,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":28,"author":{"gitID":"nicholasangcx"},"content":"        CloudStorageUtil.setAccessToken(ACCESS_TOKEN_STUB);"},{"lineNumber":29,"author":{"gitID":"nicholasangcx"},"content":"        assertTrue(CloudStorageUtil.hasAccessToken());"},{"lineNumber":30,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":32,"author":{"gitID":"nicholasangcx"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"nicholasangcx"},"content":"    public void processInvalidAuthorizationCode() throws DbxException {"},{"lineNumber":34,"author":{"gitID":"nicholasangcx"},"content":"        thrown.expect(DbxException.class);"},{"lineNumber":35,"author":{"gitID":"nicholasangcx"},"content":"        CloudStorageUtil.processAuthorizationCode(WRONG_AUTHORIZATION_CODE);"},{"lineNumber":36,"author":{"gitID":"nicholasangcx"},"content":"        assertFalse(CloudStorageUtil.hasAccessToken());"},{"lineNumber":37,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"nicholasangcx"},"content":"}"},{"lineNumber":39,"author":{"gitID":"nicholasangcx"},"content":"//@@author"}],"authorContributionMap":{"nicholasangcx":39}},{"path":"src/test/java/seedu/recipe/ui/BrowserPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.recipe.testutil.EventsUtil.postNow;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.recipe.testutil.TypicalRecipes.ALICE;"},{"lineNumber":7,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.testutil.TypicalRecipes.NOURL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.recipe.ui.BrowserPanel.DEFAULT_PAGE_GIRL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.recipe.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.recipe.MainApp;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.events.ui.RecipePanelSelectionChangedEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.recipe.model.util.HtmlFormatter;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class BrowserPanelTest extends GuiUnitTest {"},{"lineNumber":22,"author":{"gitID":"RyanAngJY"},"content":"    private static final String EMPTY_STRING \u003d \"\";"},{"lineNumber":23,"author":{"gitID":"RyanAngJY"},"content":"    private static final String HTML_TAG_REGEX \u003d \"\\\\\u003c.*?\u003e\";"},{"lineNumber":24,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private RecipePanelSelectionChangedEvent selectionChangedEventStub;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private BrowserPanelHandle browserPanelHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        selectionChangedEventStub \u003d new RecipePanelSelectionChangedEvent(new RecipeCard(ALICE, 0));"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel(true));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(browserPanel);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void display() throws Exception {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // default web page"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE_GIRL);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // associated web page of a recipe"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        postNow(selectionChangedEventStub);"},{"lineNumber":48,"author":{"gitID":"RyanAngJY"},"content":"        URL expectedRecipeUrl \u003d new URL(ALICE.getUrl().toString());"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(browserPanelHandle);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertEquals(expectedRecipeUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":52,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":53,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":54,"author":{"gitID":"RyanAngJY"},"content":"        selectionChangedEventStub \u003d new RecipePanelSelectionChangedEvent(new RecipeCard(NOURL, 1));"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // associated web page of a recipe"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        postNow(selectionChangedEventStub);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        String expectedHtmlContent \u003d HtmlFormatter.getHtmlFormat(NOURL)"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                .replaceAll(HTML_TAG_REGEX, EMPTY_STRING);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(browserPanelHandle);"},{"lineNumber":62,"author":{"gitID":"RyanAngJY"},"content":"        assertEquals(expectedHtmlContent, browserPanelHandle.getLoadedHtml());"},{"lineNumber":63,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":10,"-":55}},{"path":"src/test/java/seedu/recipe/commons/util/FileUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"RyanAngJY"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"RyanAngJY"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.MainApp;"},{"lineNumber":14,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.model.recipe.Image;"},{"lineNumber":15,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.testutil.Assert;"},{"lineNumber":16,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class FileUtilTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void getPath() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // valid case"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertEquals(\"folder\" + File.separator + \"sub-folder\", FileUtil.getPath(\"folder/sub-folder\"));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // null parameter -\u003e throws NullPointerException"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        FileUtil.getPath(null);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // no forwards slash -\u003e assertion failure"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        FileUtil.getPath(\"folder\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":37,"author":{"gitID":"RyanAngJY"},"content":"    //@@author RyanAngJY"},{"lineNumber":38,"author":{"gitID":"RyanAngJY"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"RyanAngJY"},"content":"    public void isImageFile() {"},{"lineNumber":40,"author":{"gitID":"RyanAngJY"},"content":"        // file is not an image file"},{"lineNumber":41,"author":{"gitID":"RyanAngJY"},"content":"        File file \u003d new File(MainApp.class.getResource(\"/view/DarkTheme.css\").toExternalForm()"},{"lineNumber":42,"author":{"gitID":"RyanAngJY"},"content":"                .substring(5));"},{"lineNumber":43,"author":{"gitID":"RyanAngJY"},"content":"        assertFalse(FileUtil.isImageFile(file));"},{"lineNumber":44,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":45,"author":{"gitID":"RyanAngJY"},"content":"        // file is directory"},{"lineNumber":46,"author":{"gitID":"RyanAngJY"},"content":"        file \u003d new File(MainApp.class.getResource(\"/view\").toExternalForm().substring(5));"},{"lineNumber":47,"author":{"gitID":"RyanAngJY"},"content":"        assertFalse(FileUtil.isImageFile(file));"},{"lineNumber":48,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":49,"author":{"gitID":"RyanAngJY"},"content":"        // file is null pointer"},{"lineNumber":50,"author":{"gitID":"RyanAngJY"},"content":"        File nullFile \u003d null;"},{"lineNumber":51,"author":{"gitID":"RyanAngJY"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e FileUtil.isImageFile(nullFile));"},{"lineNumber":52,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":53,"author":{"gitID":"RyanAngJY"},"content":"        // valid image file"},{"lineNumber":54,"author":{"gitID":"RyanAngJY"},"content":"        file \u003d new File(Image.VALID_IMAGE_PATH);"},{"lineNumber":55,"author":{"gitID":"RyanAngJY"},"content":"        assertTrue(FileUtil.isImageFile(file));"},{"lineNumber":56,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"RyanAngJY"},"content":"    //@@author"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":28,"-":30}},{"path":"src/test/java/seedu/recipe/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.recipe.model.RecipeBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.recipe.storage.XmlAdaptedRecipe;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.recipe.storage.XmlAdaptedTag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.recipe.storage.XmlSerializableRecipeBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.recipe.testutil.RecipeBookBuilder;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.recipe.testutil.RecipeBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.recipe.testutil.TestUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validRecipeBook.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final File MISSING_RECIPE_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingRecipeField.xml\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final File INVALID_RECIPE_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidRecipeField.xml\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final File VALID_RECIPE_FILE \u003d new File(TEST_DATA_FOLDER + \"validRecipe.xml\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempRecipeBook.xml\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String INVALID_PREPARATION_TIME \u003d \"9482asf424\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Chicken Rice\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_INGREDIENT \u003d \"demolishment,bigwig,archer,negative,appearance,afternoon\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_INSTRUCTION \u003d \"Fill a tea kettle or 2 quart saucepan with water and bring to \""},{"lineNumber":41,"author":{"gitID":"-"},"content":"            + \"a boil. Remove excess fat from chilled chicken and place in colander over a large bowl. Spread out with\""},{"lineNumber":42,"author":{"gitID":"-"},"content":"            + \" a fork. Pour hot water over meat through colander.\\n\""},{"lineNumber":43,"author":{"gitID":"-"},"content":"            + \"Place chicken in plastic container with tight fitting lid.\\n\""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            + \"Add onions, chili powder, oregano, garlic powder, cumin, and paprika to chicken.\\n\""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + \"Refrigerate chicken overnight in plastic container with tight fitting lid.\\n\""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + \"To make tacos, place chicken mixture in a pan and heat slowly or heat in microwave for 2–3 minutes, \""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + \"stirring after 1½ minutes to heat evenly. Combine finely shredded lettuce and cabbage. Mix cheeses \""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + \"together. Place ¼ cup heated chicken mixture in a tortilla and top with cheese and vegetables.\\n\""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + \"Add salsa as desired.\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private static final String VALID_COOKING_TIME \u003d \"20 min\";"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private static final String VALID_PREPARATION_TIME \u003d \"69 hours\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private static final String VALID_CALORIES \u003d \"5000\";"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private static final String VALID_SERVINGS \u003d \"2\";"},{"lineNumber":54,"author":{"gitID":"RyanAngJY"},"content":"    private static final String VALID_URL \u003d \"https://www.google.com\";"},{"lineNumber":55,"author":{"gitID":"RyanAngJY"},"content":"    private static final String VALID_IMAGE \u003d \"-\";"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"best\"));"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(null, RecipeBook.class);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, RecipeBook.class);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, RecipeBook.class);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        RecipeBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableRecipeBook.class).toModelType();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertEquals(9, dataFromFile.getRecipeList().size());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertEquals(0, dataFromFile.getTagList().size());"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void xmlAdaptedRecipeFromFile_fileWithMissingRecipeField_validResult() throws Exception {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        XmlAdaptedRecipe actualRecipe \u003d XmlUtil.getDataFromFile("},{"lineNumber":95,"author":{"gitID":"-"},"content":"                MISSING_RECIPE_FIELD_FILE, XmlAdaptedRecipeWithRootElement.class);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        XmlAdaptedRecipe expectedRecipe \u003d"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                new XmlAdaptedRecipe(null, VALID_INGREDIENT, VALID_INSTRUCTION, VALID_COOKING_TIME,"},{"lineNumber":98,"author":{"gitID":"RyanAngJY"},"content":"                        VALID_PREPARATION_TIME, VALID_CALORIES, VALID_SERVINGS, VALID_URL,"},{"lineNumber":99,"author":{"gitID":"RyanAngJY"},"content":"                        VALID_IMAGE, VALID_TAGS);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertEquals(expectedRecipe, actualRecipe);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public void xmlAdaptedRecipeFromFile_fileWithInvalidRecipeField_validResult() throws Exception {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        XmlAdaptedRecipe actualRecipe \u003d XmlUtil.getDataFromFile("},{"lineNumber":106,"author":{"gitID":"-"},"content":"                INVALID_RECIPE_FIELD_FILE, XmlAdaptedRecipeWithRootElement.class);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        XmlAdaptedRecipe expectedRecipe \u003d"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                new XmlAdaptedRecipe(VALID_NAME, VALID_INGREDIENT, VALID_INSTRUCTION, VALID_COOKING_TIME,"},{"lineNumber":109,"author":{"gitID":"RyanAngJY"},"content":"                        INVALID_PREPARATION_TIME, VALID_CALORIES, VALID_SERVINGS, VALID_URL,"},{"lineNumber":110,"author":{"gitID":"RyanAngJY"},"content":"                        VALID_IMAGE, VALID_TAGS);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertEquals(expectedRecipe, actualRecipe);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public void xmlAdaptedRecipeFromFile_fileWithValidRecipe_validResult() throws Exception {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        XmlAdaptedRecipe actualRecipe \u003d XmlUtil.getDataFromFile("},{"lineNumber":117,"author":{"gitID":"-"},"content":"                VALID_RECIPE_FILE, XmlAdaptedRecipeWithRootElement.class);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        XmlAdaptedRecipe expectedRecipe \u003d"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                new XmlAdaptedRecipe(VALID_NAME, VALID_INGREDIENT, VALID_INSTRUCTION, VALID_COOKING_TIME,"},{"lineNumber":120,"author":{"gitID":"RyanAngJY"},"content":"                        VALID_PREPARATION_TIME, VALID_CALORIES, VALID_SERVINGS, VALID_URL,"},{"lineNumber":121,"author":{"gitID":"RyanAngJY"},"content":"                        VALID_IMAGE, VALID_TAGS);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertEquals(expectedRecipe, actualRecipe);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(null, new RecipeBook());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new RecipeBook());"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        XmlSerializableRecipeBook dataToWrite \u003d new XmlSerializableRecipeBook(new RecipeBook());"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        XmlSerializableRecipeBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableRecipeBook.class);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        RecipeBookBuilder builder \u003d new RecipeBookBuilder(new RecipeBook());"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        dataToWrite \u003d new XmlSerializableRecipeBook("},{"lineNumber":153,"author":{"gitID":"-"},"content":"                builder.withRecipe(new RecipeBuilder().build()).withTag(\"food\").build());"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableRecipeBook.class);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedRecipe}"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":163,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    @XmlRootElement(name \u003d \"recipe\")"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    private static class XmlAdaptedRecipeWithRootElement extends XmlAdaptedRecipe {}"},{"lineNumber":166,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":8,"-":158}},{"path":"src/test/java/seedu/recipe/logic/parser/TagCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"nicholasangcx"},"content":"//@@author nicholasangcx"},{"lineNumber":2,"author":{"gitID":"nicholasangcx"},"content":"package seedu.recipe.logic.parser;"},{"lineNumber":3,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":4,"author":{"gitID":"nicholasangcx"},"content":"import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"nicholasangcx"},"content":"import static seedu.recipe.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"nicholasangcx"},"content":"import static seedu.recipe.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":8,"author":{"gitID":"nicholasangcx"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":10,"author":{"gitID":"nicholasangcx"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":12,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.logic.commands.TagCommand;"},{"lineNumber":13,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.model.tag.TagContainsKeywordsPredicate;"},{"lineNumber":14,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":15,"author":{"gitID":"nicholasangcx"},"content":"public class TagCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":17,"author":{"gitID":"nicholasangcx"},"content":"    private TagCommandParser parser \u003d new TagCommandParser();"},{"lineNumber":18,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":19,"author":{"gitID":"nicholasangcx"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"nicholasangcx"},"content":"    public void parseEmptyArgThrowsParseException() {"},{"lineNumber":21,"author":{"gitID":"nicholasangcx"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE));"},{"lineNumber":22,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":24,"author":{"gitID":"nicholasangcx"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"nicholasangcx"},"content":"    public void parseValidArgsReturnsTagCommand() {"},{"lineNumber":26,"author":{"gitID":"nicholasangcx"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":27,"author":{"gitID":"nicholasangcx"},"content":"        TagCommand expectedTagCommand \u003d"},{"lineNumber":28,"author":{"gitID":"nicholasangcx"},"content":"                new TagCommand(new TagContainsKeywordsPredicate(Arrays.asList(\"friends\", \"owesMoney\")),"},{"lineNumber":29,"author":{"gitID":"nicholasangcx"},"content":"                                    new String[] {\"friends\", \"owesMoney\"});"},{"lineNumber":30,"author":{"gitID":"nicholasangcx"},"content":"        assertParseSuccess(parser, \"friends owesMoney\", expectedTagCommand);"},{"lineNumber":31,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":32,"author":{"gitID":"nicholasangcx"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":33,"author":{"gitID":"nicholasangcx"},"content":"        assertParseSuccess(parser, \" \\n friends \\n \\t owesMoney  \\t\", expectedTagCommand);"},{"lineNumber":34,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"nicholasangcx"},"content":"}"},{"lineNumber":36,"author":{"gitID":"nicholasangcx"},"content":"//@@author"}],"authorContributionMap":{"nicholasangcx":36}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d ReciRecipé - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: short"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-F09-B2/main/tree/master"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"By: `Team F09-B2`      Since: `Jan 2018`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"[.print-only]"},{"lineNumber":19,"author":{"gitID":"-"},"content":"Please visit the https://recirecipe.netlify.com/developerguide[online page] to view the Developer Guide in full formatting (some images may only be viewable on the online page)."},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"---"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":24,"author":{"gitID":"RyanAngJY"},"content":"*\u003c\u003cReciRecipe,ReciRecipé\u003e\u003e* is a desktop recipe storage application for users who prefer using the keyboard instead of a mouse for efficient management. It is useful for tech-savvy cooks that want all their recipes stored in one place."},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"This *Developer Guide* will take you through the design and implementation of *ReciRecipé*. It takes a top-down approach in explaining the design, beginning from the architecture of the entire application before moving into the specifics of how some functions are implemented."},{"lineNumber":27,"author":{"gitID":"-"},"content":"If you are a new developer, you can choose a component in the architecture that you are more comfortable with and start from there."},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"You will need these components installed on your computer:"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":". JDK 1.8.0_60 or later"},{"lineNumber":36,"author":{"gitID":"-"},"content":"+"},{"lineNumber":37,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":38,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":39,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":40,"author":{"gitID":"-"},"content":"+"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":". IntelliJ IDE"},{"lineNumber":43,"author":{"gitID":"-"},"content":"+"},{"lineNumber":44,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":45,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFX plugins installed. +"},{"lineNumber":46,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to *File \u003e Settings \u003e Plugins* to re-enable them."},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"Follow these steps carefully to set up ReciRecipé on your computer:"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer."},{"lineNumber":54,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click *File \u003e Close Project* to close the existing project dialog first)."},{"lineNumber":55,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle."},{"lineNumber":56,"author":{"gitID":"-"},"content":".. Click *Configure \u003e Project Defaults \u003e Project Structure*."},{"lineNumber":57,"author":{"gitID":"-"},"content":".. Click *New...* and find the directory of the JDK."},{"lineNumber":58,"author":{"gitID":"-"},"content":". Click *Import Project*."},{"lineNumber":59,"author":{"gitID":"-"},"content":". Locate the *build.gradle* file and select it. Click *OK*."},{"lineNumber":60,"author":{"gitID":"-"},"content":". Click *Open as Project*."},{"lineNumber":61,"author":{"gitID":"-"},"content":". Click *OK* to accept the default settings."},{"lineNumber":62,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":63,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"Complete the following steps to verify the setup:"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":". Run the `seedu.recipe.MainApp` to see if it can starts."},{"lineNumber":70,"author":{"gitID":"-"},"content":". Try some simple commands to see if the app can respond."},{"lineNumber":71,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":". Go to *File \u003e Settings...* (Windows/Linux), or *IntelliJ IDEA \u003e Preferences...* (macOS)."},{"lineNumber":80,"author":{"gitID":"-"},"content":". Select *Editor \u003e Code Style \u003e Java*."},{"lineNumber":81,"author":{"gitID":"-"},"content":". Click on the *Imports* tab to set the order."},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"* For **Class count to use import with \u0027\\*\u0027** and **Names count to use static import with \u0027*\u0027**: Set to *999* to prevent IntelliJ from contracting the import statements."},{"lineNumber":84,"author":{"gitID":"-"},"content":"* For *Import Layout*: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`."},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"IntelliJ should look like \u003c\u003cfig-CodeStyleImports\u003e\u003e below after step 3."},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"[[fig-CodeStyleImports]]"},{"lineNumber":89,"author":{"gitID":"-"},"content":".Code style imports"},{"lineNumber":90,"author":{"gitID":"-"},"content":"image::CodeStyleImports.png[width\u003d\"400\"]"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure IntelliJ to check style-compliance as you write code."},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (\u003c\u003cCI, CI\u003e\u003e) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":103,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":108,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)."},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"When you are ready to start coding:"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":115,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":120,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":121,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"ReciRecipé, as a product based on AddressBook, implements an events-driven architecture."},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"The architecture diagram given below (\u003c\u003cfig-ArchitectureDiagram\u003e\u003e) explains the high-level design of the App with 6 components."},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"RyanAngJY"},"content":"[[fig-ArchitectureDiagram]]"},{"lineNumber":128,"author":{"gitID":"-"},"content":".Architecture diagram"},{"lineNumber":129,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":130,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":133,"author":{"gitID":"-"},"content":"The *.pptx* files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the *.pptx* file, select the objects of the diagram, and choose *Save as picture*."},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"Given below is a quick overview of each component:"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":". \u003c\u003cDesign-Main,*`Main`*\u003e\u003e: Contains the initializing, starting-up and exiting of the app."},{"lineNumber":138,"author":{"gitID":"-"},"content":". \u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e: Contains classes that are used by the following 4 components, `UI`, `Logic`, `Model`, and `Storage`."},{"lineNumber":139,"author":{"gitID":"-"},"content":". \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: Contains the UI of the app."},{"lineNumber":140,"author":{"gitID":"-"},"content":". \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: Contains the commands of the app."},{"lineNumber":141,"author":{"gitID":"-"},"content":". \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Contains the the data of the app in-memory."},{"lineNumber":142,"author":{"gitID":"-"},"content":". \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Contains the interaction of the app with the external memory, which consists of reading from and writing to the hard disk."},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"Each of the four components \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e, \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e, \u003c\u003cDesign-Model,*`Model`*\u003e\u003e, \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e:"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"RyanAngJY"},"content":"* Defines its \u003c\u003cAPI,API\u003e\u003e in an interface with the same name as the component."},{"lineNumber":147,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":150,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-driven architecture"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"In general, the components are designed in such a way that their interactions are being driven by events. And we will now give an example of what happens when a command is being executed."},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"The sequence diagram below (\u003c\u003cfig-ComponentInteraction\u003e\u003e) shows how the components interact in the scenario where the user issues the command *`delete 1`*."},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"RyanAngJY"},"content":"[[fig-ComponentInteraction]]"},{"lineNumber":157,"author":{"gitID":"RyanAngJY"},"content":".Component interactions for *`delete 1`* command (part 1)"},{"lineNumber":158,"author":{"gitID":"-"},"content":"image::SDforDeleteRecipe.png[width\u003d\"800\"]"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":161,"author":{"gitID":"RyanAngJY"},"content":"Note how the \u003c\u003cDesign-Model,*`Model`*\u003e\u003e simply raises a `_RecipeBookChangedEvent_` when the Recipe Book data are changed, instead of asking the \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e to save the updates to the hard disk."},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"RyanAngJY"},"content":"The diagram below shows how the `_EventsCenter_` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"RyanAngJY"},"content":".Component interactions for *`delete 1`* command (part 2)"},{"lineNumber":166,"author":{"gitID":"-"},"content":"image::SDforDeleteRecipeEventHandling.png[width\u003d\"800\"]"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":169,"author":{"gitID":"RyanAngJY"},"content":"Note how the event is propagated through the `_EventsCenter_` to the \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e and \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e without \u003c\u003cDesign-Model,*`Model`*\u003e\u003e having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"[[Design-Main]]"},{"lineNumber":174,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Main component"},{"lineNumber":175,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Main,*`Main`*\u003e\u003e has only one class called link:{repoURL}/src/main/java/seedu/recipe/MainApp.java[`_MainApp_`]. This class:"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"* Initializes all the components in the correct sequence, and connects them up with each other at app launch."},{"lineNumber":178,"author":{"gitID":"-"},"content":"* Shuts down the components and invokes cleanup method where necessary when the app shuts down."},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":181,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Commons component"},{"lineNumber":182,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level:"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"* `_EventsCenter_` :  Used by components to communicate with other components using events (i.e. a form of _Event Driven_ design). Written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]."},{"lineNumber":185,"author":{"gitID":"RyanAngJY"},"content":"* `_LogsCenter_` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":188,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"The UI consists of a `_MainWindow_` that is made up of smaller parts:"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"* A `_CommandBox_` that takes in user input."},{"lineNumber":193,"author":{"gitID":"-"},"content":"* A `_ResultDisplay_` that displays the command feedback."},{"lineNumber":194,"author":{"gitID":"-"},"content":"* A `_RecipeListPanel_` that displays all recipes in a list view."},{"lineNumber":195,"author":{"gitID":"-"},"content":"* A `_StatusBarFooter_` that displays important data changes."},{"lineNumber":196,"author":{"gitID":"-"},"content":"* A `_BrowserPanel_` that contains the in-app browser."},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"All these parts, including the `_MainWindow_`, inherit from the abstract `_UiPart_` class (see \u003c\u003cfig-UiClassDiagram\u003e\u003e)."},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"[[fig-UiClassDiagram]]"},{"lineNumber":201,"author":{"gitID":"-"},"content":".Structure of the `UI` component"},{"lineNumber":202,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":203,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"The \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e component uses JavaFX UI framework. The layout of these UI parts is defined in matching *.fxml* files that are in the *src/main/resources/view* folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/recipe/ui/MainWindow.java[`_MainWindow_`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[MainWindow.fxml]."},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"The \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e component:"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"RyanAngJY"},"content":"* Executes user commands using the \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e component."},{"lineNumber":210,"author":{"gitID":"RyanAngJY"},"content":"* Binds itself to some data in the \u003c\u003cDesign-Model,*`Model`*\u003e\u003e so that the UI can auto-update when data in the \u003c\u003cDesign-Model,*`Model`*\u003e\u003e change."},{"lineNumber":211,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the app and updates the UI accordingly."},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":214,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"The \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e component contains all commands and their their implementation. +"},{"lineNumber":217,"author":{"gitID":"-"},"content":"When the user submits a command, the \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e component:"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":".  Uses the `_RecipeBookParser_` class to parse the user command."},{"lineNumber":220,"author":{"gitID":"-"},"content":".  Creates a `_Command_` object which is executed by the `_LogicManager_`."},{"lineNumber":221,"author":{"gitID":"-"},"content":".  Might affect the \u003c\u003cDesign-Model,*`Model`*\u003e\u003e (e.g. adding a recipe) and/or raise events."},{"lineNumber":222,"author":{"gitID":"-"},"content":".  Passes the result of the command execution, which is encapsulated as a `_CommandResult_` object, back to the \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e."},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"For an overview of the structure of the \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e component, refer to the diagram below \u003c\u003cfig-LogicClassDiagram\u003e\u003e."},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":227,"author":{"gitID":"-"},"content":".Structure of the `Logic` component"},{"lineNumber":228,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":231,"author":{"gitID":"-"},"content":"For finer details concerning `_XYZCommand_` and `_Command_`, refer to the diagram \u003c\u003cfig-LogicCommandClassDiagram\u003e\u003e."},{"lineNumber":232,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"[[fig-LogicCommandClassDiagram]]"},{"lineNumber":235,"author":{"gitID":"-"},"content":".Structure of commands in the `Logic` component"},{"lineNumber":236,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"RyanAngJY"},"content":"Refer to the Sequence Diagram for the example of interactions within the \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e component for the `execute(\"delete 1\")` API call."},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":".Interactions inside the `Logic` component for the *`delete 1`* command"},{"lineNumber":243,"author":{"gitID":"-"},"content":"image::DeleteRecipeSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":244,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":247,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"The \u003c\u003cDesign-Model,*`Model`*\u003e\u003e stores the app data structures. The structures used in ReciRecipé are:"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"* `_UserPref_` that represents the user\u0027s preferences."},{"lineNumber":252,"author":{"gitID":"-"},"content":"* `_Recipe_` as well as its information, for example, `_Instruction_`, `_CookingTime_`, etc."},{"lineNumber":253,"author":{"gitID":"-"},"content":"* `_ObservableList\u003cRecipe\u003e_` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"Refer to diagram below \u003c\u003cfig-ModelClassDiagram\u003e\u003e for the interaction between the `Model` component classes."},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"[[fig-ModelClassDiagram]]"},{"lineNumber":258,"author":{"gitID":"-"},"content":".Structure of the `Model` component"},{"lineNumber":259,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":260,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":263,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"The \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e component:"},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"* Can save `_UserPref_` objects in JSON format and read it back."},{"lineNumber":268,"author":{"gitID":"-"},"content":"* Can save the Recipe Book data in XML format and read it back."},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"-"},"content":"Refer to diagram below \u003c\u003cfig-StorageClassDiagram\u003e\u003e for the interaction between the `Storage` component classes."},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":"[[fig-StorageClassDiagram]]"},{"lineNumber":273,"author":{"gitID":"-"},"content":".Structure of the `Storage` component"},{"lineNumber":274,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":281,"author":{"gitID":"-"},"content":"// tag::auto-completion[]"},{"lineNumber":282,"author":{"gitID":"hoangduong1607"},"content":"\u003d\u003d\u003d Auto-completion"},{"lineNumber":283,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"hoangduong1607"},"content":"Formerly, users need to type all application keywords and their inputs to the command line. Auto-completion feature is implemented to help users shorten the commands they need to type, by giving suggestions of words based on current input of users and automatically filling chosen words into input field."},{"lineNumber":286,"author":{"gitID":"-"},"content":""},{"lineNumber":287,"author":{"gitID":"RyanAngJY"},"content":"Currently, a class called `_SuggestionsPopUp_`, which inherits from `_ContextMenu_`, is created to handle all operations relating to auto-completion. The operations include displaying a pop-up menu consisting of suggestions for user’s input, automatically completing input field when a word is chosen and hiding the pop-up menu."},{"lineNumber":288,"author":{"gitID":"-"},"content":""},{"lineNumber":289,"author":{"gitID":"-"},"content":"Key combination kbd:[Shift]+kbd:[Tab] is used to show suggestion pop-up. For other keys and key combinations, the pop-up is hidden. The code to handle these key and key combination actions is shown below:"},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":292,"author":{"gitID":"-"},"content":"----"},{"lineNumber":293,"author":{"gitID":"-"},"content":"private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":294,"author":{"gitID":"hoangduong1607"},"content":"    suggestionsPopUp.hideSuggestions();"},{"lineNumber":295,"author":{"gitID":"-"},"content":"    if (SHOW_SUGGESTIONS_COMMAND.match(keyEvent)) {"},{"lineNumber":296,"author":{"gitID":"hoangduong1607"},"content":"        keyEvent.consume();"},{"lineNumber":297,"author":{"gitID":"hoangduong1607"},"content":"        suggestionsPopUp.showSuggestions();"},{"lineNumber":298,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":299,"author":{"gitID":"hoangduong1607"},"content":"    // Other key combinations"},{"lineNumber":300,"author":{"gitID":"-"},"content":"}"},{"lineNumber":301,"author":{"gitID":"-"},"content":"----"},{"lineNumber":302,"author":{"gitID":"-"},"content":""},{"lineNumber":303,"author":{"gitID":"-"},"content":"To display suggestions, first, a suggestion list is built, then the position of the pop-up menu is calculated for display."},{"lineNumber":304,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":305,"author":{"gitID":"RyanAngJY"},"content":"Suggestion list is built with a given list as a dictionary and last word in user input as a word that needs to be looked up. All words in the dictionary that take given word as prefix are valid suggestions and added to the list. However, since `_CommandBox_` is limited, only a small number of words are added to the pop-up menu. The code for compiling suggestion list is given below:"},{"lineNumber":306,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":308,"author":{"gitID":"-"},"content":"----"},{"lineNumber":309,"author":{"gitID":"-"},"content":"for (String suggestion : dictionary) {"},{"lineNumber":310,"author":{"gitID":"hoangduong1607"},"content":"    if (suggestion.startsWith(prefix)) {"},{"lineNumber":311,"author":{"gitID":"hoangduong1607"},"content":"        addSuggestion(suggestion);"},{"lineNumber":312,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":313,"author":{"gitID":"-"},"content":""},{"lineNumber":314,"author":{"gitID":"hoangduong1607"},"content":"    if (getItems().size() \u003d\u003d MAX_SUGGESTIONS) {"},{"lineNumber":315,"author":{"gitID":"hoangduong1607"},"content":"        break;"},{"lineNumber":316,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":317,"author":{"gitID":"-"},"content":"}"},{"lineNumber":318,"author":{"gitID":"-"},"content":"----"},{"lineNumber":319,"author":{"gitID":"-"},"content":""},{"lineNumber":320,"author":{"gitID":"RyanAngJY"},"content":"The given dictionary and the constant `MAX_SUGGESTIONS` can be found in `_AutoCompletionUtil_` class. All operations with input text such as finding the last word of user\u0027s input are supported by `_TextInputProcessorUtil_` class."},{"lineNumber":321,"author":{"gitID":"-"},"content":""},{"lineNumber":322,"author":{"gitID":"RyanAngJY"},"content":"To calculate position to display pop-up menu, height and width of input text (in pixels) are computed and then used to determine display position in the main window. Height and width of input text are calculated in `_TextInputProcessorUtil_` class."},{"lineNumber":323,"author":{"gitID":"-"},"content":""},{"lineNumber":324,"author":{"gitID":"hoangduong1607"},"content":"Then, the suggestion list can be shown in main window."},{"lineNumber":325,"author":{"gitID":"-"},"content":""},{"lineNumber":326,"author":{"gitID":"-"},"content":"To hide the suggestion list, a method called `hide()` is implemented as below:"},{"lineNumber":327,"author":{"gitID":"-"},"content":""},{"lineNumber":328,"author":{"gitID":"hoangduong1607"},"content":"[source,java]"},{"lineNumber":329,"author":{"gitID":"hoangduong1607"},"content":"----"},{"lineNumber":330,"author":{"gitID":"hoangduong1607"},"content":"protected void hideSuggestions() {"},{"lineNumber":331,"author":{"gitID":"hoangduong1607"},"content":"    if  (isShowing()) {"},{"lineNumber":332,"author":{"gitID":"hoangduong1607"},"content":"        hide();"},{"lineNumber":333,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":334,"author":{"gitID":"-"},"content":"}"},{"lineNumber":335,"author":{"gitID":"-"},"content":"----"},{"lineNumber":336,"author":{"gitID":"-"},"content":""},{"lineNumber":337,"author":{"gitID":"-"},"content":"To automatically fill input field with chosen word, an `_EventListener_` is attached to each item in the pop-up menu. When an item is chosen, it replaces the last word in input field with the word associated with the item. The code is shown below:"},{"lineNumber":338,"author":{"gitID":"-"},"content":""},{"lineNumber":339,"author":{"gitID":"hoangduong1607"},"content":"[source,java]"},{"lineNumber":340,"author":{"gitID":"hoangduong1607"},"content":"----"},{"lineNumber":341,"author":{"gitID":"hoangduong1607"},"content":"item.setOnAction(event -\u003e commandBox.replaceText(textInputProcessor.replaceLastWord(item.getText())));"},{"lineNumber":342,"author":{"gitID":"hoangduong1607"},"content":"----"},{"lineNumber":343,"author":{"gitID":"-"},"content":""},{"lineNumber":344,"author":{"gitID":"RyanAngJY"},"content":"`_TextInputProcessorUtil_` object `textInputProcessor` is used to handle an operation `replaceLastWord()` for the given text."},{"lineNumber":345,"author":{"gitID":"-"},"content":""},{"lineNumber":346,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design considerations"},{"lineNumber":347,"author":{"gitID":"-"},"content":""},{"lineNumber":348,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Base class of SuggestionsPopUp."},{"lineNumber":349,"author":{"gitID":"-"},"content":""},{"lineNumber":350,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Usage of a `_ContextMenu_`."},{"lineNumber":351,"author":{"gitID":"-"},"content":"** Pros: It is easy to use since `_ContextMenu_` and `_TextArea_` are in the same library `javafx.scene.control`."},{"lineNumber":352,"author":{"gitID":"-"},"content":"** Cons: This is dependent on `_TextArea_` in the `_CommandBox_` class."},{"lineNumber":353,"author":{"gitID":"-"},"content":"* **Alternative 2:** Usage of a `_JPopupMenu_`"},{"lineNumber":354,"author":{"gitID":"-"},"content":"** Pros: There are no pros to this implementation."},{"lineNumber":355,"author":{"gitID":"-"},"content":"** Cons: It requires additional work to make `_JPopupMenu_` compatible with `_TextArea_`."},{"lineNumber":356,"author":{"gitID":"-"},"content":""},{"lineNumber":357,"author":{"gitID":"RyanAngJY"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Abstraction of `_SuggestionsPopUp_`."},{"lineNumber":358,"author":{"gitID":"-"},"content":""},{"lineNumber":359,"author":{"gitID":"RyanAngJY"},"content":"* **Alternative 1 (current choice):** A separate class `_SuggestionsPopUp_`."},{"lineNumber":360,"author":{"gitID":"-"},"content":"** Pros: This is a more intuitive approach since `_SuggestionsPopUp_` is a component in `UI`."},{"lineNumber":361,"author":{"gitID":"-"},"content":"** Cons: It requires extra information to be taken from `_CommandBox_` class."},{"lineNumber":362,"author":{"gitID":"RyanAngJY"},"content":"* **Alternative 2:** An inner class of `_CommandBox_` class."},{"lineNumber":363,"author":{"gitID":"-"},"content":"** Pros: This is easy to implement since it has access to all attributes and methods of `_CommandBox_`."},{"lineNumber":364,"author":{"gitID":"-"},"content":"** Cons: There are limitations to the reusability of this implementation."},{"lineNumber":365,"author":{"gitID":"-"},"content":""},{"lineNumber":366,"author":{"gitID":"RyanAngJY"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Abstraction of `_TextInputProcessorUtil_`."},{"lineNumber":367,"author":{"gitID":"-"},"content":""},{"lineNumber":368,"author":{"gitID":"RyanAngJY"},"content":"* **Alternative 1 (current choice):** A separate class `_TextInputProcessorUtil_`."},{"lineNumber":369,"author":{"gitID":"-"},"content":"** Pros: The common functions are easily used by other classes if needed."},{"lineNumber":370,"author":{"gitID":"-"},"content":"** Cons: There are no cons to this implementation."},{"lineNumber":371,"author":{"gitID":"RyanAngJY"},"content":"* **Alternative 2:** An inner class of `_SuggestionsPopUp_` class."},{"lineNumber":372,"author":{"gitID":"-"},"content":"** Pros: It is convenient to use inside the containing class."},{"lineNumber":373,"author":{"gitID":"-"},"content":"** Cons: There are limitations to the reusability of this implementation."},{"lineNumber":374,"author":{"gitID":"-"},"content":"// end::auto-completion[]"},{"lineNumber":375,"author":{"gitID":"-"},"content":""},{"lineNumber":376,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Changing theme"},{"lineNumber":377,"author":{"gitID":"-"},"content":"// tag::change-theme[]"},{"lineNumber":378,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":379,"author":{"gitID":"-"},"content":""},{"lineNumber":380,"author":{"gitID":"-"},"content":"The command is implemented in the class `_ChangeThemeCommand_`. When the user submits the command to the *`UI`* component, it passes on the command to the *`Logic`* component, which posts a `_ChangeThemeRequestEvent_` to the `_EventsCenter_`. For more details, refer to \u003c\u003cfig-ChangeThemeSD\u003e\u003e."},{"lineNumber":381,"author":{"gitID":"-"},"content":""},{"lineNumber":382,"author":{"gitID":"-"},"content":"[[fig-ChangeThemeSD]]"},{"lineNumber":383,"author":{"gitID":"-"},"content":".Component interactions for *`theme`* command (part 1)"},{"lineNumber":384,"author":{"gitID":"-"},"content":"image::SDforChangeTheme.png[width\u003d\"750\"]"},{"lineNumber":385,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":386,"author":{"gitID":"-"},"content":""},{"lineNumber":387,"author":{"gitID":"-"},"content":"The event is then propagated through the `_EventsCenter_` to the `UI`. The `UI` will call `handleChangeThemeRequestEvent()` to update the theme accordingly. To understand the execution better, refer to \u003c\u003cfig-ChangeThemeEventSD\u003e\u003e."},{"lineNumber":388,"author":{"gitID":"-"},"content":""},{"lineNumber":389,"author":{"gitID":"-"},"content":"[[fig-ChangeThemeEventSD]]"},{"lineNumber":390,"author":{"gitID":"-"},"content":".Component interactions for *`theme`* command (part 2)"},{"lineNumber":391,"author":{"gitID":"-"},"content":"image::SDforChangeThemeEventHandling.png[width\u003d\"500\"]"},{"lineNumber":392,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":393,"author":{"gitID":"-"},"content":""},{"lineNumber":394,"author":{"gitID":"-"},"content":"`handleChangeThemeRequestEvent()` will then log the event trigger and call `handleChangeTheme()`."},{"lineNumber":395,"author":{"gitID":"-"},"content":""},{"lineNumber":396,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":397,"author":{"gitID":"-"},"content":"If the command is called directly from the menu bar, `handleChangeTheme()` will be directly called instead of `handleChangeThemeRequestEvent()`."},{"lineNumber":398,"author":{"gitID":"-"},"content":""},{"lineNumber":399,"author":{"gitID":"-"},"content":"`handleChangeTheme()` gets the current theme from `_UserPref_` then:"},{"lineNumber":400,"author":{"gitID":"-"},"content":""},{"lineNumber":401,"author":{"gitID":"-"},"content":". Changes the main page loaded on the `_BrowserPanel_`."},{"lineNumber":402,"author":{"gitID":"-"},"content":". Changes the style using on the `_Stage_`."},{"lineNumber":403,"author":{"gitID":"-"},"content":""},{"lineNumber":404,"author":{"gitID":"-"},"content":"To understand the interaction between the components, refer to \u003c\u003cfig-ChangeThemeDetailsSD\u003e\u003e:"},{"lineNumber":405,"author":{"gitID":"-"},"content":""},{"lineNumber":406,"author":{"gitID":"-"},"content":"[[fig-ChangeThemeDetailsSD]]"},{"lineNumber":407,"author":{"gitID":"-"},"content":".Component interactions for `handleChangeTheme()`"},{"lineNumber":408,"author":{"gitID":"-"},"content":"image::SDforChangeThemeDetails.png[width\u003d\"500\"]"},{"lineNumber":409,"author":{"gitID":"-"},"content":"[.not-print]"},{"lineNumber":410,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":411,"author":{"gitID":"-"},"content":""},{"lineNumber":412,"author":{"gitID":"-"},"content":"[.not-print]"},{"lineNumber":413,"author":{"gitID":"-"},"content":"Below is the implementation of the two operations:"},{"lineNumber":414,"author":{"gitID":"-"},"content":""},{"lineNumber":415,"author":{"gitID":"-"},"content":"[source,java,role\u003d\"not-print\"]"},{"lineNumber":416,"author":{"gitID":"-"},"content":"----"},{"lineNumber":417,"author":{"gitID":"-"},"content":"public void loadDefaultPage(boolean isGirlTheme) {"},{"lineNumber":418,"author":{"gitID":"-"},"content":"    if (!isLoaded()) {"},{"lineNumber":419,"author":{"gitID":"-"},"content":"        URL defaultPage;"},{"lineNumber":420,"author":{"gitID":"-"},"content":"        if (isGirlTheme) {"},{"lineNumber":421,"author":{"gitID":"-"},"content":"            defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE_GIRL);"},{"lineNumber":422,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":423,"author":{"gitID":"-"},"content":"            defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE_LIGHT);"},{"lineNumber":424,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":425,"author":{"gitID":"-"},"content":"        loadPage(defaultPage.toExternalForm());"},{"lineNumber":426,"author":{"gitID":"-"},"content":"        logger.info(\"BrowserPanel is empty, changed theme and reloaded BrowserPanel.\");"},{"lineNumber":427,"author":{"gitID":"-"},"content":"    } else {"},{"lineNumber":428,"author":{"gitID":"-"},"content":"        logger.info(\"BrowserPanel is not empty, changed theme without reloading BrowserPanel.\");"},{"lineNumber":429,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":430,"author":{"gitID":"-"},"content":"}"},{"lineNumber":431,"author":{"gitID":"-"},"content":"private void loadStyle(boolean darkTheme) {"},{"lineNumber":432,"author":{"gitID":"-"},"content":"    Scene scene \u003d primaryStage.getScene();"},{"lineNumber":433,"author":{"gitID":"-"},"content":"    scene.getStylesheets().clear();"},{"lineNumber":434,"author":{"gitID":"-"},"content":"    if (darkTheme) {"},{"lineNumber":435,"author":{"gitID":"-"},"content":"        scene.getStylesheets().add(MainApp.class.getResource(FXML_FILE_FOLDER + DARK_THEME_CSS).toExternalForm());"},{"lineNumber":436,"author":{"gitID":"-"},"content":"    } else {"},{"lineNumber":437,"author":{"gitID":"-"},"content":"        scene.getStylesheets().add(MainApp.class.getResource(FXML_FILE_FOLDER + LIGHT_THEME_CSS).toExternalForm());"},{"lineNumber":438,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":439,"author":{"gitID":"-"},"content":"    scene.getStylesheets().add(MainApp.class.getResource(FXML_FILE_FOLDER + EXTENSIONS_CSS).toExternalForm());"},{"lineNumber":440,"author":{"gitID":"-"},"content":"    primaryStage.setScene(scene);"},{"lineNumber":441,"author":{"gitID":"-"},"content":"    primaryStage.show();"},{"lineNumber":442,"author":{"gitID":"-"},"content":"}"},{"lineNumber":443,"author":{"gitID":"-"},"content":"----"},{"lineNumber":444,"author":{"gitID":"-"},"content":"// end::change-theme[]"},{"lineNumber":445,"author":{"gitID":"-"},"content":""},{"lineNumber":446,"author":{"gitID":"-"},"content":"// tag::change-theme-consideration[]"},{"lineNumber":447,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design considerations"},{"lineNumber":448,"author":{"gitID":"-"},"content":""},{"lineNumber":449,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Handling of default page in `_BrowserPanel_`."},{"lineNumber":450,"author":{"gitID":"-"},"content":""},{"lineNumber":451,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Reload the default page if there is nothing loaded in `_BrowserPanel_`."},{"lineNumber":452,"author":{"gitID":"-"},"content":"** Pros: This would prevent any previously loaded page from being lost."},{"lineNumber":453,"author":{"gitID":"-"},"content":"** Cons: This approach requires detection for any page loaded in `_BrowserPanel_`, thus is harder to implement."},{"lineNumber":454,"author":{"gitID":"-"},"content":"* **Alternative 2:** Reload the style for the default page."},{"lineNumber":455,"author":{"gitID":"-"},"content":"** Pros: It is possible to keep the status of the `_BrowserPanel_`, in other words, any page loaded may still retain."},{"lineNumber":456,"author":{"gitID":"-"},"content":"** Cons: It is not entirely sure if this implementation is possible."},{"lineNumber":457,"author":{"gitID":"-"},"content":"* **Alternative 3:** Reload the default page."},{"lineNumber":458,"author":{"gitID":"-"},"content":"** Pros: This approach is easy to implement and it indeed was the implementation up to v1.5rc."},{"lineNumber":459,"author":{"gitID":"-"},"content":"** Cons: This causes any page loaded on `_BrowserPanel_` to be lost during the operation."},{"lineNumber":460,"author":{"gitID":"-"},"content":"* **Alternative 4:** Stop using the default page."},{"lineNumber":461,"author":{"gitID":"-"},"content":"** Pros: It is relatively easy to implement."},{"lineNumber":462,"author":{"gitID":"-"},"content":"** Cons: There is no default page to display so we have to find another approach to make `_BrowserPanel_` display something as a placeholder, *without* using a default page."},{"lineNumber":463,"author":{"gitID":"-"},"content":"// end::change-theme-consideration[]"},{"lineNumber":464,"author":{"gitID":"-"},"content":""},{"lineNumber":465,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Cloud storage support"},{"lineNumber":466,"author":{"gitID":"-"},"content":"// tag::cloud-storage[]"},{"lineNumber":467,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":468,"author":{"gitID":"-"},"content":""},{"lineNumber":469,"author":{"gitID":"-"},"content":"The class `_CloudStorageUtil_` contains all the utility methods that are required to upload files and also important data such as filenames and access tokens."},{"lineNumber":470,"author":{"gitID":"-"},"content":"The command `_UploadCommand_` has been added to allow users to upload data in the recipe book onto the cloud."},{"lineNumber":471,"author":{"gitID":"-"},"content":""},{"lineNumber":472,"author":{"gitID":"-"},"content":"`_UploadCommandParser_` takes in and checks the `_String_` filename, adds an XML extension to it before saving it to `_CloudStorageUtil_` and parsing it to `_UploadCommand_`."},{"lineNumber":473,"author":{"gitID":"-"},"content":""},{"lineNumber":474,"author":{"gitID":"RyanAngJY"},"content":"`_UploadCommandParser_` parses the user-input as shown below:"},{"lineNumber":475,"author":{"gitID":"-"},"content":""},{"lineNumber":476,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":477,"author":{"gitID":"-"},"content":"----"},{"lineNumber":478,"author":{"gitID":"-"},"content":"String XmlExtensionFilename \u003d ParserUtil.parseFilename(filename);"},{"lineNumber":479,"author":{"gitID":"-"},"content":"----"},{"lineNumber":480,"author":{"gitID":"-"},"content":"The `parseFilename` method will then call `isValidFilename` to make sure that the user input does not contain characters restricted by Dropbox for filenames."},{"lineNumber":481,"author":{"gitID":"-"},"content":""},{"lineNumber":482,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":483,"author":{"gitID":"-"},"content":"----"},{"lineNumber":484,"author":{"gitID":"-"},"content":"private static final String FILENAME_VALIDATION_REGEX \u003d \"[^\\\\Q\u003c\u003e:/|.?\\\"\\\\*\\\\E\\\\s]+\";"},{"lineNumber":485,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":486,"author":{"gitID":"-"},"content":" * Returns true if a given string is a valid filename."},{"lineNumber":487,"author":{"gitID":"-"},"content":" */"},{"lineNumber":488,"author":{"gitID":"-"},"content":"public static boolean isValidFilename(String test) {"},{"lineNumber":489,"author":{"gitID":"-"},"content":"    return test.matches(FILENAME_VALIDATION_REGEX);"},{"lineNumber":490,"author":{"gitID":"-"},"content":"}"},{"lineNumber":491,"author":{"gitID":"-"},"content":"----"},{"lineNumber":492,"author":{"gitID":"-"},"content":"Because the file is being uploaded to the user\u0027s Dropbox account, they will be prompted to authorize ReciRecipe if it is their first time connecting to Dropbox."},{"lineNumber":493,"author":{"gitID":"-"},"content":"An `_UploadRecipesEvent_` will be created, posted to the `_EventsCenter_` and propagated to the `_BrowserPanel_`. The `handleUploadRecipesEvent()` will then be called and the Dropbox authentication page will open in a system browser."},{"lineNumber":494,"author":{"gitID":"-"},"content":"The component interactions can be seen in \u003c\u003cfig-UploadCommandSD\u003e\u003e below:"},{"lineNumber":495,"author":{"gitID":"-"},"content":""},{"lineNumber":496,"author":{"gitID":"-"},"content":"[[fig-UploadCommandSD]]"},{"lineNumber":497,"author":{"gitID":"-"},"content":".Sequence diagram for *`upload recipebook`* command."},{"lineNumber":498,"author":{"gitID":"-"},"content":"image::UploadCommandSD.PNG[width\u003d\"700\"]"},{"lineNumber":499,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":500,"author":{"gitID":"-"},"content":"After authorization the user will copy and paste the authorization code given."},{"lineNumber":501,"author":{"gitID":"-"},"content":"They can do this using the *`token`* command which takes in and converts the authorization code into a unqiue access token."},{"lineNumber":502,"author":{"gitID":"-"},"content":"This token will then be stored in `_CloudStorageUtil_` for that session."},{"lineNumber":503,"author":{"gitID":"-"},"content":"The `token` command will then invoke the `upload()` method."},{"lineNumber":504,"author":{"gitID":"-"},"content":""},{"lineNumber":505,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":506,"author":{"gitID":"-"},"content":"----"},{"lineNumber":507,"author":{"gitID":"-"},"content":"public static void processAuthorizationCode(String code) {"},{"lineNumber":508,"author":{"gitID":"-"},"content":"    // Converts authorization code to access token"},{"lineNumber":509,"author":{"gitID":"-"},"content":"    DbxAppInfo appInfo \u003d new DbxAppInfo(APP_KEY, APP_SECRET);"},{"lineNumber":510,"author":{"gitID":"-"},"content":"    DbxWebAuth webAuth \u003d new DbxWebAuth(config, appInfo);"},{"lineNumber":511,"author":{"gitID":"-"},"content":"    try {"},{"lineNumber":512,"author":{"gitID":"-"},"content":"        DbxAuthFinish authFinish \u003d webAuth.finishFromCode(code);"},{"lineNumber":513,"author":{"gitID":"-"},"content":"        accessToken \u003d authFinish.getAccessToken();"},{"lineNumber":514,"author":{"gitID":"-"},"content":"    } catch (DbxException e) {"},{"lineNumber":515,"author":{"gitID":"-"},"content":"        throw new AssertionError(UploadCommand.MESSAGE_FAILURE + \" Invalid authorization code\");"},{"lineNumber":516,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":517,"author":{"gitID":"-"},"content":"    upload();"},{"lineNumber":518,"author":{"gitID":"-"},"content":"}"},{"lineNumber":519,"author":{"gitID":"-"},"content":"----"},{"lineNumber":520,"author":{"gitID":"-"},"content":"Since the access token will be saved in the application for the current session, any subsequent calls to the *`upload`* command"},{"lineNumber":521,"author":{"gitID":"-"},"content":"will skip the above `processAuthorizationCode` method and skip straight to the `upload()` method. Hence, there will be no need for the user to use the `token` command again too."},{"lineNumber":522,"author":{"gitID":"-"},"content":""},{"lineNumber":523,"author":{"gitID":"-"},"content":"Furthermore, to overcome the problem with conflicting filenames that already exist in the user\u0027s dropbox, auto-renaming is turned on. This means a (#) will be appended to the filename while uploading."},{"lineNumber":524,"author":{"gitID":"-"},"content":""},{"lineNumber":525,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":526,"author":{"gitID":"-"},"content":"----"},{"lineNumber":527,"author":{"gitID":"-"},"content":"try (InputStream in \u003d new FileInputStream(RECIPE_BOOK_FILE)) {"},{"lineNumber":528,"author":{"gitID":"-"},"content":"        client.files().uploadBuilder(\"/\" + uploadFilename)"},{"lineNumber":529,"author":{"gitID":"-"},"content":"                .withAutorename(true)"},{"lineNumber":530,"author":{"gitID":"-"},"content":"                .uploadAndFinish(in);"},{"lineNumber":531,"author":{"gitID":"-"},"content":"----"},{"lineNumber":532,"author":{"gitID":"-"},"content":"The activity diagram of the command `upload` can be seen in \u003c\u003cfig-UploadCommandAD\u003e\u003e below:"},{"lineNumber":533,"author":{"gitID":"-"},"content":""},{"lineNumber":534,"author":{"gitID":"-"},"content":"[[fig-UploadCommandAD]]"},{"lineNumber":535,"author":{"gitID":"-"},"content":".Activity diagram of *`upload`* command."},{"lineNumber":536,"author":{"gitID":"-"},"content":"image::UploadCommandAD.PNG[width\u003d\"700\"]"},{"lineNumber":537,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":538,"author":{"gitID":"-"},"content":"If it is required, the command `token` will proceed the first `upload` and that activity diagram is shown in \u003c\u003cfig-TokenCommandAD\u003e\u003e below:"},{"lineNumber":539,"author":{"gitID":"-"},"content":""},{"lineNumber":540,"author":{"gitID":"-"},"content":"[[fig-TokenCommandAD]]"},{"lineNumber":541,"author":{"gitID":"-"},"content":".Activity diagram of *`token`* command."},{"lineNumber":542,"author":{"gitID":"-"},"content":"image::TokenCommandAD.PNG[width\u003d\"700\"]"},{"lineNumber":543,"author":{"gitID":"-"},"content":""},{"lineNumber":544,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design considerations"},{"lineNumber":545,"author":{"gitID":"-"},"content":""},{"lineNumber":546,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Handling of the access token."},{"lineNumber":547,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Save it for the current session."},{"lineNumber":548,"author":{"gitID":"-"},"content":"** Pros: It is more convenient as the user does not have to keep logging in to their Dropbox account every time they want to upload."},{"lineNumber":549,"author":{"gitID":"-"},"content":"** Cons: There will be security concerns since there is no security aspect to our application at all."},{"lineNumber":550,"author":{"gitID":"-"},"content":"* **Alternative 2:** One-time usage of the access token."},{"lineNumber":551,"author":{"gitID":"-"},"content":"** Pros: There will be less security issues/concerns."},{"lineNumber":552,"author":{"gitID":"-"},"content":"** Cons: This is very inconvenient as it requires the user to keep logging in to their Dropbox account every time they want to upload."},{"lineNumber":553,"author":{"gitID":"-"},"content":"// end::cloud-storage[]"},{"lineNumber":554,"author":{"gitID":"-"},"content":""},{"lineNumber":555,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":556,"author":{"gitID":"-"},"content":""},{"lineNumber":557,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: *config.json*)."},{"lineNumber":558,"author":{"gitID":"-"},"content":""},{"lineNumber":559,"author":{"gitID":"-"},"content":"// tag::displaying-a-recipe[]"},{"lineNumber":560,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Displaying a recipe"},{"lineNumber":561,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":562,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":563,"author":{"gitID":"-"},"content":""},{"lineNumber":564,"author":{"gitID":"-"},"content":"The text from a selected recipe is always displayed in the `_ResultDisplay_`."},{"lineNumber":565,"author":{"gitID":"-"},"content":""},{"lineNumber":566,"author":{"gitID":"-"},"content":"When a recipe has an embedded URL, the browser panel displays the web page of the URL. Otherwise, it shows a HTML formatted recipe."},{"lineNumber":567,"author":{"gitID":"-"},"content":""},{"lineNumber":568,"author":{"gitID":"-"},"content":"The `_HtmlFormatter_` class is responsible for the HTML formatting of a recipe."},{"lineNumber":569,"author":{"gitID":"-"},"content":""},{"lineNumber":570,"author":{"gitID":"-"},"content":"// end::displaying-a-recipe[]"},{"lineNumber":571,"author":{"gitID":"-"},"content":""},{"lineNumber":572,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Downloading an image"},{"lineNumber":573,"author":{"gitID":"-"},"content":""},{"lineNumber":574,"author":{"gitID":"-"},"content":"// tag::download-image[]"},{"lineNumber":575,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":576,"author":{"gitID":"-"},"content":""},{"lineNumber":577,"author":{"gitID":"-"},"content":"When an *`add`* or *`edit`* command has an image field input, that input will be checked if it is a valid image URL using `_ImageDownloader_`."},{"lineNumber":578,"author":{"gitID":"-"},"content":"[.not-print]"},{"lineNumber":579,"author":{"gitID":"-"},"content":"Below is the implementation of this method:"},{"lineNumber":580,"author":{"gitID":"-"},"content":""},{"lineNumber":581,"author":{"gitID":"-"},"content":"[source,java,role\u003d\"not-print\"]"},{"lineNumber":582,"author":{"gitID":"-"},"content":"----"},{"lineNumber":583,"author":{"gitID":"-"},"content":"public static boolean isValidImageUrl(String testUrl) {"},{"lineNumber":584,"author":{"gitID":"-"},"content":"    URL imageUrl;"},{"lineNumber":585,"author":{"gitID":"-"},"content":"    try {"},{"lineNumber":586,"author":{"gitID":"-"},"content":"        imageUrl \u003d new URL(testUrl);"},{"lineNumber":587,"author":{"gitID":"-"},"content":"    } catch (MalformedURLException e) {"},{"lineNumber":588,"author":{"gitID":"-"},"content":"        return false;"},{"lineNumber":589,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":590,"author":{"gitID":"-"},"content":"    BufferedImage image;"},{"lineNumber":591,"author":{"gitID":"-"},"content":"    try {"},{"lineNumber":592,"author":{"gitID":"-"},"content":"        image \u003d ImageIO.read(imageUrl);"},{"lineNumber":593,"author":{"gitID":"-"},"content":"    } catch (IOException ioe) {"},{"lineNumber":594,"author":{"gitID":"-"},"content":"        LogsCenter.getLogger(Image.class).warning(\"Cannot get image from \""},{"lineNumber":595,"author":{"gitID":"-"},"content":"                + testUrl + \". It is likely the app is not connected to the Internet.\");"},{"lineNumber":596,"author":{"gitID":"-"},"content":"        return false;"},{"lineNumber":597,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":598,"author":{"gitID":"-"},"content":"    return image !\u003d null;"},{"lineNumber":599,"author":{"gitID":"-"},"content":"}"},{"lineNumber":600,"author":{"gitID":"-"},"content":"----"},{"lineNumber":601,"author":{"gitID":"-"},"content":""},{"lineNumber":602,"author":{"gitID":"-"},"content":"If the input is indeed a URL that links to an image, `_ImageDownloader_` will go through several steps to download the image and set the new image path (\u003c\u003cfig-DownloadImageAD\u003e\u003e)."},{"lineNumber":603,"author":{"gitID":"-"},"content":""},{"lineNumber":604,"author":{"gitID":"-"},"content":"[[fig-DownloadImageAD]]"},{"lineNumber":605,"author":{"gitID":"-"},"content":".Activity diagram of an image downloading process"},{"lineNumber":606,"author":{"gitID":"-"},"content":"image::DownloadImageAD.png[width\u003d\"900\"]"},{"lineNumber":607,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":608,"author":{"gitID":"-"},"content":""},{"lineNumber":609,"author":{"gitID":"-"},"content":"Why do we need checksum calculation? The `_BufferedImage_` object created by `_ImageIO_` does not guarantee the same return value for `hashCode()` so we cannot use it as a file name. However, the same image data will certainly return the same \u003c\u003cMD5, MD5\u003e\u003e checksum. Therefore, using MD5 checksum as the file name will guarantee no image duplication. +"},{"lineNumber":610,"author":{"gitID":"-"},"content":"[.not-print]"},{"lineNumber":611,"author":{"gitID":"-"},"content":"Below is the implementation of `downloadImage()`:"},{"lineNumber":612,"author":{"gitID":"-"},"content":""},{"lineNumber":613,"author":{"gitID":"-"},"content":"[source,java,role\u003d\"not-print\"]"},{"lineNumber":614,"author":{"gitID":"-"},"content":"----"},{"lineNumber":615,"author":{"gitID":"-"},"content":"public static String downloadImage(String imageUrlString) {"},{"lineNumber":616,"author":{"gitID":"-"},"content":"    assert isValidImageUrl(imageUrlString);"},{"lineNumber":617,"author":{"gitID":"-"},"content":""},{"lineNumber":618,"author":{"gitID":"-"},"content":"    try {"},{"lineNumber":619,"author":{"gitID":"-"},"content":"        byte[] imageData \u003d getImageData(imageUrlString);"},{"lineNumber":620,"author":{"gitID":"-"},"content":"        String md5Checksum \u003d calculateMd5Checksum(imageData);"},{"lineNumber":621,"author":{"gitID":"-"},"content":"        String filePath \u003d getImageFilePathFromImageName(md5Checksum);"},{"lineNumber":622,"author":{"gitID":"-"},"content":"        File file \u003d prepareImageFile(filePath);"},{"lineNumber":623,"author":{"gitID":"-"},"content":"        if (file !\u003d null) {"},{"lineNumber":624,"author":{"gitID":"-"},"content":"            writeDataToFile(imageData, file);"},{"lineNumber":625,"author":{"gitID":"-"},"content":"            return filePath;"},{"lineNumber":626,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":627,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":628,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":629,"author":{"gitID":"-"},"content":"    /* Exceptions catching */"},{"lineNumber":630,"author":{"gitID":"-"},"content":"----"},{"lineNumber":631,"author":{"gitID":"-"},"content":""},{"lineNumber":632,"author":{"gitID":"-"},"content":"For the detailed implementation of each step, please see link:{repoURL}/src/main/java/seedu/recipe/storage/ImageDownloader.java[`ImageDownloader.java`]."},{"lineNumber":633,"author":{"gitID":"-"},"content":"// end::download-image[]"},{"lineNumber":634,"author":{"gitID":"-"},"content":""},{"lineNumber":635,"author":{"gitID":"-"},"content":"// tag::download-image-consideration[]"},{"lineNumber":636,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design considerations"},{"lineNumber":637,"author":{"gitID":"-"},"content":""},{"lineNumber":638,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Image file name."},{"lineNumber":639,"author":{"gitID":"-"},"content":""},{"lineNumber":640,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use MD5 of the image data."},{"lineNumber":641,"author":{"gitID":"-"},"content":"** Pros: MD5 can ensure that there won\u0027t be duplicates of an image."},{"lineNumber":642,"author":{"gitID":"-"},"content":"** Cons: MD5 is significantly more computationally expensive compared to a simple `hashCode()`."},{"lineNumber":643,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `hashCode()` of the `_BufferedImage_` object."},{"lineNumber":644,"author":{"gitID":"-"},"content":"** Pros: This approach is simple, fast, easy to implement."},{"lineNumber":645,"author":{"gitID":"-"},"content":"** Cons: Due to the way `hashCode()` works, different run configurations will make `hashCode()` return different values. Therefore, it is always certain that the same image from one URL will be downloaded several times into several duplicates."},{"lineNumber":646,"author":{"gitID":"-"},"content":"* **Alternative 3:** Use the recipe name."},{"lineNumber":647,"author":{"gitID":"-"},"content":"** Pros: This is by far the most intuitive approach."},{"lineNumber":648,"author":{"gitID":"-"},"content":"** Cons: However, this approach looks a lot easier than it seems. Furthermore, it would be hard to update the file name if the recipe name is changed."},{"lineNumber":649,"author":{"gitID":"-"},"content":"// end::download-image-consideration[]"},{"lineNumber":650,"author":{"gitID":"-"},"content":""},{"lineNumber":651,"author":{"gitID":"RyanAngJY"},"content":"// tag::embedded-url[]"},{"lineNumber":652,"author":{"gitID":"RyanAngJY"},"content":"\u003d\u003d\u003d Embedded URL"},{"lineNumber":653,"author":{"gitID":"-"},"content":""},{"lineNumber":654,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":655,"author":{"gitID":"-"},"content":""},{"lineNumber":656,"author":{"gitID":"RyanAngJY"},"content":"The URL field is an optional field in the *`add`* command and can be omitted. In the case when a URL is embedded to a recipe, the `_BrowserPanel_` will load the given URL."},{"lineNumber":657,"author":{"gitID":"-"},"content":""},{"lineNumber":658,"author":{"gitID":"RyanAngJY"},"content":"As seen below, the URL is not a required parameter during the checking of prefixes in an *`add`* command."},{"lineNumber":659,"author":{"gitID":"-"},"content":""},{"lineNumber":660,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":661,"author":{"gitID":"-"},"content":"----"},{"lineNumber":662,"author":{"gitID":"RyanAngJY"},"content":"if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_INSTRUCTION, PREFIX_PREPARATION_TIME,"},{"lineNumber":663,"author":{"gitID":"RyanAngJY"},"content":"    PREFIX_INGREDIENT) || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":664,"author":{"gitID":"-"},"content":"    throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":665,"author":{"gitID":"-"},"content":"}"},{"lineNumber":666,"author":{"gitID":"-"},"content":"----"},{"lineNumber":667,"author":{"gitID":"-"},"content":""},{"lineNumber":668,"author":{"gitID":"RyanAngJY"},"content":"In the case when a URL is not added to a recipe, a null reference \u0027-\u0027 is put as a placeholder when parsing the URL field, unlike tag labels. This helps with identifying recipes that do not have embedded URLs."},{"lineNumber":669,"author":{"gitID":"-"},"content":""},{"lineNumber":670,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":671,"author":{"gitID":"-"},"content":"----"},{"lineNumber":672,"author":{"gitID":"RyanAngJY"},"content":"public static Optional\u003cUrl\u003e parseUrlOnInitialAdd(Optional\u003cString\u003e url) throws IllegalValueException {"},{"lineNumber":673,"author":{"gitID":"RyanAngJY"},"content":"    requireNonNull(url);"},{"lineNumber":674,"author":{"gitID":"RyanAngJY"},"content":"    return url.isPresent() ? Optional.of(parseUrl(url.get())) : Optional.of(getNullReferenceUrl());"},{"lineNumber":675,"author":{"gitID":"-"},"content":"}"},{"lineNumber":676,"author":{"gitID":"-"},"content":"----"},{"lineNumber":677,"author":{"gitID":"-"},"content":""},{"lineNumber":678,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design considerations"},{"lineNumber":679,"author":{"gitID":"-"},"content":""},{"lineNumber":680,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of optional property."},{"lineNumber":681,"author":{"gitID":"-"},"content":""},{"lineNumber":682,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a placeholder for omitted URL."},{"lineNumber":683,"author":{"gitID":"-"},"content":"** Pros: A simple implementation can be used as a reference by new developers for creating optional fields. The interaction with `_BrowserPanel_` requires more control over the status of a recipe\u0027s URL property."},{"lineNumber":684,"author":{"gitID":"-"},"content":"** Cons: The `_Recipe_` class may contain unnecessary variables."},{"lineNumber":685,"author":{"gitID":"-"},"content":"* **Alternative 2:** Store URL property in the same fashion as tag labels."},{"lineNumber":686,"author":{"gitID":"-"},"content":"** Pros: The `_Recipe_` class has better separation of optional and compulsory properties."},{"lineNumber":687,"author":{"gitID":"-"},"content":"** Cons: The more complex implementation may confuse new developers, and the interaction with other components may become needlessly complex."},{"lineNumber":688,"author":{"gitID":"-"},"content":""},{"lineNumber":689,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Checking for URL validity."},{"lineNumber":690,"author":{"gitID":"-"},"content":""},{"lineNumber":691,"author":{"gitID":"-"},"content":"* **Alternative 1:** Ping the given URL to check if the URL is valid."},{"lineNumber":692,"author":{"gitID":"-"},"content":"** Pros: Ensures that all embedded URL are loadable on the browser panel."},{"lineNumber":693,"author":{"gitID":"-"},"content":"** Cons: Adding a URL requires Internet connection. Otherwise, a valid URL may be considered invalid as it cannot be pinged."},{"lineNumber":694,"author":{"gitID":"-"},"content":"* **Alternative 2 (current choice):** Check if given URL follows standard URL format (eg. starts with https://)."},{"lineNumber":695,"author":{"gitID":"-"},"content":"** Pros: User has no need for Internet connection to add a valid URL."},{"lineNumber":696,"author":{"gitID":"-"},"content":"** Cons: User is responsible for ensuring URL is loadable on a browser."},{"lineNumber":697,"author":{"gitID":"-"},"content":"// end::embedded-url[]"},{"lineNumber":698,"author":{"gitID":"-"},"content":""},{"lineNumber":699,"author":{"gitID":"RyanAngJY"},"content":"// tag::facebook-compatibility[]"},{"lineNumber":700,"author":{"gitID":"RyanAngJY"},"content":"\u003d\u003d\u003d Facebook compatibility"},{"lineNumber":701,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":702,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":703,"author":{"gitID":"RyanAngJY"},"content":"The *`share`* command is implemented in the `_ShareCommand_` class. On command execution, a new `_ShareRecipeEvent_` is created (with parameters index and recipe) and posted to the `_EventsCenter_`."},{"lineNumber":704,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":705,"author":{"gitID":"RyanAngJY"},"content":"The event is then propagated through the `_EventsCenter_` to the `_BrowserPanel_`, which is supported by the `_FacebookHandler_` class (contains methods for Facebook integration and authentication)."},{"lineNumber":706,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":707,"author":{"gitID":"-"},"content":"The `_BrowserPanel_` will call `handleShareRecipeEvent()` and update the web view to show the Facebook authentication page. The recipe name, ingredients, and instructions, are also formatted and copied to the clipboard. Shown below in \u003c\u003cfig-ShareCommandSD\u003e\u003e is the component interactions for a *`share`* command."},{"lineNumber":708,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":709,"author":{"gitID":"-"},"content":"[[fig-ShareCommandSD]]"},{"lineNumber":710,"author":{"gitID":"-"},"content":".Component interactions for *`share 1`* command"},{"lineNumber":711,"author":{"gitID":"-"},"content":"image::SDforShareCommand.jpg[width\u003d\"700\"]"},{"lineNumber":712,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":713,"author":{"gitID":"RyanAngJY"},"content":"The `_recipe_` class handles the formatting of the recipe text before it is copied to the clipboard:"},{"lineNumber":714,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":715,"author":{"gitID":"RyanAngJY"},"content":"[source,java]"},{"lineNumber":716,"author":{"gitID":"RyanAngJY"},"content":"----"},{"lineNumber":717,"author":{"gitID":"RyanAngJY"},"content":"public String getTextFormattedRecipe() {"},{"lineNumber":718,"author":{"gitID":"RyanAngJY"},"content":"    return NAME_HEADER + getName() + LINE_BREAK"},{"lineNumber":719,"author":{"gitID":"RyanAngJY"},"content":"            + INGREDIENTS_HEADER + getIngredient() + LINE_BREAK"},{"lineNumber":720,"author":{"gitID":"RyanAngJY"},"content":"            + INSTRUCTIONS_HEADER + getInstruction() + LINE_BREAK;"},{"lineNumber":721,"author":{"gitID":"RyanAngJY"},"content":"}"},{"lineNumber":722,"author":{"gitID":"RyanAngJY"},"content":"----"},{"lineNumber":723,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":724,"author":{"gitID":"RyanAngJY"},"content":"The method for copying a string to the clipboard is implemented in the `_UiUtil_` class. This makes the method reusable by other UI classes."},{"lineNumber":725,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":726,"author":{"gitID":"RyanAngJY"},"content":"[source,java]"},{"lineNumber":727,"author":{"gitID":"RyanAngJY"},"content":"----"},{"lineNumber":728,"author":{"gitID":"-"},"content":"public static void copyToClipboard(String string) {"},{"lineNumber":729,"author":{"gitID":"RyanAngJY"},"content":"    Toolkit toolkit \u003d Toolkit.getDefaultToolkit();"},{"lineNumber":730,"author":{"gitID":"RyanAngJY"},"content":"    Clipboard clipboard \u003d toolkit.getSystemClipboard();"},{"lineNumber":731,"author":{"gitID":"RyanAngJY"},"content":"    StringSelection stringSelection \u003d new StringSelection(string);"},{"lineNumber":732,"author":{"gitID":"RyanAngJY"},"content":"    clipboard.setContents(stringSelection, null);"},{"lineNumber":733,"author":{"gitID":"RyanAngJY"},"content":"}"},{"lineNumber":734,"author":{"gitID":"RyanAngJY"},"content":"----"},{"lineNumber":735,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":736,"author":{"gitID":"RyanAngJY"},"content":"Upon logging in, the User will be shown a feed dialog with the embedded URL of the recipe. The user may choose to input any text into the post (eg. pasting the copied recipe from clipboard). The User then has to manually click \"post\" before an actual Facebook post is made."},{"lineNumber":737,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":738,"author":{"gitID":"-"},"content":"The `_BrowserPanel_` will be updated to show the Facebook feed of the User. The activity diagram below (\u003c\u003cfig-ShareCommandAD\u003e\u003e) depicts the execution flow of the *`share`* command."},{"lineNumber":739,"author":{"gitID":"-"},"content":""},{"lineNumber":740,"author":{"gitID":"-"},"content":"[[fig-ShareCommandAD]]"},{"lineNumber":741,"author":{"gitID":"-"},"content":".Activity Diagram for *`share`* command"},{"lineNumber":742,"author":{"gitID":"-"},"content":"image::ADforShareCommand.jpg[width\u003d\"800\"]"},{"lineNumber":743,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":744,"author":{"gitID":"-"},"content":""},{"lineNumber":745,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design considerations"},{"lineNumber":746,"author":{"gitID":"-"},"content":""},{"lineNumber":747,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of Facebook sharing."},{"lineNumber":748,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":749,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use a feed dialog."},{"lineNumber":750,"author":{"gitID":"-"},"content":"** Pros: The user has more control over what is posted on their Facebook wall, and the implementation is easier to maintain."},{"lineNumber":751,"author":{"gitID":"-"},"content":"** Cons: The user has to take more steps to successfully make a post (paste recipe onto post, click \"post\")."},{"lineNumber":752,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use RestFB API."},{"lineNumber":753,"author":{"gitID":"-"},"content":"** Pros: The recipe will be posted immediately on the user\u0027s Facebook wall using the *`share`* command. The user need not manually paste the recipe from the clipboard onto the post."},{"lineNumber":754,"author":{"gitID":"-"},"content":"** Cons: The user *must* manually obtain their Facebook access key and input it into the application - this may raise security concerns (Facebook does not allow automatic posting of text even if permission is given by the user upon log in)."},{"lineNumber":755,"author":{"gitID":"RyanAngJY"},"content":"// end::facebook-compatibility[]"},{"lineNumber":756,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":757,"author":{"gitID":"-"},"content":"// tag::group-command[]"},{"lineNumber":758,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Grouping recipes"},{"lineNumber":759,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":760,"author":{"gitID":"-"},"content":""},{"lineNumber":761,"author":{"gitID":"-"},"content":"Group is not a new object, it is a hidden attribute of a recipe. Each recipe has a list of all groups that the recipe is a member."},{"lineNumber":762,"author":{"gitID":"-"},"content":""},{"lineNumber":763,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":764,"author":{"gitID":"-"},"content":"----"},{"lineNumber":765,"author":{"gitID":"-"},"content":"    private final Set\u003cGroupName\u003e groupNames;"},{"lineNumber":766,"author":{"gitID":"-"},"content":"----"},{"lineNumber":767,"author":{"gitID":"-"},"content":""},{"lineNumber":768,"author":{"gitID":"-"},"content":"`_GroupName_` is similar to `_Name_`, but it is used for group, not for recipe."},{"lineNumber":769,"author":{"gitID":"-"},"content":""},{"lineNumber":770,"author":{"gitID":"-"},"content":"When user creates a group, all recipes with indexes given by user will be modified. The group name provided by user will be added to list of groups in those recipes. It is implemented as below:"},{"lineNumber":771,"author":{"gitID":"-"},"content":""},{"lineNumber":772,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":773,"author":{"gitID":"-"},"content":"----"},{"lineNumber":774,"author":{"gitID":"-"},"content":"        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredRecipeList();"},{"lineNumber":775,"author":{"gitID":"-"},"content":""},{"lineNumber":776,"author":{"gitID":"-"},"content":"        for (Index index : targetIndices) {"},{"lineNumber":777,"author":{"gitID":"-"},"content":"            if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":778,"author":{"gitID":"-"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"},{"lineNumber":779,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":780,"author":{"gitID":"-"},"content":"            Recipe recipe \u003d model.getFilteredRecipeList().get(index.getZeroBased());"},{"lineNumber":781,"author":{"gitID":"-"},"content":"            recipe.addNewGroup(groupName);"},{"lineNumber":782,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":783,"author":{"gitID":"-"},"content":"----"},{"lineNumber":784,"author":{"gitID":"-"},"content":""},{"lineNumber":785,"author":{"gitID":"-"},"content":"As the result of this implementation, when user creates a group that has the same name as an existing group, recipes will be added into existing group, instead of creating a new group and replace all the recipes."},{"lineNumber":786,"author":{"gitID":"-"},"content":""},{"lineNumber":787,"author":{"gitID":"-"},"content":"*_This is a feature, not a bug!_* (Please refer to section below for more details.)"},{"lineNumber":788,"author":{"gitID":"-"},"content":""},{"lineNumber":789,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design considerations"},{"lineNumber":790,"author":{"gitID":"-"},"content":""},{"lineNumber":791,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Effects when create a duplicate group."},{"lineNumber":792,"author":{"gitID":"-"},"content":""},{"lineNumber":793,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Recipes are added to existing group."},{"lineNumber":794,"author":{"gitID":"-"},"content":"** Pros: This makes the application more flexible as users can create a group and update a group with a single command."},{"lineNumber":795,"author":{"gitID":"-"},"content":"** Cons: It might create confusion for users who do not read _User Guide_ carefully."},{"lineNumber":796,"author":{"gitID":"-"},"content":"* **Alternative 2:** No change. Display a message to inform users that the group exists."},{"lineNumber":797,"author":{"gitID":"-"},"content":"** Pros: This gives users the most intuitive behavior of the command."},{"lineNumber":798,"author":{"gitID":"-"},"content":"** Cons: There are only limited operations with groups, if no additional commands are implemented."},{"lineNumber":799,"author":{"gitID":"-"},"content":"// end::group-command[]"},{"lineNumber":800,"author":{"gitID":"-"},"content":""},{"lineNumber":801,"author":{"gitID":"-"},"content":"// tag::inserting-an-image[]"},{"lineNumber":802,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Inserting an image"},{"lineNumber":803,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":804,"author":{"gitID":"-"},"content":""},{"lineNumber":805,"author":{"gitID":"-"},"content":"The image field is an optional field in the *`add`* command and can be omitted. A User can add an image to a recipe by inserting the absolute pathname of the image into the image field. The pathname must reference to a valid image file."},{"lineNumber":806,"author":{"gitID":"-"},"content":""},{"lineNumber":807,"author":{"gitID":"-"},"content":"An `_ImageView_` has been inserted into RecipeListCard.fxml so that the image can also be displayed on the recipe card. The image displayed in the `_ImageView_` is set in the `_RecipeCard_` class, which is the controller for the FXML file. This method is shown below:"},{"lineNumber":808,"author":{"gitID":"-"},"content":""},{"lineNumber":809,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":810,"author":{"gitID":"-"},"content":"----"},{"lineNumber":811,"author":{"gitID":"-"},"content":"private void setImageView(ImageView imageView) {"},{"lineNumber":812,"author":{"gitID":"-"},"content":"    if (recipe.isNullImage()) {"},{"lineNumber":813,"author":{"gitID":"-"},"content":"        return;"},{"lineNumber":814,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":815,"author":{"gitID":"-"},"content":"    try {"},{"lineNumber":816,"author":{"gitID":"-"},"content":"        FileInputStream input \u003d new FileInputStream(recipe.getImage().toString());"},{"lineNumber":817,"author":{"gitID":"-"},"content":"        Image image \u003d new Image(input);"},{"lineNumber":818,"author":{"gitID":"-"},"content":"        imageView.setImage(image);"},{"lineNumber":819,"author":{"gitID":"-"},"content":"    } catch (IOException exception) {"},{"lineNumber":820,"author":{"gitID":"-"},"content":"        System.out.println(\"File not found\");"},{"lineNumber":821,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":822,"author":{"gitID":"-"},"content":"}"},{"lineNumber":823,"author":{"gitID":"-"},"content":"----"},{"lineNumber":824,"author":{"gitID":"-"},"content":""},{"lineNumber":825,"author":{"gitID":"-"},"content":"In order to support storage of the added images, an `_ImageStorage_` class has been added. This class is responsible for storing image files into the \"data/images\" folder whenever the RecipeBook is saved."},{"lineNumber":826,"author":{"gitID":"-"},"content":""},{"lineNumber":827,"author":{"gitID":"-"},"content":"Once the images have been stored, the image references in each recipe is set to reference the stored images rather than the original absolute pathname provided by the User."},{"lineNumber":828,"author":{"gitID":"-"},"content":""},{"lineNumber":829,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":830,"author":{"gitID":"-"},"content":"----"},{"lineNumber":831,"author":{"gitID":"RyanAngJY"},"content":"public static void saveAllImageFiles(ReadOnlyRecipeBook recipeBook, String filePath) throws IOException {"},{"lineNumber":832,"author":{"gitID":"RyanAngJY"},"content":"    String imageFolderPath \u003d filePath.replaceAll(RECIPE_BOOK_FILENAME, IMAGE_FOLDER);"},{"lineNumber":833,"author":{"gitID":"RyanAngJY"},"content":"    File imageFolder \u003d new File(imageFolderPath);"},{"lineNumber":834,"author":{"gitID":"RyanAngJY"},"content":"    FileUtil.createDirs(imageFolder);"},{"lineNumber":835,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":836,"author":{"gitID":"RyanAngJY"},"content":"    for (int i \u003d 0; i \u003c recipeBook.getRecipeList().size(); i++) {"},{"lineNumber":837,"author":{"gitID":"RyanAngJY"},"content":"        Image recipeImage \u003d recipeBook.getRecipeList().get(i).getImage();"},{"lineNumber":838,"author":{"gitID":"RyanAngJY"},"content":"        saveImageFile(recipeImage.toString(), imageFolderPath);"},{"lineNumber":839,"author":{"gitID":"RyanAngJY"},"content":"        recipeImage.setImageToInternalReference();"},{"lineNumber":840,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":841,"author":{"gitID":"RyanAngJY"},"content":"}"},{"lineNumber":842,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":843,"author":{"gitID":"-"},"content":"public static void saveImageFile(String imagePath, String imageFolderPath) {"},{"lineNumber":844,"author":{"gitID":"RyanAngJY"},"content":"    try {"},{"lineNumber":845,"author":{"gitID":"RyanAngJY"},"content":"        File imageToSave \u003d new File(imagePath);"},{"lineNumber":846,"author":{"gitID":"RyanAngJY"},"content":"        File pathToNewImage \u003d new File(imageFolderPath + imageToSave.getName());"},{"lineNumber":847,"author":{"gitID":"RyanAngJY"},"content":"        Files.copy(imageToSave.toPath(), pathToNewImage.toPath(), REPLACE_EXISTING);"},{"lineNumber":848,"author":{"gitID":"RyanAngJY"},"content":"    } catch (IOException e) {"},{"lineNumber":849,"author":{"gitID":"-"},"content":"        LogsCenter.getLogger(ImageStorage.class).warning(WARNING_UNABLE_TO_SAVE_IMAGE);"},{"lineNumber":850,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":851,"author":{"gitID":"-"},"content":"}"},{"lineNumber":852,"author":{"gitID":"-"},"content":"----"},{"lineNumber":853,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":854,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design considerations"},{"lineNumber":855,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":856,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of inserting an image."},{"lineNumber":857,"author":{"gitID":"-"},"content":""},{"lineNumber":858,"author":{"gitID":"-"},"content":"* **Alternative 1 :** Drag and drop an image onto the GUI."},{"lineNumber":859,"author":{"gitID":"-"},"content":"** Pros: This implementation is more intuitive for the user as there is no need to deal with image paths."},{"lineNumber":860,"author":{"gitID":"-"},"content":"** Cons: It deviates from the idea of a Command Line Interface application."},{"lineNumber":861,"author":{"gitID":"-"},"content":"* **Alternative 2 (current choice):** Insert the absolute image path during an *`add`* command."},{"lineNumber":862,"author":{"gitID":"-"},"content":"** Pros: It ensures that the application still uses Command Line Interface for important operations without the need for a mouse"},{"lineNumber":863,"author":{"gitID":"-"},"content":"** Cons: The user may take a significant amount of time to type out the image path."},{"lineNumber":864,"author":{"gitID":"-"},"content":""},{"lineNumber":865,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Image storage."},{"lineNumber":866,"author":{"gitID":"-"},"content":""},{"lineNumber":867,"author":{"gitID":"-"},"content":"* **Alternative 1 :** Reference the actual image file stored in the user\u0027s computer."},{"lineNumber":868,"author":{"gitID":"-"},"content":"** Pros: It is easier to implement as there is no need to deal with internal storage management."},{"lineNumber":869,"author":{"gitID":"-"},"content":"** Cons: The user may delete the original image, resulting in a missing image in the application."},{"lineNumber":870,"author":{"gitID":"-"},"content":"* **Alternative 2 (current choice):** Store the images in the data folder of the application itself."},{"lineNumber":871,"author":{"gitID":"-"},"content":"** Pros: The user can safely delete image files on his/her computer without affecting the stored images in the application. The application is not dependant on the user\u0027s computer state."},{"lineNumber":872,"author":{"gitID":"-"},"content":"** Cons: It makes the storage component slightly more complicated."},{"lineNumber":873,"author":{"gitID":"-"},"content":""},{"lineNumber":874,"author":{"gitID":"-"},"content":"// end::inserting-an-image[]"},{"lineNumber":875,"author":{"gitID":"-"},"content":""},{"lineNumber":876,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Keyboard shortcuts"},{"lineNumber":877,"author":{"gitID":"-"},"content":"// tag::keyboard-shortcut[]"},{"lineNumber":878,"author":{"gitID":"-"},"content":"[[keyboard-shortcut]]"},{"lineNumber":879,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":880,"author":{"gitID":"-"},"content":""},{"lineNumber":881,"author":{"gitID":"-"},"content":"Currently, only `_CommandBox_` accepts keyboard shortcuts (`_MenuItem_` accelerators excluded). All shortcuts are stored in the `_KeyboardShortcutsMapping_` class inside the `UI` component. `_CommandBox_` listens for key combinations and executes actions mapped to these key presses, which are defined in the `handleKeyPress()` method as shown below:"},{"lineNumber":882,"author":{"gitID":"-"},"content":""},{"lineNumber":883,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":884,"author":{"gitID":"-"},"content":"----"},{"lineNumber":885,"author":{"gitID":"-"},"content":"private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":886,"author":{"gitID":"-"},"content":"    if (COMMAND_SUBMISSION.match(keyEvent)) {"},{"lineNumber":887,"author":{"gitID":"-"},"content":"        keyEvent.consume();"},{"lineNumber":888,"author":{"gitID":"-"},"content":"        submitCommand();"},{"lineNumber":889,"author":{"gitID":"-"},"content":"    } else if (LAST_COMMAND.match(keyEvent)) {"},{"lineNumber":890,"author":{"gitID":"-"},"content":"        keyEvent.consume();"},{"lineNumber":891,"author":{"gitID":"-"},"content":"        navigateToPreviousInput();"},{"lineNumber":892,"author":{"gitID":"-"},"content":"    } else if (NEXT_COMMAND.match(keyEvent)) {"},{"lineNumber":893,"author":{"gitID":"-"},"content":"        keyEvent.consume();"},{"lineNumber":894,"author":{"gitID":"-"},"content":"        navigateToNextInput();"},{"lineNumber":895,"author":{"gitID":"-"},"content":"    } else if (NEW_LINE_IN_COMMAND.match(keyEvent)) {"},{"lineNumber":896,"author":{"gitID":"-"},"content":"        keyEvent.consume();"},{"lineNumber":897,"author":{"gitID":"-"},"content":"        createNewLine();"},{"lineNumber":898,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":899,"author":{"gitID":"-"},"content":"    // Can have more mappings"},{"lineNumber":900,"author":{"gitID":"-"},"content":"}"},{"lineNumber":901,"author":{"gitID":"-"},"content":"----"},{"lineNumber":902,"author":{"gitID":"-"},"content":""},{"lineNumber":903,"author":{"gitID":"-"},"content":"As seen from above, all key combinations implemented consume the default effect of the combinations. However, this is not a must as there may be future mappings that do not require consuming the `_KeyEvent_`."},{"lineNumber":904,"author":{"gitID":"-"},"content":"// end::keyboard-shortcut[]"},{"lineNumber":905,"author":{"gitID":"-"},"content":""},{"lineNumber":906,"author":{"gitID":"-"},"content":"// tag::keyboard-shortcut-consideration[]"},{"lineNumber":907,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design considerations"},{"lineNumber":908,"author":{"gitID":"-"},"content":""},{"lineNumber":909,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Location of the shortcuts."},{"lineNumber":910,"author":{"gitID":"-"},"content":""},{"lineNumber":911,"author":{"gitID":"RyanAngJY"},"content":"* **Alternative 1 (current choice):** Store in the `_KeyboardShortcutsMapping_` class."},{"lineNumber":912,"author":{"gitID":"-"},"content":"** Pros: There is good modularity, making it easier to keep track of the mappings."},{"lineNumber":913,"author":{"gitID":"-"},"content":"** Cons: The shortcuts have to be imported to be used."},{"lineNumber":914,"author":{"gitID":"RyanAngJY"},"content":"* **Alternative 2:** Store in the `_CommandBox_` class."},{"lineNumber":915,"author":{"gitID":"-"},"content":"** Pros: There is no need for imports. Furthermore, it is possible to declare new mappings on the run and use it directly in the `_CommandBox_`."},{"lineNumber":916,"author":{"gitID":"-"},"content":"** Cons: It is impossible to use them if we want to implement shortcuts for other UI components or globally."},{"lineNumber":917,"author":{"gitID":"-"},"content":"// end::keyboard-shortcut-consideration[]"},{"lineNumber":918,"author":{"gitID":"-"},"content":""},{"lineNumber":919,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":920,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":921,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":922,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `_LogsCenter_` class is used to manage the logging levels and logging destinations:"},{"lineNumber":923,"author":{"gitID":"-"},"content":""},{"lineNumber":924,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (see \u003c\u003cImplementation-Configuration\u003e\u003e)."},{"lineNumber":925,"author":{"gitID":"-"},"content":"* The `_Logger_` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level."},{"lineNumber":926,"author":{"gitID":"-"},"content":"* Currently log messages are printed through the console and to a _.log_ file."},{"lineNumber":927,"author":{"gitID":"-"},"content":""},{"lineNumber":928,"author":{"gitID":"-"},"content":"We have four logging levels:"},{"lineNumber":929,"author":{"gitID":"-"},"content":""},{"lineNumber":930,"author":{"gitID":"-"},"content":"* *SEVERE*: Critical problems which may terminate the application."},{"lineNumber":931,"author":{"gitID":"-"},"content":"* *WARNING*: Problems that need some attention but not severe enough for the app to terminate."},{"lineNumber":932,"author":{"gitID":"-"},"content":"* *INFO*: Information of noteworthy actions by the app."},{"lineNumber":933,"author":{"gitID":"-"},"content":"* *FINE*: Details that are not of particular importance but might be useful in debugging."},{"lineNumber":934,"author":{"gitID":"-"},"content":""},{"lineNumber":935,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Multiple lines input support"},{"lineNumber":936,"author":{"gitID":"-"},"content":"// tag::multiple-lines[]"},{"lineNumber":937,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":938,"author":{"gitID":"-"},"content":""},{"lineNumber":939,"author":{"gitID":"-"},"content":"Former implementation of the `_CommandBox_` used `_TextField_`, which only allows single-line inputs but has a default handler for kbd:[Enter]. To support commands with multiple lines, another class has to be used for `_CommandBox_`. The current implementation of `_CommandBox_`"},{"lineNumber":940,"author":{"gitID":"-"},"content":"uses `_TextArea_`, a class which has fewer restrictions on the number of input lines allowed. However, the trade off for `_TextArea_` is that it does not support automatic handling of kbd:[Enter]."},{"lineNumber":941,"author":{"gitID":"-"},"content":""},{"lineNumber":942,"author":{"gitID":"-"},"content":"Currently, the solution is to consume the use of kbd:[Enter] and invoke the function `submitCommand()` whenever `_CommandBox_` receives a keyboard combination that is assigned to command submission (default is kbd:[Enter]). +"},{"lineNumber":943,"author":{"gitID":"-"},"content":"Because the default use of kbd:[Enter] has been replaced by command submission, another key combination is used for line breaks. The default combination for line breaks is kbd:[Shift]+kbd:[Enter] (like in Facebook). +"},{"lineNumber":944,"author":{"gitID":"-"},"content":"For the implementation of the keyboard shortcuts, please refer to \u003c\u003ckeyboard-shortcut\u003e\u003e."},{"lineNumber":945,"author":{"gitID":"-"},"content":""},{"lineNumber":946,"author":{"gitID":"-"},"content":"When `_CommandBox_` receives a keyboard combination that is assigned to line breaks (default is kbd:[Shift]+kbd:[Enter]), `_CommandBox_` generates a `_StringBuilder_` from the current text inside `_CommandBox_` and gets the caret location. The `_StringBuilder_` then inserts a new line at the given caret location and returns a `_String_`. After that, `_CommandBox_` replaces its entire body with the new `_String_` returned by the `_StringBuilder_`."},{"lineNumber":947,"author":{"gitID":"-"},"content":""},{"lineNumber":948,"author":{"gitID":"-"},"content":"The implementation of line breaks is as below:"},{"lineNumber":949,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":950,"author":{"gitID":"-"},"content":"----"},{"lineNumber":951,"author":{"gitID":"-"},"content":"private void createNewLine() {"},{"lineNumber":952,"author":{"gitID":"-"},"content":"    int caretPosition \u003d commandTextArea.getCaretPosition();"},{"lineNumber":953,"author":{"gitID":"-"},"content":"    StringBuilder commandTextStringBuilder \u003d new StringBuilder(commandTextArea.getText());"},{"lineNumber":954,"author":{"gitID":"-"},"content":"    commandTextStringBuilder.insert(caretPosition, LF);"},{"lineNumber":955,"author":{"gitID":"-"},"content":"    String newCommandText \u003d commandTextStringBuilder.toString();"},{"lineNumber":956,"author":{"gitID":"-"},"content":"    commandTextArea.setText(newCommandText);"},{"lineNumber":957,"author":{"gitID":"-"},"content":"    commandTextArea.positionCaret(caretPosition + 1);"},{"lineNumber":958,"author":{"gitID":"-"},"content":"}"},{"lineNumber":959,"author":{"gitID":"-"},"content":"----"},{"lineNumber":960,"author":{"gitID":"-"},"content":"// end::multiple-lines[]"},{"lineNumber":961,"author":{"gitID":"-"},"content":""},{"lineNumber":962,"author":{"gitID":"-"},"content":"// tag::multiple-lines-consideration[]"},{"lineNumber":963,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design considerations"},{"lineNumber":964,"author":{"gitID":"-"},"content":""},{"lineNumber":965,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Usage of a component that support multiple lines input."},{"lineNumber":966,"author":{"gitID":"-"},"content":""},{"lineNumber":967,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use `_TextArea_`."},{"lineNumber":968,"author":{"gitID":"-"},"content":"** Pros: It is easy to use and very intuitive."},{"lineNumber":969,"author":{"gitID":"-"},"content":"** Cons: The \u003c\u003cCSS,CSS\u003e\u003e is particularly hard to handle due to the way `_TextArea_` and its body function separately. There is no default handler for kbd:[Enter]."},{"lineNumber":970,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `_TextField_` with support for `\\n`."},{"lineNumber":971,"author":{"gitID":"-"},"content":"** Pros: It hardly requires any changes to the code."},{"lineNumber":972,"author":{"gitID":"-"},"content":"** Cons: The inputs are unintuitive and ugly. Also, a long line with hundreds of characters is unavoidable. Once the line gets too long, it is nearly impossible to make changes to the input."},{"lineNumber":973,"author":{"gitID":"-"},"content":"* **Alternative 3:** Use `_HTMLEditor_`."},{"lineNumber":974,"author":{"gitID":"-"},"content":"** Pros: There are abundant formatting features."},{"lineNumber":975,"author":{"gitID":"-"},"content":"** Cons: It is too complex to implement and contains unintuitive inputs."},{"lineNumber":976,"author":{"gitID":"-"},"content":"// end::multiple-lines-consideration[]"},{"lineNumber":977,"author":{"gitID":"-"},"content":""},{"lineNumber":978,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Parsing a recipe from BrowserPanel"},{"lineNumber":979,"author":{"gitID":"-"},"content":"// tag::web-parse[]"},{"lineNumber":980,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":981,"author":{"gitID":"-"},"content":""},{"lineNumber":982,"author":{"gitID":"-"},"content":"The command is implemented in `_ParseCommand_`. When the user submits the command to the *`UI`* component, it passes on the command to the *`Logic`* component, which posts a `_WebParseRequestEvent_` to the `_EventsCenter_` (\u003c\u003cfig-ParseCommandSD\u003e\u003e)."},{"lineNumber":983,"author":{"gitID":"-"},"content":""},{"lineNumber":984,"author":{"gitID":"-"},"content":"[[fig-ParseCommandSD]]"},{"lineNumber":985,"author":{"gitID":"-"},"content":".Component interactions for *`parse`* command (part 1)"},{"lineNumber":986,"author":{"gitID":"-"},"content":"image::SDforParseCommand.png[width\u003d\"750\"]"},{"lineNumber":987,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":988,"author":{"gitID":"-"},"content":""},{"lineNumber":989,"author":{"gitID":"-"},"content":"The event then propagates through the `_EventsCenter_` to the `UI`. The `UI` will call `handleWebParseRequestEvent()` to handle the event. The process is shown in \u003c\u003cfig-ParseCommandEventSD\u003e\u003e below."},{"lineNumber":990,"author":{"gitID":"-"},"content":""},{"lineNumber":991,"author":{"gitID":"-"},"content":"[[fig-ParseCommandEventSD]]"},{"lineNumber":992,"author":{"gitID":"-"},"content":".Component interactions for *`parse`* command (part 2)"},{"lineNumber":993,"author":{"gitID":"-"},"content":"image::SDforParseCommandEventHandling.png[width\u003d\"500\"]"},{"lineNumber":994,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":995,"author":{"gitID":"-"},"content":""},{"lineNumber":996,"author":{"gitID":"-"},"content":"This event needs to deal with two `_UiPart_`: `_BrowserPanel_` to parse the recipe, and `_CommandBox_` to display an `_AddCommand_` with the parsed recipe. +"},{"lineNumber":997,"author":{"gitID":"-"},"content":"Therefore, `handleWebParseRequestEvent()` is implemented in `_MainWindow_` class, which contains both `_BrowserPanel_` and `_CommandBox_`. Below is the implementation of `handleWebParseRequestEvent()`:"},{"lineNumber":998,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":999,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1000,"author":{"gitID":"-"},"content":"@Subscribe"},{"lineNumber":1001,"author":{"gitID":"-"},"content":"private void handleWebParseRequestEvent(WebParseRequestEvent event) {"},{"lineNumber":1002,"author":{"gitID":"-"},"content":"    logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":1003,"author":{"gitID":"-"},"content":"    String parsedRecipe \u003d browserPanel.parseRecipe();"},{"lineNumber":1004,"author":{"gitID":"-"},"content":"    if (parsedRecipe !\u003d null) {"},{"lineNumber":1005,"author":{"gitID":"-"},"content":"        commandBox.replaceText(parsedRecipe);"},{"lineNumber":1006,"author":{"gitID":"-"},"content":"    } else {"},{"lineNumber":1007,"author":{"gitID":"-"},"content":"        commandBox.replaceText(\"\");"},{"lineNumber":1008,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":1009,"author":{"gitID":"-"},"content":"}"},{"lineNumber":1010,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1011,"author":{"gitID":"-"},"content":""},{"lineNumber":1012,"author":{"gitID":"-"},"content":"`handleWebParseRequestEvent()` will then call `parseRecipe()`. `parseRecipe()`, in turn, creates a `_WebParser_` and call `parseRecipe()` of the new `_WebParser_` (implementation below):"},{"lineNumber":1013,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":1014,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1015,"author":{"gitID":"-"},"content":"public String parseRecipe() {"},{"lineNumber":1016,"author":{"gitID":"-"},"content":"    WebParser webParser \u003d webParserHandler.getWebParser();"},{"lineNumber":1017,"author":{"gitID":"-"},"content":"    if (webParser !\u003d null) {"},{"lineNumber":1018,"author":{"gitID":"-"},"content":"        return webParser.parseRecipe();"},{"lineNumber":1019,"author":{"gitID":"-"},"content":"    } else {"},{"lineNumber":1020,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":1021,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":1022,"author":{"gitID":"-"},"content":"}"},{"lineNumber":1023,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1024,"author":{"gitID":"-"},"content":""},{"lineNumber":1025,"author":{"gitID":"-"},"content":"[.not-print]"},{"lineNumber":1026,"author":{"gitID":"-"},"content":"For the interactions between the three classes mentioned above and one parser example (`_WikiaParser_`), refer to \u003c\u003cfig-WebParserCD\u003e\u003e.  +"},{"lineNumber":1027,"author":{"gitID":"-"},"content":"[.not-print]"},{"lineNumber":1028,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":1029,"author":{"gitID":"-"},"content":""},{"lineNumber":1030,"author":{"gitID":"-"},"content":"[.not-print]"},{"lineNumber":1031,"author":{"gitID":"-"},"content":"[[fig-WebParserCD]]"},{"lineNumber":1032,"author":{"gitID":"-"},"content":".Class diagram for `_WebParser_` (irrelevant methods omitted)"},{"lineNumber":1033,"author":{"gitID":"-"},"content":"image::WebParserCD.png[width\u003d\"750\"]"},{"lineNumber":1034,"author":{"gitID":"-"},"content":"[.not-print]"},{"lineNumber":1035,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":1036,"author":{"gitID":"-"},"content":""},{"lineNumber":1037,"author":{"gitID":"-"},"content":"`_WebParserHandler_` takes in a `_WebView_`, which is the main part of the `_BrowserPanel_` and returns the corresponding `_WebParser_`."},{"lineNumber":1038,"author":{"gitID":"-"},"content":"The full implementation can be found in link:{repoURL}/src/main/java/seedu/recipe/ui/parser/WebParserHandler.java[`WebParserHandler.java`]."},{"lineNumber":1039,"author":{"gitID":"-"},"content":""},{"lineNumber":1040,"author":{"gitID":"-"},"content":"The `_WebParser_`, in turn, takes a string value of the HTML of the page loaded in the `_WebView_`, parses it then returns the parsed recipe. Therefore, a `_WebParser_` needs to have methods that return the name, instructions, ingredients, etc... of a recipe. +"},{"lineNumber":1041,"author":{"gitID":"-"},"content":"An example of the implementation of a `_WebParser_` can be found at link:{repoURL}/src/main/java/seedu/recipe/ui/parser/WikiaParser.java[`WikiaParser.java`]."},{"lineNumber":1042,"author":{"gitID":"-"},"content":""},{"lineNumber":1043,"author":{"gitID":"-"},"content":"After we get a recipe, or to be exact, a string that contains the `add` command with the recipe, `_MainWindow_` passes `parsedRecipe`, which is now the string of an `add` command, to the `_CommandBox_`. Then the `_CommandBox_` just replaces its body with the given string. See \u003c\u003cfig-ParseCommandDetailsSD\u003e\u003e for an example when a `parse` command is submitted with a wikia page loaded in the `_BrowserPanel_`. +"},{"lineNumber":1044,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":1045,"author":{"gitID":"-"},"content":""},{"lineNumber":1046,"author":{"gitID":"-"},"content":"[[fig-ParseCommandDetailsSD]]"},{"lineNumber":1047,"author":{"gitID":"-"},"content":".Sequence diagram for `handleWebParseRequestEvent()`"},{"lineNumber":1048,"author":{"gitID":"-"},"content":"image::SDforParseCommandDetails.png[width\u003d\"900\"]"},{"lineNumber":1049,"author":{"gitID":"-"},"content":"[.not-print]"},{"lineNumber":1050,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":1051,"author":{"gitID":"-"},"content":"// end::web-parse[]"},{"lineNumber":1052,"author":{"gitID":"-"},"content":""},{"lineNumber":1053,"author":{"gitID":"-"},"content":"// tag::web-parse-consideration[]"},{"lineNumber":1054,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design considerations"},{"lineNumber":1055,"author":{"gitID":"-"},"content":""},{"lineNumber":1056,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How to extract data from `_WebView_`."},{"lineNumber":1057,"author":{"gitID":"-"},"content":""},{"lineNumber":1058,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use Jsoup."},{"lineNumber":1059,"author":{"gitID":"-"},"content":"** Pros: It returns a Jsoup supported string, which will make parsing *significantly easier* later."},{"lineNumber":1060,"author":{"gitID":"-"},"content":"** Cons: This approach uses a 3rd-party library."},{"lineNumber":1061,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use a w3c.dom.Document directly."},{"lineNumber":1062,"author":{"gitID":"-"},"content":"** Pros: This approach requires only one line of code."},{"lineNumber":1063,"author":{"gitID":"-"},"content":"** Cons: However, as we are going to see below, this method makes parsing almost impossible without a lot of trial-and-error."},{"lineNumber":1064,"author":{"gitID":"-"},"content":""},{"lineNumber":1065,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How to parse data from `_WebView_`."},{"lineNumber":1066,"author":{"gitID":"-"},"content":""},{"lineNumber":1067,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Create a Jsoup Document from a HTML string, then parse it."},{"lineNumber":1068,"author":{"gitID":"-"},"content":"** Pros: This approach is the easiest to do as Jsoup is a very robust HTML parsing library, especially when you are familiar with CSS selectors."},{"lineNumber":1069,"author":{"gitID":"-"},"content":"** Cons: This approach uses a 3rd-party library."},{"lineNumber":1070,"author":{"gitID":"-"},"content":"* **Alternative 2:** Do DOM query on a w3c.dom.Document directly."},{"lineNumber":1071,"author":{"gitID":"-"},"content":"** Pros: This approach uses the built-in Java codes."},{"lineNumber":1072,"author":{"gitID":"-"},"content":"** Cons: DOM queries are very computationally expensive. Furthermore, IntelliJ does not support variable debugging on w3c.dom.Document, which, as a result, makes parsing for the correct elements a game of lottery."},{"lineNumber":1073,"author":{"gitID":"-"},"content":""},{"lineNumber":1074,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Testing."},{"lineNumber":1075,"author":{"gitID":"-"},"content":""},{"lineNumber":1076,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Create a dummy Document object for `_WebParserHandler_`."},{"lineNumber":1077,"author":{"gitID":"-"},"content":"** Pros: This approach usually works when the Internet speed is decent enough."},{"lineNumber":1078,"author":{"gitID":"-"},"content":"** Cons: This approach does not fully test for the correctness of `_WebParserHandler_` constructor. Furthermore, the tests usually fail even though they should pass."},{"lineNumber":1079,"author":{"gitID":"-"},"content":"* **Alternative 2:** Do a correct test by using a long waiting time."},{"lineNumber":1080,"author":{"gitID":"-"},"content":"** Pros: This approach works."},{"lineNumber":1081,"author":{"gitID":"-"},"content":"** Cons: It makes testing a lot slower due to the long waiting time."},{"lineNumber":1082,"author":{"gitID":"-"},"content":"// end::web-parse-consideration[]"},{"lineNumber":1083,"author":{"gitID":"-"},"content":""},{"lineNumber":1084,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Randomising tag colors"},{"lineNumber":1085,"author":{"gitID":"-"},"content":"// tag::randomised-tag-colors[]"},{"lineNumber":1086,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":1087,"author":{"gitID":"-"},"content":"The `_RecipeCard_` class calls the `_UiUtil_` class to convert the hashcode of a tag name into a valid hexadecimal color code. This ensures that all tags with the same name will have the same tag color."},{"lineNumber":1088,"author":{"gitID":"-"},"content":""},{"lineNumber":1089,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":1090,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1091,"author":{"gitID":"-"},"content":"private String getTagColorStyleFor(String tagName) {"},{"lineNumber":1092,"author":{"gitID":"-"},"content":"    String hexadecimalHashCode \u003d UiUtil.convertIntToHexadecimalString(tagName.hashCode());"},{"lineNumber":1093,"author":{"gitID":"-"},"content":"    String hexadecimalColorCode \u003d UiUtil.convertStringToValidColorCode(hexadecimalHashCode);"},{"lineNumber":1094,"author":{"gitID":"-"},"content":"    return hexadecimalColorCode;"},{"lineNumber":1095,"author":{"gitID":"-"},"content":"}"},{"lineNumber":1096,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1097,"author":{"gitID":"-"},"content":""},{"lineNumber":1098,"author":{"gitID":"-"},"content":"In order to find a suitable text color for a given tag color, we must first find out if the given tag color is dark or light. Consequently, we set the text color to black if the tag color is light, and vice versa."},{"lineNumber":1099,"author":{"gitID":"-"},"content":""},{"lineNumber":1100,"author":{"gitID":"-"},"content":"A given tag color is passed through a `isColorDark()` method. This method works by summing up the intensity of the red, green and blue color hue in the given hexadecimal color. A smaller sum would mean a darker color, while a larger sum would mean a lighter color."},{"lineNumber":1101,"author":{"gitID":"-"},"content":""},{"lineNumber":1102,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":1103,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1104,"author":{"gitID":"-"},"content":"public static boolean isColorDark(String color) {"},{"lineNumber":1105,"author":{"gitID":"-"},"content":"    color \u003d removeAllWhitespaceInString(color);"},{"lineNumber":1106,"author":{"gitID":"-"},"content":"    color \u003d isValidHexColorCode(color) ? color : HEX_COLOR_WHITE;"},{"lineNumber":1107,"author":{"gitID":"-"},"content":""},{"lineNumber":1108,"author":{"gitID":"-"},"content":"    int lightnessCount \u003d 0;"},{"lineNumber":1109,"author":{"gitID":"-"},"content":""},{"lineNumber":1110,"author":{"gitID":"-"},"content":"    for (int i \u003d 1; i \u003c 6; i \u003d i + 2) {"},{"lineNumber":1111,"author":{"gitID":"-"},"content":"        String colorDensity \u003d color.substring(i, i + 2);"},{"lineNumber":1112,"author":{"gitID":"-"},"content":"        lightnessCount +\u003d Integer.parseInt(colorDensity, 16);"},{"lineNumber":1113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":1114,"author":{"gitID":"-"},"content":""},{"lineNumber":1115,"author":{"gitID":"-"},"content":"    if (lightnessCount \u003e\u003d NEUTRAL_COLOR_DENSITY) {"},{"lineNumber":1116,"author":{"gitID":"-"},"content":"        return false;"},{"lineNumber":1117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":1118,"author":{"gitID":"-"},"content":""},{"lineNumber":1119,"author":{"gitID":"-"},"content":"    return true;"},{"lineNumber":1120,"author":{"gitID":"-"},"content":"}"},{"lineNumber":1121,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1122,"author":{"gitID":"-"},"content":""},{"lineNumber":1123,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design considerations"},{"lineNumber":1124,"author":{"gitID":"-"},"content":""},{"lineNumber":1125,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Generating colors"},{"lineNumber":1126,"author":{"gitID":"-"},"content":""},{"lineNumber":1127,"author":{"gitID":"-"},"content":"* **Alternative 1:** Use a random color generator for each separate tag."},{"lineNumber":1128,"author":{"gitID":"-"},"content":"** Pros: The implementation is simple."},{"lineNumber":1129,"author":{"gitID":"-"},"content":"** Cons: Tags with the same names may not have the same tag color. The tag colors are different each time the application is run."},{"lineNumber":1130,"author":{"gitID":"-"},"content":"* **Alternative 2 (current choice):** Use a color generator based on the tag name\u0027s hashcode."},{"lineNumber":1131,"author":{"gitID":"-"},"content":"** Pros: Tag colors will remain consistent as they are dependant on the tag name. Tags with same names will have the same tag color."},{"lineNumber":1132,"author":{"gitID":"-"},"content":"** Cons: The implementation is slightly more complicated."},{"lineNumber":1133,"author":{"gitID":"-"},"content":"// end::randomised-tag-colors[]"},{"lineNumber":1134,"author":{"gitID":"-"},"content":""},{"lineNumber":1135,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Searching by ingredients"},{"lineNumber":1136,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1137,"author":{"gitID":"-"},"content":"// tag::ingredient-search[]"},{"lineNumber":1138,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":1139,"author":{"gitID":"-"},"content":"The user input is parsed and separated into a `_String_` array of keywords that represent each ingredient in `_IngredientCommandParser_`. This array is then passed to `_IngredientContainsKeywordsPredicate_` which compares them individually to the entire list of recipes and their ingredients. The matching is case-insensitive and the predicate will only be true when the recipe contains ALL ingredients in the parsed array."},{"lineNumber":1140,"author":{"gitID":"-"},"content":"The implementation of that can be seen below:"},{"lineNumber":1141,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":1142,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1143,"author":{"gitID":"-"},"content":"@Override"},{"lineNumber":1144,"author":{"gitID":"-"},"content":"public boolean test(Recipe recipe) {"},{"lineNumber":1145,"author":{"gitID":"-"},"content":"    int matches \u003d 0;"},{"lineNumber":1146,"author":{"gitID":"-"},"content":"    String ingredients \u003d recipe.getIngredient().toString().replaceAll(\",\", \" \");"},{"lineNumber":1147,"author":{"gitID":"-"},"content":"    for (String keyword : keywords) {"},{"lineNumber":1148,"author":{"gitID":"-"},"content":"        if (StringUtil.containsWordIgnoreCase(ingredients, keyword)) {"},{"lineNumber":1149,"author":{"gitID":"-"},"content":"            matches++;"},{"lineNumber":1150,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":1151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":1152,"author":{"gitID":"-"},"content":"    return matches \u003d\u003d keywords.size();"},{"lineNumber":1153,"author":{"gitID":"-"},"content":"}"},{"lineNumber":1154,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1155,"author":{"gitID":"-"},"content":"This entire list of predicates is then passed into `_IngredientCommand_` which uses the `updateFilteredRecipeList()` method of `Model` to change the list of recipes displayed to those that matched the ingredients."},{"lineNumber":1156,"author":{"gitID":"-"},"content":"Since the sequence is very similar to searching by tags, the sequence diagram of this entire process can be seen in the \u003c\u003cfig-TagCommandSD\u003e\u003e under \u003c\u003ctagSearch\u003e\u003e below."},{"lineNumber":1157,"author":{"gitID":"-"},"content":"// end::ingredient-search[]"},{"lineNumber":1158,"author":{"gitID":"-"},"content":""},{"lineNumber":1159,"author":{"gitID":"-"},"content":"[[tagSearch]]"},{"lineNumber":1160,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Searching by tags"},{"lineNumber":1161,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1162,"author":{"gitID":"-"},"content":"// tag::tag-search[]"},{"lineNumber":1163,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":1164,"author":{"gitID":"-"},"content":"The user input is parsed and separated into a `_String_` array of keywords in `_TagCommandParser_`. This array is then passed to `_TagContainsKeywordsPredicate_` which compares them individually to the entire list of recipes and their tags using a stream, setting the predicate to true when there is any match (i.e. the recipe does not have to contain ALL the tags specified like how the ingredient search was implemented)."},{"lineNumber":1165,"author":{"gitID":"-"},"content":"The matching is case-sensitive and the implementation can be seen below:"},{"lineNumber":1166,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":1167,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1168,"author":{"gitID":"-"},"content":"@Override"},{"lineNumber":1169,"author":{"gitID":"-"},"content":"public boolean test(Recipe recipe) {"},{"lineNumber":1170,"author":{"gitID":"-"},"content":"    return keywords.stream()"},{"lineNumber":1171,"author":{"gitID":"-"},"content":"                .anyMatch(keyword -\u003e recipe.getTags().stream()"},{"lineNumber":1172,"author":{"gitID":"-"},"content":"                    .anyMatch(tag -\u003e tag.tagName.equals(keyword)));"},{"lineNumber":1173,"author":{"gitID":"-"},"content":"}"},{"lineNumber":1174,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1175,"author":{"gitID":"-"},"content":"This entire list of predicates is then passed into `_TagCommand_` which uses the `updateFilteredRecipeList()` method of `Model` to change the list of recipes displayed to those that matched the tags."},{"lineNumber":1176,"author":{"gitID":"-"},"content":"The sequence diagram of this entire process can be seen in \u003c\u003cfig-TagCommandSD\u003e\u003e below:"},{"lineNumber":1177,"author":{"gitID":"-"},"content":""},{"lineNumber":1178,"author":{"gitID":"-"},"content":"[[fig-TagCommandSD]]"},{"lineNumber":1179,"author":{"gitID":"-"},"content":".Interactions inside the `Logic` component for the *`tag favourites`* command."},{"lineNumber":1180,"author":{"gitID":"-"},"content":"image::TagCommandSD.PNG[width\u003d\"900\"]"},{"lineNumber":1181,"author":{"gitID":"-"},"content":"{nbsp}"},{"lineNumber":1182,"author":{"gitID":"-"},"content":"// end::tag-search[]"},{"lineNumber":1183,"author":{"gitID":"-"},"content":""},{"lineNumber":1184,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Searching on the Internet"},{"lineNumber":1185,"author":{"gitID":"-"},"content":"// tag::internet-search[]"},{"lineNumber":1186,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":1187,"author":{"gitID":"-"},"content":""},{"lineNumber":1188,"author":{"gitID":"-"},"content":"The command is implemented in `_SearchCommand_`. When the user submits the command to the *`UI`* component, it passes on the command to the *`Logic`* component, which creates a `_WikiaQueryHandler_` and posts a `_InternetSearchRequestEvent_` to the `_EventsCenter_`. For a visual understanding, refer to \u003c\u003cfig-InternetSearchSD\u003e\u003e."},{"lineNumber":1189,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1190,"author":{"gitID":"-"},"content":"[[fig-InternetSearchSD]]"},{"lineNumber":1191,"author":{"gitID":"-"},"content":".Component interactions for *`search chicken rice`* command (part 1)"},{"lineNumber":1192,"author":{"gitID":"-"},"content":"image::SDforInternetSearch.png[width\u003d\"750\"]"},{"lineNumber":1193,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":1194,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1195,"author":{"gitID":"-"},"content":"The event is then propagated through the `_EventsCenter_` to the `UI`. The `UI` will call `handleInternetSearchRequestEvent()` to search for the recipe (\u003c\u003cfig-InternetSearchEventSD\u003e\u003e)."},{"lineNumber":1196,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1197,"author":{"gitID":"-"},"content":"[[fig-InternetSearchEventSD]]"},{"lineNumber":1198,"author":{"gitID":"-"},"content":".Component interactions for *`search chicken rice`* command (part 2)"},{"lineNumber":1199,"author":{"gitID":"-"},"content":"image::SDforInternetSearchEventHandling.png[width\u003d\"500\"]"},{"lineNumber":1200,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":1201,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1202,"author":{"gitID":"-"},"content":"This command deals with a class called `_WikiaQueryHandler_`. `_WikiaQueryHandler_` is a class that resolves a query to http://recipes.wikia.com[the recipe repo] we are using for ReciRecipé. Below is the constructor of `_WikiaQueryHandler_`:"},{"lineNumber":1203,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":1204,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1205,"author":{"gitID":"-"},"content":"public WikiaQueryHandler(String recipeToSearch) throws AssertionError {"},{"lineNumber":1206,"author":{"gitID":"-"},"content":"    requireNonNull(recipeToSearch);"},{"lineNumber":1207,"author":{"gitID":"-"},"content":"    this.recipeToSearch \u003d recipeToSearch;"},{"lineNumber":1208,"author":{"gitID":"-"},"content":"    loadUrl();"},{"lineNumber":1209,"author":{"gitID":"-"},"content":"    startHttpConnection();"},{"lineNumber":1210,"author":{"gitID":"-"},"content":"    getRawData();"},{"lineNumber":1211,"author":{"gitID":"-"},"content":"    parseData();"},{"lineNumber":1212,"author":{"gitID":"-"},"content":"}"},{"lineNumber":1213,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1214,"author":{"gitID":"-"},"content":""},{"lineNumber":1215,"author":{"gitID":"-"},"content":"After `_WikiaQueryHandler_` is created, we can call `getRecipeQueryUrl()` and `getQueryNumberOfResults()` to get the URL for the `_BrowserPanel_` and the number of results returned by the query."},{"lineNumber":1216,"author":{"gitID":"-"},"content":""},{"lineNumber":1217,"author":{"gitID":"-"},"content":"[.not-print]"},{"lineNumber":1218,"author":{"gitID":"-"},"content":"Refer to \u003c\u003cfig-InternetSearchCD\u003e\u003e for the interactions between relevant classes."},{"lineNumber":1219,"author":{"gitID":"-"},"content":""},{"lineNumber":1220,"author":{"gitID":"-"},"content":"[.not-print]"},{"lineNumber":1221,"author":{"gitID":"-"},"content":"[[fig-InternetSearchCD]]"},{"lineNumber":1222,"author":{"gitID":"-"},"content":".Classes interactions for `_SearchCommand_`"},{"lineNumber":1223,"author":{"gitID":"-"},"content":"image::InternetSearchClassDiagram.png[width\u003d\"750\"]"},{"lineNumber":1224,"author":{"gitID":"-"},"content":"[.not-print]"},{"lineNumber":1225,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":1226,"author":{"gitID":"-"},"content":""},{"lineNumber":1227,"author":{"gitID":"-"},"content":"When `execute()` is called, `_SearchCommand_` passes its `_WikiaQueryHandler_` as an argument to `_InternetSearchRequestEvent_`. `_BrowserPanel_` will then call `getQueryNumberOfResults()` to see if the query returns any results. If there is no result, then `_BrowserPanel_` won\u0027t load the page to reduce redundant requests to the server, else `_BrowserPanel_` will load the URL given by `getRecipeQueryUrl()`. Refer to the code snippet below to see the implementation of `execute()` and the handler:"},{"lineNumber":1228,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1229,"author":{"gitID":"hoangduong1607"},"content":"[source,java]"},{"lineNumber":1230,"author":{"gitID":"hoangduong1607"},"content":"----"},{"lineNumber":1231,"author":{"gitID":"-"},"content":"public CommandResult execute() throws CommandException {"},{"lineNumber":1232,"author":{"gitID":"-"},"content":"    int noOfResult \u003d wikiaQueryHandler.getQueryNumberOfResults();"},{"lineNumber":1233,"author":{"gitID":"-"},"content":"    EventsCenter.getInstance().post(new InternetSearchRequestEvent(wikiaQueryHandler));"},{"lineNumber":1234,"author":{"gitID":"-"},"content":"    if (noOfResult \u003d\u003d 0) {"},{"lineNumber":1235,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_FAILURE);"},{"lineNumber":1236,"author":{"gitID":"-"},"content":"    } else {"},{"lineNumber":1237,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, noOfResult));"},{"lineNumber":1238,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":1239,"author":{"gitID":"hoangduong1607"},"content":"}"},{"lineNumber":1240,"author":{"gitID":"-"},"content":"@Subscribe"},{"lineNumber":1241,"author":{"gitID":"-"},"content":"private void handleInternetSearchRequestEvent(InternetSearchRequestEvent event) {"},{"lineNumber":1242,"author":{"gitID":"-"},"content":"    logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":1243,"author":{"gitID":"-"},"content":"    if (event.getQueryNumberOfResults() !\u003d 0) {"},{"lineNumber":1244,"author":{"gitID":"-"},"content":"        loadPage(event.getRecipeQueryUrl());"},{"lineNumber":1245,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":1246,"author":{"gitID":"hoangduong1607"},"content":"}"},{"lineNumber":1247,"author":{"gitID":"hoangduong1607"},"content":"----"},{"lineNumber":1248,"author":{"gitID":"-"},"content":"// end::internet-search[]"},{"lineNumber":1249,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1250,"author":{"gitID":"-"},"content":"// tag::internet-search-consideration[]"},{"lineNumber":1251,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design considerations"},{"lineNumber":1252,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1253,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Usage of `_WikiaQueryHandler_`."},{"lineNumber":1254,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1255,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use `_WikiaQueryHandler_`."},{"lineNumber":1256,"author":{"gitID":"-"},"content":"** Pros: This approach allows query abstraction from display."},{"lineNumber":1257,"author":{"gitID":"-"},"content":"** Cons: In return, using a separate class makes the implementation a lot harder to manage."},{"lineNumber":1258,"author":{"gitID":"-"},"content":"* **Alternative 2:** Do not use `_WikiaQueryHandler_`. Let `_BrowserPanel_` directly load the query URL."},{"lineNumber":1259,"author":{"gitID":"-"},"content":"** Pros: This approach is significantly easier to implement, requiring only 3-4 lines in `_BrowserPanel_`."},{"lineNumber":1260,"author":{"gitID":"-"},"content":"** Cons: However, we don\u0027t get any extra information for pre-processing and this could lead to redundant requests to the server."},{"lineNumber":1261,"author":{"gitID":"-"},"content":"// end::internet-search-consideration[]"},{"lineNumber":1262,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1263,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":1264,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":1265,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1266,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `_UndoRedoStack_`, which resides inside `_LogicManager_`. It supports undoing and redoing of commands that modify the state of the recipe book (e.g. *`add`*, *`edit`*). Such commands will inherit from `_UndoableCommand_`."},{"lineNumber":1267,"author":{"gitID":"-"},"content":""},{"lineNumber":1268,"author":{"gitID":"-"},"content":"`_UndoRedoStack_` only deals with `_UndoableCommands_`. Commands that cannot be undone will inherit from `_Command_` instead. The following diagram  \u003c\u003cdiag-LogicCommandClass\u003e\u003e shows the inheritance diagram for commands:"},{"lineNumber":1269,"author":{"gitID":"-"},"content":""},{"lineNumber":1270,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":1271,"author":{"gitID":"-"},"content":""},{"lineNumber":1272,"author":{"gitID":"-"},"content":"[[diag-LogicCommandClass]]"},{"lineNumber":1273,"author":{"gitID":"-"},"content":".Logic command class diagram"},{"lineNumber":1274,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":1275,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":1276,"author":{"gitID":"-"},"content":""},{"lineNumber":1277,"author":{"gitID":"-"},"content":"As you can see from the diagram, `_UndoableCommand_` adds an extra layer between the abstract `_Command_` class and concrete commands that can be undone, such as the `_DeleteCommand_`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the recipe book before execution. `_UndoableCommand_` contains the high-level algorithm for those extra tasks while the child classes implement the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":1278,"author":{"gitID":"-"},"content":""},{"lineNumber":1279,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":1280,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":1281,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1282,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":1283,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":1284,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":1285,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":1286,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":1287,"author":{"gitID":"hoangduong1607"},"content":"}"},{"lineNumber":1288,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1289,"author":{"gitID":"-"},"content":""},{"lineNumber":1290,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":1291,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":1292,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1293,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":1294,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":1295,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":1296,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":1297,"author":{"gitID":"-"},"content":""},{"lineNumber":1298,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":1299,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":1300,"author":{"gitID":"-"},"content":"}"},{"lineNumber":1301,"author":{"gitID":"-"},"content":""},{"lineNumber":1302,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":1303,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":1304,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":1305,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":1306,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":1307,"author":{"gitID":"-"},"content":"}"},{"lineNumber":1308,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1309,"author":{"gitID":"-"},"content":""},{"lineNumber":1310,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `_UndoRedoStack_` will be empty at the beginning."},{"lineNumber":1311,"author":{"gitID":"-"},"content":""},{"lineNumber":1312,"author":{"gitID":"-"},"content":"The user executes a new `_UndoableCommand_`, for example, *`delete 5`*. The current state of the recipe book is saved before the *`delete 5`* command executes. The *`delete 5`* command will then be pushed onto the `undoStack` as seen in \u003c\u003cdiag-UndoRedo1\u003e\u003e below (the current state is saved together with the command)."},{"lineNumber":1313,"author":{"gitID":"-"},"content":""},{"lineNumber":1314,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":1315,"author":{"gitID":"-"},"content":""},{"lineNumber":1316,"author":{"gitID":"-"},"content":"[[diag-UndoRedo1]]"},{"lineNumber":1317,"author":{"gitID":"-"},"content":".Undo/Redo starting stack diagram"},{"lineNumber":1318,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":1319,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":1320,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":1321,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute *`add n/Pizza ...`* to add a new recipe."},{"lineNumber":1322,"author":{"gitID":"-"},"content":"The state of the stack is shown in \u003c\u003cdiag-UndoRedo2\u003e\u003e below."},{"lineNumber":1323,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":1324,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":1325,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":1326,"author":{"gitID":"-"},"content":"[[diag-UndoRedo2]]"},{"lineNumber":1327,"author":{"gitID":"-"},"content":".Undo/Redo new command stack diagram"},{"lineNumber":1328,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":1329,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":1330,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":1331,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1332,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `_UndoRedoStack_` at all."},{"lineNumber":1333,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":1334,"author":{"gitID":"RyanAngJY"},"content":"The user now decides that adding the recipe was a mistake, and decides to undo that action using *`undo`*."},{"lineNumber":1335,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":1336,"author":{"gitID":"RyanAngJY"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`, thus restoring the recipe book to the state before the *`add`* command executed."},{"lineNumber":1337,"author":{"gitID":"-"},"content":"The details of the execution can be seen in \u003c\u003cdiag-UndoRedo3\u003e\u003e below."},{"lineNumber":1338,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":1339,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":1340,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":1341,"author":{"gitID":"-"},"content":"[[diag-UndoRedo3]]"},{"lineNumber":1342,"author":{"gitID":"-"},"content":".Execute undo stack diagram"},{"lineNumber":1343,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":1344,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":1345,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":1346,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1347,"author":{"gitID":"RyanAngJY"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `_Exception_` will be thrown when popping the `undoStack`."},{"lineNumber":1348,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":1349,"author":{"gitID":"-"},"content":"The following sequence diagram \u003c\u003cdiag-UndoRedoSeq\u003e\u003e shows how the undo operation works:"},{"lineNumber":1350,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":1351,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":1352,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":1353,"author":{"gitID":"-"},"content":"[[diag-UndoRedoSeq]]"},{"lineNumber":1354,"author":{"gitID":"-"},"content":".Undo/Redo sequence diagram"},{"lineNumber":1355,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":1356,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":1357,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":1358,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the recipe book to the state after the command is executed)."},{"lineNumber":1359,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":1360,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1361,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `_Exception_` will be thrown when popping the `redoStack`."},{"lineNumber":1362,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":1363,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, *`clear`*. As before, *`clear`* will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer makes sense to redo the *`add n/Pizza`* command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":1364,"author":{"gitID":"-"},"content":"Details can be seen in \u003c\u003cdiag-UndoRedo4\u003e\u003e below."},{"lineNumber":1365,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":1366,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":1367,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":1368,"author":{"gitID":"-"},"content":"[[diag-UndoRedo4]]"},{"lineNumber":1369,"author":{"gitID":"-"},"content":".Undo/Redo new command stack diagram"},{"lineNumber":1370,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":1371,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":1372,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":1373,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, *`list`*, which inherits from `_Command_` rather than `_UndoableCommand_`, will not be added after execution as can be seen in \u003c\u003cdiag-CannotUndoRedo\u003e\u003e below."},{"lineNumber":1374,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":1375,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":1376,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":1377,"author":{"gitID":"-"},"content":"[[diag-CannotUndoRedo]]"},{"lineNumber":1378,"author":{"gitID":"-"},"content":".Undo/Redo new command stack diagram"},{"lineNumber":1379,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":1380,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":1381,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":1382,"author":{"gitID":"-"},"content":"The following activity diagram \u003c\u003cdiag-UndoRedoActDiag\u003e\u003e summarizes what happens inside the `_UndoRedoStack_` when a user executes a new command."},{"lineNumber":1383,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":1384,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":1385,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":1386,"author":{"gitID":"-"},"content":"[[diag-UndoRedoActDiag]]"},{"lineNumber":1387,"author":{"gitID":"-"},"content":".Undo/Redo activity diagram"},{"lineNumber":1388,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":1389,"author":{"gitID":"-"},"content":"{nbsp} +"},{"lineNumber":1390,"author":{"gitID":"-"},"content":""},{"lineNumber":1391,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design considerations"},{"lineNumber":1392,"author":{"gitID":"-"},"content":""},{"lineNumber":1393,"author":{"gitID":"RyanAngJY"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `_UndoableCommand_`."},{"lineNumber":1394,"author":{"gitID":"-"},"content":""},{"lineNumber":1395,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`."},{"lineNumber":1396,"author":{"gitID":"RyanAngJY"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behavior. Classes that deal with `_Command_` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":1397,"author":{"gitID":"-"},"content":"** Cons: It is difficult for new developers to understand the template pattern."},{"lineNumber":1398,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`."},{"lineNumber":1399,"author":{"gitID":"-"},"content":"** Pros: This does not involve the template pattern, and is easier for new developers to understand."},{"lineNumber":1400,"author":{"gitID":"-"},"content":"** Cons: The classes that inherit from `_UndoableCommand_` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":1401,"author":{"gitID":"-"},"content":""},{"lineNumber":1402,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes."},{"lineNumber":1403,"author":{"gitID":"-"},"content":""},{"lineNumber":1404,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Save the entire recipe book."},{"lineNumber":1405,"author":{"gitID":"-"},"content":"** Pros: It is easy to implement."},{"lineNumber":1406,"author":{"gitID":"-"},"content":"** Cons: There may be performance issues in terms of memory usage."},{"lineNumber":1407,"author":{"gitID":"-"},"content":"* **Alternative 2:** Hardcode the undo/redo into each command."},{"lineNumber":1408,"author":{"gitID":"-"},"content":"** Pros: This will use less memory (e.g. for *`delete`*, as it just saves the recipe being deleted)."},{"lineNumber":1409,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command is correct."},{"lineNumber":1410,"author":{"gitID":"-"},"content":""},{"lineNumber":1411,"author":{"gitID":"-"},"content":""},{"lineNumber":1412,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone."},{"lineNumber":1413,"author":{"gitID":"-"},"content":""},{"lineNumber":1414,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Include only commands that modify the recipe book (*`add`*, *`clear`*, *`edit`*)."},{"lineNumber":1415,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":1416,"author":{"gitID":"-"},"content":"** Cons: The user might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing *`undo`*."},{"lineNumber":1417,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":1418,"author":{"gitID":"-"},"content":"** Pros: It might be more intuitive for the user."},{"lineNumber":1419,"author":{"gitID":"-"},"content":"** Cons: The user has no way of skipping such commands if he or she just want to reset the state of the book and not the view."},{"lineNumber":1420,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":1421,"author":{"gitID":"-"},"content":""},{"lineNumber":1422,"author":{"gitID":"-"},"content":""},{"lineNumber":1423,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands."},{"lineNumber":1424,"author":{"gitID":"-"},"content":""},{"lineNumber":1425,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo."},{"lineNumber":1426,"author":{"gitID":"-"},"content":"** Pros: This is easy to for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."},{"lineNumber":1427,"author":{"gitID":"-"},"content":"** Cons: The logic is duplicated twice. For example, when a new command is executed, we must remember to update both `_HistoryManager_` and `_UndoRedoStack_`."},{"lineNumber":1428,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `_HistoryManager_` for undo/redo."},{"lineNumber":1429,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and can just reuse what is already in the codebase."},{"lineNumber":1430,"author":{"gitID":"-"},"content":"** Cons: This requires dealing with commands that have already been undone, meaning we must remember to skip these commands. It violates Single Responsibility Principle and Separation of Concerns as `_HistoryManager_` now needs to do two * different things."},{"lineNumber":1431,"author":{"gitID":"-"},"content":""},{"lineNumber":1432,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Unique tag colors"},{"lineNumber":1433,"author":{"gitID":"-"},"content":"// tag::unique-tag-colors[]"},{"lineNumber":1434,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":1435,"author":{"gitID":"-"},"content":"The `_RecipeCard_` class calls the `_UiUtil_` class to convert the hashcode of a tag name into a valid hexadecimal color code. This ensures that all tags with the same name will have the same tag color."},{"lineNumber":1436,"author":{"gitID":"-"},"content":""},{"lineNumber":1437,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":1438,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1439,"author":{"gitID":"-"},"content":"private String getTagColorStyleFor(String tagName) {"},{"lineNumber":1440,"author":{"gitID":"-"},"content":"    String hexadecimalHashCode \u003d UiUtil.convertIntToHexadecimalString(tagName.hashCode());"},{"lineNumber":1441,"author":{"gitID":"-"},"content":"    String hexadecimalColorCode \u003d UiUtil.convertStringToValidColorCode(hexadecimalHashCode);"},{"lineNumber":1442,"author":{"gitID":"-"},"content":"    return hexadecimalColorCode;"},{"lineNumber":1443,"author":{"gitID":"-"},"content":"}"},{"lineNumber":1444,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1445,"author":{"gitID":"-"},"content":""},{"lineNumber":1446,"author":{"gitID":"-"},"content":"In order to find a suitable text color for a given tag color, we must first find out if the given tag color is dark or light. Consequently, we set the text color to black if the tag color is light, and vice versa."},{"lineNumber":1447,"author":{"gitID":"-"},"content":""},{"lineNumber":1448,"author":{"gitID":"-"},"content":"A given tag color is passed through a `isColorDark()` method. This method works by summing up the intensity of the red, green and blue color hue in the given hexadecimal color. A smaller sum would mean a darker color, while a larger sum would mean a lighter color."},{"lineNumber":1449,"author":{"gitID":"-"},"content":""},{"lineNumber":1450,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":1451,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1452,"author":{"gitID":"-"},"content":"public static boolean isColorDark(String color) {"},{"lineNumber":1453,"author":{"gitID":"-"},"content":"    color \u003d removeAllWhitespaceInString(color);"},{"lineNumber":1454,"author":{"gitID":"-"},"content":"    color \u003d isValidHexColorCode(color) ? color : HEX_COLOR_WHITE;"},{"lineNumber":1455,"author":{"gitID":"-"},"content":""},{"lineNumber":1456,"author":{"gitID":"-"},"content":"    int lightnessCount \u003d 0;"},{"lineNumber":1457,"author":{"gitID":"-"},"content":""},{"lineNumber":1458,"author":{"gitID":"-"},"content":"    for (int i \u003d 1; i \u003c 6; i \u003d i + 2) {"},{"lineNumber":1459,"author":{"gitID":"-"},"content":"        String colorDensity \u003d color.substring(i, i + 2);"},{"lineNumber":1460,"author":{"gitID":"-"},"content":"        lightnessCount +\u003d Integer.parseInt(colorDensity, 16);"},{"lineNumber":1461,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":1462,"author":{"gitID":"-"},"content":""},{"lineNumber":1463,"author":{"gitID":"-"},"content":"    if (lightnessCount \u003e\u003d NEUTRAL_COLOR_DENSITY) {"},{"lineNumber":1464,"author":{"gitID":"-"},"content":"        return false;"},{"lineNumber":1465,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":1466,"author":{"gitID":"-"},"content":""},{"lineNumber":1467,"author":{"gitID":"-"},"content":"    return true;"},{"lineNumber":1468,"author":{"gitID":"-"},"content":"}"},{"lineNumber":1469,"author":{"gitID":"-"},"content":"----"},{"lineNumber":1470,"author":{"gitID":"-"},"content":""},{"lineNumber":1471,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design considerations"},{"lineNumber":1472,"author":{"gitID":"-"},"content":""},{"lineNumber":1473,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Generating colors"},{"lineNumber":1474,"author":{"gitID":"-"},"content":""},{"lineNumber":1475,"author":{"gitID":"-"},"content":"* **Alternative 1:** Use a random color generator for each separate tag."},{"lineNumber":1476,"author":{"gitID":"-"},"content":"** Pros: The implementation is simple."},{"lineNumber":1477,"author":{"gitID":"-"},"content":"** Cons: Tags with the same names may not have the same tag color. The tag colors are different each time the application is run."},{"lineNumber":1478,"author":{"gitID":"-"},"content":"* **Alternative 2 (current choice):** Use a color generator based on the tag name\u0027s hashcode."},{"lineNumber":1479,"author":{"gitID":"-"},"content":"** Pros: Tag colors will remain consistent as they are dependant on the tag name. Tags with same names will have the same tag color."},{"lineNumber":1480,"author":{"gitID":"-"},"content":"** Cons: The implementation is slightly more complicated."},{"lineNumber":1481,"author":{"gitID":"-"},"content":"// end::unique-tag-colors[]"},{"lineNumber":1482,"author":{"gitID":"-"},"content":""},{"lineNumber":1483,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":1484,"author":{"gitID":"-"},"content":""},{"lineNumber":1485,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":1486,"author":{"gitID":"-"},"content":""},{"lineNumber":1487,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1488,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":1489,"author":{"gitID":"-"},"content":""},{"lineNumber":1490,"author":{"gitID":"RyanAngJY"},"content":"\u003d\u003d\u003d Editing documentation"},{"lineNumber":1491,"author":{"gitID":"-"},"content":""},{"lineNumber":1492,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render *.adoc* files locally to preview the end result of your edits."},{"lineNumber":1493,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your *.adoc* files in real-time."},{"lineNumber":1494,"author":{"gitID":"-"},"content":""},{"lineNumber":1495,"author":{"gitID":"RyanAngJY"},"content":"\u003d\u003d\u003d Publishing documentation"},{"lineNumber":1496,"author":{"gitID":"-"},"content":""},{"lineNumber":1497,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":1498,"author":{"gitID":"-"},"content":""},{"lineNumber":1499,"author":{"gitID":"RyanAngJY"},"content":"\u003d\u003d\u003d Converting documentation to PDF format"},{"lineNumber":1500,"author":{"gitID":"-"},"content":""},{"lineNumber":1501,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in web pages."},{"lineNumber":1502,"author":{"gitID":"-"},"content":""},{"lineNumber":1503,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":1504,"author":{"gitID":"-"},"content":""},{"lineNumber":1505,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the *docs/* directory to HTML format."},{"lineNumber":1506,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the *build/docs* folder, right click on them and select *Open with -\u003e Google Chrome*."},{"lineNumber":1507,"author":{"gitID":"-"},"content":".  Within Chrome, click on the *Print* option in Chrome\u0027s menu."},{"lineNumber":1508,"author":{"gitID":"-"},"content":".  Set the destination to *Save as PDF*, then click *Save* to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":1509,"author":{"gitID":"-"},"content":""},{"lineNumber":1510,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":1511,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":1512,"author":{"gitID":"-"},"content":""},{"lineNumber":1513,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":1514,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":1515,"author":{"gitID":"-"},"content":""},{"lineNumber":1516,"author":{"gitID":"RyanAngJY"},"content":"\u003d\u003d\u003d Running tests"},{"lineNumber":1517,"author":{"gitID":"-"},"content":""},{"lineNumber":1518,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":1519,"author":{"gitID":"-"},"content":""},{"lineNumber":1520,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1521,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":1522,"author":{"gitID":"-"},"content":""},{"lineNumber":1523,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":1524,"author":{"gitID":"-"},"content":""},{"lineNumber":1525,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the *src/test/java* folder and choose *Run \u0027All Tests\u0027*."},{"lineNumber":1526,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose *Run \u0027ABC\u0027*."},{"lineNumber":1527,"author":{"gitID":"-"},"content":""},{"lineNumber":1528,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":1529,"author":{"gitID":"-"},"content":""},{"lineNumber":1530,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)."},{"lineNumber":1531,"author":{"gitID":"-"},"content":""},{"lineNumber":1532,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1533,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":1534,"author":{"gitID":"-"},"content":""},{"lineNumber":1535,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":1536,"author":{"gitID":"-"},"content":""},{"lineNumber":1537,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":1538,"author":{"gitID":"-"},"content":""},{"lineNumber":1539,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)."},{"lineNumber":1540,"author":{"gitID":"-"},"content":""},{"lineNumber":1541,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":1542,"author":{"gitID":"-"},"content":""},{"lineNumber":1543,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":1544,"author":{"gitID":"-"},"content":""},{"lineNumber":1545,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":1546,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":1547,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.recipe.ui` package."},{"lineNumber":1548,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":1549,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":1550,"author":{"gitID":"-"},"content":"e.g. `seedu.recipe.commons.StringUtilTest`"},{"lineNumber":1551,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":1552,"author":{"gitID":"-"},"content":"e.g. `seedu.recipe.storage.StorageManagerTest`"},{"lineNumber":1553,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These tests are checking multiple code units as well as how they are connected together. +"},{"lineNumber":1554,"author":{"gitID":"-"},"content":"e.g. `seedu.recipe.logic.LogicManagerTest`"},{"lineNumber":1555,"author":{"gitID":"-"},"content":""},{"lineNumber":1556,"author":{"gitID":"-"},"content":""},{"lineNumber":1557,"author":{"gitID":"RyanAngJY"},"content":"\u003d\u003d\u003d Troubleshooting testing"},{"lineNumber":1558,"author":{"gitID":"-"},"content":"**Problem: `_HelpWindowTest_` fails with a `_NullPointerException_`.**"},{"lineNumber":1559,"author":{"gitID":"-"},"content":""},{"lineNumber":1560,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, *UserGuide.html* in *src/main/resources/docs* is missing."},{"lineNumber":1561,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task *processResources*."},{"lineNumber":1562,"author":{"gitID":"-"},"content":""},{"lineNumber":1563,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":1564,"author":{"gitID":"-"},"content":""},{"lineNumber":1565,"author":{"gitID":"RyanAngJY"},"content":"\u003d\u003d\u003d Build automation"},{"lineNumber":1566,"author":{"gitID":"-"},"content":""},{"lineNumber":1567,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":1568,"author":{"gitID":"-"},"content":""},{"lineNumber":1569,"author":{"gitID":"RyanAngJY"},"content":"\u003d\u003d\u003d Continuous integration"},{"lineNumber":1570,"author":{"gitID":"-"},"content":""},{"lineNumber":1571,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":1572,"author":{"gitID":"-"},"content":""},{"lineNumber":1573,"author":{"gitID":"RyanAngJY"},"content":"\u003d\u003d\u003d Coverage reporting"},{"lineNumber":1574,"author":{"gitID":"-"},"content":""},{"lineNumber":1575,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":1576,"author":{"gitID":"-"},"content":""},{"lineNumber":1577,"author":{"gitID":"RyanAngJY"},"content":"\u003d\u003d\u003d Documentation previews"},{"lineNumber":1578,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":1579,"author":{"gitID":"-"},"content":""},{"lineNumber":1580,"author":{"gitID":"RyanAngJY"},"content":"\u003d\u003d\u003d Making a release"},{"lineNumber":1581,"author":{"gitID":"-"},"content":""},{"lineNumber":1582,"author":{"gitID":"-"},"content":"Here are the steps to create a new release:"},{"lineNumber":1583,"author":{"gitID":"-"},"content":""},{"lineNumber":1584,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/recipe/MainApp.java[`MainApp.java`]."},{"lineNumber":1585,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":1586,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. *v0.1*"},{"lineNumber":1587,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":1588,"author":{"gitID":"-"},"content":""},{"lineNumber":1589,"author":{"gitID":"RyanAngJY"},"content":"\u003d\u003d\u003d Managing dependencies"},{"lineNumber":1590,"author":{"gitID":"-"},"content":""},{"lineNumber":1591,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, Recipe Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":1592,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size). +"},{"lineNumber":1593,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)."},{"lineNumber":1594,"author":{"gitID":"-"},"content":""},{"lineNumber":1595,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":1596,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1597,"author":{"gitID":"RyanAngJY"},"content":"\u003d\u003d Suggested programming tasks to get started"},{"lineNumber":1598,"author":{"gitID":"-"},"content":""},{"lineNumber":1599,"author":{"gitID":"-"},"content":"Suggested path for new programmers:"},{"lineNumber":1600,"author":{"gitID":"-"},"content":""},{"lineNumber":1601,"author":{"gitID":"-"},"content":"1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":1602,"author":{"gitID":"-"},"content":""},{"lineNumber":1603,"author":{"gitID":"-"},"content":"2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":1604,"author":{"gitID":"-"},"content":""},{"lineNumber":1605,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-EachComponent]]"},{"lineNumber":1606,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Improving each component"},{"lineNumber":1607,"author":{"gitID":"-"},"content":""},{"lineNumber":1608,"author":{"gitID":"-"},"content":"Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."},{"lineNumber":1609,"author":{"gitID":"-"},"content":""},{"lineNumber":1610,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1611,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Logic` component"},{"lineNumber":1612,"author":{"gitID":"-"},"content":""},{"lineNumber":1613,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `logic`. During dog-fooding, your team realizes that it is troublesome for the user to type the whole command in order to execute a command. Your team devises some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."},{"lineNumber":1614,"author":{"gitID":"-"},"content":""},{"lineNumber":1615,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1616,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."},{"lineNumber":1617,"author":{"gitID":"-"},"content":""},{"lineNumber":1618,"author":{"gitID":"-"},"content":". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all recipes in the list."},{"lineNumber":1619,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1620,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1621,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":1622,"author":{"gitID":"-"},"content":"** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/recipe/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/recipe/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."},{"lineNumber":1623,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/recipe/logic/parser/RecipeBookParser.java[`_RecipeBookParser_`] is responsible for analyzing command words."},{"lineNumber":1624,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1625,"author":{"gitID":"-"},"content":"** Modify the switch statement in link:{repoURL}/src/main/java/seedu/recipe/logic/parser/RecipeBookParser.java[`RecipeBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."},{"lineNumber":1626,"author":{"gitID":"-"},"content":"** Add new tests for each of the aliases that you have added."},{"lineNumber":1627,"author":{"gitID":"-"},"content":"** Update the user guide to document the new aliases."},{"lineNumber":1628,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."},{"lineNumber":1629,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1630,"author":{"gitID":"-"},"content":""},{"lineNumber":1631,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1632,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Model` component"},{"lineNumber":1633,"author":{"gitID":"-"},"content":""},{"lineNumber":1634,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from every entry in the recipe book, but the model API does not support such a functionality at the moment. Your job is to implement an API method so that your teammate can use your API to implement his command."},{"lineNumber":1635,"author":{"gitID":"-"},"content":""},{"lineNumber":1636,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1637,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."},{"lineNumber":1638,"author":{"gitID":"-"},"content":""},{"lineNumber":1639,"author":{"gitID":"-"},"content":". Add a `removeTag(Tag)` method. The specified tag will be removed from every entry in the recipe book."},{"lineNumber":1640,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1641,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1642,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":1643,"author":{"gitID":"-"},"content":"** The link:{repoURL}/src/main/java/seedu/recipe/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/recipe/model/RecipeBook.java[`_RecipeBook_`] API need to be updated."},{"lineNumber":1644,"author":{"gitID":"-"},"content":"** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"},{"lineNumber":1645,"author":{"gitID":"-"},"content":"**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/recipe/model/RecipeBook.java[`_RecipeBook_`] and link:{repoURL}/src/main/java/seedu/recipe/model/recipe/Recipe.java[`_Recipe_`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/recipe/model/RecipeBook.java[`_RecipeBook_`] allows you to update a recipe, and link:{repoURL}/src/main/java/seedu/recipe/model/recipe/Recipe.java[`_Recipe_`] allows you to update the tags."},{"lineNumber":1646,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1647,"author":{"gitID":"-"},"content":"** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/recipe/model/RecipeBook.java[`_RecipeBook_`]. Loop through each recipe, and remove the `tag` from each recipe."},{"lineNumber":1648,"author":{"gitID":"-"},"content":"** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/recipe/model/ModelManager.java[`_ModelManager_`]. Your link:{repoURL}/src/main/java/seedu/recipe/model/ModelManager.java[`_ModelManager_`] should call `RecipeBook#removeTag(Tag)`."},{"lineNumber":1649,"author":{"gitID":"-"},"content":"** Add new tests for each of the new public methods that you have added."},{"lineNumber":1650,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."},{"lineNumber":1651,"author":{"gitID":"-"},"content":"*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/recipe/model/RecipeBook.java[`_RecipeBook_`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."},{"lineNumber":1652,"author":{"gitID":"-"},"content":"*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."},{"lineNumber":1653,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1654,"author":{"gitID":"-"},"content":""},{"lineNumber":1655,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1656,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Ui` component"},{"lineNumber":1657,"author":{"gitID":"-"},"content":""},{"lineNumber":1658,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your recipe book application. You realize that one of the users occasionally tries to delete non-existent tags from a recipe, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list because he keeps forgetting the index of the last recipe in the list. Your job is to implement improvements to the UI to solve all these problems."},{"lineNumber":1659,"author":{"gitID":"-"},"content":""},{"lineNumber":1660,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1661,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."},{"lineNumber":1662,"author":{"gitID":"-"},"content":""},{"lineNumber":1663,"author":{"gitID":"-"},"content":". Use different colors for different tags inside recipe cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."},{"lineNumber":1664,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1665,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":1666,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1667,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-before.png[width\u003d\"300\"]"},{"lineNumber":1668,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1669,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":1670,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1671,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-after.png[width\u003d\"300\"]"},{"lineNumber":1672,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1673,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1674,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":1675,"author":{"gitID":"-"},"content":"** The tag labels are created inside link:{repoURL}/src/main/java/seedu/recipe/ui/RecipeCard.java[the `_RecipeCard_` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `_Label_` class] allows you to modify the style of each Label, such as changing its color."},{"lineNumber":1676,"author":{"gitID":"-"},"content":"** Use the .css attribute `-fx-background-color` to add a color."},{"lineNumber":1677,"author":{"gitID":"-"},"content":"** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[*DarkTheme.css*] to include some pre-defined colors using CSS, especially if you have experience with web-based CSS."},{"lineNumber":1678,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1679,"author":{"gitID":"-"},"content":"** You can modify the existing test methods for `_RecipeCard_` \u0027s to include testing the tag\u0027s color as well."},{"lineNumber":1680,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."},{"lineNumber":1681,"author":{"gitID":"-"},"content":"*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."},{"lineNumber":1682,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1683,"author":{"gitID":"-"},"content":""},{"lineNumber":1684,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/recipe/commons/events/ui/NewResultAvailableEvent.java[`_NewResultAvailableEvent_`] such that link:{repoURL}/src/main/java/seedu/recipe/ui/ResultDisplay.java[`_ResultDisplay_`] can show a different style on error (currently it shows the same regardless of errors)."},{"lineNumber":1685,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1686,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":1687,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1688,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-before.png[width\u003d\"200\"]"},{"lineNumber":1689,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1690,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":1691,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1692,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-after.png[width\u003d\"200\"]"},{"lineNumber":1693,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1694,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1695,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":1696,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/recipe/commons/events/ui/NewResultAvailableEvent.java[`_NewResultAvailableEvent_`] is raised by link:{repoURL}/src/main/java/seedu/recipe/ui/CommandBox.java[`_CommandBox_`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/recipe/ui/ResultDisplay.java[`_ResultDisplay_`] which is where we want to change the style to."},{"lineNumber":1697,"author":{"gitID":"-"},"content":"** Refer to link:{repoURL}/src/main/java/seedu/recipe/ui/CommandBox.java[`_CommandBox_`] for an example on how to display an error."},{"lineNumber":1698,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1699,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/recipe/commons/events/ui/NewResultAvailableEvent.java[`_NewResultAvailableEvent_`] \u0027s constructor so that users of the event can indicate whether an error has occurred."},{"lineNumber":1700,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/recipe/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."},{"lineNumber":1701,"author":{"gitID":"-"},"content":"** You can write two different kinds of tests to ensure that the functionality works:"},{"lineNumber":1702,"author":{"gitID":"-"},"content":"*** The unit tests for `_ResultDisplay_` can be modified to include verification of the color."},{"lineNumber":1703,"author":{"gitID":"-"},"content":"*** The system tests link:{repoURL}/src/test/java/systemtests/RecipeBookSystemTest.java[`RecipeBookSystemTest#assertCommandBoxShowsDefaultStyle() and RecipeBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `_ResultDisplay_` as well."},{"lineNumber":1704,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."},{"lineNumber":1705,"author":{"gitID":"-"},"content":"*** Do read the commits one at a time if you feel overwhelmed."},{"lineNumber":1706,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1707,"author":{"gitID":"-"},"content":""},{"lineNumber":1708,"author":{"gitID":"-"},"content":". Modify the link:{repoURL}/src/main/java/seedu/recipe/ui/StatusBarFooter.java[`_StatusBarFooter_`] to show the total number of recipes in the recipe book."},{"lineNumber":1709,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1710,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":1711,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1712,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-before.png[width\u003d\"500\"]"},{"lineNumber":1713,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1714,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":1715,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1716,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-after.png[width\u003d\"500\"]"},{"lineNumber":1717,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1718,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1719,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":1720,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[StatusBarFooter.fxml] will need a new `_StatusBar_`. Be sure to set the `GridPane.columnIndex` properly for each `_StatusBar_` to avoid misalignment!"},{"lineNumber":1721,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/recipe/ui/StatusBarFooter.java[`_StatusBarFooter_`] needs to initialize the status bar on application start, and to update it accordingly whenever the recipe book is updated."},{"lineNumber":1722,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1723,"author":{"gitID":"-"},"content":"** Modify the constructor of link:{repoURL}/src/main/java/seedu/recipe/ui/StatusBarFooter.java[`_StatusBarFooter_`] to take in the number of recipes when the application just started."},{"lineNumber":1724,"author":{"gitID":"-"},"content":"** Use link:{repoURL}/src/main/java/seedu/recipe/ui/StatusBarFooter.java[`StatusBarFooter#handleRecipeBookChangedEvent(RecipeBookChangedEvent)`] to update the number of recipes whenever there are new changes to the Recipe Book."},{"lineNumber":1725,"author":{"gitID":"-"},"content":"** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`_StatusBarFooterHandle_`] by adding a state-saving functionality for the total number of recipes status, just like what we did for save location and sync status."},{"lineNumber":1726,"author":{"gitID":"-"},"content":"** For system tests, modify link:{repoURL}/src/test/java/systemtests/RecipeBookSystemTest.java[`_RecipeBookSystemTest_`] to also verify the new total number of recipes status bar."},{"lineNumber":1727,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."},{"lineNumber":1728,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1729,"author":{"gitID":"-"},"content":""},{"lineNumber":1730,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1731,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Storage` component"},{"lineNumber":1732,"author":{"gitID":"-"},"content":""},{"lineNumber":1733,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the recipe book to the cloud. However, the current implementation of the application constantly saves the recipe book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the recipe book storage."},{"lineNumber":1734,"author":{"gitID":"-"},"content":""},{"lineNumber":1735,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1736,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."},{"lineNumber":1737,"author":{"gitID":"-"},"content":""},{"lineNumber":1738,"author":{"gitID":"-"},"content":". Add a new method `backupRecipeBook(ReadOnlyRecipeBook)`, so that the recipe book can be saved in a fixed temporary location."},{"lineNumber":1739,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1740,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1741,"author":{"gitID":"-"},"content":"* Hint"},{"lineNumber":1742,"author":{"gitID":"-"},"content":"** Add the API method in link:{repoURL}/src/main/java/seedu/recipe/storage/RecipeBookStorage.java[`_RecipeBookStorage_`] interface."},{"lineNumber":1743,"author":{"gitID":"-"},"content":"** Implement the logic in link:{repoURL}/src/main/java/seedu/recipe/storage/StorageManager.java[`_StorageManager_`] and link:{repoURL}/src/main/java/seedu/recipe/storage/XmlRecipeBookStorage.java[`_XmlRecipeBookStorage_`] class."},{"lineNumber":1744,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1745,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."},{"lineNumber":1746,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1747,"author":{"gitID":"-"},"content":""},{"lineNumber":1748,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":1749,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":1750,"author":{"gitID":"-"},"content":""},{"lineNumber":1751,"author":{"gitID":"-"},"content":"By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":1752,"author":{"gitID":"-"},"content":""},{"lineNumber":1753,"author":{"gitID":"-"},"content":"*Scenario:* You are a software maintainer for *ReciRecipé*, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular recipe, by providing a flexible `remark` field for each recipe, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":1754,"author":{"gitID":"-"},"content":""},{"lineNumber":1755,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Description"},{"lineNumber":1756,"author":{"gitID":"-"},"content":"Edits the remark for a recipe specified in the `INDEX`. +"},{"lineNumber":1757,"author":{"gitID":"-"},"content":"Format: `remark INDEX r/[REMARK]`"},{"lineNumber":1758,"author":{"gitID":"-"},"content":""},{"lineNumber":1759,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":1760,"author":{"gitID":"-"},"content":""},{"lineNumber":1761,"author":{"gitID":"-"},"content":"* `remark 1 r/This is a fictional recipe.` +"},{"lineNumber":1762,"author":{"gitID":"-"},"content":"Edits the remark for the first recipe to `This is a fictional recipe.`"},{"lineNumber":1763,"author":{"gitID":"-"},"content":"* `remark 1 r/` +"},{"lineNumber":1764,"author":{"gitID":"-"},"content":"Removes the remark for the first recipe."},{"lineNumber":1765,"author":{"gitID":"-"},"content":""},{"lineNumber":1766,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":1767,"author":{"gitID":"-"},"content":""},{"lineNumber":1768,"author":{"gitID":"-"},"content":"**[Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing.**"},{"lineNumber":1769,"author":{"gitID":"-"},"content":"Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":1770,"author":{"gitID":"-"},"content":""},{"lineNumber":1771,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Main:"},{"lineNumber":1772,"author":{"gitID":"-"},"content":""},{"lineNumber":1773,"author":{"gitID":"-"},"content":". Add a `_RemarkCommand_` that extends link:{repoURL}/src/main/java/seedu/recipe/logic/commands/UndoableCommand.java[`_UndoableCommand_`]. Upon execution, it should just throw an `_Exception_`."},{"lineNumber":1774,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/recipe/logic/parser/RecipeBookParser.java[`_RecipeBookParser_`] to accept a `_RemarkCommand_`."},{"lineNumber":1775,"author":{"gitID":"-"},"content":""},{"lineNumber":1776,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Tests:"},{"lineNumber":1777,"author":{"gitID":"-"},"content":""},{"lineNumber":1778,"author":{"gitID":"-"},"content":". Add `_RemarkCommandTest_` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":1779,"author":{"gitID":"-"},"content":". Add new test method to link:{repoURL}/src/test/java/seedu/recipe/logic/parser/RecipeBookParserTest.java[`_RecipeBookParserTest_`], which tests that typing \"remark\" returns an instance of `_RemarkCommand_`."},{"lineNumber":1780,"author":{"gitID":"-"},"content":""},{"lineNumber":1781,"author":{"gitID":"-"},"content":"**[Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments.**"},{"lineNumber":1782,"author":{"gitID":"-"},"content":"Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/This is a fictional recipe.`"},{"lineNumber":1783,"author":{"gitID":"-"},"content":""},{"lineNumber":1784,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Main:"},{"lineNumber":1785,"author":{"gitID":"-"},"content":""},{"lineNumber":1786,"author":{"gitID":"-"},"content":". Modify `_RemarkCommand_` to take in an `_Index_` and `_String_` and print those two parameters as the error message."},{"lineNumber":1787,"author":{"gitID":"-"},"content":". Add `_RemarkCommandParser_` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":1788,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/recipe/logic/parser/RecipeBookParser.java[`_RecipeBookParser_`] to use the newly implemented `_RemarkCommandParser_`."},{"lineNumber":1789,"author":{"gitID":"-"},"content":""},{"lineNumber":1790,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Tests:"},{"lineNumber":1791,"author":{"gitID":"-"},"content":""},{"lineNumber":1792,"author":{"gitID":"-"},"content":". Modify `_RemarkCommandTest_` to test the `RemarkCommand#equals()` method."},{"lineNumber":1793,"author":{"gitID":"-"},"content":". Add `_RemarkCommandParserTest_` that tests different boundary values"},{"lineNumber":1794,"author":{"gitID":"-"},"content":"for `_RemarkCommandParser_`."},{"lineNumber":1795,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/recipe/logic/parser/RecipeBookParserTest.java[`_RecipeBookParserTest_`] to test that the correct command is generated according to the user input."},{"lineNumber":1796,"author":{"gitID":"-"},"content":""},{"lineNumber":1797,"author":{"gitID":"-"},"content":"**[Step 3] Ui: Add a placeholder for remark in `_RecipeCard_`.**"},{"lineNumber":1798,"author":{"gitID":"-"},"content":"Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/recipe/ui/RecipeCard.java[`_RecipeCard_`] s to display a remark for each recipe later."},{"lineNumber":1799,"author":{"gitID":"-"},"content":""},{"lineNumber":1800,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Main:"},{"lineNumber":1801,"author":{"gitID":"-"},"content":""},{"lineNumber":1802,"author":{"gitID":"-"},"content":". Add a `_Label_` with any random text inside link:{repoURL}/src/main/resources/view/RecipeListCard.fxml[RecipeListCard.fxml]."},{"lineNumber":1803,"author":{"gitID":"-"},"content":". Add FXML annotation in link:{repoURL}/src/main/java/seedu/recipe/ui/RecipeCard.java[`_RecipeCard_`] to tie the variable to the actual label."},{"lineNumber":1804,"author":{"gitID":"-"},"content":""},{"lineNumber":1805,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Tests:"},{"lineNumber":1806,"author":{"gitID":"-"},"content":""},{"lineNumber":1807,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/guitests/guihandles/RecipeCardHandle.java[`_RecipeCardHandle_`] so that future tests can read the contents of the remark label."},{"lineNumber":1808,"author":{"gitID":"-"},"content":""},{"lineNumber":1809,"author":{"gitID":"-"},"content":"**[Step 4] Model: Add `_Remark_` class.**"},{"lineNumber":1810,"author":{"gitID":"-"},"content":"We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/recipe/model/recipe/Recipe.java[`_Recipe_`] class. Instead of just using a `_String_`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `_Remark_` class."},{"lineNumber":1811,"author":{"gitID":"-"},"content":""},{"lineNumber":1812,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Main:"},{"lineNumber":1813,"author":{"gitID":"-"},"content":""},{"lineNumber":1814,"author":{"gitID":"-"},"content":". Add `_Remark_` to model component (you can copy from link:{repoURL}/src/main/java/seedu/recipe/model/recipe/Instruction.java[`_Instruction_`], remove the regex and change the names accordingly)."},{"lineNumber":1815,"author":{"gitID":"-"},"content":". Modify `_RemarkCommand_` to now take in a `_Remark_` instead of a `_String_`."},{"lineNumber":1816,"author":{"gitID":"-"},"content":""},{"lineNumber":1817,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Tests:"},{"lineNumber":1818,"author":{"gitID":"-"},"content":""},{"lineNumber":1819,"author":{"gitID":"-"},"content":". Add test for `_Remark_`, to test the `Remark#equals()` method."},{"lineNumber":1820,"author":{"gitID":"-"},"content":""},{"lineNumber":1821,"author":{"gitID":"-"},"content":"**[Step 5] Model: Modify `_Recipe_` to support a `_Remark_` field.**"},{"lineNumber":1822,"author":{"gitID":"-"},"content":"Now we have the `_Remark_` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/recipe/model/recipe/Recipe.java[`_Recipe_`]."},{"lineNumber":1823,"author":{"gitID":"-"},"content":""},{"lineNumber":1824,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Main:"},{"lineNumber":1825,"author":{"gitID":"-"},"content":""},{"lineNumber":1826,"author":{"gitID":"-"},"content":". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/recipe/model/recipe/Recipe.java[`_Recipe_`]."},{"lineNumber":1827,"author":{"gitID":"RyanAngJY"},"content":". You may assume that the user will not be able to use the *`add`* and `edit` commands to modify the remarks field (i.e. the recipe will be created without a remark)."},{"lineNumber":1828,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/recipe/model/util/SampleDataUtil.java/[`_SampleDataUtil_`] to add remarks for the sample data (delete your *recipeBook.xml* so that the application will load the sample data when you launch it.)"},{"lineNumber":1829,"author":{"gitID":"-"},"content":""},{"lineNumber":1830,"author":{"gitID":"-"},"content":"**[Step 6] Storage: Add `_Remark_` field to `_XmlAdaptedRecipe_` class.**"},{"lineNumber":1831,"author":{"gitID":"-"},"content":"We now have `_Remark_` s for `_Recipe_` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/recipe/storage/XmlAdaptedRecipe.java[`_XmlAdaptedRecipe_`] to include a `_Remark_` field so that it will be saved."},{"lineNumber":1832,"author":{"gitID":"-"},"content":""},{"lineNumber":1833,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Main:"},{"lineNumber":1834,"author":{"gitID":"-"},"content":""},{"lineNumber":1835,"author":{"gitID":"-"},"content":". Add a new XML field for `_Remark_`."},{"lineNumber":1836,"author":{"gitID":"-"},"content":""},{"lineNumber":1837,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Tests:"},{"lineNumber":1838,"author":{"gitID":"-"},"content":""},{"lineNumber":1839,"author":{"gitID":"-"},"content":". Fix *invalidAndValidRecipeRecipeBook.xml*, *typicalRecipesRecipeBook.xml*, *validRecipeBook.xml* etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":1840,"author":{"gitID":"-"},"content":""},{"lineNumber":1841,"author":{"gitID":"-"},"content":"**[Step 6b] Test: Add withRemark() for `_RecipeBuilder_`.**"},{"lineNumber":1842,"author":{"gitID":"-"},"content":"Since `_Recipe_` can now have a `_Remark_`, we should add a helper method to link:{repoURL}/src/test/java/seedu/recipe/testutil/RecipeBuilder.java[`_RecipeBuilder_`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/recipe/model/recipe/Recipe.java[`_Recipe_`]."},{"lineNumber":1843,"author":{"gitID":"-"},"content":""},{"lineNumber":1844,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Tests:"},{"lineNumber":1845,"author":{"gitID":"-"},"content":""},{"lineNumber":1846,"author":{"gitID":"-"},"content":". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/recipe/testutil/RecipeBuilder.java[`_RecipeBuilder_`]. This method will create a new `_Remark_` for the recipe that it is currently building."},{"lineNumber":1847,"author":{"gitID":"-"},"content":". Try and use the method on any sample `_Recipe_` in link:{repoURL}/src/test/java/seedu/recipe/testutil/TypicalRecipes.java[`_TypicalRecipes_`]."},{"lineNumber":1848,"author":{"gitID":"-"},"content":""},{"lineNumber":1849,"author":{"gitID":"-"},"content":"**[Step 7] Ui: Connect `_Remark_` field to `_RecipeCard_`.**"},{"lineNumber":1850,"author":{"gitID":"-"},"content":"Our remark label in link:{repoURL}/src/main/java/seedu/recipe/ui/RecipeCard.java[`_RecipeCard_`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":1851,"author":{"gitID":"-"},"content":""},{"lineNumber":1852,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Main:"},{"lineNumber":1853,"author":{"gitID":"-"},"content":""},{"lineNumber":1854,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/recipe/ui/RecipeCard.java[`_RecipeCard_`]\u0027s constructor to bind the `_Remark_` field to the `_Recipe_` \u0027s remark."},{"lineNumber":1855,"author":{"gitID":"-"},"content":""},{"lineNumber":1856,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Tests:"},{"lineNumber":1857,"author":{"gitID":"-"},"content":""},{"lineNumber":1858,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/recipe/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysRecipe(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":1859,"author":{"gitID":"-"},"content":""},{"lineNumber":1860,"author":{"gitID":"-"},"content":"**[Step 8] Logic: Implement `RemarkCommand#execute()` logic.**"},{"lineNumber":1861,"author":{"gitID":"-"},"content":"We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":1862,"author":{"gitID":"-"},"content":""},{"lineNumber":1863,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Main:"},{"lineNumber":1864,"author":{"gitID":"-"},"content":""},{"lineNumber":1865,"author":{"gitID":"-"},"content":". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `_Exception_`), with the actual logic to modify the remarks of a recipe."},{"lineNumber":1866,"author":{"gitID":"-"},"content":""},{"lineNumber":1867,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Tests:"},{"lineNumber":1868,"author":{"gitID":"-"},"content":""},{"lineNumber":1869,"author":{"gitID":"-"},"content":". Update `_RemarkCommandTest_` to test that the `execute()` logic works."},{"lineNumber":1870,"author":{"gitID":"-"},"content":""},{"lineNumber":1871,"author":{"gitID":"-"},"content":"**Full Solution**"},{"lineNumber":1872,"author":{"gitID":"-"},"content":""},{"lineNumber":1873,"author":{"gitID":"-"},"content":"See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."},{"lineNumber":1874,"author":{"gitID":"-"},"content":""},{"lineNumber":1875,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1876,"author":{"gitID":"RyanAngJY"},"content":"\u003d\u003d Product scope"},{"lineNumber":1877,"author":{"gitID":"-"},"content":""},{"lineNumber":1878,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":1879,"author":{"gitID":"-"},"content":""},{"lineNumber":1880,"author":{"gitID":"-"},"content":"* has a need to manage a significant number of recipes."},{"lineNumber":1881,"author":{"gitID":"-"},"content":"* prefers desktop apps over other types."},{"lineNumber":1882,"author":{"gitID":"-"},"content":"* can type fast."},{"lineNumber":1883,"author":{"gitID":"-"},"content":"* prefers typing over mouse input."},{"lineNumber":1884,"author":{"gitID":"-"},"content":"* is reasonably comfortable using \u003c\u003cCLI,CLI\u003e\u003e apps."},{"lineNumber":1885,"author":{"gitID":"-"},"content":""},{"lineNumber":1886,"author":{"gitID":"-"},"content":"*Value proposition*: manage recipes faster than a typical mouse/GUI driven app."},{"lineNumber":1887,"author":{"gitID":"-"},"content":""},{"lineNumber":1888,"author":{"gitID":"-"},"content":"*Feature contribution*:"},{"lineNumber":1889,"author":{"gitID":"-"},"content":""},{"lineNumber":1890,"author":{"gitID":"-"},"content":"*Ryan* - Media: As a user, I want to share my personal recipes with my friends so that they can try my recipes."},{"lineNumber":1891,"author":{"gitID":"-"},"content":""},{"lineNumber":1892,"author":{"gitID":"-"},"content":"* *`Major`*: Sharing recipes on social media."},{"lineNumber":1893,"author":{"gitID":"-"},"content":"* `Minor`: Adding URL to recipes."},{"lineNumber":1894,"author":{"gitID":"-"},"content":"* `Minor`: Adding images to recipes."},{"lineNumber":1895,"author":{"gitID":"-"},"content":""},{"lineNumber":1896,"author":{"gitID":"-"},"content":"*Nicholas* - Portability: As a user, I want to have my data always ready on the \u003c\u003ccloud, cloud\u003e\u003e so that I can quickly import it to another device."},{"lineNumber":1897,"author":{"gitID":"-"},"content":""},{"lineNumber":1898,"author":{"gitID":"-"},"content":"* *`Major`*: Backing up app data online (\u003c\u003ccloud, cloud storage\u003e\u003e)."},{"lineNumber":1899,"author":{"gitID":"-"},"content":"* `Minor`: Searching for recipes by tags."},{"lineNumber":1900,"author":{"gitID":"-"},"content":"* `Minor`: Searching for recipes by ingredients."},{"lineNumber":1901,"author":{"gitID":"-"},"content":""},{"lineNumber":1902,"author":{"gitID":"-"},"content":"*Hoang Duong* - Efficiency: As a user, I want to efficiently manage my recipes so that I can save time."},{"lineNumber":1903,"author":{"gitID":"-"},"content":""},{"lineNumber":1904,"author":{"gitID":"-"},"content":"* *`Major`*: Auto-completion and keyboard shortcuts."},{"lineNumber":1905,"author":{"gitID":"-"},"content":"* `Minor`: Grouping recipes."},{"lineNumber":1906,"author":{"gitID":"-"},"content":""},{"lineNumber":1907,"author":{"gitID":"-"},"content":"*Thanh Nguyen* - Optimization: As a user, I want to add recipes from the Internet without manual copy-pasting so that I can optimize my time."},{"lineNumber":1908,"author":{"gitID":"-"},"content":""},{"lineNumber":1909,"author":{"gitID":"-"},"content":"* *`Major`*: Searching and importing recipes from the Internet."},{"lineNumber":1910,"author":{"gitID":"-"},"content":"* `Minor`: Adding recipes in a user friendly and intuitive manner (input with multiple lines)."},{"lineNumber":1911,"author":{"gitID":"-"},"content":"* `Minor`: Toggling between themes."},{"lineNumber":1912,"author":{"gitID":"-"},"content":""},{"lineNumber":1913,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1914,"author":{"gitID":"RyanAngJY"},"content":"\u003d\u003d User stories"},{"lineNumber":1915,"author":{"gitID":"-"},"content":""},{"lineNumber":1916,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":1917,"author":{"gitID":"-"},"content":""},{"lineNumber":1918,"author":{"gitID":"-"},"content":"[width\u003d\"95%\",cols\u003d\"22%,\u003c23%,\u003c35%,\u003c50%\",options\u003d\"header\".]"},{"lineNumber":1919,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1920,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":1921,"author":{"gitID":"hoangduong1607"},"content":"|`* * *` |Home cook |Add a text recipe |Store my favourite recipes"},{"lineNumber":1922,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1923,"author":{"gitID":"hoangduong1607"},"content":"|`* * *` |Home cook |Delete a recipe |Remove recipes which I do not want"},{"lineNumber":1924,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1925,"author":{"gitID":"hoangduong1607"},"content":"|`* * *` |Home cook |Find a recipe by name |Locate a recipe without having to search through my entire recipe list"},{"lineNumber":1926,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1927,"author":{"gitID":"hoangduong1607"},"content":"|`* * *` |Home cook |Find a recipe by ingredient |Locate recipes that can be cooked with the ingredients I have"},{"lineNumber":1928,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1929,"author":{"gitID":"hoangduong1607"},"content":"|`* * *` |Home cook |Edit a recipe |Tweak the stored recipes to my liking"},{"lineNumber":1930,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1931,"author":{"gitID":"hoangduong1607"},"content":"|`* * *` |Home cook |Sort recipes by name |Locate a recipe easily"},{"lineNumber":1932,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1933,"author":{"gitID":"hoangduong1607"},"content":"|`* * *` |Home cook |List all my recipes |Browse through my recipes"},{"lineNumber":1934,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1935,"author":{"gitID":"hoangduong1607"},"content":"|`* * *` |Home cook |Select a recipe |Look at the details of the recipe"},{"lineNumber":1936,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1937,"author":{"gitID":"hoangduong1607"},"content":"|`* * *` |Home cook |Add an image to recipe |See what my product is supposed to look like"},{"lineNumber":1938,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1939,"author":{"gitID":"hoangduong1607"},"content":"|`* * *` |Home cook |Favorite a recipe |Have easy access to the recipes of all my favourite food"},{"lineNumber":1940,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1941,"author":{"gitID":"hoangduong1607"},"content":"|`* * *` |SNS user + cook |Share a recipe |Show an interesting recipe with my friends"},{"lineNumber":1942,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1943,"author":{"gitID":"hoangduong1607"},"content":"|`* * *` |Home cook |Save my files online |Have access to my recipes as long as I have Internet"},{"lineNumber":1944,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1945,"author":{"gitID":"hoangduong1607"},"content":"|`* *` |Home cook |Add a video to recipe |Store my favourite cooking tutorials from YouTube"},{"lineNumber":1946,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1947,"author":{"gitID":"hoangduong1607"},"content":"|`* *` |Home cook |Find a recipe by cuisine |Locate recipes that are of a particular cuisine without having to search through my entire recipe list"},{"lineNumber":1948,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1949,"author":{"gitID":"hoangduong1607"},"content":"|`* *` |Home cook |Rate recipes according to difficulty level |Better categorize my list of recipes"},{"lineNumber":1950,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1951,"author":{"gitID":"hoangduong1607"},"content":"|`* *` |User |Export my recipes to a file |Have a backup to transfer to another device"},{"lineNumber":1952,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1953,"author":{"gitID":"hoangduong1607"},"content":"|`* *` |Returning user |Import recipes from exported lib |Have all my recipes without inputting everything again"},{"lineNumber":1954,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1955,"author":{"gitID":"hoangduong1607"},"content":"|`* *` |Clumsy user |Undo an action |Revert the book to its prior state when I do something wrong with the book"},{"lineNumber":1956,"author":{"gitID":"-"},"content":""},{"lineNumber":1957,"author":{"gitID":"hoangduong1607"},"content":"|`*` |User |See instructions |Refer to the instructions when I forget how to use the app"},{"lineNumber":1958,"author":{"gitID":"-"},"content":""},{"lineNumber":1959,"author":{"gitID":"hoangduong1607"},"content":"|`*` |Home cook |Filter recipes by cooking time |Decide on recipes based on my time constraint"},{"lineNumber":1960,"author":{"gitID":"-"},"content":""},{"lineNumber":1961,"author":{"gitID":"hoangduong1607"},"content":"|`*` |Home cook |Sort recipes by cooking time |See which recipes take longest / shortest to make"},{"lineNumber":1962,"author":{"gitID":"-"},"content":""},{"lineNumber":1963,"author":{"gitID":"hoangduong1607"},"content":"|`*` |Home cook |Filter recipes by difficulty level |Easily locate recipes based on my cooking proficiency"},{"lineNumber":1964,"author":{"gitID":"-"},"content":""},{"lineNumber":1965,"author":{"gitID":"hoangduong1607"},"content":"|`*` |Lazy user |Import recipes from internet |Have my recipes without manually typing out everything"},{"lineNumber":1966,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1967,"author":{"gitID":"hoangduong1607"},"content":"|`*` |Adventurous cook |Get a random recipe |Get a recipe when I don’t know what to make"},{"lineNumber":1968,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1969,"author":{"gitID":"hoangduong1607"},"content":"|`*` |Bodybuilder + Cook |Get energy info of a recipe |Know which dish has more calories than the amount I burn a day"},{"lineNumber":1970,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1971,"author":{"gitID":"hoangduong1607"},"content":"|`*` |Health-conscious cook |Find a recipe by healthiness rating |Be aware of what kind of food I am eating so that I can take better care of my health"},{"lineNumber":1972,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":1973,"author":{"gitID":"hoangduong1607"},"content":"|`*` |Home cook |Customise my UI |Have a personalised look to my RecipeBook"},{"lineNumber":1974,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1975,"author":{"gitID":"-"},"content":""},{"lineNumber":1976,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":1977,"author":{"gitID":"-"},"content":""},{"lineNumber":1978,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1979,"author":{"gitID":"RyanAngJY"},"content":"\u003d\u003d Use cases"},{"lineNumber":1980,"author":{"gitID":"-"},"content":""},{"lineNumber":1981,"author":{"gitID":"-"},"content":"(For all use cases below, the *System* is the *RecipeBook* and the *Actor* is the *user*, unless specified otherwise)."},{"lineNumber":1982,"author":{"gitID":"-"},"content":""},{"lineNumber":1983,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1984,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Adding a recipe"},{"lineNumber":1985,"author":{"gitID":"-"},"content":""},{"lineNumber":1986,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1987,"author":{"gitID":"-"},"content":""},{"lineNumber":1988,"author":{"gitID":"-"},"content":"1.  User types in a format like below."},{"lineNumber":1989,"author":{"gitID":"-"},"content":"[source]"},{"lineNumber":1990,"author":{"gitID":"-"},"content":"add chicken rice"},{"lineNumber":1991,"author":{"gitID":"-"},"content":"Ingredients: chicken, rice, chili, cucumber"},{"lineNumber":1992,"author":{"gitID":"-"},"content":"Preparation time: 15 mins"},{"lineNumber":1993,"author":{"gitID":"-"},"content":"Instruction: Boil water, put in chicken, cook till done"},{"lineNumber":1994,"author":{"gitID":"-"},"content":"Wash rice, drain, put in rice cooker"},{"lineNumber":1995,"author":{"gitID":"-"},"content":"Slice cucumber"},{"lineNumber":1996,"author":{"gitID":"-"},"content":"Put everything on plate"},{"lineNumber":1997,"author":{"gitID":"-"},"content":"2.  RecipeBook adds the recipe with all data given."},{"lineNumber":1998,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1999,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":2000,"author":{"gitID":"-"},"content":""},{"lineNumber":2001,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":2002,"author":{"gitID":"-"},"content":""},{"lineNumber":2003,"author":{"gitID":"-"},"content":"* 1a. User types in invalid format."},{"lineNumber":2004,"author":{"gitID":"-"},"content":"** 1a1. RecipeBook shows user suggestion on the correct format."},{"lineNumber":2005,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2006,"author":{"gitID":"-"},"content":"Use case resumes at step 1."},{"lineNumber":2007,"author":{"gitID":"-"},"content":"* 1b. One of the required field (Name, Ingredient, Instruction) is missing."},{"lineNumber":2008,"author":{"gitID":"-"},"content":"** 1b1. RecipeBook reminds user of missing required fields."},{"lineNumber":2009,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2010,"author":{"gitID":"-"},"content":"Use case resumes at step 1."},{"lineNumber":2011,"author":{"gitID":"-"},"content":"* 1c. User types in an already existing recipe."},{"lineNumber":2012,"author":{"gitID":"-"},"content":"** 1c1. RecipeBook reminds user that such recipe already exists, show the user the recipe."},{"lineNumber":2013,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2014,"author":{"gitID":"-"},"content":"RecipeBook reminds user to put in a version number for the recipe if user wants to add a variation to the recipe."},{"lineNumber":2015,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2016,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":2017,"author":{"gitID":"-"},"content":""},{"lineNumber":2018,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":2019,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Adding a URL to recipe"},{"lineNumber":2020,"author":{"gitID":"-"},"content":""},{"lineNumber":2021,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":2022,"author":{"gitID":"-"},"content":""},{"lineNumber":2023,"author":{"gitID":"-"},"content":"1.  User requests to list recipes."},{"lineNumber":2024,"author":{"gitID":"-"},"content":"2.  RecipeBook shows a list of recipes."},{"lineNumber":2025,"author":{"gitID":"-"},"content":"3.  User requests to add a video URL to a specific recipe in the list using the edit command."},{"lineNumber":2026,"author":{"gitID":"-"},"content":"4.  RecipeBook updates recipe to show an embedded video when recipe is selected."},{"lineNumber":2027,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2028,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":2029,"author":{"gitID":"-"},"content":""},{"lineNumber":2030,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":2031,"author":{"gitID":"-"},"content":""},{"lineNumber":2032,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":2033,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":2034,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2035,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":2036,"author":{"gitID":"-"},"content":""},{"lineNumber":2037,"author":{"gitID":"hoangduong1607"},"content":"* 3a. The given URL is invalid."},{"lineNumber":2038,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2039,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":2040,"author":{"gitID":"hoangduong1607"},"content":"** 3a1. RecipeBook shows an error message."},{"lineNumber":2041,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2042,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":2043,"author":{"gitID":"-"},"content":""},{"lineNumber":2044,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":2045,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Parsing a recipe from a site"},{"lineNumber":2046,"author":{"gitID":"-"},"content":""},{"lineNumber":2047,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":2048,"author":{"gitID":"-"},"content":""},{"lineNumber":2049,"author":{"gitID":"-"},"content":"1.  User requires to parse for a recipe from a site."},{"lineNumber":2050,"author":{"gitID":"RyanAngJY"},"content":"2.  RecipeBook parses the site and put data into their corresponding field in an *`add`* command."},{"lineNumber":2051,"author":{"gitID":"-"},"content":"3.  User fills the missing fields and submits the command."},{"lineNumber":2052,"author":{"gitID":"-"},"content":"4.  RecipeBook adds the recipe with given data."},{"lineNumber":2053,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2054,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":2055,"author":{"gitID":"-"},"content":""},{"lineNumber":2056,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":2057,"author":{"gitID":"-"},"content":""},{"lineNumber":2058,"author":{"gitID":"-"},"content":"* 1a. User requires to parse while nothing is being displayed on the BrowserPanel."},{"lineNumber":2059,"author":{"gitID":"-"},"content":"** 1a1. RecipeBook reminds user that parsing is only possible when a recipe site is shown on the BrowserPanel."},{"lineNumber":2060,"author":{"gitID":"-"},"content":"* 1b. User requires to parse while an invalid site is being displayed on the BrowserPanel."},{"lineNumber":2061,"author":{"gitID":"-"},"content":"** 1b1. RecipeBook reminds user that the current site displayed is not a valid recipe site."},{"lineNumber":2062,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2063,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":2064,"author":{"gitID":"-"},"content":""},{"lineNumber":2065,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":2066,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Searching for a recipe on the Internet"},{"lineNumber":2067,"author":{"gitID":"-"},"content":""},{"lineNumber":2068,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":2069,"author":{"gitID":"-"},"content":""},{"lineNumber":2070,"author":{"gitID":"-"},"content":"1.  User requires to search for a recipe from the Internet."},{"lineNumber":2071,"author":{"gitID":"-"},"content":"2.  RecipeBook shows the search results on the BrowserPanel, RecipeBook also shows the tips on how to navigate with keyboard."},{"lineNumber":2072,"author":{"gitID":"-"},"content":"3.  User navigates with mouse."},{"lineNumber":2073,"author":{"gitID":"-"},"content":"4.  RecipeBook shows the result page on the BrowserPanel."},{"lineNumber":2074,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2075,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":2076,"author":{"gitID":"-"},"content":""},{"lineNumber":2077,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":2078,"author":{"gitID":"-"},"content":""},{"lineNumber":2079,"author":{"gitID":"-"},"content":"* 1a. The recipe does not exist."},{"lineNumber":2080,"author":{"gitID":"-"},"content":"** 1a1. This will be handled by the API. No results will show."},{"lineNumber":2081,"author":{"gitID":"-"},"content":"** 1a2. RecipeBook tells user to try another recipe name."},{"lineNumber":2082,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2083,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":2084,"author":{"gitID":"-"},"content":""},{"lineNumber":2085,"author":{"gitID":"hoangduong1607"},"content":"[discrete]"},{"lineNumber":2086,"author":{"gitID":"hoangduong1607"},"content":"\u003d\u003d\u003d Use case: Searching for a specific type of food"},{"lineNumber":2087,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":2088,"author":{"gitID":"hoangduong1607"},"content":"*MSS*"},{"lineNumber":2089,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":2090,"author":{"gitID":"-"},"content":"1.  User types `find chicken`."},{"lineNumber":2091,"author":{"gitID":"-"},"content":"2.  RecipeBook shows a list of recipes that contain chicken."},{"lineNumber":2092,"author":{"gitID":"-"},"content":"3.  User clicks on a particular recipe."},{"lineNumber":2093,"author":{"gitID":"-"},"content":"4.  RecipeBook displays full recipe and details on the main area."},{"lineNumber":2094,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2095,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":2096,"author":{"gitID":"-"},"content":""},{"lineNumber":2097,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":2098,"author":{"gitID":"-"},"content":""},{"lineNumber":2099,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":2100,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":2101,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2102,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":2103,"author":{"gitID":"-"},"content":""},{"lineNumber":2104,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":2105,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Sharing a recipe on Facebook"},{"lineNumber":2106,"author":{"gitID":"-"},"content":""},{"lineNumber":2107,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":2108,"author":{"gitID":"-"},"content":""},{"lineNumber":2109,"author":{"gitID":"-"},"content":"1.  User requests to list recipes."},{"lineNumber":2110,"author":{"gitID":"-"},"content":"2.  RecipeBook shows a list of recipes."},{"lineNumber":2111,"author":{"gitID":"-"},"content":"3.  User requests to share a specific recipe in the list."},{"lineNumber":2112,"author":{"gitID":"-"},"content":"4.  RecipeBook shows the Facebook log in page. Recipe text is also copied to the clipboard."},{"lineNumber":2113,"author":{"gitID":"-"},"content":"5.  User logs in to Facebook account."},{"lineNumber":2114,"author":{"gitID":"-"},"content":"6.  RecipeBook shows a share dialog with the embedded URL of the recipe."},{"lineNumber":2115,"author":{"gitID":"-"},"content":"7.  User inserts text if desired and presses \"post\"."},{"lineNumber":2116,"author":{"gitID":"-"},"content":"8.  RecipeBook shows the Facebook feed of the User."},{"lineNumber":2117,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2118,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":2119,"author":{"gitID":"-"},"content":""},{"lineNumber":2120,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":2121,"author":{"gitID":"-"},"content":""},{"lineNumber":2122,"author":{"gitID":"-"},"content":"* 5a. The User does not successfully log in."},{"lineNumber":2123,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2124,"author":{"gitID":"-"},"content":"Use case resumes at step 4."},{"lineNumber":2125,"author":{"gitID":"-"},"content":""},{"lineNumber":2126,"author":{"gitID":"-"},"content":"* 6a. The recipe does not have an embedded URL."},{"lineNumber":2127,"author":{"gitID":"-"},"content":"** 6a1. RecipeBook shows the Facebook feed of the User"},{"lineNumber":2128,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2129,"author":{"gitID":"-"},"content":""},{"lineNumber":2130,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":2131,"author":{"gitID":"-"},"content":""},{"lineNumber":2132,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":2133,"author":{"gitID":"RyanAngJY"},"content":"\u003d\u003d Non functional requirements"},{"lineNumber":2134,"author":{"gitID":"-"},"content":""},{"lineNumber":2135,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java 1.8.0_60 or higher installed."},{"lineNumber":2136,"author":{"gitID":"-"},"content":".  Should be able to hold up to 1000 recipes without a noticeable sluggishness in performance for typical usage."},{"lineNumber":2137,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":2138,"author":{"gitID":"-"},"content":".  A user should be able to quickly understand how to navigate the RecipeBook."},{"lineNumber":2139,"author":{"gitID":"-"},"content":".  The product is not required to handle the printing of recipes."},{"lineNumber":2140,"author":{"gitID":"-"},"content":".  The data is no expected to be secure."},{"lineNumber":2141,"author":{"gitID":"-"},"content":".  The program commands should complete executing within 5 seconds."},{"lineNumber":2142,"author":{"gitID":"-"},"content":".  The system should work on both 32-bit and 64-bit environments."},{"lineNumber":2143,"author":{"gitID":"-"},"content":".  Images deemed too offensive should not be added to the recipe book."},{"lineNumber":2144,"author":{"gitID":"-"},"content":".  UI should be visually appealing."},{"lineNumber":2145,"author":{"gitID":"-"},"content":""},{"lineNumber":2146,"author":{"gitID":"-"},"content":"_{More to be added}_"},{"lineNumber":2147,"author":{"gitID":"-"},"content":""},{"lineNumber":2148,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":2149,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for manual testing"},{"lineNumber":2150,"author":{"gitID":"-"},"content":""},{"lineNumber":2151,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually. Each test will have several steps to follow and an expected test outcome."},{"lineNumber":2152,"author":{"gitID":"-"},"content":""},{"lineNumber":2153,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":2154,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":2155,"author":{"gitID":"-"},"content":""},{"lineNumber":2156,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and shutdown"},{"lineNumber":2157,"author":{"gitID":"-"},"content":""},{"lineNumber":2158,"author":{"gitID":"-"},"content":". Initial launch:"},{"lineNumber":2159,"author":{"gitID":"-"},"content":"* Steps:"},{"lineNumber":2160,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder."},{"lineNumber":2161,"author":{"gitID":"-"},"content":".. Double-click the jar file."},{"lineNumber":2162,"author":{"gitID":"-"},"content":"* Expected outcome: The GUI appears with 12 sample recipes. The window size may not be optimum. The GUI may not appear if JRE on the tester\u0027s machine doesn\u0027t work properly. In that case, the tester should launch the app using command line."},{"lineNumber":2163,"author":{"gitID":"-"},"content":""},{"lineNumber":2164,"author":{"gitID":"-"},"content":". Initial launch without Internet connection:"},{"lineNumber":2165,"author":{"gitID":"-"},"content":"* Steps:"},{"lineNumber":2166,"author":{"gitID":"-"},"content":".. Delete all files in the folder except for the jar file."},{"lineNumber":2167,"author":{"gitID":"-"},"content":".. Launch the app without Internet connection."},{"lineNumber":2168,"author":{"gitID":"-"},"content":"* Expected outcome: Each sample recipe will have a null image reference for the image field instead of an image as the app cannot connect to the Internet."},{"lineNumber":2169,"author":{"gitID":"-"},"content":""},{"lineNumber":2170,"author":{"gitID":"-"},"content":". Initial launch with Internet connection:"},{"lineNumber":2171,"author":{"gitID":"-"},"content":"* Steps:"},{"lineNumber":2172,"author":{"gitID":"-"},"content":".. Delete all files in the folder except for the jar file."},{"lineNumber":2173,"author":{"gitID":"-"},"content":".. Launch the app with Internet connection."},{"lineNumber":2174,"author":{"gitID":"-"},"content":"* Expected outcome: 12 images will be downloaded and displayed for the sample recipes."},{"lineNumber":2175,"author":{"gitID":"-"},"content":""},{"lineNumber":2176,"author":{"gitID":"-"},"content":". Saving window preferences:"},{"lineNumber":2177,"author":{"gitID":"-"},"content":"* Steps:"},{"lineNumber":2178,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":2179,"author":{"gitID":"-"},"content":".. Re-launch the app."},{"lineNumber":2180,"author":{"gitID":"-"},"content":"* Expected outcome: The most recent window size and location is retained."},{"lineNumber":2181,"author":{"gitID":"-"},"content":""},{"lineNumber":2182,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Features/Commands"},{"lineNumber":2183,"author":{"gitID":"-"},"content":""},{"lineNumber":2184,"author":{"gitID":"-"},"content":"Sample commands can be found in the cheatsheet in the User Guide. Here are some test cases for some of the features:"},{"lineNumber":2185,"author":{"gitID":"-"},"content":""},{"lineNumber":2186,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Changing theme"},{"lineNumber":2187,"author":{"gitID":"-"},"content":""},{"lineNumber":2188,"author":{"gitID":"-"},"content":". Changing theme using the `theme` command:"},{"lineNumber":2189,"author":{"gitID":"-"},"content":"* Steps:"},{"lineNumber":2190,"author":{"gitID":"-"},"content":".. Use a new version of the app you just downloaded and have yet to launch."},{"lineNumber":2191,"author":{"gitID":"-"},"content":".. Launch the app."},{"lineNumber":2192,"author":{"gitID":"-"},"content":".. Type `*theme*` into the command box, submit the command."},{"lineNumber":2193,"author":{"gitID":"-"},"content":"* Expected outcome: Initially, the app should have a clean white theme. After the command execution, the theme is changed into a pinkish-orange one."},{"lineNumber":2194,"author":{"gitID":"-"},"content":""},{"lineNumber":2195,"author":{"gitID":"-"},"content":". Changing theme using the shortcut kbd:[F2]:"},{"lineNumber":2196,"author":{"gitID":"-"},"content":"* Steps:"},{"lineNumber":2197,"author":{"gitID":"-"},"content":".. Use a new version of the app you just downloaded and have yet to launch."},{"lineNumber":2198,"author":{"gitID":"-"},"content":".. Launch the app."},{"lineNumber":2199,"author":{"gitID":"-"},"content":".. Press kbd:[F2]."},{"lineNumber":2200,"author":{"gitID":"-"},"content":"* Expected outcome: Initially, the app should have a clean white theme. After the command execution, the theme is changed into a pinkish-orange one."},{"lineNumber":2201,"author":{"gitID":"-"},"content":""},{"lineNumber":2202,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Downloading an image"},{"lineNumber":2203,"author":{"gitID":"-"},"content":""},{"lineNumber":2204,"author":{"gitID":"-"},"content":". Downloading an online image normally:"},{"lineNumber":2205,"author":{"gitID":"-"},"content":"* Steps:"},{"lineNumber":2206,"author":{"gitID":"-"},"content":".. Ensure that you have Internet connection."},{"lineNumber":2207,"author":{"gitID":"-"},"content":".. Copy this command into the command box: `*add name/Doge img/https://i.imgur.com/FhRsgCK.jpg url/https://google.com*` then submit the command."},{"lineNumber":2208,"author":{"gitID":"-"},"content":"* Expected outcome: A dummy recipe is added to the recipe book with the image downloaded. You can find the image at \"data/images/2A78C63135CCB8BCECEF189FE0CD834C.jpg\"."},{"lineNumber":2209,"author":{"gitID":"-"},"content":""},{"lineNumber":2210,"author":{"gitID":"-"},"content":". Trying to download a non-image link:"},{"lineNumber":2211,"author":{"gitID":"-"},"content":"* Steps:"},{"lineNumber":2212,"author":{"gitID":"-"},"content":".. Ensure that you have Internet connection."},{"lineNumber":2213,"author":{"gitID":"-"},"content":".. Copy this command into the command box: `*add name/Doge img/https://google.com*` then submit the command."},{"lineNumber":2214,"author":{"gitID":"-"},"content":"* Expected outcome: The app should inform you that the image path given is invalid."},{"lineNumber":2215,"author":{"gitID":"-"},"content":""},{"lineNumber":2216,"author":{"gitID":"-"},"content":". Adding an online image without Internet connection:"},{"lineNumber":2217,"author":{"gitID":"-"},"content":"* Steps:"},{"lineNumber":2218,"author":{"gitID":"-"},"content":".. Copy this command into the command box: `*search hainanese chicken rice*`, execute the command."},{"lineNumber":2219,"author":{"gitID":"-"},"content":".. Select the first result, execute `*parse*` but *do not* submit the `add` command."},{"lineNumber":2220,"author":{"gitID":"-"},"content":".. Disconnect your machine from the Internet."},{"lineNumber":2221,"author":{"gitID":"-"},"content":".. Now execute the `add` command."},{"lineNumber":2222,"author":{"gitID":"-"},"content":"* Expected outcome: The recipe will still be added normally as it should but the image field will take a null reference instead of the image URL as the app cannot download the image."},{"lineNumber":2223,"author":{"gitID":"-"},"content":""},{"lineNumber":2224,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Embedding a URL"},{"lineNumber":2225,"author":{"gitID":"-"},"content":""},{"lineNumber":2226,"author":{"gitID":"-"},"content":"* Steps:"},{"lineNumber":2227,"author":{"gitID":"-"},"content":".. Select a recipe."},{"lineNumber":2228,"author":{"gitID":"-"},"content":".. Edit the URL of the recipe to another valid URL."},{"lineNumber":2229,"author":{"gitID":"-"},"content":"* Expected outcome: The browser panel will update to show the new embedded URL."},{"lineNumber":2230,"author":{"gitID":"-"},"content":""},{"lineNumber":2231,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Inserting an image"},{"lineNumber":2232,"author":{"gitID":"-"},"content":""},{"lineNumber":2233,"author":{"gitID":"-"},"content":". Dealing with changed image path name:"},{"lineNumber":2234,"author":{"gitID":"-"},"content":"* Steps:"},{"lineNumber":2235,"author":{"gitID":"-"},"content":".. Add an image to a recipe (you can use the *`edit`* command)."},{"lineNumber":2236,"author":{"gitID":"-"},"content":".. Change the original image file name or re-locate it to another folder."},{"lineNumber":2237,"author":{"gitID":"-"},"content":".. Re-launch the app."},{"lineNumber":2238,"author":{"gitID":"-"},"content":"* Expected outcome: The app will still show the added image."},{"lineNumber":2239,"author":{"gitID":"-"},"content":""},{"lineNumber":2240,"author":{"gitID":"-"},"content":". Dealing with deleted image:"},{"lineNumber":2241,"author":{"gitID":"-"},"content":"* Steps:"},{"lineNumber":2242,"author":{"gitID":"-"},"content":".. Add an image to a recipe."},{"lineNumber":2243,"author":{"gitID":"-"},"content":".. Delete the original image file."},{"lineNumber":2244,"author":{"gitID":"-"},"content":".. Re-launch the app."},{"lineNumber":2245,"author":{"gitID":"-"},"content":"* Expected outcome: The app will still show the added image."},{"lineNumber":2246,"author":{"gitID":"-"},"content":""},{"lineNumber":2247,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Keyboard shortcuts"},{"lineNumber":2248,"author":{"gitID":"-"},"content":""},{"lineNumber":2249,"author":{"gitID":"-"},"content":"Please see the User Guide for the full list of keyboard shortcuts."},{"lineNumber":2250,"author":{"gitID":"-"},"content":""},{"lineNumber":2251,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Multiple lines input"},{"lineNumber":2252,"author":{"gitID":"-"},"content":""},{"lineNumber":2253,"author":{"gitID":"-"},"content":". Submitting an `add` command with multiple lines:"},{"lineNumber":2254,"author":{"gitID":"-"},"content":"* Steps:"},{"lineNumber":2255,"author":{"gitID":"-"},"content":".. Type this in the command box: `*add name/Doge*`, then press kbd:[Shift]+kbd:[Enter], then type `*url/https://google.com*`."},{"lineNumber":2256,"author":{"gitID":"-"},"content":".. Submit the command."},{"lineNumber":2257,"author":{"gitID":"-"},"content":"* Expected outcome: The recipe will be added normally."},{"lineNumber":2258,"author":{"gitID":"-"},"content":""},{"lineNumber":2259,"author":{"gitID":"-"},"content":". Pasting a command with multiple lines:"},{"lineNumber":2260,"author":{"gitID":"-"},"content":"* Steps:"},{"lineNumber":2261,"author":{"gitID":"-"},"content":".. You can copy the code block below into the command box: +"},{"lineNumber":2262,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2263,"author":{"gitID":"-"},"content":"```"},{"lineNumber":2264,"author":{"gitID":"-"},"content":"add"},{"lineNumber":2265,"author":{"gitID":"-"},"content":"name/Spaghetti alla Amatriciana"},{"lineNumber":2266,"author":{"gitID":"-"},"content":"ingredient/olive oil, onion, garlic, bacon, white wine, tomatoes, salt, pepper, oregano, spaghetti, Parmesan cheese"},{"lineNumber":2267,"author":{"gitID":"-"},"content":"instruction/In pan, heat oil (olive or sunflower oil) over medium heat."},{"lineNumber":2268,"author":{"gitID":"-"},"content":"When oil is hot, add onion and garlic."},{"lineNumber":2269,"author":{"gitID":"-"},"content":"Fry, stirring occasionally for 5 to 7 minutes or until onion is soft but not brown."},{"lineNumber":2270,"author":{"gitID":"-"},"content":"Stir in the bacon and cook for another 4 minutes."},{"lineNumber":2271,"author":{"gitID":"-"},"content":"Stir constantly."},{"lineNumber":2272,"author":{"gitID":"-"},"content":"Add wine and bring liquid to boil."},{"lineNumber":2273,"author":{"gitID":"-"},"content":"Boil rapidly for 2 minutes, then add the tomatoes."},{"lineNumber":2274,"author":{"gitID":"-"},"content":"Stir in the salt, pepper and oregano and bring liquid to boil again."},{"lineNumber":2275,"author":{"gitID":"-"},"content":"Reduce heat to medium low and continue cooking for 15 minutes more."},{"lineNumber":2276,"author":{"gitID":"-"},"content":"Stir occasionally."},{"lineNumber":2277,"author":{"gitID":"-"},"content":"Remove from heat."},{"lineNumber":2278,"author":{"gitID":"-"},"content":"Put spaghetti in large deep serving dish and pour over the sauce, using 2 large spoons."},{"lineNumber":2279,"author":{"gitID":"-"},"content":"Toss mixture until thoroughly coated with sauce."},{"lineNumber":2280,"author":{"gitID":"-"},"content":"Sprinkle over the grated cheese and serve at once."},{"lineNumber":2281,"author":{"gitID":"-"},"content":"img/https://vignette.wikia.nocookie.net/recipes/images/1/1d/Spaghettiamatriciana.jpg/revision/latest/scale-to-width-down/340?cb\u003d20150922183313"},{"lineNumber":2282,"author":{"gitID":"-"},"content":"url/http://recipes.wikia.com/wiki/Spaghetti_alla_Amatriciana?useskin\u003dwikiamobile tag/Onion tag/Garlic tag/Bacon tag/WhiteWine tag/Tomato tag/Spaghetti tag/ParmesanCheese"},{"lineNumber":2283,"author":{"gitID":"-"},"content":"```"},{"lineNumber":2284,"author":{"gitID":"-"},"content":".. Submit the command."},{"lineNumber":2285,"author":{"gitID":"-"},"content":"* Expected outcome: The recipe will be added normally."},{"lineNumber":2286,"author":{"gitID":"-"},"content":""},{"lineNumber":2287,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Searching and parsing a recipe"},{"lineNumber":2288,"author":{"gitID":"-"},"content":""},{"lineNumber":2289,"author":{"gitID":"-"},"content":". Searching without Internet connection:"},{"lineNumber":2290,"author":{"gitID":"-"},"content":"* Steps:"},{"lineNumber":2291,"author":{"gitID":"-"},"content":".. Disconnect your machine from the Internet."},{"lineNumber":2292,"author":{"gitID":"-"},"content":".. Execute a `search` command, for example, `*search chicken rice*`."},{"lineNumber":2293,"author":{"gitID":"-"},"content":"* Expected outcome: The result box will say that ReciRecipé failed to search and ask for confirmation that the tester is connected to the Internet."},{"lineNumber":2294,"author":{"gitID":"-"},"content":""},{"lineNumber":2295,"author":{"gitID":"-"},"content":". Searching without any arguments:"},{"lineNumber":2296,"author":{"gitID":"-"},"content":"* Steps:"},{"lineNumber":2297,"author":{"gitID":"-"},"content":".. Type `*search*` in the command box."},{"lineNumber":2298,"author":{"gitID":"-"},"content":".. Press kbd:[Enter]."},{"lineNumber":2299,"author":{"gitID":"-"},"content":"* Expected outcome: The result box will say that it is an invalid command and show the correct command format."},{"lineNumber":2300,"author":{"gitID":"-"},"content":""},{"lineNumber":2301,"author":{"gitID":"-"},"content":". Parsing a recipe:"},{"lineNumber":2302,"author":{"gitID":"-"},"content":"* Steps:"},{"lineNumber":2303,"author":{"gitID":"-"},"content":".. Clear the recipe book with the command `clear`."},{"lineNumber":2304,"author":{"gitID":"-"},"content":".. Copy this command into the command box: `*search hainanese chicken rice*`, execute the command."},{"lineNumber":2305,"author":{"gitID":"-"},"content":".. Select the first result, execute `*parse*`."},{"lineNumber":2306,"author":{"gitID":"-"},"content":"* Expected outcome: An `add` command with all data pre-filled will appear in the command box."},{"lineNumber":2307,"author":{"gitID":"-"},"content":""},{"lineNumber":2308,"author":{"gitID":"-"},"content":". Parsing a blank page:"},{"lineNumber":2309,"author":{"gitID":"-"},"content":"* Steps:"},{"lineNumber":2310,"author":{"gitID":"-"},"content":".. Close the app then reopen it."},{"lineNumber":2311,"author":{"gitID":"-"},"content":".. Execute `*parse*`."},{"lineNumber":2312,"author":{"gitID":"-"},"content":"* Expected outcome: Nothing will appear in the command box."},{"lineNumber":2313,"author":{"gitID":"-"},"content":""},{"lineNumber":2314,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Sharing a recipe"},{"lineNumber":2315,"author":{"gitID":"-"},"content":""},{"lineNumber":2316,"author":{"gitID":"-"},"content":". Sharing a recipe with an embedded URL:"},{"lineNumber":2317,"author":{"gitID":"-"},"content":"* Steps:"},{"lineNumber":2318,"author":{"gitID":"-"},"content":".. Execute share command on a recipe with an embedded URL."},{"lineNumber":2319,"author":{"gitID":"-"},"content":".. Log in to Facebook account"},{"lineNumber":2320,"author":{"gitID":"-"},"content":"* Expected outcome: A Facebook dialog feed will appear with an embedded URL link."},{"lineNumber":2321,"author":{"gitID":"-"},"content":""},{"lineNumber":2322,"author":{"gitID":"-"},"content":". Sharing a recipe with an embedded but invalid URL:"},{"lineNumber":2323,"author":{"gitID":"-"},"content":"* Steps:"},{"lineNumber":2324,"author":{"gitID":"-"},"content":".. Execute share command on a recipe with an embedded invalid URL."},{"lineNumber":2325,"author":{"gitID":"-"},"content":".. Log in to Facebook account"},{"lineNumber":2326,"author":{"gitID":"-"},"content":"* Expected outcome: Your Facebook feed will appear."},{"lineNumber":2327,"author":{"gitID":"-"},"content":""},{"lineNumber":2328,"author":{"gitID":"-"},"content":". Sharing a recipe without an embedded URL:"},{"lineNumber":2329,"author":{"gitID":"-"},"content":"* Steps:"},{"lineNumber":2330,"author":{"gitID":"-"},"content":".. Execute share command on a recipe without an embedded URL."},{"lineNumber":2331,"author":{"gitID":"-"},"content":".. Log in to Facebook account"},{"lineNumber":2332,"author":{"gitID":"-"},"content":"* Expected outcome: Your Facebook feed will appear."},{"lineNumber":2333,"author":{"gitID":"-"},"content":""},{"lineNumber":2334,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Missing/corrupted data"},{"lineNumber":2335,"author":{"gitID":"-"},"content":""},{"lineNumber":2336,"author":{"gitID":"-"},"content":". Dealing with missing data:"},{"lineNumber":2337,"author":{"gitID":"-"},"content":"* Steps:"},{"lineNumber":2338,"author":{"gitID":"-"},"content":".. Delete the data folder."},{"lineNumber":2339,"author":{"gitID":"-"},"content":".. Re-launch the app."},{"lineNumber":2340,"author":{"gitID":"-"},"content":"* Expected outcome: The app will be initialized with 12 sample recipes."},{"lineNumber":2341,"author":{"gitID":"-"},"content":""},{"lineNumber":2342,"author":{"gitID":"-"},"content":". Dealing with corrupted data:"},{"lineNumber":2343,"author":{"gitID":"-"},"content":"* Steps:"},{"lineNumber":2344,"author":{"gitID":"-"},"content":".. Open data/recipebook.xml, remove line 5, save the file."},{"lineNumber":2345,"author":{"gitID":"-"},"content":".. Re-launch the app."},{"lineNumber":2346,"author":{"gitID":"-"},"content":"* Expected outcome: The app will be initialized with an empty recipe book."},{"lineNumber":2347,"author":{"gitID":"-"},"content":""},{"lineNumber":2348,"author":{"gitID":"-"},"content":". Dealing with missing images:"},{"lineNumber":2349,"author":{"gitID":"-"},"content":"* Steps:"},{"lineNumber":2350,"author":{"gitID":"-"},"content":".. Delete the \"data/images\" folder."},{"lineNumber":2351,"author":{"gitID":"-"},"content":".. Re-launch the app."},{"lineNumber":2352,"author":{"gitID":"-"},"content":"* Expected outcome: All images will not display and all recipes will have a null image reference for the image field instead of the old file path."},{"lineNumber":2353,"author":{"gitID":"-"},"content":""},{"lineNumber":2354,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":2355,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":2356,"author":{"gitID":"-"},"content":""},{"lineNumber":2357,"author":{"gitID":"-"},"content":"include::./Glossary.adoc[]"},{"lineNumber":2358,"author":{"gitID":"-"},"content":""},{"lineNumber":2359,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":2360,"author":{"gitID":"-"},"content":"include::./NavBar.adoc[]"},{"lineNumber":2361,"author":{"gitID":"-"},"content":"endif::[]"}],"authorContributionMap":{"RyanAngJY":133,"hoangduong1607":101,"-":2127}},{"path":"src/test/java/seedu/recipe/logic/parser/RecipeBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.recipe.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.recipe.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.AddCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.ChangeThemeCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.ClearCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.DeleteCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.EditCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.EditCommand.EditRecipeDescriptor;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.ExitCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.FindCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.HelpCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.HistoryCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.ListCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.ParseCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.RedoCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.SearchCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.SelectCommand;"},{"lineNumber":33,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.logic.commands.ShareCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.TagCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.UndoCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.UploadCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.parser.exceptions.ParseException;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.NameContainsKeywordsPredicate;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Recipe;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.recipe.model.tag.TagContainsKeywordsPredicate;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.recipe.testutil.EditRecipeDescriptorBuilder;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.recipe.testutil.RecipeBuilder;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.recipe.testutil.RecipeUtil;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"public class RecipeBookParserTest {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private final RecipeBookParser parser \u003d new RecipeBookParser();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Recipe recipe \u003d new RecipeBuilder().build();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(RecipeUtil.getAddCommand(recipe));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(recipe), command);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":67,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RECIPE.getOneBased());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_RECIPE), command);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Recipe recipe \u003d new RecipeBuilder().build();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        EditRecipeDescriptor descriptor \u003d new EditRecipeDescriptorBuilder(recipe).build();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":76,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_RECIPE.getOneBased() + \" \" + RecipeUtil.getRecipeDetails(recipe));"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_RECIPE, descriptor), command);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":90,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":122,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RECIPE.getOneBased());"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_RECIPE), command);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"RyanAngJY"},"content":"    //@@author RyanAngJY"},{"lineNumber":127,"author":{"gitID":"RyanAngJY"},"content":"    @Test"},{"lineNumber":128,"author":{"gitID":"RyanAngJY"},"content":"    public void parseCommand_share() throws Exception {"},{"lineNumber":129,"author":{"gitID":"RyanAngJY"},"content":"        ShareCommand command \u003d (ShareCommand) parser.parseCommand("},{"lineNumber":130,"author":{"gitID":"RyanAngJY"},"content":"                ShareCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RECIPE.getOneBased());"},{"lineNumber":131,"author":{"gitID":"RyanAngJY"},"content":"        assertEquals(new ShareCommand(INDEX_FIRST_RECIPE), command);"},{"lineNumber":132,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"RyanAngJY"},"content":"    //@@author"},{"lineNumber":134,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":135,"author":{"gitID":"nicholasangcx"},"content":"    //@@author nicholasangcx"},{"lineNumber":136,"author":{"gitID":"nicholasangcx"},"content":"    @Test"},{"lineNumber":137,"author":{"gitID":"nicholasangcx"},"content":"    public void parseCommand_tag() throws Exception {"},{"lineNumber":138,"author":{"gitID":"nicholasangcx"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"friends\", \"family\", \"owesMoney\");"},{"lineNumber":139,"author":{"gitID":"nicholasangcx"},"content":"        TagCommand command \u003d (TagCommand) parser.parseCommand("},{"lineNumber":140,"author":{"gitID":"nicholasangcx"},"content":"                TagCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":141,"author":{"gitID":"nicholasangcx"},"content":"        assertEquals(new TagCommand(new TagContainsKeywordsPredicate(keywords),"},{"lineNumber":142,"author":{"gitID":"nicholasangcx"},"content":"                keywords.toArray(new String[0])), command);"},{"lineNumber":143,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":145,"author":{"gitID":"nicholasangcx"},"content":"    @Test"},{"lineNumber":146,"author":{"gitID":"nicholasangcx"},"content":"    public void parseCommand_upload() throws Exception {"},{"lineNumber":147,"author":{"gitID":"nicholasangcx"},"content":"        String filename \u003d \"RecipeBook\";"},{"lineNumber":148,"author":{"gitID":"nicholasangcx"},"content":"        UploadCommand command \u003d (UploadCommand) parser.parseCommand("},{"lineNumber":149,"author":{"gitID":"nicholasangcx"},"content":"                UploadCommand.COMMAND_WORD + \" \" + filename);"},{"lineNumber":150,"author":{"gitID":"nicholasangcx"},"content":"        assertEquals(new UploadCommand(filename + \".xml\"), command);"},{"lineNumber":151,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"nicholasangcx"},"content":"    //@@author"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"kokonguyen191"},"content":"    //@@author kokonguyen191"},{"lineNumber":155,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":156,"author":{"gitID":"kokonguyen191"},"content":"    public void parseCommand_changeTheme() throws Exception {"},{"lineNumber":157,"author":{"gitID":"kokonguyen191"},"content":"        assertTrue(parser.parseCommand(ChangeThemeCommand.COMMAND_WORD) instanceof ChangeThemeCommand);"},{"lineNumber":158,"author":{"gitID":"kokonguyen191"},"content":"        assertTrue(parser.parseCommand(ChangeThemeCommand.COMMAND_WORD + \" 3\") instanceof ChangeThemeCommand);"},{"lineNumber":159,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":161,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":162,"author":{"gitID":"kokonguyen191"},"content":"    public void parseCommand_search() throws Exception {"},{"lineNumber":163,"author":{"gitID":"kokonguyen191"},"content":"        assertTrue(parser.parseCommand(SearchCommand.COMMAND_WORD + \" chicken rice\") instanceof SearchCommand);"},{"lineNumber":164,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":165,"author":{"gitID":"kokonguyen191"},"content":"        String keywords \u003d \"chicken rice\";"},{"lineNumber":166,"author":{"gitID":"kokonguyen191"},"content":"        SearchCommand command \u003d (SearchCommand) parser.parseCommand(SearchCommand.COMMAND_WORD + \" \" + keywords);"},{"lineNumber":167,"author":{"gitID":"kokonguyen191"},"content":"        assertEquals(new SearchCommand(keywords.replaceAll(\"\\\\s+\", \"+\")), command);"},{"lineNumber":168,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":169,"author":{"gitID":"kokonguyen191"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":170,"author":{"gitID":"kokonguyen191"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchCommand.MESSAGE_USAGE));"},{"lineNumber":171,"author":{"gitID":"kokonguyen191"},"content":"        parser.parseCommand(SearchCommand.COMMAND_WORD);"},{"lineNumber":172,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":174,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":175,"author":{"gitID":"kokonguyen191"},"content":"    public void parseCommand_parse() throws Exception {"},{"lineNumber":176,"author":{"gitID":"kokonguyen191"},"content":"        assertTrue(parser.parseCommand(ParseCommand.COMMAND_WORD) instanceof ParseCommand);"},{"lineNumber":177,"author":{"gitID":"kokonguyen191"},"content":"        assertTrue(parser.parseCommand(ParseCommand.COMMAND_WORD + \" 3\") instanceof ParseCommand);"},{"lineNumber":178,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"kokonguyen191"},"content":"    //@@author"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kokonguyen191":26,"RyanAngJY":10,"-":152,"nicholasangcx":18}},{"path":"src/test/java/seedu/recipe/logic/parser/SearchCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"kokonguyen191"},"content":"//@@author kokonguyen191"},{"lineNumber":2,"author":{"gitID":"kokonguyen191"},"content":"package seedu.recipe.logic.parser;"},{"lineNumber":3,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":4,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":8,"author":{"gitID":"kokonguyen191"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":10,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.logic.commands.SearchCommand;"},{"lineNumber":11,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":12,"author":{"gitID":"kokonguyen191"},"content":"public class SearchCommandParserTest {"},{"lineNumber":13,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":14,"author":{"gitID":"kokonguyen191"},"content":"    private SearchCommandParser parser \u003d new SearchCommandParser();"},{"lineNumber":15,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":16,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"kokonguyen191"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":18,"author":{"gitID":"kokonguyen191"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchCommand.MESSAGE_USAGE));"},{"lineNumber":19,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":21,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"kokonguyen191"},"content":"    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":23,"author":{"gitID":"kokonguyen191"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":24,"author":{"gitID":"kokonguyen191"},"content":"        SearchCommand expectedSearchCommand \u003d new SearchCommand(\"chicken+rice\");"},{"lineNumber":25,"author":{"gitID":"kokonguyen191"},"content":"        assertParseSuccess(parser, \"chicken rice\", expectedSearchCommand);"},{"lineNumber":26,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":27,"author":{"gitID":"kokonguyen191"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":28,"author":{"gitID":"kokonguyen191"},"content":"        assertParseSuccess(parser, \" \\n chicken \\n \\t rice  \\t\", expectedSearchCommand);"},{"lineNumber":29,"author":{"gitID":"kokonguyen191"},"content":"        assertParseSuccess(parser, \"        chicken             rice            \", expectedSearchCommand);"},{"lineNumber":30,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":32,"author":{"gitID":"kokonguyen191"},"content":"}"}],"authorContributionMap":{"kokonguyen191":32}},{"path":"src/test/java/seedu/recipe/logic/parser/AccessTokenCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"nicholasangcx"},"content":"//@@author nicholasangcx"},{"lineNumber":2,"author":{"gitID":"nicholasangcx"},"content":"package seedu.recipe.logic.parser;"},{"lineNumber":3,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":4,"author":{"gitID":"nicholasangcx"},"content":"import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"nicholasangcx"},"content":"import static seedu.recipe.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"nicholasangcx"},"content":"import static seedu.recipe.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":8,"author":{"gitID":"nicholasangcx"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":10,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.logic.commands.AccessTokenCommand;"},{"lineNumber":11,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":12,"author":{"gitID":"nicholasangcx"},"content":"public class AccessTokenCommandParserTest {"},{"lineNumber":13,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":14,"author":{"gitID":"nicholasangcx"},"content":"    private static final String DUMMY_ACCESS_CODE \u003d \"valid_access_code\";"},{"lineNumber":15,"author":{"gitID":"nicholasangcx"},"content":"    private AccessTokenCommandParser parser \u003d new AccessTokenCommandParser();"},{"lineNumber":16,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":17,"author":{"gitID":"nicholasangcx"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"nicholasangcx"},"content":"    public void parseEmptyArgThrowsParseException() {"},{"lineNumber":19,"author":{"gitID":"nicholasangcx"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":20,"author":{"gitID":"nicholasangcx"},"content":"                AccessTokenCommand.MESSAGE_USAGE));"},{"lineNumber":21,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":23,"author":{"gitID":"nicholasangcx"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"nicholasangcx"},"content":"    public void parseValidArgsReturnsUploadCommand() {"},{"lineNumber":25,"author":{"gitID":"nicholasangcx"},"content":"        // code taken from an actual dropbox authorization process"},{"lineNumber":26,"author":{"gitID":"nicholasangcx"},"content":"        AccessTokenCommand expectedAccessTokenCommand \u003d"},{"lineNumber":27,"author":{"gitID":"nicholasangcx"},"content":"                new AccessTokenCommand(DUMMY_ACCESS_CODE);"},{"lineNumber":28,"author":{"gitID":"nicholasangcx"},"content":"        assertParseSuccess(parser, \"valid_access_code\", expectedAccessTokenCommand);"},{"lineNumber":29,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":30,"author":{"gitID":"nicholasangcx"},"content":"        // trim leading and trailing whitespaces"},{"lineNumber":31,"author":{"gitID":"nicholasangcx"},"content":"        assertParseSuccess(parser, \"  valid_access_code  \", expectedAccessTokenCommand);"},{"lineNumber":32,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"nicholasangcx"},"content":"}"},{"lineNumber":34,"author":{"gitID":"nicholasangcx"},"content":"//@@author"}],"authorContributionMap":{"nicholasangcx":34}},{"path":"src/test/java/seedu/recipe/logic/parser/ViewGroupCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"hoangduong1607"},"content":"//@@author hoangduong1607"},{"lineNumber":2,"author":{"gitID":"hoangduong1607"},"content":"package seedu.recipe.logic.parser;"},{"lineNumber":3,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":4,"author":{"gitID":"hoangduong1607"},"content":"import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"hoangduong1607"},"content":"import static seedu.recipe.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"hoangduong1607"},"content":"import static seedu.recipe.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":8,"author":{"gitID":"hoangduong1607"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":10,"author":{"gitID":"hoangduong1607"},"content":"import seedu.recipe.logic.commands.ViewGroupCommand;"},{"lineNumber":11,"author":{"gitID":"hoangduong1607"},"content":"import seedu.recipe.model.recipe.GroupName;"},{"lineNumber":12,"author":{"gitID":"hoangduong1607"},"content":"import seedu.recipe.model.recipe.GroupPredicate;"},{"lineNumber":13,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":14,"author":{"gitID":"hoangduong1607"},"content":"public class ViewGroupCommandParserTest {"},{"lineNumber":15,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":16,"author":{"gitID":"hoangduong1607"},"content":"    private ViewGroupCommandParser parser \u003d new ViewGroupCommandParser();"},{"lineNumber":17,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":18,"author":{"gitID":"hoangduong1607"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"hoangduong1607"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":20,"author":{"gitID":"hoangduong1607"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":21,"author":{"gitID":"hoangduong1607"},"content":"                ViewGroupCommand.MESSAGE_USAGE));"},{"lineNumber":22,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":24,"author":{"gitID":"hoangduong1607"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"hoangduong1607"},"content":"    public void parse_nonEmptyArgs_success() {"},{"lineNumber":26,"author":{"gitID":"hoangduong1607"},"content":"        String groupNameString \u003d \"My best\";"},{"lineNumber":27,"author":{"gitID":"hoangduong1607"},"content":"        GroupName groupName \u003d new GroupName(groupNameString);"},{"lineNumber":28,"author":{"gitID":"hoangduong1607"},"content":"        ViewGroupCommand expectedViewGroupCommand \u003d new ViewGroupCommand(new GroupPredicate(groupName), groupName);"},{"lineNumber":29,"author":{"gitID":"hoangduong1607"},"content":"        assertParseSuccess(parser, groupNameString, expectedViewGroupCommand);"},{"lineNumber":30,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":32,"author":{"gitID":"hoangduong1607"},"content":"}"}],"authorContributionMap":{"hoangduong1607":32}},{"path":"src/test/java/seedu/recipe/logic/parser/ShareCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.recipe.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.logic.commands.ShareCommand;"},{"lineNumber":11,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":12,"author":{"gitID":"RyanAngJY"},"content":"public class ShareCommandParserTest {"},{"lineNumber":13,"author":{"gitID":"RyanAngJY"},"content":"    private ShareCommandParser parser \u003d new ShareCommandParser();"},{"lineNumber":14,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":15,"author":{"gitID":"RyanAngJY"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"RyanAngJY"},"content":"    public void parse_validArgs_returnsShareCommand() {"},{"lineNumber":17,"author":{"gitID":"RyanAngJY"},"content":"        assertParseSuccess(parser, \"1\", new ShareCommand(INDEX_FIRST_RECIPE));"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":22,"author":{"gitID":"RyanAngJY"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShareCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"RyanAngJY"},"content":"}"}],"authorContributionMap":{"RyanAngJY":11,"-":13}},{"path":"src/test/java/seedu/recipe/logic/parser/UploadCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"nicholasangcx"},"content":"//@@author nicholasangcx"},{"lineNumber":2,"author":{"gitID":"nicholasangcx"},"content":"package seedu.recipe.logic.parser;"},{"lineNumber":3,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":4,"author":{"gitID":"nicholasangcx"},"content":"import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"nicholasangcx"},"content":"import static seedu.recipe.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"nicholasangcx"},"content":"import static seedu.recipe.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":8,"author":{"gitID":"nicholasangcx"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":10,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.logic.commands.UploadCommand;"},{"lineNumber":11,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.model.file.Filename;"},{"lineNumber":12,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":13,"author":{"gitID":"nicholasangcx"},"content":"public class UploadCommandParserTest {"},{"lineNumber":14,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":15,"author":{"gitID":"nicholasangcx"},"content":"    private UploadCommandParser parser \u003d new UploadCommandParser();"},{"lineNumber":16,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":17,"author":{"gitID":"nicholasangcx"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"nicholasangcx"},"content":"    public void parseEmptyArgThrowsParseException() {"},{"lineNumber":19,"author":{"gitID":"nicholasangcx"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, UploadCommand.MESSAGE_USAGE));"},{"lineNumber":20,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":22,"author":{"gitID":"nicholasangcx"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"nicholasangcx"},"content":"    public void parseValidArgsReturnsUploadCommand() {"},{"lineNumber":24,"author":{"gitID":"nicholasangcx"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":25,"author":{"gitID":"nicholasangcx"},"content":"        UploadCommand expectedUploadCommand \u003d"},{"lineNumber":26,"author":{"gitID":"nicholasangcx"},"content":"                new UploadCommand(\"RecipeBook.xml\");"},{"lineNumber":27,"author":{"gitID":"nicholasangcx"},"content":"        assertParseSuccess(parser, \"RecipeBook\", expectedUploadCommand);"},{"lineNumber":28,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":29,"author":{"gitID":"nicholasangcx"},"content":"        // ignores subsequent keywords after the first"},{"lineNumber":30,"author":{"gitID":"nicholasangcx"},"content":"        assertParseSuccess(parser, \" \\n RecipeBook \\n \\t otherBook \\t\", expectedUploadCommand);"},{"lineNumber":31,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":33,"author":{"gitID":"nicholasangcx"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"nicholasangcx"},"content":"    public void parseInvalidArgsThrowsParseException() {"},{"lineNumber":35,"author":{"gitID":"nicholasangcx"},"content":"        assertParseFailure(parser, \"recipe/book\", Filename.MESSAGE_FILENAME_CONSTRAINTS);"},{"lineNumber":36,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"nicholasangcx"},"content":"}"},{"lineNumber":38,"author":{"gitID":"nicholasangcx"},"content":"//@@author"}],"authorContributionMap":{"nicholasangcx":38}},{"path":"src/test/java/seedu/recipe/logic/parser/ParserUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.recipe.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.exceptions.IllegalValueException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Ingredient;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Instruction;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Name;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.PreparationTime;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.recipe.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.recipe.testutil.Assert;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String INVALID_PREPARATION_TIME \u003d \"+651234\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String INVALID_INSTRUCTION \u003d \" \";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String INVALID_INGREDIENT \u003d \"example.com\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String INVALID_FILENAME \u003d \"recipe/book\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String VALID_PREPARATION_TIME \u003d \"50m\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String VALID_INSTRUCTION \u003d \"123 Main \\n Street #0505\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_INGREDIENT \u003d \"some, test, ingredients\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_FILENAME_1 \u003d \"Recipe_Book\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public final ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void parseIndex_invalidInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(\"10 a\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_INVALID_INDEX);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // No whitespaces"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_RECIPE, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_RECIPE, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void parseName_null_throwsNullPointerException() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((Optional\u003cString\u003e) null));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void parseName_invalidValue_throwsIllegalValueException() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(Optional.of(INVALID_NAME)));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void parseName_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseName(Optional.empty()).isPresent());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(VALID_NAME)));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(nameWithWhitespace)));"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void parsePreparationTime_null_throwsNullPointerException() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePreparationTime((String) null));"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePreparationTime((Optional\u003cString\u003e) null));"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public void parsePreparationTime_invalidValue_throwsIllegalValueException() {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            ParserUtil.parsePreparationTime(INVALID_PREPARATION_TIME));"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            ParserUtil.parsePreparationTime(Optional.of(INVALID_PREPARATION_TIME)));"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public void parsePreparationTime_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parsePreparationTime(Optional.empty()).isPresent());"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public void parsePreparationTime_validValueWithoutWhitespace_returnsPreparationTime() throws Exception {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        PreparationTime expectedPreparationTime \u003d new PreparationTime(VALID_PREPARATION_TIME);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertEquals(expectedPreparationTime, ParserUtil.parsePreparationTime(VALID_PREPARATION_TIME));"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPreparationTime),"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            ParserUtil.parsePreparationTime(Optional.of(VALID_PREPARATION_TIME)));"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public void parsePreparationTime_validValueWithWhitespace_returnsTrimmedPreparationTime() throws Exception {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        String preparationTimeWithWhitespace \u003d WHITESPACE + VALID_PREPARATION_TIME + WHITESPACE;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        PreparationTime expectedPreparationTime \u003d new PreparationTime(VALID_PREPARATION_TIME);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertEquals(expectedPreparationTime, ParserUtil.parsePreparationTime(preparationTimeWithWhitespace));"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPreparationTime),"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            ParserUtil.parsePreparationTime(Optional.of(preparationTimeWithWhitespace)));"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public void parseInstruction_null_throwsNullPointerException() {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseInstruction((String) null));"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseInstruction((Optional\u003cString\u003e) null));"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    public void parseInstruction_invalidValue_throwsIllegalValueException() {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseInstruction(INVALID_INSTRUCTION));"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            ParserUtil.parseInstruction(Optional.of(INVALID_INSTRUCTION)));"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    public void parseInstruction_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseInstruction(Optional.empty()).isPresent());"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public void parseInstruction_validValueWithoutWhitespace_returnsInstruction() throws Exception {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        Instruction expectedInstruction \u003d new Instruction(VALID_INSTRUCTION);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertEquals(expectedInstruction, ParserUtil.parseInstruction(VALID_INSTRUCTION));"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedInstruction), ParserUtil.parseInstruction(Optional.of(VALID_INSTRUCTION)));"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    public void parseInstruction_validValueWithWhitespace_returnsTrimmedInstruction() throws Exception {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        String instructionWithWhitespace \u003d WHITESPACE + VALID_INSTRUCTION + WHITESPACE;"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        Instruction expectedInstruction \u003d new Instruction(VALID_INSTRUCTION);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertEquals(expectedInstruction, ParserUtil.parseInstruction(instructionWithWhitespace));"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedInstruction),"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            ParserUtil.parseInstruction(Optional.of(instructionWithWhitespace)));"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    public void parseIngredient_null_throwsNullPointerException() {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseIngredient((String) null));"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseIngredient((Optional\u003cString\u003e) null));"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    public void parseIngredient_invalidValue_throwsIllegalValueException() {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseIngredient(INVALID_INGREDIENT));"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e"},{"lineNumber":182,"author":{"gitID":"-"},"content":"            ParserUtil.parseIngredient(Optional.of(INVALID_INGREDIENT)));"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    public void parseIngredient_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseIngredient(Optional.empty()).isPresent());"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    public void parseIngredient_validValueWithoutWhitespace_returnsIngredient() throws Exception {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        Ingredient expectedIngredient \u003d new Ingredient(VALID_INGREDIENT);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertEquals(expectedIngredient, ParserUtil.parseIngredient(VALID_INGREDIENT));"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedIngredient), ParserUtil.parseIngredient(Optional.of(VALID_INGREDIENT)));"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    public void parseIngredient_validValueWithWhitespace_returnsTrimmedIngredient() throws Exception {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        String ingredientWithWhitespace \u003d WHITESPACE + VALID_INGREDIENT + WHITESPACE;"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        Ingredient expectedIngredient \u003d new Ingredient(VALID_INGREDIENT);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertEquals(expectedIngredient, ParserUtil.parseIngredient(ingredientWithWhitespace));"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedIngredient),"},{"lineNumber":203,"author":{"gitID":"-"},"content":"            ParserUtil.parseIngredient(Optional.of(ingredientWithWhitespace)));"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    public void parseTag_null_throwsNullPointerException() throws Exception {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(null);"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    public void parseTag_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(INVALID_TAG);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    public void parseTags_null_throwsNullPointerException() throws Exception {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(null);"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsIllegalValueException() throws Exception {"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"nicholasangcx"},"content":"    //@@author nicholasangcx"},{"lineNumber":257,"author":{"gitID":"nicholasangcx"},"content":"    @Test"},{"lineNumber":258,"author":{"gitID":"nicholasangcx"},"content":"    public void parseFilename_null_throwsNullPointerException() throws Exception {"},{"lineNumber":259,"author":{"gitID":"nicholasangcx"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":260,"author":{"gitID":"nicholasangcx"},"content":"        ParserUtil.parseFilename(null);"},{"lineNumber":261,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":262,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":263,"author":{"gitID":"nicholasangcx"},"content":"    @Test"},{"lineNumber":264,"author":{"gitID":"nicholasangcx"},"content":"    public void parseFilename_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":265,"author":{"gitID":"nicholasangcx"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":266,"author":{"gitID":"nicholasangcx"},"content":"        ParserUtil.parseFilename(INVALID_FILENAME);"},{"lineNumber":267,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":268,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":269,"author":{"gitID":"nicholasangcx"},"content":"    @Test"},{"lineNumber":270,"author":{"gitID":"nicholasangcx"},"content":"    public void parseFilename_validValueWithoutWhitespace_returnsString() throws Exception {"},{"lineNumber":271,"author":{"gitID":"nicholasangcx"},"content":"        String expectedFilename \u003d VALID_FILENAME_1 + \".xml\";"},{"lineNumber":272,"author":{"gitID":"nicholasangcx"},"content":"        assertEquals(expectedFilename, ParserUtil.parseFilename(VALID_FILENAME_1));"},{"lineNumber":273,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":274,"author":{"gitID":"nicholasangcx"},"content":"    //@@author"},{"lineNumber":275,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":256,"nicholasangcx":19}},{"path":"src/test/java/seedu/recipe/logic/commands/SearchCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"kokonguyen191"},"content":"//@@author kokonguyen191"},{"lineNumber":2,"author":{"gitID":"kokonguyen191"},"content":"package seedu.recipe.logic.commands;"},{"lineNumber":3,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":4,"author":{"gitID":"kokonguyen191"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"kokonguyen191"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.logic.commands.SearchCommand.MESSAGE_NO_RESULT;"},{"lineNumber":8,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.logic.commands.SearchCommand.MESSAGE_SUCCESS;"},{"lineNumber":9,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.testutil.TypicalRecipes.getTypicalRecipeBook;"},{"lineNumber":10,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":11,"author":{"gitID":"kokonguyen191"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"kokonguyen191"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"kokonguyen191"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":15,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.model.Model;"},{"lineNumber":16,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":19,"author":{"gitID":"kokonguyen191"},"content":"public class SearchCommandTest {"},{"lineNumber":20,"author":{"gitID":"kokonguyen191"},"content":"    @Rule"},{"lineNumber":21,"author":{"gitID":"kokonguyen191"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":22,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":23,"author":{"gitID":"kokonguyen191"},"content":"    private Model model \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs());"},{"lineNumber":24,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":25,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"kokonguyen191"},"content":"    public void equals() {"},{"lineNumber":27,"author":{"gitID":"kokonguyen191"},"content":"        String firstTest \u003d \"chicken rice\";"},{"lineNumber":28,"author":{"gitID":"kokonguyen191"},"content":"        String secondTest \u003d \"boneless pizza\";"},{"lineNumber":29,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":30,"author":{"gitID":"kokonguyen191"},"content":"        SearchCommand searchFirstCommand \u003d new SearchCommand(firstTest);"},{"lineNumber":31,"author":{"gitID":"kokonguyen191"},"content":"        SearchCommand searchSecondCommand \u003d new SearchCommand(secondTest);"},{"lineNumber":32,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":33,"author":{"gitID":"kokonguyen191"},"content":"        // same object -\u003e returns true"},{"lineNumber":34,"author":{"gitID":"kokonguyen191"},"content":"        assertTrue(searchFirstCommand.equals(searchFirstCommand));"},{"lineNumber":35,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":36,"author":{"gitID":"kokonguyen191"},"content":"        // same values -\u003e returns true"},{"lineNumber":37,"author":{"gitID":"kokonguyen191"},"content":"        SearchCommand searchFirstCommandCopy \u003d new SearchCommand(firstTest);"},{"lineNumber":38,"author":{"gitID":"kokonguyen191"},"content":"        assertTrue(searchFirstCommand.equals(searchFirstCommandCopy));"},{"lineNumber":39,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":40,"author":{"gitID":"kokonguyen191"},"content":"        // different types -\u003e returns false"},{"lineNumber":41,"author":{"gitID":"kokonguyen191"},"content":"        assertFalse(searchFirstCommand.equals(1));"},{"lineNumber":42,"author":{"gitID":"kokonguyen191"},"content":"        assertFalse(searchFirstCommand.equals(new HelpCommand()));"},{"lineNumber":43,"author":{"gitID":"kokonguyen191"},"content":"        assertFalse(searchFirstCommand.equals(\"DOGGO\"));"},{"lineNumber":44,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":45,"author":{"gitID":"kokonguyen191"},"content":"        // null -\u003e returns false"},{"lineNumber":46,"author":{"gitID":"kokonguyen191"},"content":"        assertFalse(searchFirstCommand.equals(null));"},{"lineNumber":47,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":48,"author":{"gitID":"kokonguyen191"},"content":"        // different recipe -\u003e returns false"},{"lineNumber":49,"author":{"gitID":"kokonguyen191"},"content":"        assertFalse(searchFirstCommand.equals(searchSecondCommand));"},{"lineNumber":50,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":52,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"kokonguyen191"},"content":"    public void constructor_nullInput_throwsNullPointerException() {"},{"lineNumber":54,"author":{"gitID":"kokonguyen191"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":55,"author":{"gitID":"kokonguyen191"},"content":"        SearchCommand searchCommand \u003d new SearchCommand(null);"},{"lineNumber":56,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":58,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"kokonguyen191"},"content":"    public void execute_inputWithNoResults_noRecipesFound() {"},{"lineNumber":60,"author":{"gitID":"kokonguyen191"},"content":"        SearchCommand searchCommandWithNoResult \u003d new SearchCommand(\"blah\");"},{"lineNumber":61,"author":{"gitID":"kokonguyen191"},"content":"        assertCommandSuccess(searchCommandWithNoResult, model, MESSAGE_NO_RESULT, model);"},{"lineNumber":62,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":64,"author":{"gitID":"kokonguyen191"},"content":"    // THIS TEST MIGHT FAIL IN THE FUTURE! PLEASE UPDATE IF IT FAILS!"},{"lineNumber":65,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"kokonguyen191"},"content":"    public void execute_inputWithFourResults_fourRecipesFound() {"},{"lineNumber":67,"author":{"gitID":"kokonguyen191"},"content":"        SearchCommand searchCommandWithFourResult \u003d new SearchCommand(\"bot\");"},{"lineNumber":68,"author":{"gitID":"kokonguyen191"},"content":"        assertCommandSuccess(searchCommandWithFourResult, model, String.format(MESSAGE_SUCCESS, 4), model);"},{"lineNumber":69,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"kokonguyen191"},"content":"}"}],"authorContributionMap":{"kokonguyen191":70}},{"path":"src/test/java/seedu/recipe/logic/parser/IngredientCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"nicholasangcx"},"content":"//@@author nicholasangcx"},{"lineNumber":2,"author":{"gitID":"nicholasangcx"},"content":"package seedu.recipe.logic.parser;"},{"lineNumber":3,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":4,"author":{"gitID":"nicholasangcx"},"content":"import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"nicholasangcx"},"content":"import static seedu.recipe.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"nicholasangcx"},"content":"import static seedu.recipe.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":8,"author":{"gitID":"nicholasangcx"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":10,"author":{"gitID":"nicholasangcx"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":12,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.logic.commands.IngredientCommand;"},{"lineNumber":13,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.model.recipe.IngredientContainsKeywordsPredicate;"},{"lineNumber":14,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":15,"author":{"gitID":"nicholasangcx"},"content":"public class IngredientCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":17,"author":{"gitID":"nicholasangcx"},"content":"    private IngredientCommandParser parser \u003d new IngredientCommandParser();"},{"lineNumber":18,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":19,"author":{"gitID":"nicholasangcx"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"nicholasangcx"},"content":"    public void parseEmptyArgThrowsParseException() {"},{"lineNumber":21,"author":{"gitID":"nicholasangcx"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":22,"author":{"gitID":"nicholasangcx"},"content":"                IngredientCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":25,"author":{"gitID":"nicholasangcx"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"nicholasangcx"},"content":"    public void parseValidArgsReturnsIngredientCommand() {"},{"lineNumber":27,"author":{"gitID":"nicholasangcx"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":28,"author":{"gitID":"nicholasangcx"},"content":"        IngredientCommand expectedIngredientCommand \u003d"},{"lineNumber":29,"author":{"gitID":"nicholasangcx"},"content":"                new IngredientCommand(new IngredientContainsKeywordsPredicate(Arrays.asList(\"chicken\", \"rice\")),"},{"lineNumber":30,"author":{"gitID":"nicholasangcx"},"content":"                        new String[] {\"chicken\", \"rice\"});"},{"lineNumber":31,"author":{"gitID":"nicholasangcx"},"content":"        assertParseSuccess(parser, \"chicken rice\", expectedIngredientCommand);"},{"lineNumber":32,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":33,"author":{"gitID":"nicholasangcx"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":34,"author":{"gitID":"nicholasangcx"},"content":"        assertParseSuccess(parser, \" \\n chicken \\n \\t rice  \\t\", expectedIngredientCommand);"},{"lineNumber":35,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"nicholasangcx"},"content":"}"},{"lineNumber":37,"author":{"gitID":"nicholasangcx"},"content":"//@@author"}],"authorContributionMap":{"nicholasangcx":37}},{"path":"src/test/java/seedu/recipe/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.CALORIES_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.CALORIES_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.COOKING_TIME_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.COOKING_TIME_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.IMG_DESC_AMY;"},{"lineNumber":9,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.IMG_DESC_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INGREDIENT_DESC_AMY;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INGREDIENT_DESC_BOB;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INSTRUCTION_DESC_AMY;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INSTRUCTION_DESC_BOB;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_CALORIES_DESC;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_COOKING_TIME_DESC;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_INGREDIENT_DESC;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_INSTRUCTION_DESC;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_PREPARATION_TIME_DESC;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_SERVINGS_DESC;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":22,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.INVALID_URL_DESC;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.LF;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.PREPARATION_TIME_DESC_AMY;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.PREPARATION_TIME_DESC_BOB;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.SERVINGS_DESC_AMY;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.SERVINGS_DESC_BOB;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":34,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.URL_DESC_AMY;"},{"lineNumber":35,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.URL_DESC_BOB;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_CALORIES_AMY;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_CALORIES_BOB;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_COOKING_TIME_AMY;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_COOKING_TIME_BOB;"},{"lineNumber":40,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_IMG_AMY;"},{"lineNumber":41,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_IMG_BOB;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_INGREDIENT_AMY;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_INGREDIENT_BOB;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_INSTRUCTION_AMY;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_INSTRUCTION_BOB;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_PREPARATION_TIME_AMY;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_PREPARATION_TIME_BOB;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_SERVINGS_AMY;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_SERVINGS_BOB;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":54,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_URL_AMY;"},{"lineNumber":55,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_URL_BOB;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.AddCommand;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Calories;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.CookingTime;"},{"lineNumber":64,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.model.recipe.Image;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Ingredient;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Instruction;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Name;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.PreparationTime;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Recipe;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Servings;"},{"lineNumber":71,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.model.recipe.Url;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"import seedu.recipe.model.tag.Tag;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"import seedu.recipe.testutil.RecipeBuilder;"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        Recipe expectedRecipe \u003d"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                new RecipeBuilder().withName(VALID_NAME_BOB).withPreparationTime(VALID_PREPARATION_TIME_BOB)"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                        .withServings(VALID_SERVINGS_BOB).withCalories(VALID_CALORIES_BOB)"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                        .withCookingTime(VALID_COOKING_TIME_BOB)"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                        .withIngredient(VALID_INGREDIENT_BOB).withInstruction(VALID_INSTRUCTION_BOB)"},{"lineNumber":85,"author":{"gitID":"RyanAngJY"},"content":"                        .withUrl(VALID_URL_BOB).withImage(VALID_IMG_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"RyanAngJY"},"content":"        String newString \u003d IMG_DESC_BOB;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser,"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                PREAMBLE_WHITESPACE + NAME_DESC_BOB + PREPARATION_TIME_DESC_BOB + INGREDIENT_DESC_BOB"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                        + COOKING_TIME_DESC_BOB + SERVINGS_DESC_BOB + CALORIES_DESC_BOB"},{"lineNumber":92,"author":{"gitID":"RyanAngJY"},"content":"                        + INSTRUCTION_DESC_BOB + URL_DESC_BOB + IMG_DESC_BOB"},{"lineNumber":93,"author":{"gitID":"RyanAngJY"},"content":"                        + TAG_DESC_FRIEND, new AddCommand(expectedRecipe));"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser,"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                NAME_DESC_AMY + NAME_DESC_BOB + PREPARATION_TIME_DESC_BOB + INGREDIENT_DESC_BOB"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                        + COOKING_TIME_DESC_BOB + SERVINGS_DESC_BOB + CALORIES_DESC_BOB"},{"lineNumber":99,"author":{"gitID":"RyanAngJY"},"content":"                        + INSTRUCTION_DESC_BOB + URL_DESC_BOB + IMG_DESC_BOB"},{"lineNumber":100,"author":{"gitID":"RyanAngJY"},"content":"                        + TAG_DESC_FRIEND, new AddCommand(expectedRecipe));"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // multiple preparationTimes - last preparationTime accepted"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser,"},{"lineNumber":104,"author":{"gitID":"-"},"content":"                NAME_DESC_BOB + PREPARATION_TIME_DESC_AMY + PREPARATION_TIME_DESC_BOB + INGREDIENT_DESC_BOB"},{"lineNumber":105,"author":{"gitID":"-"},"content":"                        + COOKING_TIME_DESC_BOB + SERVINGS_DESC_BOB + CALORIES_DESC_BOB"},{"lineNumber":106,"author":{"gitID":"RyanAngJY"},"content":"                        + INSTRUCTION_DESC_BOB + URL_DESC_BOB + IMG_DESC_BOB"},{"lineNumber":107,"author":{"gitID":"RyanAngJY"},"content":"                        + TAG_DESC_FRIEND, new AddCommand(expectedRecipe));"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        // multiple ingredients - last ingredient accepted"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser,"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                NAME_DESC_BOB + PREPARATION_TIME_DESC_BOB + INGREDIENT_DESC_AMY + INGREDIENT_DESC_BOB"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                        + COOKING_TIME_DESC_BOB + SERVINGS_DESC_BOB + CALORIES_DESC_BOB"},{"lineNumber":113,"author":{"gitID":"RyanAngJY"},"content":"                        + INSTRUCTION_DESC_BOB + URL_DESC_BOB + IMG_DESC_BOB"},{"lineNumber":114,"author":{"gitID":"RyanAngJY"},"content":"                        + TAG_DESC_FRIEND, new AddCommand(expectedRecipe));"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // multiple instructions - last recipe accepted"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser,"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                NAME_DESC_BOB + PREPARATION_TIME_DESC_BOB + INGREDIENT_DESC_BOB + INSTRUCTION_DESC_AMY"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                        + COOKING_TIME_DESC_BOB + SERVINGS_DESC_BOB + CALORIES_DESC_BOB"},{"lineNumber":120,"author":{"gitID":"RyanAngJY"},"content":"                        + INSTRUCTION_DESC_BOB + URL_DESC_BOB + IMG_DESC_BOB"},{"lineNumber":121,"author":{"gitID":"RyanAngJY"},"content":"                        + TAG_DESC_FRIEND, new AddCommand(expectedRecipe));"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"RyanAngJY"},"content":"        //@@author RyanAngJY"},{"lineNumber":124,"author":{"gitID":"RyanAngJY"},"content":"        // multiple urls - last url accepted"},{"lineNumber":125,"author":{"gitID":"RyanAngJY"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PREPARATION_TIME_DESC_BOB + INGREDIENT_DESC_BOB"},{"lineNumber":126,"author":{"gitID":"RyanAngJY"},"content":"                + COOKING_TIME_DESC_BOB + SERVINGS_DESC_BOB + CALORIES_DESC_BOB"},{"lineNumber":127,"author":{"gitID":"RyanAngJY"},"content":"                + INSTRUCTION_DESC_BOB + URL_DESC_AMY + URL_DESC_BOB + IMG_DESC_BOB"},{"lineNumber":128,"author":{"gitID":"RyanAngJY"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedRecipe));"},{"lineNumber":129,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":130,"author":{"gitID":"RyanAngJY"},"content":"        // multiple images - last image accepted"},{"lineNumber":131,"author":{"gitID":"RyanAngJY"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PREPARATION_TIME_DESC_BOB + INGREDIENT_DESC_BOB"},{"lineNumber":132,"author":{"gitID":"RyanAngJY"},"content":"                + COOKING_TIME_DESC_BOB + SERVINGS_DESC_BOB + CALORIES_DESC_BOB"},{"lineNumber":133,"author":{"gitID":"RyanAngJY"},"content":"                + INSTRUCTION_DESC_BOB + URL_DESC_BOB + IMG_DESC_AMY + IMG_DESC_BOB"},{"lineNumber":134,"author":{"gitID":"RyanAngJY"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedRecipe));"},{"lineNumber":135,"author":{"gitID":"RyanAngJY"},"content":"        //@@author"},{"lineNumber":136,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":137,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        Recipe expectedRecipeMultipleTags \u003d"},{"lineNumber":140,"author":{"gitID":"-"},"content":"                new RecipeBuilder().withName(VALID_NAME_BOB).withPreparationTime(VALID_PREPARATION_TIME_BOB)"},{"lineNumber":141,"author":{"gitID":"-"},"content":"                        .withServings(VALID_SERVINGS_BOB).withCalories(VALID_CALORIES_BOB)"},{"lineNumber":142,"author":{"gitID":"-"},"content":"                        .withCookingTime(VALID_COOKING_TIME_BOB)"},{"lineNumber":143,"author":{"gitID":"-"},"content":"                        .withIngredient(VALID_INGREDIENT_BOB).withInstruction(VALID_INSTRUCTION_BOB)"},{"lineNumber":144,"author":{"gitID":"RyanAngJY"},"content":"                        .withUrl(VALID_URL_BOB).withImage(VALID_IMG_BOB)"},{"lineNumber":145,"author":{"gitID":"-"},"content":"                        .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser,"},{"lineNumber":147,"author":{"gitID":"-"},"content":"                NAME_DESC_BOB + PREPARATION_TIME_DESC_BOB + INGREDIENT_DESC_BOB + INSTRUCTION_DESC_BOB"},{"lineNumber":148,"author":{"gitID":"-"},"content":"                        + COOKING_TIME_DESC_BOB + SERVINGS_DESC_BOB + CALORIES_DESC_BOB"},{"lineNumber":149,"author":{"gitID":"RyanAngJY"},"content":"                        + URL_DESC_BOB + IMG_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":150,"author":{"gitID":"-"},"content":"                new AddCommand(expectedRecipeMultipleTags));"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"kokonguyen191"},"content":"    //@@author kokonguyen191"},{"lineNumber":154,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":155,"author":{"gitID":"kokonguyen191"},"content":"    public void parse_allFieldsPresentWithNewLineDelimiter_success() {"},{"lineNumber":156,"author":{"gitID":"kokonguyen191"},"content":"        Recipe expectedRecipe \u003d new RecipeBuilder().withName(VALID_NAME_AMY).withServings(VALID_SERVINGS_AMY)"},{"lineNumber":157,"author":{"gitID":"kokonguyen191"},"content":"                .withPreparationTime(VALID_PREPARATION_TIME_AMY).withIngredient(VALID_INGREDIENT_AMY)"},{"lineNumber":158,"author":{"gitID":"kokonguyen191"},"content":"                .withCookingTime(VALID_COOKING_TIME_AMY).withCalories(VALID_CALORIES_AMY)"},{"lineNumber":159,"author":{"gitID":"kokonguyen191"},"content":"                .withInstruction(VALID_INSTRUCTION_AMY).withUrl(VALID_URL_AMY)"},{"lineNumber":160,"author":{"gitID":"kokonguyen191"},"content":"                .withImage(VALID_IMG_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":161,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":162,"author":{"gitID":"kokonguyen191"},"content":"        // Multiple names - last name accepted"},{"lineNumber":163,"author":{"gitID":"kokonguyen191"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + LF"},{"lineNumber":164,"author":{"gitID":"kokonguyen191"},"content":"                        + NAME_DESC_AMY + LF + PREPARATION_TIME_DESC_AMY"},{"lineNumber":165,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + INGREDIENT_DESC_AMY + LF + INSTRUCTION_DESC_AMY"},{"lineNumber":166,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + URL_DESC_AMY + LF + IMG_DESC_AMY + LF + COOKING_TIME_DESC_AMY"},{"lineNumber":167,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + CALORIES_DESC_AMY + LF + SERVINGS_DESC_AMY,"},{"lineNumber":168,"author":{"gitID":"kokonguyen191"},"content":"                new AddCommand(expectedRecipe));"},{"lineNumber":169,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":170,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":171,"author":{"gitID":"kokonguyen191"},"content":"        // multiple ingredients - last ingredient accepted"},{"lineNumber":172,"author":{"gitID":"kokonguyen191"},"content":"        assertParseSuccess(parser, INGREDIENT_DESC_BOB + LF"},{"lineNumber":173,"author":{"gitID":"kokonguyen191"},"content":"                        + NAME_DESC_AMY + LF + PREPARATION_TIME_DESC_AMY"},{"lineNumber":174,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + INGREDIENT_DESC_AMY + LF + INSTRUCTION_DESC_AMY"},{"lineNumber":175,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + URL_DESC_AMY + LF + IMG_DESC_AMY + LF + COOKING_TIME_DESC_AMY"},{"lineNumber":176,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + CALORIES_DESC_AMY + LF + SERVINGS_DESC_AMY,"},{"lineNumber":177,"author":{"gitID":"kokonguyen191"},"content":"                new AddCommand(expectedRecipe));"},{"lineNumber":178,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":179,"author":{"gitID":"kokonguyen191"},"content":"        // multiple preparationTimes - last instruction accepted"},{"lineNumber":180,"author":{"gitID":"kokonguyen191"},"content":"        assertParseSuccess(parser, INSTRUCTION_DESC_BOB + LF"},{"lineNumber":181,"author":{"gitID":"kokonguyen191"},"content":"                        + NAME_DESC_AMY + LF + PREPARATION_TIME_DESC_AMY"},{"lineNumber":182,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + INGREDIENT_DESC_AMY + LF + INSTRUCTION_DESC_AMY"},{"lineNumber":183,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + URL_DESC_AMY + LF + IMG_DESC_AMY + LF + COOKING_TIME_DESC_AMY"},{"lineNumber":184,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + CALORIES_DESC_AMY + LF + SERVINGS_DESC_AMY,"},{"lineNumber":185,"author":{"gitID":"kokonguyen191"},"content":"                new AddCommand(expectedRecipe));"},{"lineNumber":186,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":187,"author":{"gitID":"kokonguyen191"},"content":"        // multiple instructions - last cooking time"},{"lineNumber":188,"author":{"gitID":"kokonguyen191"},"content":"        assertParseSuccess(parser, COOKING_TIME_DESC_BOB + LF"},{"lineNumber":189,"author":{"gitID":"kokonguyen191"},"content":"                        + NAME_DESC_AMY + LF + PREPARATION_TIME_DESC_AMY"},{"lineNumber":190,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + INGREDIENT_DESC_AMY + LF + INSTRUCTION_DESC_AMY"},{"lineNumber":191,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + URL_DESC_AMY + LF + IMG_DESC_AMY + LF + COOKING_TIME_DESC_AMY"},{"lineNumber":192,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + CALORIES_DESC_AMY + LF + SERVINGS_DESC_AMY,"},{"lineNumber":193,"author":{"gitID":"kokonguyen191"},"content":"                new AddCommand(expectedRecipe));"},{"lineNumber":194,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":195,"author":{"gitID":"kokonguyen191"},"content":"        // multiple instructions - last preparation time"},{"lineNumber":196,"author":{"gitID":"kokonguyen191"},"content":"        assertParseSuccess(parser, PREPARATION_TIME_DESC_BOB + LF"},{"lineNumber":197,"author":{"gitID":"kokonguyen191"},"content":"                        + NAME_DESC_AMY + LF + PREPARATION_TIME_DESC_AMY"},{"lineNumber":198,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + INGREDIENT_DESC_AMY + LF + INSTRUCTION_DESC_AMY"},{"lineNumber":199,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + URL_DESC_AMY + LF + IMG_DESC_AMY + LF + COOKING_TIME_DESC_AMY"},{"lineNumber":200,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + CALORIES_DESC_AMY + LF + SERVINGS_DESC_AMY,"},{"lineNumber":201,"author":{"gitID":"kokonguyen191"},"content":"                new AddCommand(expectedRecipe));"},{"lineNumber":202,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":203,"author":{"gitID":"kokonguyen191"},"content":"        // multiple instructions - last calories"},{"lineNumber":204,"author":{"gitID":"kokonguyen191"},"content":"        assertParseSuccess(parser, CALORIES_DESC_BOB + LF"},{"lineNumber":205,"author":{"gitID":"kokonguyen191"},"content":"                        + NAME_DESC_AMY + LF + PREPARATION_TIME_DESC_AMY"},{"lineNumber":206,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + INGREDIENT_DESC_AMY + LF + INSTRUCTION_DESC_AMY"},{"lineNumber":207,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + URL_DESC_AMY + LF + IMG_DESC_AMY + LF + COOKING_TIME_DESC_AMY"},{"lineNumber":208,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + CALORIES_DESC_AMY + LF + SERVINGS_DESC_AMY,"},{"lineNumber":209,"author":{"gitID":"kokonguyen191"},"content":"                new AddCommand(expectedRecipe));"},{"lineNumber":210,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":211,"author":{"gitID":"kokonguyen191"},"content":"        // multiple instructions - last servings"},{"lineNumber":212,"author":{"gitID":"kokonguyen191"},"content":"        assertParseSuccess(parser, SERVINGS_DESC_BOB + LF"},{"lineNumber":213,"author":{"gitID":"kokonguyen191"},"content":"                        + NAME_DESC_AMY + LF + PREPARATION_TIME_DESC_AMY"},{"lineNumber":214,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + INGREDIENT_DESC_AMY + LF + INSTRUCTION_DESC_AMY"},{"lineNumber":215,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + URL_DESC_AMY + LF + IMG_DESC_AMY + LF + COOKING_TIME_DESC_AMY"},{"lineNumber":216,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + CALORIES_DESC_AMY + LF + SERVINGS_DESC_AMY,"},{"lineNumber":217,"author":{"gitID":"kokonguyen191"},"content":"                new AddCommand(expectedRecipe));"},{"lineNumber":218,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":219,"author":{"gitID":"kokonguyen191"},"content":"        // multiple url - last url accepted"},{"lineNumber":220,"author":{"gitID":"kokonguyen191"},"content":"        assertParseSuccess(parser, URL_DESC_BOB + LF"},{"lineNumber":221,"author":{"gitID":"kokonguyen191"},"content":"                        + NAME_DESC_AMY + LF + PREPARATION_TIME_DESC_AMY"},{"lineNumber":222,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + INGREDIENT_DESC_AMY + LF + INSTRUCTION_DESC_AMY"},{"lineNumber":223,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + URL_DESC_AMY + LF + URL_DESC_AMY + LF + IMG_DESC_AMY"},{"lineNumber":224,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + COOKING_TIME_DESC_AMY + LF + CALORIES_DESC_AMY + LF + SERVINGS_DESC_AMY,"},{"lineNumber":225,"author":{"gitID":"kokonguyen191"},"content":"                new AddCommand(expectedRecipe));"},{"lineNumber":226,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":227,"author":{"gitID":"kokonguyen191"},"content":"        // multiple images - last image accepted"},{"lineNumber":228,"author":{"gitID":"kokonguyen191"},"content":"        assertParseSuccess(parser, URL_DESC_BOB + LF"},{"lineNumber":229,"author":{"gitID":"kokonguyen191"},"content":"                        + NAME_DESC_AMY + LF + PREPARATION_TIME_DESC_AMY"},{"lineNumber":230,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + INGREDIENT_DESC_AMY + LF + INSTRUCTION_DESC_AMY"},{"lineNumber":231,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + URL_DESC_AMY + LF + IMG_DESC_AMY + LF + IMG_DESC_AMY"},{"lineNumber":232,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + COOKING_TIME_DESC_AMY + LF + CALORIES_DESC_AMY + LF + SERVINGS_DESC_AMY,"},{"lineNumber":233,"author":{"gitID":"kokonguyen191"},"content":"                new AddCommand(expectedRecipe));"},{"lineNumber":234,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":235,"author":{"gitID":"kokonguyen191"},"content":"        // multiple tags - all accepted"},{"lineNumber":236,"author":{"gitID":"kokonguyen191"},"content":"        Recipe expectedRecipeMultipleTags \u003d new RecipeBuilder().withName(VALID_NAME_AMY).withServings("},{"lineNumber":237,"author":{"gitID":"kokonguyen191"},"content":"                VALID_SERVINGS_AMY).withPreparationTime(VALID_PREPARATION_TIME_AMY).withIngredient(VALID_INGREDIENT_AMY)"},{"lineNumber":238,"author":{"gitID":"kokonguyen191"},"content":"                .withCookingTime(VALID_COOKING_TIME_AMY).withCalories(VALID_CALORIES_AMY)"},{"lineNumber":239,"author":{"gitID":"kokonguyen191"},"content":"                .withInstruction(VALID_INSTRUCTION_AMY).withUrl(VALID_URL_AMY).withImage(VALID_IMG_AMY)"},{"lineNumber":240,"author":{"gitID":"kokonguyen191"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":241,"author":{"gitID":"kokonguyen191"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + LF + PREPARATION_TIME_DESC_AMY + LF + INGREDIENT_DESC_AMY"},{"lineNumber":242,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + INSTRUCTION_DESC_AMY + LF + URL_DESC_AMY + LF + IMG_DESC_AMY"},{"lineNumber":243,"author":{"gitID":"kokonguyen191"},"content":"                        + LF + COOKING_TIME_DESC_AMY + LF + CALORIES_DESC_AMY + LF + SERVINGS_DESC_AMY,"},{"lineNumber":244,"author":{"gitID":"kokonguyen191"},"content":"                new AddCommand(expectedRecipeMultipleTags));"},{"lineNumber":245,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":246,"author":{"gitID":"kokonguyen191"},"content":"    //@@author"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        // zero tags"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        Recipe expectedRecipe \u003d"},{"lineNumber":252,"author":{"gitID":"-"},"content":"                new RecipeBuilder().withName(VALID_NAME_AMY).withPreparationTime(VALID_PREPARATION_TIME_AMY)"},{"lineNumber":253,"author":{"gitID":"RyanAngJY"},"content":"                        .withIngredient(VALID_INGREDIENT_AMY).withInstruction(VALID_INSTRUCTION_AMY)"},{"lineNumber":254,"author":{"gitID":"-"},"content":"                        .withServings(VALID_SERVINGS_AMY).withCalories(VALID_CALORIES_AMY)"},{"lineNumber":255,"author":{"gitID":"RyanAngJY"},"content":"                        .withCookingTime(VALID_COOKING_TIME_AMY).withUrl(VALID_URL_AMY)"},{"lineNumber":256,"author":{"gitID":"RyanAngJY"},"content":"                        .withImage(VALID_IMG_AMY).withTags().build();"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser,"},{"lineNumber":258,"author":{"gitID":"RyanAngJY"},"content":"                NAME_DESC_AMY + PREPARATION_TIME_DESC_AMY + INGREDIENT_DESC_AMY + INSTRUCTION_DESC_AMY"},{"lineNumber":259,"author":{"gitID":"RyanAngJY"},"content":"                        + URL_DESC_AMY + IMG_DESC_AMY + COOKING_TIME_DESC_AMY + CALORIES_DESC_AMY + SERVINGS_DESC_AMY,"},{"lineNumber":260,"author":{"gitID":"-"},"content":"                new AddCommand(expectedRecipe));"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"        expectedRecipe \u003d new RecipeBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":263,"author":{"gitID":"-"},"content":"                .withPreparationTime(PreparationTime.NULL_PREPARATION_TIME_REFERENCE)"},{"lineNumber":264,"author":{"gitID":"-"},"content":"                .withIngredient(Ingredient.NULL_INGREDIENT_REFERENCE)"},{"lineNumber":265,"author":{"gitID":"-"},"content":"                .withInstruction(Instruction.NULL_INSTRUCTION_REFERENCE).withServings(Servings.NULL_SERVINGS_REFERENCE)"},{"lineNumber":266,"author":{"gitID":"-"},"content":"                .withCalories(Calories.NULL_CALORIES_REFERENCE).withCookingTime(CookingTime.NULL_COOKING_TIME_REFERENCE)"},{"lineNumber":267,"author":{"gitID":"RyanAngJY"},"content":"                .withUrl(Url.NULL_URL_REFERENCE).withImage(Image.NULL_IMAGE_REFERENCE).withTags().build();"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY, new AddCommand(expectedRecipe));"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":272,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        assertParseFailure(parser,"},{"lineNumber":277,"author":{"gitID":"RyanAngJY"},"content":"                VALID_NAME_BOB + PREPARATION_TIME_DESC_BOB + INGREDIENT_DESC_BOB + INSTRUCTION_DESC_BOB"},{"lineNumber":278,"author":{"gitID":"RyanAngJY"},"content":"                        + URL_DESC_BOB, expectedMessage);"},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        assertParseFailure(parser,"},{"lineNumber":282,"author":{"gitID":"RyanAngJY"},"content":"                VALID_NAME_BOB + VALID_PREPARATION_TIME_BOB + VALID_INGREDIENT_BOB + VALID_INSTRUCTION_BOB"},{"lineNumber":283,"author":{"gitID":"RyanAngJY"},"content":"                        + VALID_URL_BOB, expectedMessage);"},{"lineNumber":284,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":287,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":288,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":289,"author":{"gitID":"-"},"content":"        assertParseFailure(parser,"},{"lineNumber":290,"author":{"gitID":"-"},"content":"                INVALID_NAME_DESC + PREPARATION_TIME_DESC_BOB + INGREDIENT_DESC_BOB + INSTRUCTION_DESC_BOB"},{"lineNumber":291,"author":{"gitID":"RyanAngJY"},"content":"                        + URL_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"kokonguyen191"},"content":"        //@@author kokonguyen191"},{"lineNumber":294,"author":{"gitID":"kokonguyen191"},"content":"        // invalid ingredient"},{"lineNumber":295,"author":{"gitID":"kokonguyen191"},"content":"        assertParseFailure(parser,"},{"lineNumber":296,"author":{"gitID":"kokonguyen191"},"content":"                NAME_DESC_BOB + PREPARATION_TIME_DESC_BOB + INVALID_INGREDIENT_DESC + INSTRUCTION_DESC_BOB"},{"lineNumber":297,"author":{"gitID":"kokonguyen191"},"content":"                        + URL_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":298,"author":{"gitID":"kokonguyen191"},"content":"                Ingredient.MESSAGE_INGREDIENT_CONSTRAINTS);"},{"lineNumber":299,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":300,"author":{"gitID":"kokonguyen191"},"content":"        // invalid instruction"},{"lineNumber":301,"author":{"gitID":"kokonguyen191"},"content":"        assertParseFailure(parser,"},{"lineNumber":302,"author":{"gitID":"kokonguyen191"},"content":"                NAME_DESC_BOB + PREPARATION_TIME_DESC_BOB + INGREDIENT_DESC_BOB + INVALID_INSTRUCTION_DESC"},{"lineNumber":303,"author":{"gitID":"kokonguyen191"},"content":"                        + URL_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":304,"author":{"gitID":"kokonguyen191"},"content":"                Instruction.MESSAGE_INSTRUCTION_CONSTRAINTS);"},{"lineNumber":305,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":306,"author":{"gitID":"kokonguyen191"},"content":"        // invalid preparation time"},{"lineNumber":307,"author":{"gitID":"kokonguyen191"},"content":"        assertParseFailure(parser,"},{"lineNumber":308,"author":{"gitID":"kokonguyen191"},"content":"                NAME_DESC_BOB + INVALID_PREPARATION_TIME_DESC + INGREDIENT_DESC_BOB + INSTRUCTION_DESC_BOB"},{"lineNumber":309,"author":{"gitID":"kokonguyen191"},"content":"                        + URL_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":310,"author":{"gitID":"kokonguyen191"},"content":"                PreparationTime.MESSAGE_PREPARATION_TIME_CONSTRAINTS);"},{"lineNumber":311,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":312,"author":{"gitID":"kokonguyen191"},"content":"        // invalid cooking time"},{"lineNumber":313,"author":{"gitID":"kokonguyen191"},"content":"        assertParseFailure(parser,"},{"lineNumber":314,"author":{"gitID":"kokonguyen191"},"content":"                NAME_DESC_BOB + INVALID_COOKING_TIME_DESC + INGREDIENT_DESC_BOB + INSTRUCTION_DESC_BOB"},{"lineNumber":315,"author":{"gitID":"kokonguyen191"},"content":"                        + URL_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":316,"author":{"gitID":"kokonguyen191"},"content":"                CookingTime.MESSAGE_COOKING_TIME_CONSTRAINTS);"},{"lineNumber":317,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":318,"author":{"gitID":"kokonguyen191"},"content":"        // invalid calories"},{"lineNumber":319,"author":{"gitID":"kokonguyen191"},"content":"        assertParseFailure(parser,"},{"lineNumber":320,"author":{"gitID":"kokonguyen191"},"content":"                NAME_DESC_BOB + INVALID_CALORIES_DESC + INGREDIENT_DESC_BOB + INSTRUCTION_DESC_BOB"},{"lineNumber":321,"author":{"gitID":"kokonguyen191"},"content":"                        + URL_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":322,"author":{"gitID":"kokonguyen191"},"content":"                Calories.MESSAGE_CALORIES_CONSTRAINTS);"},{"lineNumber":323,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":324,"author":{"gitID":"kokonguyen191"},"content":"        // invalid servings"},{"lineNumber":325,"author":{"gitID":"kokonguyen191"},"content":"        assertParseFailure(parser,"},{"lineNumber":326,"author":{"gitID":"kokonguyen191"},"content":"                NAME_DESC_BOB + INVALID_SERVINGS_DESC + INGREDIENT_DESC_BOB + INSTRUCTION_DESC_BOB"},{"lineNumber":327,"author":{"gitID":"kokonguyen191"},"content":"                        + URL_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":328,"author":{"gitID":"kokonguyen191"},"content":"                Servings.MESSAGE_SERVINGS_CONSTRAINTS);"},{"lineNumber":329,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":330,"author":{"gitID":"RyanAngJY"},"content":"        //@@author RyanAngJY"},{"lineNumber":331,"author":{"gitID":"RyanAngJY"},"content":"        // invalid url"},{"lineNumber":332,"author":{"gitID":"RyanAngJY"},"content":"        assertParseFailure(parser,"},{"lineNumber":333,"author":{"gitID":"RyanAngJY"},"content":"                NAME_DESC_BOB + PREPARATION_TIME_DESC_BOB + INGREDIENT_DESC_BOB + INSTRUCTION_DESC_BOB"},{"lineNumber":334,"author":{"gitID":"RyanAngJY"},"content":"                        + INVALID_URL_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":335,"author":{"gitID":"RyanAngJY"},"content":"                Url.MESSAGE_URL_CONSTRAINTS);"},{"lineNumber":336,"author":{"gitID":"RyanAngJY"},"content":"        //@@author"},{"lineNumber":337,"author":{"gitID":"-"},"content":""},{"lineNumber":338,"author":{"gitID":"-"},"content":"        // invalid tag"},{"lineNumber":339,"author":{"gitID":"-"},"content":"        assertParseFailure(parser,"},{"lineNumber":340,"author":{"gitID":"-"},"content":"                NAME_DESC_BOB + PREPARATION_TIME_DESC_BOB + INGREDIENT_DESC_BOB + INSTRUCTION_DESC_BOB"},{"lineNumber":341,"author":{"gitID":"RyanAngJY"},"content":"                        + URL_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":342,"author":{"gitID":"-"},"content":""},{"lineNumber":343,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":344,"author":{"gitID":"-"},"content":"        assertParseFailure(parser,"},{"lineNumber":345,"author":{"gitID":"RyanAngJY"},"content":"                INVALID_NAME_DESC + PREPARATION_TIME_DESC_BOB + INGREDIENT_DESC_BOB"},{"lineNumber":346,"author":{"gitID":"RyanAngJY"},"content":"                        + INVALID_INSTRUCTION_DESC + URL_DESC_BOB, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":347,"author":{"gitID":"-"},"content":""},{"lineNumber":348,"author":{"gitID":"-"},"content":"        // non-empty preamble"},{"lineNumber":349,"author":{"gitID":"-"},"content":"        assertParseFailure(parser,"},{"lineNumber":350,"author":{"gitID":"RyanAngJY"},"content":"                PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PREPARATION_TIME_DESC_BOB + INGREDIENT_DESC_BOB"},{"lineNumber":351,"author":{"gitID":"RyanAngJY"},"content":"                        + INSTRUCTION_DESC_BOB + URL_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":352,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":353,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":354,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kokonguyen191":131,"RyanAngJY":63,"-":160}},{"path":"src/test/java/seedu/recipe/logic/commands/ParseCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"kokonguyen191"},"content":"//@@author kokonguyen191"},{"lineNumber":2,"author":{"gitID":"kokonguyen191"},"content":"package seedu.recipe.logic.commands;"},{"lineNumber":3,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":4,"author":{"gitID":"kokonguyen191"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.logic.commands.ParseCommand.MESSAGE_SUCCESS;"},{"lineNumber":6,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":7,"author":{"gitID":"kokonguyen191"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":9,"author":{"gitID":"kokonguyen191"},"content":"public class ParseCommandTest {"},{"lineNumber":10,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":11,"author":{"gitID":"kokonguyen191"},"content":"    public void execute_nothing_throwsAssertionError() {"},{"lineNumber":12,"author":{"gitID":"kokonguyen191"},"content":"        CommandResult result \u003d new ParseCommand().execute();"},{"lineNumber":13,"author":{"gitID":"kokonguyen191"},"content":"        assertEquals(MESSAGE_SUCCESS, result.feedbackToUser);"},{"lineNumber":14,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"kokonguyen191"},"content":"}"}],"authorContributionMap":{"kokonguyen191":15}},{"path":"src/test/java/seedu/recipe/logic/commands/util/WikiaQueryHandlerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"kokonguyen191"},"content":"//@@author kokonguyen191"},{"lineNumber":2,"author":{"gitID":"kokonguyen191"},"content":"package seedu.recipe.logic.commands.util;"},{"lineNumber":3,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":4,"author":{"gitID":"kokonguyen191"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"kokonguyen191"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.logic.commands.util.WikiaQueryHandler.QUERY_URL;"},{"lineNumber":7,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":8,"author":{"gitID":"kokonguyen191"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"kokonguyen191"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"kokonguyen191"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":11,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":12,"author":{"gitID":"kokonguyen191"},"content":"public class WikiaQueryHandlerTest {"},{"lineNumber":13,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":14,"author":{"gitID":"kokonguyen191"},"content":"    @Rule"},{"lineNumber":15,"author":{"gitID":"kokonguyen191"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":16,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":17,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"kokonguyen191"},"content":"    public void constructor_nullQuery_throwsNullPointerException() {"},{"lineNumber":19,"author":{"gitID":"kokonguyen191"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":20,"author":{"gitID":"kokonguyen191"},"content":"        new WikiaQueryHandler(null);"},{"lineNumber":21,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":23,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"kokonguyen191"},"content":"    public void constructor_invalidQuery_throwsAssertionError() {"},{"lineNumber":25,"author":{"gitID":"kokonguyen191"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":26,"author":{"gitID":"kokonguyen191"},"content":"        new WikiaQueryHandler(\"\");"},{"lineNumber":27,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":29,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"kokonguyen191"},"content":"    public void getRecipeQueryUrl_normalString_success() throws Exception {"},{"lineNumber":31,"author":{"gitID":"kokonguyen191"},"content":"        WikiaQueryHandler testWikiaQueryHandler \u003d new WikiaQueryHandler(\"chickens soup\");"},{"lineNumber":32,"author":{"gitID":"kokonguyen191"},"content":"        assertEquals(testWikiaQueryHandler.getRecipeQueryUrl(), QUERY_URL + \"chickens soup\");"},{"lineNumber":33,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":35,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"kokonguyen191"},"content":"    public void getQueryNumberOfResults_zeroResults_success() throws Exception {"},{"lineNumber":37,"author":{"gitID":"kokonguyen191"},"content":"        WikiaQueryHandler wikiaQueryHandlerWithZeroResults \u003d new WikiaQueryHandler(\"blah\");"},{"lineNumber":38,"author":{"gitID":"kokonguyen191"},"content":"        assertEquals(wikiaQueryHandlerWithZeroResults.getQueryNumberOfResults(), 0);"},{"lineNumber":39,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":41,"author":{"gitID":"kokonguyen191"},"content":"    // It is very hard to give a concrete number for this test as recipes are added everyday"},{"lineNumber":42,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"kokonguyen191"},"content":"    public void getQueryNumberOfResults_bigResults_success() throws Exception {"},{"lineNumber":44,"author":{"gitID":"kokonguyen191"},"content":"        WikiaQueryHandler wikiaQueryHandlerWithZeroResults \u003d new WikiaQueryHandler(\"chicken\");"},{"lineNumber":45,"author":{"gitID":"kokonguyen191"},"content":"        assertTrue(wikiaQueryHandlerWithZeroResults.getQueryNumberOfResults() \u003e 5000);"},{"lineNumber":46,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":48,"author":{"gitID":"kokonguyen191"},"content":"    // THIS TEST MIGHT FAIL IN THE FUTURE! PLEASE UPDATE IF IT FAILS"},{"lineNumber":49,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"kokonguyen191"},"content":"    public void getQueryNumberOfResults_fourResults_success() throws Exception {"},{"lineNumber":51,"author":{"gitID":"kokonguyen191"},"content":"        WikiaQueryHandler wikiaQueryHandlerWithFourResults \u003d new WikiaQueryHandler(\"bot\");"},{"lineNumber":52,"author":{"gitID":"kokonguyen191"},"content":"        assertEquals(wikiaQueryHandlerWithFourResults.getQueryNumberOfResults(), 4);"},{"lineNumber":53,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"kokonguyen191"},"content":"}"}],"authorContributionMap":{"kokonguyen191":54}},{"path":"src/test/java/seedu/recipe/logic/commands/ShareCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.showRecipeAtIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.recipe.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.recipe.testutil.TypicalIndexes.INDEX_SECOND_RECIPE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.recipe.testutil.TypicalIndexes.INDEX_THIRD_RECIPE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.recipe.testutil.TypicalRecipes.getTypicalRecipeBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.commons.events.ui.ShareRecipeEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.recipe.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.recipe.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.recipe.model.UserPrefs;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.recipe.ui.testutil.EventsCollectorRule;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"RyanAngJY"},"content":" * Contains integration tests (interaction with the Model) for {@code ShareCommand}."},{"lineNumber":30,"author":{"gitID":"RyanAngJY"},"content":" */"},{"lineNumber":31,"author":{"gitID":"RyanAngJY"},"content":"public class ShareCommandTest {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Index lastRecipeIndex \u003d Index.fromOneBased(model.getFilteredRecipeList().size());"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_RECIPE);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_THIRD_RECIPE);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(lastRecipeIndex);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredRecipeList().size() + 1);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        showRecipeAtIndex(model, INDEX_FIRST_RECIPE);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_RECIPE);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        showRecipeAtIndex(model, INDEX_FIRST_RECIPE);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_RECIPE;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of recipe book list"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getRecipeBook().getRecipeList().size());"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":78,"author":{"gitID":"RyanAngJY"},"content":"        ShareCommand shareFirstCommand \u003d new ShareCommand(INDEX_FIRST_RECIPE);"},{"lineNumber":79,"author":{"gitID":"RyanAngJY"},"content":"        ShareCommand shareSecondCommand \u003d new ShareCommand(INDEX_SECOND_RECIPE);"},{"lineNumber":80,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":81,"author":{"gitID":"RyanAngJY"},"content":"        // same object -\u003e returns true"},{"lineNumber":82,"author":{"gitID":"RyanAngJY"},"content":"        assertTrue(shareFirstCommand.equals(shareFirstCommand));"},{"lineNumber":83,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":84,"author":{"gitID":"RyanAngJY"},"content":"        // same values -\u003e returns true"},{"lineNumber":85,"author":{"gitID":"RyanAngJY"},"content":"        ShareCommand shareFirstCommandCopy \u003d new ShareCommand(INDEX_FIRST_RECIPE);"},{"lineNumber":86,"author":{"gitID":"RyanAngJY"},"content":"        assertTrue(shareFirstCommand.equals(shareFirstCommandCopy));"},{"lineNumber":87,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":88,"author":{"gitID":"RyanAngJY"},"content":"        // different types -\u003e returns false"},{"lineNumber":89,"author":{"gitID":"RyanAngJY"},"content":"        assertFalse(shareFirstCommand.equals(1));"},{"lineNumber":90,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":91,"author":{"gitID":"RyanAngJY"},"content":"        // null -\u003e returns false"},{"lineNumber":92,"author":{"gitID":"RyanAngJY"},"content":"        assertFalse(shareFirstCommand.equals(null));"},{"lineNumber":93,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":94,"author":{"gitID":"RyanAngJY"},"content":"        // different recipe -\u003e returns false"},{"lineNumber":95,"author":{"gitID":"RyanAngJY"},"content":"        assertFalse(shareFirstCommand.equals(shareSecondCommand));"},{"lineNumber":96,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":98,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"RyanAngJY"},"content":"     * Executes a {@code ShareCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * is raised with the correct index."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":103,"author":{"gitID":"RyanAngJY"},"content":"        ShareCommand shareCommand \u003d prepareCommand(index);"},{"lineNumber":104,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":105,"author":{"gitID":"RyanAngJY"},"content":"        try {"},{"lineNumber":106,"author":{"gitID":"RyanAngJY"},"content":"            CommandResult commandResult \u003d shareCommand.execute();"},{"lineNumber":107,"author":{"gitID":"RyanAngJY"},"content":"            assertEquals(String.format(ShareCommand.MESSAGE_SHARE_RECIPE_SUCCESS, index.getOneBased()),"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"RyanAngJY"},"content":"        ShareRecipeEvent lastEvent \u003d (ShareRecipeEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"RyanAngJY"},"content":"     * Executes a {@code ShareCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":122,"author":{"gitID":"RyanAngJY"},"content":"        ShareCommand shareCommand \u003d prepareCommand(index);"},{"lineNumber":123,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":124,"author":{"gitID":"RyanAngJY"},"content":"        try {"},{"lineNumber":125,"author":{"gitID":"RyanAngJY"},"content":"            shareCommand.execute();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"RyanAngJY"},"content":"     * Returns a {@code ShareCommand} with parameters {@code index}."},{"lineNumber":135,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"RyanAngJY"},"content":"    private ShareCommand prepareCommand(Index index) {"},{"lineNumber":137,"author":{"gitID":"RyanAngJY"},"content":"        ShareCommand shareCommand \u003d new ShareCommand(index);"},{"lineNumber":138,"author":{"gitID":"RyanAngJY"},"content":"        shareCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":139,"author":{"gitID":"RyanAngJY"},"content":"        return shareCommand;"},{"lineNumber":140,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"RyanAngJY"},"content":"}"}],"authorContributionMap":{"RyanAngJY":45,"-":96}},{"path":"src/test/java/seedu/recipe/logic/commands/ChangeThemeCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"kokonguyen191"},"content":"//@@author kokonguyen191"},{"lineNumber":2,"author":{"gitID":"kokonguyen191"},"content":"package seedu.recipe.logic.commands;"},{"lineNumber":3,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":4,"author":{"gitID":"kokonguyen191"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"kokonguyen191"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.logic.commands.ChangeThemeCommand.SHOWING_CHANGE_THEME_MESSAGE;"},{"lineNumber":7,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":8,"author":{"gitID":"kokonguyen191"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"kokonguyen191"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":11,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.commons.events.ui.ChangeThemeRequestEvent;"},{"lineNumber":12,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.ui.testutil.EventsCollectorRule;"},{"lineNumber":13,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":14,"author":{"gitID":"kokonguyen191"},"content":"public class ChangeThemeCommandTest {"},{"lineNumber":15,"author":{"gitID":"kokonguyen191"},"content":"    @Rule"},{"lineNumber":16,"author":{"gitID":"kokonguyen191"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":17,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":18,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"kokonguyen191"},"content":"    public void execute_changeTheme_success() {"},{"lineNumber":20,"author":{"gitID":"kokonguyen191"},"content":"        CommandResult result \u003d new ChangeThemeCommand().execute();"},{"lineNumber":21,"author":{"gitID":"kokonguyen191"},"content":"        assertEquals(SHOWING_CHANGE_THEME_MESSAGE, result.feedbackToUser);"},{"lineNumber":22,"author":{"gitID":"kokonguyen191"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ChangeThemeRequestEvent);"},{"lineNumber":23,"author":{"gitID":"kokonguyen191"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":24,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"kokonguyen191"},"content":"}"}],"authorContributionMap":{"kokonguyen191":25}},{"path":"src/test/java/seedu/recipe/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_CALORIES;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_COOKING_TIME;"},{"lineNumber":8,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_IMG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INSTRUCTION;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_PREPARATION_TIME;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_SERVINGS;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":15,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_URL;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import com.dropbox.core.DbxException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.index.Index;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.CommandHistory;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.UndoRedoStack;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.exceptions.CommandException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.recipe.model.Model;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.recipe.model.RecipeBook;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.NameContainsKeywordsPredicate;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Recipe;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.exceptions.RecipeNotFoundException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.recipe.testutil.EditRecipeDescriptorBuilder;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":36,"author":{"gitID":"-"},"content":" */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String VALID_INGREDIENT_AMY \u003d \"this,is,a,test\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String VALID_INGREDIENT_BOB \u003d \"some, ingredients, here\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_INSTRUCTION_AMY \u003d \"Block 312, \\nAmy Street 1\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String VALID_INSTRUCTION_BOB \u003d \"Block 123, \\nBobby Street 3\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String VALID_COOKING_TIME_AMY \u003d \"1111\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String VALID_COOKING_TIME_BOB \u003d \"2222\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String VALID_PREPARATION_TIME_AMY \u003d \"150h\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String VALID_PREPARATION_TIME_BOB \u003d \"200m\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String VALID_CALORIES_AMY \u003d \"11122\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final String VALID_CALORIES_BOB \u003d \"5000\";"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String VALID_SERVINGS_AMY \u003d \"3\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String VALID_SERVINGS_BOB \u003d \"4\";"},{"lineNumber":53,"author":{"gitID":"RyanAngJY"},"content":"    public static final String VALID_IMG_AMY \u003d \"-\";"},{"lineNumber":54,"author":{"gitID":"RyanAngJY"},"content":"    public static final String VALID_IMG_BOB \u003d \"-\";"},{"lineNumber":55,"author":{"gitID":"RyanAngJY"},"content":"    public static final String VALID_URL_AMY \u003d \"https://www.bbcgoodfood.com/recipes/volcano-cake\";"},{"lineNumber":56,"author":{"gitID":"RyanAngJY"},"content":"    public static final String VALID_URL_BOB \u003d \"https://www.bbcgoodfood.com/recipes/collection/chicken-salad\";"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String INGREDIENT_DESC_AMY \u003d \" \" + PREFIX_INGREDIENT + VALID_INGREDIENT_AMY;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String INGREDIENT_DESC_BOB \u003d \" \" + PREFIX_INGREDIENT + VALID_INGREDIENT_BOB;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String INSTRUCTION_DESC_AMY \u003d \" \" + PREFIX_INSTRUCTION + VALID_INSTRUCTION_AMY;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final String INSTRUCTION_DESC_BOB \u003d \" \" + PREFIX_INSTRUCTION + VALID_INSTRUCTION_BOB;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final String COOKING_TIME_DESC_AMY \u003d \" \" + PREFIX_COOKING_TIME + VALID_COOKING_TIME_AMY;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static final String COOKING_TIME_DESC_BOB \u003d \" \" + PREFIX_COOKING_TIME + VALID_COOKING_TIME_BOB;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static final String PREPARATION_TIME_DESC_AMY \u003d \" \" + PREFIX_PREPARATION_TIME + VALID_PREPARATION_TIME_AMY;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static final String PREPARATION_TIME_DESC_BOB \u003d \" \" + PREFIX_PREPARATION_TIME + VALID_PREPARATION_TIME_BOB;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static final String CALORIES_DESC_AMY \u003d \" \" + PREFIX_CALORIES + VALID_CALORIES_AMY;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static final String CALORIES_DESC_BOB \u003d \" \" + PREFIX_CALORIES + VALID_CALORIES_BOB;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static final String SERVINGS_DESC_AMY \u003d \" \" + PREFIX_SERVINGS + VALID_SERVINGS_AMY;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public static final String SERVINGS_DESC_BOB \u003d \" \" + PREFIX_SERVINGS + VALID_SERVINGS_BOB;"},{"lineNumber":74,"author":{"gitID":"RyanAngJY"},"content":"    public static final String URL_DESC_AMY \u003d \" \" + PREFIX_URL + VALID_URL_AMY;"},{"lineNumber":75,"author":{"gitID":"RyanAngJY"},"content":"    public static final String URL_DESC_BOB \u003d \" \" + PREFIX_URL + VALID_URL_BOB;"},{"lineNumber":76,"author":{"gitID":"RyanAngJY"},"content":"    public static final String IMG_DESC_AMY \u003d \" \" + PREFIX_IMG + VALID_IMG_AMY;"},{"lineNumber":77,"author":{"gitID":"RyanAngJY"},"content":"    public static final String IMG_DESC_BOB \u003d \" \" + PREFIX_IMG + VALID_IMG_BOB;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    // \u0027a\u0027 not allowed in preparationTimes"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public static final String INVALID_INGREDIENT_DESC \u003d \" \" + PREFIX_INGREDIENT + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    // empty string not allowed for instructions"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public static final String INVALID_INSTRUCTION_DESC \u003d \" \" + PREFIX_INSTRUCTION;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public static final String INVALID_COOKING_TIME_DESC \u003d \" \" + PREFIX_COOKING_TIME + \"911a\";"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public static final String INVALID_PREPARATION_TIME_DESC \u003d \" \" + PREFIX_PREPARATION_TIME + \"911a\";"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public static final String INVALID_CALORIES_DESC \u003d \" \" + PREFIX_CALORIES + \"no lah\";"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public static final String INVALID_SERVINGS_DESC \u003d \" \" + PREFIX_SERVINGS + \"can\u0027t do\";"},{"lineNumber":90,"author":{"gitID":"RyanAngJY"},"content":"    // missing \"https://\" or \"http://\""},{"lineNumber":91,"author":{"gitID":"RyanAngJY"},"content":"    public static final String INVALID_URL_DESC \u003d \" \" + PREFIX_URL + \"www.google.com\";"},{"lineNumber":92,"author":{"gitID":"RyanAngJY"},"content":"    public static final String INVALID_IMG_DESC \u003d \" \" + PREFIX_IMG + \"NOT@VALID\";"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public static final String LF \u003d \"\\n\";"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditRecipeDescriptor DESC_AMY;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditRecipeDescriptor DESC_BOB;"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditRecipeDescriptorBuilder()"},{"lineNumber":104,"author":{"gitID":"-"},"content":"                .withName(VALID_NAME_AMY)"},{"lineNumber":105,"author":{"gitID":"-"},"content":"                .withIngredient(VALID_INGREDIENT_AMY)"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                .withInstruction(VALID_INSTRUCTION_AMY)"},{"lineNumber":107,"author":{"gitID":"-"},"content":"                .withCookingTime(VALID_COOKING_TIME_AMY)"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                .withPreparationTime(VALID_PREPARATION_TIME_AMY)"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                .withCalories(VALID_CALORIES_AMY)"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                .withServings(VALID_SERVINGS_AMY)"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                .withUrl(VALID_URL_AMY)"},{"lineNumber":112,"author":{"gitID":"RyanAngJY"},"content":"                .withImage(VALID_IMG_AMY)"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditRecipeDescriptorBuilder()"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                .withName(VALID_NAME_BOB)"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                .withIngredient(VALID_INGREDIENT_BOB)"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                .withInstruction(VALID_INSTRUCTION_BOB)"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                .withCookingTime(VALID_COOKING_TIME_BOB)"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                .withPreparationTime(VALID_PREPARATION_TIME_BOB)"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                .withCalories(VALID_CALORIES_BOB)"},{"lineNumber":121,"author":{"gitID":"-"},"content":"                .withServings(VALID_SERVINGS_BOB)"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                .withUrl(VALID_URL_BOB)"},{"lineNumber":123,"author":{"gitID":"RyanAngJY"},"content":"                .withImage(VALID_IMG_BOB)"},{"lineNumber":124,"author":{"gitID":"RyanAngJY"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":133,"author":{"gitID":"-"},"content":"                                            Model expectedModel) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        } catch (CommandException | DbxException ce) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * - or \u003cbr\u003e"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * - a {@code UploadCommandException} is thrown \u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * - the UploadCommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * - the recipe book and the filtered recipe list in the {@code actualModel} remain unchanged"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":155,"author":{"gitID":"-"},"content":"        RecipeBook expectedRecipeBook \u003d new RecipeBook(actualModel.getRecipeBook());"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        List\u003cRecipe\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredRecipeList());"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        } catch (CommandException | DbxException e) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            assertEquals(expectedRecipeBook, actualModel.getRecipeBook());"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredRecipeList());"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the recipe at the given {@code targetIndex} in the"},{"lineNumber":170,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s recipe book."},{"lineNumber":171,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    public static void showRecipeAtIndex(Model model, Index targetIndex) {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredRecipeList().size());"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        Recipe recipe \u003d model.getFilteredRecipeList().get(targetIndex.getZeroBased());"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d recipe.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        model.updateFilteredRecipeList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredRecipeList().size());"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * Deletes the first recipe in {@code model}\u0027s filtered list from {@code model}\u0027s recipe book."},{"lineNumber":184,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public static void deleteFirstRecipe(Model model) {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        Recipe firstRecipe \u003d model.getFilteredRecipeList().get(0);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            model.deleteRecipe(firstRecipe);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        } catch (RecipeNotFoundException pnfe) {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Recipe in filtered list must exist in model.\", pnfe);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":196,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":205,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":16,"-":195}},{"path":"src/test/java/seedu/recipe/logic/commands/UploadCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"nicholasangcx"},"content":"//@@author nicholasangcx"},{"lineNumber":2,"author":{"gitID":"nicholasangcx"},"content":"package seedu.recipe.logic.commands;"},{"lineNumber":3,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":4,"author":{"gitID":"nicholasangcx"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"nicholasangcx"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"nicholasangcx"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"nicholasangcx"},"content":"import static seedu.recipe.logic.commands.UploadCommand.MESSAGE_ACCESS_TOKEN;"},{"lineNumber":8,"author":{"gitID":"nicholasangcx"},"content":"import static seedu.recipe.testutil.TypicalRecipes.getTypicalRecipeBook;"},{"lineNumber":9,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":10,"author":{"gitID":"nicholasangcx"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":12,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.model.Model;"},{"lineNumber":13,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.ui.util.CloudStorageUtil;"},{"lineNumber":16,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":17,"author":{"gitID":"nicholasangcx"},"content":"public class UploadCommandTest {"},{"lineNumber":18,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":19,"author":{"gitID":"nicholasangcx"},"content":"    private Model model \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs());"},{"lineNumber":20,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":21,"author":{"gitID":"nicholasangcx"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"nicholasangcx"},"content":"    public void equals() {"},{"lineNumber":23,"author":{"gitID":"nicholasangcx"},"content":"        String firstTest \u003d \"RecipeBook1\";"},{"lineNumber":24,"author":{"gitID":"nicholasangcx"},"content":"        String secondTest \u003d \"Recipe_Book_1\";"},{"lineNumber":25,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":26,"author":{"gitID":"nicholasangcx"},"content":"        UploadCommand uploadFirstCommand \u003d new UploadCommand(firstTest);"},{"lineNumber":27,"author":{"gitID":"nicholasangcx"},"content":"        UploadCommand uploadSecondCommand \u003d new UploadCommand(secondTest);"},{"lineNumber":28,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":29,"author":{"gitID":"nicholasangcx"},"content":"        // same object -\u003e returns true"},{"lineNumber":30,"author":{"gitID":"nicholasangcx"},"content":"        assertTrue(uploadFirstCommand.equals(uploadFirstCommand));"},{"lineNumber":31,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":32,"author":{"gitID":"nicholasangcx"},"content":"        // same values -\u003e returns true"},{"lineNumber":33,"author":{"gitID":"nicholasangcx"},"content":"        UploadCommand uploadFirstCommandCopy \u003d new UploadCommand(firstTest);"},{"lineNumber":34,"author":{"gitID":"nicholasangcx"},"content":"        assertTrue(uploadFirstCommandCopy.equals(uploadFirstCommand));"},{"lineNumber":35,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":36,"author":{"gitID":"nicholasangcx"},"content":"        // different types -\u003e returns false"},{"lineNumber":37,"author":{"gitID":"nicholasangcx"},"content":"        assertFalse(uploadFirstCommand.equals(1));"},{"lineNumber":38,"author":{"gitID":"nicholasangcx"},"content":"        assertFalse(uploadFirstCommand.equals(new HelpCommand()));"},{"lineNumber":39,"author":{"gitID":"nicholasangcx"},"content":"        assertFalse(uploadFirstCommand.equals(\"anything\"));"},{"lineNumber":40,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":41,"author":{"gitID":"nicholasangcx"},"content":"        // null -\u003e returns false"},{"lineNumber":42,"author":{"gitID":"nicholasangcx"},"content":"        assertFalse(uploadFirstCommand.equals(null));"},{"lineNumber":43,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":44,"author":{"gitID":"nicholasangcx"},"content":"        // different recipe -\u003e returns false"},{"lineNumber":45,"author":{"gitID":"nicholasangcx"},"content":"        assertFalse(uploadFirstCommand.equals(uploadSecondCommand));"},{"lineNumber":46,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":48,"author":{"gitID":"nicholasangcx"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"nicholasangcx"},"content":"    public void execute_inputWithValidArgs_noAccessToken() {"},{"lineNumber":50,"author":{"gitID":"nicholasangcx"},"content":"        UploadCommand uploadCommand \u003d new UploadCommand(\"recipebook.xml\");"},{"lineNumber":51,"author":{"gitID":"nicholasangcx"},"content":"        CloudStorageUtil.setAccessToken(null);"},{"lineNumber":52,"author":{"gitID":"nicholasangcx"},"content":"        assertCommandSuccess(uploadCommand, model, MESSAGE_ACCESS_TOKEN, model);"},{"lineNumber":53,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"nicholasangcx"},"content":"}"},{"lineNumber":55,"author":{"gitID":"nicholasangcx"},"content":"//@@author"}],"authorContributionMap":{"nicholasangcx":55}},{"path":"src/test/java/seedu/recipe/logic/commands/SelectCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.showRecipeAtIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.recipe.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.recipe.testutil.TypicalIndexes.INDEX_SECOND_RECIPE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.recipe.testutil.TypicalIndexes.INDEX_THIRD_RECIPE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.recipe.testutil.TypicalRecipes.getTypicalRecipeBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.recipe.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.recipe.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.recipe.model.UserPrefs;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.recipe.ui.testutil.EventsCollectorRule;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code SelectCommand}."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class SelectCommandTest {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Index lastRecipeIndex \u003d Index.fromOneBased(model.getFilteredRecipeList().size());"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_RECIPE);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_THIRD_RECIPE);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(lastRecipeIndex);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredRecipeList().size() + 1);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        showRecipeAtIndex(model, INDEX_FIRST_RECIPE);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_RECIPE);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        showRecipeAtIndex(model, INDEX_FIRST_RECIPE);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_RECIPE;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of recipe book list"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getRecipeBook().getRecipeList().size());"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_RECIPE);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_RECIPE);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommand));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_RECIPE);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(1));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(null));"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // different recipe -\u003e returns false"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(selectSecondCommand));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * is raised with the correct index."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d selectCommand.execute();"},{"lineNumber":107,"author":{"gitID":"RyanAngJY"},"content":"            assertEquals(String.format(SelectCommand.MESSAGE_SELECT_RECIPE_SUCCESS,"},{"lineNumber":108,"author":{"gitID":"RyanAngJY"},"content":"                    selectCommand.getSelectedRecipe().getTextFormattedRecipe()), commandResult.feedbackToUser);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            selectCommand.execute();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Returns a {@code SelectCommand} with parameters {@code index}."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    private SelectCommand prepareCommand(Index index) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d new SelectCommand(index);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        selectCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        return selectCommand;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":2,"-":139}},{"path":"src/test/java/seedu/recipe/logic/commands/AccessTokenCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"nicholasangcx"},"content":"//@@author nicholasangcx"},{"lineNumber":2,"author":{"gitID":"nicholasangcx"},"content":"package seedu.recipe.logic.commands;"},{"lineNumber":3,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":4,"author":{"gitID":"nicholasangcx"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"nicholasangcx"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":7,"author":{"gitID":"nicholasangcx"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"nicholasangcx"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"nicholasangcx"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":11,"author":{"gitID":"nicholasangcx"},"content":"import com.dropbox.core.DbxException;"},{"lineNumber":12,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":13,"author":{"gitID":"nicholasangcx"},"content":"public class AccessTokenCommandTest {"},{"lineNumber":14,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":15,"author":{"gitID":"nicholasangcx"},"content":"    private static final String INVALID_AUTHORIZATION_CODE \u003d \"wrong_format\";"},{"lineNumber":16,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":17,"author":{"gitID":"nicholasangcx"},"content":"    @Rule"},{"lineNumber":18,"author":{"gitID":"nicholasangcx"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":19,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":20,"author":{"gitID":"nicholasangcx"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"nicholasangcx"},"content":"    public void equals() {"},{"lineNumber":22,"author":{"gitID":"nicholasangcx"},"content":"        String firstTest \u003d \"firstCode\";"},{"lineNumber":23,"author":{"gitID":"nicholasangcx"},"content":"        String secondTest \u003d \"secondCode\";"},{"lineNumber":24,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":25,"author":{"gitID":"nicholasangcx"},"content":"        AccessTokenCommand accessTokenFirstCommand \u003d new AccessTokenCommand(firstTest);"},{"lineNumber":26,"author":{"gitID":"nicholasangcx"},"content":"        AccessTokenCommand accessTokenSecondCommand \u003d new AccessTokenCommand(secondTest);"},{"lineNumber":27,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":28,"author":{"gitID":"nicholasangcx"},"content":"        // same object -\u003e returns true"},{"lineNumber":29,"author":{"gitID":"nicholasangcx"},"content":"        assertTrue(accessTokenFirstCommand.equals(accessTokenFirstCommand));"},{"lineNumber":30,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":31,"author":{"gitID":"nicholasangcx"},"content":"        // same values -\u003e returns true"},{"lineNumber":32,"author":{"gitID":"nicholasangcx"},"content":"        AccessTokenCommand accessTokenFirstCommandCopy \u003d new AccessTokenCommand(firstTest);"},{"lineNumber":33,"author":{"gitID":"nicholasangcx"},"content":"        assertTrue(accessTokenFirstCommandCopy.equals(accessTokenFirstCommand));"},{"lineNumber":34,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":35,"author":{"gitID":"nicholasangcx"},"content":"        // different types -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"nicholasangcx"},"content":"        assertFalse(accessTokenFirstCommand.equals(1));"},{"lineNumber":37,"author":{"gitID":"nicholasangcx"},"content":"        assertFalse(accessTokenFirstCommand.equals(new HelpCommand()));"},{"lineNumber":38,"author":{"gitID":"nicholasangcx"},"content":"        assertFalse(accessTokenFirstCommand.equals(\"anything\"));"},{"lineNumber":39,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":40,"author":{"gitID":"nicholasangcx"},"content":"        // null -\u003e returns false"},{"lineNumber":41,"author":{"gitID":"nicholasangcx"},"content":"        assertFalse(accessTokenFirstCommand.equals(null));"},{"lineNumber":42,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":43,"author":{"gitID":"nicholasangcx"},"content":"        // different recipe -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"nicholasangcx"},"content":"        assertFalse(accessTokenFirstCommand.equals(accessTokenSecondCommand));"},{"lineNumber":45,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":47,"author":{"gitID":"nicholasangcx"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"nicholasangcx"},"content":"    public void execute_invalidAuthorizationCode() throws DbxException {"},{"lineNumber":49,"author":{"gitID":"nicholasangcx"},"content":"        thrown.expect(DbxException.class);"},{"lineNumber":50,"author":{"gitID":"nicholasangcx"},"content":"        AccessTokenCommand command \u003d new AccessTokenCommand(INVALID_AUTHORIZATION_CODE);"},{"lineNumber":51,"author":{"gitID":"nicholasangcx"},"content":"        command.execute();"},{"lineNumber":52,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"nicholasangcx"},"content":"}"},{"lineNumber":54,"author":{"gitID":"nicholasangcx"},"content":"//@@author"}],"authorContributionMap":{"nicholasangcx":54}},{"path":"src/test/java/seedu/recipe/logic/commands/IngredientCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"nicholasangcx"},"content":"//@@author nicholasangcx"},{"lineNumber":2,"author":{"gitID":"nicholasangcx"},"content":"package seedu.recipe.logic.commands;"},{"lineNumber":3,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":4,"author":{"gitID":"nicholasangcx"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"nicholasangcx"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"nicholasangcx"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"nicholasangcx"},"content":"import static seedu.recipe.commons.core.Messages.MESSAGE_RECIPES_WITH_INGREDIENTS_LISTED_OVERVIEW;"},{"lineNumber":8,"author":{"gitID":"nicholasangcx"},"content":"import static seedu.recipe.testutil.TypicalRecipes.BENSON;"},{"lineNumber":9,"author":{"gitID":"nicholasangcx"},"content":"import static seedu.recipe.testutil.TypicalRecipes.getTypicalRecipeBook;"},{"lineNumber":10,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":11,"author":{"gitID":"nicholasangcx"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"nicholasangcx"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"nicholasangcx"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":15,"author":{"gitID":"nicholasangcx"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"nicholasangcx"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"nicholasangcx"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":19,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.logic.parser.IngredientCommandParser;"},{"lineNumber":22,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.logic.parser.exceptions.ParseException;"},{"lineNumber":23,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.model.Model;"},{"lineNumber":24,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.model.RecipeBook;"},{"lineNumber":26,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.model.recipe.IngredientContainsKeywordsPredicate;"},{"lineNumber":28,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.model.recipe.Recipe;"},{"lineNumber":29,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":30,"author":{"gitID":"nicholasangcx"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"nicholasangcx"},"content":" * Contains integration tests (interaction with the Model) for {@code IngredientCommand}."},{"lineNumber":32,"author":{"gitID":"nicholasangcx"},"content":" */"},{"lineNumber":33,"author":{"gitID":"nicholasangcx"},"content":"public class IngredientCommandTest {"},{"lineNumber":34,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":35,"author":{"gitID":"nicholasangcx"},"content":"    @Rule"},{"lineNumber":36,"author":{"gitID":"nicholasangcx"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":37,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":38,"author":{"gitID":"nicholasangcx"},"content":"    private Model model \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs());"},{"lineNumber":39,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":40,"author":{"gitID":"nicholasangcx"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"nicholasangcx"},"content":"    public void equals() {"},{"lineNumber":42,"author":{"gitID":"nicholasangcx"},"content":"        IngredientContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":43,"author":{"gitID":"nicholasangcx"},"content":"                new IngredientContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":44,"author":{"gitID":"nicholasangcx"},"content":"        String[] firstArray \u003d {\"first\"};"},{"lineNumber":45,"author":{"gitID":"nicholasangcx"},"content":"        IngredientContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":46,"author":{"gitID":"nicholasangcx"},"content":"                new IngredientContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":47,"author":{"gitID":"nicholasangcx"},"content":"        String[] secondArray \u003d {\"second\"};"},{"lineNumber":48,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":49,"author":{"gitID":"nicholasangcx"},"content":"        IngredientCommand ingredientFirstCommand \u003d new IngredientCommand(firstPredicate, firstArray);"},{"lineNumber":50,"author":{"gitID":"nicholasangcx"},"content":"        IngredientCommand ingredientSecondCommand \u003d new IngredientCommand(secondPredicate, secondArray);"},{"lineNumber":51,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":52,"author":{"gitID":"nicholasangcx"},"content":"        // same object -\u003e returns true"},{"lineNumber":53,"author":{"gitID":"nicholasangcx"},"content":"        assertTrue(ingredientFirstCommand.equals(ingredientFirstCommand));"},{"lineNumber":54,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":55,"author":{"gitID":"nicholasangcx"},"content":"        // same values -\u003e returns true"},{"lineNumber":56,"author":{"gitID":"nicholasangcx"},"content":"        IngredientCommand ingredientFirstCommandCopy \u003d new IngredientCommand(firstPredicate, firstArray);"},{"lineNumber":57,"author":{"gitID":"nicholasangcx"},"content":"        assertTrue(ingredientFirstCommand.equals(ingredientFirstCommandCopy));"},{"lineNumber":58,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":59,"author":{"gitID":"nicholasangcx"},"content":"        // different types -\u003e returns false"},{"lineNumber":60,"author":{"gitID":"nicholasangcx"},"content":"        assertFalse(ingredientFirstCommand.equals(1));"},{"lineNumber":61,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":62,"author":{"gitID":"nicholasangcx"},"content":"        // null -\u003e returns false"},{"lineNumber":63,"author":{"gitID":"nicholasangcx"},"content":"        assertFalse(ingredientFirstCommand \u003d\u003d null);"},{"lineNumber":64,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":65,"author":{"gitID":"nicholasangcx"},"content":"        // different recipe -\u003e returns false"},{"lineNumber":66,"author":{"gitID":"nicholasangcx"},"content":"        assertFalse(ingredientFirstCommand.equals(ingredientSecondCommand));"},{"lineNumber":67,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":69,"author":{"gitID":"nicholasangcx"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"nicholasangcx"},"content":"    public void executeZeroKeywordsNoRecipeFound() throws ParseException {"},{"lineNumber":71,"author":{"gitID":"nicholasangcx"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":72,"author":{"gitID":"nicholasangcx"},"content":"        String userInput \u003d \" \";"},{"lineNumber":73,"author":{"gitID":"nicholasangcx"},"content":"        IngredientCommand command \u003d prepareCommand(userInput);"},{"lineNumber":74,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":76,"author":{"gitID":"nicholasangcx"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"nicholasangcx"},"content":"    public void executeMultipleKeywordsRecipesFound() throws ParseException {"},{"lineNumber":78,"author":{"gitID":"nicholasangcx"},"content":"        String userInput \u003d \"genuine salt\";"},{"lineNumber":79,"author":{"gitID":"nicholasangcx"},"content":"        String[] keywords \u003d userInput.split(\"\\\\s+\");"},{"lineNumber":80,"author":{"gitID":"nicholasangcx"},"content":"        String expectedMessage \u003d String.format(MESSAGE_RECIPES_WITH_INGREDIENTS_LISTED_OVERVIEW, 1,"},{"lineNumber":81,"author":{"gitID":"nicholasangcx"},"content":"                Arrays.toString(keywords));"},{"lineNumber":82,"author":{"gitID":"nicholasangcx"},"content":"        IngredientCommand command \u003d prepareCommand(userInput);"},{"lineNumber":83,"author":{"gitID":"nicholasangcx"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(BENSON));"},{"lineNumber":84,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":86,"author":{"gitID":"nicholasangcx"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"nicholasangcx"},"content":"     * Parses {@code userInput} into a {@code IngredientCommand}."},{"lineNumber":88,"author":{"gitID":"nicholasangcx"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"nicholasangcx"},"content":"    private IngredientCommand prepareCommand(String userInput) throws ParseException {"},{"lineNumber":90,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":91,"author":{"gitID":"nicholasangcx"},"content":"        IngredientCommand command \u003d new IngredientCommandParser().parse(userInput);"},{"lineNumber":92,"author":{"gitID":"nicholasangcx"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":93,"author":{"gitID":"nicholasangcx"},"content":"        return command;"},{"lineNumber":94,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":96,"author":{"gitID":"nicholasangcx"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"nicholasangcx"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":98,"author":{"gitID":"nicholasangcx"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":99,"author":{"gitID":"nicholasangcx"},"content":"     *     - the {@code FilteredList\u003cRecipe\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":100,"author":{"gitID":"nicholasangcx"},"content":"     *     - the {@code RecipeBook} in model remains the same after executing the {@code command}"},{"lineNumber":101,"author":{"gitID":"nicholasangcx"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"nicholasangcx"},"content":"    private void assertCommandSuccess(IngredientCommand command, String expectedMessage, List\u003cRecipe\u003e expectedList) {"},{"lineNumber":103,"author":{"gitID":"nicholasangcx"},"content":"        RecipeBook expectedRecipeBook \u003d new RecipeBook(model.getRecipeBook());"},{"lineNumber":104,"author":{"gitID":"nicholasangcx"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":105,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":106,"author":{"gitID":"nicholasangcx"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":107,"author":{"gitID":"nicholasangcx"},"content":"        assertEquals(expectedList, model.getFilteredRecipeList());"},{"lineNumber":108,"author":{"gitID":"nicholasangcx"},"content":"        assertEquals(expectedRecipeBook, model.getRecipeBook());"},{"lineNumber":109,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"nicholasangcx"},"content":"}"},{"lineNumber":111,"author":{"gitID":"nicholasangcx"},"content":"//@@author"}],"authorContributionMap":{"nicholasangcx":111}},{"path":"src/test/java/seedu/recipe/logic/commands/TagCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"nicholasangcx"},"content":"//@@author nicholasangcx"},{"lineNumber":2,"author":{"gitID":"nicholasangcx"},"content":"package seedu.recipe.logic.commands;"},{"lineNumber":3,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":4,"author":{"gitID":"nicholasangcx"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"nicholasangcx"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"nicholasangcx"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"nicholasangcx"},"content":"import static seedu.recipe.commons.core.Messages.MESSAGE_RECIPES_WITH_TAGS_LISTED_OVERVIEW;"},{"lineNumber":8,"author":{"gitID":"nicholasangcx"},"content":"import static seedu.recipe.testutil.TypicalRecipes.ALICE;"},{"lineNumber":9,"author":{"gitID":"nicholasangcx"},"content":"import static seedu.recipe.testutil.TypicalRecipes.BENSON;"},{"lineNumber":10,"author":{"gitID":"nicholasangcx"},"content":"import static seedu.recipe.testutil.TypicalRecipes.CARL;"},{"lineNumber":11,"author":{"gitID":"nicholasangcx"},"content":"import static seedu.recipe.testutil.TypicalRecipes.getTypicalRecipeBook;"},{"lineNumber":12,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":13,"author":{"gitID":"nicholasangcx"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"nicholasangcx"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitID":"nicholasangcx"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":17,"author":{"gitID":"nicholasangcx"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":19,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.model.Model;"},{"lineNumber":22,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.model.RecipeBook;"},{"lineNumber":24,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.model.recipe.Recipe;"},{"lineNumber":26,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.model.tag.TagContainsKeywordsPredicate;"},{"lineNumber":27,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":28,"author":{"gitID":"nicholasangcx"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"nicholasangcx"},"content":" * Contains integration tests (interaction with the Model) for {@code TagCommand}."},{"lineNumber":30,"author":{"gitID":"nicholasangcx"},"content":" */"},{"lineNumber":31,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":32,"author":{"gitID":"nicholasangcx"},"content":"public class TagCommandTest {"},{"lineNumber":33,"author":{"gitID":"nicholasangcx"},"content":"    private Model model \u003d new ModelManager(getTypicalRecipeBook(), new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":35,"author":{"gitID":"nicholasangcx"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"nicholasangcx"},"content":"    public void equals() {"},{"lineNumber":37,"author":{"gitID":"nicholasangcx"},"content":"        TagContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":38,"author":{"gitID":"nicholasangcx"},"content":"                new TagContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":39,"author":{"gitID":"nicholasangcx"},"content":"        String[] firstArray \u003d {\"first\"};"},{"lineNumber":40,"author":{"gitID":"nicholasangcx"},"content":"        TagContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":41,"author":{"gitID":"nicholasangcx"},"content":"                new TagContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":42,"author":{"gitID":"nicholasangcx"},"content":"        String[] secondArray \u003d {\"second\"};"},{"lineNumber":43,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":44,"author":{"gitID":"nicholasangcx"},"content":"        TagCommand tagFirstCommand \u003d new TagCommand(firstPredicate, firstArray);"},{"lineNumber":45,"author":{"gitID":"nicholasangcx"},"content":"        TagCommand tagSecondCommand \u003d new TagCommand(secondPredicate, secondArray);"},{"lineNumber":46,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":47,"author":{"gitID":"nicholasangcx"},"content":"        // same object -\u003e returns true"},{"lineNumber":48,"author":{"gitID":"nicholasangcx"},"content":"        assertTrue(tagFirstCommand.equals(tagFirstCommand));"},{"lineNumber":49,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":50,"author":{"gitID":"nicholasangcx"},"content":"        // same values -\u003e returns true"},{"lineNumber":51,"author":{"gitID":"nicholasangcx"},"content":"        TagCommand tagFirstCommandCopy \u003d new TagCommand(firstPredicate, firstArray);"},{"lineNumber":52,"author":{"gitID":"nicholasangcx"},"content":"        assertTrue(tagFirstCommand.equals(tagFirstCommandCopy));"},{"lineNumber":53,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":54,"author":{"gitID":"nicholasangcx"},"content":"        // different types -\u003e returns false"},{"lineNumber":55,"author":{"gitID":"nicholasangcx"},"content":"        assertFalse(tagFirstCommand.equals(1));"},{"lineNumber":56,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":57,"author":{"gitID":"nicholasangcx"},"content":"        // null -\u003e returns false"},{"lineNumber":58,"author":{"gitID":"nicholasangcx"},"content":"        assertFalse(tagFirstCommand \u003d\u003d null);"},{"lineNumber":59,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":60,"author":{"gitID":"nicholasangcx"},"content":"        // different recipe -\u003e returns false"},{"lineNumber":61,"author":{"gitID":"nicholasangcx"},"content":"        assertFalse(tagFirstCommand.equals(tagSecondCommand));"},{"lineNumber":62,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":64,"author":{"gitID":"nicholasangcx"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"nicholasangcx"},"content":"    public void executeZeroKeywordsNoRecipeFound() {"},{"lineNumber":66,"author":{"gitID":"nicholasangcx"},"content":"        String userInput \u003d \" \";"},{"lineNumber":67,"author":{"gitID":"nicholasangcx"},"content":"        String[] keywords \u003d userInput.split(\"\\\\s+\");"},{"lineNumber":68,"author":{"gitID":"nicholasangcx"},"content":"        String expectedMessage \u003d String.format(MESSAGE_RECIPES_WITH_TAGS_LISTED_OVERVIEW, 0,"},{"lineNumber":69,"author":{"gitID":"nicholasangcx"},"content":"                                                    Arrays.toString(keywords));"},{"lineNumber":70,"author":{"gitID":"nicholasangcx"},"content":"        TagCommand command \u003d prepareCommand(\" \");"},{"lineNumber":71,"author":{"gitID":"nicholasangcx"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":72,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":74,"author":{"gitID":"nicholasangcx"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"nicholasangcx"},"content":"    public void executeMultipleKeywordsMultipleRecipesFound() {"},{"lineNumber":76,"author":{"gitID":"nicholasangcx"},"content":"        String userInput \u003d \"family owesMoney\";"},{"lineNumber":77,"author":{"gitID":"nicholasangcx"},"content":"        String[] keywords \u003d userInput.split(\"\\\\s+\");"},{"lineNumber":78,"author":{"gitID":"nicholasangcx"},"content":"        String expectedMessage \u003d String.format(MESSAGE_RECIPES_WITH_TAGS_LISTED_OVERVIEW, 3,"},{"lineNumber":79,"author":{"gitID":"nicholasangcx"},"content":"                                                    Arrays.toString(keywords));"},{"lineNumber":80,"author":{"gitID":"nicholasangcx"},"content":"        TagCommand command \u003d prepareCommand(userInput);"},{"lineNumber":81,"author":{"gitID":"nicholasangcx"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(ALICE, BENSON, CARL));"},{"lineNumber":82,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":84,"author":{"gitID":"nicholasangcx"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"nicholasangcx"},"content":"     * Parses {@code userInput} into a {@code TagCommand}."},{"lineNumber":86,"author":{"gitID":"nicholasangcx"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"nicholasangcx"},"content":"    private TagCommand prepareCommand(String userInput) {"},{"lineNumber":88,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":89,"author":{"gitID":"nicholasangcx"},"content":"        TagCommand command \u003d"},{"lineNumber":90,"author":{"gitID":"nicholasangcx"},"content":"                new TagCommand(new TagContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))),"},{"lineNumber":91,"author":{"gitID":"nicholasangcx"},"content":"                                        userInput.split(\"\\\\s+\"));"},{"lineNumber":92,"author":{"gitID":"nicholasangcx"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":93,"author":{"gitID":"nicholasangcx"},"content":"        return command;"},{"lineNumber":94,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":96,"author":{"gitID":"nicholasangcx"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"nicholasangcx"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":98,"author":{"gitID":"nicholasangcx"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":99,"author":{"gitID":"nicholasangcx"},"content":"     *     - the {@code FilteredList\u003cRecipe\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":100,"author":{"gitID":"nicholasangcx"},"content":"     *     - the {@code RecipeBook} in model remains the same after executing the {@code command}"},{"lineNumber":101,"author":{"gitID":"nicholasangcx"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"nicholasangcx"},"content":"    private void assertCommandSuccess(TagCommand command, String expectedMessage, List\u003cRecipe\u003e expectedList) {"},{"lineNumber":103,"author":{"gitID":"nicholasangcx"},"content":"        RecipeBook expectedRecipeBook \u003d new RecipeBook(model.getRecipeBook());"},{"lineNumber":104,"author":{"gitID":"nicholasangcx"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":105,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":106,"author":{"gitID":"nicholasangcx"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":107,"author":{"gitID":"nicholasangcx"},"content":"        assertEquals(expectedList, model.getFilteredRecipeList());"},{"lineNumber":108,"author":{"gitID":"nicholasangcx"},"content":"        assertEquals(expectedRecipeBook, model.getRecipeBook());"},{"lineNumber":109,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"nicholasangcx"},"content":"}"},{"lineNumber":111,"author":{"gitID":"nicholasangcx"},"content":"//@@author"}],"authorContributionMap":{"nicholasangcx":111}},{"path":"src/test/java/seedu/recipe/storage/ImageStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"RyanAngJY"},"content":"package seedu.recipe.storage;"},{"lineNumber":2,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":3,"author":{"gitID":"RyanAngJY"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"RyanAngJY"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":9,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.MainApp;"},{"lineNumber":10,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.commons.util.FileUtil;"},{"lineNumber":11,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.model.recipe.Image;"},{"lineNumber":12,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":13,"author":{"gitID":"RyanAngJY"},"content":"public class ImageStorageTest {"},{"lineNumber":14,"author":{"gitID":"RyanAngJY"},"content":"    private static final String IMAGE_NAME \u003d \"clock.png\";"},{"lineNumber":15,"author":{"gitID":"RyanAngJY"},"content":"    private static final String VIEW_FOLDER \u003d MainApp.class.getResource(\"/view/\")"},{"lineNumber":16,"author":{"gitID":"RyanAngJY"},"content":"            .toExternalForm().substring(5);"},{"lineNumber":17,"author":{"gitID":"RyanAngJY"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"RyanAngJY"},"content":"    public void saveImageFile() {"},{"lineNumber":19,"author":{"gitID":"RyanAngJY"},"content":"        ImageStorage.saveImageFile(Image.VALID_IMAGE_PATH, VIEW_FOLDER);"},{"lineNumber":20,"author":{"gitID":"RyanAngJY"},"content":"        assertTrue(FileUtil.isImageFile(new File(VIEW_FOLDER + IMAGE_NAME)));"},{"lineNumber":21,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"RyanAngJY"},"content":"}"}],"authorContributionMap":{"RyanAngJY":19,"-":3}},{"path":"src/test/java/seedu/recipe/model/file/FilenameTest.java","lines":[{"lineNumber":1,"author":{"gitID":"nicholasangcx"},"content":"//@@author nicholasangcx"},{"lineNumber":2,"author":{"gitID":"nicholasangcx"},"content":"package seedu.recipe.model.file;"},{"lineNumber":3,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":4,"author":{"gitID":"nicholasangcx"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"nicholasangcx"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":7,"author":{"gitID":"nicholasangcx"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":9,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":11,"author":{"gitID":"nicholasangcx"},"content":"public class FilenameTest {"},{"lineNumber":12,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":13,"author":{"gitID":"nicholasangcx"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"nicholasangcx"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"nicholasangcx"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Filename(null));"},{"lineNumber":16,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":18,"author":{"gitID":"nicholasangcx"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"nicholasangcx"},"content":"    public void constructor_invalidFilename_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"nicholasangcx"},"content":"        String invalidFilename \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"nicholasangcx"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Filename(invalidFilename));"},{"lineNumber":22,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":24,"author":{"gitID":"nicholasangcx"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"nicholasangcx"},"content":"    public void isValidFilename() {"},{"lineNumber":26,"author":{"gitID":"nicholasangcx"},"content":"        // null Filename"},{"lineNumber":27,"author":{"gitID":"nicholasangcx"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Filename.isValidFilename(null));"},{"lineNumber":28,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":29,"author":{"gitID":"nicholasangcx"},"content":"        // blank Filename"},{"lineNumber":30,"author":{"gitID":"nicholasangcx"},"content":"        assertFalse(Filename.isValidFilename(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"nicholasangcx"},"content":"        assertFalse(Filename.isValidFilename(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":33,"author":{"gitID":"nicholasangcx"},"content":"        // invalid Filename"},{"lineNumber":34,"author":{"gitID":"nicholasangcx"},"content":"        assertFalse(Filename.isValidFilename(\"test.Filename\")); // invalid character ."},{"lineNumber":35,"author":{"gitID":"nicholasangcx"},"content":"        assertFalse(Filename.isValidFilename(\"test|test\")); // invalid character |"},{"lineNumber":36,"author":{"gitID":"nicholasangcx"},"content":"        assertFalse(Filename.isValidFilename(\"test/filename\")); // invalid character /"},{"lineNumber":37,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":38,"author":{"gitID":"nicholasangcx"},"content":"        // valid Filename"},{"lineNumber":39,"author":{"gitID":"nicholasangcx"},"content":"        assertTrue(Filename.isValidFilename(\"Recipe2Book\")); // alphanumeric filename"},{"lineNumber":40,"author":{"gitID":"nicholasangcx"},"content":"        assertTrue(Filename.isValidFilename(\"RecipeBook(1)\")); // valid characters ()"},{"lineNumber":41,"author":{"gitID":"nicholasangcx"},"content":"        assertTrue(Filename.isValidFilename(\"Recipe_Book\")); // valid character _"},{"lineNumber":42,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"nicholasangcx"},"content":"}"},{"lineNumber":44,"author":{"gitID":"nicholasangcx"},"content":"//@@author"}],"authorContributionMap":{"nicholasangcx":44}},{"path":"src/test/java/seedu/recipe/storage/ImageDownloaderTest.java","lines":[{"lineNumber":1,"author":{"gitID":"kokonguyen191"},"content":"//@@author kokonguyen191"},{"lineNumber":2,"author":{"gitID":"kokonguyen191"},"content":"package seedu.recipe.storage;"},{"lineNumber":3,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":4,"author":{"gitID":"kokonguyen191"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"kokonguyen191"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"kokonguyen191"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":8,"author":{"gitID":"kokonguyen191"},"content":"import java.io.File;"},{"lineNumber":9,"author":{"gitID":"kokonguyen191"},"content":"import java.io.FileInputStream;"},{"lineNumber":10,"author":{"gitID":"kokonguyen191"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitID":"kokonguyen191"},"content":"import java.io.InputStream;"},{"lineNumber":12,"author":{"gitID":"kokonguyen191"},"content":"import java.util.zip.CRC32;"},{"lineNumber":13,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":14,"author":{"gitID":"kokonguyen191"},"content":"import org.junit.After;"},{"lineNumber":15,"author":{"gitID":"kokonguyen191"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":17,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.model.recipe.Image;"},{"lineNumber":18,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.testutil.Assert;"},{"lineNumber":19,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":20,"author":{"gitID":"kokonguyen191"},"content":"public class ImageDownloaderTest {"},{"lineNumber":21,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":22,"author":{"gitID":"kokonguyen191"},"content":"    private static final String INVALID_IMAGE_URL \u003d \"http://google.com\";"},{"lineNumber":23,"author":{"gitID":"kokonguyen191"},"content":"    private static final String VALID_IMAGE_URL \u003d \"https://i.imgur.com/FhRsgCK.jpg\";"},{"lineNumber":24,"author":{"gitID":"kokonguyen191"},"content":"    private static final String VALID_IMAGE_MD5 \u003d \"2A78C63135CCB8BCECEF189FE0CD834C\";"},{"lineNumber":25,"author":{"gitID":"kokonguyen191"},"content":"    private static final String VALID_IMAGE_PATH \u003d"},{"lineNumber":26,"author":{"gitID":"kokonguyen191"},"content":"            Image.IMAGE_STORAGE_FOLDER + VALID_IMAGE_MD5 + \".\" + ImageDownloader.DOWNLOADED_IMAGE_FORMAT;"},{"lineNumber":27,"author":{"gitID":"kokonguyen191"},"content":"    private static final long VALID_IMAGE_CRC \u003d 2184062566L;"},{"lineNumber":28,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":29,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"kokonguyen191"},"content":"    public void isValidImageUrl() throws Exception {"},{"lineNumber":31,"author":{"gitID":"kokonguyen191"},"content":"        // not an image url"},{"lineNumber":32,"author":{"gitID":"kokonguyen191"},"content":"        assertFalse(ImageDownloader.isValidImageUrl(null));"},{"lineNumber":33,"author":{"gitID":"kokonguyen191"},"content":"        assertFalse(ImageDownloader.isValidImageUrl(\"\\t\\n\\t\\r\\n\"));"},{"lineNumber":34,"author":{"gitID":"kokonguyen191"},"content":"        assertFalse(ImageDownloader.isValidImageUrl(\"ZZZ://ZZZ!!@@#\"));"},{"lineNumber":35,"author":{"gitID":"kokonguyen191"},"content":"        assertFalse(ImageDownloader.isValidImageUrl(Image.VALID_IMAGE_PATH));"},{"lineNumber":36,"author":{"gitID":"kokonguyen191"},"content":"        assertFalse(ImageDownloader.isValidImageUrl(Image.NULL_IMAGE_REFERENCE));"},{"lineNumber":37,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":38,"author":{"gitID":"kokonguyen191"},"content":"        // invalid image url"},{"lineNumber":39,"author":{"gitID":"kokonguyen191"},"content":"        assertFalse(ImageDownloader.isValidImageUrl(INVALID_IMAGE_URL));"},{"lineNumber":40,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":41,"author":{"gitID":"kokonguyen191"},"content":"        // valid image url"},{"lineNumber":42,"author":{"gitID":"kokonguyen191"},"content":"        assertTrue(ImageDownloader.isValidImageUrl(VALID_IMAGE_URL));"},{"lineNumber":43,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":45,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"kokonguyen191"},"content":"    public void downloadImage_invalidUrl_throwsAssertionError() {"},{"lineNumber":47,"author":{"gitID":"kokonguyen191"},"content":"        Assert.assertThrows(AssertionError.class, () -\u003e ImageDownloader.downloadImage(INVALID_IMAGE_URL));"},{"lineNumber":48,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":50,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"kokonguyen191"},"content":"    public void downloadImage_validUrl_returnsImageName() throws Exception {"},{"lineNumber":52,"author":{"gitID":"kokonguyen191"},"content":"        // First download"},{"lineNumber":53,"author":{"gitID":"kokonguyen191"},"content":"        String fileName \u003d ImageDownloader.downloadImage(VALID_IMAGE_URL);"},{"lineNumber":54,"author":{"gitID":"kokonguyen191"},"content":"        File file \u003d new File(fileName);"},{"lineNumber":55,"author":{"gitID":"kokonguyen191"},"content":"        assertTrue(file.exists());"},{"lineNumber":56,"author":{"gitID":"kokonguyen191"},"content":"        assertImageCrc(file, VALID_IMAGE_CRC);"},{"lineNumber":57,"author":{"gitID":"kokonguyen191"},"content":"        assertEquals(VALID_IMAGE_PATH, fileName);"},{"lineNumber":58,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":59,"author":{"gitID":"kokonguyen191"},"content":"        // Re-download will still return file name"},{"lineNumber":60,"author":{"gitID":"kokonguyen191"},"content":"        assertEquals(VALID_IMAGE_PATH, ImageDownloader.downloadImage(VALID_IMAGE_URL));"},{"lineNumber":61,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":63,"author":{"gitID":"kokonguyen191"},"content":"    @After"},{"lineNumber":64,"author":{"gitID":"kokonguyen191"},"content":"    public void cleanUp() {"},{"lineNumber":65,"author":{"gitID":"kokonguyen191"},"content":"        File file \u003d new File(VALID_IMAGE_PATH);"},{"lineNumber":66,"author":{"gitID":"kokonguyen191"},"content":"        file.delete();"},{"lineNumber":67,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":69,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"kokonguyen191"},"content":"     * Asserts that {@code image} has CRC {@code crcValue}"},{"lineNumber":71,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"kokonguyen191"},"content":"    private void assertImageCrc(File image, long crcValue) throws IOException {"},{"lineNumber":73,"author":{"gitID":"kokonguyen191"},"content":"        InputStream in \u003d new FileInputStream(image);"},{"lineNumber":74,"author":{"gitID":"kokonguyen191"},"content":"        CRC32 crc32 \u003d new CRC32();"},{"lineNumber":75,"author":{"gitID":"kokonguyen191"},"content":"        byte[] buffer \u003d new byte[1000];"},{"lineNumber":76,"author":{"gitID":"kokonguyen191"},"content":"        int bytes;"},{"lineNumber":77,"author":{"gitID":"kokonguyen191"},"content":"        while ((bytes \u003d in.read(buffer)) !\u003d -1) {"},{"lineNumber":78,"author":{"gitID":"kokonguyen191"},"content":"            crc32.update(buffer, 0, bytes);"},{"lineNumber":79,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"kokonguyen191"},"content":"        long crc \u003d crc32.getValue();"},{"lineNumber":81,"author":{"gitID":"kokonguyen191"},"content":"        in.close();"},{"lineNumber":82,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":83,"author":{"gitID":"kokonguyen191"},"content":"        assertEquals(VALID_IMAGE_CRC, crc);"},{"lineNumber":84,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"kokonguyen191"},"content":"}"}],"authorContributionMap":{"kokonguyen191":85}},{"path":"src/test/java/seedu/recipe/model/recipe/ServingsTest.java","lines":[{"lineNumber":1,"author":{"gitID":"kokonguyen191"},"content":"//@@author kokonguyen191"},{"lineNumber":2,"author":{"gitID":"kokonguyen191"},"content":"package seedu.recipe.model.recipe;"},{"lineNumber":3,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":4,"author":{"gitID":"kokonguyen191"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"kokonguyen191"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":7,"author":{"gitID":"kokonguyen191"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":9,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":11,"author":{"gitID":"kokonguyen191"},"content":"public class ServingsTest {"},{"lineNumber":12,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":13,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"kokonguyen191"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"kokonguyen191"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Servings(null));"},{"lineNumber":16,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":18,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"kokonguyen191"},"content":"    public void constructor_invalidServings_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"kokonguyen191"},"content":"        String invalidServings \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"kokonguyen191"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Servings(invalidServings));"},{"lineNumber":22,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":24,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"kokonguyen191"},"content":"    public void isValidServings() {"},{"lineNumber":26,"author":{"gitID":"kokonguyen191"},"content":"        // null servings number"},{"lineNumber":27,"author":{"gitID":"kokonguyen191"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Servings.isValidServings(null));"},{"lineNumber":28,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":29,"author":{"gitID":"kokonguyen191"},"content":"        // invalid servings number"},{"lineNumber":30,"author":{"gitID":"kokonguyen191"},"content":"        assertFalse(Servings.isValidServings(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"kokonguyen191"},"content":"        assertFalse(Servings.isValidServings(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"kokonguyen191"},"content":"        assertFalse(Servings.isValidServings(\"NaN\")); // not a number"},{"lineNumber":33,"author":{"gitID":"kokonguyen191"},"content":"        assertFalse(Servings.isValidServings(\"BLAHBLAHBLAH\")); // non-numeric"},{"lineNumber":34,"author":{"gitID":"kokonguyen191"},"content":"        assertFalse(Servings.isValidServings(\".1111..\")); // non-numeric"},{"lineNumber":35,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":36,"author":{"gitID":"kokonguyen191"},"content":"        // valid servings number"},{"lineNumber":37,"author":{"gitID":"kokonguyen191"},"content":"        assertTrue(Servings.isValidServings(\"2\"));"},{"lineNumber":38,"author":{"gitID":"kokonguyen191"},"content":"        assertTrue(Servings.isValidServings(\"10\"));"},{"lineNumber":39,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"kokonguyen191"},"content":"}"}],"authorContributionMap":{"kokonguyen191":40}},{"path":"src/test/java/seedu/recipe/model/recipe/PreparationTimeTest.java","lines":[{"lineNumber":1,"author":{"gitID":"kokonguyen191"},"content":"//@@author kokonguyen191"},{"lineNumber":2,"author":{"gitID":"kokonguyen191"},"content":"package seedu.recipe.model.recipe;"},{"lineNumber":3,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":4,"author":{"gitID":"kokonguyen191"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"kokonguyen191"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":7,"author":{"gitID":"kokonguyen191"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":9,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":11,"author":{"gitID":"kokonguyen191"},"content":"public class PreparationTimeTest {"},{"lineNumber":12,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":13,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"kokonguyen191"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"kokonguyen191"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new PreparationTime(null));"},{"lineNumber":16,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":18,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"kokonguyen191"},"content":"    public void constructor_invalidPreparationTime_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"kokonguyen191"},"content":"        String invalidPreparationTime \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"kokonguyen191"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new PreparationTime(invalidPreparationTime));"},{"lineNumber":22,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":24,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"kokonguyen191"},"content":"    public void isValidPreparationTime() {"},{"lineNumber":26,"author":{"gitID":"kokonguyen191"},"content":"        // null PreparationTime"},{"lineNumber":27,"author":{"gitID":"kokonguyen191"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e PreparationTime.isValidPreparationTime(null));"},{"lineNumber":28,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":29,"author":{"gitID":"kokonguyen191"},"content":"        // invalid PreparationTime"},{"lineNumber":30,"author":{"gitID":"kokonguyen191"},"content":"        assertFalse(PreparationTime.isValidPreparationTime(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"kokonguyen191"},"content":"        assertFalse(PreparationTime.isValidPreparationTime(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"kokonguyen191"},"content":"        assertFalse(PreparationTime.isValidPreparationTime(\"NaN\")); // not a number"},{"lineNumber":33,"author":{"gitID":"kokonguyen191"},"content":"        assertFalse(PreparationTime.isValidPreparationTime(\"preparationTime\")); // non-numeric"},{"lineNumber":34,"author":{"gitID":"kokonguyen191"},"content":"        assertFalse(PreparationTime.isValidPreparationTime(\"9011p041\")); // unknown character p"},{"lineNumber":35,"author":{"gitID":"kokonguyen191"},"content":"        assertFalse(PreparationTime.isValidPreparationTime(\"1h  1534m\")); // more spaces than needed"},{"lineNumber":36,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":37,"author":{"gitID":"kokonguyen191"},"content":"        // valid PreparationTime"},{"lineNumber":38,"author":{"gitID":"kokonguyen191"},"content":"        assertTrue(PreparationTime.isValidPreparationTime(\"1h20m\"));"},{"lineNumber":39,"author":{"gitID":"kokonguyen191"},"content":"        assertTrue(PreparationTime.isValidPreparationTime(\"1 hour 20 min\"));"},{"lineNumber":40,"author":{"gitID":"kokonguyen191"},"content":"        assertTrue(PreparationTime.isValidPreparationTime(\"1 hour 20 mins\"));"},{"lineNumber":41,"author":{"gitID":"kokonguyen191"},"content":"        assertTrue(PreparationTime.isValidPreparationTime(\"1 hour 20 minutes\"));"},{"lineNumber":42,"author":{"gitID":"kokonguyen191"},"content":"        assertTrue(PreparationTime.isValidPreparationTime(\"80\"));"},{"lineNumber":43,"author":{"gitID":"kokonguyen191"},"content":"        assertTrue(PreparationTime.isValidPreparationTime(\"80m\"));"},{"lineNumber":44,"author":{"gitID":"kokonguyen191"},"content":"        assertTrue(PreparationTime.isValidPreparationTime(\"80min\"));"},{"lineNumber":45,"author":{"gitID":"kokonguyen191"},"content":"        assertTrue(PreparationTime.isValidPreparationTime(\"80 mins\"));"},{"lineNumber":46,"author":{"gitID":"kokonguyen191"},"content":"        assertTrue(PreparationTime.isValidPreparationTime(\"2h20m\"));"},{"lineNumber":47,"author":{"gitID":"kokonguyen191"},"content":"        assertTrue(PreparationTime.isValidPreparationTime(\"2 hours 20 mins\"));"},{"lineNumber":48,"author":{"gitID":"kokonguyen191"},"content":"        assertTrue(PreparationTime.isValidPreparationTime(\"2 hours 20 minutes\"));"},{"lineNumber":49,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"kokonguyen191"},"content":"}"}],"authorContributionMap":{"kokonguyen191":50}},{"path":"src/test/java/seedu/recipe/model/recipe/ImageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"RyanAngJY"},"content":"//@@author RyanAngJY"},{"lineNumber":2,"author":{"gitID":"RyanAngJY"},"content":"package seedu.recipe.model.recipe;"},{"lineNumber":3,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":4,"author":{"gitID":"RyanAngJY"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"RyanAngJY"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":7,"author":{"gitID":"RyanAngJY"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":9,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":11,"author":{"gitID":"RyanAngJY"},"content":"public class ImageTest {"},{"lineNumber":12,"author":{"gitID":"RyanAngJY"},"content":"    private static final String INVALID_IMAGE_URL \u003d \"http://google.com\";"},{"lineNumber":13,"author":{"gitID":"RyanAngJY"},"content":"    private static final String NOT_AN_IMAGE_PATH \u003d \"build.gradle\";"},{"lineNumber":14,"author":{"gitID":"RyanAngJY"},"content":"    private static final String VALID_IMAGE_URL \u003d \"https://i.imgur.com/FhRsgCK.jpg\";"},{"lineNumber":15,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":16,"author":{"gitID":"RyanAngJY"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"RyanAngJY"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":18,"author":{"gitID":"RyanAngJY"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Image(null));"},{"lineNumber":19,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":21,"author":{"gitID":"RyanAngJY"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"RyanAngJY"},"content":"    public void constructor_invalidImage_throwsIllegalArgumentException() {"},{"lineNumber":23,"author":{"gitID":"RyanAngJY"},"content":"        String invalidImage \u003d \"\";"},{"lineNumber":24,"author":{"gitID":"RyanAngJY"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Image(invalidImage));"},{"lineNumber":25,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":27,"author":{"gitID":"RyanAngJY"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"RyanAngJY"},"content":"    public void isValidImage() throws Exception {"},{"lineNumber":29,"author":{"gitID":"RyanAngJY"},"content":"        // blank image"},{"lineNumber":30,"author":{"gitID":"RyanAngJY"},"content":"        assertFalse(Image.isValidImage(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"RyanAngJY"},"content":"        assertFalse(Image.isValidImage(\"   \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"RyanAngJY"},"content":"        assertFalse(Image.isValidImage(\"\\t\\n\\t\\r\\n\"));"},{"lineNumber":33,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":34,"author":{"gitID":"RyanAngJY"},"content":"        // invalid image"},{"lineNumber":35,"author":{"gitID":"RyanAngJY"},"content":"        assertFalse(Image.isValidImage(\"estsed\")); //random string"},{"lineNumber":36,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":37,"author":{"gitID":"RyanAngJY"},"content":"        // valid image path"},{"lineNumber":38,"author":{"gitID":"RyanAngJY"},"content":"        assertTrue(Image.isValidImage(Image.NULL_IMAGE_REFERENCE));"},{"lineNumber":39,"author":{"gitID":"RyanAngJY"},"content":"        assertTrue(Image.isValidImage(Image.VALID_IMAGE_PATH));"},{"lineNumber":40,"author":{"gitID":"RyanAngJY"},"content":"        // invalid image path"},{"lineNumber":41,"author":{"gitID":"RyanAngJY"},"content":"        assertFalse(Image.isValidImage(\"ZZZ://ZZZ!!@@#\"));"},{"lineNumber":42,"author":{"gitID":"RyanAngJY"},"content":"        // not an image"},{"lineNumber":43,"author":{"gitID":"RyanAngJY"},"content":"        assertFalse(Image.isValidImage(NOT_AN_IMAGE_PATH));"},{"lineNumber":44,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":45,"author":{"gitID":"RyanAngJY"},"content":"        // valid image url"},{"lineNumber":46,"author":{"gitID":"RyanAngJY"},"content":"        assertTrue(Image.isValidImage(VALID_IMAGE_URL));"},{"lineNumber":47,"author":{"gitID":"RyanAngJY"},"content":"        // invalid image url"},{"lineNumber":48,"author":{"gitID":"RyanAngJY"},"content":"        assertFalse(Image.isValidImage(INVALID_IMAGE_URL));"},{"lineNumber":49,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":51,"author":{"gitID":"RyanAngJY"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"RyanAngJY"},"content":"    public void setImageToInternalReference() {"},{"lineNumber":53,"author":{"gitID":"RyanAngJY"},"content":"        Image imageStub \u003d new Image(Image.VALID_IMAGE_PATH);"},{"lineNumber":54,"author":{"gitID":"RyanAngJY"},"content":"        imageStub.setImageToInternalReference();"},{"lineNumber":55,"author":{"gitID":"RyanAngJY"},"content":"        assertTrue(imageStub.toString().equals(Image.IMAGE_STORAGE_FOLDER + imageStub.getImageName()));"},{"lineNumber":56,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"RyanAngJY"},"content":"}"},{"lineNumber":58,"author":{"gitID":"RyanAngJY"},"content":"//@@author"}],"authorContributionMap":{"RyanAngJY":58}},{"path":"src/test/java/seedu/recipe/storage/XmlAdaptedRecipeTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"RyanAngJY"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.recipe.storage.XmlAdaptedRecipe.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.recipe.testutil.TypicalRecipes.BENSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Calories;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.CookingTime;"},{"lineNumber":17,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.model.recipe.Image;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Ingredient;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Instruction;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Name;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.PreparationTime;"},{"lineNumber":22,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.model.recipe.Recipe;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Servings;"},{"lineNumber":24,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.model.recipe.Url;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.recipe.testutil.Assert;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class XmlAdaptedRecipeTest {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"B\u003c\u003eY\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String INVALID_INSTRUCTION \u003d \"\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String INVALID_INGREDIENT \u003d \"no u 55555...;;;;\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String INVALID_COOKING_TIME \u003d \"aaaa\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String INVALID_PREPARATION_TIME \u003d \"bbbb\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String INVALID_CALORIES \u003d \"cccc\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final String INVALID_SERVINGS \u003d \"dddd\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final String INVALID_URL \u003d \"THIS@IS@NOT@AN@URL\";"},{"lineNumber":36,"author":{"gitID":"RyanAngJY"},"content":"    private static final String INVALID_IMAGE \u003d \"THIS@IS@NOT@AN@IMAGE\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#hastagfriendzone\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_INGREDIENT \u003d BENSON.getIngredient().toString();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_INSTRUCTION \u003d BENSON.getInstruction().toString();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final String VALID_COOKING_TIME \u003d BENSON.getCookingTime().toString();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private static final String VALID_PREPARATION_TIME \u003d BENSON.getPreparationTime().toString();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private static final String VALID_CALORIES \u003d BENSON.getCalories().toString();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private static final String VALID_SERVINGS \u003d BENSON.getServings().toString();"},{"lineNumber":46,"author":{"gitID":"RyanAngJY"},"content":"    private static final String VALID_URL \u003d BENSON.getUrl().toString();"},{"lineNumber":47,"author":{"gitID":"RyanAngJY"},"content":"    private static final String VALID_IMAGE \u003d BENSON.getImage().toString();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        .map(XmlAdaptedTag::new)"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        .collect(Collectors.toList());"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void toModelType_validRecipeDetails_returnsRecipe() throws Exception {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        XmlAdaptedRecipe recipe \u003d new XmlAdaptedRecipe(BENSON);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertEquals(BENSON, recipe.toModelType());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        XmlAdaptedRecipe recipe \u003d"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                new XmlAdaptedRecipe(INVALID_NAME, VALID_INGREDIENT, VALID_INSTRUCTION, VALID_COOKING_TIME,"},{"lineNumber":62,"author":{"gitID":"RyanAngJY"},"content":"                        VALID_PREPARATION_TIME, VALID_CALORIES, VALID_SERVINGS, VALID_URL,"},{"lineNumber":63,"author":{"gitID":"RyanAngJY"},"content":"                        VALID_IMAGE, VALID_TAGS);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        XmlAdaptedRecipe recipe \u003d new XmlAdaptedRecipe(null, VALID_INGREDIENT, VALID_INSTRUCTION, VALID_COOKING_TIME,"},{"lineNumber":71,"author":{"gitID":"RyanAngJY"},"content":"                VALID_PREPARATION_TIME, VALID_CALORIES, VALID_SERVINGS, VALID_URL, VALID_IMAGE, VALID_TAGS);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"kokonguyen191"},"content":"    //@@author kokonguyen191"},{"lineNumber":77,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"kokonguyen191"},"content":"    public void toModelType_invalidIngredient_throwsIllegalValueException() {"},{"lineNumber":79,"author":{"gitID":"kokonguyen191"},"content":"        XmlAdaptedRecipe recipe \u003d"},{"lineNumber":80,"author":{"gitID":"kokonguyen191"},"content":"            new XmlAdaptedRecipe(VALID_NAME, INVALID_INGREDIENT, VALID_INSTRUCTION, VALID_COOKING_TIME,"},{"lineNumber":81,"author":{"gitID":"kokonguyen191"},"content":"                    VALID_PREPARATION_TIME, VALID_CALORIES, VALID_SERVINGS, VALID_URL, VALID_IMAGE, VALID_TAGS);"},{"lineNumber":82,"author":{"gitID":"kokonguyen191"},"content":"        String expectedMessage \u003d Ingredient.MESSAGE_INGREDIENT_CONSTRAINTS;"},{"lineNumber":83,"author":{"gitID":"kokonguyen191"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"},{"lineNumber":84,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":86,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"kokonguyen191"},"content":"    public void toModelType_nullIngredient_throwsIllegalValueException() {"},{"lineNumber":88,"author":{"gitID":"kokonguyen191"},"content":"        XmlAdaptedRecipe recipe \u003d new XmlAdaptedRecipe(VALID_NAME, null, VALID_INSTRUCTION, VALID_COOKING_TIME,"},{"lineNumber":89,"author":{"gitID":"kokonguyen191"},"content":"                VALID_PREPARATION_TIME, VALID_CALORIES, VALID_SERVINGS, VALID_URL, VALID_IMAGE, VALID_TAGS);"},{"lineNumber":90,"author":{"gitID":"kokonguyen191"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Ingredient.class.getSimpleName());"},{"lineNumber":91,"author":{"gitID":"kokonguyen191"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"},{"lineNumber":92,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":94,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"kokonguyen191"},"content":"    public void toModelType_invalidInstruction_throwsIllegalValueException() {"},{"lineNumber":96,"author":{"gitID":"kokonguyen191"},"content":"        XmlAdaptedRecipe recipe \u003d"},{"lineNumber":97,"author":{"gitID":"kokonguyen191"},"content":"            new XmlAdaptedRecipe(VALID_NAME, VALID_INGREDIENT, INVALID_INSTRUCTION, VALID_COOKING_TIME,"},{"lineNumber":98,"author":{"gitID":"kokonguyen191"},"content":"                    VALID_PREPARATION_TIME, VALID_CALORIES, VALID_SERVINGS, VALID_URL, VALID_IMAGE, VALID_TAGS);"},{"lineNumber":99,"author":{"gitID":"kokonguyen191"},"content":"        String expectedMessage \u003d Instruction.MESSAGE_INSTRUCTION_CONSTRAINTS;"},{"lineNumber":100,"author":{"gitID":"kokonguyen191"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"},{"lineNumber":101,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":103,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"kokonguyen191"},"content":"    public void toModelType_nullInstruction_throwsIllegalValueException() {"},{"lineNumber":105,"author":{"gitID":"kokonguyen191"},"content":"        XmlAdaptedRecipe recipe \u003d new XmlAdaptedRecipe(VALID_NAME, VALID_INGREDIENT, null,"},{"lineNumber":106,"author":{"gitID":"kokonguyen191"},"content":"                VALID_COOKING_TIME, VALID_PREPARATION_TIME, VALID_CALORIES, VALID_SERVINGS, VALID_URL,"},{"lineNumber":107,"author":{"gitID":"kokonguyen191"},"content":"                VALID_IMAGE, VALID_TAGS);"},{"lineNumber":108,"author":{"gitID":"kokonguyen191"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Instruction.class.getSimpleName());"},{"lineNumber":109,"author":{"gitID":"kokonguyen191"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"},{"lineNumber":110,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":112,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"kokonguyen191"},"content":"    public void toModelType_invalidPreparationTime_throwsIllegalValueException() {"},{"lineNumber":114,"author":{"gitID":"kokonguyen191"},"content":"        XmlAdaptedRecipe recipe \u003d"},{"lineNumber":115,"author":{"gitID":"kokonguyen191"},"content":"                new XmlAdaptedRecipe(VALID_NAME, VALID_INGREDIENT, VALID_INSTRUCTION, VALID_COOKING_TIME,"},{"lineNumber":116,"author":{"gitID":"kokonguyen191"},"content":"                        INVALID_PREPARATION_TIME, VALID_CALORIES, VALID_SERVINGS, VALID_URL,"},{"lineNumber":117,"author":{"gitID":"kokonguyen191"},"content":"                        VALID_IMAGE, VALID_TAGS);"},{"lineNumber":118,"author":{"gitID":"kokonguyen191"},"content":"        String expectedMessage \u003d PreparationTime.MESSAGE_PREPARATION_TIME_CONSTRAINTS;"},{"lineNumber":119,"author":{"gitID":"kokonguyen191"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"},{"lineNumber":120,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":122,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"kokonguyen191"},"content":"    public void toModelType_nullPreparationTime_throwsIllegalValueException() {"},{"lineNumber":124,"author":{"gitID":"kokonguyen191"},"content":"        XmlAdaptedRecipe recipe \u003d new XmlAdaptedRecipe(VALID_NAME, VALID_INGREDIENT, VALID_INSTRUCTION,"},{"lineNumber":125,"author":{"gitID":"kokonguyen191"},"content":"                VALID_COOKING_TIME, null, VALID_CALORIES, VALID_SERVINGS, VALID_URL,"},{"lineNumber":126,"author":{"gitID":"kokonguyen191"},"content":"                VALID_IMAGE, VALID_TAGS);"},{"lineNumber":127,"author":{"gitID":"kokonguyen191"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, PreparationTime.class.getSimpleName());"},{"lineNumber":128,"author":{"gitID":"kokonguyen191"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"},{"lineNumber":129,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":131,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":132,"author":{"gitID":"kokonguyen191"},"content":"    public void toModelType_invalidCookingTime_throwsIllegalValueException() {"},{"lineNumber":133,"author":{"gitID":"kokonguyen191"},"content":"        XmlAdaptedRecipe recipe \u003d"},{"lineNumber":134,"author":{"gitID":"kokonguyen191"},"content":"                new XmlAdaptedRecipe(VALID_NAME, VALID_INGREDIENT, VALID_INSTRUCTION, INVALID_COOKING_TIME,"},{"lineNumber":135,"author":{"gitID":"kokonguyen191"},"content":"                        VALID_PREPARATION_TIME, VALID_CALORIES, VALID_SERVINGS, VALID_URL,"},{"lineNumber":136,"author":{"gitID":"kokonguyen191"},"content":"                        VALID_IMAGE, VALID_TAGS);"},{"lineNumber":137,"author":{"gitID":"kokonguyen191"},"content":"        String expectedMessage \u003d CookingTime.MESSAGE_COOKING_TIME_CONSTRAINTS;"},{"lineNumber":138,"author":{"gitID":"kokonguyen191"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"},{"lineNumber":139,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":141,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":142,"author":{"gitID":"kokonguyen191"},"content":"    public void toModelType_nullCookingTime_throwsIllegalValueException() {"},{"lineNumber":143,"author":{"gitID":"kokonguyen191"},"content":"        XmlAdaptedRecipe recipe \u003d new XmlAdaptedRecipe(VALID_NAME, VALID_INGREDIENT, VALID_INSTRUCTION,"},{"lineNumber":144,"author":{"gitID":"kokonguyen191"},"content":"                null, VALID_PREPARATION_TIME, VALID_CALORIES, VALID_SERVINGS, VALID_URL,"},{"lineNumber":145,"author":{"gitID":"kokonguyen191"},"content":"                VALID_IMAGE, VALID_TAGS);"},{"lineNumber":146,"author":{"gitID":"kokonguyen191"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, CookingTime.class.getSimpleName());"},{"lineNumber":147,"author":{"gitID":"kokonguyen191"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"},{"lineNumber":148,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":150,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":151,"author":{"gitID":"kokonguyen191"},"content":"    public void toModelType_invalidCalories_throwsIllegalValueException() {"},{"lineNumber":152,"author":{"gitID":"kokonguyen191"},"content":"        XmlAdaptedRecipe recipe \u003d"},{"lineNumber":153,"author":{"gitID":"kokonguyen191"},"content":"                new XmlAdaptedRecipe(VALID_NAME, VALID_INGREDIENT, VALID_INSTRUCTION, VALID_PREPARATION_TIME,"},{"lineNumber":154,"author":{"gitID":"kokonguyen191"},"content":"                        VALID_COOKING_TIME, INVALID_CALORIES, VALID_SERVINGS, VALID_URL,"},{"lineNumber":155,"author":{"gitID":"kokonguyen191"},"content":"                        VALID_IMAGE, VALID_TAGS);"},{"lineNumber":156,"author":{"gitID":"kokonguyen191"},"content":"        String expectedMessage \u003d Calories.MESSAGE_CALORIES_CONSTRAINTS;"},{"lineNumber":157,"author":{"gitID":"kokonguyen191"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"},{"lineNumber":158,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":160,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":161,"author":{"gitID":"kokonguyen191"},"content":"    public void toModelType_nullCalories_throwsIllegalValueException() {"},{"lineNumber":162,"author":{"gitID":"kokonguyen191"},"content":"        XmlAdaptedRecipe recipe \u003d new XmlAdaptedRecipe(VALID_NAME, VALID_INGREDIENT, VALID_INSTRUCTION,"},{"lineNumber":163,"author":{"gitID":"kokonguyen191"},"content":"                VALID_PREPARATION_TIME, VALID_COOKING_TIME, null, VALID_SERVINGS, VALID_URL,"},{"lineNumber":164,"author":{"gitID":"kokonguyen191"},"content":"                VALID_IMAGE, VALID_TAGS);"},{"lineNumber":165,"author":{"gitID":"kokonguyen191"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Calories.class.getSimpleName());"},{"lineNumber":166,"author":{"gitID":"kokonguyen191"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"},{"lineNumber":167,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":169,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":170,"author":{"gitID":"kokonguyen191"},"content":"    public void toModelType_invalidServings_throwsIllegalValueException() {"},{"lineNumber":171,"author":{"gitID":"kokonguyen191"},"content":"        XmlAdaptedRecipe recipe \u003d"},{"lineNumber":172,"author":{"gitID":"kokonguyen191"},"content":"                new XmlAdaptedRecipe(VALID_NAME, VALID_INGREDIENT, VALID_INSTRUCTION, VALID_PREPARATION_TIME,"},{"lineNumber":173,"author":{"gitID":"kokonguyen191"},"content":"                        VALID_COOKING_TIME, VALID_CALORIES, INVALID_SERVINGS, VALID_URL,"},{"lineNumber":174,"author":{"gitID":"kokonguyen191"},"content":"                        VALID_IMAGE, VALID_TAGS);"},{"lineNumber":175,"author":{"gitID":"kokonguyen191"},"content":"        String expectedMessage \u003d Servings.MESSAGE_SERVINGS_CONSTRAINTS;"},{"lineNumber":176,"author":{"gitID":"kokonguyen191"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"},{"lineNumber":177,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":179,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":180,"author":{"gitID":"kokonguyen191"},"content":"    public void toModelType_nullServings_throwsIllegalValueException() {"},{"lineNumber":181,"author":{"gitID":"kokonguyen191"},"content":"        XmlAdaptedRecipe recipe \u003d new XmlAdaptedRecipe(VALID_NAME, VALID_INGREDIENT, VALID_INSTRUCTION,"},{"lineNumber":182,"author":{"gitID":"kokonguyen191"},"content":"                VALID_PREPARATION_TIME, VALID_COOKING_TIME, VALID_CALORIES, null, VALID_URL,"},{"lineNumber":183,"author":{"gitID":"kokonguyen191"},"content":"                VALID_IMAGE, VALID_TAGS);"},{"lineNumber":184,"author":{"gitID":"kokonguyen191"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Servings.class.getSimpleName());"},{"lineNumber":185,"author":{"gitID":"kokonguyen191"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"},{"lineNumber":186,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":188,"author":{"gitID":"RyanAngJY"},"content":"    //@@author RyanAngJY"},{"lineNumber":189,"author":{"gitID":"RyanAngJY"},"content":"    @Test"},{"lineNumber":190,"author":{"gitID":"RyanAngJY"},"content":"    public void toModelType_invalidUrl_throwsIllegalValueException() {"},{"lineNumber":191,"author":{"gitID":"RyanAngJY"},"content":"        XmlAdaptedRecipe recipe \u003d"},{"lineNumber":192,"author":{"gitID":"RyanAngJY"},"content":"                new XmlAdaptedRecipe(VALID_NAME, VALID_INGREDIENT, VALID_INSTRUCTION, VALID_COOKING_TIME,"},{"lineNumber":193,"author":{"gitID":"RyanAngJY"},"content":"                        VALID_PREPARATION_TIME, VALID_CALORIES, VALID_SERVINGS, INVALID_URL,"},{"lineNumber":194,"author":{"gitID":"RyanAngJY"},"content":"                        VALID_IMAGE, VALID_TAGS);"},{"lineNumber":195,"author":{"gitID":"RyanAngJY"},"content":"        String expectedMessage \u003d Url.MESSAGE_URL_CONSTRAINTS;"},{"lineNumber":196,"author":{"gitID":"RyanAngJY"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"},{"lineNumber":197,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":199,"author":{"gitID":"RyanAngJY"},"content":"    @Test"},{"lineNumber":200,"author":{"gitID":"RyanAngJY"},"content":"    public void toModelType_nullUrl_throwsIllegalValueException() {"},{"lineNumber":201,"author":{"gitID":"RyanAngJY"},"content":"        XmlAdaptedRecipe recipe \u003d"},{"lineNumber":202,"author":{"gitID":"RyanAngJY"},"content":"                new XmlAdaptedRecipe(VALID_NAME, VALID_INGREDIENT, VALID_INSTRUCTION, VALID_COOKING_TIME,"},{"lineNumber":203,"author":{"gitID":"RyanAngJY"},"content":"                        VALID_PREPARATION_TIME, VALID_CALORIES, VALID_SERVINGS, null,"},{"lineNumber":204,"author":{"gitID":"RyanAngJY"},"content":"                        VALID_IMAGE, VALID_TAGS);"},{"lineNumber":205,"author":{"gitID":"RyanAngJY"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Url.class.getSimpleName());"},{"lineNumber":206,"author":{"gitID":"RyanAngJY"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"},{"lineNumber":207,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":209,"author":{"gitID":"RyanAngJY"},"content":"    @Test"},{"lineNumber":210,"author":{"gitID":"RyanAngJY"},"content":"    public void toModelType_nullImage_throwsIllegalValueException() {"},{"lineNumber":211,"author":{"gitID":"RyanAngJY"},"content":"        XmlAdaptedRecipe recipe \u003d"},{"lineNumber":212,"author":{"gitID":"RyanAngJY"},"content":"                new XmlAdaptedRecipe(VALID_NAME, VALID_INGREDIENT, VALID_INSTRUCTION, VALID_COOKING_TIME,"},{"lineNumber":213,"author":{"gitID":"RyanAngJY"},"content":"                        VALID_PREPARATION_TIME, VALID_CALORIES, VALID_SERVINGS, VALID_URL,"},{"lineNumber":214,"author":{"gitID":"RyanAngJY"},"content":"                        null, VALID_TAGS);"},{"lineNumber":215,"author":{"gitID":"RyanAngJY"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Image.class.getSimpleName());"},{"lineNumber":216,"author":{"gitID":"RyanAngJY"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"},{"lineNumber":217,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":219,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":220,"author":{"gitID":"RyanAngJY"},"content":"    @Test"},{"lineNumber":221,"author":{"gitID":"RyanAngJY"},"content":"    public void toModelType_invalidImage_setsImageToNullReference() {"},{"lineNumber":222,"author":{"gitID":"RyanAngJY"},"content":"        Recipe recipe \u003d null;"},{"lineNumber":223,"author":{"gitID":"RyanAngJY"},"content":"        try {"},{"lineNumber":224,"author":{"gitID":"RyanAngJY"},"content":"            recipe \u003d new XmlAdaptedRecipe(VALID_NAME, VALID_INGREDIENT, VALID_INSTRUCTION, VALID_COOKING_TIME,"},{"lineNumber":225,"author":{"gitID":"RyanAngJY"},"content":"                    VALID_PREPARATION_TIME, VALID_CALORIES, VALID_SERVINGS, VALID_URL,"},{"lineNumber":226,"author":{"gitID":"RyanAngJY"},"content":"                    INVALID_IMAGE, VALID_TAGS).toModelType();"},{"lineNumber":227,"author":{"gitID":"RyanAngJY"},"content":"        } catch (Exception e) {"},{"lineNumber":228,"author":{"gitID":"RyanAngJY"},"content":"            System.out.println(\"Unable to create recipe\");"},{"lineNumber":229,"author":{"gitID":"RyanAngJY"},"content":"        }"},{"lineNumber":230,"author":{"gitID":"RyanAngJY"},"content":"        assertTrue(recipe.getImage().toString().equals(Image.NULL_IMAGE_REFERENCE));"},{"lineNumber":231,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"RyanAngJY"},"content":"    //@@author RyanAngJY"},{"lineNumber":233,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":234,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":235,"author":{"gitID":"RyanAngJY"},"content":"    @Test"},{"lineNumber":236,"author":{"gitID":"RyanAngJY"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":237,"author":{"gitID":"RyanAngJY"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":238,"author":{"gitID":"RyanAngJY"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":239,"author":{"gitID":"RyanAngJY"},"content":"        XmlAdaptedRecipe recipe \u003d"},{"lineNumber":240,"author":{"gitID":"RyanAngJY"},"content":"            new XmlAdaptedRecipe(VALID_NAME, VALID_INGREDIENT, VALID_INSTRUCTION, VALID_COOKING_TIME,"},{"lineNumber":241,"author":{"gitID":"RyanAngJY"},"content":"                    VALID_PREPARATION_TIME, VALID_CALORIES, VALID_SERVINGS, VALID_URL,"},{"lineNumber":242,"author":{"gitID":"RyanAngJY"},"content":"                    VALID_IMAGE, invalidTags);"},{"lineNumber":243,"author":{"gitID":"RyanAngJY"},"content":"        Assert.assertThrows(IllegalValueException.class, recipe::toModelType);"},{"lineNumber":244,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":246,"author":{"gitID":"RyanAngJY"},"content":"}"}],"authorContributionMap":{"kokonguyen191":112,"RyanAngJY":69,"-":65}},{"path":"src/test/java/seedu/recipe/model/recipe/UrlTest.java","lines":[{"lineNumber":1,"author":{"gitID":"RyanAngJY"},"content":"//@@author RyanAngJY"},{"lineNumber":2,"author":{"gitID":"RyanAngJY"},"content":"package seedu.recipe.model.recipe;"},{"lineNumber":3,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":4,"author":{"gitID":"RyanAngJY"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"RyanAngJY"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":7,"author":{"gitID":"RyanAngJY"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":9,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":11,"author":{"gitID":"RyanAngJY"},"content":"public class UrlTest {"},{"lineNumber":12,"author":{"gitID":"RyanAngJY"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"RyanAngJY"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"RyanAngJY"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Url(null));"},{"lineNumber":15,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":17,"author":{"gitID":"RyanAngJY"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"RyanAngJY"},"content":"    public void constructor_invalidUrl_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"RyanAngJY"},"content":"        String invalidUrl \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"RyanAngJY"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Url(invalidUrl));"},{"lineNumber":21,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":23,"author":{"gitID":"RyanAngJY"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"RyanAngJY"},"content":"    public void isValidUrl() {"},{"lineNumber":25,"author":{"gitID":"RyanAngJY"},"content":"        // blank Url"},{"lineNumber":26,"author":{"gitID":"RyanAngJY"},"content":"        assertFalse(Url.isValidUrl(\"\")); // empty string"},{"lineNumber":27,"author":{"gitID":"RyanAngJY"},"content":"        assertFalse(Url.isValidUrl(\" \")); // spaces only"},{"lineNumber":28,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":29,"author":{"gitID":"RyanAngJY"},"content":"        // invalid Url"},{"lineNumber":30,"author":{"gitID":"RyanAngJY"},"content":"        assertFalse(Url.isValidUrl(\"www.google.com\")); // \"http://\" of \"https://\" not at the beginning of Url"},{"lineNumber":31,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":32,"author":{"gitID":"RyanAngJY"},"content":"        // valid Url"},{"lineNumber":33,"author":{"gitID":"RyanAngJY"},"content":"        assertTrue(Url.isValidUrl(\"http://www.google.com\")); // \"http://\" at the beginning of Url"},{"lineNumber":34,"author":{"gitID":"RyanAngJY"},"content":"        assertTrue(Url.isValidUrl(\"https://www.google.com\")); // \"https://\" at the beginning of Url"},{"lineNumber":35,"author":{"gitID":"RyanAngJY"},"content":"        assertTrue(Url.isValidUrl(\" http://www.google.com\")); // leading space"},{"lineNumber":36,"author":{"gitID":"RyanAngJY"},"content":"        assertTrue(Url.isValidUrl(\"http://www.google.com \")); // trailing space"},{"lineNumber":37,"author":{"gitID":"RyanAngJY"},"content":"        assertTrue(Url.isValidUrl(\"https://www.google.com.sg/search\""},{"lineNumber":38,"author":{"gitID":"RyanAngJY"},"content":"                + \"?ei\u003d1oqfWryFJYvtvgS2kovIDw\u0026q\u003dlong+url+trying+to+add+words\u0026oq\""},{"lineNumber":39,"author":{"gitID":"RyanAngJY"},"content":"                + \"\u003dlong+url+trying+to+add+words\u0026gs_l\u003dpsy-ab.3...16827.19809.0.19937\""},{"lineNumber":40,"author":{"gitID":"RyanAngJY"},"content":"                + \".20.20.0.0.0.0.131.1429.15j3.18.0....0...1c.1.64.psy-ab..2.9.695...0j0\""},{"lineNumber":41,"author":{"gitID":"RyanAngJY"},"content":"                + \"i20i263k1j0i22i30k1j33i160k1j33i21k1j33i22i29i30k1.0.ToeND2eqJXA\")); // long url"},{"lineNumber":42,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"RyanAngJY"},"content":"}"},{"lineNumber":44,"author":{"gitID":"RyanAngJY"},"content":"//@@author"}],"authorContributionMap":{"RyanAngJY":44}},{"path":"src/test/java/seedu/recipe/model/recipe/CookingTimeTest.java","lines":[{"lineNumber":1,"author":{"gitID":"kokonguyen191"},"content":"//@@author kokonguyen191"},{"lineNumber":2,"author":{"gitID":"kokonguyen191"},"content":"package seedu.recipe.model.recipe;"},{"lineNumber":3,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":4,"author":{"gitID":"kokonguyen191"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"kokonguyen191"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":7,"author":{"gitID":"kokonguyen191"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":9,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":11,"author":{"gitID":"kokonguyen191"},"content":"public class CookingTimeTest {"},{"lineNumber":12,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":13,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"kokonguyen191"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"kokonguyen191"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new CookingTime(null));"},{"lineNumber":16,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":18,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"kokonguyen191"},"content":"    public void constructor_invalidCookingTime_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"kokonguyen191"},"content":"        String invalidCookingTime \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"kokonguyen191"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new CookingTime(invalidCookingTime));"},{"lineNumber":22,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":24,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"kokonguyen191"},"content":"    public void isValidCookingTime() {"},{"lineNumber":26,"author":{"gitID":"kokonguyen191"},"content":"        // null CookingTime"},{"lineNumber":27,"author":{"gitID":"kokonguyen191"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e CookingTime.isValidCookingTime(null));"},{"lineNumber":28,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":29,"author":{"gitID":"kokonguyen191"},"content":"        // invalid CookingTime"},{"lineNumber":30,"author":{"gitID":"kokonguyen191"},"content":"        assertFalse(CookingTime.isValidCookingTime(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"kokonguyen191"},"content":"        assertFalse(CookingTime.isValidCookingTime(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"kokonguyen191"},"content":"        assertFalse(CookingTime.isValidCookingTime(\"NaN\")); // not a number"},{"lineNumber":33,"author":{"gitID":"kokonguyen191"},"content":"        assertFalse(CookingTime.isValidCookingTime(\"BLAHBLAHBLAH\")); // non-numeric"},{"lineNumber":34,"author":{"gitID":"kokonguyen191"},"content":"        assertFalse(CookingTime.isValidCookingTime(\"123aaaa55555\")); // unknown character p"},{"lineNumber":35,"author":{"gitID":"kokonguyen191"},"content":"        assertFalse(CookingTime.isValidCookingTime(\"1h  6666m\")); // more spaces than needed"},{"lineNumber":36,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":37,"author":{"gitID":"kokonguyen191"},"content":"        // valid CookingTime"},{"lineNumber":38,"author":{"gitID":"kokonguyen191"},"content":"        assertTrue(CookingTime.isValidCookingTime(\"1h10m\"));"},{"lineNumber":39,"author":{"gitID":"kokonguyen191"},"content":"        assertTrue(CookingTime.isValidCookingTime(\"1 hour 10 min\"));"},{"lineNumber":40,"author":{"gitID":"kokonguyen191"},"content":"        assertTrue(CookingTime.isValidCookingTime(\"1 hour 10 mins\"));"},{"lineNumber":41,"author":{"gitID":"kokonguyen191"},"content":"        assertTrue(CookingTime.isValidCookingTime(\"1 hour 10 minutes\"));"},{"lineNumber":42,"author":{"gitID":"kokonguyen191"},"content":"        assertTrue(CookingTime.isValidCookingTime(\"70\"));"},{"lineNumber":43,"author":{"gitID":"kokonguyen191"},"content":"        assertTrue(CookingTime.isValidCookingTime(\"70m\"));"},{"lineNumber":44,"author":{"gitID":"kokonguyen191"},"content":"        assertTrue(CookingTime.isValidCookingTime(\"70min\"));"},{"lineNumber":45,"author":{"gitID":"kokonguyen191"},"content":"        assertTrue(CookingTime.isValidCookingTime(\"70 mins\"));"},{"lineNumber":46,"author":{"gitID":"kokonguyen191"},"content":"        assertTrue(CookingTime.isValidCookingTime(\"5h20m\"));"},{"lineNumber":47,"author":{"gitID":"kokonguyen191"},"content":"        assertTrue(CookingTime.isValidCookingTime(\"5 hours 20 mins\"));"},{"lineNumber":48,"author":{"gitID":"kokonguyen191"},"content":"        assertTrue(CookingTime.isValidCookingTime(\"5 hours 20 minutes\"));"},{"lineNumber":49,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"kokonguyen191"},"content":"}"}],"authorContributionMap":{"kokonguyen191":50}},{"path":"src/test/java/seedu/recipe/model/recipe/CaloriesTest.java","lines":[{"lineNumber":1,"author":{"gitID":"kokonguyen191"},"content":"//@@author kokonguyen191"},{"lineNumber":2,"author":{"gitID":"kokonguyen191"},"content":"package seedu.recipe.model.recipe;"},{"lineNumber":3,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":4,"author":{"gitID":"kokonguyen191"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"kokonguyen191"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":7,"author":{"gitID":"kokonguyen191"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":9,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.testutil.Assert;"},{"lineNumber":10,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":11,"author":{"gitID":"kokonguyen191"},"content":"public class CaloriesTest {"},{"lineNumber":12,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":13,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"kokonguyen191"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"kokonguyen191"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Calories(null));"},{"lineNumber":16,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":18,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"kokonguyen191"},"content":"    public void constructor_invalidCalories_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"kokonguyen191"},"content":"        String invalidCalories \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"kokonguyen191"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Calories(invalidCalories));"},{"lineNumber":22,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":24,"author":{"gitID":"kokonguyen191"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"kokonguyen191"},"content":"    public void isValidCalories() {"},{"lineNumber":26,"author":{"gitID":"kokonguyen191"},"content":"        // null calories number"},{"lineNumber":27,"author":{"gitID":"kokonguyen191"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Calories.isValidCalories(null));"},{"lineNumber":28,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":29,"author":{"gitID":"kokonguyen191"},"content":"        // invalid calories number"},{"lineNumber":30,"author":{"gitID":"kokonguyen191"},"content":"        assertFalse(Calories.isValidCalories(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"kokonguyen191"},"content":"        assertFalse(Calories.isValidCalories(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"kokonguyen191"},"content":"        assertFalse(Calories.isValidCalories(\"NaN\")); // not a number"},{"lineNumber":33,"author":{"gitID":"kokonguyen191"},"content":"        assertFalse(Calories.isValidCalories(\"BLAHBLAHBLAH\")); // non-numeric"},{"lineNumber":34,"author":{"gitID":"kokonguyen191"},"content":"        assertFalse(Calories.isValidCalories(\".1111..\")); // non-numeric"},{"lineNumber":35,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":36,"author":{"gitID":"kokonguyen191"},"content":"        // valid calories number"},{"lineNumber":37,"author":{"gitID":"kokonguyen191"},"content":"        assertTrue(Calories.isValidCalories(\"1000\"));"},{"lineNumber":38,"author":{"gitID":"kokonguyen191"},"content":"        assertTrue(Calories.isValidCalories(\"1111\"));"},{"lineNumber":39,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"kokonguyen191"},"content":"}"}],"authorContributionMap":{"kokonguyen191":40}},{"path":"src/test/java/seedu/recipe/model/recipe/IngredientContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"nicholasangcx"},"content":"//@@author nicholasangcx"},{"lineNumber":2,"author":{"gitID":"nicholasangcx"},"content":"package seedu.recipe.model.recipe;"},{"lineNumber":3,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":4,"author":{"gitID":"nicholasangcx"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"nicholasangcx"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":7,"author":{"gitID":"nicholasangcx"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"nicholasangcx"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitID":"nicholasangcx"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":11,"author":{"gitID":"nicholasangcx"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":13,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.testutil.RecipeBuilder;"},{"lineNumber":14,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":15,"author":{"gitID":"nicholasangcx"},"content":"public class IngredientContainsKeywordsPredicateTest {"},{"lineNumber":16,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":17,"author":{"gitID":"nicholasangcx"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"nicholasangcx"},"content":"    public void equals() {"},{"lineNumber":19,"author":{"gitID":"nicholasangcx"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":20,"author":{"gitID":"nicholasangcx"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":21,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":22,"author":{"gitID":"nicholasangcx"},"content":"        IngredientContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":23,"author":{"gitID":"nicholasangcx"},"content":"                new IngredientContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":24,"author":{"gitID":"nicholasangcx"},"content":"        IngredientContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":25,"author":{"gitID":"nicholasangcx"},"content":"                new IngredientContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":26,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":27,"author":{"gitID":"nicholasangcx"},"content":"        // same object -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"nicholasangcx"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":29,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":30,"author":{"gitID":"nicholasangcx"},"content":"        // same values -\u003e returns true"},{"lineNumber":31,"author":{"gitID":"nicholasangcx"},"content":"        IngredientContainsKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":32,"author":{"gitID":"nicholasangcx"},"content":"                new IngredientContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":33,"author":{"gitID":"nicholasangcx"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":34,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":35,"author":{"gitID":"nicholasangcx"},"content":"        // different types -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"nicholasangcx"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":37,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":38,"author":{"gitID":"nicholasangcx"},"content":"        // null -\u003e returns false"},{"lineNumber":39,"author":{"gitID":"nicholasangcx"},"content":"        assertFalse(firstPredicate \u003d\u003d null);"},{"lineNumber":40,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":41,"author":{"gitID":"nicholasangcx"},"content":"        // different recipe -\u003e returns false"},{"lineNumber":42,"author":{"gitID":"nicholasangcx"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":43,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":45,"author":{"gitID":"nicholasangcx"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"nicholasangcx"},"content":"    public void testIngredientContainsKeywordsReturnsTrue() {"},{"lineNumber":47,"author":{"gitID":"nicholasangcx"},"content":"        // One keyword"},{"lineNumber":48,"author":{"gitID":"nicholasangcx"},"content":"        IngredientContainsKeywordsPredicate predicate \u003d"},{"lineNumber":49,"author":{"gitID":"nicholasangcx"},"content":"                new IngredientContainsKeywordsPredicate(Collections.singletonList(\"chicken\"));"},{"lineNumber":50,"author":{"gitID":"nicholasangcx"},"content":"        assertTrue(predicate.test(new RecipeBuilder().withIngredient(\"chicken, rice\").build()));"},{"lineNumber":51,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":52,"author":{"gitID":"nicholasangcx"},"content":"        // Multiple keywords"},{"lineNumber":53,"author":{"gitID":"nicholasangcx"},"content":"        predicate \u003d new IngredientContainsKeywordsPredicate(Arrays.asList(\"chicken\", \"rice\"));"},{"lineNumber":54,"author":{"gitID":"nicholasangcx"},"content":"        assertTrue(predicate.test(new RecipeBuilder().withIngredient(\"chicken, rice\").build()));"},{"lineNumber":55,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":56,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":58,"author":{"gitID":"nicholasangcx"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"nicholasangcx"},"content":"    public void testIngredientDoesNotContainKeywordsReturnsFalse() {"},{"lineNumber":60,"author":{"gitID":"nicholasangcx"},"content":"        // Non-matching keyword"},{"lineNumber":61,"author":{"gitID":"nicholasangcx"},"content":"        IngredientContainsKeywordsPredicate predicate \u003d new IngredientContainsKeywordsPredicate(Arrays.asList(\"food\"));"},{"lineNumber":62,"author":{"gitID":"nicholasangcx"},"content":"        assertFalse(predicate.test(new RecipeBuilder().build()));"},{"lineNumber":63,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":64,"author":{"gitID":"nicholasangcx"},"content":"        // Only matches one keyword"},{"lineNumber":65,"author":{"gitID":"nicholasangcx"},"content":"        predicate \u003d new IngredientContainsKeywordsPredicate(Arrays.asList(\"chicken\", \"rice\"));"},{"lineNumber":66,"author":{"gitID":"nicholasangcx"},"content":"        assertFalse(predicate.test(new RecipeBuilder().withIngredient(\"chicken\").build()));"},{"lineNumber":67,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":68,"author":{"gitID":"nicholasangcx"},"content":"        // Keywords match phone, email, name and address, but does not match Ingredient"},{"lineNumber":69,"author":{"gitID":"nicholasangcx"},"content":"        predicate \u003d new IngredientContainsKeywordsPredicate(Arrays.asList"},{"lineNumber":70,"author":{"gitID":"nicholasangcx"},"content":"                (\"Food\", \"12345\", \"fish\", \"egg\", \"Main\", \"Street\"));"},{"lineNumber":71,"author":{"gitID":"nicholasangcx"},"content":"        assertFalse(predicate.test(new RecipeBuilder().withName(\"Food\").withPreparationTime(\"12345\")"},{"lineNumber":72,"author":{"gitID":"nicholasangcx"},"content":"                .withIngredient(\"chicken, rice\").withInstruction(\"Main Street\").build()));"},{"lineNumber":73,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"nicholasangcx"},"content":"}"},{"lineNumber":75,"author":{"gitID":"nicholasangcx"},"content":"//@@author"}],"authorContributionMap":{"nicholasangcx":75}},{"path":"src/test/java/seedu/recipe/testutil/RecipeUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_CALORIES;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_COOKING_TIME;"},{"lineNumber":5,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_IMG;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INSTRUCTION;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_PREPARATION_TIME;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_SERVINGS;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_URL;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.AddCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Recipe;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A utility class for Recipe."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class RecipeUtil {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Returns an add command string for adding the {@code recipe}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static String getAddCommand(Recipe recipe) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getRecipeDetails(recipe);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Returns the part of command string for the given {@code recipe}\u0027s details."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static String getRecipeDetails(Recipe recipe) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_NAME + recipe.getName().fullName + \" \");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_INGREDIENT + recipe.getIngredient().value + \" \");"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_INSTRUCTION + recipe.getInstruction().value + \" \");"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_COOKING_TIME + recipe.getCookingTime().value + \" \");"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_PREPARATION_TIME + recipe.getPreparationTime().value + \" \");"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_CALORIES + recipe.getCalories().value + \" \");"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_SERVINGS + recipe.getServings().value + \" \");"},{"lineNumber":41,"author":{"gitID":"RyanAngJY"},"content":"        sb.append(PREFIX_URL + recipe.getUrl().value + \" \");"},{"lineNumber":42,"author":{"gitID":"RyanAngJY"},"content":"        sb.append(PREFIX_IMG + recipe.getImage().toString() + \" \");"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        recipe.getTags().stream().forEach("},{"lineNumber":44,"author":{"gitID":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":4,"-":44}},{"path":"src/test/java/seedu/recipe/testutil/RecipeBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Calories;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.CookingTime;"},{"lineNumber":8,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.model.recipe.Image;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Ingredient;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Instruction;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Name;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.PreparationTime;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Recipe;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Servings;"},{"lineNumber":15,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.model.recipe.Url;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.recipe.model.tag.Tag;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.recipe.model.util.SampleDataUtil;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * A utility class to help with building Recipe objects."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class RecipeBuilder {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Chicken Rice\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_INGREDIENT \u003d \"demolishment,bigwig,archer,negative,appearance,afternoon\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_INSTRUCTION \u003d \"Fill a tea kettle or 2 quart saucepan with water and bring to \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + \"a boil. Remove excess fat from chilled chicken and place in colander over a large bowl. Spread out with\""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + \" a fork. Pour hot water over meat through colander.\\n\""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + \"Place chicken in plastic container with tight fitting lid.\\n\""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + \"Add onions, chili powder, oregano, garlic powder, cumin, and paprika to chicken.\\n\""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + \"Refrigerate chicken overnight in plastic container with tight fitting lid.\\n\""},{"lineNumber":32,"author":{"gitID":"-"},"content":"            + \"To make tacos, place chicken mixture in a pan and heat slowly or heat in microwave for 2–3 minutes, \""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + \"stirring after 1½ minutes to heat evenly. Combine finely shredded lettuce and cabbage. Mix cheeses \""},{"lineNumber":34,"author":{"gitID":"-"},"content":"            + \"together. Place ¼ cup heated chicken mixture in a tortilla and top with cheese and vegetables.\\n\""},{"lineNumber":35,"author":{"gitID":"-"},"content":"            + \"Add salsa as desired.\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_COOKING_TIME \u003d \"20 mins\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PREPARATION_TIME \u003d \"69 hours\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_CALORIES \u003d \"5000\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_SERVINGS \u003d \"2\";"},{"lineNumber":40,"author":{"gitID":"RyanAngJY"},"content":"    public static final String DEFAULT_URL \u003d \"https://www.jamieoliver.com/recipes/rice-recipes/a-basic-risotto-recipe/\";"},{"lineNumber":41,"author":{"gitID":"RyanAngJY"},"content":"    public static final String DEFAULT_IMAGE \u003d Image.VALID_IMAGE_PATH;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private Ingredient ingredient;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private Instruction instruction;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private CookingTime cookingTime;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private PreparationTime preparationTime;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private Calories calories;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private Servings servings;"},{"lineNumber":51,"author":{"gitID":"RyanAngJY"},"content":"    private Url url;"},{"lineNumber":52,"author":{"gitID":"RyanAngJY"},"content":"    private Image image;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public RecipeBuilder() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        ingredient \u003d new Ingredient(DEFAULT_INGREDIENT);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        instruction \u003d new Instruction(DEFAULT_INSTRUCTION);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        cookingTime \u003d new CookingTime(DEFAULT_COOKING_TIME);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        preparationTime \u003d new PreparationTime(DEFAULT_PREPARATION_TIME);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        calories \u003d new Calories(DEFAULT_CALORIES);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        servings \u003d new Servings(DEFAULT_SERVINGS);"},{"lineNumber":63,"author":{"gitID":"RyanAngJY"},"content":"        url \u003d new Url(DEFAULT_URL);"},{"lineNumber":64,"author":{"gitID":"RyanAngJY"},"content":"        image \u003d new Image(DEFAULT_IMAGE);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Initializes the RecipeBuilder with the data of {@code recipeToCopy}."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public RecipeBuilder(Recipe recipeToCopy) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        name \u003d recipeToCopy.getName();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        ingredient \u003d recipeToCopy.getIngredient();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        instruction \u003d recipeToCopy.getInstruction();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        cookingTime \u003d recipeToCopy.getCookingTime();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        preparationTime \u003d recipeToCopy.getPreparationTime();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        calories \u003d recipeToCopy.getCalories();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        servings \u003d recipeToCopy.getServings();"},{"lineNumber":79,"author":{"gitID":"RyanAngJY"},"content":"        url \u003d recipeToCopy.getUrl();"},{"lineNumber":80,"author":{"gitID":"RyanAngJY"},"content":"        image \u003d recipeToCopy.getImage();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(recipeToCopy.getTags());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Recipe} that we are building."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public RecipeBuilder withName(String name) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"kokonguyen191"},"content":"    //@@author kokonguyen191"},{"lineNumber":93,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"kokonguyen191"},"content":"     * Sets the {@code Instruction} of the {@code Recipe} that we are building."},{"lineNumber":95,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"kokonguyen191"},"content":"    public RecipeBuilder withInstruction(String instruction) {"},{"lineNumber":97,"author":{"gitID":"kokonguyen191"},"content":"        this.instruction \u003d new Instruction(instruction);"},{"lineNumber":98,"author":{"gitID":"kokonguyen191"},"content":"        return this;"},{"lineNumber":99,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":101,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"kokonguyen191"},"content":"     * Sets the {@code Ingredient} of the {@code Recipe} that we are building."},{"lineNumber":103,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"kokonguyen191"},"content":"    public RecipeBuilder withIngredient(String ingredient) {"},{"lineNumber":105,"author":{"gitID":"kokonguyen191"},"content":"        this.ingredient \u003d new Ingredient(ingredient);"},{"lineNumber":106,"author":{"gitID":"kokonguyen191"},"content":"        return this;"},{"lineNumber":107,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":109,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"kokonguyen191"},"content":"     * Sets the {@code CookingTime} of the {@code Recipe} that we are building."},{"lineNumber":111,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"kokonguyen191"},"content":"    public RecipeBuilder withCookingTime(String cookingTime) {"},{"lineNumber":113,"author":{"gitID":"kokonguyen191"},"content":"        this.cookingTime \u003d new CookingTime(cookingTime);"},{"lineNumber":114,"author":{"gitID":"kokonguyen191"},"content":"        return this;"},{"lineNumber":115,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":117,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"kokonguyen191"},"content":"     * Sets the {@code PreparationTime} of the {@code Recipe} that we are building."},{"lineNumber":119,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"kokonguyen191"},"content":"    public RecipeBuilder withPreparationTime(String preparationTime) {"},{"lineNumber":121,"author":{"gitID":"kokonguyen191"},"content":"        this.preparationTime \u003d new PreparationTime(preparationTime);"},{"lineNumber":122,"author":{"gitID":"kokonguyen191"},"content":"        return this;"},{"lineNumber":123,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":125,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"kokonguyen191"},"content":"     * Sets the {@code Calories} of the {@code Recipe} that we are building."},{"lineNumber":127,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"kokonguyen191"},"content":"    public RecipeBuilder withCalories(String calories) {"},{"lineNumber":129,"author":{"gitID":"kokonguyen191"},"content":"        this.calories \u003d new Calories(calories);"},{"lineNumber":130,"author":{"gitID":"kokonguyen191"},"content":"        return this;"},{"lineNumber":131,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":133,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"kokonguyen191"},"content":"     * Sets the {@code Servings} of the {@code Recipe} that we are building."},{"lineNumber":135,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"kokonguyen191"},"content":"    public RecipeBuilder withServings(String servings) {"},{"lineNumber":137,"author":{"gitID":"kokonguyen191"},"content":"        this.servings \u003d new Servings(servings);"},{"lineNumber":138,"author":{"gitID":"kokonguyen191"},"content":"        return this;"},{"lineNumber":139,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":141,"author":{"gitID":"RyanAngJY"},"content":"    //@@author RyanAngJY"},{"lineNumber":142,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"RyanAngJY"},"content":"     * Sets the {@code Url} of the {@code Recipe} that we are building."},{"lineNumber":144,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"RyanAngJY"},"content":"    public RecipeBuilder withUrl(String url) {"},{"lineNumber":146,"author":{"gitID":"RyanAngJY"},"content":"        this.url \u003d new Url(url);"},{"lineNumber":147,"author":{"gitID":"RyanAngJY"},"content":"        return this;"},{"lineNumber":148,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":150,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"RyanAngJY"},"content":"     * Sets the {@code Url} of the {@code Recipe} that we are building."},{"lineNumber":152,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"RyanAngJY"},"content":"    public RecipeBuilder withImage(String image) {"},{"lineNumber":154,"author":{"gitID":"RyanAngJY"},"content":"        this.image \u003d new Image(image);"},{"lineNumber":155,"author":{"gitID":"RyanAngJY"},"content":"        return this;"},{"lineNumber":156,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"RyanAngJY"},"content":"    //@@author"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Recipe} that we are building."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    public RecipeBuilder withTags(String ... tags) {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":168,"author":{"gitID":"RyanAngJY"},"content":"     * Builds the Recipe."},{"lineNumber":169,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":170,"author":{"gitID":"RyanAngJY"},"content":"    public Recipe build() {"},{"lineNumber":171,"author":{"gitID":"RyanAngJY"},"content":"        return new Recipe(name, ingredient, instruction, cookingTime, preparationTime, calories, servings,"},{"lineNumber":172,"author":{"gitID":"RyanAngJY"},"content":"                url, image, tags);"},{"lineNumber":173,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kokonguyen191":49,"RyanAngJY":34,"-":91}},{"path":"src/test/java/seedu/recipe/testutil/TypicalRecipes.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_CALORIES_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_CALORIES_BOB;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_COOKING_TIME_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_COOKING_TIME_BOB;"},{"lineNumber":7,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_IMG_AMY;"},{"lineNumber":8,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_IMG_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_INGREDIENT_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_INGREDIENT_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_INSTRUCTION_AMY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_INSTRUCTION_BOB;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_PREPARATION_TIME_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_PREPARATION_TIME_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_SERVINGS_AMY;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_SERVINGS_BOB;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":21,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_URL_AMY;"},{"lineNumber":22,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.commands.CommandTestUtil.VALID_URL_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.recipe.model.RecipeBook;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Recipe;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.exceptions.DuplicateRecipeException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Recipe} objects to be used in tests."},{"lineNumber":34,"author":{"gitID":"-"},"content":" */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class TypicalRecipes {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final Recipe ALICE \u003d new RecipeBuilder()"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            .withName(\"Alice Pauline\")"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            .withIngredient(\"demolishment,bigwig,archer,negative,appearance,afternoon\")"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            .withInstruction(\"Fill a tea kettle or 2 quart saucepan with water and bring to a boil.\""},{"lineNumber":41,"author":{"gitID":"-"},"content":"                    + \" Remove excess fat from chilled chicken and place in colander over a large bowl.\""},{"lineNumber":42,"author":{"gitID":"-"},"content":"                    + \" Spread out with a fork. Pour hot water over meat through colander.\\n\""},{"lineNumber":43,"author":{"gitID":"-"},"content":"                    + \"Place chicken in plastic container with tight fitting lid.\\n\""},{"lineNumber":44,"author":{"gitID":"-"},"content":"                    + \"Add onions, chili powder, oregano, garlic powder, cumin, and paprika to chicken.\\n\""},{"lineNumber":45,"author":{"gitID":"-"},"content":"                    + \"Refrigerate chicken overnight in plastic container with tight fitting lid.\\n\""},{"lineNumber":46,"author":{"gitID":"-"},"content":"                    + \"To make tacos, place chicken mixture in a pan and heat slowly or heat in microwave\""},{"lineNumber":47,"author":{"gitID":"-"},"content":"                    + \" for 2–3 minutes, stirring after 1½ minutes to heat evenly. Combine finely shredded\""},{"lineNumber":48,"author":{"gitID":"-"},"content":"                    + \" lettuce and cabbage. Mix cheeses together. Place ¼ cup heated chicken mixture in a \""},{"lineNumber":49,"author":{"gitID":"-"},"content":"                    + \"tortilla and top with cheese and vegetables.\\n\""},{"lineNumber":50,"author":{"gitID":"-"},"content":"                    + \"Add salsa as desired.\")"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            .withCookingTime(\"50m\")"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            .withPreparationTime(\"85355255\")"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            .withCalories(\"5000\")"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            .withServings(\"4\")"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            .withUrl(\"http://recipes.wikia.com/wiki/Hainanese_Chicken_Rice\")"},{"lineNumber":56,"author":{"gitID":"RyanAngJY"},"content":"            .withImage(\"-\")"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            .withTags(\"family\").build();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final Recipe BENSON \u003d new RecipeBuilder()"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            .withName(\"Benson Meier\")"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            .withIngredient(\"guest, barnyard, genuine, salt\")"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            .withInstruction(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            .withCookingTime(\"50m\")"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            .withPreparationTime(\"98765432\")"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            .withCalories(\"5000\")"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            .withServings(\"4\")"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            .withUrl(\"http://recipes.wikia.com/wiki/Ugandan_Chicken_Stew?useskin\u003dwikiamobile\")"},{"lineNumber":67,"author":{"gitID":"RyanAngJY"},"content":"            .withImage(\"-\")"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            .withTags(\"owesMoney\", \"family\").build();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static final Recipe CARL \u003d new RecipeBuilder()"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            .withName(\"Carl Kurz\")"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            .withIngredient(\"gadget\")"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            .withInstruction(\"wall street\")"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            .withCookingTime(\"50m\")"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            .withPreparationTime(\"95352563\")"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            .withCalories(\"5000\")"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            .withServings(\"4\")"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            .withUrl(\"https://www.bbcgoodfood.com/recipes/collection/casserole\")"},{"lineNumber":78,"author":{"gitID":"RyanAngJY"},"content":"            .withImage(\"-\")"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            .withTags(\"owesMoney\").build();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public static final Recipe DANIEL \u003d new RecipeBuilder()"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            .withName(\"Daniel Meier\")"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            .withIngredient(\"ebony, cold, affliction\")"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            .withInstruction(\"10th street\")"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            .withCookingTime(\"50m\")"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            .withPreparationTime(\"87652533\")"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            .withCalories(\"5000\")"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            .withServings(\"4\")"},{"lineNumber":88,"author":{"gitID":"RyanAngJY"},"content":"            .withUrl(\"https://www.bbcgoodfood.com/recipes/collection/curry\")"},{"lineNumber":89,"author":{"gitID":"RyanAngJY"},"content":"            .withImage(\"-\").build();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public static final Recipe ELLE \u003d new RecipeBuilder()"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            .withName(\"Elle Meyer\")"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            .withIngredient(\"test, aimless\")"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            .withInstruction(\"michegan ave\")"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            .withCookingTime(\"50m\")"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            .withPreparationTime(\"9482224\")"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            .withCalories(\"5000\")"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            .withServings(\"4\")"},{"lineNumber":98,"author":{"gitID":"RyanAngJY"},"content":"            .withUrl(\"https://www.bbcgoodfood.com/recipes/collection/fish-pie\")"},{"lineNumber":99,"author":{"gitID":"RyanAngJY"},"content":"            .withImage(\"-\").build();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public static final Recipe FIONA \u003d new RecipeBuilder()"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            .withName(\"Fiona Kunz\")"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            .withIngredient(\"bluntness, ingredients\")"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            .withInstruction(\"little tokyo\")"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            .withCookingTime(\"50m\")"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            .withPreparationTime(\"9482427\")"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            .withCalories(\"5000\")"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            .withServings(\"4\")"},{"lineNumber":108,"author":{"gitID":"RyanAngJY"},"content":"            .withUrl(\"https://www.bbcgoodfood.com/recipes/collection/chicken-salad\")"},{"lineNumber":109,"author":{"gitID":"RyanAngJY"},"content":"            .withImage(\"-\").build();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public static final Recipe GEORGE \u003d new RecipeBuilder()"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            .withName(\"George Best\")"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            .withIngredient(\"confidence, abandon, brass, model, greed, minipill\")"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            .withInstruction(\"4th street\")"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            .withCookingTime(\"50m\")"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            .withPreparationTime(\"9482442\")"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            .withCalories(\"5000\")"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            .withServings(\"4\")"},{"lineNumber":118,"author":{"gitID":"RyanAngJY"},"content":"            .withUrl(\"https://www.bbcgoodfood.com/recipes/collection/crumble\")"},{"lineNumber":119,"author":{"gitID":"RyanAngJY"},"content":"            .withImage(\"-\").build();"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public static final Recipe HOON \u003d new RecipeBuilder()"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            .withName(\"Hoon Meier\")"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            .withIngredient(\"test, ingredients\")"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            .withInstruction(\"little india\")"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            .withCookingTime(\"5555\")"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            .withPreparationTime(\"420m\")"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            .withCalories(\"15000\")"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            .withServings(\"2\")"},{"lineNumber":130,"author":{"gitID":"RyanAngJY"},"content":"            .withUrl(\"https://www.google.com\")"},{"lineNumber":131,"author":{"gitID":"RyanAngJY"},"content":"            .withImage(\"-\").build();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public static final Recipe IDA \u003d new RecipeBuilder()"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            .withName(\"Ida Mueller\")"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            .withIngredient(\"test,ingredients\")"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            .withInstruction(\"chicago ave\")"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            .withCookingTime(\"5555\")"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            .withPreparationTime(\"420m\")"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            .withCalories(\"15000\")"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            .withServings(\"2\")"},{"lineNumber":140,"author":{"gitID":"RyanAngJY"},"content":"            .withUrl(\"https://www.google.com\")"},{"lineNumber":141,"author":{"gitID":"RyanAngJY"},"content":"            .withImage(\"-\").build();"},{"lineNumber":142,"author":{"gitID":"RyanAngJY"},"content":"    public static final Recipe NOURL \u003d new RecipeBuilder()"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            .withName(\"Ida Mueller\")"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            .withIngredient(\"just,example\")"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            .withInstruction(\"chicago ave\")"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            .withCookingTime(\"5555\")"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            .withPreparationTime(\"420m\")"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            .withCalories(\"15000\")"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            .withServings(\"2\")"},{"lineNumber":150,"author":{"gitID":"RyanAngJY"},"content":"            .withUrl(\"-\")"},{"lineNumber":151,"author":{"gitID":"RyanAngJY"},"content":"            .withImage(\"-\").build();"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    // Manually added - Recipe\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    public static final Recipe AMY \u003d new RecipeBuilder()"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            .withName(VALID_NAME_AMY)"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            .withIngredient(VALID_INGREDIENT_AMY)"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            .withInstruction(VALID_INSTRUCTION_AMY)"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            .withCookingTime(VALID_COOKING_TIME_AMY)"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            .withPreparationTime(VALID_PREPARATION_TIME_AMY)"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            .withCalories(VALID_CALORIES_AMY)"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            .withServings(VALID_SERVINGS_AMY)"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            .withUrl(VALID_URL_AMY)"},{"lineNumber":163,"author":{"gitID":"RyanAngJY"},"content":"            .withImage(VALID_IMG_AMY)"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    public static final Recipe BOB \u003d new RecipeBuilder()"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            .withName(VALID_NAME_BOB)"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            .withIngredient(VALID_INGREDIENT_BOB)"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            .withInstruction(VALID_INSTRUCTION_BOB)"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            .withCookingTime(VALID_COOKING_TIME_BOB)"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            .withPreparationTime(VALID_PREPARATION_TIME_BOB)"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            .withCalories(VALID_CALORIES_BOB)"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            .withServings(VALID_SERVINGS_BOB)"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            .withUrl(VALID_URL_BOB)"},{"lineNumber":174,"author":{"gitID":"RyanAngJY"},"content":"            .withImage(VALID_IMG_BOB)"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"    private TypicalRecipes() {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    } // prevents instantiation"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * Returns an {@code RecipeBook} with all the typical recipes."},{"lineNumber":184,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public static RecipeBook getTypicalRecipeBook() {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        RecipeBook ab \u003d new RecipeBook();"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        for (Recipe recipe : getTypicalRecipes()) {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"                ab.addRecipe(recipe);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"            } catch (DuplicateRecipeException e) {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":192,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    public static List\u003cRecipe\u003e getTypicalRecipes() {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":24,"-":176}},{"path":"src/test/java/seedu/recipe/model/tag/TagContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"nicholasangcx"},"content":"//@@author nicholasangcx"},{"lineNumber":2,"author":{"gitID":"nicholasangcx"},"content":"package seedu.recipe.model.tag;"},{"lineNumber":3,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":4,"author":{"gitID":"nicholasangcx"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"nicholasangcx"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":7,"author":{"gitID":"nicholasangcx"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"nicholasangcx"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitID":"nicholasangcx"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":11,"author":{"gitID":"nicholasangcx"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":13,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.testutil.RecipeBuilder;"},{"lineNumber":14,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":15,"author":{"gitID":"nicholasangcx"},"content":"public class TagContainsKeywordsPredicateTest {"},{"lineNumber":16,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":17,"author":{"gitID":"nicholasangcx"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"nicholasangcx"},"content":"    public void equals() {"},{"lineNumber":19,"author":{"gitID":"nicholasangcx"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":20,"author":{"gitID":"nicholasangcx"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":21,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":22,"author":{"gitID":"nicholasangcx"},"content":"        TagContainsKeywordsPredicate firstPredicate \u003d new TagContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"nicholasangcx"},"content":"        TagContainsKeywordsPredicate secondPredicate \u003d new TagContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":24,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":25,"author":{"gitID":"nicholasangcx"},"content":"        // same object -\u003e returns true"},{"lineNumber":26,"author":{"gitID":"nicholasangcx"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":27,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":28,"author":{"gitID":"nicholasangcx"},"content":"        // same values -\u003e returns true"},{"lineNumber":29,"author":{"gitID":"nicholasangcx"},"content":"        TagContainsKeywordsPredicate firstPredicateCopy \u003d new TagContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":30,"author":{"gitID":"nicholasangcx"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":31,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":32,"author":{"gitID":"nicholasangcx"},"content":"        // different types -\u003e returns false"},{"lineNumber":33,"author":{"gitID":"nicholasangcx"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":34,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":35,"author":{"gitID":"nicholasangcx"},"content":"        // null -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"nicholasangcx"},"content":"        assertFalse(firstPredicate \u003d\u003d null);"},{"lineNumber":37,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":38,"author":{"gitID":"nicholasangcx"},"content":"        // different recipe -\u003e returns false"},{"lineNumber":39,"author":{"gitID":"nicholasangcx"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":40,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":42,"author":{"gitID":"nicholasangcx"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"nicholasangcx"},"content":"    public void testTagContainsKeywordsReturnsTrue() {"},{"lineNumber":44,"author":{"gitID":"nicholasangcx"},"content":"        // One keyword"},{"lineNumber":45,"author":{"gitID":"nicholasangcx"},"content":"        TagContainsKeywordsPredicate predicate \u003d new TagContainsKeywordsPredicate(Collections.singletonList(\"friends\"));"},{"lineNumber":46,"author":{"gitID":"nicholasangcx"},"content":"        assertTrue(predicate.test(new RecipeBuilder().build()));"},{"lineNumber":47,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":48,"author":{"gitID":"nicholasangcx"},"content":"        // Multiple keywords"},{"lineNumber":49,"author":{"gitID":"nicholasangcx"},"content":"        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"friends\", \"food\"));"},{"lineNumber":50,"author":{"gitID":"nicholasangcx"},"content":"        assertTrue(predicate.test(new RecipeBuilder().withTags(\"friends\", \"food\").build()));"},{"lineNumber":51,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":52,"author":{"gitID":"nicholasangcx"},"content":"        // Only one matching keyword"},{"lineNumber":53,"author":{"gitID":"nicholasangcx"},"content":"        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"friends\", \"food\"));"},{"lineNumber":54,"author":{"gitID":"nicholasangcx"},"content":"        assertTrue(predicate.test(new RecipeBuilder().build()));"},{"lineNumber":55,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":57,"author":{"gitID":"nicholasangcx"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"nicholasangcx"},"content":"    public void testTagDoesNotContainKeywordsReturnsFalse() {"},{"lineNumber":59,"author":{"gitID":"nicholasangcx"},"content":"        // Zero keywords"},{"lineNumber":60,"author":{"gitID":"nicholasangcx"},"content":"        TagContainsKeywordsPredicate predicate \u003d new TagContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":61,"author":{"gitID":"nicholasangcx"},"content":"        assertFalse(predicate.test(new RecipeBuilder().build()));"},{"lineNumber":62,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":63,"author":{"gitID":"nicholasangcx"},"content":"        // Non-matching keyword"},{"lineNumber":64,"author":{"gitID":"nicholasangcx"},"content":"        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"food\"));"},{"lineNumber":65,"author":{"gitID":"nicholasangcx"},"content":"        assertFalse(predicate.test(new RecipeBuilder().build()));"},{"lineNumber":66,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":67,"author":{"gitID":"nicholasangcx"},"content":"        // Keywords match phone, email, name and address, but does not match tag"},{"lineNumber":68,"author":{"gitID":"nicholasangcx"},"content":"        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList"},{"lineNumber":69,"author":{"gitID":"nicholasangcx"},"content":"                            (\"Food\", \"12345\", \"fish\", \"egg\", \"Main\", \"Street\"));"},{"lineNumber":70,"author":{"gitID":"nicholasangcx"},"content":"        assertFalse(predicate.test(new RecipeBuilder().withName(\"Food\").withPreparationTime(\"12345\")"},{"lineNumber":71,"author":{"gitID":"nicholasangcx"},"content":"                .withIngredient(\"fish, egg\").withInstruction(\"Main Street\").build()));"},{"lineNumber":72,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"nicholasangcx"},"content":"}"},{"lineNumber":74,"author":{"gitID":"nicholasangcx"},"content":"//@@author"}],"authorContributionMap":{"nicholasangcx":74}},{"path":"src/test/java/guitests/GuiRobot.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.BooleanSupplier;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.testfx.api.FxRobot;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.exceptions.StageNotFoundException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Robot used to simulate user actions on the GUI."},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Extends {@link FxRobot} by adding some customized functionality and workarounds."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class GuiRobot extends FxRobot {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final int PAUSE_FOR_HUMAN_DELAY_MILLISECONDS \u003d 250;"},{"lineNumber":18,"author":{"gitID":"RyanAngJY"},"content":"    private static final int DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS \u003d 50000;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String PROPERTY_TESTFX_HEADLESS \u003d \"testfx.headless\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final boolean isHeadlessMode;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public GuiRobot() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        String headlessPropertyValue \u003d System.getProperty(PROPERTY_TESTFX_HEADLESS);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        isHeadlessMode \u003d headlessPropertyValue !\u003d null \u0026\u0026 headlessPropertyValue.equals(\"true\");"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Pauses execution for {@code PAUSE_FOR_HUMAN_DELAY_MILLISECONDS} milliseconds for a human to examine the"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * effects of the test. This method will be disabled when the GUI tests are executed in headless mode to avoid"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * unnecessary delays."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void pauseForHuman() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        if (isHeadlessMode) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        sleep(PAUSE_FOR_HUMAN_DELAY_MILLISECONDS);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Waits for {@code event} to be true by {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS} milliseconds."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * @throws EventTimeoutException if the time taken exceeds {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS}"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * milliseconds."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void waitForEvent(BooleanSupplier event) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        waitForEvent(event, DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Waits for {@code event} to be true."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * @param timeOut in milliseconds"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * @throws EventTimeoutException if the time taken exceeds {@code timeOut}."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void waitForEvent(BooleanSupplier event, int timeOut) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        int timePassed \u003d 0;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        final int retryInterval \u003d 50;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        while (!event.getAsBoolean()) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            sleep(retryInterval);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            timePassed +\u003d retryInterval;"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"            if (timePassed \u003e\u003d timeOut) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                throw new EventTimeoutException();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        pauseForHuman();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Returns true if the window with {@code stageTitle} is currently open."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public boolean isWindowShown(String stageTitle) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return listTargetWindows().stream()"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                .filter(window -\u003e window instanceof Stage \u0026\u0026 ((Stage) window).getTitle().equals(stageTitle))"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                .count() \u003e\u003d 1;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Returns the first stage, ordered by proximity to the current target window, with the stage title."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * The order that the windows are searched are as follows (proximity): current target window,"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * children of the target window, rest of the windows."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * @throws StageNotFoundException if the stage is not found."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public Stage getStage(String stageTitle) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Optional\u003cStage\u003e targetStage \u003d listTargetWindows().stream()"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                .filter(Stage.class::isInstance)    // checks that the window is of type Stage"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                .map(Stage.class::cast)"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                .filter(stage -\u003e stage.getTitle().equals(stageTitle))"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                .findFirst();"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return targetStage.orElseThrow(StageNotFoundException::new);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Represents an error which occurs when a timeout occurs when waiting for an event."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    private class EventTimeoutException extends RuntimeException {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":1,"-":104}},{"path":"src/test/java/guitests/guihandles/CommandBoxHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.recipe.ui.CommandBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * A handle to the {@code CommandBox} in the GUI."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class CommandBoxHandle extends NodeHandle\u003cTextArea\u003e {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String COMMAND_INPUT_FIELD_ID \u003d \"#commandTextArea\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public CommandBoxHandle(TextArea commandBoxNode) {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        super(commandBoxNode);"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns the text in the command box."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public String getInput() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return getRootNode().getText();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Enters the given command in the Command Box and presses enter."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * @return true if the command succeeded, false otherwise."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public boolean run(String command) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        click();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e getRootNode().setText(command));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        guiRobot.type(KeyCode.ENTER);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return !getStyleClass().contains(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"kokonguyen191"},"content":"    //@@author kokonguyen191"},{"lineNumber":42,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":43,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"kokonguyen191"},"content":"     * Appends the given string to text already existing in the Command box"},{"lineNumber":45,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"kokonguyen191"},"content":"    public void appendText(String text) {"},{"lineNumber":47,"author":{"gitID":"kokonguyen191"},"content":"        guiRobot.interact(() -\u003e getRootNode().appendText(text));"},{"lineNumber":48,"author":{"gitID":"kokonguyen191"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":49,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":51,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"kokonguyen191"},"content":"     * Submits whatever is in the CommandBox"},{"lineNumber":53,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"kokonguyen191"},"content":"    public void submitCommand() {"},{"lineNumber":55,"author":{"gitID":"kokonguyen191"},"content":"        click();"},{"lineNumber":56,"author":{"gitID":"kokonguyen191"},"content":"        guiRobot.type(KeyCode.ENTER);"},{"lineNumber":57,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":59,"author":{"gitID":"hoangduong1607"},"content":"    //@@author hoangduong1607"},{"lineNumber":60,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":61,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"hoangduong1607"},"content":"     * Inserts the given string to text at current caret position"},{"lineNumber":63,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"hoangduong1607"},"content":"    public void insertText(String text) {"},{"lineNumber":65,"author":{"gitID":"hoangduong1607"},"content":"        int caretPosition \u003d getRootNode().getCaretPosition();"},{"lineNumber":66,"author":{"gitID":"hoangduong1607"},"content":"        guiRobot.interact(() -\u003e getRootNode().insertText(caretPosition, text));"},{"lineNumber":67,"author":{"gitID":"hoangduong1607"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":68,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":70,"author":{"gitID":"hoangduong1607"},"content":"    //@@author"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Returns the list of style classes present in the command box."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public ObservableList\u003cString\u003e getStyleClass() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return getRootNode().getStyleClass();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kokonguyen191":18,"hoangduong1607":12,"-":48}},{"path":"src/test/java/guitests/guihandles/BrowserPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.concurrent.Worker;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebEngine;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * A handler for the {@code BrowserPanel} of the UI."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class BrowserPanelHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final String BROWSER_ID \u003d \"#browser\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private boolean isWebViewLoaded \u003d true;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private URL lastRememberedUrl;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle(Node browserPanelNode) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        super(browserPanelNode);"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        WebView webView \u003d getChildNode(BROWSER_ID);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        WebEngine engine \u003d webView.getEngine();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        new GuiRobot().interact(() -\u003e engine.getLoadWorker().stateProperty().addListener((obs, oldState, newState) -\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            if (newState \u003d\u003d Worker.State.RUNNING) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"                isWebViewLoaded \u003d false;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            } else if (newState \u003d\u003d Worker.State.SUCCEEDED) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                isWebViewLoaded \u003d true;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        }));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Returns the {@code URL} of the currently loaded page."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public URL getLoadedUrl() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return WebViewUtil.getLoadedUrl(getChildNode(BROWSER_ID));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"RyanAngJY"},"content":"     * Returns the HTML of the currently loaded page."},{"lineNumber":45,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"RyanAngJY"},"content":"    public String getLoadedHtml() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        WebView webView \u003d getChildNode(BROWSER_ID);"},{"lineNumber":48,"author":{"gitID":"RyanAngJY"},"content":"        return webView.getEngine().getDocument().getDocumentElement().getTextContent();"},{"lineNumber":49,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Remembers the {@code URL} of the currently loaded page."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void rememberUrl() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        lastRememberedUrl \u003d getLoadedUrl();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Returns true if the current {@code URL} is different from the value remembered by the most recent"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * {@code rememberUrl()} call."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public boolean isUrlChanged() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return !lastRememberedUrl.equals(getLoadedUrl());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Returns true if the browser is done loading a page, or if this browser has yet to load any page."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public boolean isLoaded() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return isWebViewLoaded;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":7,"-":65}},{"path":"src/test/java/guitests/guihandles/MainMenuHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Provides a handle to the main menu of the app."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class MainMenuHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MENU_BAR_ID \u003d \"#menuBar\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public MainMenuHandle(Node mainMenuNode) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        super(mainMenuNode);"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Opens the {@code HelpWindow} using the menu bar in {@code MainWindow}."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void openHelpWindowUsingMenu() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        clickOnMenuItemsSequentially(\"Help\", \"F1\");"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Opens the {@code HelpWindow} by pressing the shortcut key associated"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * with the menu bar in {@code MainWindow}."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void openHelpWindowUsingAccelerator() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.F1);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"kokonguyen191"},"content":"    //@@author kokonguyen191"},{"lineNumber":34,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"kokonguyen191"},"content":"     * Changes theme using the menu bar in {@code MainWindow}."},{"lineNumber":36,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"kokonguyen191"},"content":"    public void changeThemeUsingMenu() {"},{"lineNumber":38,"author":{"gitID":"kokonguyen191"},"content":"        clickOnMenuItemsSequentially(\"Change Theme\", \"F2\");"},{"lineNumber":39,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":41,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"kokonguyen191"},"content":"     * Changes theme by pressing the shortcut key associated with the menu bar in {@code MainWindow}."},{"lineNumber":43,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"kokonguyen191"},"content":"    public void changeThemeUsingAccelerator() {"},{"lineNumber":45,"author":{"gitID":"kokonguyen191"},"content":"        guiRobot.push(KeyCode.F2);"},{"lineNumber":46,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":48,"author":{"gitID":"kokonguyen191"},"content":"    //@@author"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Clicks on {@code menuItems} in order."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private void clickOnMenuItemsSequentially(String... menuItems) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Arrays.stream(menuItems).forEach(guiRobot::clickOn);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kokonguyen191":16,"-":39}},{"path":"src/test/java/seedu/recipe/testutil/EditRecipeDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.EditCommand.EditRecipeDescriptor;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Calories;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.CookingTime;"},{"lineNumber":10,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.model.recipe.Image;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Ingredient;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Instruction;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Name;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.PreparationTime;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Recipe;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Servings;"},{"lineNumber":17,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.model.recipe.Url;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.recipe.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * A utility class to help with building EditRecipeDescriptor objects."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class EditRecipeDescriptorBuilder {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private EditRecipeDescriptor descriptor;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public EditRecipeDescriptorBuilder() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditRecipeDescriptor();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public EditRecipeDescriptorBuilder(EditRecipeDescriptor descriptor) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.descriptor \u003d new EditRecipeDescriptor(descriptor);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Returns an {@code EditRecipeDescriptor} with fields containing {@code recipe}\u0027s details"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public EditRecipeDescriptorBuilder(Recipe recipe) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditRecipeDescriptor();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        descriptor.setName(recipe.getName());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        descriptor.setIngredient(recipe.getIngredient());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        descriptor.setInstruction(recipe.getInstruction());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        descriptor.setCookingTime(recipe.getCookingTime());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        descriptor.setPreparationTime(recipe.getPreparationTime());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        descriptor.setCalories(recipe.getCalories());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        descriptor.setServings(recipe.getServings());"},{"lineNumber":47,"author":{"gitID":"RyanAngJY"},"content":"        descriptor.setUrl(recipe.getUrl());"},{"lineNumber":48,"author":{"gitID":"RyanAngJY"},"content":"        descriptor.setImage(recipe.getImage());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        descriptor.setTags(recipe.getTags());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code EditRecipeDescriptor} that we are building."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public EditRecipeDescriptorBuilder withName(String name) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"kokonguyen191"},"content":"    //@@author kokonguyen191"},{"lineNumber":61,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"kokonguyen191"},"content":"     * Sets the {@code Ingredient} of the {@code EditRecipeDescriptor} that we are building."},{"lineNumber":63,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"kokonguyen191"},"content":"    public EditRecipeDescriptorBuilder withIngredient(String ingredient) {"},{"lineNumber":65,"author":{"gitID":"kokonguyen191"},"content":"        descriptor.setIngredient(new Ingredient(ingredient));"},{"lineNumber":66,"author":{"gitID":"kokonguyen191"},"content":"        return this;"},{"lineNumber":67,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":69,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"kokonguyen191"},"content":"     * Sets the {@code Instruction} of the {@code EditRecipeDescriptor} that we are building."},{"lineNumber":71,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"kokonguyen191"},"content":"    public EditRecipeDescriptorBuilder withInstruction(String instruction) {"},{"lineNumber":73,"author":{"gitID":"kokonguyen191"},"content":"        descriptor.setInstruction(new Instruction(instruction));"},{"lineNumber":74,"author":{"gitID":"kokonguyen191"},"content":"        return this;"},{"lineNumber":75,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":77,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"kokonguyen191"},"content":"     * Sets the {@code CookingTime} of the {@code EditRecipeDescriptor} that we are building."},{"lineNumber":79,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"kokonguyen191"},"content":"    public EditRecipeDescriptorBuilder withCookingTime(String cookingTime) {"},{"lineNumber":81,"author":{"gitID":"kokonguyen191"},"content":"        descriptor.setCookingTime(new CookingTime(cookingTime));"},{"lineNumber":82,"author":{"gitID":"kokonguyen191"},"content":"        return this;"},{"lineNumber":83,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":85,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"kokonguyen191"},"content":"     * Sets the {@code PreparationTime} of the {@code EditRecipeDescriptor} that we are building."},{"lineNumber":87,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"kokonguyen191"},"content":"    public EditRecipeDescriptorBuilder withPreparationTime(String preparationTime) {"},{"lineNumber":89,"author":{"gitID":"kokonguyen191"},"content":"        descriptor.setPreparationTime(new PreparationTime(preparationTime));"},{"lineNumber":90,"author":{"gitID":"kokonguyen191"},"content":"        return this;"},{"lineNumber":91,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":93,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"kokonguyen191"},"content":"     * Sets the {@code Calories} of the {@code EditRecipeDescriptor} that we are building."},{"lineNumber":95,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"kokonguyen191"},"content":"    public EditRecipeDescriptorBuilder withCalories(String calories) {"},{"lineNumber":97,"author":{"gitID":"kokonguyen191"},"content":"        descriptor.setCalories(new Calories(calories));"},{"lineNumber":98,"author":{"gitID":"kokonguyen191"},"content":"        return this;"},{"lineNumber":99,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":101,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"kokonguyen191"},"content":"     * Sets the {@code Servings} of the {@code EditRecipeDescriptor} that we are building."},{"lineNumber":103,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"kokonguyen191"},"content":"    public EditRecipeDescriptorBuilder withServings(String servings) {"},{"lineNumber":105,"author":{"gitID":"kokonguyen191"},"content":"        descriptor.setServings(new Servings(servings));"},{"lineNumber":106,"author":{"gitID":"kokonguyen191"},"content":"        return this;"},{"lineNumber":107,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"kokonguyen191"},"content":"    //@@author"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"RyanAngJY"},"content":"    //@@author RyanAngJY"},{"lineNumber":111,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"RyanAngJY"},"content":"     * Sets the {@code Url} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":113,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"RyanAngJY"},"content":"    public EditRecipeDescriptorBuilder withUrl(String url) {"},{"lineNumber":115,"author":{"gitID":"RyanAngJY"},"content":"        descriptor.setUrl(new Url(url));"},{"lineNumber":116,"author":{"gitID":"RyanAngJY"},"content":"        return this;"},{"lineNumber":117,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":119,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"RyanAngJY"},"content":"     * Sets the {@code Url} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":121,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"RyanAngJY"},"content":"    public EditRecipeDescriptorBuilder withImage(String image) {"},{"lineNumber":123,"author":{"gitID":"RyanAngJY"},"content":"        descriptor.setImage(new Image(image));"},{"lineNumber":124,"author":{"gitID":"RyanAngJY"},"content":"        return this;"},{"lineNumber":125,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"RyanAngJY"},"content":"    //@@author"},{"lineNumber":127,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditRecipeDescriptor}"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * that we are building."},{"lineNumber":131,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public EditRecipeDescriptorBuilder withTags(String... tags) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public EditRecipeDescriptor build() {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        return descriptor;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kokonguyen191":49,"RyanAngJY":22,"-":70}},{"path":"src/test/java/guitests/guihandles/RecipeCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"RyanAngJY"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Provides a handle to a recipe card in the recipe list panel."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class RecipeCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String SERVINGS_FIELD_ID \u003d \"#servings\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String PREPARATION_TIME_FIELD_ID \u003d \"#preparationTime\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String INGREDIENT_FIELD_ID \u003d \"#ingredient\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String CALORIES_FIELD_ID \u003d \"#calories\";"},{"lineNumber":21,"author":{"gitID":"RyanAngJY"},"content":"    private static final String URL_FIELD_ID \u003d \"#url\";"},{"lineNumber":22,"author":{"gitID":"RyanAngJY"},"content":"    private static final String IMAGE_FIELD_ID \u003d \"#imageView\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Label servingsLabel;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final Label preparationTimeLabel;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Label ingredientLabel;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final Label caloriesLabel;"},{"lineNumber":31,"author":{"gitID":"RyanAngJY"},"content":"    private final Label urlLabel;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":33,"author":{"gitID":"RyanAngJY"},"content":"    private final ImageView imageView;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public RecipeCardHandle(Node cardNode) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.servingsLabel \u003d getChildNode(SERVINGS_FIELD_ID);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.preparationTimeLabel \u003d getChildNode(PREPARATION_TIME_FIELD_ID);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.caloriesLabel \u003d getChildNode(CALORIES_FIELD_ID);"},{"lineNumber":43,"author":{"gitID":"RyanAngJY"},"content":"        this.urlLabel \u003d getChildNode(URL_FIELD_ID);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.ingredientLabel \u003d getChildNode(INGREDIENT_FIELD_ID);"},{"lineNumber":45,"author":{"gitID":"RyanAngJY"},"content":"        this.imageView \u003d getChildNode(IMAGE_FIELD_ID);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public String getServings() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return servingsLabel.getText();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public String getPreparationTime() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return preparationTimeLabel.getText();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public String getIngredient() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return ingredientLabel.getText();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public String getCalories() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return caloriesLabel.getText();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"RyanAngJY"},"content":"    public String getUrl() {"},{"lineNumber":80,"author":{"gitID":"RyanAngJY"},"content":"        return urlLabel.getText();"},{"lineNumber":81,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":86,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":11,"-":78}},{"path":"src/main/java/seedu/recipe/ui/CssSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"RyanAngJY"},"content":"//@@author RyanAngJY"},{"lineNumber":2,"author":{"gitID":"RyanAngJY"},"content":"package seedu.recipe.ui;"},{"lineNumber":3,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":4,"author":{"gitID":"RyanAngJY"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"RyanAngJY"},"content":" * Contains CSS (Cascading Style Sheet) syntax."},{"lineNumber":6,"author":{"gitID":"RyanAngJY"},"content":" */"},{"lineNumber":7,"author":{"gitID":"RyanAngJY"},"content":"public class CssSyntax {"},{"lineNumber":8,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":9,"author":{"gitID":"RyanAngJY"},"content":"    /* Prefix definitions */"},{"lineNumber":10,"author":{"gitID":"RyanAngJY"},"content":"    public static final String CSS_PROPERTY_BACKGROUND_COLOR \u003d \"-fx-background-color: \";"},{"lineNumber":11,"author":{"gitID":"RyanAngJY"},"content":"    public static final String CSS_PROPERTY_TEXT_COLOR \u003d \"-fx-text-fill: \";"},{"lineNumber":12,"author":{"gitID":"RyanAngJY"},"content":"}"},{"lineNumber":13,"author":{"gitID":"RyanAngJY"},"content":"//@@author"}],"authorContributionMap":{"RyanAngJY":13}},{"path":"src/main/java/seedu/recipe/ui/util/KeyboardShortcutsMapping.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.ui.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"hoangduong1607"},"content":"import javafx.scene.input.KeyCodeCombination;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Contains all mappings for keyboard shortcuts"},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class KeyboardShortcutsMapping {"},{"lineNumber":9,"author":{"gitID":"hoangduong1607"},"content":"    public static final KeyCodeCombination COMMAND_SUBMISSION \u003d"},{"lineNumber":10,"author":{"gitID":"hoangduong1607"},"content":"            (KeyCodeCombination) KeyCodeCombination.valueOf(\"Enter\");"},{"lineNumber":11,"author":{"gitID":"hoangduong1607"},"content":"    public static final KeyCodeCombination LAST_COMMAND \u003d"},{"lineNumber":12,"author":{"gitID":"-"},"content":"            (KeyCodeCombination) KeyCodeCombination.valueOf(\"Ctrl+Up\");"},{"lineNumber":13,"author":{"gitID":"hoangduong1607"},"content":"    public static final KeyCodeCombination NEXT_COMMAND \u003d"},{"lineNumber":14,"author":{"gitID":"-"},"content":"            (KeyCodeCombination) KeyCodeCombination.valueOf(\"Ctrl+Down\");"},{"lineNumber":15,"author":{"gitID":"hoangduong1607"},"content":"    public static final KeyCodeCombination NEW_LINE_IN_COMMAND \u003d"},{"lineNumber":16,"author":{"gitID":"hoangduong1607"},"content":"            (KeyCodeCombination) KeyCodeCombination.valueOf(\"Shift+Enter\");"},{"lineNumber":17,"author":{"gitID":"hoangduong1607"},"content":"    public static final KeyCodeCombination SHOW_SUGGESTIONS_COMMAND \u003d"},{"lineNumber":18,"author":{"gitID":"hoangduong1607"},"content":"            (KeyCodeCombination) KeyCodeCombination.valueOf(\"Shift+Tab\");"},{"lineNumber":19,"author":{"gitID":"hoangduong1607"},"content":"    public static final KeyCodeCombination NEXT_FIELD \u003d"},{"lineNumber":20,"author":{"gitID":"hoangduong1607"},"content":"            (KeyCodeCombination) KeyCodeCombination.valueOf(\"Tab\");"},{"lineNumber":21,"author":{"gitID":"hoangduong1607"},"content":"    public static final KeyCodeCombination PREV_FIELD \u003d"},{"lineNumber":22,"author":{"gitID":"hoangduong1607"},"content":"            (KeyCodeCombination) KeyCodeCombination.valueOf(\"Ctrl+Tab\");"},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hoangduong1607":13,"-":10}},{"path":"src/main/java/seedu/recipe/ui/util/AutoCompletionUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"hoangduong1607"},"content":"//@@author hoangduong1607"},{"lineNumber":2,"author":{"gitID":"hoangduong1607"},"content":"package seedu.recipe.ui.util;"},{"lineNumber":3,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":4,"author":{"gitID":"hoangduong1607"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"hoangduong1607"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"hoangduong1607"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":8,"author":{"gitID":"hoangduong1607"},"content":"import seedu.recipe.logic.parser.CliSyntax;"},{"lineNumber":9,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":10,"author":{"gitID":"hoangduong1607"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"hoangduong1607"},"content":" * Contains constants and functions needed for auto-completion"},{"lineNumber":12,"author":{"gitID":"hoangduong1607"},"content":" */"},{"lineNumber":13,"author":{"gitID":"hoangduong1607"},"content":"public class AutoCompletionUtil {"},{"lineNumber":14,"author":{"gitID":"hoangduong1607"},"content":"    public static final ArrayList\u003cString\u003e APPLICATION_COMMANDS \u003d new ArrayList\u003c\u003e(Arrays.asList(\"add\", \"clear\", \"delete\","},{"lineNumber":15,"author":{"gitID":"hoangduong1607"},"content":"            \"edit\", \"exit\", \"find\", \"group\", \"help\", \"history\", \"ingredient\", \"list\", \"parse\", \"redo\", \"search\","},{"lineNumber":16,"author":{"gitID":"hoangduong1607"},"content":"            \"select\", \"share\", \"tag\", \"theme\", \"token\", \"undo\", \"upload\", \"view_group\"));"},{"lineNumber":17,"author":{"gitID":"hoangduong1607"},"content":"    public static final ArrayList\u003cString\u003e APPLICATION_KEYWORDS \u003d new ArrayList\u003c\u003e(Arrays.asList("},{"lineNumber":18,"author":{"gitID":"hoangduong1607"},"content":"            CliSyntax.PREFIX_NAME.toString(), CliSyntax.PREFIX_INGREDIENT.toString(),"},{"lineNumber":19,"author":{"gitID":"hoangduong1607"},"content":"            CliSyntax.PREFIX_INSTRUCTION.toString(), CliSyntax.PREFIX_COOKING_TIME.toString(),"},{"lineNumber":20,"author":{"gitID":"hoangduong1607"},"content":"            CliSyntax.PREFIX_PREPARATION_TIME.toString(), CliSyntax.PREFIX_CALORIES.toString(),"},{"lineNumber":21,"author":{"gitID":"hoangduong1607"},"content":"            CliSyntax.PREFIX_SERVINGS.toString(), CliSyntax.PREFIX_TAG.toString(), CliSyntax.PREFIX_URL.toString(),"},{"lineNumber":22,"author":{"gitID":"hoangduong1607"},"content":"            CliSyntax.PREFIX_IMG.toString(), CliSyntax.PREFIX_GROUP_NAME.toString(),"},{"lineNumber":23,"author":{"gitID":"hoangduong1607"},"content":"            CliSyntax.PREFIX_INDEX.toString()));"},{"lineNumber":24,"author":{"gitID":"hoangduong1607"},"content":"    public static final int MAX_SUGGESTIONS \u003d 4;"},{"lineNumber":25,"author":{"gitID":"hoangduong1607"},"content":"    public static final char LF \u003d \u0027\\n\u0027;"},{"lineNumber":26,"author":{"gitID":"hoangduong1607"},"content":"    public static final char WHITESPACE \u003d \u0027 \u0027;"},{"lineNumber":27,"author":{"gitID":"hoangduong1607"},"content":"    public static final char END_FIELD \u003d \u0027/\u0027;"},{"lineNumber":28,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":29,"author":{"gitID":"hoangduong1607"},"content":"    private static HashMap\u003cString, ArrayList\u003cString\u003e\u003e prefixesForCommand;"},{"lineNumber":30,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":31,"author":{"gitID":"hoangduong1607"},"content":"    public AutoCompletionUtil() {"},{"lineNumber":32,"author":{"gitID":"hoangduong1607"},"content":"        initializePrefixesForCommandsOffline();"},{"lineNumber":33,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":35,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"hoangduong1607"},"content":"     * Creates a list of all prefixes associated with each command"},{"lineNumber":37,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"hoangduong1607"},"content":"    private void initializePrefixesForCommandsOffline() {"},{"lineNumber":39,"author":{"gitID":"hoangduong1607"},"content":"        prefixesForCommand \u003d new HashMap\u003c\u003e();"},{"lineNumber":40,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":41,"author":{"gitID":"hoangduong1607"},"content":"        ArrayList\u003cString\u003e addPrefixes \u003d new ArrayList\u003c\u003e(Arrays.asList(CliSyntax.PREFIX_NAME.toString(),"},{"lineNumber":42,"author":{"gitID":"hoangduong1607"},"content":"                CliSyntax.PREFIX_INGREDIENT.toString(), CliSyntax.PREFIX_INSTRUCTION.toString(),"},{"lineNumber":43,"author":{"gitID":"hoangduong1607"},"content":"                CliSyntax.PREFIX_COOKING_TIME.toString(), CliSyntax.PREFIX_PREPARATION_TIME.toString(),"},{"lineNumber":44,"author":{"gitID":"hoangduong1607"},"content":"                CliSyntax.PREFIX_CALORIES.toString(), CliSyntax.PREFIX_SERVINGS.toString(),"},{"lineNumber":45,"author":{"gitID":"hoangduong1607"},"content":"                CliSyntax.PREFIX_URL.toString(), CliSyntax.PREFIX_IMG.toString(), CliSyntax.PREFIX_TAG.toString()));"},{"lineNumber":46,"author":{"gitID":"hoangduong1607"},"content":"        prefixesForCommand.put(\"add\", addPrefixes);"},{"lineNumber":47,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":48,"author":{"gitID":"hoangduong1607"},"content":"        ArrayList\u003cString\u003e editPrefixes \u003d new ArrayList\u003c\u003e(Arrays.asList(CliSyntax.PREFIX_NAME.toString(),"},{"lineNumber":49,"author":{"gitID":"hoangduong1607"},"content":"                CliSyntax.PREFIX_INGREDIENT.toString(), CliSyntax.PREFIX_INSTRUCTION.toString(),"},{"lineNumber":50,"author":{"gitID":"hoangduong1607"},"content":"                CliSyntax.PREFIX_COOKING_TIME.toString(), CliSyntax.PREFIX_PREPARATION_TIME.toString(),"},{"lineNumber":51,"author":{"gitID":"hoangduong1607"},"content":"                CliSyntax.PREFIX_CALORIES.toString(), CliSyntax.PREFIX_SERVINGS.toString(),"},{"lineNumber":52,"author":{"gitID":"hoangduong1607"},"content":"                CliSyntax.PREFIX_URL.toString(), CliSyntax.PREFIX_IMG.toString(), CliSyntax.PREFIX_TAG.toString()));"},{"lineNumber":53,"author":{"gitID":"hoangduong1607"},"content":"        prefixesForCommand.put(\"edit\", editPrefixes);"},{"lineNumber":54,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":55,"author":{"gitID":"hoangduong1607"},"content":"        ArrayList\u003cString\u003e groupPrefixes \u003d new ArrayList\u003c\u003e(Arrays.asList(CliSyntax.PREFIX_GROUP_NAME.toString(),"},{"lineNumber":56,"author":{"gitID":"hoangduong1607"},"content":"                CliSyntax.PREFIX_INDEX.toString()));"},{"lineNumber":57,"author":{"gitID":"hoangduong1607"},"content":"        prefixesForCommand.put(\"group\", groupPrefixes);"},{"lineNumber":58,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":59,"author":{"gitID":"hoangduong1607"},"content":"        for (String command : APPLICATION_COMMANDS) {"},{"lineNumber":60,"author":{"gitID":"hoangduong1607"},"content":"            if (!prefixesForCommand.containsKey(command)) {"},{"lineNumber":61,"author":{"gitID":"hoangduong1607"},"content":"                prefixesForCommand.put(command, new ArrayList\u003c\u003e());"},{"lineNumber":62,"author":{"gitID":"hoangduong1607"},"content":"            }"},{"lineNumber":63,"author":{"gitID":"hoangduong1607"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":66,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"hoangduong1607"},"content":"     * Checks whether {@code text} is a field prefix"},{"lineNumber":68,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"hoangduong1607"},"content":"    public boolean isCommandKeyWord(String text) {"},{"lineNumber":70,"author":{"gitID":"hoangduong1607"},"content":"        return prefixesForCommand.containsKey(text);"},{"lineNumber":71,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":73,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"hoangduong1607"},"content":"     * Generates auto-completed command"},{"lineNumber":75,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"hoangduong1607"},"content":"    public String getAutoCompletionText(String command) {"},{"lineNumber":77,"author":{"gitID":"hoangduong1607"},"content":"        String autoCompletionText \u003d command;"},{"lineNumber":78,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":79,"author":{"gitID":"hoangduong1607"},"content":"        for (String prefix : prefixesForCommand.get(command)) {"},{"lineNumber":80,"author":{"gitID":"hoangduong1607"},"content":"            autoCompletionText \u003d autoCompletionText + WHITESPACE + LF + prefix;"},{"lineNumber":81,"author":{"gitID":"hoangduong1607"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":83,"author":{"gitID":"hoangduong1607"},"content":"        return autoCompletionText;"},{"lineNumber":84,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":86,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"hoangduong1607"},"content":"     * Finds position of next field prefix."},{"lineNumber":88,"author":{"gitID":"hoangduong1607"},"content":"     * Returns current position of caret if no field prefix is found"},{"lineNumber":89,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"hoangduong1607"},"content":"    public int getNextFieldPosition(String inputText, int currentCaretPosition) {"},{"lineNumber":91,"author":{"gitID":"hoangduong1607"},"content":"        int nextFieldCaretPosition \u003d currentCaretPosition;"},{"lineNumber":92,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":93,"author":{"gitID":"hoangduong1607"},"content":"        for (int i \u003d 0; i \u003c inputText.length(); i++) {"},{"lineNumber":94,"author":{"gitID":"hoangduong1607"},"content":"            int wrapAroundPosition \u003d (i + currentCaretPosition) % inputText.length();"},{"lineNumber":95,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":96,"author":{"gitID":"hoangduong1607"},"content":"            if (inputText.charAt(wrapAroundPosition) \u003d\u003d END_FIELD) {"},{"lineNumber":97,"author":{"gitID":"hoangduong1607"},"content":"                TextInputProcessorUtil textInputProcessor \u003d new TextInputProcessorUtil();"},{"lineNumber":98,"author":{"gitID":"hoangduong1607"},"content":"                textInputProcessor.setContent(inputText.substring(0, wrapAroundPosition + 1));"},{"lineNumber":99,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":100,"author":{"gitID":"hoangduong1607"},"content":"                if (APPLICATION_KEYWORDS.contains(textInputProcessor.getLastWord())) {"},{"lineNumber":101,"author":{"gitID":"hoangduong1607"},"content":"                    nextFieldCaretPosition \u003d wrapAroundPosition + 1;"},{"lineNumber":102,"author":{"gitID":"hoangduong1607"},"content":"                    break;"},{"lineNumber":103,"author":{"gitID":"hoangduong1607"},"content":"                }"},{"lineNumber":104,"author":{"gitID":"hoangduong1607"},"content":"            }"},{"lineNumber":105,"author":{"gitID":"hoangduong1607"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":107,"author":{"gitID":"hoangduong1607"},"content":"        return nextFieldCaretPosition;"},{"lineNumber":108,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":110,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"hoangduong1607"},"content":"     * Finds position of previous field prefix."},{"lineNumber":112,"author":{"gitID":"hoangduong1607"},"content":"     * Returns current position of caret if no field prefix is found"},{"lineNumber":113,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"hoangduong1607"},"content":"    public int getPrevFieldPosition(String inputText, int currentCaretPosition) {"},{"lineNumber":115,"author":{"gitID":"hoangduong1607"},"content":"        int prevFieldCaretPosition \u003d currentCaretPosition;"},{"lineNumber":116,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":117,"author":{"gitID":"hoangduong1607"},"content":"        // skips current field prefix (if any)"},{"lineNumber":118,"author":{"gitID":"hoangduong1607"},"content":"        for (int i \u003d 2; i \u003c inputText.length(); i++) {"},{"lineNumber":119,"author":{"gitID":"hoangduong1607"},"content":"            int wrapAroundPosition \u003d currentCaretPosition - i;"},{"lineNumber":120,"author":{"gitID":"hoangduong1607"},"content":"            if (wrapAroundPosition \u003c 0) {"},{"lineNumber":121,"author":{"gitID":"hoangduong1607"},"content":"                wrapAroundPosition +\u003d inputText.length();"},{"lineNumber":122,"author":{"gitID":"hoangduong1607"},"content":"            }"},{"lineNumber":123,"author":{"gitID":"hoangduong1607"},"content":"            wrapAroundPosition %\u003d inputText.length();"},{"lineNumber":124,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":125,"author":{"gitID":"hoangduong1607"},"content":"            if (inputText.charAt(wrapAroundPosition) \u003d\u003d END_FIELD) {"},{"lineNumber":126,"author":{"gitID":"hoangduong1607"},"content":"                TextInputProcessorUtil textInputProcessor \u003d new TextInputProcessorUtil();"},{"lineNumber":127,"author":{"gitID":"hoangduong1607"},"content":"                textInputProcessor.setContent(inputText.substring(0, wrapAroundPosition + 1));"},{"lineNumber":128,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":129,"author":{"gitID":"hoangduong1607"},"content":"                if (APPLICATION_KEYWORDS.contains(textInputProcessor.getLastWord())) {"},{"lineNumber":130,"author":{"gitID":"hoangduong1607"},"content":"                    prevFieldCaretPosition \u003d wrapAroundPosition + 1;"},{"lineNumber":131,"author":{"gitID":"hoangduong1607"},"content":"                    break;"},{"lineNumber":132,"author":{"gitID":"hoangduong1607"},"content":"                }"},{"lineNumber":133,"author":{"gitID":"hoangduong1607"},"content":"            }"},{"lineNumber":134,"author":{"gitID":"hoangduong1607"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":136,"author":{"gitID":"hoangduong1607"},"content":"        return prevFieldCaretPosition;"},{"lineNumber":137,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":139,"author":{"gitID":"hoangduong1607"},"content":"    public static HashMap\u003cString, ArrayList\u003cString\u003e\u003e getPrefixesForCommand() {"},{"lineNumber":140,"author":{"gitID":"hoangduong1607"},"content":"        return (HashMap\u003cString, ArrayList\u003cString\u003e\u003e) prefixesForCommand.clone();"},{"lineNumber":141,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"hoangduong1607"},"content":"}"}],"authorContributionMap":{"hoangduong1607":142}},{"path":"src/main/java/seedu/recipe/ui/CommandBox.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.recipe.ui.util.KeyboardShortcutsMapping.COMMAND_SUBMISSION;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.recipe.ui.util.KeyboardShortcutsMapping.LAST_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.recipe.ui.util.KeyboardShortcutsMapping.NEW_LINE_IN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.recipe.ui.util.KeyboardShortcutsMapping.NEXT_COMMAND;"},{"lineNumber":7,"author":{"gitID":"hoangduong1607"},"content":"import static seedu.recipe.ui.util.KeyboardShortcutsMapping.NEXT_FIELD;"},{"lineNumber":8,"author":{"gitID":"hoangduong1607"},"content":"import static seedu.recipe.ui.util.KeyboardShortcutsMapping.PREV_FIELD;"},{"lineNumber":9,"author":{"gitID":"hoangduong1607"},"content":"import static seedu.recipe.ui.util.KeyboardShortcutsMapping.SHOW_SUGGESTIONS_COMMAND;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import com.dropbox.core.DbxException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.LogsCenter;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.ListElementPointer;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.Logic;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.CommandResult;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.exceptions.CommandException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.parser.exceptions.ParseException;"},{"lineNumber":27,"author":{"gitID":"hoangduong1607"},"content":"import seedu.recipe.ui.util.AutoCompletionUtil;"},{"lineNumber":28,"author":{"gitID":"hoangduong1607"},"content":"import seedu.recipe.ui.util.TextInputProcessorUtil;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":37,"author":{"gitID":"hoangduong1607"},"content":"    private static final char LF \u003d \u0027\\n\u0027;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private final Logic logic;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private ListElementPointer historySnapshot;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private TextArea commandTextArea;"},{"lineNumber":45,"author":{"gitID":"hoangduong1607"},"content":"    private SuggestionsPopUp suggestionsPopUp;"},{"lineNumber":46,"author":{"gitID":"hoangduong1607"},"content":"    private TextInputProcessorUtil textInputProcessor;"},{"lineNumber":47,"author":{"gitID":"hoangduong1607"},"content":"    private AutoCompletionUtil autoCompletionUtil;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public CommandBox(Logic logic) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box."},{"lineNumber":53,"author":{"gitID":"-"},"content":"        commandTextArea.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":55,"author":{"gitID":"hoangduong1607"},"content":"        autoCompletionUtil \u003d new AutoCompletionUtil();"},{"lineNumber":56,"author":{"gitID":"hoangduong1607"},"content":"        textInputProcessor \u003d new TextInputProcessorUtil();"},{"lineNumber":57,"author":{"gitID":"hoangduong1607"},"content":"        suggestionsPopUp \u003d new SuggestionsPopUp(this);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Handles the key press event, {@code keyEvent}."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":65,"author":{"gitID":"hoangduong1607"},"content":"        suggestionsPopUp.hideSuggestions();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        if (COMMAND_SUBMISSION.match(keyEvent)) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            submitCommand();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        } else if (LAST_COMMAND.match(keyEvent)) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            navigateToPreviousInput();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        } else if (NEXT_COMMAND.match(keyEvent)) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            navigateToNextInput();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        } else if (NEW_LINE_IN_COMMAND.match(keyEvent)) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            createNewLine();"},{"lineNumber":78,"author":{"gitID":"hoangduong1607"},"content":"        } else if (SHOW_SUGGESTIONS_COMMAND.match(keyEvent)) {"},{"lineNumber":79,"author":{"gitID":"hoangduong1607"},"content":"            keyEvent.consume();"},{"lineNumber":80,"author":{"gitID":"hoangduong1607"},"content":"            suggestionsPopUp.showSuggestions();"},{"lineNumber":81,"author":{"gitID":"hoangduong1607"},"content":"        } else if (NEXT_FIELD.match(keyEvent)) {"},{"lineNumber":82,"author":{"gitID":"hoangduong1607"},"content":"            keyEvent.consume();"},{"lineNumber":83,"author":{"gitID":"hoangduong1607"},"content":"            moveToNextField();"},{"lineNumber":84,"author":{"gitID":"hoangduong1607"},"content":"        } else if (PREV_FIELD.match(keyEvent)) {"},{"lineNumber":85,"author":{"gitID":"hoangduong1607"},"content":"            keyEvent.consume();"},{"lineNumber":86,"author":{"gitID":"hoangduong1607"},"content":"            moveToPrevField();"},{"lineNumber":87,"author":{"gitID":"hoangduong1607"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":90,"author":{"gitID":"hoangduong1607"},"content":"    //@@author hoangduong1607"},{"lineNumber":91,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":92,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"hoangduong1607"},"content":"     * Moves caret to the next field in input text."},{"lineNumber":94,"author":{"gitID":"hoangduong1607"},"content":"     * If no field is found after current position, continue from beginning of input text."},{"lineNumber":95,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"hoangduong1607"},"content":"    private void moveToNextField() {"},{"lineNumber":97,"author":{"gitID":"hoangduong1607"},"content":"        int currentCaretPosition \u003d commandTextArea.getCaretPosition();"},{"lineNumber":98,"author":{"gitID":"hoangduong1607"},"content":"        int nextFieldPosition \u003d autoCompletionUtil.getNextFieldPosition(commandTextArea.getText(),"},{"lineNumber":99,"author":{"gitID":"hoangduong1607"},"content":"                currentCaretPosition);"},{"lineNumber":100,"author":{"gitID":"hoangduong1607"},"content":"        commandTextArea.positionCaret(nextFieldPosition);"},{"lineNumber":101,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":103,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"hoangduong1607"},"content":"     * Moves caret to the next field in input text."},{"lineNumber":105,"author":{"gitID":"hoangduong1607"},"content":"     * If no field is found after current position, continue from beginning of input text."},{"lineNumber":106,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"hoangduong1607"},"content":"    private void moveToPrevField() {"},{"lineNumber":108,"author":{"gitID":"hoangduong1607"},"content":"        int currentCaretPosition \u003d commandTextArea.getCaretPosition();"},{"lineNumber":109,"author":{"gitID":"hoangduong1607"},"content":"        int prevFieldPosition \u003d autoCompletionUtil.getPrevFieldPosition(commandTextArea.getText(),"},{"lineNumber":110,"author":{"gitID":"hoangduong1607"},"content":"                currentCaretPosition);"},{"lineNumber":111,"author":{"gitID":"hoangduong1607"},"content":"        commandTextArea.positionCaret(prevFieldPosition);"},{"lineNumber":112,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":114,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"hoangduong1607"},"content":"     * Automatically fills command box with text generated by auto-completion"},{"lineNumber":116,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"hoangduong1607"},"content":"    protected void autoComplete(String text) {"},{"lineNumber":118,"author":{"gitID":"hoangduong1607"},"content":"        String prefix \u003d commandTextArea.getText().substring(0, commandTextArea.getCaretPosition());"},{"lineNumber":119,"author":{"gitID":"hoangduong1607"},"content":"        String suffix \u003d commandTextArea.getText().substring(commandTextArea.getCaretPosition());"},{"lineNumber":120,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":121,"author":{"gitID":"hoangduong1607"},"content":"        textInputProcessor.setContent(prefix);"},{"lineNumber":122,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":123,"author":{"gitID":"hoangduong1607"},"content":"        String autoCompletionText;"},{"lineNumber":124,"author":{"gitID":"hoangduong1607"},"content":"        int caretPosition;"},{"lineNumber":125,"author":{"gitID":"hoangduong1607"},"content":"        if (autoCompletionUtil.isCommandKeyWord(text)) {"},{"lineNumber":126,"author":{"gitID":"hoangduong1607"},"content":"            autoCompletionText \u003d autoCompletionUtil.getAutoCompletionText(text);"},{"lineNumber":127,"author":{"gitID":"hoangduong1607"},"content":"            caretPosition \u003d text.length() + 1;"},{"lineNumber":128,"author":{"gitID":"hoangduong1607"},"content":"        } else {"},{"lineNumber":129,"author":{"gitID":"hoangduong1607"},"content":"            autoCompletionText \u003d textInputProcessor.replaceLastWord(text);"},{"lineNumber":130,"author":{"gitID":"hoangduong1607"},"content":"            caretPosition \u003d autoCompletionText.length();"},{"lineNumber":131,"author":{"gitID":"hoangduong1607"},"content":"            autoCompletionText \u003d autoCompletionText + suffix;"},{"lineNumber":132,"author":{"gitID":"hoangduong1607"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":134,"author":{"gitID":"hoangduong1607"},"content":"        replaceText(autoCompletionText);"},{"lineNumber":135,"author":{"gitID":"hoangduong1607"},"content":"        commandTextArea.positionCaret(caretPosition);"},{"lineNumber":136,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":138,"author":{"gitID":"hoangduong1607"},"content":"    //@@author"},{"lineNumber":139,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * Updates the text field with the previous input in {@code historySnapshot},"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * if there exists a previous input in {@code historySnapshot}"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    private void navigateToPreviousInput() {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasPrevious()) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.previous());"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * Updates the text field with the next input in {@code historySnapshot},"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * if there exists a next input in {@code historySnapshot}"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    private void navigateToNextInput() {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasNext()) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.next());"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * Sets {@code CommandBox}\u0027s text field with {@code text} and"},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * positions the caret to the end of the {@code text}."},{"lineNumber":169,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":170,"author":{"gitID":"hoangduong1607"},"content":"    protected void replaceText(String text) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        commandTextArea.setText(text);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        commandTextArea.positionCaret(commandTextArea.getText().length());"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * Append a line feed character to the command area"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    private void createNewLine() {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        int caretPosition \u003d commandTextArea.getCaretPosition();"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        StringBuilder commandTextStringBuilder \u003d new StringBuilder(commandTextArea.getText());"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        commandTextStringBuilder.insert(caretPosition, LF);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        String newCommandText \u003d commandTextStringBuilder.toString();"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        commandTextArea.setText(newCommandText);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        commandTextArea.positionCaret(caretPosition + 1);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * Handles the command submission."},{"lineNumber":189,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    private void submitCommand() {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"            String commandTrimmed \u003d commandTextArea.getText().trim();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandTextArea.getText());"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":196,"author":{"gitID":"-"},"content":"            historySnapshot.next();"},{"lineNumber":197,"author":{"gitID":"-"},"content":"            // process result of the command"},{"lineNumber":198,"author":{"gitID":"-"},"content":"            if (!commandTrimmed.equals(\"parse\")) {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"                commandTextArea.setText(\"\");"},{"lineNumber":200,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":201,"author":{"gitID":"-"},"content":"            logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException | DbxException e) {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":205,"author":{"gitID":"-"},"content":"            // handle command failure"},{"lineNumber":206,"author":{"gitID":"-"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":207,"author":{"gitID":"-"},"content":"            logger.info(\"Invalid command: \" + commandTextArea.getText());"},{"lineNumber":208,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(e.getMessage()));"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * Initializes the history snapshot."},{"lineNumber":214,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    private void initHistory() {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        // the user if she tries to navigate past the most-recent end of the historySnapshot."},{"lineNumber":219,"author":{"gitID":"-"},"content":"        historySnapshot.add(\"\");"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * Sets the command box style to use the default style."},{"lineNumber":224,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    private void setStyleToDefault() {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        commandTextArea.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":231,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextArea.getStyleClass();"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":243,"author":{"gitID":"hoangduong1607"},"content":"     * Gets TextArea object in CommandBox"},{"lineNumber":244,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":245,"author":{"gitID":"hoangduong1607"},"content":"    protected TextArea getCommandTextArea() {"},{"lineNumber":246,"author":{"gitID":"hoangduong1607"},"content":"        return commandTextArea;"},{"lineNumber":247,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"hoangduong1607":81,"-":167}},{"path":"src/main/java/seedu/recipe/ui/util/FacebookHandler.java","lines":[{"lineNumber":1,"author":{"gitID":"RyanAngJY"},"content":"//@@author RyanAngJY"},{"lineNumber":2,"author":{"gitID":"RyanAngJY"},"content":"package seedu.recipe.ui.util;"},{"lineNumber":3,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":4,"author":{"gitID":"RyanAngJY"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"RyanAngJY"},"content":" * Manages Facebook related commands and execution"},{"lineNumber":6,"author":{"gitID":"RyanAngJY"},"content":" */"},{"lineNumber":7,"author":{"gitID":"RyanAngJY"},"content":"public class FacebookHandler {"},{"lineNumber":8,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":9,"author":{"gitID":"RyanAngJY"},"content":"    public static final String ACCESS_TOKEN_IDENTIFIER \u003d \"#access_token\u003d\";"},{"lineNumber":10,"author":{"gitID":"RyanAngJY"},"content":"    public static final String REDIRECT_DOMAIN \u003d \"https://www.facebook.com/\";"},{"lineNumber":11,"author":{"gitID":"RyanAngJY"},"content":"    public static final String REDIRECT_EMBEDDED \u003d \"\u0026redirect_uri\u003d\" + REDIRECT_DOMAIN;"},{"lineNumber":12,"author":{"gitID":"RyanAngJY"},"content":"    private static final String APP_ID \u003d \"177615459696708\";"},{"lineNumber":13,"author":{"gitID":"RyanAngJY"},"content":"    public static final String POST_DOMAIN \u003d \"https://www.facebook.com/dialog/feed?%20app_id\u003d\""},{"lineNumber":14,"author":{"gitID":"RyanAngJY"},"content":"            + APP_ID + \"\u0026display\u003dpopup\u0026amp;\u0026link\u003d\";"},{"lineNumber":15,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":16,"author":{"gitID":"RyanAngJY"},"content":"    private static final String ACCESS_RIGHTS \u003d \"user_about_me\";"},{"lineNumber":17,"author":{"gitID":"RyanAngJY"},"content":"    private static final String AUTH_URL \u003d \"https://graph.facebook.com/oauth/authorize?type\u003duser_agent\u0026client_id\u003d\""},{"lineNumber":18,"author":{"gitID":"RyanAngJY"},"content":"            + APP_ID + \"\u0026redirect_uri\u003d\" + REDIRECT_DOMAIN + \"\u0026scope\u003d\" + ACCESS_RIGHTS;"},{"lineNumber":19,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":20,"author":{"gitID":"RyanAngJY"},"content":"    private static final String ACCESS_TOKEN_REGEX \u003d REDIRECT_DOMAIN + \"#access_token\u003d(.+)\u0026.*\";"},{"lineNumber":21,"author":{"gitID":"RyanAngJY"},"content":"    private static final String EXTRACT_PORTION \u003d \"$1\";"},{"lineNumber":22,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":23,"author":{"gitID":"RyanAngJY"},"content":"    private static String accessToken \u003d null;"},{"lineNumber":24,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":25,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"RyanAngJY"},"content":"     * Returns true if FacebookHandler already has an access token."},{"lineNumber":27,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"RyanAngJY"},"content":"    public static boolean hasAccessToken() {"},{"lineNumber":29,"author":{"gitID":"RyanAngJY"},"content":"        if (accessToken \u003d\u003d null) {"},{"lineNumber":30,"author":{"gitID":"RyanAngJY"},"content":"            return false;"},{"lineNumber":31,"author":{"gitID":"RyanAngJY"},"content":"        } else {"},{"lineNumber":32,"author":{"gitID":"RyanAngJY"},"content":"            return true;"},{"lineNumber":33,"author":{"gitID":"RyanAngJY"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":36,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"RyanAngJY"},"content":"     * Checks if an access token is embedded in the url."},{"lineNumber":38,"author":{"gitID":"RyanAngJY"},"content":"     * If access token is found, set the accessToken variable to be the found access token."},{"lineNumber":39,"author":{"gitID":"RyanAngJY"},"content":"     *"},{"lineNumber":40,"author":{"gitID":"RyanAngJY"},"content":"     * @return Returns true when access token is found."},{"lineNumber":41,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"RyanAngJY"},"content":"    public static boolean checkAndSetAccessToken(String url) {"},{"lineNumber":43,"author":{"gitID":"RyanAngJY"},"content":"        if (url.contains(ACCESS_TOKEN_IDENTIFIER)) {"},{"lineNumber":44,"author":{"gitID":"RyanAngJY"},"content":"            String token \u003d extractAccessToken(url);"},{"lineNumber":45,"author":{"gitID":"RyanAngJY"},"content":"            setAccessToken(token);"},{"lineNumber":46,"author":{"gitID":"RyanAngJY"},"content":"            return true;"},{"lineNumber":47,"author":{"gitID":"RyanAngJY"},"content":"        } else {"},{"lineNumber":48,"author":{"gitID":"RyanAngJY"},"content":"            return false;"},{"lineNumber":49,"author":{"gitID":"RyanAngJY"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":52,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"RyanAngJY"},"content":"     * Extracts access token from the given URL."},{"lineNumber":54,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"RyanAngJY"},"content":"    public static String extractAccessToken(String url) {"},{"lineNumber":56,"author":{"gitID":"RyanAngJY"},"content":"        assert (url.contains(ACCESS_TOKEN_IDENTIFIER));"},{"lineNumber":57,"author":{"gitID":"RyanAngJY"},"content":"        return url.replaceAll(ACCESS_TOKEN_REGEX, EXTRACT_PORTION);"},{"lineNumber":58,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":60,"author":{"gitID":"RyanAngJY"},"content":"    public static void setAccessToken(String token) {"},{"lineNumber":61,"author":{"gitID":"RyanAngJY"},"content":"        accessToken \u003d token;"},{"lineNumber":62,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":64,"author":{"gitID":"RyanAngJY"},"content":"    public static String getPostDomain() {"},{"lineNumber":65,"author":{"gitID":"RyanAngJY"},"content":"        return POST_DOMAIN;"},{"lineNumber":66,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":68,"author":{"gitID":"RyanAngJY"},"content":"    public static String getRedirectEmbedded() {"},{"lineNumber":69,"author":{"gitID":"RyanAngJY"},"content":"        return REDIRECT_EMBEDDED;"},{"lineNumber":70,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"RyanAngJY"},"content":"}"},{"lineNumber":72,"author":{"gitID":"RyanAngJY"},"content":"//@@author"}],"authorContributionMap":{"RyanAngJY":72}},{"path":"src/main/java/seedu/recipe/ui/util/CloudStorageUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"nicholasangcx"},"content":"//@@author nicholasangcx"},{"lineNumber":2,"author":{"gitID":"nicholasangcx"},"content":"package seedu.recipe.ui.util;"},{"lineNumber":3,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":4,"author":{"gitID":"nicholasangcx"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":6,"author":{"gitID":"nicholasangcx"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitID":"nicholasangcx"},"content":"import java.io.FileInputStream;"},{"lineNumber":8,"author":{"gitID":"nicholasangcx"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"nicholasangcx"},"content":"import java.io.InputStream;"},{"lineNumber":10,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":11,"author":{"gitID":"nicholasangcx"},"content":"import com.dropbox.core.DbxAppInfo;"},{"lineNumber":12,"author":{"gitID":"nicholasangcx"},"content":"import com.dropbox.core.DbxAuthFinish;"},{"lineNumber":13,"author":{"gitID":"nicholasangcx"},"content":"import com.dropbox.core.DbxException;"},{"lineNumber":14,"author":{"gitID":"nicholasangcx"},"content":"import com.dropbox.core.DbxRequestConfig;"},{"lineNumber":15,"author":{"gitID":"nicholasangcx"},"content":"import com.dropbox.core.DbxWebAuth;"},{"lineNumber":16,"author":{"gitID":"nicholasangcx"},"content":"import com.dropbox.core.v2.DbxClientV2;"},{"lineNumber":17,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":18,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.commons.util.FileUtil;"},{"lineNumber":19,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.logic.commands.UploadCommand;"},{"lineNumber":20,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":21,"author":{"gitID":"nicholasangcx"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"nicholasangcx"},"content":" * Contains data and methods needed for cloud storage"},{"lineNumber":23,"author":{"gitID":"nicholasangcx"},"content":" * (uploading to dropbox) purposes."},{"lineNumber":24,"author":{"gitID":"nicholasangcx"},"content":" */"},{"lineNumber":25,"author":{"gitID":"nicholasangcx"},"content":"public class CloudStorageUtil {"},{"lineNumber":26,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":27,"author":{"gitID":"nicholasangcx"},"content":"    private static final String RECIPE_DATA_FOLDER \u003d FileUtil.getPath(\"data/\");"},{"lineNumber":28,"author":{"gitID":"nicholasangcx"},"content":"    private static final File RECIPE_BOOK_FILE \u003d new File(RECIPE_DATA_FOLDER + \"recipebook.xml\");"},{"lineNumber":29,"author":{"gitID":"nicholasangcx"},"content":"    private static final String CLIENT_IDENTIFIER \u003d \"dropbox/recirecipe\";"},{"lineNumber":30,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":31,"author":{"gitID":"nicholasangcx"},"content":"    private static final String APP_KEY \u003d \"0kj3cb9w27d66n8\";"},{"lineNumber":32,"author":{"gitID":"nicholasangcx"},"content":"    private static final String APP_SECRET \u003d \"7stnncfsyvgim60\";"},{"lineNumber":33,"author":{"gitID":"nicholasangcx"},"content":"    private static final String AUTHORIZATION_DOMAIN \u003d \"https://www.dropbox.com/1/oauth2/authorize?\";"},{"lineNumber":34,"author":{"gitID":"nicholasangcx"},"content":"    private static final String AUTHORIZATION_URL \u003d AUTHORIZATION_DOMAIN + \"response_type\u003dcode\u0026client_id\u003d\""},{"lineNumber":35,"author":{"gitID":"nicholasangcx"},"content":"                                                    + APP_KEY;"},{"lineNumber":36,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":37,"author":{"gitID":"nicholasangcx"},"content":"    private static final DbxRequestConfig config \u003d DbxRequestConfig.newBuilder(CLIENT_IDENTIFIER).build();"},{"lineNumber":38,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":39,"author":{"gitID":"nicholasangcx"},"content":"    private static String accessToken \u003d null;"},{"lineNumber":40,"author":{"gitID":"nicholasangcx"},"content":"    private static String uploadFilename \u003d null;"},{"lineNumber":41,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":42,"author":{"gitID":"nicholasangcx"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"nicholasangcx"},"content":"     * Returns true if CloudStorageUtil already has an access token."},{"lineNumber":44,"author":{"gitID":"nicholasangcx"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"nicholasangcx"},"content":"    public static boolean hasAccessToken() {"},{"lineNumber":46,"author":{"gitID":"nicholasangcx"},"content":"        if (accessToken \u003d\u003d null) {"},{"lineNumber":47,"author":{"gitID":"nicholasangcx"},"content":"            return false;"},{"lineNumber":48,"author":{"gitID":"nicholasangcx"},"content":"        } else {"},{"lineNumber":49,"author":{"gitID":"nicholasangcx"},"content":"            return true;"},{"lineNumber":50,"author":{"gitID":"nicholasangcx"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":53,"author":{"gitID":"nicholasangcx"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"nicholasangcx"},"content":"     * Creates a Dropbox client with the user\u0027s {@code getAccessToken()}"},{"lineNumber":55,"author":{"gitID":"nicholasangcx"},"content":"     * and uploads file specified by {@code RECIPE_BOOK_FILE} to their Dropbox account"},{"lineNumber":56,"author":{"gitID":"nicholasangcx"},"content":"     *"},{"lineNumber":57,"author":{"gitID":"nicholasangcx"},"content":"     * @throws DbxException"},{"lineNumber":58,"author":{"gitID":"nicholasangcx"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"nicholasangcx"},"content":"    public static void upload() throws DbxException {"},{"lineNumber":60,"author":{"gitID":"nicholasangcx"},"content":"        // Ensures access token has been obtained"},{"lineNumber":61,"author":{"gitID":"nicholasangcx"},"content":"        requireNonNull(CloudStorageUtil.getAccessToken());"},{"lineNumber":62,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":63,"author":{"gitID":"nicholasangcx"},"content":"        // Create Dropbox client"},{"lineNumber":64,"author":{"gitID":"nicholasangcx"},"content":"        DbxClientV2 client \u003d new DbxClientV2(config, CloudStorageUtil.getAccessToken());"},{"lineNumber":65,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":66,"author":{"gitID":"nicholasangcx"},"content":"        // Upload \"recipebook.xml\" to Dropbox"},{"lineNumber":67,"author":{"gitID":"nicholasangcx"},"content":"        try (InputStream in \u003d new FileInputStream(RECIPE_BOOK_FILE)) {"},{"lineNumber":68,"author":{"gitID":"nicholasangcx"},"content":"            client.files().uploadBuilder(\"/\" + uploadFilename)"},{"lineNumber":69,"author":{"gitID":"nicholasangcx"},"content":"                    .withAutorename(true)"},{"lineNumber":70,"author":{"gitID":"nicholasangcx"},"content":"                    .uploadAndFinish(in);"},{"lineNumber":71,"author":{"gitID":"nicholasangcx"},"content":"            System.out.println(\"File has been uploaded\");"},{"lineNumber":72,"author":{"gitID":"nicholasangcx"},"content":"        } catch (IOException | DbxException e) {"},{"lineNumber":73,"author":{"gitID":"nicholasangcx"},"content":"            throw new DbxException(UploadCommand.MESSAGE_FAILURE + \" Make sure you have an Internet connection.\");"},{"lineNumber":74,"author":{"gitID":"nicholasangcx"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":76,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":78,"author":{"gitID":"nicholasangcx"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"nicholasangcx"},"content":"     * Takes in the authorization code"},{"lineNumber":80,"author":{"gitID":"nicholasangcx"},"content":"     * @param code given by Dropbox after user has allowed access"},{"lineNumber":81,"author":{"gitID":"nicholasangcx"},"content":"     * and converts it into the access token that can be used to upload files"},{"lineNumber":82,"author":{"gitID":"nicholasangcx"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"nicholasangcx"},"content":"    public static void processAuthorizationCode(String code) throws DbxException {"},{"lineNumber":84,"author":{"gitID":"nicholasangcx"},"content":"        // Converts authorization code to access token"},{"lineNumber":85,"author":{"gitID":"nicholasangcx"},"content":"        DbxAppInfo appInfo \u003d new DbxAppInfo(APP_KEY, APP_SECRET);"},{"lineNumber":86,"author":{"gitID":"nicholasangcx"},"content":"        DbxWebAuth webAuth \u003d new DbxWebAuth(config, appInfo);"},{"lineNumber":87,"author":{"gitID":"nicholasangcx"},"content":"        try {"},{"lineNumber":88,"author":{"gitID":"nicholasangcx"},"content":"            DbxAuthFinish authFinish \u003d webAuth.finishFromCode(code);"},{"lineNumber":89,"author":{"gitID":"nicholasangcx"},"content":"            accessToken \u003d authFinish.getAccessToken();"},{"lineNumber":90,"author":{"gitID":"nicholasangcx"},"content":"        } catch (DbxException e) {"},{"lineNumber":91,"author":{"gitID":"nicholasangcx"},"content":"            throw new DbxException(UploadCommand.MESSAGE_FAILURE + \" Make sure you have an Internet connection\""},{"lineNumber":92,"author":{"gitID":"nicholasangcx"},"content":"                    + \" and have entered a  valid authorization code\");"},{"lineNumber":93,"author":{"gitID":"nicholasangcx"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"nicholasangcx"},"content":"        upload();"},{"lineNumber":95,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":97,"author":{"gitID":"nicholasangcx"},"content":"    public static void setAccessToken(String token) {"},{"lineNumber":98,"author":{"gitID":"nicholasangcx"},"content":"        accessToken \u003d token;"},{"lineNumber":99,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":101,"author":{"gitID":"nicholasangcx"},"content":"    private static String getAccessToken() {"},{"lineNumber":102,"author":{"gitID":"nicholasangcx"},"content":"        return accessToken;"},{"lineNumber":103,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":105,"author":{"gitID":"nicholasangcx"},"content":"    public static void setUploadFilename(String uploadFilename) {"},{"lineNumber":106,"author":{"gitID":"nicholasangcx"},"content":"        CloudStorageUtil.uploadFilename \u003d uploadFilename;"},{"lineNumber":107,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":109,"author":{"gitID":"nicholasangcx"},"content":"    public static String getAuthorizationUrl() {"},{"lineNumber":110,"author":{"gitID":"nicholasangcx"},"content":"        return AUTHORIZATION_URL;"},{"lineNumber":111,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"nicholasangcx"},"content":"}"},{"lineNumber":113,"author":{"gitID":"nicholasangcx"},"content":"//@@author"}],"authorContributionMap":{"nicholasangcx":113}},{"path":"src/main/java/seedu/recipe/ui/util/UiUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"RyanAngJY"},"content":"//@@author RyanAngJY"},{"lineNumber":2,"author":{"gitID":"RyanAngJY"},"content":"package seedu.recipe.ui.util;"},{"lineNumber":3,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":4,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.ui.CssSyntax.CSS_PROPERTY_BACKGROUND_COLOR;"},{"lineNumber":5,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.ui.CssSyntax.CSS_PROPERTY_TEXT_COLOR;"},{"lineNumber":6,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":7,"author":{"gitID":"RyanAngJY"},"content":"import java.awt.Toolkit;"},{"lineNumber":8,"author":{"gitID":"RyanAngJY"},"content":"import java.awt.datatransfer.Clipboard;"},{"lineNumber":9,"author":{"gitID":"RyanAngJY"},"content":"import java.awt.datatransfer.StringSelection;"},{"lineNumber":10,"author":{"gitID":"RyanAngJY"},"content":"import java.util.regex.Pattern;"},{"lineNumber":11,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":12,"author":{"gitID":"RyanAngJY"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":14,"author":{"gitID":"RyanAngJY"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"RyanAngJY"},"content":" * Contains utility methods for UI design."},{"lineNumber":16,"author":{"gitID":"RyanAngJY"},"content":" */"},{"lineNumber":17,"author":{"gitID":"RyanAngJY"},"content":"public class UiUtil {"},{"lineNumber":18,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":19,"author":{"gitID":"RyanAngJY"},"content":"    public static final String HEX_REGEX \u003d \"[A-Fa-f0-9]*\";"},{"lineNumber":20,"author":{"gitID":"RyanAngJY"},"content":"    public static final String HEX_COLOR_BLACK \u003d \"#000000\";"},{"lineNumber":21,"author":{"gitID":"RyanAngJY"},"content":"    public static final String HEX_COLOR_WHITE \u003d \"#FFFFFF\";"},{"lineNumber":22,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":23,"author":{"gitID":"RyanAngJY"},"content":"    public static final String HEX_COLOR_REGEX \u003d \"#([A-Fa-f0-9]{6})\";"},{"lineNumber":24,"author":{"gitID":"RyanAngJY"},"content":"    private static final char HEX_COLOR_PREFIX \u003d \u0027#\u0027;"},{"lineNumber":25,"author":{"gitID":"RyanAngJY"},"content":"    private static final String HEX_COLOR_BUFFER \u003d \"000000\";"},{"lineNumber":26,"author":{"gitID":"RyanAngJY"},"content":"    private static final int HEX_COLOR_LENGTH \u003d 6;"},{"lineNumber":27,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":28,"author":{"gitID":"RyanAngJY"},"content":"    private static final int NEUTRAL_COLOR_DENSITY \u003d 384;"},{"lineNumber":29,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":30,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":31,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"RyanAngJY"},"content":"     * Returns a hexadecimal string representation of an integer."},{"lineNumber":33,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"RyanAngJY"},"content":"    public static String convertIntToHexadecimalString(int integer) {"},{"lineNumber":35,"author":{"gitID":"RyanAngJY"},"content":"        return Integer.toHexString(integer);"},{"lineNumber":36,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":38,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"RyanAngJY"},"content":"     * Returns a valid CSS hexadecimal color code that is as similar"},{"lineNumber":40,"author":{"gitID":"RyanAngJY"},"content":"     * as possible to the given string (eg. #f23b21)."},{"lineNumber":41,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"RyanAngJY"},"content":"    public static String convertStringToValidColorCode(String string) {"},{"lineNumber":43,"author":{"gitID":"RyanAngJY"},"content":"        string \u003d removeAllWhitespaceInString(string);"},{"lineNumber":44,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":45,"author":{"gitID":"RyanAngJY"},"content":"        // HEX_COLOR_BUFFER ensures that the returned value has at least 6 hexadecimal digits"},{"lineNumber":46,"author":{"gitID":"RyanAngJY"},"content":"        String extendedHexString \u003d string.concat(HEX_COLOR_BUFFER);"},{"lineNumber":47,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":48,"author":{"gitID":"RyanAngJY"},"content":"        if (Pattern.matches(HEX_REGEX, string)) {"},{"lineNumber":49,"author":{"gitID":"RyanAngJY"},"content":"            return HEX_COLOR_PREFIX + extendedHexString.substring(0, HEX_COLOR_LENGTH);"},{"lineNumber":50,"author":{"gitID":"RyanAngJY"},"content":"        } else {"},{"lineNumber":51,"author":{"gitID":"RyanAngJY"},"content":"            return HEX_COLOR_WHITE;"},{"lineNumber":52,"author":{"gitID":"RyanAngJY"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":55,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"RyanAngJY"},"content":"     * Sets the color of a label given a particular background color"},{"lineNumber":57,"author":{"gitID":"RyanAngJY"},"content":"     *"},{"lineNumber":58,"author":{"gitID":"RyanAngJY"},"content":"     * @@param backgroundColor Preferably a valid CSS hexadecimal color code (eg. #f23b21)"},{"lineNumber":59,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"RyanAngJY"},"content":"    public static void setLabelColor(Label label, String backgroundColor) {"},{"lineNumber":61,"author":{"gitID":"RyanAngJY"},"content":"        backgroundColor \u003d removeAllWhitespaceInString(backgroundColor);"},{"lineNumber":62,"author":{"gitID":"RyanAngJY"},"content":"        backgroundColor \u003d isValidHexColorCode(backgroundColor) ? backgroundColor : HEX_COLOR_WHITE;"},{"lineNumber":63,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":64,"author":{"gitID":"RyanAngJY"},"content":"        String textColor \u003d getMatchingColorFromGivenColor(backgroundColor);"},{"lineNumber":65,"author":{"gitID":"RyanAngJY"},"content":"        label.setStyle(CSS_PROPERTY_BACKGROUND_COLOR + backgroundColor + \"; \""},{"lineNumber":66,"author":{"gitID":"RyanAngJY"},"content":"                + CSS_PROPERTY_TEXT_COLOR + textColor + \";\");"},{"lineNumber":67,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":69,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"RyanAngJY"},"content":"     * Sets the text color of a label"},{"lineNumber":71,"author":{"gitID":"RyanAngJY"},"content":"     *"},{"lineNumber":72,"author":{"gitID":"RyanAngJY"},"content":"     * @@param backgroundColor Preferably a valid CSS hexadecimal color code (eg. #f23b21)"},{"lineNumber":73,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"RyanAngJY"},"content":"    public static String getMatchingColorFromGivenColor(String backgroundColor) {"},{"lineNumber":75,"author":{"gitID":"RyanAngJY"},"content":"        backgroundColor \u003d removeAllWhitespaceInString(backgroundColor);"},{"lineNumber":76,"author":{"gitID":"RyanAngJY"},"content":"        backgroundColor \u003d isValidHexColorCode(backgroundColor) ? backgroundColor : HEX_COLOR_WHITE;"},{"lineNumber":77,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":78,"author":{"gitID":"RyanAngJY"},"content":"        if (isColorDark(backgroundColor)) {"},{"lineNumber":79,"author":{"gitID":"RyanAngJY"},"content":"            return HEX_COLOR_WHITE;"},{"lineNumber":80,"author":{"gitID":"RyanAngJY"},"content":"        } else {"},{"lineNumber":81,"author":{"gitID":"RyanAngJY"},"content":"            return HEX_COLOR_BLACK;"},{"lineNumber":82,"author":{"gitID":"RyanAngJY"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":85,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"RyanAngJY"},"content":"     * Returns true if a given color is dark"},{"lineNumber":87,"author":{"gitID":"RyanAngJY"},"content":"     *"},{"lineNumber":88,"author":{"gitID":"RyanAngJY"},"content":"     * @@param color Preferably a valid CSS hexadecimal color code (eg. #f23b21)"},{"lineNumber":89,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"RyanAngJY"},"content":"    public static boolean isColorDark(String color) {"},{"lineNumber":91,"author":{"gitID":"RyanAngJY"},"content":"        color \u003d removeAllWhitespaceInString(color);"},{"lineNumber":92,"author":{"gitID":"RyanAngJY"},"content":"        color \u003d isValidHexColorCode(color) ? color : HEX_COLOR_WHITE;"},{"lineNumber":93,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":94,"author":{"gitID":"RyanAngJY"},"content":"        int lightnessCount \u003d 0;"},{"lineNumber":95,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":96,"author":{"gitID":"RyanAngJY"},"content":"        for (int i \u003d 1; i \u003c 6; i \u003d i + 2) {"},{"lineNumber":97,"author":{"gitID":"RyanAngJY"},"content":"            String colorDensity \u003d color.substring(i, i + 2);"},{"lineNumber":98,"author":{"gitID":"RyanAngJY"},"content":"            lightnessCount +\u003d Integer.parseInt(colorDensity, 16);"},{"lineNumber":99,"author":{"gitID":"RyanAngJY"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":101,"author":{"gitID":"RyanAngJY"},"content":"        if (lightnessCount \u003e\u003d NEUTRAL_COLOR_DENSITY) {"},{"lineNumber":102,"author":{"gitID":"RyanAngJY"},"content":"            return false;"},{"lineNumber":103,"author":{"gitID":"RyanAngJY"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":105,"author":{"gitID":"RyanAngJY"},"content":"        return true;"},{"lineNumber":106,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":108,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"RyanAngJY"},"content":"     * Returns true if a String is a valid CSS hexadecimal color code (eg. #f23b21)"},{"lineNumber":110,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"RyanAngJY"},"content":"    public static boolean isValidHexColorCode (String string) {"},{"lineNumber":112,"author":{"gitID":"RyanAngJY"},"content":"        return Pattern.matches(HEX_COLOR_REGEX, string);"},{"lineNumber":113,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":115,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"RyanAngJY"},"content":"     * Returns the given string without whitespaces"},{"lineNumber":117,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"RyanAngJY"},"content":"    public static String removeAllWhitespaceInString(String string) {"},{"lineNumber":119,"author":{"gitID":"RyanAngJY"},"content":"        return string.replaceAll(\"\\\\s\", \"\");"},{"lineNumber":120,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":122,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"RyanAngJY"},"content":"     * Copies a given string to the clipboard"},{"lineNumber":124,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"RyanAngJY"},"content":"    public static void copyToClipboard(String string) {"},{"lineNumber":126,"author":{"gitID":"RyanAngJY"},"content":"        Toolkit toolkit \u003d Toolkit.getDefaultToolkit();"},{"lineNumber":127,"author":{"gitID":"RyanAngJY"},"content":"        Clipboard clipboard \u003d toolkit.getSystemClipboard();"},{"lineNumber":128,"author":{"gitID":"RyanAngJY"},"content":"        StringSelection stringSelection \u003d new StringSelection(string);"},{"lineNumber":129,"author":{"gitID":"RyanAngJY"},"content":"        clipboard.setContents(stringSelection, null);"},{"lineNumber":130,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"RyanAngJY"},"content":"}"},{"lineNumber":132,"author":{"gitID":"RyanAngJY"},"content":"//@@author"}],"authorContributionMap":{"RyanAngJY":132}},{"path":"src/main/java/seedu/recipe/ui/BrowserPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.awt.Desktop;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.net.URI;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.net.URISyntaxException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.event.Event;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.recipe.MainApp;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.LogsCenter;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.events.ui.InternetSearchRequestEvent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.events.ui.RecipePanelSelectionChangedEvent;"},{"lineNumber":23,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.commons.events.ui.ShareRecipeEvent;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.events.ui.UploadRecipesEvent;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Recipe;"},{"lineNumber":26,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.model.recipe.Url;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.recipe.model.util.HtmlFormatter;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.recipe.ui.parser.WebParser;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.recipe.ui.parser.WebParserHandler;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.recipe.ui.util.CloudStorageUtil;"},{"lineNumber":31,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.ui.util.FacebookHandler;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.recipe.ui.util.UiUtil;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitID":"-"},"content":" * The Browser Panel of the App."},{"lineNumber":36,"author":{"gitID":"-"},"content":" */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"public class BrowserPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PAGE_GIRL \u003d \"defaultgirl.html\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PAGE_LIGHT \u003d \"defaultlight.html\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String SEARCH_PAGE_URL \u003d"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            \"https://se-edu.github.io/addressbook-level4/DummySearchPage.html?name\u003d\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"BrowserPanel.fxml\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private static final Index FIRST_INDEX \u003d Index.fromOneBased(1);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"RyanAngJY"},"content":"    private Recipe recipeToShare;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private WebParserHandler webParserHandler;"},{"lineNumber":48,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private WebView browser;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public BrowserPanel(boolean isGirlTheme) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":58,"author":{"gitID":"-"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        initializeWebParserHandler();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        loadDefaultPage(isGirlTheme);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":66,"author":{"gitID":"RyanAngJY"},"content":"    public WebView getBrowser() {"},{"lineNumber":67,"author":{"gitID":"RyanAngJY"},"content":"        return browser;"},{"lineNumber":68,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void loadPage(String url) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e browser.getEngine().load(url));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Loads a website on the user\u0027s external default browser based on the"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * @param url provided, if it is valid."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void loadPageExternalBrowser(String url) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        Desktop d \u003d Desktop.getDesktop();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            d.browse(new URI(url));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        } catch (IOException | URISyntaxException e) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"URL wrong format exception \" + e.getMessage());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    private void loadRecipePage(Recipe recipe) {"},{"lineNumber":89,"author":{"gitID":"RyanAngJY"},"content":"        loadPage(recipe.getUrl().toString());"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"RyanAngJY"},"content":"    //@@author RyanAngJY"},{"lineNumber":93,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":94,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"RyanAngJY"},"content":"     * Loads the text recipe onto the browser"},{"lineNumber":96,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"RyanAngJY"},"content":"    private void loadLocalRecipe(Recipe recipe) {"},{"lineNumber":98,"author":{"gitID":"RyanAngJY"},"content":"        browser.getEngine().loadContent(HtmlFormatter.getHtmlFormat(recipe));"},{"lineNumber":99,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":101,"author":{"gitID":"kokonguyen191"},"content":"    //@@author kokonguyen191"},{"lineNumber":102,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":103,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"kokonguyen191"},"content":"     * Loads a default HTML file with a background that matches the general theme."},{"lineNumber":105,"author":{"gitID":"kokonguyen191"},"content":"     *"},{"lineNumber":106,"author":{"gitID":"kokonguyen191"},"content":"     * @param isGirlTheme true if the app is using girl theme"},{"lineNumber":107,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"kokonguyen191"},"content":"    public void loadDefaultPage(boolean isGirlTheme) {"},{"lineNumber":109,"author":{"gitID":"kokonguyen191"},"content":"        if (!isLoaded()) {"},{"lineNumber":110,"author":{"gitID":"kokonguyen191"},"content":"            URL defaultPage;"},{"lineNumber":111,"author":{"gitID":"kokonguyen191"},"content":"            if (isGirlTheme) {"},{"lineNumber":112,"author":{"gitID":"kokonguyen191"},"content":"                defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE_GIRL);"},{"lineNumber":113,"author":{"gitID":"kokonguyen191"},"content":"            } else {"},{"lineNumber":114,"author":{"gitID":"kokonguyen191"},"content":"                defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE_LIGHT);"},{"lineNumber":115,"author":{"gitID":"kokonguyen191"},"content":"            }"},{"lineNumber":116,"author":{"gitID":"kokonguyen191"},"content":"            loadPage(defaultPage.toExternalForm());"},{"lineNumber":117,"author":{"gitID":"kokonguyen191"},"content":"            logger.info(\"BrowserPanel is empty, changed theme and reloaded BrowserPanel.\");"},{"lineNumber":118,"author":{"gitID":"kokonguyen191"},"content":"        } else {"},{"lineNumber":119,"author":{"gitID":"kokonguyen191"},"content":"            logger.info(\"BrowserPanel is not empty, changed theme without reloading BrowserPanel.\");"},{"lineNumber":120,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":123,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"kokonguyen191"},"content":"     * Returns true if BrowserPanel is loaded with a page that is neither null nor default nor a non-URL display"},{"lineNumber":125,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"kokonguyen191"},"content":"    private boolean isLoaded() {"},{"lineNumber":127,"author":{"gitID":"kokonguyen191"},"content":"        URL lightTheme \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE_LIGHT);"},{"lineNumber":128,"author":{"gitID":"kokonguyen191"},"content":"        URL girlTheme \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE_GIRL);"},{"lineNumber":129,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":130,"author":{"gitID":"kokonguyen191"},"content":"        String loadedUrlString \u003d browser.getEngine().getLocation();"},{"lineNumber":131,"author":{"gitID":"kokonguyen191"},"content":"        if (loadedUrlString \u003d\u003d null) {"},{"lineNumber":132,"author":{"gitID":"kokonguyen191"},"content":"            return false;"},{"lineNumber":133,"author":{"gitID":"kokonguyen191"},"content":"        } else {"},{"lineNumber":134,"author":{"gitID":"kokonguyen191"},"content":"            URL loadedUrl \u003d null;"},{"lineNumber":135,"author":{"gitID":"kokonguyen191"},"content":"            try {"},{"lineNumber":136,"author":{"gitID":"kokonguyen191"},"content":"                loadedUrl \u003d new URL(loadedUrlString);"},{"lineNumber":137,"author":{"gitID":"kokonguyen191"},"content":"            } catch (MalformedURLException murle) {"},{"lineNumber":138,"author":{"gitID":"kokonguyen191"},"content":"                logger.info(\"BrowserPanel is loaded with a custom recipe display.\");"},{"lineNumber":139,"author":{"gitID":"kokonguyen191"},"content":"                return true;"},{"lineNumber":140,"author":{"gitID":"kokonguyen191"},"content":"            }"},{"lineNumber":141,"author":{"gitID":"kokonguyen191"},"content":"            boolean isLightThemeLoaded \u003d loadedUrl.equals(lightTheme);"},{"lineNumber":142,"author":{"gitID":"kokonguyen191"},"content":"            boolean isGirlThemeLoaded \u003d loadedUrl.equals(girlTheme);"},{"lineNumber":143,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":144,"author":{"gitID":"kokonguyen191"},"content":"            boolean isBlankPageLoaded \u003d isLightThemeLoaded || isGirlThemeLoaded;"},{"lineNumber":145,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":146,"author":{"gitID":"kokonguyen191"},"content":"            return !isBlankPageLoaded;"},{"lineNumber":147,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"kokonguyen191"},"content":"    //@@author"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * Frees resources allocated to the browser."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    public void freeResources() {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        browser \u003d null;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    private void handleRecipePanelSelectionChangedEvent(RecipePanelSelectionChangedEvent event) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":161,"author":{"gitID":"RyanAngJY"},"content":"        Recipe recipe \u003d event.getNewSelection().recipe;"},{"lineNumber":162,"author":{"gitID":"RyanAngJY"},"content":"        if (recipe.getUrl().toString().equals(Url.NULL_URL_REFERENCE)) {"},{"lineNumber":163,"author":{"gitID":"RyanAngJY"},"content":"            loadLocalRecipe(recipe);"},{"lineNumber":164,"author":{"gitID":"RyanAngJY"},"content":"        } else {"},{"lineNumber":165,"author":{"gitID":"RyanAngJY"},"content":"            loadRecipePage(recipe);"},{"lineNumber":166,"author":{"gitID":"RyanAngJY"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":169,"author":{"gitID":"kokonguyen191"},"content":"    //@@author kokonguyen191"},{"lineNumber":170,"author":{"gitID":"kokonguyen191"},"content":"    @Subscribe"},{"lineNumber":171,"author":{"gitID":"kokonguyen191"},"content":"    private void handleInternetSearchRequestEvent(InternetSearchRequestEvent event) {"},{"lineNumber":172,"author":{"gitID":"kokonguyen191"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":173,"author":{"gitID":"kokonguyen191"},"content":"        if (event.getQueryNumberOfResults() !\u003d 0) {"},{"lineNumber":174,"author":{"gitID":"kokonguyen191"},"content":"            loadPage(event.getRecipeQueryUrl());"},{"lineNumber":175,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":178,"author":{"gitID":"kokonguyen191"},"content":"    private void initializeWebParserHandler() {"},{"lineNumber":179,"author":{"gitID":"kokonguyen191"},"content":"        webParserHandler \u003d new WebParserHandler(browser);"},{"lineNumber":180,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":182,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":183,"author":{"gitID":"kokonguyen191"},"content":"     * Parses the BrowserPanel, gets an AddCommand string."},{"lineNumber":184,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":185,"author":{"gitID":"kokonguyen191"},"content":"    public String parseRecipe() {"},{"lineNumber":186,"author":{"gitID":"kokonguyen191"},"content":"        WebParser webParser \u003d webParserHandler.getWebParser();"},{"lineNumber":187,"author":{"gitID":"kokonguyen191"},"content":"        if (webParser !\u003d null) {"},{"lineNumber":188,"author":{"gitID":"kokonguyen191"},"content":"            return webParser.parseRecipe();"},{"lineNumber":189,"author":{"gitID":"kokonguyen191"},"content":"        } else {"},{"lineNumber":190,"author":{"gitID":"kokonguyen191"},"content":"            return null;"},{"lineNumber":191,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":194,"author":{"gitID":"RyanAngJY"},"content":"    //@@author RyanAngJY"},{"lineNumber":195,"author":{"gitID":"RyanAngJY"},"content":"    @Subscribe"},{"lineNumber":196,"author":{"gitID":"RyanAngJY"},"content":"    private void handleShareRecipeEvent(ShareRecipeEvent event) {"},{"lineNumber":197,"author":{"gitID":"RyanAngJY"},"content":"        recipeToShare \u003d event.getTargetRecipe();"},{"lineNumber":198,"author":{"gitID":"RyanAngJY"},"content":"        String urlToShare \u003d recipeToShare.getUrl().toString();"},{"lineNumber":199,"author":{"gitID":"RyanAngJY"},"content":"        UiUtil.copyToClipboard(recipeToShare.getTextFormattedRecipe());"},{"lineNumber":200,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":201,"author":{"gitID":"RyanAngJY"},"content":"        if (!urlToShare.equals(Url.NULL_URL_REFERENCE)) {"},{"lineNumber":202,"author":{"gitID":"RyanAngJY"},"content":"            loadPage(FacebookHandler.getPostDomain() + recipeToShare.getUrl().toString()"},{"lineNumber":203,"author":{"gitID":"RyanAngJY"},"content":"                    + FacebookHandler.getRedirectEmbedded());"},{"lineNumber":204,"author":{"gitID":"RyanAngJY"},"content":"        } else {"},{"lineNumber":205,"author":{"gitID":"RyanAngJY"},"content":"            loadPage(FacebookHandler.REDIRECT_DOMAIN);"},{"lineNumber":206,"author":{"gitID":"RyanAngJY"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":209,"author":{"gitID":"nicholasangcx"},"content":"    //@@author nicholasangcx"},{"lineNumber":210,"author":{"gitID":"nicholasangcx"},"content":"    @Subscribe"},{"lineNumber":211,"author":{"gitID":"nicholasangcx"},"content":"    private void handleUploadRecipesEvent(UploadRecipesEvent event) {"},{"lineNumber":212,"author":{"gitID":"nicholasangcx"},"content":"        loadPageExternalBrowser(CloudStorageUtil.getAuthorizationUrl());"},{"lineNumber":213,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"nicholasangcx"},"content":"    //@@author"},{"lineNumber":215,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kokonguyen191":74,"RyanAngJY":43,"-":92,"nicholasangcx":6}},{"path":"src/main/java/seedu/recipe/ui/RecipeCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"RyanAngJY"},"content":"import java.io.FileInputStream;"},{"lineNumber":4,"author":{"gitID":"RyanAngJY"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"RyanAngJY"},"content":"import javafx.scene.image.Image;"},{"lineNumber":9,"author":{"gitID":"RyanAngJY"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Recipe;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.recipe.ui.util.UiUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Recipe}."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class RecipeCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"RecipeListCard.fxml\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on RecipeBook level 4\u003c/a\u003e"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public final Recipe recipe;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Label preparationTime;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private Label servings;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private Label calories;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private Label ingredient;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitID":"RyanAngJY"},"content":"    private Label url;"},{"lineNumber":49,"author":{"gitID":"RyanAngJY"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":51,"author":{"gitID":"RyanAngJY"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitID":"RyanAngJY"},"content":"    private ImageView imageView;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public RecipeCard(Recipe recipe, int displayedIndex) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        this.recipe \u003d recipe;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        name.setText(recipe.getName().fullName);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        preparationTime.setText(recipe.getPreparationTime().value);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        servings.setText(recipe.getServings().value);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        calories.setText(recipe.getCalories().value);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        ingredient.setText(recipe.getIngredient().value);"},{"lineNumber":63,"author":{"gitID":"RyanAngJY"},"content":"        url.setText(recipe.getUrl().value);"},{"lineNumber":64,"author":{"gitID":"RyanAngJY"},"content":"        setImageView(imageView);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        initTags(recipe);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"RyanAngJY"},"content":"    //@@author RyanAngJY"},{"lineNumber":69,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"RyanAngJY"},"content":"     * Sets the image for {@code imageView}."},{"lineNumber":71,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"RyanAngJY"},"content":"    private void setImageView(ImageView imageView) {"},{"lineNumber":73,"author":{"gitID":"RyanAngJY"},"content":"        if (recipe.isNullImage()) {"},{"lineNumber":74,"author":{"gitID":"RyanAngJY"},"content":"            return;"},{"lineNumber":75,"author":{"gitID":"RyanAngJY"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"RyanAngJY"},"content":"        try {"},{"lineNumber":77,"author":{"gitID":"RyanAngJY"},"content":"            FileInputStream input \u003d new FileInputStream(recipe.getImage().toString());"},{"lineNumber":78,"author":{"gitID":"RyanAngJY"},"content":"            Image image \u003d new Image(input);"},{"lineNumber":79,"author":{"gitID":"RyanAngJY"},"content":"            imageView.setImage(image);"},{"lineNumber":80,"author":{"gitID":"RyanAngJY"},"content":"        } catch (IOException exception) {"},{"lineNumber":81,"author":{"gitID":"RyanAngJY"},"content":"            System.out.println(\"File not found\");"},{"lineNumber":82,"author":{"gitID":"RyanAngJY"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":85,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"RyanAngJY"},"content":"     * Returns the color style for {@code tagName}\u0027s label."},{"lineNumber":87,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"RyanAngJY"},"content":"    private String getTagColorStyleFor(String tagName) {"},{"lineNumber":89,"author":{"gitID":"RyanAngJY"},"content":"        // the hash code of the tag name is used to generate a random color for each tag,"},{"lineNumber":90,"author":{"gitID":"RyanAngJY"},"content":"        // color remains consistent between different runs of the program since hash code does not change"},{"lineNumber":91,"author":{"gitID":"RyanAngJY"},"content":"        String hexadecimalHashCode \u003d UiUtil.convertIntToHexadecimalString(tagName.hashCode());"},{"lineNumber":92,"author":{"gitID":"RyanAngJY"},"content":"        String hexadecimalColorCode \u003d UiUtil.convertStringToValidColorCode(hexadecimalHashCode);"},{"lineNumber":93,"author":{"gitID":"RyanAngJY"},"content":"        return hexadecimalColorCode;"},{"lineNumber":94,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":96,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"RyanAngJY"},"content":"     * Creates the tag labels for {@code recipe}."},{"lineNumber":98,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"RyanAngJY"},"content":"    private void initTags(Recipe recipe) {"},{"lineNumber":100,"author":{"gitID":"RyanAngJY"},"content":"        recipe.getTags().forEach(tag -\u003e {"},{"lineNumber":101,"author":{"gitID":"RyanAngJY"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":102,"author":{"gitID":"RyanAngJY"},"content":"            String labelBackgroundColor \u003d getTagColorStyleFor(tag.tagName);"},{"lineNumber":103,"author":{"gitID":"RyanAngJY"},"content":"            UiUtil.setLabelColor(tagLabel, labelBackgroundColor);"},{"lineNumber":104,"author":{"gitID":"RyanAngJY"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":105,"author":{"gitID":"RyanAngJY"},"content":"        });"},{"lineNumber":106,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"RyanAngJY"},"content":"    //@@author"},{"lineNumber":108,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        if (!(other instanceof RecipeCard)) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        RecipeCard card \u003d (RecipeCard) other;"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                \u0026\u0026 recipe.equals(card.recipe);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":52,"-":74}},{"path":"src/test/java/seedu/recipe/testutil/WikiaRecipes.java","lines":[{"lineNumber":1,"author":{"gitID":"kokonguyen191"},"content":"//@@author kokonguyen191"},{"lineNumber":2,"author":{"gitID":"kokonguyen191"},"content":"package seedu.recipe.testutil;"},{"lineNumber":3,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":4,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.logic.commands.AddCommand.COMMAND_WORD;"},{"lineNumber":5,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_IMG;"},{"lineNumber":6,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT;"},{"lineNumber":7,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INSTRUCTION;"},{"lineNumber":8,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_URL;"},{"lineNumber":11,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":12,"author":{"gitID":"kokonguyen191"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"kokonguyen191"},"content":"import java.util.stream.Collectors;"},{"lineNumber":14,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":15,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.model.recipe.Recipe;"},{"lineNumber":16,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":17,"author":{"gitID":"kokonguyen191"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"kokonguyen191"},"content":" * A utility class containing a list of {@code Recipe} objects parsed from Wikia to be used in tests."},{"lineNumber":19,"author":{"gitID":"kokonguyen191"},"content":" */"},{"lineNumber":20,"author":{"gitID":"kokonguyen191"},"content":"public class WikiaRecipes {"},{"lineNumber":21,"author":{"gitID":"kokonguyen191"},"content":"    public static final String LF \u003d \"\\n\";"},{"lineNumber":22,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":23,"author":{"gitID":"kokonguyen191"},"content":"    public static final String WIKIA_NOT_RECIPE \u003d \"http://recipes.wikia.com/d/f?sort\u003dlatest\";"},{"lineNumber":24,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":25,"author":{"gitID":"kokonguyen191"},"content":"    public static final String CHICKEN_NAME \u003d \"Hainanese Chicken Rice\";"},{"lineNumber":26,"author":{"gitID":"kokonguyen191"},"content":"    public static final String CHICKEN_INGREDIENT \u003d \"chicken, salt, spring onion, pandan leaves, \""},{"lineNumber":27,"author":{"gitID":"kokonguyen191"},"content":"            + \"ginger, ginger, garlic, cinnamon, cloves, star anise, chicken broth, pandan leaves, salt,\""},{"lineNumber":28,"author":{"gitID":"kokonguyen191"},"content":"            + \" light soy sauce, sesame oil, cucumber, tomatoes, coriander, lettuce, pineapple, fresh \""},{"lineNumber":29,"author":{"gitID":"kokonguyen191"},"content":"            + \"chillies, ginger, garlic, vinegar, fish sauce, sugar, sweet soy sauce\";"},{"lineNumber":30,"author":{"gitID":"kokonguyen191"},"content":"    public static final String CHICKEN_INSTRUCTION \u003d \"Boil water with spring Onion, ginger and pandan leaves, \""},{"lineNumber":31,"author":{"gitID":"kokonguyen191"},"content":"            + \"put in Chicken and cook till done,\""},{"lineNumber":32,"author":{"gitID":"kokonguyen191"},"content":"            + \" do not over cook. briefly dip in cold water and set aside to cool. Keep broth heated.\\n\""},{"lineNumber":33,"author":{"gitID":"kokonguyen191"},"content":"            + \"Wash rice and drain. Finely shred ginger and garlic, fry in oil with cloves, cinammon and \""},{"lineNumber":34,"author":{"gitID":"kokonguyen191"},"content":"            + \"star anise till fragrant, add in rice and fry for several minutes. Transfer into rice \""},{"lineNumber":35,"author":{"gitID":"kokonguyen191"},"content":"            + \"cooker, add chicken broth, pinch of salt, pandan leaves and start cooking.\\n\""},{"lineNumber":36,"author":{"gitID":"kokonguyen191"},"content":"            + \"Put all chili sauce ingredient in a mixer and grind till fine.\\n\""},{"lineNumber":37,"author":{"gitID":"kokonguyen191"},"content":"            + \"Slice and arrange tomatoes and cucumbers on a big plate, cut Chicken into small pieces and p\""},{"lineNumber":38,"author":{"gitID":"kokonguyen191"},"content":"            + \"ut on top. Splash some light soy sauce and sesame oil over, throw a bunch of coriander \""},{"lineNumber":39,"author":{"gitID":"kokonguyen191"},"content":"            + \"on top.\\nNext, Put broth in a bowl with lettuce, get ready chili sauce and sweet \""},{"lineNumber":40,"author":{"gitID":"kokonguyen191"},"content":"            + \"soy sauce. #Serve rice on a plate with spoon and folk.\";"},{"lineNumber":41,"author":{"gitID":"kokonguyen191"},"content":"    public static final String WIKIA_RECIPE_URL_CHICKEN \u003d \"http://recipes.wikia.com/wiki/Hainanese_Chicken_Rice\";"},{"lineNumber":42,"author":{"gitID":"kokonguyen191"},"content":"    public static final String CHICKEN_RICE_IMAGE_URL \u003d \"https://vignette.wikia.nocookie.net/recipes/images/d/d3\""},{"lineNumber":43,"author":{"gitID":"kokonguyen191"},"content":"            + \"/Chickenrice2.jpg/revision/latest/scale-to-width-down/180?cb\u003d20080516004325\";"},{"lineNumber":44,"author":{"gitID":"kokonguyen191"},"content":"    public static final String MOBILE_WIKIA_RECIPE_URL_CHICKEN \u003d"},{"lineNumber":45,"author":{"gitID":"kokonguyen191"},"content":"            \"http://recipes.wikia.com/wiki/Hainanese_Chicken_Rice?useskin\u003dwikiamobile\";"},{"lineNumber":46,"author":{"gitID":"kokonguyen191"},"content":"    public static final String MOBILE_CHICKEN_RICE_IMAGE_URL \u003d \"https://vignette.wikia.nocookie.net/recipes/images/d/d3\""},{"lineNumber":47,"author":{"gitID":"kokonguyen191"},"content":"            + \"/Chickenrice2.jpg/revision/latest/scale-to-width-down/340?cb\u003d20080516004325\";"},{"lineNumber":48,"author":{"gitID":"kokonguyen191"},"content":"    public static final String[] CHICKEN_TAGS \u003d {\"SingaporeanMeat\", \"ScrewPineLeaf\","},{"lineNumber":49,"author":{"gitID":"kokonguyen191"},"content":"        \"Chicken\", \"Cucumber\", \"Lettuce\", \"MainDishPoultry\", \"Pineapple\", \"Rice\"};"},{"lineNumber":50,"author":{"gitID":"kokonguyen191"},"content":"    public static final Recipe HAINANESE_CHICKEN_RICE \u003d new RecipeBuilder()"},{"lineNumber":51,"author":{"gitID":"kokonguyen191"},"content":"            .withName(CHICKEN_NAME)"},{"lineNumber":52,"author":{"gitID":"kokonguyen191"},"content":"            .withIngredient(CHICKEN_INGREDIENT)"},{"lineNumber":53,"author":{"gitID":"kokonguyen191"},"content":"            .withInstruction(CHICKEN_INSTRUCTION)"},{"lineNumber":54,"author":{"gitID":"kokonguyen191"},"content":"            .withCookingTime(\"-\")"},{"lineNumber":55,"author":{"gitID":"kokonguyen191"},"content":"            .withPreparationTime(\"-\")"},{"lineNumber":56,"author":{"gitID":"kokonguyen191"},"content":"            .withCalories(\"-\")"},{"lineNumber":57,"author":{"gitID":"kokonguyen191"},"content":"            .withServings(\"-\")"},{"lineNumber":58,"author":{"gitID":"kokonguyen191"},"content":"            .withUrl(WIKIA_RECIPE_URL_CHICKEN)"},{"lineNumber":59,"author":{"gitID":"kokonguyen191"},"content":"            .withImage(\"-\")"},{"lineNumber":60,"author":{"gitID":"kokonguyen191"},"content":"            .withTags(CHICKEN_TAGS).build();"},{"lineNumber":61,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":62,"author":{"gitID":"kokonguyen191"},"content":"    public static final String UGANDAN_NAME \u003d \"Ugandan Chicken Stew\";"},{"lineNumber":63,"author":{"gitID":"kokonguyen191"},"content":"    public static final String UGANDAN_INGREDIENT \u003d \"chicken, oil, onion, tomatoes, potatoes, salt, pepper\";"},{"lineNumber":64,"author":{"gitID":"kokonguyen191"},"content":"    public static final String UGANDAN_INSTRUCTION \u003d \"In a heavy stewing pan, sauté chicken pieces \""},{"lineNumber":65,"author":{"gitID":"kokonguyen191"},"content":"            + \"in hot oil until nicely browned.\\n\""},{"lineNumber":66,"author":{"gitID":"kokonguyen191"},"content":"            + \"Add onion, tomatoes, potatoes, salt, pepper, and enough water to just cover.\\n\""},{"lineNumber":67,"author":{"gitID":"kokonguyen191"},"content":"            + \"Cover pan and simmer until chicken is cooked, 45 minutes to 1 hour.\";"},{"lineNumber":68,"author":{"gitID":"kokonguyen191"},"content":"    public static final String WIKIA_RECIPE_URL_UGANDAN \u003d \"http://recipes.wikia.com/wiki/Ugandan_Chicken_Stew\";"},{"lineNumber":69,"author":{"gitID":"kokonguyen191"},"content":"    public static final String MOBILE_WIKIA_RECIPE_URL_UGANDAN \u003d"},{"lineNumber":70,"author":{"gitID":"kokonguyen191"},"content":"            \"http://recipes.wikia.com/wiki/Ugandan_Chicken_Stew?useskin\u003dwikiamobile\";"},{"lineNumber":71,"author":{"gitID":"kokonguyen191"},"content":"    public static final String[] UGANDAN_TAGS \u003d {\"UgandanMeat\", \"Potato\", \"MainDishPoultry\", \"Tomato\", \"Stew\","},{"lineNumber":72,"author":{"gitID":"kokonguyen191"},"content":"        \"Chicken\", \"RecipesThatNeedPhotos\"};"},{"lineNumber":73,"author":{"gitID":"kokonguyen191"},"content":"    public static final Recipe UGANDAN_CHICKEN_STEW \u003d new RecipeBuilder()"},{"lineNumber":74,"author":{"gitID":"kokonguyen191"},"content":"            .withName(UGANDAN_NAME)"},{"lineNumber":75,"author":{"gitID":"kokonguyen191"},"content":"            .withIngredient(UGANDAN_INGREDIENT)"},{"lineNumber":76,"author":{"gitID":"kokonguyen191"},"content":"            .withInstruction(UGANDAN_INSTRUCTION)"},{"lineNumber":77,"author":{"gitID":"kokonguyen191"},"content":"            .withCookingTime(\"-\")"},{"lineNumber":78,"author":{"gitID":"kokonguyen191"},"content":"            .withPreparationTime(\"-\")"},{"lineNumber":79,"author":{"gitID":"kokonguyen191"},"content":"            .withCalories(\"-\")"},{"lineNumber":80,"author":{"gitID":"kokonguyen191"},"content":"            .withServings(\"-\")"},{"lineNumber":81,"author":{"gitID":"kokonguyen191"},"content":"            .withUrl(MOBILE_WIKIA_RECIPE_URL_UGANDAN)"},{"lineNumber":82,"author":{"gitID":"kokonguyen191"},"content":"            .withImage(\"-\")"},{"lineNumber":83,"author":{"gitID":"kokonguyen191"},"content":"            .withTags(UGANDAN_TAGS).build();"},{"lineNumber":84,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":85,"author":{"gitID":"kokonguyen191"},"content":"    public static final String WIKIA_RECIPE_URL_DEVIL \u003d \"http://recipes.wikia.com/wiki/Devil_Chicken\";"},{"lineNumber":86,"author":{"gitID":"kokonguyen191"},"content":"    public static final String DEVIL_INSTRUCTION \u003d \"Clean and cut the Chicken into medium sized pieces. \""},{"lineNumber":87,"author":{"gitID":"kokonguyen191"},"content":"            + \"Grind all the ingredients together into a fine thick gravy. \""},{"lineNumber":88,"author":{"gitID":"kokonguyen191"},"content":"            + \"Apply this on the Chicken pieces and let it marinate for an hour. \""},{"lineNumber":89,"author":{"gitID":"kokonguyen191"},"content":"            + \"Afterwards cook the Chicken pieces along with the gravy till \""},{"lineNumber":90,"author":{"gitID":"kokonguyen191"},"content":"            + \"it gets cooked and it becomes dry. \""},{"lineNumber":91,"author":{"gitID":"kokonguyen191"},"content":"            + \"Take the Chicken pieces and cool it and then deep-fry the same. \""},{"lineNumber":92,"author":{"gitID":"kokonguyen191"},"content":"            + \"If you want the Chicken pieces to be crisp, roll over the Chicken pieces \""},{"lineNumber":93,"author":{"gitID":"kokonguyen191"},"content":"            + \"in corn flour before frying. This can be served as a starter or \""},{"lineNumber":94,"author":{"gitID":"kokonguyen191"},"content":"            + \"as an accompaniment in cocktail parties.\";"},{"lineNumber":95,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":96,"author":{"gitID":"kokonguyen191"},"content":"    public static final String WIKIA_RECIPE_URL_BEEF \u003d"},{"lineNumber":97,"author":{"gitID":"kokonguyen191"},"content":"            \"http://recipes.wikia.com/wiki/Beef_Tenderloin_with_Madeira_Sauce\";"},{"lineNumber":98,"author":{"gitID":"kokonguyen191"},"content":"    public static final String BEEF_INGREDIENT \u003d \"1 cup of garlic, 2 cups of mustard, 3 tbs chopped rosemary, 1 cup \""},{"lineNumber":99,"author":{"gitID":"kokonguyen191"},"content":"            + \"chopped thyme, 2 tsp garlic, 2 tsp vegtebale oil, 4 tsp salt, 1 tsp pepper, 3 cups of water, 4 \""},{"lineNumber":100,"author":{"gitID":"kokonguyen191"},"content":"            + \"tbs butter, 2 cups of red wine, 1 cup of garlic, 2 1/2 cups of corn, 4 cup of water, 2 tomatoes,\""},{"lineNumber":101,"author":{"gitID":"kokonguyen191"},"content":"            + \" 1 tsp chopped thyme, 1/2 tsp each sea salt and pepper\";"},{"lineNumber":102,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":103,"author":{"gitID":"kokonguyen191"},"content":"    public static final String WIKIA_CHICKEN_ADD_COMMAND \u003d"},{"lineNumber":104,"author":{"gitID":"kokonguyen191"},"content":"            COMMAND_WORD + LF + PREFIX_NAME + CHICKEN_NAME + LF + PREFIX_INGREDIENT + CHICKEN_INGREDIENT + LF"},{"lineNumber":105,"author":{"gitID":"kokonguyen191"},"content":"                    + PREFIX_INSTRUCTION + CHICKEN_INSTRUCTION + LF + PREFIX_IMG + CHICKEN_RICE_IMAGE_URL + LF"},{"lineNumber":106,"author":{"gitID":"kokonguyen191"},"content":"                    + PREFIX_URL + WIKIA_RECIPE_URL_CHICKEN + LF + joinTags(CHICKEN_TAGS);"},{"lineNumber":107,"author":{"gitID":"kokonguyen191"},"content":"    public static final String WIKIA_UGANDAN_ADD_COMMAND \u003d"},{"lineNumber":108,"author":{"gitID":"kokonguyen191"},"content":"            COMMAND_WORD + LF + PREFIX_NAME + UGANDAN_NAME + LF + PREFIX_INGREDIENT + UGANDAN_INGREDIENT + LF"},{"lineNumber":109,"author":{"gitID":"kokonguyen191"},"content":"                    + PREFIX_INSTRUCTION + UGANDAN_INSTRUCTION + LF + PREFIX_URL + WIKIA_RECIPE_URL_UGANDAN"},{"lineNumber":110,"author":{"gitID":"kokonguyen191"},"content":"                    + LF + joinTags(UGANDAN_TAGS);"},{"lineNumber":111,"author":{"gitID":"kokonguyen191"},"content":"    public static final String MOBILE_WIKIA_CHICKEN_ADD_COMMAND \u003d"},{"lineNumber":112,"author":{"gitID":"kokonguyen191"},"content":"            COMMAND_WORD + LF + PREFIX_NAME + CHICKEN_NAME + LF + PREFIX_INGREDIENT + CHICKEN_INGREDIENT + LF"},{"lineNumber":113,"author":{"gitID":"kokonguyen191"},"content":"                    + PREFIX_INSTRUCTION + CHICKEN_INSTRUCTION + LF + PREFIX_IMG + MOBILE_CHICKEN_RICE_IMAGE_URL + LF"},{"lineNumber":114,"author":{"gitID":"kokonguyen191"},"content":"                    + PREFIX_URL + MOBILE_WIKIA_RECIPE_URL_CHICKEN + LF + joinTags(CHICKEN_TAGS);"},{"lineNumber":115,"author":{"gitID":"kokonguyen191"},"content":"    public static final String MOBILE_WIKIA_UGANDAN_ADD_COMMAND \u003d"},{"lineNumber":116,"author":{"gitID":"kokonguyen191"},"content":"            COMMAND_WORD + LF + PREFIX_NAME + UGANDAN_NAME + LF + PREFIX_INGREDIENT + UGANDAN_INGREDIENT + LF"},{"lineNumber":117,"author":{"gitID":"kokonguyen191"},"content":"                    + PREFIX_INSTRUCTION + UGANDAN_INSTRUCTION + LF + PREFIX_URL + MOBILE_WIKIA_RECIPE_URL_UGANDAN"},{"lineNumber":118,"author":{"gitID":"kokonguyen191"},"content":"                    + LF + joinTags(UGANDAN_TAGS);"},{"lineNumber":119,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":120,"author":{"gitID":"kokonguyen191"},"content":"    private WikiaRecipes() {"},{"lineNumber":121,"author":{"gitID":"kokonguyen191"},"content":"    } // prevents instantiation"},{"lineNumber":122,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":123,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"kokonguyen191"},"content":"     * Takes in an array of tag strings and returns a string that can be passed to an add or edit command."},{"lineNumber":125,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"kokonguyen191"},"content":"    private static String joinTags(String[] tags) {"},{"lineNumber":127,"author":{"gitID":"kokonguyen191"},"content":"        return Arrays.stream(tags)"},{"lineNumber":128,"author":{"gitID":"kokonguyen191"},"content":"                .map(tag -\u003e PREFIX_TAG + tag + \" \")"},{"lineNumber":129,"author":{"gitID":"kokonguyen191"},"content":"                .collect(Collectors.joining());"},{"lineNumber":130,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"kokonguyen191"},"content":"}"}],"authorContributionMap":{"kokonguyen191":131}},{"path":"src/main/java/seedu/recipe/ui/util/TextInputProcessorUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"hoangduong1607"},"content":"//@@author hoangduong1607"},{"lineNumber":2,"author":{"gitID":"hoangduong1607"},"content":"package seedu.recipe.ui.util;"},{"lineNumber":3,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":4,"author":{"gitID":"hoangduong1607"},"content":"import javafx.scene.text.Font;"},{"lineNumber":5,"author":{"gitID":"hoangduong1607"},"content":"import javafx.scene.text.Text;"},{"lineNumber":6,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":7,"author":{"gitID":"hoangduong1607"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"hoangduong1607"},"content":" * Provides basic functions for processing text input"},{"lineNumber":9,"author":{"gitID":"hoangduong1607"},"content":" */"},{"lineNumber":10,"author":{"gitID":"hoangduong1607"},"content":"public class TextInputProcessorUtil {"},{"lineNumber":11,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":12,"author":{"gitID":"hoangduong1607"},"content":"    private static final String EMPTY_STRING \u003d \"\";"},{"lineNumber":13,"author":{"gitID":"hoangduong1607"},"content":"    private static final char LF \u003d \u0027\\n\u0027;"},{"lineNumber":14,"author":{"gitID":"hoangduong1607"},"content":"    private static final char SPACE \u003d \u0027 \u0027;"},{"lineNumber":15,"author":{"gitID":"hoangduong1607"},"content":"    private static final int LINE_HEIGHT \u003d 26;"},{"lineNumber":16,"author":{"gitID":"hoangduong1607"},"content":"    private static final int MAX_LENGTH \u003d 60;"},{"lineNumber":17,"author":{"gitID":"hoangduong1607"},"content":"    private static final int MAX_LINES \u003d 9;"},{"lineNumber":18,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":19,"author":{"gitID":"hoangduong1607"},"content":"    private String content;"},{"lineNumber":20,"author":{"gitID":"hoangduong1607"},"content":"    private Font font;"},{"lineNumber":21,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":22,"author":{"gitID":"hoangduong1607"},"content":"    public TextInputProcessorUtil() {"},{"lineNumber":23,"author":{"gitID":"hoangduong1607"},"content":"        content \u003d new String();"},{"lineNumber":24,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":26,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"hoangduong1607"},"content":"     * Gets X-coordinate of caret"},{"lineNumber":28,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"hoangduong1607"},"content":"    public double getCaretPositionX() {"},{"lineNumber":30,"author":{"gitID":"hoangduong1607"},"content":"        Text lastLine \u003d new Text(getTextWithoutLastWord(getLastLine()));"},{"lineNumber":31,"author":{"gitID":"hoangduong1607"},"content":"        lastLine.setFont(font);"},{"lineNumber":32,"author":{"gitID":"hoangduong1607"},"content":"        return lastLine.prefWidth(-1);"},{"lineNumber":33,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":35,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"hoangduong1607"},"content":"     * Gets Y-coordinate of caret"},{"lineNumber":37,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"hoangduong1607"},"content":"    public double getCaretPositionY() {"},{"lineNumber":39,"author":{"gitID":"hoangduong1607"},"content":"        return getRow() * LINE_HEIGHT;"},{"lineNumber":40,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":42,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"hoangduong1607"},"content":"     * Checks whether text is too long in"},{"lineNumber":44,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"hoangduong1607"},"content":"    public boolean isTextTooLong() {"},{"lineNumber":46,"author":{"gitID":"hoangduong1607"},"content":"        return (content.length() \u003e\u003d MAX_LENGTH || getRow() \u003e\u003d MAX_LINES);"},{"lineNumber":47,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":49,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"hoangduong1607"},"content":"     * Gets row index (1-indexed) of caret"},{"lineNumber":51,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"hoangduong1607"},"content":"    public int getRow() {"},{"lineNumber":53,"author":{"gitID":"hoangduong1607"},"content":"        int row \u003d 1;"},{"lineNumber":54,"author":{"gitID":"hoangduong1607"},"content":"        for (int i \u003d 0; i \u003c content.length(); i++) {"},{"lineNumber":55,"author":{"gitID":"hoangduong1607"},"content":"            if (content.charAt(i) \u003d\u003d LF) {"},{"lineNumber":56,"author":{"gitID":"hoangduong1607"},"content":"                row++;"},{"lineNumber":57,"author":{"gitID":"hoangduong1607"},"content":"            }"},{"lineNumber":58,"author":{"gitID":"hoangduong1607"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"hoangduong1607"},"content":"        return row;"},{"lineNumber":60,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":62,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"hoangduong1607"},"content":"     * Gets last word (character(s) between the last whitespace and end of string) from {@code content}"},{"lineNumber":64,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"hoangduong1607"},"content":"    public String getLastWord() {"},{"lineNumber":66,"author":{"gitID":"hoangduong1607"},"content":"        String lastWord \u003d EMPTY_STRING;"},{"lineNumber":67,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":68,"author":{"gitID":"hoangduong1607"},"content":"        for (int i \u003d content.length() - 1; i \u003e\u003d 0; i--) {"},{"lineNumber":69,"author":{"gitID":"hoangduong1607"},"content":"            if (isWordSeparator(content.charAt(i))) {"},{"lineNumber":70,"author":{"gitID":"hoangduong1607"},"content":"                break;"},{"lineNumber":71,"author":{"gitID":"hoangduong1607"},"content":"            }"},{"lineNumber":72,"author":{"gitID":"hoangduong1607"},"content":"            lastWord \u003d content.charAt(i) + lastWord;"},{"lineNumber":73,"author":{"gitID":"hoangduong1607"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":75,"author":{"gitID":"hoangduong1607"},"content":"        return lastWord;"},{"lineNumber":76,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":78,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"hoangduong1607"},"content":"     * Gets first word from {@code content}"},{"lineNumber":80,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"hoangduong1607"},"content":"    public String getFirstWord() {"},{"lineNumber":82,"author":{"gitID":"hoangduong1607"},"content":"        String firstWord \u003d EMPTY_STRING;"},{"lineNumber":83,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":84,"author":{"gitID":"hoangduong1607"},"content":"        String trimmedContent \u003d content.trim();"},{"lineNumber":85,"author":{"gitID":"hoangduong1607"},"content":"        for (int i \u003d 0; i \u003c trimmedContent.length(); i++) {"},{"lineNumber":86,"author":{"gitID":"hoangduong1607"},"content":"            if (isWordSeparator(trimmedContent.charAt(i))) {"},{"lineNumber":87,"author":{"gitID":"hoangduong1607"},"content":"                break;"},{"lineNumber":88,"author":{"gitID":"hoangduong1607"},"content":"            }"},{"lineNumber":89,"author":{"gitID":"hoangduong1607"},"content":"            firstWord \u003d firstWord + trimmedContent.charAt(i);"},{"lineNumber":90,"author":{"gitID":"hoangduong1607"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":92,"author":{"gitID":"hoangduong1607"},"content":"        return firstWord;"},{"lineNumber":93,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":95,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"hoangduong1607"},"content":"     * Checks whether {@code inputChar} is a word separator"},{"lineNumber":97,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"hoangduong1607"},"content":"    private boolean isWordSeparator(char inputChar) {"},{"lineNumber":99,"author":{"gitID":"hoangduong1607"},"content":"        return (inputChar \u003d\u003d LF || inputChar \u003d\u003d SPACE);"},{"lineNumber":100,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":102,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"hoangduong1607"},"content":"     * Gets last line from {@code content}"},{"lineNumber":104,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"hoangduong1607"},"content":"    public String getLastLine() {"},{"lineNumber":106,"author":{"gitID":"hoangduong1607"},"content":"        String lastLine \u003d new String(\"\");"},{"lineNumber":107,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":108,"author":{"gitID":"hoangduong1607"},"content":"        for (int i \u003d content.length() - 1; i \u003e\u003d 0; i--) {"},{"lineNumber":109,"author":{"gitID":"hoangduong1607"},"content":"            if (isLineSeparator(content.charAt(i))) {"},{"lineNumber":110,"author":{"gitID":"hoangduong1607"},"content":"                break;"},{"lineNumber":111,"author":{"gitID":"hoangduong1607"},"content":"            }"},{"lineNumber":112,"author":{"gitID":"hoangduong1607"},"content":"            lastLine \u003d content.charAt(i) + lastLine;"},{"lineNumber":113,"author":{"gitID":"hoangduong1607"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":115,"author":{"gitID":"hoangduong1607"},"content":"        return lastLine;"},{"lineNumber":116,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":118,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"hoangduong1607"},"content":"     * Checks whether {@code inputChar} is a line separator"},{"lineNumber":120,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"hoangduong1607"},"content":"    private boolean isLineSeparator(char inputChar) {"},{"lineNumber":122,"author":{"gitID":"hoangduong1607"},"content":"        return (inputChar \u003d\u003d LF);"},{"lineNumber":123,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":125,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"hoangduong1607"},"content":"     * Gets the resulting text after replacing last word of {@code content} with {@code newLastWord}"},{"lineNumber":127,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"hoangduong1607"},"content":"    public String replaceLastWord(String newLastWord) {"},{"lineNumber":129,"author":{"gitID":"hoangduong1607"},"content":"        return getTextWithoutLastWord() + newLastWord;"},{"lineNumber":130,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":132,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"hoangduong1607"},"content":"     * Gets the resulting text after removing last word from {@code content}"},{"lineNumber":134,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"hoangduong1607"},"content":"    public String getTextWithoutLastWord() {"},{"lineNumber":136,"author":{"gitID":"hoangduong1607"},"content":"        int newLength \u003d content.length() - getLastWord().length();"},{"lineNumber":137,"author":{"gitID":"hoangduong1607"},"content":"        return content.substring(0, newLength);"},{"lineNumber":138,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":140,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"hoangduong1607"},"content":"     * Gets the resulting text after removing last word from {@code inputText}"},{"lineNumber":142,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"hoangduong1607"},"content":"    public String getTextWithoutLastWord(String inputText) {"},{"lineNumber":144,"author":{"gitID":"hoangduong1607"},"content":"        int newLength \u003d inputText.length() - getLastWord().length();"},{"lineNumber":145,"author":{"gitID":"hoangduong1607"},"content":"        return inputText.substring(0, newLength);"},{"lineNumber":146,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":148,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"hoangduong1607"},"content":"     * Sets content in TextInputProcessor to {@code inputText}"},{"lineNumber":150,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"hoangduong1607"},"content":"    public void setContent(String inputText) {"},{"lineNumber":152,"author":{"gitID":"hoangduong1607"},"content":"        content \u003d inputText;"},{"lineNumber":153,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":155,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"hoangduong1607"},"content":"     * Sets font of content in TextInputProcessor to {@code font}"},{"lineNumber":157,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"hoangduong1607"},"content":"    public void setFont(Font inputFont) {"},{"lineNumber":159,"author":{"gitID":"hoangduong1607"},"content":"        font \u003d inputFont;"},{"lineNumber":160,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"hoangduong1607"},"content":"}"}],"authorContributionMap":{"hoangduong1607":161}},{"path":"src/main/java/seedu/recipe/ui/SuggestionsPopUp.java","lines":[{"lineNumber":1,"author":{"gitID":"hoangduong1607"},"content":"//@@author hoangduong1607"},{"lineNumber":2,"author":{"gitID":"hoangduong1607"},"content":"package seedu.recipe.ui;"},{"lineNumber":3,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":4,"author":{"gitID":"hoangduong1607"},"content":"import static seedu.recipe.ui.util.AutoCompletionUtil.APPLICATION_COMMANDS;"},{"lineNumber":5,"author":{"gitID":"hoangduong1607"},"content":"import static seedu.recipe.ui.util.AutoCompletionUtil.MAX_SUGGESTIONS;"},{"lineNumber":6,"author":{"gitID":"hoangduong1607"},"content":"import static seedu.recipe.ui.util.AutoCompletionUtil.getPrefixesForCommand;"},{"lineNumber":7,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":8,"author":{"gitID":"hoangduong1607"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"hoangduong1607"},"content":"import java.util.Collections;"},{"lineNumber":10,"author":{"gitID":"hoangduong1607"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":12,"author":{"gitID":"hoangduong1607"},"content":"import javafx.geometry.Side;"},{"lineNumber":13,"author":{"gitID":"hoangduong1607"},"content":"import javafx.scene.control.ContextMenu;"},{"lineNumber":14,"author":{"gitID":"hoangduong1607"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":15,"author":{"gitID":"hoangduong1607"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":16,"author":{"gitID":"hoangduong1607"},"content":"import seedu.recipe.ui.util.TextInputProcessorUtil;"},{"lineNumber":17,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":18,"author":{"gitID":"hoangduong1607"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"hoangduong1607"},"content":" * The component that is responsible for showing a suggestion list for auto-completion"},{"lineNumber":20,"author":{"gitID":"hoangduong1607"},"content":" */"},{"lineNumber":21,"author":{"gitID":"hoangduong1607"},"content":"public class SuggestionsPopUp extends ContextMenu {"},{"lineNumber":22,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":23,"author":{"gitID":"hoangduong1607"},"content":"    private static final int MARGIN \u003d 5;"},{"lineNumber":24,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":25,"author":{"gitID":"hoangduong1607"},"content":"    private CommandBox commandBox;"},{"lineNumber":26,"author":{"gitID":"hoangduong1607"},"content":"    private TextArea commandTextArea;"},{"lineNumber":27,"author":{"gitID":"hoangduong1607"},"content":"    private TextInputProcessorUtil textInputProcessor;"},{"lineNumber":28,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":29,"author":{"gitID":"hoangduong1607"},"content":"    protected SuggestionsPopUp(CommandBox commandBox) {"},{"lineNumber":30,"author":{"gitID":"hoangduong1607"},"content":"        super();"},{"lineNumber":31,"author":{"gitID":"hoangduong1607"},"content":"        this.commandBox \u003d commandBox;"},{"lineNumber":32,"author":{"gitID":"hoangduong1607"},"content":"        commandTextArea \u003d commandBox.getCommandTextArea();"},{"lineNumber":33,"author":{"gitID":"hoangduong1607"},"content":"        textInputProcessor \u003d new TextInputProcessorUtil();"},{"lineNumber":34,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":36,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"hoangduong1607"},"content":"     * Hides suggestions"},{"lineNumber":38,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"hoangduong1607"},"content":"    protected void hideSuggestions() {"},{"lineNumber":40,"author":{"gitID":"hoangduong1607"},"content":"        if (isShowing()) {"},{"lineNumber":41,"author":{"gitID":"hoangduong1607"},"content":"            hide();"},{"lineNumber":42,"author":{"gitID":"hoangduong1607"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":45,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"hoangduong1607"},"content":"     * Shows suggestions for commands when users type in Command Box"},{"lineNumber":47,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"hoangduong1607"},"content":"    protected void showSuggestions() {"},{"lineNumber":49,"author":{"gitID":"hoangduong1607"},"content":"        String prefix \u003d commandTextArea.getText().substring(0, commandTextArea.getCaretPosition());"},{"lineNumber":50,"author":{"gitID":"hoangduong1607"},"content":"        textInputProcessor.setContent(prefix);"},{"lineNumber":51,"author":{"gitID":"hoangduong1607"},"content":"        textInputProcessor.setFont(commandTextArea.getFont());"},{"lineNumber":52,"author":{"gitID":"hoangduong1607"},"content":"        String lastWord \u003d textInputProcessor.getLastWord();"},{"lineNumber":53,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":54,"author":{"gitID":"hoangduong1607"},"content":"        // finds suggestions and displays"},{"lineNumber":55,"author":{"gitID":"hoangduong1607"},"content":"        ArrayList\u003cString\u003e suggestionList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":56,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":57,"author":{"gitID":"hoangduong1607"},"content":"        // decides to show commands or field prefixes as suggestions"},{"lineNumber":58,"author":{"gitID":"hoangduong1607"},"content":"        String firstWord \u003d textInputProcessor.getFirstWord();"},{"lineNumber":59,"author":{"gitID":"hoangduong1607"},"content":"        if (APPLICATION_COMMANDS.contains(firstWord)) {"},{"lineNumber":60,"author":{"gitID":"hoangduong1607"},"content":"            if (firstWord.equals(lastWord)) {"},{"lineNumber":61,"author":{"gitID":"hoangduong1607"},"content":"                suggestionList.add(firstWord);"},{"lineNumber":62,"author":{"gitID":"hoangduong1607"},"content":"            } else {"},{"lineNumber":63,"author":{"gitID":"hoangduong1607"},"content":"                suggestionList.addAll(getPrefixesForCommand().get(firstWord));"},{"lineNumber":64,"author":{"gitID":"hoangduong1607"},"content":"            }"},{"lineNumber":65,"author":{"gitID":"hoangduong1607"},"content":"        } else {"},{"lineNumber":66,"author":{"gitID":"hoangduong1607"},"content":"            suggestionList.addAll(APPLICATION_COMMANDS);"},{"lineNumber":67,"author":{"gitID":"hoangduong1607"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":69,"author":{"gitID":"hoangduong1607"},"content":"        findSuggestions(lastWord, suggestionList);"},{"lineNumber":70,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":71,"author":{"gitID":"hoangduong1607"},"content":"        // gets caret position based on input text and font"},{"lineNumber":72,"author":{"gitID":"hoangduong1607"},"content":"        double anchorX \u003d findDisplayPositionX(textInputProcessor.getCaretPositionX());"},{"lineNumber":73,"author":{"gitID":"hoangduong1607"},"content":"        double anchorY \u003d findDisplayPositionY(textInputProcessor.getCaretPositionY());"},{"lineNumber":74,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":75,"author":{"gitID":"hoangduong1607"},"content":"        // shows at bottom of input area if text is too long"},{"lineNumber":76,"author":{"gitID":"hoangduong1607"},"content":"        textInputProcessor.setContent(commandTextArea.getText());"},{"lineNumber":77,"author":{"gitID":"hoangduong1607"},"content":"        if (textInputProcessor.isTextTooLong()) {"},{"lineNumber":78,"author":{"gitID":"hoangduong1607"},"content":"            anchorX \u003d anchorY \u003d MARGIN;"},{"lineNumber":79,"author":{"gitID":"hoangduong1607"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":81,"author":{"gitID":"hoangduong1607"},"content":"        show(commandTextArea, Side.BOTTOM, anchorX, anchorY);"},{"lineNumber":82,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":84,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"hoangduong1607"},"content":"     * Finds possible suggestions from {@code prefix} and"},{"lineNumber":86,"author":{"gitID":"hoangduong1607"},"content":"     * list of valid suggestions {@code dictionary}."},{"lineNumber":87,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"hoangduong1607"},"content":"    private void findSuggestions(String prefix, List\u003cString\u003e dictionary) {"},{"lineNumber":89,"author":{"gitID":"hoangduong1607"},"content":"        getItems().clear();"},{"lineNumber":90,"author":{"gitID":"hoangduong1607"},"content":"        Collections.sort(dictionary);"},{"lineNumber":91,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":92,"author":{"gitID":"hoangduong1607"},"content":"        for (String suggestion : dictionary) {"},{"lineNumber":93,"author":{"gitID":"hoangduong1607"},"content":"            if (suggestion.startsWith(prefix)) {"},{"lineNumber":94,"author":{"gitID":"hoangduong1607"},"content":"                addSuggestion(suggestion);"},{"lineNumber":95,"author":{"gitID":"hoangduong1607"},"content":"            }"},{"lineNumber":96,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":97,"author":{"gitID":"hoangduong1607"},"content":"            if (getItems().size() \u003d\u003d MAX_SUGGESTIONS) {"},{"lineNumber":98,"author":{"gitID":"hoangduong1607"},"content":"                break;"},{"lineNumber":99,"author":{"gitID":"hoangduong1607"},"content":"            }"},{"lineNumber":100,"author":{"gitID":"hoangduong1607"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":103,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"hoangduong1607"},"content":"     * Finds X-coordinate to display SuggestionsPopUp in CommandBox"},{"lineNumber":105,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"hoangduong1607"},"content":"    double findDisplayPositionX(double caretPositionX) {"},{"lineNumber":107,"author":{"gitID":"hoangduong1607"},"content":"        return commandBox.getRoot().getLayoutX() + commandTextArea.getInsets().getLeft() + caretPositionX + MARGIN;"},{"lineNumber":108,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":110,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"hoangduong1607"},"content":"     * Finds Y-coordinate to display SuggestionsPopUp in CommandBox"},{"lineNumber":112,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"hoangduong1607"},"content":"    double findDisplayPositionY(double caretPositionY) {"},{"lineNumber":114,"author":{"gitID":"hoangduong1607"},"content":"        return Math.min(-commandTextArea.getHeight() + commandTextArea.getInsets().getTop()"},{"lineNumber":115,"author":{"gitID":"hoangduong1607"},"content":"                + commandTextArea.getInsets().getBottom() + caretPositionY, -commandTextArea.getInsets().getBottom())"},{"lineNumber":116,"author":{"gitID":"hoangduong1607"},"content":"                + MARGIN;"},{"lineNumber":117,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":119,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"hoangduong1607"},"content":"     * Adds a suggestion to suggestion list"},{"lineNumber":121,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"hoangduong1607"},"content":"    private void addSuggestion(String suggestion) {"},{"lineNumber":123,"author":{"gitID":"hoangduong1607"},"content":"        MenuItem item \u003d new MenuItem(suggestion);"},{"lineNumber":124,"author":{"gitID":"hoangduong1607"},"content":"        item.setOnAction(event -\u003e commandBox.autoComplete(item.getText()));"},{"lineNumber":125,"author":{"gitID":"hoangduong1607"},"content":"        getItems().add(item);"},{"lineNumber":126,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"hoangduong1607"},"content":"}"}],"authorContributionMap":{"hoangduong1607":127}},{"path":"src/main/java/seedu/recipe/ui/RecipeListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.events.ui.RecipePanelSelectionChangedEvent;"},{"lineNumber":18,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.commons.events.ui.ShareRecipeEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Recipe;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Panel containing the list of recipes."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class RecipeListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"RecipeListPanel.fxml\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(RecipeListPanel.class);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private ListView\u003cRecipeCard\u003e recipeListView;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public RecipeListPanel(ObservableList\u003cRecipe\u003e recipeList) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        setConnections(recipeList);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private void setConnections(ObservableList\u003cRecipe\u003e recipeList) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        ObservableList\u003cRecipeCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":39,"author":{"gitID":"-"},"content":"                recipeList, (recipe) -\u003e new RecipeCard(recipe, recipeList.indexOf(recipe) + 1));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        recipeListView.setItems(mappedList);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        recipeListView.setCellFactory(listView -\u003e new RecipeListViewCell());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        recipeListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                        logger.fine(\"Selection in recipe list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                        raise(new RecipePanelSelectionChangedEvent(newValue));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                });"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Scrolls to the {@code RecipeCard} at the {@code index} and selects it."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private void scrollTo(int index) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            recipeListView.scrollTo(index);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            recipeListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"RyanAngJY"},"content":"    //@@author RyanAngJY"},{"lineNumber":72,"author":{"gitID":"RyanAngJY"},"content":"    @Subscribe"},{"lineNumber":73,"author":{"gitID":"RyanAngJY"},"content":"    private void handleShareRecipeEvent(ShareRecipeEvent event) {"},{"lineNumber":74,"author":{"gitID":"RyanAngJY"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":75,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"RyanAngJY"},"content":"    //@@author"},{"lineNumber":77,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code RecipeCard}."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    class RecipeListViewCell extends ListCell\u003cRecipeCard\u003e {"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        protected void updateItem(RecipeCard recipe, boolean empty) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            super.updateItem(recipe, empty);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"            if (empty || recipe \u003d\u003d null) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                setGraphic(null);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                setText(null);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                setGraphic(recipe.getRoot());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":8,"-":88}},{"path":"src/main/java/seedu/recipe/ui/parser/WikiaParser.java","lines":[{"lineNumber":1,"author":{"gitID":"kokonguyen191"},"content":"//@@author kokonguyen191"},{"lineNumber":2,"author":{"gitID":"kokonguyen191"},"content":"package seedu.recipe.ui.parser;"},{"lineNumber":3,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":4,"author":{"gitID":"kokonguyen191"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":6,"author":{"gitID":"kokonguyen191"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"kokonguyen191"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"kokonguyen191"},"content":"import java.util.LinkedList;"},{"lineNumber":9,"author":{"gitID":"kokonguyen191"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"kokonguyen191"},"content":"import java.util.function.Function;"},{"lineNumber":11,"author":{"gitID":"kokonguyen191"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":13,"author":{"gitID":"kokonguyen191"},"content":"import org.jsoup.Jsoup;"},{"lineNumber":14,"author":{"gitID":"kokonguyen191"},"content":"import org.jsoup.nodes.Document;"},{"lineNumber":15,"author":{"gitID":"kokonguyen191"},"content":"import org.jsoup.nodes.Element;"},{"lineNumber":16,"author":{"gitID":"kokonguyen191"},"content":"import org.jsoup.select.Elements;"},{"lineNumber":17,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":18,"author":{"gitID":"kokonguyen191"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"kokonguyen191"},"content":" * A WebParser for recipes.wikia.com"},{"lineNumber":20,"author":{"gitID":"kokonguyen191"},"content":" */"},{"lineNumber":21,"author":{"gitID":"kokonguyen191"},"content":"public class WikiaParser extends WebParser {"},{"lineNumber":22,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":23,"author":{"gitID":"kokonguyen191"},"content":"    public static final String DOMAIN \u003d \"recipes.wikia.com\";"},{"lineNumber":24,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":25,"author":{"gitID":"kokonguyen191"},"content":"    protected static final String MAIN_BODY_ID \u003d \"mw-content-text\";"},{"lineNumber":26,"author":{"gitID":"kokonguyen191"},"content":"    protected static final String CATEGORY_CLASS_NAME \u003d \"category\";"},{"lineNumber":27,"author":{"gitID":"kokonguyen191"},"content":"    protected static final String PAGE_TITLE_CLASS_NAME \u003d \".page-header__title\";"},{"lineNumber":28,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":29,"author":{"gitID":"kokonguyen191"},"content":"    protected static final String HTML_HEADING_TWO_TAG_NAME \u003d \"h2\";"},{"lineNumber":30,"author":{"gitID":"kokonguyen191"},"content":"    protected static final String HTML_HEADING_THREE_TAG_NAME \u003d \"h3\";"},{"lineNumber":31,"author":{"gitID":"kokonguyen191"},"content":"    protected static final String HTML_LIST_TAG_NAME \u003d \"li\";"},{"lineNumber":32,"author":{"gitID":"kokonguyen191"},"content":"    protected static final String HTML_LINK_TAG_NAME \u003d \"a\";"},{"lineNumber":33,"author":{"gitID":"kokonguyen191"},"content":"    protected static final String HTML_LINK_ATTRIBUTE \u003d \"href\";"},{"lineNumber":34,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":35,"author":{"gitID":"kokonguyen191"},"content":"    protected static final String INGREDIENT_SELECTOR \u003d \"h2,ul\";"},{"lineNumber":36,"author":{"gitID":"kokonguyen191"},"content":"    protected static final String INGREDIENT_HEADING \u003d \"Ingredient\";"},{"lineNumber":37,"author":{"gitID":"kokonguyen191"},"content":"    protected static final String INGREDIENT_DELIMITER \u003d \", \";"},{"lineNumber":38,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":39,"author":{"gitID":"kokonguyen191"},"content":"    protected static final String INSTRUCTION_LIST_SELECTOR \u003d \"ol li\";"},{"lineNumber":40,"author":{"gitID":"kokonguyen191"},"content":"    protected static final String INSTRUCTION_GENERIC_SELECTOR \u003d \"h2,p,h3\";"},{"lineNumber":41,"author":{"gitID":"kokonguyen191"},"content":"    protected static final String INSTRUCTION_HEADING \u003d \"Directions\";"},{"lineNumber":42,"author":{"gitID":"kokonguyen191"},"content":"    protected static final String INSTRUCTION_DELIMITER \u003d \"\\n\";"},{"lineNumber":43,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":44,"author":{"gitID":"kokonguyen191"},"content":"    protected static final String IMAGE_SELECTOR \u003d \".image img\";"},{"lineNumber":45,"author":{"gitID":"kokonguyen191"},"content":"    protected static final String IMAGE_SOURCE_ATTRIBUTE \u003d \"src\";"},{"lineNumber":46,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":47,"author":{"gitID":"kokonguyen191"},"content":"    protected static final String URL_SELECTOR \u003d \"[rel\u003d\\\"canonical\\\"]\";"},{"lineNumber":48,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":49,"author":{"gitID":"kokonguyen191"},"content":"    protected static final String DISHES_SUFFIX \u003d \"ishes\";"},{"lineNumber":50,"author":{"gitID":"kokonguyen191"},"content":"    protected static final String DISHES_STRING_REGEX \u003d \"[Dd]ishes\";"},{"lineNumber":51,"author":{"gitID":"kokonguyen191"},"content":"    protected static final String RECIPES_SUFFIX \u003d \"ecipes\";"},{"lineNumber":52,"author":{"gitID":"kokonguyen191"},"content":"    protected static final String RECIPES_STRING_REGEX \u003d \"[Rr]ecipes\";"},{"lineNumber":53,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":54,"author":{"gitID":"kokonguyen191"},"content":"    protected static final String EMPTY_STRING \u003d \"\";"},{"lineNumber":55,"author":{"gitID":"kokonguyen191"},"content":"    protected static final String WHITE_SPACE \u003d \" \";"},{"lineNumber":56,"author":{"gitID":"kokonguyen191"},"content":"    protected static final String NON_ALPHANUMERIC_REGEX \u003d \"[^A-Za-z0-9]\";"},{"lineNumber":57,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":58,"author":{"gitID":"kokonguyen191"},"content":"    protected Document document;"},{"lineNumber":59,"author":{"gitID":"kokonguyen191"},"content":"    protected Element contentText;"},{"lineNumber":60,"author":{"gitID":"kokonguyen191"},"content":"    protected Elements categories;"},{"lineNumber":61,"author":{"gitID":"kokonguyen191"},"content":"    protected Elements elementsWithIngredientWithLink;"},{"lineNumber":62,"author":{"gitID":"kokonguyen191"},"content":"    protected Elements elementsWithIngredient;"},{"lineNumber":63,"author":{"gitID":"kokonguyen191"},"content":"    protected Elements elementsWithInstruction;"},{"lineNumber":64,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":65,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"kokonguyen191"},"content":"     * Constructs from a Jsoup Document."},{"lineNumber":67,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"kokonguyen191"},"content":"    public WikiaParser(Document document) {"},{"lineNumber":69,"author":{"gitID":"kokonguyen191"},"content":"        requireNonNull(document);"},{"lineNumber":70,"author":{"gitID":"kokonguyen191"},"content":"        this.document \u003d document;"},{"lineNumber":71,"author":{"gitID":"kokonguyen191"},"content":"        getMainBody();"},{"lineNumber":72,"author":{"gitID":"kokonguyen191"},"content":"        getCategories();"},{"lineNumber":73,"author":{"gitID":"kokonguyen191"},"content":"        initializeEmptyFields();"},{"lineNumber":74,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":76,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"kokonguyen191"},"content":"     * Constructs from a HTML string and a URL."},{"lineNumber":78,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"kokonguyen191"},"content":"    public WikiaParser(String html, String url) {"},{"lineNumber":80,"author":{"gitID":"kokonguyen191"},"content":"        requireNonNull(html);"},{"lineNumber":81,"author":{"gitID":"kokonguyen191"},"content":"        this.document \u003d Jsoup.parse(html, url);"},{"lineNumber":82,"author":{"gitID":"kokonguyen191"},"content":"        getMainBody();"},{"lineNumber":83,"author":{"gitID":"kokonguyen191"},"content":"        getCategories();"},{"lineNumber":84,"author":{"gitID":"kokonguyen191"},"content":"        initializeEmptyFields();"},{"lineNumber":85,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":87,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"kokonguyen191"},"content":"     * Assigns {@code contentText} to the Element that contains the article body."},{"lineNumber":89,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"kokonguyen191"},"content":"    protected void getMainBody() {"},{"lineNumber":91,"author":{"gitID":"kokonguyen191"},"content":"        contentText \u003d document.getElementById(MAIN_BODY_ID);"},{"lineNumber":92,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":94,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"kokonguyen191"},"content":"     * Assigns {@code categories} to the Elements that contains the categories."},{"lineNumber":96,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"kokonguyen191"},"content":"    protected void getCategories() {"},{"lineNumber":98,"author":{"gitID":"kokonguyen191"},"content":"        categories \u003d document.getElementsByClass(CATEGORY_CLASS_NAME);"},{"lineNumber":99,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":101,"author":{"gitID":"kokonguyen191"},"content":"    private void initializeEmptyFields() {"},{"lineNumber":102,"author":{"gitID":"kokonguyen191"},"content":"        elementsWithIngredientWithLink \u003d new Elements();"},{"lineNumber":103,"author":{"gitID":"kokonguyen191"},"content":"        elementsWithIngredient \u003d new Elements();"},{"lineNumber":104,"author":{"gitID":"kokonguyen191"},"content":"        elementsWithInstruction \u003d new Elements();"},{"lineNumber":105,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":107,"author":{"gitID":"kokonguyen191"},"content":"    @Override"},{"lineNumber":108,"author":{"gitID":"kokonguyen191"},"content":"    public String getName() {"},{"lineNumber":109,"author":{"gitID":"kokonguyen191"},"content":"        return document.selectFirst(PAGE_TITLE_CLASS_NAME).text();"},{"lineNumber":110,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":112,"author":{"gitID":"kokonguyen191"},"content":"    @Override"},{"lineNumber":113,"author":{"gitID":"kokonguyen191"},"content":"    public String getIngredient() {"},{"lineNumber":114,"author":{"gitID":"kokonguyen191"},"content":"        populateIngredient();"},{"lineNumber":115,"author":{"gitID":"kokonguyen191"},"content":"        return getIngredientString();"},{"lineNumber":116,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":118,"author":{"gitID":"kokonguyen191"},"content":"    @Override"},{"lineNumber":119,"author":{"gitID":"kokonguyen191"},"content":"    public String getInstruction() {"},{"lineNumber":120,"author":{"gitID":"kokonguyen191"},"content":"        populateInstruction();"},{"lineNumber":121,"author":{"gitID":"kokonguyen191"},"content":"        return getInstructionString();"},{"lineNumber":122,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":124,"author":{"gitID":"kokonguyen191"},"content":"    @Override"},{"lineNumber":125,"author":{"gitID":"kokonguyen191"},"content":"    public String getImageUrl() {"},{"lineNumber":126,"author":{"gitID":"kokonguyen191"},"content":"        Element image \u003d contentText.selectFirst(IMAGE_SELECTOR);"},{"lineNumber":127,"author":{"gitID":"kokonguyen191"},"content":"        if (image \u003d\u003d null) {"},{"lineNumber":128,"author":{"gitID":"kokonguyen191"},"content":"            return EMPTY_STRING;"},{"lineNumber":129,"author":{"gitID":"kokonguyen191"},"content":"        } else {"},{"lineNumber":130,"author":{"gitID":"kokonguyen191"},"content":"            return image.attr(IMAGE_SOURCE_ATTRIBUTE);"},{"lineNumber":131,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":134,"author":{"gitID":"kokonguyen191"},"content":"    @Override"},{"lineNumber":135,"author":{"gitID":"kokonguyen191"},"content":"    public String[] getTags() {"},{"lineNumber":136,"author":{"gitID":"kokonguyen191"},"content":"        LinkedList\u003cString\u003e tags \u003d new LinkedList\u003c\u003e();"},{"lineNumber":137,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":138,"author":{"gitID":"kokonguyen191"},"content":"        for (Element category : categories) {"},{"lineNumber":139,"author":{"gitID":"kokonguyen191"},"content":"            String rawText \u003d category.text();"},{"lineNumber":140,"author":{"gitID":"kokonguyen191"},"content":"            tags.add(trimTag(rawText));"},{"lineNumber":141,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":143,"author":{"gitID":"kokonguyen191"},"content":"        return tags.toArray(new String[tags.size()]);"},{"lineNumber":144,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":146,"author":{"gitID":"kokonguyen191"},"content":"    @Override"},{"lineNumber":147,"author":{"gitID":"kokonguyen191"},"content":"    public String getUrl() {"},{"lineNumber":148,"author":{"gitID":"kokonguyen191"},"content":"        return document.selectFirst(URL_SELECTOR).attr(HTML_LINK_ATTRIBUTE);"},{"lineNumber":149,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":151,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"kokonguyen191"},"content":"     * Fills {@code elementsWithIngredientWithLink} and {@code elementsWithIngredient} with the"},{"lineNumber":153,"author":{"gitID":"kokonguyen191"},"content":"     * relevant ingredient Element\u0027s."},{"lineNumber":154,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"kokonguyen191"},"content":"    private void populateIngredient() {"},{"lineNumber":156,"author":{"gitID":"kokonguyen191"},"content":"        Iterator\u003cElement\u003e elementIterator \u003d getIteratorForSelection(INGREDIENT_SELECTOR);"},{"lineNumber":157,"author":{"gitID":"kokonguyen191"},"content":"        Function\u003cElement, Boolean\u003e isNextIngredientHeading \u003d ("},{"lineNumber":158,"author":{"gitID":"kokonguyen191"},"content":"                element) -\u003e (element.text().startsWith(INGREDIENT_HEADING));"},{"lineNumber":159,"author":{"gitID":"kokonguyen191"},"content":"        skipUntil(elementIterator, isNextIngredientHeading);"},{"lineNumber":160,"author":{"gitID":"kokonguyen191"},"content":"        populateIngredient(elementIterator);"},{"lineNumber":161,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":163,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"kokonguyen191"},"content":"     * Iterates Elements using an Iterator, adds relevant ingredient Element to {@code elementsWithIngredientWithLink}"},{"lineNumber":165,"author":{"gitID":"kokonguyen191"},"content":"     * and {@code elementsWithIngredient}."},{"lineNumber":166,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"kokonguyen191"},"content":"    private void populateIngredient(Iterator\u003cElement\u003e elementIterator) {"},{"lineNumber":168,"author":{"gitID":"kokonguyen191"},"content":"        while (elementIterator.hasNext()) {"},{"lineNumber":169,"author":{"gitID":"kokonguyen191"},"content":"            Element nextElement \u003d elementIterator.next();"},{"lineNumber":170,"author":{"gitID":"kokonguyen191"},"content":"            if (nextElement.tagName().contains(HTML_HEADING_TWO_TAG_NAME)) {"},{"lineNumber":171,"author":{"gitID":"kokonguyen191"},"content":"                break;"},{"lineNumber":172,"author":{"gitID":"kokonguyen191"},"content":"            }"},{"lineNumber":173,"author":{"gitID":"kokonguyen191"},"content":"            elementsWithIngredient.addAll(nextElement.select(HTML_LIST_TAG_NAME));"},{"lineNumber":174,"author":{"gitID":"kokonguyen191"},"content":"            elementsWithIngredientWithLink.addAll(nextElement.select(HTML_LINK_TAG_NAME));"},{"lineNumber":175,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":178,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":179,"author":{"gitID":"kokonguyen191"},"content":"     * Returns a String of Ingredient that can be used for an add/edit command."},{"lineNumber":180,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":181,"author":{"gitID":"kokonguyen191"},"content":"    private String getIngredientString() {"},{"lineNumber":182,"author":{"gitID":"kokonguyen191"},"content":"        List\u003cString\u003e ingredientList;"},{"lineNumber":183,"author":{"gitID":"kokonguyen191"},"content":"        if (elementsWithIngredientWithLink.isEmpty()) {"},{"lineNumber":184,"author":{"gitID":"kokonguyen191"},"content":"            ingredientList \u003d elementsWithIngredient.eachText();"},{"lineNumber":185,"author":{"gitID":"kokonguyen191"},"content":"        } else {"},{"lineNumber":186,"author":{"gitID":"kokonguyen191"},"content":"            ingredientList \u003d elementsWithIngredientWithLink.eachText();"},{"lineNumber":187,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"kokonguyen191"},"content":"        return String.join(INGREDIENT_DELIMITER, ingredientList);"},{"lineNumber":189,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":191,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":192,"author":{"gitID":"kokonguyen191"},"content":"     * Fills {@code elementsWithInstruction} with the relevant instruction Element\u0027s."},{"lineNumber":193,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":194,"author":{"gitID":"kokonguyen191"},"content":"    private void populateInstruction() {"},{"lineNumber":195,"author":{"gitID":"kokonguyen191"},"content":"        elementsWithInstruction \u003d contentText.select(INSTRUCTION_LIST_SELECTOR);"},{"lineNumber":196,"author":{"gitID":"kokonguyen191"},"content":"        if (elementsWithInstruction.isEmpty()) {"},{"lineNumber":197,"author":{"gitID":"kokonguyen191"},"content":"            Iterator\u003cElement\u003e elementIterator \u003d getIteratorForSelection(INSTRUCTION_GENERIC_SELECTOR);"},{"lineNumber":198,"author":{"gitID":"kokonguyen191"},"content":"            Function\u003cElement, Boolean\u003e isNextInstructionHeading \u003d ("},{"lineNumber":199,"author":{"gitID":"kokonguyen191"},"content":"                    element) -\u003e (element.text().startsWith(INSTRUCTION_HEADING));"},{"lineNumber":200,"author":{"gitID":"kokonguyen191"},"content":"            skipUntil(elementIterator, isNextInstructionHeading);"},{"lineNumber":201,"author":{"gitID":"kokonguyen191"},"content":"            populateInstruction(elementIterator);"},{"lineNumber":202,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":205,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":206,"author":{"gitID":"kokonguyen191"},"content":"     * Iterates Elements using an Iterator, adds relevant instruction Element to {@code elementsWithInstruction}."},{"lineNumber":207,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":208,"author":{"gitID":"kokonguyen191"},"content":"    private void populateInstruction(Iterator\u003cElement\u003e elementIterator) {"},{"lineNumber":209,"author":{"gitID":"kokonguyen191"},"content":"        while (elementIterator.hasNext()) {"},{"lineNumber":210,"author":{"gitID":"kokonguyen191"},"content":"            Element nextElement \u003d elementIterator.next();"},{"lineNumber":211,"author":{"gitID":"kokonguyen191"},"content":"            if (nextElement.tagName().equals(HTML_HEADING_THREE_TAG_NAME)"},{"lineNumber":212,"author":{"gitID":"kokonguyen191"},"content":"                    || nextElement.tagName().equals(HTML_HEADING_TWO_TAG_NAME)) {"},{"lineNumber":213,"author":{"gitID":"kokonguyen191"},"content":"                break;"},{"lineNumber":214,"author":{"gitID":"kokonguyen191"},"content":"            }"},{"lineNumber":215,"author":{"gitID":"kokonguyen191"},"content":"            elementsWithInstruction.add(nextElement);"},{"lineNumber":216,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":217,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":219,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":220,"author":{"gitID":"kokonguyen191"},"content":"     * Returns a String of Instruction that can be used for an add/edit command."},{"lineNumber":221,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":222,"author":{"gitID":"kokonguyen191"},"content":"    private String getInstructionString() {"},{"lineNumber":223,"author":{"gitID":"kokonguyen191"},"content":"        List\u003cString\u003e instructionList \u003d elementsWithInstruction.eachText();"},{"lineNumber":224,"author":{"gitID":"kokonguyen191"},"content":"        return String.join(INSTRUCTION_DELIMITER, instructionList);"},{"lineNumber":225,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":227,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":228,"author":{"gitID":"kokonguyen191"},"content":"     * Returns an Iterator of Element for a list of Elements selected from {@code contentText} using"},{"lineNumber":229,"author":{"gitID":"kokonguyen191"},"content":"     * {@code cssSelector}."},{"lineNumber":230,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":231,"author":{"gitID":"kokonguyen191"},"content":"    private Iterator\u003cElement\u003e getIteratorForSelection(String cssSelector) {"},{"lineNumber":232,"author":{"gitID":"kokonguyen191"},"content":"        Elements elements \u003d contentText.select(cssSelector);"},{"lineNumber":233,"author":{"gitID":"kokonguyen191"},"content":"        return elements.iterator();"},{"lineNumber":234,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":236,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":237,"author":{"gitID":"kokonguyen191"},"content":"     * Iterates through an Iterator, at each iteration, evaluates the {@code booleanEvaluator}, if it returns"},{"lineNumber":238,"author":{"gitID":"kokonguyen191"},"content":"     * true, breaks the loop and exits the functions, else, continues to the next iteration."},{"lineNumber":239,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":240,"author":{"gitID":"kokonguyen191"},"content":"    private void skipUntil(Iterator\u003cElement\u003e elementIterator, Function\u003cElement, Boolean\u003e booleanEvaluator) {"},{"lineNumber":241,"author":{"gitID":"kokonguyen191"},"content":"        while (elementIterator.hasNext()) {"},{"lineNumber":242,"author":{"gitID":"kokonguyen191"},"content":"            Element nextElement \u003d elementIterator.next();"},{"lineNumber":243,"author":{"gitID":"kokonguyen191"},"content":"            if (booleanEvaluator.apply(nextElement)) {"},{"lineNumber":244,"author":{"gitID":"kokonguyen191"},"content":"                break;"},{"lineNumber":245,"author":{"gitID":"kokonguyen191"},"content":"            }"},{"lineNumber":246,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":247,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":249,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":250,"author":{"gitID":"kokonguyen191"},"content":"     * Trims unnecessary words to make tags shorter and more generic, removes all non-alphanumeric characters."},{"lineNumber":251,"author":{"gitID":"kokonguyen191"},"content":"     * @return the trimmed tag"},{"lineNumber":252,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":253,"author":{"gitID":"kokonguyen191"},"content":"    private String trimTag(String tag) {"},{"lineNumber":254,"author":{"gitID":"kokonguyen191"},"content":"        if (tag.endsWith(DISHES_SUFFIX)) {"},{"lineNumber":255,"author":{"gitID":"kokonguyen191"},"content":"            tag \u003d tag.replaceAll(DISHES_STRING_REGEX, EMPTY_STRING);"},{"lineNumber":256,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":257,"author":{"gitID":"kokonguyen191"},"content":"        if (tag.endsWith(RECIPES_SUFFIX)) {"},{"lineNumber":258,"author":{"gitID":"kokonguyen191"},"content":"            tag \u003d tag.replaceAll(RECIPES_STRING_REGEX, EMPTY_STRING);"},{"lineNumber":259,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":260,"author":{"gitID":"kokonguyen191"},"content":"        tag.replaceAll(NON_ALPHANUMERIC_REGEX, EMPTY_STRING);"},{"lineNumber":261,"author":{"gitID":"kokonguyen191"},"content":"        return Arrays.stream(tag.split(WHITE_SPACE))"},{"lineNumber":262,"author":{"gitID":"kokonguyen191"},"content":"                .map(word -\u003e Character.toTitleCase(word.charAt(0)) + word.substring(1))"},{"lineNumber":263,"author":{"gitID":"kokonguyen191"},"content":"                .collect(Collectors.joining());"},{"lineNumber":264,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":266,"author":{"gitID":"kokonguyen191"},"content":"    @Override"},{"lineNumber":267,"author":{"gitID":"kokonguyen191"},"content":"    public boolean equals(Object other) {"},{"lineNumber":268,"author":{"gitID":"kokonguyen191"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":269,"author":{"gitID":"kokonguyen191"},"content":"                || (other instanceof WikiaParser // instanceof handles nulls"},{"lineNumber":270,"author":{"gitID":"kokonguyen191"},"content":"                \u0026\u0026 document.html().equals(((WikiaParser) other).document.html()));"},{"lineNumber":271,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":272,"author":{"gitID":"kokonguyen191"},"content":"}"}],"authorContributionMap":{"kokonguyen191":272}},{"path":"src/main/java/seedu/recipe/ui/parser/WebParser.java","lines":[{"lineNumber":1,"author":{"gitID":"kokonguyen191"},"content":"//@@author kokonguyen191"},{"lineNumber":2,"author":{"gitID":"kokonguyen191"},"content":"package seedu.recipe.ui.parser;"},{"lineNumber":3,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":4,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.logic.commands.AddCommand.COMMAND_WORD;"},{"lineNumber":5,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_IMG;"},{"lineNumber":6,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT;"},{"lineNumber":7,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INSTRUCTION;"},{"lineNumber":8,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_URL;"},{"lineNumber":11,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":12,"author":{"gitID":"kokonguyen191"},"content":"import org.jsoup.nodes.Document;"},{"lineNumber":13,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":14,"author":{"gitID":"kokonguyen191"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"kokonguyen191"},"content":" * The API set of a web parser"},{"lineNumber":16,"author":{"gitID":"kokonguyen191"},"content":" */"},{"lineNumber":17,"author":{"gitID":"kokonguyen191"},"content":"public abstract class WebParser {"},{"lineNumber":18,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":19,"author":{"gitID":"kokonguyen191"},"content":"    private static final String LF \u003d \"\\n\";"},{"lineNumber":20,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":21,"author":{"gitID":"kokonguyen191"},"content":"    protected Document document;"},{"lineNumber":22,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":23,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"kokonguyen191"},"content":"     * Returns the AddCommand string that has the parsed recipe from the page."},{"lineNumber":25,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"kokonguyen191"},"content":"    public String parseRecipe() {"},{"lineNumber":27,"author":{"gitID":"kokonguyen191"},"content":"        String name \u003d getName();"},{"lineNumber":28,"author":{"gitID":"kokonguyen191"},"content":"        String ingredient \u003d getIngredient();"},{"lineNumber":29,"author":{"gitID":"kokonguyen191"},"content":"        String instruction \u003d getInstruction();"},{"lineNumber":30,"author":{"gitID":"kokonguyen191"},"content":"        String imageUrl \u003d getImageUrl();"},{"lineNumber":31,"author":{"gitID":"kokonguyen191"},"content":"        String url \u003d getUrl();"},{"lineNumber":32,"author":{"gitID":"kokonguyen191"},"content":"        String[] tags \u003d getTags();"},{"lineNumber":33,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":34,"author":{"gitID":"kokonguyen191"},"content":"        if (!name.equals(\"\")) {"},{"lineNumber":35,"author":{"gitID":"kokonguyen191"},"content":"            StringBuilder commandBuilder \u003d new StringBuilder();"},{"lineNumber":36,"author":{"gitID":"kokonguyen191"},"content":"            commandBuilder.append(COMMAND_WORD)"},{"lineNumber":37,"author":{"gitID":"kokonguyen191"},"content":"                    .append(LF)"},{"lineNumber":38,"author":{"gitID":"kokonguyen191"},"content":"                    .append(PREFIX_NAME)"},{"lineNumber":39,"author":{"gitID":"kokonguyen191"},"content":"                    .append(name);"},{"lineNumber":40,"author":{"gitID":"kokonguyen191"},"content":"            if (!ingredient.equals(\"\")) {"},{"lineNumber":41,"author":{"gitID":"kokonguyen191"},"content":"                commandBuilder.append(LF)"},{"lineNumber":42,"author":{"gitID":"kokonguyen191"},"content":"                        .append(PREFIX_INGREDIENT)"},{"lineNumber":43,"author":{"gitID":"kokonguyen191"},"content":"                        .append(ingredient);"},{"lineNumber":44,"author":{"gitID":"kokonguyen191"},"content":"            }"},{"lineNumber":45,"author":{"gitID":"kokonguyen191"},"content":"            if (!instruction.equals(\"\")) {"},{"lineNumber":46,"author":{"gitID":"kokonguyen191"},"content":"                commandBuilder.append(LF)"},{"lineNumber":47,"author":{"gitID":"kokonguyen191"},"content":"                        .append(PREFIX_INSTRUCTION)"},{"lineNumber":48,"author":{"gitID":"kokonguyen191"},"content":"                        .append(instruction);"},{"lineNumber":49,"author":{"gitID":"kokonguyen191"},"content":"            }"},{"lineNumber":50,"author":{"gitID":"kokonguyen191"},"content":"            if (!imageUrl.equals(\"\")) {"},{"lineNumber":51,"author":{"gitID":"kokonguyen191"},"content":"                commandBuilder.append(LF)"},{"lineNumber":52,"author":{"gitID":"kokonguyen191"},"content":"                        .append(PREFIX_IMG)"},{"lineNumber":53,"author":{"gitID":"kokonguyen191"},"content":"                        .append(imageUrl);"},{"lineNumber":54,"author":{"gitID":"kokonguyen191"},"content":"            }"},{"lineNumber":55,"author":{"gitID":"kokonguyen191"},"content":"            commandBuilder.append(LF)"},{"lineNumber":56,"author":{"gitID":"kokonguyen191"},"content":"                    .append(PREFIX_URL)"},{"lineNumber":57,"author":{"gitID":"kokonguyen191"},"content":"                    .append(url);"},{"lineNumber":58,"author":{"gitID":"kokonguyen191"},"content":"            if (tags.length \u003e 0) {"},{"lineNumber":59,"author":{"gitID":"kokonguyen191"},"content":"                commandBuilder.append(LF);"},{"lineNumber":60,"author":{"gitID":"kokonguyen191"},"content":"                for (String tag : tags) {"},{"lineNumber":61,"author":{"gitID":"kokonguyen191"},"content":"                    commandBuilder"},{"lineNumber":62,"author":{"gitID":"kokonguyen191"},"content":"                            .append(PREFIX_TAG)"},{"lineNumber":63,"author":{"gitID":"kokonguyen191"},"content":"                            .append(tag)"},{"lineNumber":64,"author":{"gitID":"kokonguyen191"},"content":"                            .append(\" \");"},{"lineNumber":65,"author":{"gitID":"kokonguyen191"},"content":"                }"},{"lineNumber":66,"author":{"gitID":"kokonguyen191"},"content":"            }"},{"lineNumber":67,"author":{"gitID":"kokonguyen191"},"content":"            return commandBuilder.toString();"},{"lineNumber":68,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"kokonguyen191"},"content":"        return null;"},{"lineNumber":70,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":72,"author":{"gitID":"kokonguyen191"},"content":"    public abstract String getName();"},{"lineNumber":73,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":74,"author":{"gitID":"kokonguyen191"},"content":"    public abstract String getIngredient();"},{"lineNumber":75,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":76,"author":{"gitID":"kokonguyen191"},"content":"    public abstract String getInstruction();"},{"lineNumber":77,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":78,"author":{"gitID":"kokonguyen191"},"content":"    public abstract String getImageUrl();"},{"lineNumber":79,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":80,"author":{"gitID":"kokonguyen191"},"content":"    public abstract String getUrl();"},{"lineNumber":81,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":82,"author":{"gitID":"kokonguyen191"},"content":"    public abstract String[] getTags();"},{"lineNumber":83,"author":{"gitID":"kokonguyen191"},"content":"}"}],"authorContributionMap":{"kokonguyen191":83}},{"path":"src/main/java/seedu/recipe/ui/parser/MobileWikiaParser.java","lines":[{"lineNumber":1,"author":{"gitID":"kokonguyen191"},"content":"//@@author kokonguyen191"},{"lineNumber":2,"author":{"gitID":"kokonguyen191"},"content":"package seedu.recipe.ui.parser;"},{"lineNumber":3,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":4,"author":{"gitID":"kokonguyen191"},"content":"import org.jsoup.nodes.Document;"},{"lineNumber":5,"author":{"gitID":"kokonguyen191"},"content":"import org.jsoup.nodes.Element;"},{"lineNumber":6,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":7,"author":{"gitID":"kokonguyen191"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"kokonguyen191"},"content":" * A WebParser for recipes.wikia.com mobile version"},{"lineNumber":9,"author":{"gitID":"kokonguyen191"},"content":" */"},{"lineNumber":10,"author":{"gitID":"kokonguyen191"},"content":"public class MobileWikiaParser extends WikiaParser {"},{"lineNumber":11,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":12,"author":{"gitID":"kokonguyen191"},"content":"    public static final String DOMAIN \u003d \"recipes.wikia.com\";"},{"lineNumber":13,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":14,"author":{"gitID":"kokonguyen191"},"content":"    protected static final String MAIN_BODY_CLASS_NAME \u003d \".article-content.mw-content\";"},{"lineNumber":15,"author":{"gitID":"kokonguyen191"},"content":"    protected static final String CATEGORY_SELECTOR \u003d \".mw-content.collapsible-menu.ember-view ul li\";"},{"lineNumber":16,"author":{"gitID":"kokonguyen191"},"content":"    protected static final String PAGE_TITLE_CLASS_NAME \u003d \".wiki-page-header__title\";"},{"lineNumber":17,"author":{"gitID":"kokonguyen191"},"content":"    protected static final String MOBILE_URL_SUFFIX \u003d \"?useskin\u003dwikiamobile\";"},{"lineNumber":18,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":19,"author":{"gitID":"kokonguyen191"},"content":"    protected static final String IMAGE_SELECTOR \u003d \".article-media-placeholder\";"},{"lineNumber":20,"author":{"gitID":"kokonguyen191"},"content":"    protected static final String IMAGE_SOURCE_ATTRIBUTE \u003d \"data-src\";"},{"lineNumber":21,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":22,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"kokonguyen191"},"content":"     * Constructs from a Jsoup Document."},{"lineNumber":24,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"kokonguyen191"},"content":"    public MobileWikiaParser(Document document) {"},{"lineNumber":26,"author":{"gitID":"kokonguyen191"},"content":"        super(document);"},{"lineNumber":27,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":29,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"kokonguyen191"},"content":"     * Constructs from a HTML string and a URL."},{"lineNumber":31,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"kokonguyen191"},"content":"    public MobileWikiaParser(String html, String url) {"},{"lineNumber":33,"author":{"gitID":"kokonguyen191"},"content":"        super(html, url);"},{"lineNumber":34,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":36,"author":{"gitID":"kokonguyen191"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"kokonguyen191"},"content":"    protected void getMainBody() {"},{"lineNumber":38,"author":{"gitID":"kokonguyen191"},"content":"        contentText \u003d this.document.selectFirst(MAIN_BODY_CLASS_NAME);"},{"lineNumber":39,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":41,"author":{"gitID":"kokonguyen191"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"kokonguyen191"},"content":"    protected void getCategories() {"},{"lineNumber":43,"author":{"gitID":"kokonguyen191"},"content":"        categories \u003d document.select(CATEGORY_SELECTOR);"},{"lineNumber":44,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":46,"author":{"gitID":"kokonguyen191"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"kokonguyen191"},"content":"    public String getName() {"},{"lineNumber":48,"author":{"gitID":"kokonguyen191"},"content":"        return document.selectFirst(PAGE_TITLE_CLASS_NAME).text();"},{"lineNumber":49,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":51,"author":{"gitID":"kokonguyen191"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"kokonguyen191"},"content":"    public String getImageUrl() {"},{"lineNumber":53,"author":{"gitID":"kokonguyen191"},"content":"        Element image \u003d contentText.selectFirst(IMAGE_SELECTOR);"},{"lineNumber":54,"author":{"gitID":"kokonguyen191"},"content":"        if (image \u003d\u003d null) {"},{"lineNumber":55,"author":{"gitID":"kokonguyen191"},"content":"            return EMPTY_STRING;"},{"lineNumber":56,"author":{"gitID":"kokonguyen191"},"content":"        } else {"},{"lineNumber":57,"author":{"gitID":"kokonguyen191"},"content":"            return image.attr(IMAGE_SOURCE_ATTRIBUTE);"},{"lineNumber":58,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":61,"author":{"gitID":"kokonguyen191"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"kokonguyen191"},"content":"    public String getUrl() {"},{"lineNumber":63,"author":{"gitID":"kokonguyen191"},"content":"        return super.getUrl() + MOBILE_URL_SUFFIX;"},{"lineNumber":64,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":66,"author":{"gitID":"kokonguyen191"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"kokonguyen191"},"content":"    public boolean equals(Object other) {"},{"lineNumber":68,"author":{"gitID":"kokonguyen191"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":69,"author":{"gitID":"kokonguyen191"},"content":"                || (other instanceof MobileWikiaParser // instanceof handles nulls"},{"lineNumber":70,"author":{"gitID":"kokonguyen191"},"content":"                \u0026\u0026 document.html().equals(((MobileWikiaParser) other).document.html()));"},{"lineNumber":71,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"kokonguyen191"},"content":"}"}],"authorContributionMap":{"kokonguyen191":72}},{"path":"src/main/java/seedu/recipe/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.Scene;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.recipe.MainApp;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.Config;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.GuiSettings;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.LogsCenter;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.events.ui.ChangeThemeRequestEvent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.events.ui.WebParseRequestEvent;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.Logic;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.recipe.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String GIRL_THEME_CSS \u003d \"GirlTheme.css\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final String LIGHT_THEME_CSS \u003d \"LightTheme.css\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String EXTENSIONS_CSS \u003d \"Extensions.css\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private CommandBox commandBox;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private RecipeListPanel recipeListPanel;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private StackPane browserPlaceholder;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private MenuItem changeThemeItem;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private StackPane recipeListPanelPlaceholder;"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        loadStyle(prefs.getIsUsingGirlTheme());"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        setAccelerator(changeThemeItem, KeyCombination.valueOf(\"F2\"));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":110,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":111,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":112,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":113,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":114,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":115,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":116,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":117,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":118,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":119,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":120,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":121,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":122,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":123,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            if ((event.getTarget() instanceof TextInputControl || event.getTarget() instanceof ListView)"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                    \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        browserPanel \u003d new BrowserPanel(prefs.getIsUsingGirlTheme());"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        browserPlaceholder.getChildren().add(browserPanel.getRoot());"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        recipeListPanel \u003d new RecipeListPanel(logic.getFilteredRecipeList());"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        recipeListPanelPlaceholder.getChildren().add(recipeListPanel.getRoot());"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getRecipeBookFilePath());"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        commandBox \u003d new CommandBox(logic);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":163,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":178,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"kokonguyen191"},"content":"    //@@author kokonguyen191"},{"lineNumber":182,"author":{"gitID":"kokonguyen191"},"content":"    @Subscribe"},{"lineNumber":183,"author":{"gitID":"kokonguyen191"},"content":"    private void handleChangeThemeRequestEvent(ChangeThemeRequestEvent event) {"},{"lineNumber":184,"author":{"gitID":"kokonguyen191"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":185,"author":{"gitID":"kokonguyen191"},"content":"        handleChangeTheme();"},{"lineNumber":186,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":188,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":189,"author":{"gitID":"kokonguyen191"},"content":"     * Toggles between dark and light theme"},{"lineNumber":190,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"kokonguyen191"},"content":"    @FXML"},{"lineNumber":192,"author":{"gitID":"kokonguyen191"},"content":"    public void handleChangeTheme() {"},{"lineNumber":193,"author":{"gitID":"kokonguyen191"},"content":"        boolean isUsingGirlTheme \u003d prefs.getIsUsingGirlTheme();"},{"lineNumber":194,"author":{"gitID":"kokonguyen191"},"content":"        browserPanel.loadDefaultPage(!isUsingGirlTheme);"},{"lineNumber":195,"author":{"gitID":"kokonguyen191"},"content":"        loadStyle(!isUsingGirlTheme);"},{"lineNumber":196,"author":{"gitID":"kokonguyen191"},"content":"        prefs.setIsUsingGirlTheme(!isUsingGirlTheme);"},{"lineNumber":197,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":199,"author":{"gitID":"kokonguyen191"},"content":"    @Subscribe"},{"lineNumber":200,"author":{"gitID":"kokonguyen191"},"content":"    private void handleWebParseRequestEvent(WebParseRequestEvent event) {"},{"lineNumber":201,"author":{"gitID":"kokonguyen191"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":202,"author":{"gitID":"kokonguyen191"},"content":"        String parsedRecipe \u003d browserPanel.parseRecipe();"},{"lineNumber":203,"author":{"gitID":"kokonguyen191"},"content":"        if (parsedRecipe !\u003d null) {"},{"lineNumber":204,"author":{"gitID":"kokonguyen191"},"content":"            commandBox.replaceText(parsedRecipe);"},{"lineNumber":205,"author":{"gitID":"kokonguyen191"},"content":"        } else {"},{"lineNumber":206,"author":{"gitID":"kokonguyen191"},"content":"            commandBox.replaceText(\"\");"},{"lineNumber":207,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":208,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":210,"author":{"gitID":"kokonguyen191"},"content":"    //@@author"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":214,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"kokonguyen191"},"content":"    //@@author kokonguyen191"},{"lineNumber":226,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"kokonguyen191"},"content":"     * Toggles the main window theme"},{"lineNumber":228,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":229,"author":{"gitID":"kokonguyen191"},"content":"    private void loadStyle(boolean darkTheme) {"},{"lineNumber":230,"author":{"gitID":"kokonguyen191"},"content":"        Scene scene \u003d primaryStage.getScene();"},{"lineNumber":231,"author":{"gitID":"kokonguyen191"},"content":"        scene.getStylesheets().clear();"},{"lineNumber":232,"author":{"gitID":"kokonguyen191"},"content":"        if (darkTheme) {"},{"lineNumber":233,"author":{"gitID":"kokonguyen191"},"content":"            scene.getStylesheets().add(MainApp.class.getResource(FXML_FILE_FOLDER + GIRL_THEME_CSS).toExternalForm());"},{"lineNumber":234,"author":{"gitID":"kokonguyen191"},"content":"        } else {"},{"lineNumber":235,"author":{"gitID":"kokonguyen191"},"content":"            scene.getStylesheets().add(MainApp.class.getResource(FXML_FILE_FOLDER + LIGHT_THEME_CSS).toExternalForm());"},{"lineNumber":236,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":237,"author":{"gitID":"kokonguyen191"},"content":"        scene.getStylesheets().add(MainApp.class.getResource(FXML_FILE_FOLDER + EXTENSIONS_CSS).toExternalForm());"},{"lineNumber":238,"author":{"gitID":"kokonguyen191"},"content":"        primaryStage.setScene(scene);"},{"lineNumber":239,"author":{"gitID":"kokonguyen191"},"content":"        primaryStage.show();"},{"lineNumber":240,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":241,"author":{"gitID":"kokonguyen191"},"content":"    //@@author"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":245,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"    public RecipeListPanel getRecipeListPanel() {"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        return this.recipeListPanel;"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"    void releaseResources() {"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        browserPanel.freeResources();"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":264,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kokonguyen191":47,"-":217}},{"path":"src/main/java/seedu/recipe/commons/util/FileUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.recipe.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"RyanAngJY"},"content":"import javax.imageio.ImageIO;"},{"lineNumber":10,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Writes and reads files"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class FileUtil {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String CHARSET \u003d \"UTF-8\";"},{"lineNumber":17,"author":{"gitID":"RyanAngJY"},"content":"    private static final String TYPE_IMAGE \u003d \"image\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static boolean isFileExists(File file) {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return file.exists() \u0026\u0026 file.isFile();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"RyanAngJY"},"content":"    //@@author RyanAngJY"},{"lineNumber":24,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"RyanAngJY"},"content":"     * Checks if a given file is an image file."},{"lineNumber":26,"author":{"gitID":"RyanAngJY"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"RyanAngJY"},"content":"     * @return true if a given file is a valid image file."},{"lineNumber":28,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"RyanAngJY"},"content":"    public static boolean isImageFile(File file) {"},{"lineNumber":30,"author":{"gitID":"RyanAngJY"},"content":"        if (!isFileExists(file) || file.isDirectory()) {"},{"lineNumber":31,"author":{"gitID":"RyanAngJY"},"content":"            return false;"},{"lineNumber":32,"author":{"gitID":"RyanAngJY"},"content":"        } else {"},{"lineNumber":33,"author":{"gitID":"RyanAngJY"},"content":"            try {"},{"lineNumber":34,"author":{"gitID":"RyanAngJY"},"content":"                if (ImageIO.read(file) \u003d\u003d null) {"},{"lineNumber":35,"author":{"gitID":"RyanAngJY"},"content":"                    return false;"},{"lineNumber":36,"author":{"gitID":"RyanAngJY"},"content":"                }"},{"lineNumber":37,"author":{"gitID":"RyanAngJY"},"content":"            } catch (IOException exception) {"},{"lineNumber":38,"author":{"gitID":"RyanAngJY"},"content":"                System.out.println(\"Error reading file\");"},{"lineNumber":39,"author":{"gitID":"RyanAngJY"},"content":"            }"},{"lineNumber":40,"author":{"gitID":"RyanAngJY"},"content":"            return true;"},{"lineNumber":41,"author":{"gitID":"RyanAngJY"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"kokonguyen191"},"content":"    //@@author kokonguyen191"},{"lineNumber":44,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"kokonguyen191"},"content":"     * Returns true if {@code testPath} is a valid file path and points to an image."},{"lineNumber":46,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"kokonguyen191"},"content":"    public static boolean isImageFile(String testPath) {"},{"lineNumber":48,"author":{"gitID":"kokonguyen191"},"content":"        File file \u003d new File(testPath);"},{"lineNumber":49,"author":{"gitID":"kokonguyen191"},"content":"        return isImageFile(file);"},{"lineNumber":50,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"kokonguyen191"},"content":"    //@@author"},{"lineNumber":52,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * @throws IOException if the file or directory cannot be created."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static void createIfMissing(File file) throws IOException {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        if (!isFileExists(file)) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            createFile(file);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * @return true if file is created, false if file already exists"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static boolean createFile(File file) throws IOException {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        if (file.exists()) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        createParentDirsOfFile(file);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return file.createNewFile();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Creates the given directory along with its parent directories"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * @param dir the directory to be created; assumed not null"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * @throws IOException if the directory or a parent directory cannot be created"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public static void createDirs(File dir) throws IOException {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        if (!dir.exists() \u0026\u0026 !dir.mkdirs()) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            throw new IOException(\"Failed to make directories of \" + dir.getName());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Creates parent directories of file if it has a parent directory"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public static void createParentDirsOfFile(File file) throws IOException {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        File parentDir \u003d file.getParentFile();"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        if (parentDir !\u003d null) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            createDirs(parentDir);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Assumes file exists"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public static String readFromFile(File file) throws IOException {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return new String(Files.readAllBytes(file.toPath()), CHARSET);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Writes given string to a file."},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * Will create the file if it does not exist yet."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public static void writeToFile(File file, String content) throws IOException {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        Files.write(file.toPath(), content.getBytes(CHARSET));"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * Converts a string to a platform-specific file path"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * @param pathWithForwardSlash A String representing a file path but using \u0027/\u0027 as the separator"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * @return {@code pathWithForwardSlash} but \u0027/\u0027 replaced with {@code File.separator}"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public static String getPath(String pathWithForwardSlash) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        checkArgument(pathWithForwardSlash.contains(\"/\"));"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        return pathWithForwardSlash.replace(\"/\", File.separator);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kokonguyen191":9,"RyanAngJY":24,"-":93}},{"path":"src/main/java/seedu/recipe/ui/parser/WebParserHandler.java","lines":[{"lineNumber":1,"author":{"gitID":"kokonguyen191"},"content":"//@@author kokonguyen191"},{"lineNumber":2,"author":{"gitID":"kokonguyen191"},"content":"package seedu.recipe.ui.parser;"},{"lineNumber":3,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":4,"author":{"gitID":"kokonguyen191"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":6,"author":{"gitID":"kokonguyen191"},"content":"import java.net.URI;"},{"lineNumber":7,"author":{"gitID":"kokonguyen191"},"content":"import java.net.URISyntaxException;"},{"lineNumber":8,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":9,"author":{"gitID":"kokonguyen191"},"content":"import org.jsoup.Jsoup;"},{"lineNumber":10,"author":{"gitID":"kokonguyen191"},"content":"import org.jsoup.helper.W3CDom;"},{"lineNumber":11,"author":{"gitID":"kokonguyen191"},"content":"import org.w3c.dom.Document;"},{"lineNumber":12,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":13,"author":{"gitID":"kokonguyen191"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":14,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":15,"author":{"gitID":"kokonguyen191"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"kokonguyen191"},"content":" * Handles a WebParseRequestEvent"},{"lineNumber":17,"author":{"gitID":"kokonguyen191"},"content":" */"},{"lineNumber":18,"author":{"gitID":"kokonguyen191"},"content":"public class WebParserHandler {"},{"lineNumber":19,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":20,"author":{"gitID":"kokonguyen191"},"content":"    private WebView browser;"},{"lineNumber":21,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":22,"author":{"gitID":"kokonguyen191"},"content":"    public WebParserHandler(WebView browser) {"},{"lineNumber":23,"author":{"gitID":"kokonguyen191"},"content":"        requireNonNull(browser);"},{"lineNumber":24,"author":{"gitID":"kokonguyen191"},"content":"        this.browser \u003d browser;"},{"lineNumber":25,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":27,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"kokonguyen191"},"content":"     * Returns the according WebParser to the currently loaded page in the BrowserPanel"},{"lineNumber":29,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"kokonguyen191"},"content":"    public WebParser getWebParser() {"},{"lineNumber":31,"author":{"gitID":"kokonguyen191"},"content":"        String url \u003d browser.getEngine().getLocation();"},{"lineNumber":32,"author":{"gitID":"kokonguyen191"},"content":"        Document document \u003d browser.getEngine().getDocument();"},{"lineNumber":33,"author":{"gitID":"kokonguyen191"},"content":"        W3CDom w3CDom \u003d new W3CDom();"},{"lineNumber":34,"author":{"gitID":"kokonguyen191"},"content":"        String documentString \u003d w3CDom.asString(document);"},{"lineNumber":35,"author":{"gitID":"kokonguyen191"},"content":"        if (browser.getEngine().getTitle() !\u003d null) {"},{"lineNumber":36,"author":{"gitID":"kokonguyen191"},"content":"            return WebParserHandler.getWebParser(url, documentString);"},{"lineNumber":37,"author":{"gitID":"kokonguyen191"},"content":"        } else {"},{"lineNumber":38,"author":{"gitID":"kokonguyen191"},"content":"            return null;"},{"lineNumber":39,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":42,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"kokonguyen191"},"content":"     * Reads the {@code url}, returns the according WebParser loaded with {@code documentString}"},{"lineNumber":44,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"kokonguyen191"},"content":"    public static WebParser getWebParser(String url, String documentString) {"},{"lineNumber":46,"author":{"gitID":"kokonguyen191"},"content":"        try {"},{"lineNumber":47,"author":{"gitID":"kokonguyen191"},"content":"            URI uri \u003d new URI(url);"},{"lineNumber":48,"author":{"gitID":"kokonguyen191"},"content":"            String domain \u003d uri.getHost();"},{"lineNumber":49,"author":{"gitID":"kokonguyen191"},"content":"            switch (domain) {"},{"lineNumber":50,"author":{"gitID":"kokonguyen191"},"content":"            case WikiaParser.DOMAIN:"},{"lineNumber":51,"author":{"gitID":"kokonguyen191"},"content":"                /* Try to pre-parse to see if the page is mobile wikia or wikia. */"},{"lineNumber":52,"author":{"gitID":"kokonguyen191"},"content":"                org.jsoup.nodes.Document jsoupDocument \u003d Jsoup.parse(documentString);"},{"lineNumber":53,"author":{"gitID":"kokonguyen191"},"content":"                if (jsoupDocument.getElementById(\"mw-content-text\") \u003d\u003d null) {"},{"lineNumber":54,"author":{"gitID":"kokonguyen191"},"content":"                    return new MobileWikiaParser(jsoupDocument);"},{"lineNumber":55,"author":{"gitID":"kokonguyen191"},"content":"                } else {"},{"lineNumber":56,"author":{"gitID":"kokonguyen191"},"content":"                    return new WikiaParser(jsoupDocument);"},{"lineNumber":57,"author":{"gitID":"kokonguyen191"},"content":"                }"},{"lineNumber":58,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":59,"author":{"gitID":"kokonguyen191"},"content":"            default:"},{"lineNumber":60,"author":{"gitID":"kokonguyen191"},"content":"                return null;"},{"lineNumber":61,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":62,"author":{"gitID":"kokonguyen191"},"content":"            }"},{"lineNumber":63,"author":{"gitID":"kokonguyen191"},"content":"        } catch (URISyntaxException e) {"},{"lineNumber":64,"author":{"gitID":"kokonguyen191"},"content":"            return null;"},{"lineNumber":65,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"kokonguyen191"},"content":"}"}],"authorContributionMap":{"kokonguyen191":67}},{"path":"src/main/java/seedu/recipe/commons/events/ui/InternetSearchRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"kokonguyen191"},"content":"//@@author kokonguyen191"},{"lineNumber":2,"author":{"gitID":"kokonguyen191"},"content":"package seedu.recipe.commons.events.ui;"},{"lineNumber":3,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":4,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.logic.commands.util.WikiaQueryHandler;"},{"lineNumber":6,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":7,"author":{"gitID":"kokonguyen191"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"kokonguyen191"},"content":" * Indicates a request to search for recipe on the Internet"},{"lineNumber":9,"author":{"gitID":"kokonguyen191"},"content":" */"},{"lineNumber":10,"author":{"gitID":"kokonguyen191"},"content":"public class InternetSearchRequestEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":12,"author":{"gitID":"kokonguyen191"},"content":"    private final WikiaQueryHandler wikiaQueryHandler;"},{"lineNumber":13,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":14,"author":{"gitID":"kokonguyen191"},"content":"    public InternetSearchRequestEvent(WikiaQueryHandler wikiaQueryHandler) {"},{"lineNumber":15,"author":{"gitID":"kokonguyen191"},"content":"        this.wikiaQueryHandler \u003d wikiaQueryHandler;"},{"lineNumber":16,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":18,"author":{"gitID":"kokonguyen191"},"content":"    public int getQueryNumberOfResults() {"},{"lineNumber":19,"author":{"gitID":"kokonguyen191"},"content":"        return wikiaQueryHandler.getQueryNumberOfResults();"},{"lineNumber":20,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":22,"author":{"gitID":"kokonguyen191"},"content":"    public String getRecipeQueryUrl() {"},{"lineNumber":23,"author":{"gitID":"kokonguyen191"},"content":"        return wikiaQueryHandler.getRecipeQueryUrl();"},{"lineNumber":24,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":26,"author":{"gitID":"kokonguyen191"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"kokonguyen191"},"content":"    public String toString() {"},{"lineNumber":28,"author":{"gitID":"kokonguyen191"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":29,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":31,"author":{"gitID":"kokonguyen191"},"content":"}"}],"authorContributionMap":{"kokonguyen191":31}},{"path":"src/main/java/seedu/recipe/commons/events/ui/UploadRecipesEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"nicholasangcx"},"content":"//@@author nicholasangcx"},{"lineNumber":2,"author":{"gitID":"nicholasangcx"},"content":"package seedu.recipe.commons.events.ui;"},{"lineNumber":3,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":4,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":6,"author":{"gitID":"nicholasangcx"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"nicholasangcx"},"content":" * Indicates a request to upload recipes to Dropbox"},{"lineNumber":8,"author":{"gitID":"nicholasangcx"},"content":" */"},{"lineNumber":9,"author":{"gitID":"nicholasangcx"},"content":"public class UploadRecipesEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":11,"author":{"gitID":"nicholasangcx"},"content":"    @Override"},{"lineNumber":12,"author":{"gitID":"nicholasangcx"},"content":"    public String toString() {"},{"lineNumber":13,"author":{"gitID":"nicholasangcx"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":14,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"nicholasangcx"},"content":"}"},{"lineNumber":16,"author":{"gitID":"nicholasangcx"},"content":"//@@author"}],"authorContributionMap":{"nicholasangcx":16}},{"path":"src/main/java/seedu/recipe/commons/exceptions/NoInternetConnectionException.java","lines":[{"lineNumber":1,"author":{"gitID":"kokonguyen191"},"content":"//@@author kokonguyen191"},{"lineNumber":2,"author":{"gitID":"kokonguyen191"},"content":"package seedu.recipe.commons.exceptions;"},{"lineNumber":3,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":4,"author":{"gitID":"kokonguyen191"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"kokonguyen191"},"content":" * Signals that there is no Internet connection for an action that requires one"},{"lineNumber":6,"author":{"gitID":"kokonguyen191"},"content":" */"},{"lineNumber":7,"author":{"gitID":"kokonguyen191"},"content":"public class NoInternetConnectionException extends Exception {"},{"lineNumber":8,"author":{"gitID":"kokonguyen191"},"content":"    public NoInternetConnectionException(String message) {"},{"lineNumber":9,"author":{"gitID":"kokonguyen191"},"content":"        super(message);"},{"lineNumber":10,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":11,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":12,"author":{"gitID":"kokonguyen191"},"content":"}"}],"authorContributionMap":{"kokonguyen191":12}},{"path":"src/main/java/seedu/recipe/commons/events/ui/WebParseRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"kokonguyen191"},"content":"//@@author kokonguyen191"},{"lineNumber":2,"author":{"gitID":"kokonguyen191"},"content":"package seedu.recipe.commons.events.ui;"},{"lineNumber":3,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":4,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":6,"author":{"gitID":"kokonguyen191"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"kokonguyen191"},"content":" * Indicates a request to parse the page loaded in BrowserPanel."},{"lineNumber":8,"author":{"gitID":"kokonguyen191"},"content":" */"},{"lineNumber":9,"author":{"gitID":"kokonguyen191"},"content":"public class WebParseRequestEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":11,"author":{"gitID":"kokonguyen191"},"content":"    @Override"},{"lineNumber":12,"author":{"gitID":"kokonguyen191"},"content":"    public String toString() {"},{"lineNumber":13,"author":{"gitID":"kokonguyen191"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":14,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":16,"author":{"gitID":"kokonguyen191"},"content":"}"}],"authorContributionMap":{"kokonguyen191":16}},{"path":"src/main/java/seedu/recipe/commons/events/ui/ChangeThemeRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"kokonguyen191"},"content":"//@@author kokonguyen191"},{"lineNumber":2,"author":{"gitID":"kokonguyen191"},"content":"package seedu.recipe.commons.events.ui;"},{"lineNumber":3,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":4,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":6,"author":{"gitID":"kokonguyen191"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"kokonguyen191"},"content":" * An event requesting to change the theme."},{"lineNumber":8,"author":{"gitID":"kokonguyen191"},"content":" */"},{"lineNumber":9,"author":{"gitID":"kokonguyen191"},"content":"public class ChangeThemeRequestEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"kokonguyen191"},"content":"    @Override"},{"lineNumber":11,"author":{"gitID":"kokonguyen191"},"content":"    public String toString() {"},{"lineNumber":12,"author":{"gitID":"kokonguyen191"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":13,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"kokonguyen191"},"content":"}"}],"authorContributionMap":{"kokonguyen191":14}},{"path":"src/main/java/seedu/recipe/commons/events/ui/ShareRecipeEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.model.recipe.Recipe;"},{"lineNumber":6,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":7,"author":{"gitID":"RyanAngJY"},"content":"//@@author RyanAngJY"},{"lineNumber":8,"author":{"gitID":"RyanAngJY"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"RyanAngJY"},"content":" * Indicates a request to share a recipe"},{"lineNumber":10,"author":{"gitID":"RyanAngJY"},"content":" */"},{"lineNumber":11,"author":{"gitID":"RyanAngJY"},"content":"public class ShareRecipeEvent extends BaseEvent {"},{"lineNumber":12,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":13,"author":{"gitID":"RyanAngJY"},"content":"    public final int targetIndex;"},{"lineNumber":14,"author":{"gitID":"RyanAngJY"},"content":"    public final Recipe recipe;"},{"lineNumber":15,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":16,"author":{"gitID":"RyanAngJY"},"content":"    public ShareRecipeEvent(Index targetIndex, Recipe recipeToShare) {"},{"lineNumber":17,"author":{"gitID":"RyanAngJY"},"content":"        this.targetIndex \u003d targetIndex.getZeroBased();"},{"lineNumber":18,"author":{"gitID":"RyanAngJY"},"content":"        this.recipe \u003d recipeToShare;"},{"lineNumber":19,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":21,"author":{"gitID":"RyanAngJY"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"RyanAngJY"},"content":"    public String toString() {"},{"lineNumber":23,"author":{"gitID":"RyanAngJY"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":24,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":26,"author":{"gitID":"RyanAngJY"},"content":"    public Recipe getTargetRecipe() {"},{"lineNumber":27,"author":{"gitID":"RyanAngJY"},"content":"        return recipe;"},{"lineNumber":28,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"RyanAngJY"},"content":"}"},{"lineNumber":30,"author":{"gitID":"RyanAngJY"},"content":"//@@author"}],"authorContributionMap":{"RyanAngJY":26,"-":4}},{"path":"src/main/java/seedu/recipe/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_CALORIES;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_COOKING_TIME;"},{"lineNumber":6,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_IMG;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INSTRUCTION;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_PREPARATION_TIME;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_SERVINGS;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":13,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_URL;"},{"lineNumber":14,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.exceptions.IllegalValueException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.AddCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.parser.exceptions.ParseException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Calories;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.CookingTime;"},{"lineNumber":23,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.model.recipe.Image;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Ingredient;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Instruction;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Name;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.PreparationTime;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Recipe;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Servings;"},{"lineNumber":30,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.model.recipe.Url;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.recipe.model.tag.Tag;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":35,"author":{"gitID":"-"},"content":" */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                .tokenize(args, PREFIX_NAME, PREFIX_INGREDIENT, PREFIX_INSTRUCTION, PREFIX_COOKING_TIME,"},{"lineNumber":46,"author":{"gitID":"RyanAngJY"},"content":"                        PREFIX_PREPARATION_TIME, PREFIX_CALORIES, PREFIX_SERVINGS, PREFIX_TAG, PREFIX_URL,"},{"lineNumber":47,"author":{"gitID":"RyanAngJY"},"content":"                        PREFIX_IMG);"},{"lineNumber":48,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            Ingredient ingredient \u003d ParserUtil.parseIngredientOnInitialAdd(argMultimap.getValue(PREFIX_INGREDIENT))"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                    .get();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            Instruction instruction \u003d"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                    ParserUtil.parseInstructionOnInitialAdd(argMultimap.getValue(PREFIX_INSTRUCTION)).get();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            CookingTime cookingTime \u003d"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                    ParserUtil.parseCookingTimeOnInitialAdd(argMultimap.getValue(PREFIX_COOKING_TIME)).get();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            PreparationTime preparationTime \u003d"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                    ParserUtil.parsePreparationTimeOnInitialAdd(argMultimap.getValue(PREFIX_PREPARATION_TIME)).get();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            Calories calories \u003d"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                    ParserUtil.parseCaloriesOnInitialAdd(argMultimap.getValue(PREFIX_CALORIES)).get();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            Servings servings \u003d"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                    ParserUtil.parseServingsOnInitialAdd(argMultimap.getValue(PREFIX_SERVINGS)).get();"},{"lineNumber":68,"author":{"gitID":"RyanAngJY"},"content":"            Url url \u003d ParserUtil.parseUrlOnInitialAdd(argMultimap.getValue(PREFIX_URL)).get();"},{"lineNumber":69,"author":{"gitID":"RyanAngJY"},"content":"            Image image \u003d ParserUtil.parseImageOnInitialAdd(argMultimap.getValue(PREFIX_IMG)).get();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"            Recipe recipe \u003d new Recipe(name, ingredient, instruction, cookingTime, preparationTime, calories, servings,"},{"lineNumber":73,"author":{"gitID":"RyanAngJY"},"content":"                    url, image, tagList);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"            return new AddCommand(recipe);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":11,"-":78}},{"path":"src/main/java/seedu/recipe/logic/parser/UploadCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"nicholasangcx"},"content":"//@@author nicholasangcx"},{"lineNumber":2,"author":{"gitID":"nicholasangcx"},"content":"package seedu.recipe.logic.parser;"},{"lineNumber":3,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":4,"author":{"gitID":"nicholasangcx"},"content":"import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":6,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.logic.commands.UploadCommand;"},{"lineNumber":8,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.model.file.Filename;"},{"lineNumber":10,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":11,"author":{"gitID":"nicholasangcx"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"nicholasangcx"},"content":" * Parses input arguments and creates a new UploadCommand object"},{"lineNumber":13,"author":{"gitID":"nicholasangcx"},"content":" */"},{"lineNumber":14,"author":{"gitID":"nicholasangcx"},"content":"public class UploadCommandParser implements Parser\u003cUploadCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":16,"author":{"gitID":"nicholasangcx"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"nicholasangcx"},"content":"     * Parses the given {@code String} of arguments in the context of the UploadCommand"},{"lineNumber":18,"author":{"gitID":"nicholasangcx"},"content":"     * and returns an UploadCommand object for execution."},{"lineNumber":19,"author":{"gitID":"nicholasangcx"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"nicholasangcx"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"nicholasangcx"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"nicholasangcx"},"content":"    public UploadCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"nicholasangcx"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":24,"author":{"gitID":"nicholasangcx"},"content":"        String[] tagKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":25,"author":{"gitID":"nicholasangcx"},"content":"        String filename \u003d tagKeywords[0];"},{"lineNumber":26,"author":{"gitID":"nicholasangcx"},"content":"        if (filename.isEmpty()) {"},{"lineNumber":27,"author":{"gitID":"nicholasangcx"},"content":"            throw new ParseException("},{"lineNumber":28,"author":{"gitID":"nicholasangcx"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UploadCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"nicholasangcx"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"nicholasangcx"},"content":"        try {"},{"lineNumber":31,"author":{"gitID":"nicholasangcx"},"content":"            String xmlExtensionFilename \u003d ParserUtil.parseFilename(filename);"},{"lineNumber":32,"author":{"gitID":"nicholasangcx"},"content":"            return new UploadCommand(xmlExtensionFilename);"},{"lineNumber":33,"author":{"gitID":"nicholasangcx"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":34,"author":{"gitID":"nicholasangcx"},"content":"            throw new ParseException(Filename.MESSAGE_FILENAME_CONSTRAINTS);"},{"lineNumber":35,"author":{"gitID":"nicholasangcx"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"nicholasangcx"},"content":"}"},{"lineNumber":38,"author":{"gitID":"nicholasangcx"},"content":"//@author"}],"authorContributionMap":{"nicholasangcx":38}},{"path":"src/main/java/seedu/recipe/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"hoangduong1607"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"name/\");"},{"lineNumber":10,"author":{"gitID":"hoangduong1607"},"content":"    public static final Prefix PREFIX_INGREDIENT \u003d new Prefix(\"ingredient/\");"},{"lineNumber":11,"author":{"gitID":"hoangduong1607"},"content":"    public static final Prefix PREFIX_INSTRUCTION \u003d new Prefix(\"instruction/\");"},{"lineNumber":12,"author":{"gitID":"hoangduong1607"},"content":"    public static final Prefix PREFIX_COOKING_TIME \u003d new Prefix(\"cooking_time/\");"},{"lineNumber":13,"author":{"gitID":"hoangduong1607"},"content":"    public static final Prefix PREFIX_PREPARATION_TIME \u003d new Prefix(\"preparation_time/\");"},{"lineNumber":14,"author":{"gitID":"hoangduong1607"},"content":"    public static final Prefix PREFIX_CALORIES \u003d new Prefix(\"calories/\");"},{"lineNumber":15,"author":{"gitID":"hoangduong1607"},"content":"    public static final Prefix PREFIX_SERVINGS \u003d new Prefix(\"servings/\");"},{"lineNumber":16,"author":{"gitID":"hoangduong1607"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"tag/\");"},{"lineNumber":17,"author":{"gitID":"RyanAngJY"},"content":"    public static final Prefix PREFIX_URL \u003d new Prefix(\"url/\");"},{"lineNumber":18,"author":{"gitID":"RyanAngJY"},"content":"    public static final Prefix PREFIX_IMG \u003d new Prefix(\"img/\");"},{"lineNumber":19,"author":{"gitID":"hoangduong1607"},"content":"    public static final Prefix PREFIX_GROUP_NAME \u003d new Prefix(\"group_name/\");"},{"lineNumber":20,"author":{"gitID":"hoangduong1607"},"content":"    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"index/\");"},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":2,"hoangduong1607":10,"-":9}},{"path":"src/main/java/seedu/recipe/logic/parser/TagCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"nicholasangcx"},"content":"//@@author nicholasangcx"},{"lineNumber":2,"author":{"gitID":"nicholasangcx"},"content":"package seedu.recipe.logic.parser;"},{"lineNumber":3,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":4,"author":{"gitID":"nicholasangcx"},"content":"import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":6,"author":{"gitID":"nicholasangcx"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":8,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.logic.commands.TagCommand;"},{"lineNumber":9,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.model.tag.TagContainsKeywordsPredicate;"},{"lineNumber":11,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":12,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":13,"author":{"gitID":"nicholasangcx"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"nicholasangcx"},"content":" * Parses input arguments and creates a new TagCommand object"},{"lineNumber":15,"author":{"gitID":"nicholasangcx"},"content":" */"},{"lineNumber":16,"author":{"gitID":"nicholasangcx"},"content":"public class TagCommandParser implements Parser\u003cTagCommand\u003e {"},{"lineNumber":17,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":18,"author":{"gitID":"nicholasangcx"},"content":"    private static final String REGEX \u003d \"\\\\s+\";"},{"lineNumber":19,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":20,"author":{"gitID":"nicholasangcx"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"nicholasangcx"},"content":"     * Parses the given {@code String} of arguments in the context of the TagCommand"},{"lineNumber":22,"author":{"gitID":"nicholasangcx"},"content":"     * and returns an TagCommand object for execution."},{"lineNumber":23,"author":{"gitID":"nicholasangcx"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":24,"author":{"gitID":"nicholasangcx"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"nicholasangcx"},"content":"    public TagCommand parse(String args) throws ParseException {"},{"lineNumber":26,"author":{"gitID":"nicholasangcx"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":27,"author":{"gitID":"nicholasangcx"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":28,"author":{"gitID":"nicholasangcx"},"content":"            throw new ParseException("},{"lineNumber":29,"author":{"gitID":"nicholasangcx"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitID":"nicholasangcx"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":32,"author":{"gitID":"nicholasangcx"},"content":"        String[] tagKeywords \u003d trimmedArgs.split(REGEX);"},{"lineNumber":33,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":34,"author":{"gitID":"nicholasangcx"},"content":"        return new TagCommand(new TagContainsKeywordsPredicate(Arrays.asList(tagKeywords)), tagKeywords);"},{"lineNumber":35,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"nicholasangcx"},"content":"}"},{"lineNumber":37,"author":{"gitID":"nicholasangcx"},"content":"//@@author"}],"authorContributionMap":{"nicholasangcx":37}},{"path":"src/main/java/seedu/recipe/logic/parser/ShareCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.logic.commands.ShareCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":10,"author":{"gitID":"RyanAngJY"},"content":"//@@author RyanAngJY"},{"lineNumber":11,"author":{"gitID":"RyanAngJY"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"RyanAngJY"},"content":" * Parses input arguments and creates a new ShareCommand object"},{"lineNumber":13,"author":{"gitID":"RyanAngJY"},"content":" */"},{"lineNumber":14,"author":{"gitID":"RyanAngJY"},"content":"public class ShareCommandParser implements Parser\u003cShareCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":16,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"RyanAngJY"},"content":"     * Parses the given {@code String} of arguments in the context of the ShareCommand"},{"lineNumber":18,"author":{"gitID":"RyanAngJY"},"content":"     * and returns an ShareCommand object for execution."},{"lineNumber":19,"author":{"gitID":"RyanAngJY"},"content":"     * @throws ParseException if the user input does not conform to the expected format"},{"lineNumber":20,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"RyanAngJY"},"content":"    public ShareCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"RyanAngJY"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"RyanAngJY"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":24,"author":{"gitID":"RyanAngJY"},"content":"            return new ShareCommand(index);"},{"lineNumber":25,"author":{"gitID":"RyanAngJY"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitID":"RyanAngJY"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"RyanAngJY"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShareCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"RyanAngJY"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"RyanAngJY"},"content":"}"},{"lineNumber":31,"author":{"gitID":"RyanAngJY"},"content":"//@@author"}],"authorContributionMap":{"RyanAngJY":24,"-":7}},{"path":"src/main/java/seedu/recipe/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.exceptions.NoInternetConnectionException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.util.StringUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.recipe.model.file.Filename;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Calories;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.CookingTime;"},{"lineNumber":18,"author":{"gitID":"hoangduong1607"},"content":"import seedu.recipe.model.recipe.GroupName;"},{"lineNumber":19,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.model.recipe.Image;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Ingredient;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Instruction;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Name;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.PreparationTime;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Servings;"},{"lineNumber":25,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.model.recipe.Url;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.recipe.model.tag.Tag;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":30,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":32,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":34,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":35,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":36,"author":{"gitID":"-"},"content":" */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":45,"author":{"gitID":"hoangduong1607"},"content":"     *"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"kokonguyen191"},"content":"    //@@author kokonguyen191"},{"lineNumber":81,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":82,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"kokonguyen191"},"content":"     * Returns a null {@code Ingredient} object to use as the default value if no value is given."},{"lineNumber":84,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"kokonguyen191"},"content":"    public static Ingredient getNullReferenceIngredient() throws IllegalValueException {"},{"lineNumber":86,"author":{"gitID":"kokonguyen191"},"content":"        return new Ingredient(Ingredient.NULL_INGREDIENT_REFERENCE);"},{"lineNumber":87,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":89,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"kokonguyen191"},"content":"     * Parses a {@code String ingredient} into an {@code Ingredient}."},{"lineNumber":91,"author":{"gitID":"kokonguyen191"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":92,"author":{"gitID":"kokonguyen191"},"content":"     *"},{"lineNumber":93,"author":{"gitID":"kokonguyen191"},"content":"     * @throws IllegalValueException if the given {@code ingredient} is invalid."},{"lineNumber":94,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"kokonguyen191"},"content":"    public static Ingredient parseIngredient(String ingredient) throws IllegalValueException {"},{"lineNumber":96,"author":{"gitID":"kokonguyen191"},"content":"        requireNonNull(ingredient);"},{"lineNumber":97,"author":{"gitID":"kokonguyen191"},"content":"        String trimmedIngredient \u003d ingredient.trim();"},{"lineNumber":98,"author":{"gitID":"kokonguyen191"},"content":"        if (!Ingredient.isValidIngredient(trimmedIngredient)) {"},{"lineNumber":99,"author":{"gitID":"kokonguyen191"},"content":"            throw new IllegalValueException(Ingredient.MESSAGE_INGREDIENT_CONSTRAINTS);"},{"lineNumber":100,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"kokonguyen191"},"content":"        return new Ingredient(trimmedIngredient);"},{"lineNumber":102,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":104,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"kokonguyen191"},"content":"     * Parses a {@code Optional\u003cString\u003e ingredient} into an {@code Optional\u003cIngredient\u003e}"},{"lineNumber":106,"author":{"gitID":"kokonguyen191"},"content":"     * if {@code ingredient} is present."},{"lineNumber":107,"author":{"gitID":"kokonguyen191"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":108,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"kokonguyen191"},"content":"    public static Optional\u003cIngredient\u003e parseIngredient(Optional\u003cString\u003e ingredient) throws IllegalValueException {"},{"lineNumber":110,"author":{"gitID":"kokonguyen191"},"content":"        requireNonNull(ingredient);"},{"lineNumber":111,"author":{"gitID":"kokonguyen191"},"content":"        return ingredient.isPresent() ? Optional.of(parseIngredient(ingredient.get())) : Optional.empty();"},{"lineNumber":112,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":114,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"kokonguyen191"},"content":"     * Parses a {@code Optional\u003cString\u003e ingredient} into an {@code Optional\u003cIngredient\u003e}"},{"lineNumber":116,"author":{"gitID":"kokonguyen191"},"content":"     * if {@code ingredient} is present."},{"lineNumber":117,"author":{"gitID":"kokonguyen191"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":118,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"kokonguyen191"},"content":"    public static Optional\u003cIngredient\u003e parseIngredientOnInitialAdd(Optional\u003cString\u003e ingredient)"},{"lineNumber":120,"author":{"gitID":"kokonguyen191"},"content":"            throws IllegalValueException {"},{"lineNumber":121,"author":{"gitID":"kokonguyen191"},"content":"        requireNonNull(ingredient);"},{"lineNumber":122,"author":{"gitID":"kokonguyen191"},"content":"        return ingredient.isPresent()"},{"lineNumber":123,"author":{"gitID":"kokonguyen191"},"content":"                ? Optional.of(parseIngredient(ingredient.get())) : Optional.of(getNullReferenceIngredient());"},{"lineNumber":124,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":126,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"kokonguyen191"},"content":"     * Returns a null {@code Instruction} object to use as the default value if no value is given."},{"lineNumber":128,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"kokonguyen191"},"content":"    public static Instruction getNullReferenceInstruction() throws IllegalValueException {"},{"lineNumber":130,"author":{"gitID":"kokonguyen191"},"content":"        return new Instruction(Instruction.NULL_INSTRUCTION_REFERENCE);"},{"lineNumber":131,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":133,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"kokonguyen191"},"content":"     * Parses a {@code String recipe} into an {@code Instruction}."},{"lineNumber":135,"author":{"gitID":"kokonguyen191"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":136,"author":{"gitID":"kokonguyen191"},"content":"     *"},{"lineNumber":137,"author":{"gitID":"kokonguyen191"},"content":"     * @throws IllegalValueException if the given {@code recipe} is invalid."},{"lineNumber":138,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"kokonguyen191"},"content":"    public static Instruction parseInstruction(String instruction) throws IllegalValueException {"},{"lineNumber":140,"author":{"gitID":"kokonguyen191"},"content":"        requireNonNull(instruction);"},{"lineNumber":141,"author":{"gitID":"kokonguyen191"},"content":"        String trimmedInstruction \u003d instruction.trim();"},{"lineNumber":142,"author":{"gitID":"kokonguyen191"},"content":"        if (!Instruction.isValidInstuction(trimmedInstruction)) {"},{"lineNumber":143,"author":{"gitID":"kokonguyen191"},"content":"            throw new IllegalValueException(Instruction.MESSAGE_INSTRUCTION_CONSTRAINTS);"},{"lineNumber":144,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"kokonguyen191"},"content":"        return new Instruction(trimmedInstruction);"},{"lineNumber":146,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":148,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"kokonguyen191"},"content":"     * Parses a {@code Optional\u003cString\u003e recipe} into an {@code Optional\u003cInstruction\u003e} if {@code recipe} is present."},{"lineNumber":150,"author":{"gitID":"kokonguyen191"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":151,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":152,"author":{"gitID":"kokonguyen191"},"content":"    public static Optional\u003cInstruction\u003e parseInstruction(Optional\u003cString\u003e instruction) throws IllegalValueException {"},{"lineNumber":153,"author":{"gitID":"kokonguyen191"},"content":"        requireNonNull(instruction);"},{"lineNumber":154,"author":{"gitID":"kokonguyen191"},"content":"        return instruction.isPresent() ? Optional.of(parseInstruction(instruction.get())) : Optional.empty();"},{"lineNumber":155,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":157,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"kokonguyen191"},"content":"     * Parses a {@code Optional\u003cString\u003e instruction} into an {@code Optional\u003cInstruction\u003e}"},{"lineNumber":159,"author":{"gitID":"kokonguyen191"},"content":"     * if {@code instruction} is present."},{"lineNumber":160,"author":{"gitID":"kokonguyen191"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":161,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"kokonguyen191"},"content":"    public static Optional\u003cInstruction\u003e parseInstructionOnInitialAdd(Optional\u003cString\u003e instruction)"},{"lineNumber":163,"author":{"gitID":"kokonguyen191"},"content":"            throws IllegalValueException {"},{"lineNumber":164,"author":{"gitID":"kokonguyen191"},"content":"        requireNonNull(instruction);"},{"lineNumber":165,"author":{"gitID":"kokonguyen191"},"content":"        return instruction.isPresent()"},{"lineNumber":166,"author":{"gitID":"kokonguyen191"},"content":"                ? Optional.of(parseInstruction(instruction.get())) : Optional.of(getNullReferenceInstruction());"},{"lineNumber":167,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":169,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":170,"author":{"gitID":"kokonguyen191"},"content":"     * Returns a null {@code CookingTime} object to use as the default value if no value is given."},{"lineNumber":171,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":172,"author":{"gitID":"kokonguyen191"},"content":"    public static CookingTime getNullReferenceCookingTime() throws IllegalValueException {"},{"lineNumber":173,"author":{"gitID":"kokonguyen191"},"content":"        return new CookingTime(CookingTime.NULL_COOKING_TIME_REFERENCE);"},{"lineNumber":174,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":176,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":177,"author":{"gitID":"kokonguyen191"},"content":"     * Parses a {@code String cookingTime} into a {@code CookingTime}."},{"lineNumber":178,"author":{"gitID":"kokonguyen191"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":179,"author":{"gitID":"kokonguyen191"},"content":"     *"},{"lineNumber":180,"author":{"gitID":"kokonguyen191"},"content":"     * @throws IllegalValueException if the given {@code cookingTime} is invalid."},{"lineNumber":181,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":182,"author":{"gitID":"kokonguyen191"},"content":"    public static CookingTime parseCookingTime(String cookingTime) throws IllegalValueException {"},{"lineNumber":183,"author":{"gitID":"kokonguyen191"},"content":"        requireNonNull(cookingTime);"},{"lineNumber":184,"author":{"gitID":"kokonguyen191"},"content":"        String trimmedCookingTime \u003d cookingTime.trim();"},{"lineNumber":185,"author":{"gitID":"kokonguyen191"},"content":"        if (!CookingTime.isValidCookingTime(trimmedCookingTime)) {"},{"lineNumber":186,"author":{"gitID":"kokonguyen191"},"content":"            throw new IllegalValueException(CookingTime.MESSAGE_COOKING_TIME_CONSTRAINTS);"},{"lineNumber":187,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"kokonguyen191"},"content":"        return new CookingTime(trimmedCookingTime);"},{"lineNumber":189,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":191,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":192,"author":{"gitID":"kokonguyen191"},"content":"     * Parses a {@code Optional\u003cString\u003e cookingTime} into an {@code Optional\u003cCookingTime\u003e}"},{"lineNumber":193,"author":{"gitID":"kokonguyen191"},"content":"     * if {@code cookingTime} is present."},{"lineNumber":194,"author":{"gitID":"kokonguyen191"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":195,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":196,"author":{"gitID":"kokonguyen191"},"content":"    public static Optional\u003cCookingTime\u003e parseCookingTime(Optional\u003cString\u003e cookingTime) throws IllegalValueException {"},{"lineNumber":197,"author":{"gitID":"kokonguyen191"},"content":"        requireNonNull(cookingTime);"},{"lineNumber":198,"author":{"gitID":"kokonguyen191"},"content":"        return cookingTime.isPresent()"},{"lineNumber":199,"author":{"gitID":"kokonguyen191"},"content":"                ? Optional.of(parseCookingTime(cookingTime.get())) : Optional.empty();"},{"lineNumber":200,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":202,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":203,"author":{"gitID":"kokonguyen191"},"content":"     * Parses a {@code Optional\u003cString\u003e cookingTime} into an {@code Optional\u003cCookingTime\u003e}"},{"lineNumber":204,"author":{"gitID":"kokonguyen191"},"content":"     * if {@code cookingTime} is present."},{"lineNumber":205,"author":{"gitID":"kokonguyen191"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":206,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":207,"author":{"gitID":"kokonguyen191"},"content":"    public static Optional\u003cCookingTime\u003e parseCookingTimeOnInitialAdd(Optional\u003cString\u003e cookingTime)"},{"lineNumber":208,"author":{"gitID":"kokonguyen191"},"content":"            throws IllegalValueException {"},{"lineNumber":209,"author":{"gitID":"kokonguyen191"},"content":"        requireNonNull(cookingTime);"},{"lineNumber":210,"author":{"gitID":"kokonguyen191"},"content":"        return cookingTime.isPresent()"},{"lineNumber":211,"author":{"gitID":"kokonguyen191"},"content":"                ? Optional.of(parseCookingTime(cookingTime.get())) : Optional.of(getNullReferenceCookingTime());"},{"lineNumber":212,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":214,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":215,"author":{"gitID":"kokonguyen191"},"content":"     * Returns a null {@code PreparationTime} object to use as the default value if no value is given."},{"lineNumber":216,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":217,"author":{"gitID":"kokonguyen191"},"content":"    public static PreparationTime getNullReferencePreparationTime() throws IllegalValueException {"},{"lineNumber":218,"author":{"gitID":"kokonguyen191"},"content":"        return new PreparationTime(PreparationTime.NULL_PREPARATION_TIME_REFERENCE);"},{"lineNumber":219,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":221,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":222,"author":{"gitID":"kokonguyen191"},"content":"     * Parses a {@code String preparationTime} into a {@code PreparationTime}."},{"lineNumber":223,"author":{"gitID":"kokonguyen191"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":224,"author":{"gitID":"kokonguyen191"},"content":"     *"},{"lineNumber":225,"author":{"gitID":"kokonguyen191"},"content":"     * @throws IllegalValueException if the given {@code preparationTime} is invalid."},{"lineNumber":226,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":227,"author":{"gitID":"kokonguyen191"},"content":"    public static PreparationTime parsePreparationTime(String preparationTime) throws IllegalValueException {"},{"lineNumber":228,"author":{"gitID":"kokonguyen191"},"content":"        requireNonNull(preparationTime);"},{"lineNumber":229,"author":{"gitID":"kokonguyen191"},"content":"        String trimmedPreparationTime \u003d preparationTime.trim();"},{"lineNumber":230,"author":{"gitID":"kokonguyen191"},"content":"        if (!PreparationTime.isValidPreparationTime(trimmedPreparationTime)) {"},{"lineNumber":231,"author":{"gitID":"kokonguyen191"},"content":"            throw new IllegalValueException(PreparationTime.MESSAGE_PREPARATION_TIME_CONSTRAINTS);"},{"lineNumber":232,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":233,"author":{"gitID":"kokonguyen191"},"content":"        return new PreparationTime(trimmedPreparationTime);"},{"lineNumber":234,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":236,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":237,"author":{"gitID":"kokonguyen191"},"content":"     * Parses a {@code Optional\u003cString\u003e preparationTime} into an {@code Optional\u003cPreparationTime\u003e}"},{"lineNumber":238,"author":{"gitID":"kokonguyen191"},"content":"     * if {@code preparationTime} is present."},{"lineNumber":239,"author":{"gitID":"kokonguyen191"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":240,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":241,"author":{"gitID":"kokonguyen191"},"content":"    public static Optional\u003cPreparationTime\u003e parsePreparationTime(Optional\u003cString\u003e preparationTime)"},{"lineNumber":242,"author":{"gitID":"kokonguyen191"},"content":"            throws IllegalValueException {"},{"lineNumber":243,"author":{"gitID":"kokonguyen191"},"content":"        requireNonNull(preparationTime);"},{"lineNumber":244,"author":{"gitID":"kokonguyen191"},"content":"        return preparationTime.isPresent()"},{"lineNumber":245,"author":{"gitID":"kokonguyen191"},"content":"                ? Optional.of(parsePreparationTime(preparationTime.get())) : Optional.empty();"},{"lineNumber":246,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":248,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":249,"author":{"gitID":"kokonguyen191"},"content":"     * Parses a {@code Optional\u003cString\u003e preparationTime} into an {@code Optional\u003cPreparationTime\u003e}"},{"lineNumber":250,"author":{"gitID":"kokonguyen191"},"content":"     * if {@code preparationTime} is present."},{"lineNumber":251,"author":{"gitID":"kokonguyen191"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":252,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":253,"author":{"gitID":"kokonguyen191"},"content":"    public static Optional\u003cPreparationTime\u003e parsePreparationTimeOnInitialAdd(Optional\u003cString\u003e preparationTime)"},{"lineNumber":254,"author":{"gitID":"kokonguyen191"},"content":"            throws IllegalValueException {"},{"lineNumber":255,"author":{"gitID":"kokonguyen191"},"content":"        requireNonNull(preparationTime);"},{"lineNumber":256,"author":{"gitID":"kokonguyen191"},"content":"        return preparationTime.isPresent() ? Optional.of(parsePreparationTime(preparationTime.get()))"},{"lineNumber":257,"author":{"gitID":"kokonguyen191"},"content":"                : Optional.of(getNullReferencePreparationTime());"},{"lineNumber":258,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":260,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":261,"author":{"gitID":"kokonguyen191"},"content":"     * Returns a null {@code Calories} object to use as the default value if no value is given."},{"lineNumber":262,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":263,"author":{"gitID":"kokonguyen191"},"content":"    public static Calories getNullReferenceCalories() throws IllegalValueException {"},{"lineNumber":264,"author":{"gitID":"kokonguyen191"},"content":"        return new Calories(Calories.NULL_CALORIES_REFERENCE);"},{"lineNumber":265,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":267,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":268,"author":{"gitID":"kokonguyen191"},"content":"     * Parses a {@code String calories} into a {@code Calories}."},{"lineNumber":269,"author":{"gitID":"kokonguyen191"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":270,"author":{"gitID":"kokonguyen191"},"content":"     *"},{"lineNumber":271,"author":{"gitID":"kokonguyen191"},"content":"     * @throws IllegalValueException if the given {@code calories} is invalid."},{"lineNumber":272,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":273,"author":{"gitID":"kokonguyen191"},"content":"    public static Calories parseCalories(String calories) throws IllegalValueException {"},{"lineNumber":274,"author":{"gitID":"kokonguyen191"},"content":"        requireNonNull(calories);"},{"lineNumber":275,"author":{"gitID":"kokonguyen191"},"content":"        String trimmedCalories \u003d calories.trim();"},{"lineNumber":276,"author":{"gitID":"kokonguyen191"},"content":"        if (!Calories.isValidCalories(trimmedCalories)) {"},{"lineNumber":277,"author":{"gitID":"kokonguyen191"},"content":"            throw new IllegalValueException(Calories.MESSAGE_CALORIES_CONSTRAINTS);"},{"lineNumber":278,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":279,"author":{"gitID":"kokonguyen191"},"content":"        return new Calories(trimmedCalories);"},{"lineNumber":280,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":281,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":282,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":283,"author":{"gitID":"kokonguyen191"},"content":"     * Parses a {@code Optional\u003cString\u003e calories} into an {@code Optional\u003cCalories\u003e}"},{"lineNumber":284,"author":{"gitID":"kokonguyen191"},"content":"     * if {@code calories} is present."},{"lineNumber":285,"author":{"gitID":"kokonguyen191"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":286,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":287,"author":{"gitID":"kokonguyen191"},"content":"    public static Optional\u003cCalories\u003e parseCalories(Optional\u003cString\u003e calories) throws IllegalValueException {"},{"lineNumber":288,"author":{"gitID":"kokonguyen191"},"content":"        requireNonNull(calories);"},{"lineNumber":289,"author":{"gitID":"kokonguyen191"},"content":"        return calories.isPresent()"},{"lineNumber":290,"author":{"gitID":"kokonguyen191"},"content":"                ? Optional.of(parseCalories(calories.get())) : Optional.empty();"},{"lineNumber":291,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":292,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":293,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":294,"author":{"gitID":"kokonguyen191"},"content":"     * Parses a {@code Optional\u003cString\u003e calories} into an {@code Optional\u003cCalories\u003e}"},{"lineNumber":295,"author":{"gitID":"kokonguyen191"},"content":"     * if {@code calories} is present."},{"lineNumber":296,"author":{"gitID":"kokonguyen191"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":297,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":298,"author":{"gitID":"kokonguyen191"},"content":"    public static Optional\u003cCalories\u003e parseCaloriesOnInitialAdd(Optional\u003cString\u003e calories) throws IllegalValueException {"},{"lineNumber":299,"author":{"gitID":"kokonguyen191"},"content":"        requireNonNull(calories);"},{"lineNumber":300,"author":{"gitID":"kokonguyen191"},"content":"        return calories.isPresent()"},{"lineNumber":301,"author":{"gitID":"kokonguyen191"},"content":"                ? Optional.of(parseCalories(calories.get())) : Optional.of(getNullReferenceCalories());"},{"lineNumber":302,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":303,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":304,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":305,"author":{"gitID":"kokonguyen191"},"content":"     * Returns a null {@code Servings} object to use as the default value if no value is given."},{"lineNumber":306,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":307,"author":{"gitID":"kokonguyen191"},"content":"    public static Servings getNullReferenceServings() throws IllegalValueException {"},{"lineNumber":308,"author":{"gitID":"kokonguyen191"},"content":"        return new Servings(Servings.NULL_SERVINGS_REFERENCE);"},{"lineNumber":309,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":310,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":311,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":312,"author":{"gitID":"kokonguyen191"},"content":"     * Parses a {@code String servings} into a {@code Servings}."},{"lineNumber":313,"author":{"gitID":"kokonguyen191"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":314,"author":{"gitID":"kokonguyen191"},"content":"     *"},{"lineNumber":315,"author":{"gitID":"kokonguyen191"},"content":"     * @throws IllegalValueException if the given {@code servings} is invalid."},{"lineNumber":316,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":317,"author":{"gitID":"kokonguyen191"},"content":"    public static Servings parseServings(String servings) throws IllegalValueException {"},{"lineNumber":318,"author":{"gitID":"kokonguyen191"},"content":"        requireNonNull(servings);"},{"lineNumber":319,"author":{"gitID":"kokonguyen191"},"content":"        String trimmedServings \u003d servings.trim();"},{"lineNumber":320,"author":{"gitID":"kokonguyen191"},"content":"        if (!Servings.isValidServings(trimmedServings)) {"},{"lineNumber":321,"author":{"gitID":"kokonguyen191"},"content":"            throw new IllegalValueException(Servings.MESSAGE_SERVINGS_CONSTRAINTS);"},{"lineNumber":322,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":323,"author":{"gitID":"kokonguyen191"},"content":"        return new Servings(trimmedServings);"},{"lineNumber":324,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":325,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":326,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":327,"author":{"gitID":"kokonguyen191"},"content":"     * Parses a {@code Optional\u003cString\u003e servings} into an {@code Optional\u003cServings\u003e}"},{"lineNumber":328,"author":{"gitID":"kokonguyen191"},"content":"     * if {@code servings} is present."},{"lineNumber":329,"author":{"gitID":"kokonguyen191"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":330,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":331,"author":{"gitID":"kokonguyen191"},"content":"    public static Optional\u003cServings\u003e parseServings(Optional\u003cString\u003e servings) throws IllegalValueException {"},{"lineNumber":332,"author":{"gitID":"kokonguyen191"},"content":"        requireNonNull(servings);"},{"lineNumber":333,"author":{"gitID":"kokonguyen191"},"content":"        return servings.isPresent()"},{"lineNumber":334,"author":{"gitID":"kokonguyen191"},"content":"                ? Optional.of(parseServings(servings.get())) : Optional.empty();"},{"lineNumber":335,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":336,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":337,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":338,"author":{"gitID":"kokonguyen191"},"content":"     * Parses a {@code Optional\u003cString\u003e servings} into an {@code Optional\u003cServings\u003e}"},{"lineNumber":339,"author":{"gitID":"kokonguyen191"},"content":"     * if {@code servings} is present."},{"lineNumber":340,"author":{"gitID":"kokonguyen191"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":341,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":342,"author":{"gitID":"kokonguyen191"},"content":"    public static Optional\u003cServings\u003e parseServingsOnInitialAdd(Optional\u003cString\u003e servings) throws IllegalValueException {"},{"lineNumber":343,"author":{"gitID":"kokonguyen191"},"content":"        requireNonNull(servings);"},{"lineNumber":344,"author":{"gitID":"kokonguyen191"},"content":"        return servings.isPresent()"},{"lineNumber":345,"author":{"gitID":"kokonguyen191"},"content":"                ? Optional.of(parseServings(servings.get())) : Optional.of(getNullReferenceServings());"},{"lineNumber":346,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":347,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":348,"author":{"gitID":"RyanAngJY"},"content":"    //@@author RyanAngJY"},{"lineNumber":349,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":350,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":351,"author":{"gitID":"RyanAngJY"},"content":"     * Parses a {@code String url} into an {@code Url}."},{"lineNumber":352,"author":{"gitID":"RyanAngJY"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":353,"author":{"gitID":"RyanAngJY"},"content":"     *"},{"lineNumber":354,"author":{"gitID":"RyanAngJY"},"content":"     * @throws IllegalValueException if the given {@code url} is invalid."},{"lineNumber":355,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":356,"author":{"gitID":"RyanAngJY"},"content":"    public static Url parseUrl(String url) throws IllegalValueException {"},{"lineNumber":357,"author":{"gitID":"RyanAngJY"},"content":"        requireNonNull(url);"},{"lineNumber":358,"author":{"gitID":"RyanAngJY"},"content":"        String trimmedUrl \u003d url.trim();"},{"lineNumber":359,"author":{"gitID":"RyanAngJY"},"content":"        if (!Url.isValidUrl(trimmedUrl)) {"},{"lineNumber":360,"author":{"gitID":"RyanAngJY"},"content":"            throw new IllegalValueException(Url.MESSAGE_URL_CONSTRAINTS);"},{"lineNumber":361,"author":{"gitID":"RyanAngJY"},"content":"        }"},{"lineNumber":362,"author":{"gitID":"RyanAngJY"},"content":"        return new Url(trimmedUrl);"},{"lineNumber":363,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":364,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":365,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":366,"author":{"gitID":"RyanAngJY"},"content":"     * Parses a {@code Optional\u003cString\u003e url} into an {@code Optional\u003cUrl\u003e} if {@code url} is present."},{"lineNumber":367,"author":{"gitID":"RyanAngJY"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":368,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":369,"author":{"gitID":"RyanAngJY"},"content":"    public static Optional\u003cUrl\u003e parseUrl(Optional\u003cString\u003e url) throws IllegalValueException {"},{"lineNumber":370,"author":{"gitID":"RyanAngJY"},"content":"        requireNonNull(url);"},{"lineNumber":371,"author":{"gitID":"RyanAngJY"},"content":"        return url.isPresent() ? Optional.of(parseUrl(url.get())) : Optional.empty();"},{"lineNumber":372,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":373,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":374,"author":{"gitID":"RyanAngJY"},"content":"    public static Url getNullReferenceUrl() {"},{"lineNumber":375,"author":{"gitID":"RyanAngJY"},"content":"        return new Url(Url.NULL_URL_REFERENCE);"},{"lineNumber":376,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":377,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":378,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":379,"author":{"gitID":"RyanAngJY"},"content":"     * Parses a {@code Optional\u003cString\u003e url} into an {@code Optional\u003cUrl\u003e} if {@code url} is present."},{"lineNumber":380,"author":{"gitID":"RyanAngJY"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":381,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":382,"author":{"gitID":"RyanAngJY"},"content":"    public static Optional\u003cUrl\u003e parseUrlOnInitialAdd(Optional\u003cString\u003e url) throws IllegalValueException {"},{"lineNumber":383,"author":{"gitID":"RyanAngJY"},"content":"        requireNonNull(url);"},{"lineNumber":384,"author":{"gitID":"RyanAngJY"},"content":"        return url.isPresent() ? Optional.of(parseUrl(url.get())) : Optional.of(getNullReferenceUrl());"},{"lineNumber":385,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":386,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":387,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":388,"author":{"gitID":"RyanAngJY"},"content":"     * Parses a {@code String image} into an {@code image}."},{"lineNumber":389,"author":{"gitID":"RyanAngJY"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":390,"author":{"gitID":"RyanAngJY"},"content":"     *"},{"lineNumber":391,"author":{"gitID":"RyanAngJY"},"content":"     * @throws IllegalValueException if the given {@code image} is invalid."},{"lineNumber":392,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":393,"author":{"gitID":"RyanAngJY"},"content":"    public static Image parseImage(String image) throws IllegalValueException {"},{"lineNumber":394,"author":{"gitID":"RyanAngJY"},"content":"        requireNonNull(image);"},{"lineNumber":395,"author":{"gitID":"RyanAngJY"},"content":"        String trimmedImage \u003d image.trim();"},{"lineNumber":396,"author":{"gitID":"RyanAngJY"},"content":"        try {"},{"lineNumber":397,"author":{"gitID":"RyanAngJY"},"content":"            if (!Image.isValidImage(trimmedImage)) {"},{"lineNumber":398,"author":{"gitID":"RyanAngJY"},"content":"                throw new IllegalValueException(Image.MESSAGE_IMAGE_CONSTRAINTS);"},{"lineNumber":399,"author":{"gitID":"RyanAngJY"},"content":"            }"},{"lineNumber":400,"author":{"gitID":"RyanAngJY"},"content":"        } catch (NoInternetConnectionException e) {"},{"lineNumber":401,"author":{"gitID":"RyanAngJY"},"content":"            LogsCenter.getLogger(ParserUtil.class).warning(\"No Internet connection while trying to parse image URL.\");"},{"lineNumber":402,"author":{"gitID":"RyanAngJY"},"content":"        }"},{"lineNumber":403,"author":{"gitID":"RyanAngJY"},"content":"        return new Image(trimmedImage);"},{"lineNumber":404,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":405,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":406,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":407,"author":{"gitID":"RyanAngJY"},"content":"     * Parses a {@code Optional\u003cString\u003e url} into an {@code Optional\u003cUrl\u003e} if {@code url} is present."},{"lineNumber":408,"author":{"gitID":"RyanAngJY"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":409,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":410,"author":{"gitID":"RyanAngJY"},"content":"    public static Optional\u003cImage\u003e parseImage(Optional\u003cString\u003e image) throws IllegalValueException {"},{"lineNumber":411,"author":{"gitID":"RyanAngJY"},"content":"        requireNonNull(image);"},{"lineNumber":412,"author":{"gitID":"RyanAngJY"},"content":"        return image.isPresent() ? Optional.of(parseImage(image.get())) : Optional.empty();"},{"lineNumber":413,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":414,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":415,"author":{"gitID":"RyanAngJY"},"content":"    public static Image getNullReferenceImage() {"},{"lineNumber":416,"author":{"gitID":"RyanAngJY"},"content":"        return new Image(Image.NULL_IMAGE_REFERENCE);"},{"lineNumber":417,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":418,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":419,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":420,"author":{"gitID":"RyanAngJY"},"content":"     * Parses a {@code Optional\u003cString\u003e image} into an {@code Optional\u003cImage\u003e} if {@code image} is present."},{"lineNumber":421,"author":{"gitID":"RyanAngJY"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":422,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":423,"author":{"gitID":"RyanAngJY"},"content":"    public static Optional\u003cImage\u003e parseImageOnInitialAdd(Optional\u003cString\u003e image) throws IllegalValueException {"},{"lineNumber":424,"author":{"gitID":"RyanAngJY"},"content":"        requireNonNull(image);"},{"lineNumber":425,"author":{"gitID":"RyanAngJY"},"content":"        return image.isPresent() ? Optional.of(parseImage(image.get())) : Optional.of(getNullReferenceImage());"},{"lineNumber":426,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":427,"author":{"gitID":"RyanAngJY"},"content":"    //@@author"},{"lineNumber":428,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":429,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":430,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":431,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":432,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":433,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":434,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":435,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":436,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":437,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":438,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":439,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":440,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":441,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":442,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":443,"author":{"gitID":"-"},"content":""},{"lineNumber":444,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":445,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":446,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":447,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":448,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":449,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":450,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":451,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":452,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":453,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":454,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":455,"author":{"gitID":"-"},"content":""},{"lineNumber":456,"author":{"gitID":"hoangduong1607"},"content":"    //@@author hoangduong1607"},{"lineNumber":457,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":458,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":459,"author":{"gitID":"hoangduong1607"},"content":"     * Parses {@code Collection\u003cString\u003e indices} into a {@code Set\u003cIndex\u003e}."},{"lineNumber":460,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":461,"author":{"gitID":"hoangduong1607"},"content":"    public static Set\u003cIndex\u003e parseIndices(Collection\u003cString\u003e indices) throws IllegalValueException {"},{"lineNumber":462,"author":{"gitID":"hoangduong1607"},"content":"        requireNonNull(indices);"},{"lineNumber":463,"author":{"gitID":"hoangduong1607"},"content":"        final Set\u003cIndex\u003e indexSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":464,"author":{"gitID":"hoangduong1607"},"content":"        for (String index : indices) {"},{"lineNumber":465,"author":{"gitID":"hoangduong1607"},"content":"            indexSet.add(parseIndex(index));"},{"lineNumber":466,"author":{"gitID":"hoangduong1607"},"content":"        }"},{"lineNumber":467,"author":{"gitID":"hoangduong1607"},"content":"        return indexSet;"},{"lineNumber":468,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":469,"author":{"gitID":"hoangduong1607"},"content":"    //@@author"},{"lineNumber":470,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":471,"author":{"gitID":"nicholasangcx"},"content":"    //@@author nicholasangcx"},{"lineNumber":472,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":473,"author":{"gitID":"nicholasangcx"},"content":"    /**"},{"lineNumber":474,"author":{"gitID":"nicholasangcx"},"content":"     * Parses {@code String filename} into a {@code String XmlExtensionFilename}."},{"lineNumber":475,"author":{"gitID":"nicholasangcx"},"content":"     * A .xml extension will be added to the original filename."},{"lineNumber":476,"author":{"gitID":"nicholasangcx"},"content":"     *"},{"lineNumber":477,"author":{"gitID":"nicholasangcx"},"content":"     * @throws IllegalValueException if the give {@code filename} is invalid."},{"lineNumber":478,"author":{"gitID":"nicholasangcx"},"content":"     */"},{"lineNumber":479,"author":{"gitID":"nicholasangcx"},"content":"    public static String parseFilename(String filename) throws IllegalValueException {"},{"lineNumber":480,"author":{"gitID":"nicholasangcx"},"content":"        requireNonNull(filename);"},{"lineNumber":481,"author":{"gitID":"nicholasangcx"},"content":"        if (!Filename.isValidFilename(filename)) {"},{"lineNumber":482,"author":{"gitID":"nicholasangcx"},"content":"            throw new IllegalValueException(Filename.MESSAGE_FILENAME_CONSTRAINTS);"},{"lineNumber":483,"author":{"gitID":"nicholasangcx"},"content":"        }"},{"lineNumber":484,"author":{"gitID":"nicholasangcx"},"content":"        return filename + \".xml\";"},{"lineNumber":485,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":486,"author":{"gitID":"nicholasangcx"},"content":"    //@@author"},{"lineNumber":487,"author":{"gitID":"-"},"content":""},{"lineNumber":488,"author":{"gitID":"hoangduong1607"},"content":"    //@@author hoangduong1607"},{"lineNumber":489,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":490,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":491,"author":{"gitID":"hoangduong1607"},"content":"     * Parses a {@code String groupName} into a {@code GroupName}."},{"lineNumber":492,"author":{"gitID":"hoangduong1607"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":493,"author":{"gitID":"hoangduong1607"},"content":"     *"},{"lineNumber":494,"author":{"gitID":"hoangduong1607"},"content":"     * @throws IllegalValueException if the given {@code groupName} is invalid."},{"lineNumber":495,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":496,"author":{"gitID":"hoangduong1607"},"content":"    public static GroupName parseGroupName(String groupName) throws IllegalValueException {"},{"lineNumber":497,"author":{"gitID":"hoangduong1607"},"content":"        requireNonNull(groupName);"},{"lineNumber":498,"author":{"gitID":"hoangduong1607"},"content":"        String trimmedName \u003d groupName.trim();"},{"lineNumber":499,"author":{"gitID":"hoangduong1607"},"content":"        if (!GroupName.isValidName(trimmedName)) {"},{"lineNumber":500,"author":{"gitID":"hoangduong1607"},"content":"            throw new IllegalValueException(GroupName.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":501,"author":{"gitID":"hoangduong1607"},"content":"        }"},{"lineNumber":502,"author":{"gitID":"hoangduong1607"},"content":"        return new GroupName(trimmedName);"},{"lineNumber":503,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":504,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":505,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":506,"author":{"gitID":"hoangduong1607"},"content":"     * Parses a {@code Optional\u003cString\u003e groupName} into an {@code Optional\u003cGroupName\u003e} if {@code groupName} is present."},{"lineNumber":507,"author":{"gitID":"hoangduong1607"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":508,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":509,"author":{"gitID":"hoangduong1607"},"content":"    public static Optional\u003cGroupName\u003e parseGroupName(Optional\u003cString\u003e groupName) throws IllegalValueException {"},{"lineNumber":510,"author":{"gitID":"hoangduong1607"},"content":"        requireNonNull(groupName);"},{"lineNumber":511,"author":{"gitID":"hoangduong1607"},"content":"        return groupName.isPresent() ? Optional.of(parseGroupName(groupName.get())) : Optional.empty();"},{"lineNumber":512,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":513,"author":{"gitID":"hoangduong1607"},"content":"    //@@author"},{"lineNumber":514,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kokonguyen191":268,"RyanAngJY":83,"hoangduong1607":43,"-":104,"nicholasangcx":16}},{"path":"src/main/java/seedu/recipe/logic/parser/ArgumentTokenizer.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"},{"lineNumber":10,"author":{"gitID":"-"},"content":" *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"},{"lineNumber":14,"author":{"gitID":"-"},"content":" *    in the above example.\u003cbr\u003e"},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class ArgumentTokenizer {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * respective argument values. Only the given prefixes will be recognized in the arguments string."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @param prefixes   Prefixes to tokenize the arguments string with"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * @return           ArgumentMultimap object that maps prefixes to their arguments"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        return extractArguments(argsString, positions);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Finds all zero-based prefix positions in the given arguments string."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @param prefixes   Prefixes to find in the arguments string"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * @return           List of zero-based prefix positions in the given arguments string"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        for (Prefix prefix : prefixes) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            positions.addAll(findPrefixPositions(argsString, prefix));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return positions;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * {@see findAllPrefixPositions}"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        while (prefixPosition !\u003d -1) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            positions.add(extendedPrefix);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return positions;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Returns the index of the first occurrence of {@code prefix} in"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * {@code argsString} starting from index {@code fromIndex}. An occurrence"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * such occurrence can be found."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * occurrences of \"p/\" with whitespace before it. However, if"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns 5."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"kokonguyen191"},"content":"    //@@author kokonguyen191"},{"lineNumber":77,"author":{"gitID":"kokonguyen191"},"content":"    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"},{"lineNumber":78,"author":{"gitID":"kokonguyen191"},"content":"        Pattern pattern \u003d Pattern.compile(\"[ \\n]\" + \"\\\\Q\" + prefix + \"\\\\E\");"},{"lineNumber":79,"author":{"gitID":"kokonguyen191"},"content":"        Matcher matcher \u003d pattern.matcher(argsString);"},{"lineNumber":80,"author":{"gitID":"kokonguyen191"},"content":"        if (matcher.find(fromIndex)) {"},{"lineNumber":81,"author":{"gitID":"kokonguyen191"},"content":"            return matcher.start() + 1;"},{"lineNumber":82,"author":{"gitID":"kokonguyen191"},"content":"        } else {"},{"lineNumber":83,"author":{"gitID":"kokonguyen191"},"content":"            return -1;"},{"lineNumber":84,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"kokonguyen191"},"content":"    //@@author"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * {@code argsString}."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * @return                ArgumentMultimap object that maps prefixes to their arguments"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        // Sort by start position"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // Insert a PrefixPosition to represent the preamble"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        prefixPositions.add(0, preambleMarker);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // Add a dummy PrefixPosition to represent the end of the string"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        prefixPositions.add(endPositionMarker);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        // Map prefixes to their argument values (if any)"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            // Extract and store prefixes and their arguments"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            argMultimap.put(argPrefix, argValue);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        return argMultimap;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * The end position of the value is determined by {@code nextPrefixPosition}."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    private static String extractArgumentValue(String argsString,"},{"lineNumber":127,"author":{"gitID":"-"},"content":"                                        PrefixPosition currentPrefixPosition,"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                                        PrefixPosition nextPrefixPosition) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        Prefix prefix \u003d currentPrefixPosition.getPrefix();"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        return value.trim();"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * Represents a prefix\u0027s position in an arguments string."},{"lineNumber":139,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    private static class PrefixPosition {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        private int startPosition;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        private final Prefix prefix;"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        PrefixPosition(Prefix prefix, int startPosition) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            this.prefix \u003d prefix;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            this.startPosition \u003d startPosition;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        int getStartPosition() {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            return this.startPosition;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        Prefix getPrefix() {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            return this.prefix;"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kokonguyen191":11,"-":147}},{"path":"src/main/java/seedu/recipe/logic/parser/EditCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_CALORIES;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_COOKING_TIME;"},{"lineNumber":7,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_IMG;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INSTRUCTION;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_PREPARATION_TIME;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_SERVINGS;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":14,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_URL;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.exceptions.IllegalValueException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.EditCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.EditCommand.EditRecipeDescriptor;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.parser.exceptions.ParseException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.recipe.model.tag.Tag;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":36,"author":{"gitID":"RyanAngJY"},"content":"     *"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                .tokenize(args, PREFIX_NAME, PREFIX_INGREDIENT, PREFIX_INSTRUCTION, PREFIX_COOKING_TIME,"},{"lineNumber":43,"author":{"gitID":"RyanAngJY"},"content":"                        PREFIX_PREPARATION_TIME, PREFIX_CALORIES, PREFIX_SERVINGS, PREFIX_TAG, PREFIX_URL,"},{"lineNumber":44,"author":{"gitID":"RyanAngJY"},"content":"                        PREFIX_IMG);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Index index;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        EditRecipeDescriptor editRecipeDescriptor \u003d new EditRecipeDescriptor();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editRecipeDescriptor::setName);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            ParserUtil.parseIngredient(argMultimap.getValue(PREFIX_INGREDIENT))"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                    .ifPresent(editRecipeDescriptor::setIngredient);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            ParserUtil.parseInstruction(argMultimap.getValue(PREFIX_INSTRUCTION))"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                    .ifPresent(editRecipeDescriptor::setInstruction);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            ParserUtil.parseCookingTime(argMultimap.getValue(PREFIX_COOKING_TIME))"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                    .ifPresent(editRecipeDescriptor::setCookingTime);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            ParserUtil.parsePreparationTime(argMultimap.getValue(PREFIX_PREPARATION_TIME))"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                    .ifPresent(editRecipeDescriptor::setPreparationTime);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            ParserUtil.parseCalories(argMultimap.getValue(PREFIX_CALORIES))"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                    .ifPresent(editRecipeDescriptor::setCalories);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            ParserUtil.parseServings(argMultimap.getValue(PREFIX_SERVINGS))"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                    .ifPresent(editRecipeDescriptor::setServings);"},{"lineNumber":69,"author":{"gitID":"RyanAngJY"},"content":"            ParserUtil.parseUrl(argMultimap.getValue(PREFIX_URL)).ifPresent(editRecipeDescriptor::setUrl);"},{"lineNumber":70,"author":{"gitID":"RyanAngJY"},"content":"            ParserUtil.parseImage(argMultimap.getValue(PREFIX_IMG)).ifPresent(editRecipeDescriptor::setImage);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editRecipeDescriptor::setTags);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        if (!editRecipeDescriptor.isAnyFieldEdited()) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return new EditCommand(index, editRecipeDescriptor);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":7,"-":91}},{"path":"src/main/java/seedu/recipe/logic/parser/RecipeBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.recipe.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.AccessTokenCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.AddCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.ChangeThemeCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.ClearCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.Command;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.DeleteCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.EditCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.ExitCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.FindCommand;"},{"lineNumber":18,"author":{"gitID":"hoangduong1607"},"content":"import seedu.recipe.logic.commands.GroupCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.HelpCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.HistoryCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.IngredientCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.ListCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.ParseCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.RedoCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.SearchCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.SelectCommand;"},{"lineNumber":27,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.logic.commands.ShareCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.TagCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.UndoCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.UploadCommand;"},{"lineNumber":31,"author":{"gitID":"hoangduong1607"},"content":"import seedu.recipe.logic.commands.ViewGroupCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.parser.exceptions.ParseException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":36,"author":{"gitID":"-"},"content":" */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"public class RecipeBookParser {"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e[\\\\S\\\\s]*)\");"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"RyanAngJY"},"content":"        case ShareCommand.COMMAND_WORD:"},{"lineNumber":71,"author":{"gitID":"RyanAngJY"},"content":"            return new ShareCommandParser().parse(arguments);"},{"lineNumber":72,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        case TagCommand.COMMAND_WORD:"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            return new TagCommandParser().parse(arguments);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        case UploadCommand.COMMAND_WORD:"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            return new UploadCommandParser().parse(arguments);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        case ChangeThemeCommand.COMMAND_WORD:"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            return new ChangeThemeCommand();"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        case SearchCommand.COMMAND_WORD:"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            return new SearchCommandParser().parse(arguments);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        case AccessTokenCommand.COMMAND_WORD:"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            return new AccessTokenCommandParser().parse(arguments);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"hoangduong1607"},"content":"        case GroupCommand.COMMAND_WORD:"},{"lineNumber":116,"author":{"gitID":"hoangduong1607"},"content":"            return new GroupCommandParser().parse(arguments);"},{"lineNumber":117,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":118,"author":{"gitID":"hoangduong1607"},"content":"        case ViewGroupCommand.COMMAND_WORD:"},{"lineNumber":119,"author":{"gitID":"hoangduong1607"},"content":"            return new ViewGroupCommandParser().parse(arguments);"},{"lineNumber":120,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        case ParseCommand.COMMAND_WORD:"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            return new ParseCommand();"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        case IngredientCommand.COMMAND_WORD:"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            return new IngredientCommandParser().parse(arguments);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":4,"hoangduong1607":8,"-":120}},{"path":"src/main/java/seedu/recipe/logic/parser/GroupCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"hoangduong1607"},"content":"//@@author hoangduong1607"},{"lineNumber":2,"author":{"gitID":"hoangduong1607"},"content":"package seedu.recipe.logic.parser;"},{"lineNumber":3,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":4,"author":{"gitID":"hoangduong1607"},"content":"import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"hoangduong1607"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_GROUP_NAME;"},{"lineNumber":6,"author":{"gitID":"hoangduong1607"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INDEX;"},{"lineNumber":7,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":8,"author":{"gitID":"hoangduong1607"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"hoangduong1607"},"content":"import java.util.stream.Stream;"},{"lineNumber":10,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":11,"author":{"gitID":"hoangduong1607"},"content":"import seedu.recipe.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"hoangduong1607"},"content":"import seedu.recipe.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"hoangduong1607"},"content":"import seedu.recipe.logic.commands.GroupCommand;"},{"lineNumber":14,"author":{"gitID":"hoangduong1607"},"content":"import seedu.recipe.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitID":"hoangduong1607"},"content":"import seedu.recipe.model.recipe.GroupName;"},{"lineNumber":16,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":17,"author":{"gitID":"hoangduong1607"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"hoangduong1607"},"content":" * Parses input arguments and creates a new GroupCommand object"},{"lineNumber":19,"author":{"gitID":"hoangduong1607"},"content":" */"},{"lineNumber":20,"author":{"gitID":"hoangduong1607"},"content":"public class GroupCommandParser implements Parser\u003cGroupCommand\u003e {"},{"lineNumber":21,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":22,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"hoangduong1607"},"content":"     * Parses the given {@code String} of arguments in the context of the GroupCommand"},{"lineNumber":24,"author":{"gitID":"hoangduong1607"},"content":"     * and returns an GroupCommand object for execution."},{"lineNumber":25,"author":{"gitID":"hoangduong1607"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"hoangduong1607"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":27,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"hoangduong1607"},"content":"    public GroupCommand parse(String args) throws ParseException {"},{"lineNumber":29,"author":{"gitID":"hoangduong1607"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer"},{"lineNumber":30,"author":{"gitID":"hoangduong1607"},"content":"                .tokenize(args, PREFIX_GROUP_NAME, PREFIX_INDEX);"},{"lineNumber":31,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":32,"author":{"gitID":"hoangduong1607"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_GROUP_NAME, PREFIX_INDEX) || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":33,"author":{"gitID":"hoangduong1607"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, GroupCommand.MESSAGE_USAGE));"},{"lineNumber":34,"author":{"gitID":"hoangduong1607"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":36,"author":{"gitID":"hoangduong1607"},"content":"        try {"},{"lineNumber":37,"author":{"gitID":"hoangduong1607"},"content":"            GroupName groupName \u003d ParserUtil.parseGroupName(argMultimap.getValue(PREFIX_GROUP_NAME)).get();"},{"lineNumber":38,"author":{"gitID":"hoangduong1607"},"content":"            Set\u003cIndex\u003e indexSet \u003d ParserUtil.parseIndices(argMultimap.getAllValues(PREFIX_INDEX));"},{"lineNumber":39,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":40,"author":{"gitID":"hoangduong1607"},"content":"            return new GroupCommand(groupName, indexSet);"},{"lineNumber":41,"author":{"gitID":"hoangduong1607"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":42,"author":{"gitID":"hoangduong1607"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":43,"author":{"gitID":"hoangduong1607"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":46,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"hoangduong1607"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":48,"author":{"gitID":"hoangduong1607"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":49,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"hoangduong1607"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":51,"author":{"gitID":"hoangduong1607"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":52,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"hoangduong1607"},"content":"}"}],"authorContributionMap":{"hoangduong1607":53}},{"path":"src/main/java/seedu/recipe/logic/parser/IngredientCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"nicholasangcx"},"content":"//@@author nicholasangcx"},{"lineNumber":2,"author":{"gitID":"nicholasangcx"},"content":"package seedu.recipe.logic.parser;"},{"lineNumber":3,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":4,"author":{"gitID":"nicholasangcx"},"content":"import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":6,"author":{"gitID":"nicholasangcx"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":8,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.logic.commands.IngredientCommand;"},{"lineNumber":9,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.model.recipe.IngredientContainsKeywordsPredicate;"},{"lineNumber":11,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":12,"author":{"gitID":"nicholasangcx"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"nicholasangcx"},"content":" * Parses input arguments and creates a new IngredientCommand object"},{"lineNumber":14,"author":{"gitID":"nicholasangcx"},"content":" */"},{"lineNumber":15,"author":{"gitID":"nicholasangcx"},"content":"public class IngredientCommandParser implements Parser\u003cIngredientCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":17,"author":{"gitID":"nicholasangcx"},"content":"    private static final String REGEX \u003d \"\\\\s+\";"},{"lineNumber":18,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":19,"author":{"gitID":"nicholasangcx"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"nicholasangcx"},"content":"     * Parses the given {@code String} of arguments in the context of the IngredientCommand"},{"lineNumber":21,"author":{"gitID":"nicholasangcx"},"content":"     * and returns an IngredientCommand object for execution."},{"lineNumber":22,"author":{"gitID":"nicholasangcx"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":23,"author":{"gitID":"nicholasangcx"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"nicholasangcx"},"content":"    public IngredientCommand parse(String args) throws ParseException {"},{"lineNumber":25,"author":{"gitID":"nicholasangcx"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":26,"author":{"gitID":"nicholasangcx"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":27,"author":{"gitID":"nicholasangcx"},"content":"            throw new ParseException("},{"lineNumber":28,"author":{"gitID":"nicholasangcx"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, IngredientCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"nicholasangcx"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":31,"author":{"gitID":"nicholasangcx"},"content":"        String[] ingredientKeywords \u003d trimmedArgs.split(REGEX);"},{"lineNumber":32,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":33,"author":{"gitID":"nicholasangcx"},"content":"        return new IngredientCommand(new IngredientContainsKeywordsPredicate(Arrays.asList(ingredientKeywords)),"},{"lineNumber":34,"author":{"gitID":"nicholasangcx"},"content":"                    ingredientKeywords);"},{"lineNumber":35,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"nicholasangcx"},"content":"}"},{"lineNumber":37,"author":{"gitID":"nicholasangcx"},"content":"//@@author"}],"authorContributionMap":{"nicholasangcx":37}},{"path":"src/main/java/seedu/recipe/logic/commands/util/WikiaQuery.java","lines":[{"lineNumber":1,"author":{"gitID":"kokonguyen191"},"content":"//@@author kokonguyen191"},{"lineNumber":2,"author":{"gitID":"kokonguyen191"},"content":"package seedu.recipe.logic.commands.util;"},{"lineNumber":3,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":4,"author":{"gitID":"kokonguyen191"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"kokonguyen191"},"content":" *  The API set of WikiaQueryHandler"},{"lineNumber":6,"author":{"gitID":"kokonguyen191"},"content":" */"},{"lineNumber":7,"author":{"gitID":"kokonguyen191"},"content":"public interface WikiaQuery {"},{"lineNumber":8,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":9,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":10,"author":{"gitID":"kokonguyen191"},"content":"     * Returns the string value of the URL of the query."},{"lineNumber":11,"author":{"gitID":"kokonguyen191"},"content":"     * This string can be used to get a displayable page for the {@code BrowserPanel}."},{"lineNumber":12,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":13,"author":{"gitID":"kokonguyen191"},"content":"    String getRecipeQueryUrl();"},{"lineNumber":14,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":15,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"kokonguyen191"},"content":"     * Returns the number of results from the query."},{"lineNumber":17,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"kokonguyen191"},"content":"    int getQueryNumberOfResults();"},{"lineNumber":19,"author":{"gitID":"kokonguyen191"},"content":"}"}],"authorContributionMap":{"kokonguyen191":19}},{"path":"src/main/java/seedu/recipe/logic/parser/SearchCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"kokonguyen191"},"content":"//@@author kokonguyen191"},{"lineNumber":2,"author":{"gitID":"kokonguyen191"},"content":"package seedu.recipe.logic.parser;"},{"lineNumber":3,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":4,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":6,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.logic.commands.SearchCommand;"},{"lineNumber":7,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":9,"author":{"gitID":"kokonguyen191"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"kokonguyen191"},"content":" * Parses input arguments and creates a new {@code SearchCommand} object"},{"lineNumber":11,"author":{"gitID":"kokonguyen191"},"content":" */"},{"lineNumber":12,"author":{"gitID":"kokonguyen191"},"content":"public class SearchCommandParser implements Parser\u003cSearchCommand\u003e {"},{"lineNumber":13,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":14,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"kokonguyen191"},"content":"     * Parses the given {@code String} of arguments in the context of the SearchCOmmand"},{"lineNumber":16,"author":{"gitID":"kokonguyen191"},"content":"     * and returns an {@code SearchCommand} object for execution."},{"lineNumber":17,"author":{"gitID":"kokonguyen191"},"content":"     *"},{"lineNumber":18,"author":{"gitID":"kokonguyen191"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"kokonguyen191"},"content":"    public SearchCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"kokonguyen191"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":22,"author":{"gitID":"kokonguyen191"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":23,"author":{"gitID":"kokonguyen191"},"content":"            throw new ParseException("},{"lineNumber":24,"author":{"gitID":"kokonguyen191"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":26,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":27,"author":{"gitID":"kokonguyen191"},"content":"        String[] keywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":28,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":29,"author":{"gitID":"kokonguyen191"},"content":"        return new SearchCommand(String.join(\"+\", keywords));"},{"lineNumber":30,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":32,"author":{"gitID":"kokonguyen191"},"content":"}"}],"authorContributionMap":{"kokonguyen191":32}},{"path":"src/main/java/seedu/recipe/logic/parser/ViewGroupCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"hoangduong1607"},"content":"//@@author hoangduong1607"},{"lineNumber":2,"author":{"gitID":"hoangduong1607"},"content":"package seedu.recipe.logic.parser;"},{"lineNumber":3,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":4,"author":{"gitID":"hoangduong1607"},"content":"import static seedu.recipe.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":6,"author":{"gitID":"hoangduong1607"},"content":"import seedu.recipe.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"hoangduong1607"},"content":"import seedu.recipe.logic.commands.ViewGroupCommand;"},{"lineNumber":8,"author":{"gitID":"hoangduong1607"},"content":"import seedu.recipe.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"hoangduong1607"},"content":"import seedu.recipe.model.recipe.GroupName;"},{"lineNumber":10,"author":{"gitID":"hoangduong1607"},"content":"import seedu.recipe.model.recipe.GroupPredicate;"},{"lineNumber":11,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":12,"author":{"gitID":"hoangduong1607"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"hoangduong1607"},"content":" * Parses input arguments and creates a new ViewGroupCommand object"},{"lineNumber":14,"author":{"gitID":"hoangduong1607"},"content":" */"},{"lineNumber":15,"author":{"gitID":"hoangduong1607"},"content":"public class ViewGroupCommandParser implements Parser\u003cViewGroupCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":17,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"hoangduong1607"},"content":"     * Parses the given {@code String} of arguments in the context of the ViewGroupCommand"},{"lineNumber":19,"author":{"gitID":"hoangduong1607"},"content":"     * and returns an ViewGroupCommand object for execution."},{"lineNumber":20,"author":{"gitID":"hoangduong1607"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"hoangduong1607"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":22,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"hoangduong1607"},"content":"    public ViewGroupCommand parse(String args) throws ParseException {"},{"lineNumber":24,"author":{"gitID":"hoangduong1607"},"content":"        try {"},{"lineNumber":25,"author":{"gitID":"hoangduong1607"},"content":"            GroupName groupName \u003d ParserUtil.parseGroupName(args);"},{"lineNumber":26,"author":{"gitID":"hoangduong1607"},"content":"            return new ViewGroupCommand(new GroupPredicate(groupName), groupName);"},{"lineNumber":27,"author":{"gitID":"hoangduong1607"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":28,"author":{"gitID":"hoangduong1607"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewGroupCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"hoangduong1607"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"hoangduong1607"},"content":"}"}],"authorContributionMap":{"hoangduong1607":31}},{"path":"src/main/java/seedu/recipe/logic/commands/ChangeThemeCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"kokonguyen191"},"content":"//@@author kokonguyen191"},{"lineNumber":2,"author":{"gitID":"kokonguyen191"},"content":"package seedu.recipe.logic.commands;"},{"lineNumber":3,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":4,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.commons.core.EventsCenter;"},{"lineNumber":5,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.commons.events.ui.ChangeThemeRequestEvent;"},{"lineNumber":6,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":7,"author":{"gitID":"kokonguyen191"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"kokonguyen191"},"content":" * Toggles between dark/light theme."},{"lineNumber":9,"author":{"gitID":"kokonguyen191"},"content":" */"},{"lineNumber":10,"author":{"gitID":"kokonguyen191"},"content":"public class ChangeThemeCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":12,"author":{"gitID":"kokonguyen191"},"content":"    public static final String COMMAND_WORD \u003d \"theme\";"},{"lineNumber":13,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":14,"author":{"gitID":"kokonguyen191"},"content":"    public static final String SHOWING_CHANGE_THEME_MESSAGE \u003d \"Theme changed.\";"},{"lineNumber":15,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":16,"author":{"gitID":"kokonguyen191"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"kokonguyen191"},"content":"    public CommandResult execute() {"},{"lineNumber":18,"author":{"gitID":"kokonguyen191"},"content":"        EventsCenter.getInstance().post(new ChangeThemeRequestEvent());"},{"lineNumber":19,"author":{"gitID":"kokonguyen191"},"content":"        return new CommandResult(SHOWING_CHANGE_THEME_MESSAGE);"},{"lineNumber":20,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"kokonguyen191"},"content":"}"}],"authorContributionMap":{"kokonguyen191":21}},{"path":"src/main/java/seedu/recipe/logic/commands/Command.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import com.dropbox.core.DbxException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.Messages;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.CommandHistory;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.UndoRedoStack;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.recipe.model.Model;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public abstract class Command {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    protected CommandHistory history;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    protected UndoRedoStack undoRedoStack;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of recipes."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @param displaySize used to generate summary"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @return summary message for recipes displayed"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static String getMessageForRecipeListShownSummary(int displaySize) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return String.format(Messages.MESSAGE_RECIPES_LISTED_OVERVIEW, displaySize);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"nicholasangcx"},"content":"    //@@author nicholasangcx"},{"lineNumber":30,"author":{"gitID":"nicholasangcx"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"nicholasangcx"},"content":"     * Constructs a feedback message to summarise an operation that displayed"},{"lineNumber":32,"author":{"gitID":"nicholasangcx"},"content":"     * a listing of recipes with the specified tags."},{"lineNumber":33,"author":{"gitID":"nicholasangcx"},"content":"     *"},{"lineNumber":34,"author":{"gitID":"nicholasangcx"},"content":"     * @param displaySize indicates the number of recipe listed, used to generate summary"},{"lineNumber":35,"author":{"gitID":"nicholasangcx"},"content":"     * @param tagKeywords the tags searched for, used to generate summary"},{"lineNumber":36,"author":{"gitID":"nicholasangcx"},"content":"     * @return summary message for recipes displayed"},{"lineNumber":37,"author":{"gitID":"nicholasangcx"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"nicholasangcx"},"content":"    public static String getMessageForTagListShownSummary(int displaySize, String tagKeywords) {"},{"lineNumber":39,"author":{"gitID":"nicholasangcx"},"content":"        return String.format(Messages.MESSAGE_RECIPES_WITH_TAGS_LISTED_OVERVIEW, displaySize, tagKeywords);"},{"lineNumber":40,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":42,"author":{"gitID":"nicholasangcx"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"nicholasangcx"},"content":"     * Constructs a feedback message to summarise an operation that displayed"},{"lineNumber":44,"author":{"gitID":"nicholasangcx"},"content":"     * a listing of recipes with the specified ingredients."},{"lineNumber":45,"author":{"gitID":"nicholasangcx"},"content":"     *"},{"lineNumber":46,"author":{"gitID":"nicholasangcx"},"content":"     * @param displaySize indicates the number of recipe listed, used to generate summary"},{"lineNumber":47,"author":{"gitID":"nicholasangcx"},"content":"     * @param ingredientKeywords the ingredients searched for, used to generate summary"},{"lineNumber":48,"author":{"gitID":"nicholasangcx"},"content":"     * @return summary message for recipes displayed"},{"lineNumber":49,"author":{"gitID":"nicholasangcx"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"nicholasangcx"},"content":"    public static String getMessageForIngredientListShownSummary(int displaySize, String ingredientKeywords) {"},{"lineNumber":51,"author":{"gitID":"nicholasangcx"},"content":"        return String.format(Messages.MESSAGE_RECIPES_WITH_INGREDIENTS_LISTED_OVERVIEW,"},{"lineNumber":52,"author":{"gitID":"nicholasangcx"},"content":"                displaySize, ingredientKeywords);"},{"lineNumber":53,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"nicholasangcx"},"content":"    //@@author"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result message."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * @return feedback message of the operation result for display"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public abstract CommandResult execute() throws CommandException, DbxException;"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Provides any needed dependencies to the command."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Commands making use of any of these should override this method to gain"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * access to the dependencies."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":46,"nicholasangcx":26}},{"path":"src/main/java/seedu/recipe/logic/commands/ShareCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.commons.events.ui.ShareRecipeEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Recipe;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"RyanAngJY"},"content":"//@@author RyanAngJY"},{"lineNumber":13,"author":{"gitID":"RyanAngJY"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"RyanAngJY"},"content":" * Shares on Facebook a recipe identified using it\u0027s last displayed index from the recipe book."},{"lineNumber":15,"author":{"gitID":"RyanAngJY"},"content":" */"},{"lineNumber":16,"author":{"gitID":"RyanAngJY"},"content":"public class ShareCommand extends Command {"},{"lineNumber":17,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":18,"author":{"gitID":"RyanAngJY"},"content":"    public static final String COMMAND_WORD \u003d \"share\";"},{"lineNumber":19,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":20,"author":{"gitID":"RyanAngJY"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitID":"RyanAngJY"},"content":"            + \": Shares on Facebook the recipe identified by the index number used in the last recipe listing.\\n\""},{"lineNumber":22,"author":{"gitID":"RyanAngJY"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":23,"author":{"gitID":"RyanAngJY"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":24,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":25,"author":{"gitID":"RyanAngJY"},"content":"    public static final String MESSAGE_SHARE_RECIPE_SUCCESS \u003d \"Recipe To Share: %1$s. \""},{"lineNumber":26,"author":{"gitID":"RyanAngJY"},"content":"            + \"Do make sure that you have an Internet connection.\";"},{"lineNumber":27,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":28,"author":{"gitID":"RyanAngJY"},"content":"    private final Index targetIndex;"},{"lineNumber":29,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":30,"author":{"gitID":"RyanAngJY"},"content":"    private Recipe recipeToShare;"},{"lineNumber":31,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":32,"author":{"gitID":"RyanAngJY"},"content":"    public ShareCommand(Index targetIndex) {"},{"lineNumber":33,"author":{"gitID":"RyanAngJY"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":34,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":36,"author":{"gitID":"RyanAngJY"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"RyanAngJY"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":38,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":39,"author":{"gitID":"RyanAngJY"},"content":"        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredRecipeList();"},{"lineNumber":40,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":41,"author":{"gitID":"RyanAngJY"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":42,"author":{"gitID":"RyanAngJY"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"},{"lineNumber":43,"author":{"gitID":"RyanAngJY"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":45,"author":{"gitID":"RyanAngJY"},"content":"        recipeToShare \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":46,"author":{"gitID":"RyanAngJY"},"content":"        EventsCenter.getInstance().post(new ShareRecipeEvent(targetIndex, recipeToShare));"},{"lineNumber":47,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":48,"author":{"gitID":"RyanAngJY"},"content":"        return new CommandResult(String.format(MESSAGE_SHARE_RECIPE_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":49,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":50,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":52,"author":{"gitID":"RyanAngJY"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"RyanAngJY"},"content":"    public boolean equals(Object other) {"},{"lineNumber":54,"author":{"gitID":"RyanAngJY"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":55,"author":{"gitID":"RyanAngJY"},"content":"                || (other instanceof ShareCommand // instanceof handles nulls"},{"lineNumber":56,"author":{"gitID":"RyanAngJY"},"content":"                \u0026\u0026 this.targetIndex.equals(((ShareCommand) other).targetIndex)); // state check"},{"lineNumber":57,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"RyanAngJY"},"content":"}"},{"lineNumber":59,"author":{"gitID":"RyanAngJY"},"content":"//@@author"}],"authorContributionMap":{"RyanAngJY":49,"-":10}},{"path":"src/main/java/seedu/recipe/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_CALORIES;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_COOKING_TIME;"},{"lineNumber":6,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_IMG;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INSTRUCTION;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_PREPARATION_TIME;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_SERVINGS;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":13,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_URL;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Recipe;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.exceptions.DuplicateRecipeException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * Adds a recipe to the recipe book."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a recipe to the recipe book. \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + PREFIX_INGREDIENT + \"INGREDIENT \""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + PREFIX_INSTRUCTION + \"INSTRUCTION \""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_COOKING_TIME + \"COOKING_TIME] \""},{"lineNumber":32,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PREPARATION_TIME + \"PREPARATION_TIME] \""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_CALORIES + \"CALORIES] \""},{"lineNumber":34,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_SERVINGS + \"SERVINGS] \""},{"lineNumber":35,"author":{"gitID":"RyanAngJY"},"content":"            + \"[\" + PREFIX_URL + \"URL]\\n\""},{"lineNumber":36,"author":{"gitID":"RyanAngJY"},"content":"            + \"[\" + PREFIX_IMG + \"IMAGE_PATH_NAME]\\n\""},{"lineNumber":37,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":38,"author":{"gitID":"-"},"content":"            + \"Example:\\n\" + COMMAND_WORD + \"\\n\""},{"lineNumber":39,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \" Chicken Rice\\n\""},{"lineNumber":40,"author":{"gitID":"-"},"content":"            + PREFIX_INGREDIENT + \" chicken, rice\\n\""},{"lineNumber":41,"author":{"gitID":"-"},"content":"            + PREFIX_INSTRUCTION + \"\\nCook rice\\nCook chicken\\nEnjoy\\n\""},{"lineNumber":42,"author":{"gitID":"-"},"content":"            + PREFIX_COOKING_TIME + \" 15 mins\\n\""},{"lineNumber":43,"author":{"gitID":"-"},"content":"            + PREFIX_PREPARATION_TIME + \" 5 mins\\n\""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            + PREFIX_CALORIES + \" 500\\n\""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + PREFIX_SERVINGS + \" 2\\n\""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + PREFIX_URL + \" http://recipes.wikia.com/wiki/Hainanese_Chicken_Rice\\n\""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + PREFIX_IMG + \" /Users/administrator/Desktop/myImage.jpg (for macOS) OR \""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + PREFIX_IMG + \" C:\\\\Users\\\\administrator\\\\myImage.jpg (for Windows)\\n\""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"yummy \""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"best\";"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New recipe added: %1$s\";"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_RECIPE \u003d \"This recipe already exists in the recipe book\";"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private final Recipe toAdd;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code Recipe}"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public AddCommand(Recipe recipe) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        requireNonNull(recipe);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        toAdd \u003d recipe;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            model.addRecipe(toAdd);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        } catch (DuplicateRecipeException e) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_RECIPE);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":4,"-":79}},{"path":"src/main/java/seedu/recipe/logic/commands/IngredientCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"nicholasangcx"},"content":"//@@author nicholasangcx"},{"lineNumber":2,"author":{"gitID":"nicholasangcx"},"content":"package seedu.recipe.logic.commands;"},{"lineNumber":3,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":4,"author":{"gitID":"nicholasangcx"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":6,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.model.recipe.IngredientContainsKeywordsPredicate;"},{"lineNumber":7,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":8,"author":{"gitID":"nicholasangcx"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"nicholasangcx"},"content":" * Finds and lists all recipes in recipe book whose ingredient contains any of the argument keywords."},{"lineNumber":10,"author":{"gitID":"nicholasangcx"},"content":" * Keyword matching is case sensitive."},{"lineNumber":11,"author":{"gitID":"nicholasangcx"},"content":" */"},{"lineNumber":12,"author":{"gitID":"nicholasangcx"},"content":"public class IngredientCommand extends Command {"},{"lineNumber":13,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":14,"author":{"gitID":"nicholasangcx"},"content":"    public static final String COMMAND_WORD \u003d \"ingredient\";"},{"lineNumber":15,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":16,"author":{"gitID":"nicholasangcx"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all recipes whose ingredients contain ALL of \""},{"lineNumber":17,"author":{"gitID":"nicholasangcx"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":18,"author":{"gitID":"nicholasangcx"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":19,"author":{"gitID":"nicholasangcx"},"content":"            + \"Example: \" + COMMAND_WORD + \" chicken\";"},{"lineNumber":20,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":21,"author":{"gitID":"nicholasangcx"},"content":"    private final IngredientContainsKeywordsPredicate predicate;"},{"lineNumber":22,"author":{"gitID":"nicholasangcx"},"content":"    private final String[] ingredientKeywords;"},{"lineNumber":23,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":24,"author":{"gitID":"nicholasangcx"},"content":"    public IngredientCommand(IngredientContainsKeywordsPredicate predicate, String[] ingredientKeywords) {"},{"lineNumber":25,"author":{"gitID":"nicholasangcx"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":26,"author":{"gitID":"nicholasangcx"},"content":"        this.ingredientKeywords \u003d ingredientKeywords;"},{"lineNumber":27,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":29,"author":{"gitID":"nicholasangcx"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"nicholasangcx"},"content":"    public CommandResult execute() {"},{"lineNumber":31,"author":{"gitID":"nicholasangcx"},"content":"        model.updateFilteredRecipeList(predicate);"},{"lineNumber":32,"author":{"gitID":"nicholasangcx"},"content":"        return new CommandResult(getMessageForIngredientListShownSummary"},{"lineNumber":33,"author":{"gitID":"nicholasangcx"},"content":"                (model.getFilteredRecipeList().size(), Arrays.toString(ingredientKeywords)));"},{"lineNumber":34,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":36,"author":{"gitID":"nicholasangcx"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"nicholasangcx"},"content":"    public boolean equals(Object other) {"},{"lineNumber":38,"author":{"gitID":"nicholasangcx"},"content":"        return other \u003d\u003d this // short circuit if they are the same object"},{"lineNumber":39,"author":{"gitID":"nicholasangcx"},"content":"                || (other instanceof IngredientCommand // instanceof handles nulls"},{"lineNumber":40,"author":{"gitID":"nicholasangcx"},"content":"                \u0026\u0026 this.predicate.equals(((IngredientCommand) other).predicate)); // state check"},{"lineNumber":41,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"nicholasangcx"},"content":"}"},{"lineNumber":43,"author":{"gitID":"nicholasangcx"},"content":"//@@author"}],"authorContributionMap":{"nicholasangcx":43}},{"path":"src/main/java/seedu/recipe/logic/commands/ParseCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"kokonguyen191"},"content":"//@@author kokonguyen191"},{"lineNumber":2,"author":{"gitID":"kokonguyen191"},"content":"package seedu.recipe.logic.commands;"},{"lineNumber":3,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":4,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.commons.core.EventsCenter;"},{"lineNumber":5,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.commons.events.ui.WebParseRequestEvent;"},{"lineNumber":6,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":7,"author":{"gitID":"kokonguyen191"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"kokonguyen191"},"content":" * Parses the current page loaded in the BrowserPanel."},{"lineNumber":9,"author":{"gitID":"kokonguyen191"},"content":" */"},{"lineNumber":10,"author":{"gitID":"kokonguyen191"},"content":"public class ParseCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":12,"author":{"gitID":"kokonguyen191"},"content":"    public static final String COMMAND_WORD \u003d \"parse\";"},{"lineNumber":13,"author":{"gitID":"kokonguyen191"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"ReciRecipe tried to parse the web page.\";"},{"lineNumber":14,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":15,"author":{"gitID":"kokonguyen191"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"kokonguyen191"},"content":"    public CommandResult execute() {"},{"lineNumber":17,"author":{"gitID":"kokonguyen191"},"content":"        EventsCenter.getInstance().post(new WebParseRequestEvent());"},{"lineNumber":18,"author":{"gitID":"kokonguyen191"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":19,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":21,"author":{"gitID":"kokonguyen191"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"kokonguyen191"},"content":"    public boolean equals(Object other) {"},{"lineNumber":23,"author":{"gitID":"kokonguyen191"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":24,"author":{"gitID":"kokonguyen191"},"content":"                || (other instanceof ParseCommand); // instanceof handles nulls"},{"lineNumber":25,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"kokonguyen191"},"content":"}"}],"authorContributionMap":{"kokonguyen191":26}},{"path":"src/main/java/seedu/recipe/logic/commands/AccessTokenCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"nicholasangcx"},"content":"//@@author nicholasangcx"},{"lineNumber":2,"author":{"gitID":"nicholasangcx"},"content":"package seedu.recipe.logic.commands;"},{"lineNumber":3,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":4,"author":{"gitID":"nicholasangcx"},"content":"import com.dropbox.core.DbxException;"},{"lineNumber":5,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":6,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.ui.util.CloudStorageUtil;"},{"lineNumber":7,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":8,"author":{"gitID":"nicholasangcx"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"nicholasangcx"},"content":" * Takes in the access token given by dropbox and saves it in the app"},{"lineNumber":10,"author":{"gitID":"nicholasangcx"},"content":" * to allow user to upload files easily."},{"lineNumber":11,"author":{"gitID":"nicholasangcx"},"content":" */"},{"lineNumber":12,"author":{"gitID":"nicholasangcx"},"content":"public class AccessTokenCommand extends Command {"},{"lineNumber":13,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":14,"author":{"gitID":"nicholasangcx"},"content":"    public static final String COMMAND_WORD \u003d \"token\";"},{"lineNumber":15,"author":{"gitID":"nicholasangcx"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Upload Success!\";"},{"lineNumber":16,"author":{"gitID":"nicholasangcx"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Takes in the access token given by Dropbox \""},{"lineNumber":17,"author":{"gitID":"nicholasangcx"},"content":"            + \"to allow user to upload files. *ONLY use this command directly after the upload command.*\\n\""},{"lineNumber":18,"author":{"gitID":"nicholasangcx"},"content":"            + \"Parameters: TOKEN\\n\""},{"lineNumber":19,"author":{"gitID":"nicholasangcx"},"content":"            + \"Example: \" + COMMAND_WORD + \"VALID_ACCESS_TOKEN\";"},{"lineNumber":20,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":21,"author":{"gitID":"nicholasangcx"},"content":"    private final String accessCode;"},{"lineNumber":22,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":23,"author":{"gitID":"nicholasangcx"},"content":"    public AccessTokenCommand(String code) {"},{"lineNumber":24,"author":{"gitID":"nicholasangcx"},"content":"        this.accessCode \u003d code;"},{"lineNumber":25,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":27,"author":{"gitID":"nicholasangcx"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"nicholasangcx"},"content":"    public CommandResult execute() throws DbxException {"},{"lineNumber":29,"author":{"gitID":"nicholasangcx"},"content":"        CloudStorageUtil.processAuthorizationCode(accessCode);"},{"lineNumber":30,"author":{"gitID":"nicholasangcx"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":31,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":33,"author":{"gitID":"nicholasangcx"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"nicholasangcx"},"content":"    public boolean equals(Object other) {"},{"lineNumber":35,"author":{"gitID":"nicholasangcx"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":36,"author":{"gitID":"nicholasangcx"},"content":"                || (other instanceof AccessTokenCommand // instanceof handles nulls"},{"lineNumber":37,"author":{"gitID":"nicholasangcx"},"content":"                \u0026\u0026 accessCode.equals(((AccessTokenCommand) other).accessCode));"},{"lineNumber":38,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"nicholasangcx"},"content":"}"},{"lineNumber":40,"author":{"gitID":"nicholasangcx"},"content":"//@@author"}],"authorContributionMap":{"nicholasangcx":40}},{"path":"src/main/java/seedu/recipe/logic/commands/util/WikiaQueryHandler.java","lines":[{"lineNumber":1,"author":{"gitID":"kokonguyen191"},"content":"//@@author kokonguyen191"},{"lineNumber":2,"author":{"gitID":"kokonguyen191"},"content":"package seedu.recipe.logic.commands.util;"},{"lineNumber":3,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":4,"author":{"gitID":"kokonguyen191"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":6,"author":{"gitID":"kokonguyen191"},"content":"import java.io.BufferedReader;"},{"lineNumber":7,"author":{"gitID":"kokonguyen191"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":8,"author":{"gitID":"kokonguyen191"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"kokonguyen191"},"content":"import java.io.InputStreamReader;"},{"lineNumber":10,"author":{"gitID":"kokonguyen191"},"content":"import java.net.HttpURLConnection;"},{"lineNumber":11,"author":{"gitID":"kokonguyen191"},"content":"import java.net.MalformedURLException;"},{"lineNumber":12,"author":{"gitID":"kokonguyen191"},"content":"import java.net.URL;"},{"lineNumber":13,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":14,"author":{"gitID":"kokonguyen191"},"content":"import com.restfb.json.Json;"},{"lineNumber":15,"author":{"gitID":"kokonguyen191"},"content":"import com.restfb.json.JsonObject;"},{"lineNumber":16,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":17,"author":{"gitID":"kokonguyen191"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"kokonguyen191"},"content":" * Handles a query to recipes.wikia.com"},{"lineNumber":19,"author":{"gitID":"kokonguyen191"},"content":" */"},{"lineNumber":20,"author":{"gitID":"kokonguyen191"},"content":"public class WikiaQueryHandler implements WikiaQuery {"},{"lineNumber":21,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":22,"author":{"gitID":"kokonguyen191"},"content":"    public static final String QUERY_URL \u003d \"http://recipes.wikia.com/search?query\u003d\";"},{"lineNumber":23,"author":{"gitID":"kokonguyen191"},"content":"    private static final String API_QUERY_URL \u003d \"http://recipes.wikia.com/api/v1/Search/List?query\u003d\";"},{"lineNumber":24,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":25,"author":{"gitID":"kokonguyen191"},"content":"    private String recipeToSearch;"},{"lineNumber":26,"author":{"gitID":"kokonguyen191"},"content":"    private URL queryUrl;"},{"lineNumber":27,"author":{"gitID":"kokonguyen191"},"content":"    private HttpURLConnection httpUrlConnection;"},{"lineNumber":28,"author":{"gitID":"kokonguyen191"},"content":"    private String rawDataString;"},{"lineNumber":29,"author":{"gitID":"kokonguyen191"},"content":"    private JsonObject rawDataJson;"},{"lineNumber":30,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":31,"author":{"gitID":"kokonguyen191"},"content":"    public WikiaQueryHandler(String recipeToSearch) throws AssertionError {"},{"lineNumber":32,"author":{"gitID":"kokonguyen191"},"content":"        requireNonNull(recipeToSearch);"},{"lineNumber":33,"author":{"gitID":"kokonguyen191"},"content":"        this.recipeToSearch \u003d recipeToSearch;"},{"lineNumber":34,"author":{"gitID":"kokonguyen191"},"content":"        loadUrl();"},{"lineNumber":35,"author":{"gitID":"kokonguyen191"},"content":"        startHttpConnection();"},{"lineNumber":36,"author":{"gitID":"kokonguyen191"},"content":"        getRawData();"},{"lineNumber":37,"author":{"gitID":"kokonguyen191"},"content":"        parseData();"},{"lineNumber":38,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":40,"author":{"gitID":"kokonguyen191"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"kokonguyen191"},"content":"    public String getRecipeQueryUrl() {"},{"lineNumber":42,"author":{"gitID":"kokonguyen191"},"content":"        return QUERY_URL + this.recipeToSearch;"},{"lineNumber":43,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":45,"author":{"gitID":"kokonguyen191"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"kokonguyen191"},"content":"    public int getQueryNumberOfResults() {"},{"lineNumber":47,"author":{"gitID":"kokonguyen191"},"content":"        return rawDataString \u003d\u003d null ? 0 : rawDataJson.get(\"total\").asInt();"},{"lineNumber":48,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":50,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"kokonguyen191"},"content":"     * Creates a {@code URL} object from given {@code recipeToSearch} string."},{"lineNumber":52,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"kokonguyen191"},"content":"    private void loadUrl() {"},{"lineNumber":54,"author":{"gitID":"kokonguyen191"},"content":"        requireNonNull(recipeToSearch);"},{"lineNumber":55,"author":{"gitID":"kokonguyen191"},"content":"        try {"},{"lineNumber":56,"author":{"gitID":"kokonguyen191"},"content":"            queryUrl \u003d new URL(API_QUERY_URL + recipeToSearch);"},{"lineNumber":57,"author":{"gitID":"kokonguyen191"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":58,"author":{"gitID":"kokonguyen191"},"content":"            throw new AssertionError(\"Invalid query URL. This should not happen.\", mue);"},{"lineNumber":59,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":62,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"kokonguyen191"},"content":"     * Creates a HTTP connection from the {@code URL} object."},{"lineNumber":64,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"kokonguyen191"},"content":"    private void startHttpConnection() {"},{"lineNumber":66,"author":{"gitID":"kokonguyen191"},"content":"        requireNonNull(queryUrl);"},{"lineNumber":67,"author":{"gitID":"kokonguyen191"},"content":"        try {"},{"lineNumber":68,"author":{"gitID":"kokonguyen191"},"content":"            httpUrlConnection \u003d (HttpURLConnection) queryUrl.openConnection();"},{"lineNumber":69,"author":{"gitID":"kokonguyen191"},"content":"            httpUrlConnection.setRequestMethod(\"GET\");"},{"lineNumber":70,"author":{"gitID":"kokonguyen191"},"content":"        } catch (IOException ioe) {"},{"lineNumber":71,"author":{"gitID":"kokonguyen191"},"content":"            throw new AssertionError(\"Something went wrong while the app was \""},{"lineNumber":72,"author":{"gitID":"kokonguyen191"},"content":"                    + \"trying to create a connection to \" + queryUrl.toExternalForm(), ioe);"},{"lineNumber":73,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":76,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"kokonguyen191"},"content":"     * Reads the HTTP connection and prints data to {@code rawDataString}."},{"lineNumber":78,"author":{"gitID":"kokonguyen191"},"content":"     * Adapted from https://stackoverflow.com/questions/1485708/how-do-i-do-a-http-get-in-java"},{"lineNumber":79,"author":{"gitID":"kokonguyen191"},"content":"     *"},{"lineNumber":80,"author":{"gitID":"kokonguyen191"},"content":"     * @throws AssertionError when the app cannot read data from the HTTP connection. Usually this happens when"},{"lineNumber":81,"author":{"gitID":"kokonguyen191"},"content":"     * there\u0027s no Internet connection."},{"lineNumber":82,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"kokonguyen191"},"content":"    private void getRawData() throws AssertionError {"},{"lineNumber":84,"author":{"gitID":"kokonguyen191"},"content":"        requireNonNull(queryUrl);"},{"lineNumber":85,"author":{"gitID":"kokonguyen191"},"content":"        requireNonNull(httpUrlConnection);"},{"lineNumber":86,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":87,"author":{"gitID":"kokonguyen191"},"content":"        StringBuilder result \u003d new StringBuilder();"},{"lineNumber":88,"author":{"gitID":"kokonguyen191"},"content":"        BufferedReader br;"},{"lineNumber":89,"author":{"gitID":"kokonguyen191"},"content":"        try {"},{"lineNumber":90,"author":{"gitID":"kokonguyen191"},"content":"            br \u003d new BufferedReader(new InputStreamReader(httpUrlConnection.getInputStream()));"},{"lineNumber":91,"author":{"gitID":"kokonguyen191"},"content":"            String line;"},{"lineNumber":92,"author":{"gitID":"kokonguyen191"},"content":"            while ((line \u003d br.readLine()) !\u003d null) {"},{"lineNumber":93,"author":{"gitID":"kokonguyen191"},"content":"                result.append(line);"},{"lineNumber":94,"author":{"gitID":"kokonguyen191"},"content":"            }"},{"lineNumber":95,"author":{"gitID":"kokonguyen191"},"content":"            br.close();"},{"lineNumber":96,"author":{"gitID":"kokonguyen191"},"content":"            rawDataString \u003d result.toString();"},{"lineNumber":97,"author":{"gitID":"kokonguyen191"},"content":"        } catch (FileNotFoundException fnfe) {"},{"lineNumber":98,"author":{"gitID":"kokonguyen191"},"content":"            rawDataString \u003d null;"},{"lineNumber":99,"author":{"gitID":"kokonguyen191"},"content":"        } catch (IOException ie) {"},{"lineNumber":100,"author":{"gitID":"kokonguyen191"},"content":"            throw new AssertionError(\"Something wrong happened while the app \""},{"lineNumber":101,"author":{"gitID":"kokonguyen191"},"content":"                    + \"was trying to read data from the url \" + queryUrl.toExternalForm(), ie);"},{"lineNumber":102,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":105,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"kokonguyen191"},"content":"     * Gets a {@code JSONObject} from {@code rawDataString}"},{"lineNumber":107,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"kokonguyen191"},"content":"    private void parseData() {"},{"lineNumber":109,"author":{"gitID":"kokonguyen191"},"content":"        if (rawDataString !\u003d null) {"},{"lineNumber":110,"author":{"gitID":"kokonguyen191"},"content":"            rawDataJson \u003d (JsonObject) Json.parse(rawDataString);"},{"lineNumber":111,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"kokonguyen191"},"content":"}"}],"authorContributionMap":{"kokonguyen191":113}},{"path":"src/main/java/seedu/recipe/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Recipe;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Selects a recipe identified using it\u0027s last displayed index from the recipe book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":20,"author":{"gitID":"-"},"content":"            + \": Selects the recipe identified by the index number used in the last recipe listing.\\n\""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"RyanAngJY"},"content":"    public static final String MESSAGE_SELECT_RECIPE_SUCCESS \u003d \"Selected Recipe:\\n%s\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":27,"author":{"gitID":"RyanAngJY"},"content":"    private Recipe selectedRecipe \u003d null;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"RyanAngJY"},"content":"    public Recipe getSelectedRecipe() {"},{"lineNumber":34,"author":{"gitID":"RyanAngJY"},"content":"        return selectedRecipe;"},{"lineNumber":35,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredRecipeList();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"RyanAngJY"},"content":"        selectedRecipe \u003d model.getFilteredRecipeList().get(targetIndex.getZeroBased());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":48,"author":{"gitID":"RyanAngJY"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_RECIPE_SUCCESS,"},{"lineNumber":49,"author":{"gitID":"RyanAngJY"},"content":"                selectedRecipe.getTextFormattedRecipe()));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":9,"-":49}},{"path":"src/main/java/seedu/recipe/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_CALORIES;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_COOKING_TIME;"},{"lineNumber":6,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_IMG;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INGREDIENT;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INSTRUCTION;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_PREPARATION_TIME;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_SERVINGS;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":13,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_URL;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.recipe.model.Model.PREDICATE_SHOW_ALL_RECIPES;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.Messages;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.index.Index;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.util.CollectionUtil;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.recipe.logic.commands.exceptions.CommandException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Calories;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.CookingTime;"},{"lineNumber":29,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.model.recipe.Image;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Ingredient;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Instruction;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Name;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.PreparationTime;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Recipe;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Servings;"},{"lineNumber":36,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.model.recipe.Url;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.exceptions.DuplicateRecipeException;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.exceptions.RecipeNotFoundException;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.recipe.model.tag.Tag;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":42,"author":{"gitID":"-"},"content":" * Edits the details of an existing recipe in the recipe book."},{"lineNumber":43,"author":{"gitID":"-"},"content":" */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the recipe identified \""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last recipe listing. \""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":51,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":53,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_INGREDIENT + \"INGREDIENT] \""},{"lineNumber":54,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_INSTRUCTION + \"INSTRUCTION] \""},{"lineNumber":55,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_COOKING_TIME + \"COOKING_TIME] \""},{"lineNumber":56,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PREPARATION_TIME + \"PREPARATION_TIME] \""},{"lineNumber":57,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_CALORIES + \"PREFIX_CALORIES] \""},{"lineNumber":58,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_SERVINGS + \"PREFIX_SERVINGS] \""},{"lineNumber":59,"author":{"gitID":"RyanAngJY"},"content":"            + \"[\" + PREFIX_URL + \"URL] \""},{"lineNumber":60,"author":{"gitID":"RyanAngJY"},"content":"            + \"[\" + PREFIX_IMG + \"IMAGE_FILE_PATH] \""},{"lineNumber":61,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":62,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":63,"author":{"gitID":"RyanAngJY"},"content":"            + PREFIX_PREPARATION_TIME + \"5 mins \""},{"lineNumber":64,"author":{"gitID":"RyanAngJY"},"content":"            + PREFIX_INGREDIENT + \"chicken, rice\";"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_RECIPE_SUCCESS \u003d \"Edited Recipe: %1$s\";"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_RECIPE \u003d \"This recipe already exists in the recipe book.\";"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    private final EditRecipeDescriptor editRecipeDescriptor;"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    private Recipe recipeToEdit;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    private Recipe editedRecipe;"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * @param index of the recipe in the filtered recipe list to edit"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * @param editRecipeDescriptor details to edit the recipe with"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditRecipeDescriptor editRecipeDescriptor) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        requireNonNull(editRecipeDescriptor);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        this.editRecipeDescriptor \u003d new EditRecipeDescriptor(editRecipeDescriptor);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            model.updateRecipe(recipeToEdit, editedRecipe);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        } catch (DuplicateRecipeException dpe) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_RECIPE);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        } catch (RecipeNotFoundException pnfe) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target recipe cannot be missing\");"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        model.updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_RECIPE_SUCCESS, editedRecipe));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredRecipeList();"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        recipeToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        editedRecipe \u003d createEditedRecipe(recipeToEdit, editRecipeDescriptor);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Recipe} with the details of {@code recipeToEdit}"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * edited with {@code editRecipeDescriptor}."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    private static Recipe createEditedRecipe(Recipe recipeToEdit, EditRecipeDescriptor editRecipeDescriptor) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assert recipeToEdit !\u003d null;"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editRecipeDescriptor.getName().orElse(recipeToEdit.getName());"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        Ingredient updatedIngredient \u003d editRecipeDescriptor.getIngredient().orElse(recipeToEdit.getIngredient());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        Instruction updatedInstruction \u003d editRecipeDescriptor.getInstruction().orElse(recipeToEdit.getInstruction());"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        CookingTime updatedCookingTime \u003d"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                editRecipeDescriptor.getCookingTime().orElse(recipeToEdit.getCookingTime());"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        PreparationTime updatedPreparationTime \u003d"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                editRecipeDescriptor.getPreparationTime().orElse(recipeToEdit.getPreparationTime());"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        Calories updatedCalories \u003d"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                editRecipeDescriptor.getCalories().orElse(recipeToEdit.getCalories());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        Servings updatedServings \u003d"},{"lineNumber":130,"author":{"gitID":"-"},"content":"                editRecipeDescriptor.getServings().orElse(recipeToEdit.getServings());"},{"lineNumber":131,"author":{"gitID":"RyanAngJY"},"content":"        Url updatedUrl \u003d editRecipeDescriptor.getUrl().orElse(recipeToEdit.getUrl());"},{"lineNumber":132,"author":{"gitID":"RyanAngJY"},"content":"        Image updatedImage \u003d editRecipeDescriptor.getImage().orElse(recipeToEdit.getImage());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editRecipeDescriptor.getTags().orElse(recipeToEdit.getTags());"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        return new Recipe(updatedName, updatedIngredient, updatedInstruction, updatedCookingTime,"},{"lineNumber":136,"author":{"gitID":"RyanAngJY"},"content":"                updatedPreparationTime, updatedCalories, updatedServings, updatedUrl, updatedImage, updatedTags);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":154,"author":{"gitID":"-"},"content":"                \u0026\u0026 editRecipeDescriptor.equals(e.editRecipeDescriptor)"},{"lineNumber":155,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(recipeToEdit, e.recipeToEdit);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Stores the details to edit the recipe with. Each non-empty field value will replace the"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * corresponding field value of the recipe."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    public static class EditRecipeDescriptor {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        private Ingredient ingredient;"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        private Instruction instruction;"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        private CookingTime cookingTime;"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        private PreparationTime preparationTime;"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        private Calories calories;"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        private Servings servings;"},{"lineNumber":170,"author":{"gitID":"RyanAngJY"},"content":"        private Url url;"},{"lineNumber":171,"author":{"gitID":"RyanAngJY"},"content":"        private Image image;"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        public EditRecipeDescriptor() {}"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":177,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":178,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":179,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        public EditRecipeDescriptor(EditRecipeDescriptor toCopy) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"            setIngredient(toCopy.ingredient);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            setInstruction(toCopy.instruction);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            setCookingTime(toCopy.cookingTime);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            setPreparationTime(toCopy.preparationTime);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"            setCalories(toCopy.calories);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            setServings(toCopy.servings);"},{"lineNumber":188,"author":{"gitID":"RyanAngJY"},"content":"            setUrl(toCopy.url);"},{"lineNumber":189,"author":{"gitID":"RyanAngJY"},"content":"            setImage(toCopy.image);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":194,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":195,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.ingredient, this.instruction, this.cookingTime,"},{"lineNumber":198,"author":{"gitID":"RyanAngJY"},"content":"                    this.preparationTime, this.calories, this.servings, this.url, this.image, this.tags);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"        public void setIngredient(Ingredient ingredient) {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"            this.ingredient \u003d ingredient;"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"        public Optional\u003cIngredient\u003e getIngredient() {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(ingredient);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"        public void setInstruction(Instruction instruction) {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"            this.instruction \u003d instruction;"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"        public Optional\u003cInstruction\u003e getInstruction() {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(instruction);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"        public void setCookingTime(CookingTime cookingTime) {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"            this.cookingTime \u003d cookingTime;"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"        public Optional\u003cCookingTime\u003e getCookingTime() {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(cookingTime);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"        public void setPreparationTime(PreparationTime preparationTime) {"},{"lineNumber":234,"author":{"gitID":"-"},"content":"            this.preparationTime \u003d preparationTime;"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"        public Optional\u003cPreparationTime\u003e getPreparationTime() {"},{"lineNumber":238,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(preparationTime);"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"        public void setCalories(Calories calories) {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"            this.calories \u003d calories;"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"        public Optional\u003cCalories\u003e getCalories() {"},{"lineNumber":246,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(calories);"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"        public void setServings(Servings servings) {"},{"lineNumber":250,"author":{"gitID":"-"},"content":"            this.servings \u003d servings;"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"        public Optional\u003cServings\u003e getServings() {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(servings);"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"RyanAngJY"},"content":"        public void setUrl(Url url) {"},{"lineNumber":258,"author":{"gitID":"RyanAngJY"},"content":"            this.url \u003d url;"},{"lineNumber":259,"author":{"gitID":"RyanAngJY"},"content":"        }"},{"lineNumber":260,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":261,"author":{"gitID":"RyanAngJY"},"content":"        public Optional\u003cUrl\u003e getUrl() {"},{"lineNumber":262,"author":{"gitID":"RyanAngJY"},"content":"            return Optional.ofNullable(url);"},{"lineNumber":263,"author":{"gitID":"RyanAngJY"},"content":"        }"},{"lineNumber":264,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":265,"author":{"gitID":"RyanAngJY"},"content":"        public void setImage(Image image) {"},{"lineNumber":266,"author":{"gitID":"RyanAngJY"},"content":"            this.image \u003d image;"},{"lineNumber":267,"author":{"gitID":"RyanAngJY"},"content":"        }"},{"lineNumber":268,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":269,"author":{"gitID":"RyanAngJY"},"content":"        public Optional\u003cImage\u003e getImage() {"},{"lineNumber":270,"author":{"gitID":"RyanAngJY"},"content":"            return Optional.ofNullable(image);"},{"lineNumber":271,"author":{"gitID":"RyanAngJY"},"content":"        }"},{"lineNumber":272,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":274,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":275,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":276,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":278,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":282,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":283,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":284,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":285,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":286,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":287,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":288,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":289,"author":{"gitID":"-"},"content":""},{"lineNumber":290,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":292,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":293,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":294,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":295,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":296,"author":{"gitID":"-"},"content":""},{"lineNumber":297,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":298,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditRecipeDescriptor)) {"},{"lineNumber":299,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":300,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":303,"author":{"gitID":"-"},"content":"            EditRecipeDescriptor e \u003d (EditRecipeDescriptor) other;"},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":306,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPreparationTime().equals(e.getPreparationTime())"},{"lineNumber":307,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getIngredient().equals(e.getIngredient())"},{"lineNumber":308,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getInstruction().equals(e.getInstruction())"},{"lineNumber":309,"author":{"gitID":"RyanAngJY"},"content":"                    \u0026\u0026 getUrl().equals(e.getUrl())"},{"lineNumber":310,"author":{"gitID":"RyanAngJY"},"content":"                    \u0026\u0026 getImage().equals(e.getImage())"},{"lineNumber":311,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":312,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":313,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":314,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":34,"-":280}},{"path":"src/main/java/seedu/recipe/logic/commands/SearchCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"kokonguyen191"},"content":"//@@author kokonguyen191"},{"lineNumber":2,"author":{"gitID":"kokonguyen191"},"content":"package seedu.recipe.logic.commands;"},{"lineNumber":3,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":4,"author":{"gitID":"kokonguyen191"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":6,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.commons.core.EventsCenter;"},{"lineNumber":7,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.commons.events.ui.InternetSearchRequestEvent;"},{"lineNumber":8,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.logic.commands.util.WikiaQueryHandler;"},{"lineNumber":10,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":11,"author":{"gitID":"kokonguyen191"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"kokonguyen191"},"content":" * Searches for a recipe on the Internet."},{"lineNumber":13,"author":{"gitID":"kokonguyen191"},"content":" */"},{"lineNumber":14,"author":{"gitID":"kokonguyen191"},"content":"public class SearchCommand extends Command {"},{"lineNumber":15,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":16,"author":{"gitID":"kokonguyen191"},"content":"    public static final String COMMAND_WORD \u003d \"search\";"},{"lineNumber":17,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":18,"author":{"gitID":"kokonguyen191"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":19,"author":{"gitID":"kokonguyen191"},"content":"            + \": Search the recipe on recipes.wikia.com.\\n\""},{"lineNumber":20,"author":{"gitID":"kokonguyen191"},"content":"            + \"Parameters: NAME\\n\""},{"lineNumber":21,"author":{"gitID":"kokonguyen191"},"content":"            + \"Example: \" + COMMAND_WORD + \" chicken rice\";"},{"lineNumber":22,"author":{"gitID":"kokonguyen191"},"content":"    public static final String MESSAGE_NO_RESULT \u003d \"No recipes found. Please try another query.\";"},{"lineNumber":23,"author":{"gitID":"kokonguyen191"},"content":"    public static final String MESSAGE_FAILURE \u003d \"ReciRecipe couldn\u0027t search. Are you connected to the Internet?\";"},{"lineNumber":24,"author":{"gitID":"kokonguyen191"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Found %1$s recipe(s). Please wait while the page is loading...\";"},{"lineNumber":25,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":26,"author":{"gitID":"kokonguyen191"},"content":"    private final String recipeToSearch;"},{"lineNumber":27,"author":{"gitID":"kokonguyen191"},"content":"    private WikiaQueryHandler wikiaQueryHandler;"},{"lineNumber":28,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":29,"author":{"gitID":"kokonguyen191"},"content":"    public SearchCommand(String recipeToSearch) {"},{"lineNumber":30,"author":{"gitID":"kokonguyen191"},"content":"        requireNonNull(recipeToSearch);"},{"lineNumber":31,"author":{"gitID":"kokonguyen191"},"content":"        this.recipeToSearch \u003d recipeToSearch;"},{"lineNumber":32,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":34,"author":{"gitID":"kokonguyen191"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"kokonguyen191"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":36,"author":{"gitID":"kokonguyen191"},"content":"        try {"},{"lineNumber":37,"author":{"gitID":"kokonguyen191"},"content":"            this.wikiaQueryHandler \u003d new WikiaQueryHandler(recipeToSearch);"},{"lineNumber":38,"author":{"gitID":"kokonguyen191"},"content":"        } catch (AssertionError ae) {"},{"lineNumber":39,"author":{"gitID":"kokonguyen191"},"content":"            return new CommandResult(MESSAGE_FAILURE);"},{"lineNumber":40,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"kokonguyen191"},"content":"        int noOfResult \u003d wikiaQueryHandler.getQueryNumberOfResults();"},{"lineNumber":42,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":43,"author":{"gitID":"kokonguyen191"},"content":"        EventsCenter.getInstance().post(new InternetSearchRequestEvent(wikiaQueryHandler));"},{"lineNumber":44,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":45,"author":{"gitID":"kokonguyen191"},"content":"        if (noOfResult \u003d\u003d 0) {"},{"lineNumber":46,"author":{"gitID":"kokonguyen191"},"content":"            return new CommandResult(MESSAGE_NO_RESULT);"},{"lineNumber":47,"author":{"gitID":"kokonguyen191"},"content":"        } else {"},{"lineNumber":48,"author":{"gitID":"kokonguyen191"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, noOfResult));"},{"lineNumber":49,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":52,"author":{"gitID":"kokonguyen191"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"kokonguyen191"},"content":"    public boolean equals(Object other) {"},{"lineNumber":54,"author":{"gitID":"kokonguyen191"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":55,"author":{"gitID":"kokonguyen191"},"content":"                || (other instanceof SearchCommand // instanceof handles nulls"},{"lineNumber":56,"author":{"gitID":"kokonguyen191"},"content":"                \u0026\u0026 this.recipeToSearch.equals(((SearchCommand) other).recipeToSearch)); // state check"},{"lineNumber":57,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"kokonguyen191"},"content":"}"},{"lineNumber":59,"author":{"gitID":"kokonguyen191"},"content":""}],"authorContributionMap":{"kokonguyen191":59}},{"path":"src/main/java/seedu/recipe/logic/commands/UploadCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"nicholasangcx"},"content":"//@@author nicholasangcx"},{"lineNumber":2,"author":{"gitID":"nicholasangcx"},"content":"package seedu.recipe.logic.commands;"},{"lineNumber":3,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":4,"author":{"gitID":"nicholasangcx"},"content":"import static seedu.recipe.model.file.Filename.MESSAGE_FILENAME_CONSTRAINTS;"},{"lineNumber":5,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":6,"author":{"gitID":"nicholasangcx"},"content":"import com.dropbox.core.DbxException;"},{"lineNumber":7,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":8,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.commons.core.EventsCenter;"},{"lineNumber":9,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.commons.events.ui.UploadRecipesEvent;"},{"lineNumber":10,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.ui.util.CloudStorageUtil;"},{"lineNumber":11,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":12,"author":{"gitID":"nicholasangcx"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"nicholasangcx"},"content":" * Uploads all recipes online, specifically to Dropbox."},{"lineNumber":14,"author":{"gitID":"nicholasangcx"},"content":" */"},{"lineNumber":15,"author":{"gitID":"nicholasangcx"},"content":"public class UploadCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":17,"author":{"gitID":"nicholasangcx"},"content":"    public static final String COMMAND_WORD \u003d \"upload\";"},{"lineNumber":18,"author":{"gitID":"nicholasangcx"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Upload Success!\";"},{"lineNumber":19,"author":{"gitID":"nicholasangcx"},"content":"    public static final String MESSAGE_FAILURE \u003d \"Failed to upload!\";"},{"lineNumber":20,"author":{"gitID":"nicholasangcx"},"content":"    public static final String MESSAGE_ACCESS_TOKEN \u003d \"Copy and paste the code given by dropbox.\\n\""},{"lineNumber":21,"author":{"gitID":"nicholasangcx"},"content":"            + \"Example: token VALID_ACCESS_TOKEN\";"},{"lineNumber":22,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":23,"author":{"gitID":"nicholasangcx"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Uploads all recipes to your Dropbox with the \""},{"lineNumber":24,"author":{"gitID":"nicholasangcx"},"content":"            + \"specified filename, with no spaces. It will only take in the first parameter. \""},{"lineNumber":25,"author":{"gitID":"nicholasangcx"},"content":"            + MESSAGE_FILENAME_CONSTRAINTS + \"\\n\""},{"lineNumber":26,"author":{"gitID":"nicholasangcx"},"content":"            + \"Parameters: KEYWORD\\n\""},{"lineNumber":27,"author":{"gitID":"nicholasangcx"},"content":"            + \"Example: \" + COMMAND_WORD + \" RecipeBook\";"},{"lineNumber":28,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":29,"author":{"gitID":"nicholasangcx"},"content":"    private final String xmlExtensionFilename;"},{"lineNumber":30,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":31,"author":{"gitID":"nicholasangcx"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"nicholasangcx"},"content":"     * Creates an UploadCommand to upload recipebook.xml to Dropbox with the"},{"lineNumber":33,"author":{"gitID":"nicholasangcx"},"content":"     * specified {@code String XmlExtensionFilename}"},{"lineNumber":34,"author":{"gitID":"nicholasangcx"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"nicholasangcx"},"content":"    public UploadCommand(String xmlExtensionFilename) {"},{"lineNumber":36,"author":{"gitID":"nicholasangcx"},"content":"        this.xmlExtensionFilename \u003d xmlExtensionFilename;"},{"lineNumber":37,"author":{"gitID":"nicholasangcx"},"content":"        CloudStorageUtil.setUploadFilename(xmlExtensionFilename);"},{"lineNumber":38,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":40,"author":{"gitID":"nicholasangcx"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"nicholasangcx"},"content":"    public CommandResult execute() throws DbxException {"},{"lineNumber":42,"author":{"gitID":"nicholasangcx"},"content":"        if (CloudStorageUtil.hasAccessToken()) {"},{"lineNumber":43,"author":{"gitID":"nicholasangcx"},"content":"            CloudStorageUtil.upload();"},{"lineNumber":44,"author":{"gitID":"nicholasangcx"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":45,"author":{"gitID":"nicholasangcx"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"nicholasangcx"},"content":"        EventsCenter.getInstance().post(new UploadRecipesEvent());"},{"lineNumber":47,"author":{"gitID":"nicholasangcx"},"content":"        return new CommandResult(MESSAGE_ACCESS_TOKEN);"},{"lineNumber":48,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":50,"author":{"gitID":"nicholasangcx"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"nicholasangcx"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitID":"nicholasangcx"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":53,"author":{"gitID":"nicholasangcx"},"content":"                || (other instanceof UploadCommand // instanceof handles nulls"},{"lineNumber":54,"author":{"gitID":"nicholasangcx"},"content":"                \u0026\u0026 xmlExtensionFilename.equals(((UploadCommand) other).xmlExtensionFilename));"},{"lineNumber":55,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"nicholasangcx"},"content":"}"},{"lineNumber":57,"author":{"gitID":"nicholasangcx"},"content":"//@@author"}],"authorContributionMap":{"nicholasangcx":57}},{"path":"src/main/java/seedu/recipe/logic/commands/ViewGroupCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"hoangduong1607"},"content":"//@@author hoangduong1607"},{"lineNumber":2,"author":{"gitID":"hoangduong1607"},"content":"package seedu.recipe.logic.commands;"},{"lineNumber":3,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":4,"author":{"gitID":"hoangduong1607"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":6,"author":{"gitID":"hoangduong1607"},"content":"import seedu.recipe.model.recipe.GroupName;"},{"lineNumber":7,"author":{"gitID":"hoangduong1607"},"content":"import seedu.recipe.model.recipe.GroupPredicate;"},{"lineNumber":8,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":9,"author":{"gitID":"hoangduong1607"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"hoangduong1607"},"content":" * Lists all recipes in a group to the user."},{"lineNumber":11,"author":{"gitID":"hoangduong1607"},"content":" */"},{"lineNumber":12,"author":{"gitID":"hoangduong1607"},"content":"public class ViewGroupCommand extends Command {"},{"lineNumber":13,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":14,"author":{"gitID":"hoangduong1607"},"content":"    public static final String COMMAND_WORD \u003d \"view_group\";"},{"lineNumber":15,"author":{"gitID":"hoangduong1607"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":16,"author":{"gitID":"hoangduong1607"},"content":"            + \": Views recipes in a group.\\n\""},{"lineNumber":17,"author":{"gitID":"hoangduong1607"},"content":"            + \"Parameters: GROUP_NAME\\n\""},{"lineNumber":18,"author":{"gitID":"hoangduong1607"},"content":"            + \"Example: \" + COMMAND_WORD + \" Best\";"},{"lineNumber":19,"author":{"gitID":"hoangduong1607"},"content":"    public static final String MESSAGE_GROUP_NOT_FOUND \u003d \"Recipe group not found!\";"},{"lineNumber":20,"author":{"gitID":"hoangduong1607"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all recipes in [%s]\";"},{"lineNumber":21,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":22,"author":{"gitID":"hoangduong1607"},"content":"    private GroupPredicate groupPredicate;"},{"lineNumber":23,"author":{"gitID":"hoangduong1607"},"content":"    private GroupName groupName;"},{"lineNumber":24,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":25,"author":{"gitID":"hoangduong1607"},"content":"    public ViewGroupCommand(GroupPredicate groupPredicate, GroupName groupName) {"},{"lineNumber":26,"author":{"gitID":"hoangduong1607"},"content":"        requireNonNull(groupPredicate);"},{"lineNumber":27,"author":{"gitID":"hoangduong1607"},"content":"        requireNonNull(groupName);"},{"lineNumber":28,"author":{"gitID":"hoangduong1607"},"content":"        this.groupPredicate \u003d groupPredicate;"},{"lineNumber":29,"author":{"gitID":"hoangduong1607"},"content":"        this.groupName \u003d groupName;"},{"lineNumber":30,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":32,"author":{"gitID":"hoangduong1607"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"hoangduong1607"},"content":"    public CommandResult execute() {"},{"lineNumber":34,"author":{"gitID":"hoangduong1607"},"content":"        requireNonNull(model);"},{"lineNumber":35,"author":{"gitID":"hoangduong1607"},"content":"        model.updateFilteredRecipeList(groupPredicate);"},{"lineNumber":36,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":37,"author":{"gitID":"hoangduong1607"},"content":"        String commandResult;"},{"lineNumber":38,"author":{"gitID":"hoangduong1607"},"content":"        if (model.getFilteredRecipeList().size() \u003e 0) {"},{"lineNumber":39,"author":{"gitID":"hoangduong1607"},"content":"            commandResult \u003d String.format(MESSAGE_SUCCESS, groupName);"},{"lineNumber":40,"author":{"gitID":"hoangduong1607"},"content":"        } else {"},{"lineNumber":41,"author":{"gitID":"hoangduong1607"},"content":"            commandResult \u003d MESSAGE_GROUP_NOT_FOUND;"},{"lineNumber":42,"author":{"gitID":"hoangduong1607"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":44,"author":{"gitID":"hoangduong1607"},"content":"        return new CommandResult(commandResult);"},{"lineNumber":45,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":47,"author":{"gitID":"hoangduong1607"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"hoangduong1607"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"hoangduong1607"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"hoangduong1607"},"content":"                || (other instanceof ViewGroupCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"hoangduong1607"},"content":"                \u0026\u0026 this.groupName.equals(((ViewGroupCommand) other).groupName)); // state check"},{"lineNumber":52,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"hoangduong1607"},"content":"}"}],"authorContributionMap":{"hoangduong1607":53}},{"path":"src/main/java/seedu/recipe/storage/ImageDownloader.java","lines":[{"lineNumber":1,"author":{"gitID":"kokonguyen191"},"content":"//@@author kokonguyen191"},{"lineNumber":2,"author":{"gitID":"kokonguyen191"},"content":"package seedu.recipe.storage;"},{"lineNumber":3,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":4,"author":{"gitID":"kokonguyen191"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":6,"author":{"gitID":"kokonguyen191"},"content":"import java.awt.image.BufferedImage;"},{"lineNumber":7,"author":{"gitID":"kokonguyen191"},"content":"import java.io.ByteArrayOutputStream;"},{"lineNumber":8,"author":{"gitID":"kokonguyen191"},"content":"import java.io.File;"},{"lineNumber":9,"author":{"gitID":"kokonguyen191"},"content":"import java.io.FileOutputStream;"},{"lineNumber":10,"author":{"gitID":"kokonguyen191"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitID":"kokonguyen191"},"content":"import java.net.MalformedURLException;"},{"lineNumber":12,"author":{"gitID":"kokonguyen191"},"content":"import java.net.URL;"},{"lineNumber":13,"author":{"gitID":"kokonguyen191"},"content":"import java.security.MessageDigest;"},{"lineNumber":14,"author":{"gitID":"kokonguyen191"},"content":"import java.security.NoSuchAlgorithmException;"},{"lineNumber":15,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":16,"author":{"gitID":"kokonguyen191"},"content":"import javax.imageio.ImageIO;"},{"lineNumber":17,"author":{"gitID":"kokonguyen191"},"content":"import javax.xml.bind.annotation.adapters.HexBinaryAdapter;"},{"lineNumber":18,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":19,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.commons.exceptions.NoInternetConnectionException;"},{"lineNumber":20,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.commons.util.FileUtil;"},{"lineNumber":21,"author":{"gitID":"kokonguyen191"},"content":"import seedu.recipe.model.recipe.Image;"},{"lineNumber":22,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":23,"author":{"gitID":"kokonguyen191"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"kokonguyen191"},"content":" * Downloads images and saves them to the images folder"},{"lineNumber":25,"author":{"gitID":"kokonguyen191"},"content":" */"},{"lineNumber":26,"author":{"gitID":"kokonguyen191"},"content":"public class ImageDownloader {"},{"lineNumber":27,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":28,"author":{"gitID":"kokonguyen191"},"content":"    public static final String DOWNLOADED_IMAGE_FORMAT \u003d \"jpg\";"},{"lineNumber":29,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":30,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"kokonguyen191"},"content":"     * Returns true if {@code testUrl} is valid and links to an image"},{"lineNumber":32,"author":{"gitID":"kokonguyen191"},"content":"     *"},{"lineNumber":33,"author":{"gitID":"kokonguyen191"},"content":"     * @throws NoInternetConnectionException if there\u0027s no Internet connection while the app is trying to read"},{"lineNumber":34,"author":{"gitID":"kokonguyen191"},"content":"     * from the URL."},{"lineNumber":35,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"kokonguyen191"},"content":"    public static boolean isValidImageUrl(String testUrl) throws NoInternetConnectionException {"},{"lineNumber":37,"author":{"gitID":"kokonguyen191"},"content":"        URL imageUrl;"},{"lineNumber":38,"author":{"gitID":"kokonguyen191"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"kokonguyen191"},"content":"            imageUrl \u003d new URL(testUrl);"},{"lineNumber":40,"author":{"gitID":"kokonguyen191"},"content":"        } catch (MalformedURLException e) {"},{"lineNumber":41,"author":{"gitID":"kokonguyen191"},"content":"            return false;"},{"lineNumber":42,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":44,"author":{"gitID":"kokonguyen191"},"content":"        BufferedImage image;"},{"lineNumber":45,"author":{"gitID":"kokonguyen191"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"kokonguyen191"},"content":"            image \u003d ImageIO.read(imageUrl);"},{"lineNumber":47,"author":{"gitID":"kokonguyen191"},"content":"        } catch (IOException ioe) {"},{"lineNumber":48,"author":{"gitID":"kokonguyen191"},"content":"            throw new NoInternetConnectionException(\"Cannot get image from \""},{"lineNumber":49,"author":{"gitID":"kokonguyen191"},"content":"                    + testUrl + \". It is likely the app is not connected to the Internet.\");"},{"lineNumber":50,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":52,"author":{"gitID":"kokonguyen191"},"content":"        return image !\u003d null;"},{"lineNumber":53,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":55,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"kokonguyen191"},"content":"     * Downloads an iamge from {@code imageUrlString} to the images folder."},{"lineNumber":57,"author":{"gitID":"kokonguyen191"},"content":"     *"},{"lineNumber":58,"author":{"gitID":"kokonguyen191"},"content":"     * @throws NoInternetConnectionException if there is no Internet connection when"},{"lineNumber":59,"author":{"gitID":"kokonguyen191"},"content":"     * ImageDownloader is trying to parse the URL."},{"lineNumber":60,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"kokonguyen191"},"content":"    public static String downloadImage(String imageUrlString) throws NoInternetConnectionException {"},{"lineNumber":62,"author":{"gitID":"kokonguyen191"},"content":"        assert isValidImageUrl(imageUrlString);"},{"lineNumber":63,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":64,"author":{"gitID":"kokonguyen191"},"content":"        try {"},{"lineNumber":65,"author":{"gitID":"kokonguyen191"},"content":"            byte[] imageData \u003d getImageData(imageUrlString);"},{"lineNumber":66,"author":{"gitID":"kokonguyen191"},"content":"            String md5Checksum \u003d calculateMd5Checksum(imageData);"},{"lineNumber":67,"author":{"gitID":"kokonguyen191"},"content":"            String filePath \u003d getImageFilePathFromImageName(md5Checksum);"},{"lineNumber":68,"author":{"gitID":"kokonguyen191"},"content":"            File file \u003d prepareImageFile(filePath);"},{"lineNumber":69,"author":{"gitID":"kokonguyen191"},"content":"            if (file !\u003d null) {"},{"lineNumber":70,"author":{"gitID":"kokonguyen191"},"content":"                writeDataToFile(imageData, file);"},{"lineNumber":71,"author":{"gitID":"kokonguyen191"},"content":"            }"},{"lineNumber":72,"author":{"gitID":"kokonguyen191"},"content":"            return filePath;"},{"lineNumber":73,"author":{"gitID":"kokonguyen191"},"content":"        } catch (IOException ioe) {"},{"lineNumber":74,"author":{"gitID":"kokonguyen191"},"content":"            throw new AssertionError("},{"lineNumber":75,"author":{"gitID":"kokonguyen191"},"content":"                    \"Something wrong happened when the app was trying to \""},{"lineNumber":76,"author":{"gitID":"kokonguyen191"},"content":"                            + \"download image data from \" + imageUrlString"},{"lineNumber":77,"author":{"gitID":"kokonguyen191"},"content":"                            + \". This should not happen.\", ioe);"},{"lineNumber":78,"author":{"gitID":"kokonguyen191"},"content":"        } catch (NoSuchAlgorithmException nsaee) {"},{"lineNumber":79,"author":{"gitID":"kokonguyen191"},"content":"            throw new AssertionError("},{"lineNumber":80,"author":{"gitID":"kokonguyen191"},"content":"                    \"Something wrong happened when the app was trying to \""},{"lineNumber":81,"author":{"gitID":"kokonguyen191"},"content":"                            + \"calculate the MD5 checksum for the iamge from \" + imageUrlString"},{"lineNumber":82,"author":{"gitID":"kokonguyen191"},"content":"                            + \". This should not happen.\", nsaee);"},{"lineNumber":83,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":86,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"kokonguyen191"},"content":"     * Gets a byte array from the {@code imageUrlSring}"},{"lineNumber":88,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"kokonguyen191"},"content":"    private static byte[] getImageData(String imageUrlString) throws IOException {"},{"lineNumber":90,"author":{"gitID":"kokonguyen191"},"content":"        URL imageUrl \u003d new URL(imageUrlString);"},{"lineNumber":91,"author":{"gitID":"kokonguyen191"},"content":"        BufferedImage image \u003d ImageIO.read(imageUrl);"},{"lineNumber":92,"author":{"gitID":"kokonguyen191"},"content":"        ByteArrayOutputStream byteArrayOutputStream \u003d new ByteArrayOutputStream();"},{"lineNumber":93,"author":{"gitID":"kokonguyen191"},"content":"        ImageIO.write(image, DOWNLOADED_IMAGE_FORMAT, byteArrayOutputStream);"},{"lineNumber":94,"author":{"gitID":"kokonguyen191"},"content":"        byteArrayOutputStream.flush();"},{"lineNumber":95,"author":{"gitID":"kokonguyen191"},"content":"        byte[] data \u003d byteArrayOutputStream.toByteArray();"},{"lineNumber":96,"author":{"gitID":"kokonguyen191"},"content":"        byteArrayOutputStream.close();"},{"lineNumber":97,"author":{"gitID":"kokonguyen191"},"content":"        return data;"},{"lineNumber":98,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":100,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"kokonguyen191"},"content":"     * Returns the MD5 checksum String value of given {@code data}"},{"lineNumber":102,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"kokonguyen191"},"content":"    private static String calculateMd5Checksum(byte[] data) throws NoSuchAlgorithmException {"},{"lineNumber":104,"author":{"gitID":"kokonguyen191"},"content":"        requireNonNull(data);"},{"lineNumber":105,"author":{"gitID":"kokonguyen191"},"content":"        MessageDigest md5 \u003d MessageDigest.getInstance(\"MD5\");"},{"lineNumber":106,"author":{"gitID":"kokonguyen191"},"content":"        md5.update(data);"},{"lineNumber":107,"author":{"gitID":"kokonguyen191"},"content":"        // Adapted from https://stackoverflow.com/questions/5470219/get-md5-string-from-message-digest"},{"lineNumber":108,"author":{"gitID":"kokonguyen191"},"content":"        HexBinaryAdapter hexBinaryAdapter \u003d new HexBinaryAdapter();"},{"lineNumber":109,"author":{"gitID":"kokonguyen191"},"content":"        return hexBinaryAdapter.marshal(md5.digest());"},{"lineNumber":110,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":112,"author":{"gitID":"kokonguyen191"},"content":"    private static String getImageFilePathFromImageName(String imageName) {"},{"lineNumber":113,"author":{"gitID":"kokonguyen191"},"content":"        return Image.IMAGE_STORAGE_FOLDER + imageName + \".\" + DOWNLOADED_IMAGE_FORMAT;"},{"lineNumber":114,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":116,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"kokonguyen191"},"content":"     * Checks if {@code filePath} exists or not. If not, creates a file at {@code filePath} as well as any parent"},{"lineNumber":118,"author":{"gitID":"kokonguyen191"},"content":"     * directory if necessary, then returns the File object."},{"lineNumber":119,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"kokonguyen191"},"content":"    private static File prepareImageFile(String filePath) throws IOException {"},{"lineNumber":121,"author":{"gitID":"kokonguyen191"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":122,"author":{"gitID":"kokonguyen191"},"content":"        if (FileUtil.createFile(file)) {"},{"lineNumber":123,"author":{"gitID":"kokonguyen191"},"content":"            return file;"},{"lineNumber":124,"author":{"gitID":"kokonguyen191"},"content":"        } else {"},{"lineNumber":125,"author":{"gitID":"kokonguyen191"},"content":"            return null;"},{"lineNumber":126,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":129,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"kokonguyen191"},"content":"     * Writes given {@code data} to {@code file}"},{"lineNumber":131,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"kokonguyen191"},"content":"    private static void writeDataToFile(byte[] data, File file) throws IOException {"},{"lineNumber":133,"author":{"gitID":"kokonguyen191"},"content":"        requireNonNull(data);"},{"lineNumber":134,"author":{"gitID":"kokonguyen191"},"content":"        requireNonNull(file);"},{"lineNumber":135,"author":{"gitID":"kokonguyen191"},"content":"        FileOutputStream fileOutputStream \u003d new FileOutputStream(file);"},{"lineNumber":136,"author":{"gitID":"kokonguyen191"},"content":"        fileOutputStream.write(data);"},{"lineNumber":137,"author":{"gitID":"kokonguyen191"},"content":"        fileOutputStream.flush();"},{"lineNumber":138,"author":{"gitID":"kokonguyen191"},"content":"        fileOutputStream.close();"},{"lineNumber":139,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"kokonguyen191"},"content":"}"}],"authorContributionMap":{"kokonguyen191":140}},{"path":"src/main/java/seedu/recipe/logic/commands/TagCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"nicholasangcx"},"content":"//@@author nicholasangcx"},{"lineNumber":2,"author":{"gitID":"nicholasangcx"},"content":"package seedu.recipe.logic.commands;"},{"lineNumber":3,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":4,"author":{"gitID":"nicholasangcx"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":6,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.model.tag.TagContainsKeywordsPredicate;"},{"lineNumber":7,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":8,"author":{"gitID":"nicholasangcx"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"nicholasangcx"},"content":" * Finds and lists all recipes in recipe book whose tag contains any of the argument keywords."},{"lineNumber":10,"author":{"gitID":"nicholasangcx"},"content":" * Keyword matching is case sensitive."},{"lineNumber":11,"author":{"gitID":"nicholasangcx"},"content":" */"},{"lineNumber":12,"author":{"gitID":"nicholasangcx"},"content":"public class TagCommand extends Command {"},{"lineNumber":13,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":14,"author":{"gitID":"nicholasangcx"},"content":"    public static final String COMMAND_WORD \u003d \"tag\";"},{"lineNumber":15,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":16,"author":{"gitID":"nicholasangcx"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all recipes whose tags contain any of \""},{"lineNumber":17,"author":{"gitID":"nicholasangcx"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":18,"author":{"gitID":"nicholasangcx"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":19,"author":{"gitID":"nicholasangcx"},"content":"            + \"Example: \" + COMMAND_WORD + \" favourite\";"},{"lineNumber":20,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":21,"author":{"gitID":"nicholasangcx"},"content":"    // Contains a list of strings of the keywords"},{"lineNumber":22,"author":{"gitID":"nicholasangcx"},"content":"    private final TagContainsKeywordsPredicate predicate;"},{"lineNumber":23,"author":{"gitID":"nicholasangcx"},"content":"    private final String[] tagKeywords;"},{"lineNumber":24,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":25,"author":{"gitID":"nicholasangcx"},"content":"    public TagCommand(TagContainsKeywordsPredicate predicate, String[] tagKeywords) {"},{"lineNumber":26,"author":{"gitID":"nicholasangcx"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":27,"author":{"gitID":"nicholasangcx"},"content":"        this.tagKeywords \u003d tagKeywords;"},{"lineNumber":28,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":30,"author":{"gitID":"nicholasangcx"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"nicholasangcx"},"content":"    public CommandResult execute() {"},{"lineNumber":32,"author":{"gitID":"nicholasangcx"},"content":"        model.updateFilteredRecipeList(predicate);"},{"lineNumber":33,"author":{"gitID":"nicholasangcx"},"content":"        return new CommandResult(getMessageForTagListShownSummary"},{"lineNumber":34,"author":{"gitID":"nicholasangcx"},"content":"                                    (model.getFilteredRecipeList().size(), Arrays.toString(tagKeywords)));"},{"lineNumber":35,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":37,"author":{"gitID":"nicholasangcx"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"nicholasangcx"},"content":"    public boolean equals(Object other) {"},{"lineNumber":39,"author":{"gitID":"nicholasangcx"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":40,"author":{"gitID":"nicholasangcx"},"content":"                || (other instanceof TagCommand // instanceof handles nulls"},{"lineNumber":41,"author":{"gitID":"nicholasangcx"},"content":"                \u0026\u0026 this.predicate.equals(((TagCommand) other).predicate)); // state check"},{"lineNumber":42,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"nicholasangcx"},"content":"}"},{"lineNumber":44,"author":{"gitID":"nicholasangcx"},"content":"//@@author"}],"authorContributionMap":{"nicholasangcx":44}},{"path":"src/main/java/seedu/recipe/logic/commands/GroupCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"hoangduong1607"},"content":"//@@author hoangduong1607"},{"lineNumber":2,"author":{"gitID":"hoangduong1607"},"content":"package seedu.recipe.logic.commands;"},{"lineNumber":3,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":4,"author":{"gitID":"hoangduong1607"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"hoangduong1607"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_GROUP_NAME;"},{"lineNumber":6,"author":{"gitID":"hoangduong1607"},"content":"import static seedu.recipe.logic.parser.CliSyntax.PREFIX_INDEX;"},{"lineNumber":7,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":8,"author":{"gitID":"hoangduong1607"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"hoangduong1607"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":11,"author":{"gitID":"hoangduong1607"},"content":"import seedu.recipe.commons.core.Messages;"},{"lineNumber":12,"author":{"gitID":"hoangduong1607"},"content":"import seedu.recipe.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"hoangduong1607"},"content":"import seedu.recipe.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"hoangduong1607"},"content":"import seedu.recipe.model.recipe.GroupName;"},{"lineNumber":15,"author":{"gitID":"hoangduong1607"},"content":"import seedu.recipe.model.recipe.Recipe;"},{"lineNumber":16,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":17,"author":{"gitID":"hoangduong1607"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"hoangduong1607"},"content":" * Groups selected recipes."},{"lineNumber":19,"author":{"gitID":"hoangduong1607"},"content":" */"},{"lineNumber":20,"author":{"gitID":"hoangduong1607"},"content":"public class GroupCommand extends UndoableCommand {"},{"lineNumber":21,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":22,"author":{"gitID":"hoangduong1607"},"content":"    public static final String COMMAND_WORD \u003d \"group\";"},{"lineNumber":23,"author":{"gitID":"hoangduong1607"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":24,"author":{"gitID":"hoangduong1607"},"content":"            + \": Groups the recipes identified by the indices numbers used in the last recipe listing.\\n\""},{"lineNumber":25,"author":{"gitID":"hoangduong1607"},"content":"            + \"Parameters: \""},{"lineNumber":26,"author":{"gitID":"hoangduong1607"},"content":"            + PREFIX_GROUP_NAME + \"GROUP_NAME \""},{"lineNumber":27,"author":{"gitID":"hoangduong1607"},"content":"            + PREFIX_INDEX + \"INDEX \""},{"lineNumber":28,"author":{"gitID":"hoangduong1607"},"content":"            + \"[\" + PREFIX_INDEX + \"INDEX]... (must be a positive integer)\\n\""},{"lineNumber":29,"author":{"gitID":"hoangduong1607"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":30,"author":{"gitID":"hoangduong1607"},"content":"            + PREFIX_GROUP_NAME + \"Best \""},{"lineNumber":31,"author":{"gitID":"hoangduong1607"},"content":"            + PREFIX_INDEX + \"1 \""},{"lineNumber":32,"author":{"gitID":"hoangduong1607"},"content":"            + PREFIX_INDEX + \"3 \";"},{"lineNumber":33,"author":{"gitID":"hoangduong1607"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Created new recipe group: %s\";"},{"lineNumber":34,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":35,"author":{"gitID":"hoangduong1607"},"content":"    private GroupName groupName;"},{"lineNumber":36,"author":{"gitID":"hoangduong1607"},"content":"    private Set\u003cIndex\u003e targetIndices;"},{"lineNumber":37,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":38,"author":{"gitID":"hoangduong1607"},"content":"    public GroupCommand(GroupName groupName, Set\u003cIndex\u003e targetIndices) {"},{"lineNumber":39,"author":{"gitID":"hoangduong1607"},"content":"        requireNonNull(groupName);"},{"lineNumber":40,"author":{"gitID":"hoangduong1607"},"content":"        requireNonNull(targetIndices);"},{"lineNumber":41,"author":{"gitID":"hoangduong1607"},"content":"        this.targetIndices \u003d targetIndices;"},{"lineNumber":42,"author":{"gitID":"hoangduong1607"},"content":"        this.groupName \u003d groupName;"},{"lineNumber":43,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":45,"author":{"gitID":"hoangduong1607"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"hoangduong1607"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":47,"author":{"gitID":"hoangduong1607"},"content":"        requireNonNull(model);"},{"lineNumber":48,"author":{"gitID":"hoangduong1607"},"content":"        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredRecipeList();"},{"lineNumber":49,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":50,"author":{"gitID":"hoangduong1607"},"content":"        for (Index index : targetIndices) {"},{"lineNumber":51,"author":{"gitID":"hoangduong1607"},"content":"            if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":52,"author":{"gitID":"hoangduong1607"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"},{"lineNumber":53,"author":{"gitID":"hoangduong1607"},"content":"            }"},{"lineNumber":54,"author":{"gitID":"hoangduong1607"},"content":"            Recipe recipe \u003d model.getFilteredRecipeList().get(index.getZeroBased());"},{"lineNumber":55,"author":{"gitID":"hoangduong1607"},"content":"            recipe.addNewGroup(groupName);"},{"lineNumber":56,"author":{"gitID":"hoangduong1607"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":58,"author":{"gitID":"hoangduong1607"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, groupName));"},{"lineNumber":59,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":61,"author":{"gitID":"hoangduong1607"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"hoangduong1607"},"content":"    public boolean equals(Object other) {"},{"lineNumber":63,"author":{"gitID":"hoangduong1607"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":64,"author":{"gitID":"hoangduong1607"},"content":"                || (other instanceof GroupCommand // instanceof handles nulls"},{"lineNumber":65,"author":{"gitID":"hoangduong1607"},"content":"                \u0026\u0026 this.targetIndices.equals(((GroupCommand) other).targetIndices)"},{"lineNumber":66,"author":{"gitID":"hoangduong1607"},"content":"                \u0026\u0026 this.groupName.equals(((GroupCommand) other).groupName)); // state check"},{"lineNumber":67,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"hoangduong1607"},"content":"}"}],"authorContributionMap":{"hoangduong1607":68}},{"path":"src/main/java/seedu/recipe/storage/XmlRecipeBookStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.exceptions.DataConversionException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.util.FileUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.recipe.model.ReadOnlyRecipeBook;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A class to access RecipeBook data stored as an xml file on the hard disk."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class XmlRecipeBookStorage implements RecipeBookStorage {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlRecipeBookStorage.class);"},{"lineNumber":23,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private String filePath;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public XmlRecipeBookStorage(String filePath) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public String getRecipeBookFilePath() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyRecipeBook\u003e readRecipeBook() throws DataConversionException, IOException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return readRecipeBook(filePath);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Similar to {@link #readRecipeBook()}"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyRecipeBook\u003e readRecipeBook(String filePath) throws DataConversionException,"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                                                                                 FileNotFoundException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        File recipeBookFile \u003d new File(filePath);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        if (!recipeBookFile.exists()) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            logger.info(\"RecipeBook file \"  + recipeBookFile + \" not found\");"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        XmlSerializableRecipeBook xmlRecipeBook \u003d XmlFileStorage.loadDataFromSaveFile(new File(filePath));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            return Optional.of(xmlRecipeBook.toModelType());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            logger.info(\"Illegal values found in \" + recipeBookFile + \": \" + ive.getMessage());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void saveRecipeBook(ReadOnlyRecipeBook recipeBook) throws IOException {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        saveRecipeBook(recipeBook, filePath);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Similar to {@link #saveRecipeBook(ReadOnlyRecipeBook)}"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void saveRecipeBook(ReadOnlyRecipeBook recipeBook, String filePath) throws IOException {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        requireNonNull(recipeBook);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":80,"author":{"gitID":"RyanAngJY"},"content":"        ImageStorage.saveAllImageFiles(recipeBook, filePath);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        XmlFileStorage.saveDataToFile(file, new XmlSerializableRecipeBook(recipeBook));"},{"lineNumber":82,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":3,"-":80}},{"path":"src/main/java/seedu/recipe/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.recipe.model.ReadOnlyRecipeBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.recipe.model.RecipeBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Calories;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.CookingTime;"},{"lineNumber":10,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.model.recipe.Image;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Ingredient;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Instruction;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Name;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.PreparationTime;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Recipe;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Servings;"},{"lineNumber":17,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.model.recipe.Url;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.exceptions.DuplicateRecipeException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.recipe.model.tag.Tag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code RecipeBook} with sample data."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static Recipe[] getSampleRecipes() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return new Recipe[] {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            new Recipe("},{"lineNumber":29,"author":{"gitID":"-"},"content":"                        new Name(\"Mee Goreng\"),"},{"lineNumber":30,"author":{"gitID":"-"},"content":"                        new Ingredient("},{"lineNumber":31,"author":{"gitID":"-"},"content":"                                \"green chillies, red chili paste, hot chili sauce,\""},{"lineNumber":32,"author":{"gitID":"-"},"content":"                                        + \" tomato sauce, tomatoes, potatoes, mutton,\""},{"lineNumber":33,"author":{"gitID":"-"},"content":"                                        + \" onion, bean sprouts, cabbage, yellow noodle,\""},{"lineNumber":34,"author":{"gitID":"-"},"content":"                                        + \" oil noodle, eggs, msg, salt, sugar\"),"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                        new Instruction("},{"lineNumber":36,"author":{"gitID":"-"},"content":"                                \"Heat oil and fry onion well, add minced \""},{"lineNumber":37,"author":{"gitID":"-"},"content":"                                        + \"mutton, tomatoes, potatoes and cabbage.\""},{"lineNumber":38,"author":{"gitID":"-"},"content":"                                        + \"Next, throw in noodles and bean sprouts and \""},{"lineNumber":39,"author":{"gitID":"-"},"content":"                                        + \"fry for a short while.Throw in green\""},{"lineNumber":40,"author":{"gitID":"-"},"content":"                                        + \" chillies, red chile and fry briefly.\""},{"lineNumber":41,"author":{"gitID":"-"},"content":"                                        + \"In the center of the wok, heat oil, and put\""},{"lineNumber":42,"author":{"gitID":"-"},"content":"                                        + \" in the eggs, scramble and mix with \""},{"lineNumber":43,"author":{"gitID":"-"},"content":"                                        + \"noodles thoroughly.Season with msg, \""},{"lineNumber":44,"author":{"gitID":"-"},"content":"                                        + \"salt, sugar, tomato sauce and chile \""},{"lineNumber":45,"author":{"gitID":"-"},"content":"                                        + \"sauce.Served with sliced cucumber and tomato sauce.\""},{"lineNumber":46,"author":{"gitID":"-"},"content":"                                        + \"Best eaten with mama teh!! enjoy!.\"),"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                        new CookingTime(\"5m\"),"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                        new PreparationTime(\"10m\"),"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                        new Calories(\"750\"),"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                        new Servings(\"1\"),"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                        new Url(\"http://recipes.wikia.com/wiki/Mee_Goreng?useskin\u003dwikiamobile\"),"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                        new Image("},{"lineNumber":53,"author":{"gitID":"-"},"content":"                                \"https://vignette.wikia.nocookie.net/recipes/images/c/ca/\""},{"lineNumber":54,"author":{"gitID":"-"},"content":"                                        + \"Meegoreng1.jpg/revision/latest/scale-to-width-down/\""},{"lineNumber":55,"author":{"gitID":"-"},"content":"                                        + \"340?cb\u003d20080516004609\"),"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                        getTagSet(\"Potato\", \"HokkienNoodle\", \"MungBeanSprout\", \"Cabbage\", \"Mutton\","},{"lineNumber":57,"author":{"gitID":"-"},"content":"                                \"SingaporeanAppetizers\", \"FreshChilePepper\", \"Tomato\", \"Cucumber\")"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                ),"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            new Recipe("},{"lineNumber":60,"author":{"gitID":"-"},"content":"                        new Name(\"Hainanese Chicken Rice\"),"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                        new Ingredient("},{"lineNumber":62,"author":{"gitID":"-"},"content":"                                \"ginger, garlic, cinnamon, cloves, star anise,\""},{"lineNumber":63,"author":{"gitID":"-"},"content":"                                        + \" chicken broth, pandan leaves, salt, \""},{"lineNumber":64,"author":{"gitID":"-"},"content":"                                        + \"light soy sauce, sesame oil, cucumber, \""},{"lineNumber":65,"author":{"gitID":"-"},"content":"                                        + \"tomatoes, coriander, lettuce, pineapple,\""},{"lineNumber":66,"author":{"gitID":"-"},"content":"                                        + \" fresh chillies, ginger, garlic, vinegar\""},{"lineNumber":67,"author":{"gitID":"-"},"content":"                                        + \", fish sauce, sugar, sweet soy sauce\"),"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                        new Instruction("},{"lineNumber":69,"author":{"gitID":"-"},"content":"                                \"Boil water with spring Onion, ginger and pandan l\""},{"lineNumber":70,"author":{"gitID":"-"},"content":"                                        + \"eaves, put in Chicken and cook till done, do not over cook.\""},{"lineNumber":71,"author":{"gitID":"-"},"content":"                                        + \"Briefly dip in cold water and set aside to cool. \""},{"lineNumber":72,"author":{"gitID":"-"},"content":"                                        + \"Keep broth heated.Wash rice and drain. Fin\""},{"lineNumber":73,"author":{"gitID":"-"},"content":"                                        + \"ely shred ginger and garlic, fry in oil wit\""},{"lineNumber":74,"author":{"gitID":"-"},"content":"                                        + \"h cloves, cinammon and star anise till frag\""},{"lineNumber":75,"author":{"gitID":"-"},"content":"                                        + \"rant, add in rice and fry for several minutes.\""},{"lineNumber":76,"author":{"gitID":"-"},"content":"                                        + \"Transfer into rice cooker, add chicken broth, pin\""},{"lineNumber":77,"author":{"gitID":"-"},"content":"                                        + \"ch of salt, pandan leaves and start cooking\""},{"lineNumber":78,"author":{"gitID":"-"},"content":"                                        + \".Put all chili sauce ingredient in a mixer and grind till fine.\""},{"lineNumber":79,"author":{"gitID":"-"},"content":"                                        + \"Slice and arrange tomatoes and cucumbers on a big p\""},{"lineNumber":80,"author":{"gitID":"-"},"content":"                                        + \"late, cut Chicken into small pieces and put\""},{"lineNumber":81,"author":{"gitID":"-"},"content":"                                        + \" on top. Splash some light soy sauce and se\""},{"lineNumber":82,"author":{"gitID":"-"},"content":"                                        + \"same oil over, throw a bunch of coriander on top.\""},{"lineNumber":83,"author":{"gitID":"-"},"content":"                                        + \"Next, Put broth in a bowl with lettuce, get ready c\""},{"lineNumber":84,"author":{"gitID":"-"},"content":"                                        + \"hili sauce and sweet soy sauce. Serve rice \""},{"lineNumber":85,"author":{"gitID":"-"},"content":"                                        + \"on a plate with spoon and fork.\"),"},{"lineNumber":86,"author":{"gitID":"-"},"content":"                        new CookingTime(\"7m\"),"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                        new PreparationTime(\"15m\"),"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                        new Calories(\"750\"),"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                        new Servings(\"2\"),"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                        new Url(\"http://recipes.wikia.com/wiki/Hainanese_Chicken_Rice?useskin\u003dwikiamobile\"),"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                        new Image("},{"lineNumber":92,"author":{"gitID":"-"},"content":"                                \"https://vignette.wikia.nocookie.net/recipes/images\""},{"lineNumber":93,"author":{"gitID":"-"},"content":"                                        + \"/d/d3/Chickenrice2.jpg/revision/latest/scale-to-width-down\""},{"lineNumber":94,"author":{"gitID":"-"},"content":"                                        + \"/340?cb\u003d20080516004325\"),"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                        getTagSet(\"MainDishPoultry\", \"ScrewPineLeaf\", \"Lettuce\", \"SingaporeanMeat\", \"Chicken\","},{"lineNumber":96,"author":{"gitID":"-"},"content":"                                \"Pineapple\", \"Cucumber\", \"Rice\")"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                ),"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            new Recipe("},{"lineNumber":99,"author":{"gitID":"-"},"content":"                        new Name(\"Breakfast Pizza\"),"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                        new Ingredient(\"bacon, sausage, green onions, green pepper, eggs, cheddar\"),"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                        new Instruction(\"Mix dough according to package.\""},{"lineNumber":102,"author":{"gitID":"-"},"content":"                                + \"While dough is rising cook bacon and sausage.\""},{"lineNumber":103,"author":{"gitID":"-"},"content":"                                + \"Slice vegetables.Cook scrambled eggs in the same skillet as the meat.\""},{"lineNumber":104,"author":{"gitID":"-"},"content":"                                + \"Spread dough thinly on pizza pan.\""},{"lineNumber":105,"author":{"gitID":"-"},"content":"                                + \"Cook for 5 minutes at 450°F remove from oven and add meat,\""},{"lineNumber":106,"author":{"gitID":"-"},"content":"                                + \" eggs, veggies, and cheese.\""},{"lineNumber":107,"author":{"gitID":"-"},"content":"                                + \"Return to oven until cheese is melted.Enjoy!\"),"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                        new CookingTime(\"5m\"),"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                        new PreparationTime(\"15m\"),"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                        new Calories(\"1000\"),"},{"lineNumber":111,"author":{"gitID":"-"},"content":"                        new Servings(\"3\"),"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                        new Url(\"http://recipes.wikia.com/wiki/Breakfast_Pizza?useskin\u003dwikiamobile\"),"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                        new Image("},{"lineNumber":114,"author":{"gitID":"-"},"content":"                                \"https://vignette.wikia.nocookie.net/recipes/\""},{"lineNumber":115,"author":{"gitID":"-"},"content":"                                        + \"images/3/31/164_1breakfast_pizza.jpg/revision/late\""},{"lineNumber":116,"author":{"gitID":"-"},"content":"                                        + \"st/scale-to-width-down/340?cb\u003d20130610170317\"),"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                        getTagSet(\"Pizza\", \"Breakfast\", \"Sausage\", \"Brunch\", \"Egg\", \"Cheddar\", \"Shallot\","},{"lineNumber":118,"author":{"gitID":"-"},"content":"                                \"ReadyMadeDough\", \"GreenBellPepper\", \"Bacon\")"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                ),"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            new Recipe("},{"lineNumber":121,"author":{"gitID":"-"},"content":"                        new Name(\"Veggie Taco\"),"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                        new Ingredient("},{"lineNumber":123,"author":{"gitID":"-"},"content":"                                \"tortilla, refried beans, cheddar, avocado, lettuce, cucumber,\""},{"lineNumber":124,"author":{"gitID":"-"},"content":"                                        + \" tomato, radishes, scallions\"),"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                        new Instruction(\"Spread refried beans onto tortilla.\""},{"lineNumber":126,"author":{"gitID":"-"},"content":"                                + \"Place on paper plate.\""},{"lineNumber":127,"author":{"gitID":"-"},"content":"                                + \"Microwave on high 30–45 seconds until beans are hot.Sprinkle with cheese.\""},{"lineNumber":128,"author":{"gitID":"-"},"content":"                                + \"Fold tortilla in half and top with avocado and chopped salad vegetables.\""},{"lineNumber":129,"author":{"gitID":"-"},"content":"                                + \"Serve with salsa.\"),"},{"lineNumber":130,"author":{"gitID":"-"},"content":"                        new CookingTime(\"1m\"),"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                        new PreparationTime(\"4m\"),"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                        new Calories(\"600\"),"},{"lineNumber":133,"author":{"gitID":"-"},"content":"                        new Servings(\"1\"),"},{"lineNumber":134,"author":{"gitID":"-"},"content":"                        new Url(\"http://recipes.wikia.com/wiki/Veggie_Taco?useskin\u003dwikiamobile\"),"},{"lineNumber":135,"author":{"gitID":"-"},"content":"                        new Image("},{"lineNumber":136,"author":{"gitID":"-"},"content":"                                \"https://vignette.wikia.nocookie.net/recipes\""},{"lineNumber":137,"author":{"gitID":"-"},"content":"                                        + \"/images/0/0b/Veggie_Taco.jpg/revision/latest/scal\""},{"lineNumber":138,"author":{"gitID":"-"},"content":"                                        + \"e-to-width-down/340?cb\u003d20080516004531\"),"},{"lineNumber":139,"author":{"gitID":"-"},"content":"                        getTagSet(\"Lettuce\", \"RefriedBean\", \"Cheddar\", \"Avocado\", \"Radish\", \"MexicanVegetarian\","},{"lineNumber":140,"author":{"gitID":"-"},"content":"                                \"Tomato\", \"Cucumber\", \"Taco\")"},{"lineNumber":141,"author":{"gitID":"-"},"content":"                ),"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            new Recipe("},{"lineNumber":143,"author":{"gitID":"-"},"content":"                        new Name(\"Pho Bo\"),"},{"lineNumber":144,"author":{"gitID":"-"},"content":"                        new Ingredient("},{"lineNumber":145,"author":{"gitID":"-"},"content":"                                \"rice noodles, bean sprouts, shallots, coriander, beef, beef stock, \""},{"lineNumber":146,"author":{"gitID":"-"},"content":"                                        + \"consommé, fresh ginger, cinnamon, coriander seeds, star anis\""},{"lineNumber":147,"author":{"gitID":"-"},"content":"                                        + \"e, caster sugar, salt, black pepper, fish sauce\"),"},{"lineNumber":148,"author":{"gitID":"-"},"content":"                        new Instruction(\"Boil stock, add the ginger, cinnamon, coriander seeds and s\""},{"lineNumber":149,"author":{"gitID":"-"},"content":"                                + \"tar anise.After 15 minutes, add the sugar, salt, peppe\""},{"lineNumber":150,"author":{"gitID":"-"},"content":"                                + \"r and fish sauce.Cook the noodles in water, make them al dente.\""},{"lineNumber":151,"author":{"gitID":"-"},"content":"                                + \"Add bean sprouts, shallots and coriander.\"),"},{"lineNumber":152,"author":{"gitID":"-"},"content":"                        new CookingTime(\"15m\"),"},{"lineNumber":153,"author":{"gitID":"-"},"content":"                        new PreparationTime(\"20m\"),"},{"lineNumber":154,"author":{"gitID":"-"},"content":"                        new Calories(\"900\"),"},{"lineNumber":155,"author":{"gitID":"-"},"content":"                        new Servings(\"2\"),"},{"lineNumber":156,"author":{"gitID":"-"},"content":"                        new Url(\"http://recipes.wikia.com/wiki/Pho_Bo?useskin\u003dwikiamobile\"),"},{"lineNumber":157,"author":{"gitID":"-"},"content":"                        new Image("},{"lineNumber":158,"author":{"gitID":"-"},"content":"                                \"https://vignette.wikia.nocookie.net/recipes/images/e\""},{"lineNumber":159,"author":{"gitID":"-"},"content":"                                        + \"/e1/Pho_bo.jpg/revision/latest/scale-to-width-down/340?c\""},{"lineNumber":160,"author":{"gitID":"-"},"content":"                                        + \"b\u003d20080516004830\"),"},{"lineNumber":161,"author":{"gitID":"-"},"content":"                        getTagSet(\"VietnameseSoups\", \"RiceNoodle\", \"StarAnise\", \"BeanSprout\", \"VietnameseNoodle\","},{"lineNumber":162,"author":{"gitID":"-"},"content":"                                \"Beef\", \"BeefStockAndBroth\")"},{"lineNumber":163,"author":{"gitID":"-"},"content":"                ),"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            new Recipe("},{"lineNumber":165,"author":{"gitID":"-"},"content":"                        new Name(\"Hiyashi Chuka\"),"},{"lineNumber":166,"author":{"gitID":"-"},"content":"                        new Ingredient(\"water, rice wine vinegar, soy sauce, sugar, oil, water, sug\""},{"lineNumber":167,"author":{"gitID":"-"},"content":"                                + \"ar, soy sauce, rice wine vinegar, sesame seeds, sesa\""},{"lineNumber":168,"author":{"gitID":"-"},"content":"                                + \"me oil, Chinese egg noodles, chuka soba, ramen, eggs\""},{"lineNumber":169,"author":{"gitID":"-"},"content":"                                + \", ham, chicken breasts, cucumbers, carrots, bean spro\""},{"lineNumber":170,"author":{"gitID":"-"},"content":"                                + \"uts, tomatoes, ginger, shoga\"),"},{"lineNumber":171,"author":{"gitID":"-"},"content":"                        new Instruction(\"All ingredients should be as cold as possible for ma\""},{"lineNumber":172,"author":{"gitID":"-"},"content":"                                + \"ximum body-chilling benefit.\""},{"lineNumber":173,"author":{"gitID":"-"},"content":"                                + \"Divide chilled noodles among serving plates.\""},{"lineNumber":174,"author":{"gitID":"-"},"content":"                                + \"Add toppings of your choice.\""},{"lineNumber":175,"author":{"gitID":"-"},"content":"                                + \"My personal favorite is ham, omelette, cucumber, ca\""},{"lineNumber":176,"author":{"gitID":"-"},"content":"                                + \"rrot, bean sprouts and ginger.\""},{"lineNumber":177,"author":{"gitID":"-"},"content":"                                + \"Add dressing of your choice just before eating.\"),"},{"lineNumber":178,"author":{"gitID":"-"},"content":"                        new CookingTime(\"10m\"),"},{"lineNumber":179,"author":{"gitID":"-"},"content":"                        new PreparationTime(\"10m\"),"},{"lineNumber":180,"author":{"gitID":"-"},"content":"                        new Calories(\"700\"),"},{"lineNumber":181,"author":{"gitID":"-"},"content":"                        new Servings(\"2\"),"},{"lineNumber":182,"author":{"gitID":"-"},"content":"                        new Url(\"http://recipes.wikia.com/wiki/Hiyashi_Chuka?useskin\u003dwikiamobile\"),"},{"lineNumber":183,"author":{"gitID":"-"},"content":"                        new Image("},{"lineNumber":184,"author":{"gitID":"-"},"content":"                                \"https://vignette.wikia.nocookie.net/recipes/i\""},{"lineNumber":185,"author":{"gitID":"-"},"content":"                                        + \"mages/4/4d/Hiyashi_Chuka_2.jpg/revision/latest/scal\""},{"lineNumber":186,"author":{"gitID":"-"},"content":"                                        + \"e-to-width-down/340?cb\u003d20080516004300\"),"},{"lineNumber":187,"author":{"gitID":"-"},"content":"                        getTagSet(\"ChineseEggNoodle\", \"Carrot\", \"Egg\", \"Ham\", \"RiceVinegar\", \"Ramen\", \"BeanSprout\","},{"lineNumber":188,"author":{"gitID":"-"},"content":"                                \"JapaneseSalads\", \"ChickenBreast\", \"Cucumber\")"},{"lineNumber":189,"author":{"gitID":"-"},"content":"                ),"},{"lineNumber":190,"author":{"gitID":"-"},"content":"            new Recipe("},{"lineNumber":191,"author":{"gitID":"-"},"content":"                        new Name(\"Bulgogi I\"),"},{"lineNumber":192,"author":{"gitID":"-"},"content":"                        new Ingredient("},{"lineNumber":193,"author":{"gitID":"-"},"content":"                                \"beef sirloin, soy sauce, water, scallions, garlic, soy s\""},{"lineNumber":194,"author":{"gitID":"-"},"content":"                                        + \"auce, sesame oil, black bean paste, Shaoxing wine,\""},{"lineNumber":195,"author":{"gitID":"-"},"content":"                                        + \" sugar, cayenne pepper, ginger, sugar, sesame seed\""},{"lineNumber":196,"author":{"gitID":"-"},"content":"                                        + \", oil, Tabasco, salt, garlic, sesame seed, scallions, oil\"),"},{"lineNumber":197,"author":{"gitID":"-"},"content":"                        new Instruction(\"Cut beef into very thin strips and pound to flatten; the\""},{"lineNumber":198,"author":{"gitID":"-"},"content":"                                + \"n cut into medium size squares.\""},{"lineNumber":199,"author":{"gitID":"-"},"content":"                                + \"Combine all the other ingredients.\""},{"lineNumber":200,"author":{"gitID":"-"},"content":"                                + \"The marinade, as the name of the dish implies, should b\""},{"lineNumber":201,"author":{"gitID":"-"},"content":"                                + \"e quite fiery.\""},{"lineNumber":202,"author":{"gitID":"-"},"content":"                                + \"Mix meat and marinade and set aside for 4 to 5 hours, o\""},{"lineNumber":203,"author":{"gitID":"-"},"content":"                                + \"r longer if refrigerated.\""},{"lineNumber":204,"author":{"gitID":"-"},"content":"                                + \"Broil very quickly over hot charcoal, dip in Bulgogi sau\""},{"lineNumber":205,"author":{"gitID":"-"},"content":"                                + \"ce and serve immediately with white rice.\"),"},{"lineNumber":206,"author":{"gitID":"-"},"content":"                        new CookingTime(\"15m\"),"},{"lineNumber":207,"author":{"gitID":"-"},"content":"                        new PreparationTime(\"6h\"),"},{"lineNumber":208,"author":{"gitID":"-"},"content":"                        new Calories(\"1500\"),"},{"lineNumber":209,"author":{"gitID":"-"},"content":"                        new Servings(\"6\"),"},{"lineNumber":210,"author":{"gitID":"-"},"content":"                        new Url(\"http://recipes.wikia.com/wiki/Bulgogi_I?useskin\u003dwikiamobile\"),"},{"lineNumber":211,"author":{"gitID":"-"},"content":"                        new Image("},{"lineNumber":212,"author":{"gitID":"-"},"content":"                                \"https://vignette.wikia.nocookie.net/recipes/\""},{"lineNumber":213,"author":{"gitID":"-"},"content":"                                        + \"images/3/32/Cooking.jpg/revision/latest/scale-to-widt\""},{"lineNumber":214,"author":{"gitID":"-"},"content":"                                        + \"h-down/340?cb\u003d20050413221745\"),"},{"lineNumber":215,"author":{"gitID":"-"},"content":"                        getTagSet(\"BeefSirloin\", \"KoreanMeat\")"},{"lineNumber":216,"author":{"gitID":"-"},"content":"                ),"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            new Recipe("},{"lineNumber":218,"author":{"gitID":"-"},"content":"                        new Name(\"Rassolnik\"),"},{"lineNumber":219,"author":{"gitID":"-"},"content":"                        new Ingredient("},{"lineNumber":220,"author":{"gitID":"-"},"content":"                                \"veal, beef, kidneys, chicken, giblets, carrot, parsley ro\""},{"lineNumber":221,"author":{"gitID":"-"},"content":"                                        + \"ot, celery root, onion, salt, salt, black pepper\""},{"lineNumber":222,"author":{"gitID":"-"},"content":"                                        + \"corns, bay leaves, potatoes, long-grain rice, c\""},{"lineNumber":223,"author":{"gitID":"-"},"content":"                                        + \"ucumbers, sour cream, parsley\"),"},{"lineNumber":224,"author":{"gitID":"-"},"content":"                        new Instruction(\"While the kidneys are soaking, cut the carrot, parsley \""},{"lineNumber":225,"author":{"gitID":"-"},"content":"                                + \"and celery roots, and onion into julienne strips.\""},{"lineNumber":226,"author":{"gitID":"-"},"content":"                                + \"In 4-quart pot, bring 2 quarters of water to a boil.\""},{"lineNumber":227,"author":{"gitID":"-"},"content":"                                + \"Add the kidneys , julienned vegetables, 1 teaspoon salt, a\""},{"lineNumber":228,"author":{"gitID":"-"},"content":"                                + \"nd the peppercorns and bay leaves, and bring to a boil again.\""},{"lineNumber":229,"author":{"gitID":"-"},"content":"                                + \"Lower the heat and simmer, partially covered, for 30 minutes.\""},{"lineNumber":230,"author":{"gitID":"-"},"content":"                                + \"Meanwhile, peel the potatoes and cut into 1-inch cubes.\""},{"lineNumber":231,"author":{"gitID":"-"},"content":"                                + \"Strain the stock, discarding the vegetables.\""},{"lineNumber":232,"author":{"gitID":"-"},"content":"                                + \"Cut the kidneys into ¼-inch slices and return to the stoc\""},{"lineNumber":233,"author":{"gitID":"-"},"content":"                                + \"k, adding the potatoes and rice.\""},{"lineNumber":234,"author":{"gitID":"-"},"content":"                                + \"Cook slowly, partially covered, for 20 minutes, then add \""},{"lineNumber":235,"author":{"gitID":"-"},"content":"                                + \"the pickles and simmer 5 minutes more.\""},{"lineNumber":236,"author":{"gitID":"-"},"content":"                                + \"Turn off the heat, cover completely, and allow the flavor\""},{"lineNumber":237,"author":{"gitID":"-"},"content":"                                + \"s to mingle for 5 minutes.\""},{"lineNumber":238,"author":{"gitID":"-"},"content":"                                + \"Blend the sour cream with 1 cup of soup and stir it back i\""},{"lineNumber":239,"author":{"gitID":"-"},"content":"                                + \"nto the pot, then taste the seasoning.\"),"},{"lineNumber":240,"author":{"gitID":"-"},"content":"                        new CookingTime(\"45m\"),"},{"lineNumber":241,"author":{"gitID":"-"},"content":"                        new PreparationTime(\"25m\"),"},{"lineNumber":242,"author":{"gitID":"-"},"content":"                        new Calories(\"900\"),"},{"lineNumber":243,"author":{"gitID":"-"},"content":"                        new Servings(\"4\"),"},{"lineNumber":244,"author":{"gitID":"-"},"content":"                        new Url(\"http://recipes.wikia.com/wiki/Rassolnik?useskin\u003dwikiamobile\"),"},{"lineNumber":245,"author":{"gitID":"-"},"content":"                        new Image("},{"lineNumber":246,"author":{"gitID":"-"},"content":"                                \"https://vignette.wikia.nocookie.net/recipes/image\""},{"lineNumber":247,"author":{"gitID":"-"},"content":"                                        + \"s/3/3f/460.jpg/revision/latest/scale-to-width-down/\""},{"lineNumber":248,"author":{"gitID":"-"},"content":"                                        + \"340?cb\u003d20080516004855\"),"},{"lineNumber":249,"author":{"gitID":"-"},"content":"                        getTagSet(\"Celeriac\", \"SourCream\", \"Potato\", \"RussianSoups\", \"Carrot\", \"RussianMeat\", \"Pickle\","},{"lineNumber":250,"author":{"gitID":"-"},"content":"                                \"LongGrainRice\", \"Giblet\", \"ParsleyRoot\", \"Kidney\")"},{"lineNumber":251,"author":{"gitID":"-"},"content":"                ),"},{"lineNumber":252,"author":{"gitID":"-"},"content":"            new Recipe("},{"lineNumber":253,"author":{"gitID":"-"},"content":"                        new Name(\"Sausage Rolls\"),"},{"lineNumber":254,"author":{"gitID":"-"},"content":"                        new Ingredient(\"shortcrust pastry, sausage, plain flour, milk\"),"},{"lineNumber":255,"author":{"gitID":"-"},"content":"                        new Instruction(\"Roll the pastry out thinly into a rectangle, then cut it \""},{"lineNumber":256,"author":{"gitID":"-"},"content":"                                + \"lengthwise into 2 strips.\""},{"lineNumber":257,"author":{"gitID":"-"},"content":"                                + \"Divide the sausage meat into 2 pieces; dust with flour an\""},{"lineNumber":258,"author":{"gitID":"-"},"content":"                                + \"d form into 2 rolls the length of the pastry.\""},{"lineNumber":259,"author":{"gitID":"-"},"content":"                                + \"Lay a roll of sausage meat down the center of each strip;\""},{"lineNumber":260,"author":{"gitID":"-"},"content":"                                + \" just brush down the edges of the pastry with a little milk.\""},{"lineNumber":261,"author":{"gitID":"-"},"content":"                                + \"Fold one side of the pastry over the sausage meat and pres\""},{"lineNumber":262,"author":{"gitID":"-"},"content":"                                + \"s the two edges firmly together.\""},{"lineNumber":263,"author":{"gitID":"-"},"content":"                                + \"Seal the long edges together by flaking.\""},{"lineNumber":264,"author":{"gitID":"-"},"content":"                                + \"Brush the length of the two rolls with milk; then cut each\""},{"lineNumber":265,"author":{"gitID":"-"},"content":"                                + \" into slices 4 cm (1 inch) to 5 cm (2 inches) long.\""},{"lineNumber":266,"author":{"gitID":"-"},"content":"                                + \"Place on a baking sheet and bake in a moderately hot oven \""},{"lineNumber":267,"author":{"gitID":"-"},"content":"                                + \"(200°C / 400°F / Gas 6) for 15 minutes; to cook \""},{"lineNumber":268,"author":{"gitID":"-"},"content":"                                + \"the meat thoroughly, reduce the temperature to mode\""},{"lineNumber":269,"author":{"gitID":"-"},"content":"                                + \"ate (180°C / 350°F / Gas 4) and cook for a further 15 minutes.\""},{"lineNumber":270,"author":{"gitID":"-"},"content":"                                + \"Cover and brown the top of the dish under a hot grill. Ser\""},{"lineNumber":271,"author":{"gitID":"-"},"content":"                                + \"ve straight from the pan.\"),"},{"lineNumber":272,"author":{"gitID":"-"},"content":"                        new CookingTime(\"30m\"),"},{"lineNumber":273,"author":{"gitID":"-"},"content":"                        new PreparationTime(\"15m\"),"},{"lineNumber":274,"author":{"gitID":"-"},"content":"                        new Calories(\"900\"),"},{"lineNumber":275,"author":{"gitID":"-"},"content":"                        new Servings(\"4\"),"},{"lineNumber":276,"author":{"gitID":"-"},"content":"                        new Url(\"http://recipes.wikia.com/wiki/Sausage_Rolls?useskin\u003dwikiamobile\"),"},{"lineNumber":277,"author":{"gitID":"-"},"content":"                        new Image("},{"lineNumber":278,"author":{"gitID":"-"},"content":"                                \"https://vignette.wikia.nocookie.net/recipes/images/8\""},{"lineNumber":279,"author":{"gitID":"-"},"content":"                                        + \"/8b/Sausage_rolls.jpg/revision/latest/scale-to-width\""},{"lineNumber":280,"author":{"gitID":"-"},"content":"                                        + \"-down/340?cb\u003d20130725232626\"),"},{"lineNumber":281,"author":{"gitID":"-"},"content":"                        getTagSet(\"Sausage\", \"British\", \"AsianAppetizers\", \"Appetizer\", \"AustralianAppetizers\","},{"lineNumber":282,"author":{"gitID":"-"},"content":"                                \"EuropeanAppetizers\", \"European\", \"World\", \"Asian\", \"Meat\", \"Oceanian\", \"SideDishMeat\","},{"lineNumber":283,"author":{"gitID":"-"},"content":"                                \"SideDish\", \"Australian\", \"MeatAppetizer\", \"BritishAppetizers\", \"OceanianAppetizers\","},{"lineNumber":284,"author":{"gitID":"-"},"content":"                                \"SavoryPastryAppetizer\")"},{"lineNumber":285,"author":{"gitID":"-"},"content":"                ),"},{"lineNumber":286,"author":{"gitID":"-"},"content":"            new Recipe("},{"lineNumber":287,"author":{"gitID":"-"},"content":"                        new Name(\"Traditional Banoffee Pie\"),"},{"lineNumber":288,"author":{"gitID":"-"},"content":"                        new Ingredient(\"butter, brown sugar, condensed milk, bananas\"),"},{"lineNumber":289,"author":{"gitID":"-"},"content":"                        new Instruction(\"Have a baking tin, bowl, non-stick pan and wooden spoon ready.\""},{"lineNumber":290,"author":{"gitID":"-"},"content":"                                + \"Make sure the digestive biscuits are crushed to breadcrumbs.\""},{"lineNumber":291,"author":{"gitID":"-"},"content":"                                + \"Tip all the breadcrumbs into the baking tin, then \""},{"lineNumber":292,"author":{"gitID":"-"},"content":"                                + \"use a spoon to create a pie shell across th\""},{"lineNumber":293,"author":{"gitID":"-"},"content":"                                + \"e bottom and around the sides of the tin.\""},{"lineNumber":294,"author":{"gitID":"-"},"content":"                                + \"Chill this in your fridge/freezer for ten minutes a\""},{"lineNumber":295,"author":{"gitID":"-"},"content":"                                + \"nd continue to the caramel.\""},{"lineNumber":296,"author":{"gitID":"-"},"content":"                                + \"Melt the butter and sugar into a non-stick pan over low heat.\""},{"lineNumber":297,"author":{"gitID":"-"},"content":"                                + \"Stir this continuously until all the sugar has dissolved.\""},{"lineNumber":298,"author":{"gitID":"-"},"content":"                                + \"Add the condensed milk and bring this to a boil fo\""},{"lineNumber":299,"author":{"gitID":"-"},"content":"                                + \"r about a minute. Stir this until a thick golden caramel forms.\""},{"lineNumber":300,"author":{"gitID":"-"},"content":"                                + \"Spread the caramel over the now firm base, and the\""},{"lineNumber":301,"author":{"gitID":"-"},"content":"                                + \"n leave to chill for an hour.\""},{"lineNumber":302,"author":{"gitID":"-"},"content":"                                + \"After the hour chilling, remove the pie from the \""},{"lineNumber":303,"author":{"gitID":"-"},"content":"                                + \"tin carefully and place it on your serving plate.\""},{"lineNumber":304,"author":{"gitID":"-"},"content":"                                + \"Slice the bananas into small chunks.\""},{"lineNumber":305,"author":{"gitID":"-"},"content":"                                + \"Create a layer of bananas on top of the caramel.\""},{"lineNumber":306,"author":{"gitID":"-"},"content":"                                + \"Spread the whipped cream on top so it covers the layer of bananas.\"),"},{"lineNumber":307,"author":{"gitID":"-"},"content":"                        new CookingTime(\"3h\"),"},{"lineNumber":308,"author":{"gitID":"-"},"content":"                        new PreparationTime(\"15m\"),"},{"lineNumber":309,"author":{"gitID":"-"},"content":"                        new Calories(\"800\"),"},{"lineNumber":310,"author":{"gitID":"-"},"content":"                        new Servings(\"6\"),"},{"lineNumber":311,"author":{"gitID":"-"},"content":"                        new Url(\"http://recipes.wikia.com/wiki/Traditional_Banoffee_Pie?useskin\u003dwikiamobile\"),"},{"lineNumber":312,"author":{"gitID":"-"},"content":"                        new Image("},{"lineNumber":313,"author":{"gitID":"-"},"content":"                                \"https://vignette.wikia.nocookie.net/recipes/images/b/b2\""},{"lineNumber":314,"author":{"gitID":"-"},"content":"                                        + \"/Banoffeepiewithpecan_86926_16x9.jpg/revision/latest/\""},{"lineNumber":315,"author":{"gitID":"-"},"content":"                                        + \"scale-to-width-down/340?cb\u003d20130711152627\"),"},{"lineNumber":316,"author":{"gitID":"-"},"content":"                        getTagSet(\"BritishDesserts\", \"British\", \"Pie\", \"Dessert\")"},{"lineNumber":317,"author":{"gitID":"-"},"content":"                ),"},{"lineNumber":318,"author":{"gitID":"-"},"content":"            new Recipe("},{"lineNumber":319,"author":{"gitID":"-"},"content":"                        new Name(\"Traditional Welsh Rarebit\"),"},{"lineNumber":320,"author":{"gitID":"-"},"content":"                        new Ingredient(\"-\"),"},{"lineNumber":321,"author":{"gitID":"-"},"content":"                        new Instruction(\"Put the cheese, flour, mustard, Worcestershire sauce, \""},{"lineNumber":322,"author":{"gitID":"-"},"content":"                                + \"butter and pepper into a saucepan.\""},{"lineNumber":323,"author":{"gitID":"-"},"content":"                                + \"Mix well and then add the beer or milk to moisten. Be \""},{"lineNumber":324,"author":{"gitID":"-"},"content":"                                + \"careful not to make it too wet as you\u0027ll never \""},{"lineNumber":325,"author":{"gitID":"-"},"content":"                                + \"get it to stick to the bread.\""},{"lineNumber":326,"author":{"gitID":"-"},"content":"                                + \"Stir the mixture over a low heat until it\u0027s melted.\""},{"lineNumber":327,"author":{"gitID":"-"},"content":"                                + \"Once your mixture has the consistency of a thick paste,\""},{"lineNumber":328,"author":{"gitID":"-"},"content":"                                + \" remove it from the heat and allow to cool slightly.\""},{"lineNumber":329,"author":{"gitID":"-"},"content":"                                + \"While the cheese mixture is cooling, take four slices o\""},{"lineNumber":330,"author":{"gitID":"-"},"content":"                                + \"f bread and toast them on one side only.\""},{"lineNumber":331,"author":{"gitID":"-"},"content":"                                + \"Once done, divide the mixture between the four slices of\""},{"lineNumber":332,"author":{"gitID":"-"},"content":"                                + \" toast. Pop this back under the grill to brown.\""},{"lineNumber":333,"author":{"gitID":"-"},"content":"                                + \"Serve immediately. This dish makes a great lunchtime sna\""},{"lineNumber":334,"author":{"gitID":"-"},"content":"                                + \"ck, or for a more substantial meal, try serving \""},{"lineNumber":335,"author":{"gitID":"-"},"content":"                                + \"it alongside a bowl of leek and potato soup.\"),"},{"lineNumber":336,"author":{"gitID":"-"},"content":"                        new CookingTime(\"25m\"),"},{"lineNumber":337,"author":{"gitID":"-"},"content":"                        new PreparationTime(\"30m\"),"},{"lineNumber":338,"author":{"gitID":"-"},"content":"                        new Calories(\"1000\"),"},{"lineNumber":339,"author":{"gitID":"-"},"content":"                        new Servings(\"4\"),"},{"lineNumber":340,"author":{"gitID":"-"},"content":"                        new Url(\"http://recipes.wikia.com/wiki/Traditional_Welsh_Rarebit?useskin\u003dwikiamobile\"),"},{"lineNumber":341,"author":{"gitID":"-"},"content":"                        new Image("},{"lineNumber":342,"author":{"gitID":"-"},"content":"                                \"https://vignette.wikia.nocookie.net/recipes/images/9/9b/\""},{"lineNumber":343,"author":{"gitID":"-"},"content":"                                        + \"WelshRarebit4_big.jpg/revision/latest/\""},{"lineNumber":344,"author":{"gitID":"-"},"content":"                                        + \"scale-to-width-down/340?cb\u003d20110728151258\"),"},{"lineNumber":345,"author":{"gitID":"-"},"content":"                        getTagSet(\"British\", \"Welsh\", \"Snack\", \"Lunch\")"},{"lineNumber":346,"author":{"gitID":"-"},"content":"                ),"},{"lineNumber":347,"author":{"gitID":"-"},"content":"            new Recipe("},{"lineNumber":348,"author":{"gitID":"-"},"content":"                        new Name(\"Egg Curry\"),"},{"lineNumber":349,"author":{"gitID":"-"},"content":"                        new Ingredient("},{"lineNumber":350,"author":{"gitID":"-"},"content":"                                \"eggs, onions, tomatoes, tomato, garlic, fresh ginger, garlic, cumin, chili powder, \""},{"lineNumber":351,"author":{"gitID":"-"},"content":"                                        + \"turmeric, coriander powder, cumin, salt, yoghurt, coriander leaves, oil\"),"},{"lineNumber":352,"author":{"gitID":"-"},"content":"                        new Instruction("},{"lineNumber":353,"author":{"gitID":"-"},"content":"                                \"Add cumin seeds in hot oil till it begins to sizzle. Add ginger-garli\""},{"lineNumber":354,"author":{"gitID":"-"},"content":"                                        + \"c paste and Onion paste, and fry for 3 – 5 minutes till slightly browned.\""},{"lineNumber":355,"author":{"gitID":"-"},"content":"                                        + \"Add salt, chili powder, coriander powder, cumin powder and tur\""},{"lineNumber":356,"author":{"gitID":"-"},"content":"                                        + \"meric powder and cook for another minute till fragrant. Add\""},{"lineNumber":357,"author":{"gitID":"-"},"content":"                                        + \" tomatoe paste and let cook for a few minutes till all th\""},{"lineNumber":358,"author":{"gitID":"-"},"content":"                                        + \"e spices blend in.\""},{"lineNumber":359,"author":{"gitID":"-"},"content":"                                        + \"Add in the youghurt and stir constantly to avoid getting lumps.\""},{"lineNumber":360,"author":{"gitID":"-"},"content":"                                        + \"Put in the boiled egg halves abd cover cook for another 5 minutes.\""},{"lineNumber":361,"author":{"gitID":"-"},"content":"                                        + \"Garnish with chopped coriander leaves and serve \""},{"lineNumber":362,"author":{"gitID":"-"},"content":"                                        + \"warm with fresh rotis or rice.\"),"},{"lineNumber":363,"author":{"gitID":"-"},"content":"                        new CookingTime(\"15m\"),"},{"lineNumber":364,"author":{"gitID":"-"},"content":"                        new PreparationTime(\"45m\"),"},{"lineNumber":365,"author":{"gitID":"-"},"content":"                        new Calories(\"900\"),"},{"lineNumber":366,"author":{"gitID":"-"},"content":"                        new Servings(\"4\"),"},{"lineNumber":367,"author":{"gitID":"-"},"content":"                        new Url(\"http://recipes.wikia.com/wiki/Egg_Curry?useskin\u003dwikiamobile\"),"},{"lineNumber":368,"author":{"gitID":"-"},"content":"                        new Image("},{"lineNumber":369,"author":{"gitID":"-"},"content":"                                \"https://vignette.wikia.nocookie.net/recipe\""},{"lineNumber":370,"author":{"gitID":"-"},"content":"                                        + \"s/images/1/1b/Egg_Curry.jpg/revision/latest/scal\""},{"lineNumber":371,"author":{"gitID":"-"},"content":"                                        + \"e-to-width-down/340?cb\u003d20080516004839\"),"},{"lineNumber":372,"author":{"gitID":"-"},"content":"                        getTagSet(\"Curry\", \"Egg\", \"HookedOnHeat\", \"IndianVegetarian\", \"ChiliPowder\", \"Tomato\", \"Rice\")"},{"lineNumber":373,"author":{"gitID":"-"},"content":"                )"},{"lineNumber":374,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":375,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":376,"author":{"gitID":"-"},"content":""},{"lineNumber":377,"author":{"gitID":"-"},"content":"    public static ReadOnlyRecipeBook getSampleRecipeBook() {"},{"lineNumber":378,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":379,"author":{"gitID":"-"},"content":"            RecipeBook sampleAb \u003d new RecipeBook();"},{"lineNumber":380,"author":{"gitID":"-"},"content":"            for (Recipe sampleRecipe : getSampleRecipes()) {"},{"lineNumber":381,"author":{"gitID":"-"},"content":"                sampleAb.addRecipe(sampleRecipe);"},{"lineNumber":382,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":383,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":384,"author":{"gitID":"-"},"content":"        } catch (DuplicateRecipeException e) {"},{"lineNumber":385,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate recipes\", e);"},{"lineNumber":386,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":387,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":388,"author":{"gitID":"-"},"content":""},{"lineNumber":389,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":390,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":391,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":392,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":393,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":394,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":395,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":396,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":397,"author":{"gitID":"-"},"content":""},{"lineNumber":398,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":399,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":400,"author":{"gitID":"-"},"content":""},{"lineNumber":401,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":2,"-":399}},{"path":"src/main/java/seedu/recipe/storage/ImageStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"RyanAngJY"},"content":"//@@author RyanAngJY"},{"lineNumber":2,"author":{"gitID":"RyanAngJY"},"content":"package seedu.recipe.storage;"},{"lineNumber":3,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":4,"author":{"gitID":"RyanAngJY"},"content":"import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;"},{"lineNumber":5,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":6,"author":{"gitID":"RyanAngJY"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitID":"RyanAngJY"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"RyanAngJY"},"content":"import java.nio.file.Files;"},{"lineNumber":9,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":10,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.commons.util.FileUtil;"},{"lineNumber":12,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.model.ReadOnlyRecipeBook;"},{"lineNumber":13,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.model.recipe.Image;"},{"lineNumber":14,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":15,"author":{"gitID":"RyanAngJY"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"RyanAngJY"},"content":" * A class to save RecipeBook image data stored on the hard disk."},{"lineNumber":17,"author":{"gitID":"RyanAngJY"},"content":" */"},{"lineNumber":18,"author":{"gitID":"RyanAngJY"},"content":"public class ImageStorage {"},{"lineNumber":19,"author":{"gitID":"RyanAngJY"},"content":"    public static final String IMAGE_FOLDER \u003d \"images/\";"},{"lineNumber":20,"author":{"gitID":"RyanAngJY"},"content":"    private static final String RECIPE_BOOK_FILENAME \u003d \"recipebook.xml\";"},{"lineNumber":21,"author":{"gitID":"RyanAngJY"},"content":"    private static final String WARNING_UNABLE_TO_SAVE_IMAGE \u003d \"Image cannot be saved.\";"},{"lineNumber":22,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":23,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"RyanAngJY"},"content":"     * Saves all image files into the images folder of the application"},{"lineNumber":25,"author":{"gitID":"RyanAngJY"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"RyanAngJY"},"content":"     * @param filePath location of the image. Cannot be null"},{"lineNumber":27,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"RyanAngJY"},"content":"    public static void saveAllImageFiles(ReadOnlyRecipeBook recipeBook, String filePath) throws IOException {"},{"lineNumber":29,"author":{"gitID":"RyanAngJY"},"content":"        String imageFolderPath \u003d filePath.replaceAll(RECIPE_BOOK_FILENAME, IMAGE_FOLDER);"},{"lineNumber":30,"author":{"gitID":"RyanAngJY"},"content":"        File imageFolder \u003d new File(imageFolderPath);"},{"lineNumber":31,"author":{"gitID":"RyanAngJY"},"content":"        FileUtil.createDirs(imageFolder);"},{"lineNumber":32,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":33,"author":{"gitID":"RyanAngJY"},"content":"        for (int i \u003d 0; i \u003c recipeBook.getRecipeList().size(); i++) {"},{"lineNumber":34,"author":{"gitID":"RyanAngJY"},"content":"            Image recipeImage \u003d recipeBook.getRecipeList().get(i).getImage();"},{"lineNumber":35,"author":{"gitID":"RyanAngJY"},"content":"            saveImageFile(recipeImage.toString(), imageFolderPath);"},{"lineNumber":36,"author":{"gitID":"RyanAngJY"},"content":"            recipeImage.setImageToInternalReference();"},{"lineNumber":37,"author":{"gitID":"RyanAngJY"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":40,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"RyanAngJY"},"content":"     * Saves an image file into the images folder of the application"},{"lineNumber":42,"author":{"gitID":"RyanAngJY"},"content":"     *"},{"lineNumber":43,"author":{"gitID":"RyanAngJY"},"content":"     * @param imagePath       location of the image. Cannot be null"},{"lineNumber":44,"author":{"gitID":"RyanAngJY"},"content":"     * @param imageFolderPath location of the image. Cannot be null"},{"lineNumber":45,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"RyanAngJY"},"content":"    public static void saveImageFile(String imagePath, String imageFolderPath) {"},{"lineNumber":47,"author":{"gitID":"RyanAngJY"},"content":"        try {"},{"lineNumber":48,"author":{"gitID":"RyanAngJY"},"content":"            File imageToSave \u003d new File(imagePath);"},{"lineNumber":49,"author":{"gitID":"RyanAngJY"},"content":"            File pathToNewImage \u003d new File(imageFolderPath + imageToSave.getName());"},{"lineNumber":50,"author":{"gitID":"RyanAngJY"},"content":"            Files.copy(imageToSave.toPath(), pathToNewImage.toPath(), REPLACE_EXISTING);"},{"lineNumber":51,"author":{"gitID":"RyanAngJY"},"content":"        } catch (IOException e) {"},{"lineNumber":52,"author":{"gitID":"RyanAngJY"},"content":"            LogsCenter.getLogger(ImageStorage.class).warning(WARNING_UNABLE_TO_SAVE_IMAGE);"},{"lineNumber":53,"author":{"gitID":"RyanAngJY"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"RyanAngJY"},"content":"}"},{"lineNumber":56,"author":{"gitID":"RyanAngJY"},"content":"//@@author"}],"authorContributionMap":{"RyanAngJY":56}},{"path":"src/main/java/seedu/recipe/storage/XmlAdaptedRecipe.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.recipe.commons.exceptions.NoInternetConnectionException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Calories;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.CookingTime;"},{"lineNumber":16,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.model.recipe.Image;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Ingredient;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Instruction;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Name;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.PreparationTime;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Recipe;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Servings;"},{"lineNumber":23,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.model.recipe.Url;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.recipe.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Recipe."},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class XmlAdaptedRecipe {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Recipe\u0027s %s field is missing!\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private String ingredient;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private String instruction;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private String cookingTime;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private String preparationTime;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private String calories;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private String servings;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private String url;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":50,"author":{"gitID":"RyanAngJY"},"content":"    private String image;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedRecipe."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public XmlAdaptedRecipe() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Constructs an {@code XmlAdaptedRecipe} with the given recipe details."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public XmlAdaptedRecipe(String name, String ingredient, String instruction, String cookingTime,"},{"lineNumber":67,"author":{"gitID":"RyanAngJY"},"content":"                            String preparationTime, String calories, String servings, String url, String image,"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                            List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this.ingredient \u003d ingredient;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        this.instruction \u003d instruction;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        this.cookingTime \u003d cookingTime;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        this.preparationTime \u003d preparationTime;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        this.calories \u003d calories;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        this.servings \u003d servings;"},{"lineNumber":76,"author":{"gitID":"RyanAngJY"},"content":"        this.url \u003d url;"},{"lineNumber":77,"author":{"gitID":"RyanAngJY"},"content":"        this.image \u003d image;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Converts a given Recipe into this class for JAXB use."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedRecipe"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public XmlAdaptedRecipe(Recipe source) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        ingredient \u003d source.getIngredient().value;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        instruction \u003d source.getInstruction().value;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        cookingTime \u003d source.getCookingTime().value;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        preparationTime \u003d source.getPreparationTime().value;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        calories \u003d source.getCalories().value;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        servings \u003d source.getServings().value;"},{"lineNumber":96,"author":{"gitID":"RyanAngJY"},"content":"        url \u003d source.getUrl().value;"},{"lineNumber":97,"author":{"gitID":"RyanAngJY"},"content":"        image \u003d source.getImage().toString();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted recipe object into the model\u0027s Recipe object."},{"lineNumber":106,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted recipe"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public Recipe toModelType() throws IllegalValueException {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e recipeTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            recipeTags.add(tag.toModelType());"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"kokonguyen191"},"content":"        //@@author kokonguyen191"},{"lineNumber":124,"author":{"gitID":"kokonguyen191"},"content":"        if (this.ingredient \u003d\u003d null) {"},{"lineNumber":125,"author":{"gitID":"kokonguyen191"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":126,"author":{"gitID":"kokonguyen191"},"content":"                    Ingredient.class.getSimpleName()));"},{"lineNumber":127,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"kokonguyen191"},"content":"        if (!Ingredient.isValidIngredient(this.ingredient)) {"},{"lineNumber":129,"author":{"gitID":"kokonguyen191"},"content":"            throw new IllegalValueException(Ingredient.MESSAGE_INGREDIENT_CONSTRAINTS);"},{"lineNumber":130,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"kokonguyen191"},"content":"        final Ingredient ingredient \u003d new Ingredient(this.ingredient);"},{"lineNumber":132,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":133,"author":{"gitID":"kokonguyen191"},"content":"        if (this.instruction \u003d\u003d null) {"},{"lineNumber":134,"author":{"gitID":"kokonguyen191"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":135,"author":{"gitID":"kokonguyen191"},"content":"                    Instruction.class.getSimpleName()));"},{"lineNumber":136,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"kokonguyen191"},"content":"        if (!Instruction.isValidInstuction(this.instruction)) {"},{"lineNumber":138,"author":{"gitID":"kokonguyen191"},"content":"            throw new IllegalValueException(Instruction.MESSAGE_INSTRUCTION_CONSTRAINTS);"},{"lineNumber":139,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"kokonguyen191"},"content":"        final Instruction instruction \u003d new Instruction(this.instruction);"},{"lineNumber":141,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":142,"author":{"gitID":"kokonguyen191"},"content":"        if (this.preparationTime \u003d\u003d null) {"},{"lineNumber":143,"author":{"gitID":"kokonguyen191"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":144,"author":{"gitID":"kokonguyen191"},"content":"                    PreparationTime.class.getSimpleName()));"},{"lineNumber":145,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"kokonguyen191"},"content":"        if (!PreparationTime.isValidPreparationTime(this.preparationTime)) {"},{"lineNumber":147,"author":{"gitID":"kokonguyen191"},"content":"            throw new IllegalValueException(PreparationTime.MESSAGE_PREPARATION_TIME_CONSTRAINTS);"},{"lineNumber":148,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"kokonguyen191"},"content":"        final PreparationTime preparationTime \u003d new PreparationTime(this.preparationTime);"},{"lineNumber":150,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":151,"author":{"gitID":"kokonguyen191"},"content":"        if (this.cookingTime \u003d\u003d null) {"},{"lineNumber":152,"author":{"gitID":"kokonguyen191"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":153,"author":{"gitID":"kokonguyen191"},"content":"                    CookingTime.class.getSimpleName()));"},{"lineNumber":154,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"kokonguyen191"},"content":"        if (!CookingTime.isValidCookingTime(this.cookingTime)) {"},{"lineNumber":156,"author":{"gitID":"kokonguyen191"},"content":"            throw new IllegalValueException(CookingTime.MESSAGE_COOKING_TIME_CONSTRAINTS);"},{"lineNumber":157,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"kokonguyen191"},"content":"        final CookingTime cookingTime \u003d new CookingTime(this.cookingTime);"},{"lineNumber":159,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":160,"author":{"gitID":"kokonguyen191"},"content":"        if (this.calories \u003d\u003d null) {"},{"lineNumber":161,"author":{"gitID":"kokonguyen191"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":162,"author":{"gitID":"kokonguyen191"},"content":"                    Calories.class.getSimpleName()));"},{"lineNumber":163,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"kokonguyen191"},"content":"        if (!Calories.isValidCalories(this.calories)) {"},{"lineNumber":165,"author":{"gitID":"kokonguyen191"},"content":"            throw new IllegalValueException(Calories.MESSAGE_CALORIES_CONSTRAINTS);"},{"lineNumber":166,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"kokonguyen191"},"content":"        final Calories calories \u003d new Calories(this.calories);"},{"lineNumber":168,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":169,"author":{"gitID":"kokonguyen191"},"content":"        if (this.servings \u003d\u003d null) {"},{"lineNumber":170,"author":{"gitID":"kokonguyen191"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":171,"author":{"gitID":"kokonguyen191"},"content":"                    Servings.class.getSimpleName()));"},{"lineNumber":172,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"kokonguyen191"},"content":"        if (!Servings.isValidServings(this.servings)) {"},{"lineNumber":174,"author":{"gitID":"kokonguyen191"},"content":"            throw new IllegalValueException(Servings.MESSAGE_SERVINGS_CONSTRAINTS);"},{"lineNumber":175,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"kokonguyen191"},"content":"        final Servings servings \u003d new Servings(this.servings);"},{"lineNumber":177,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":178,"author":{"gitID":"RyanAngJY"},"content":"        //@@author RyanAngJY"},{"lineNumber":179,"author":{"gitID":"RyanAngJY"},"content":"        if (this.url \u003d\u003d null) {"},{"lineNumber":180,"author":{"gitID":"RyanAngJY"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Url.class.getSimpleName()));"},{"lineNumber":181,"author":{"gitID":"RyanAngJY"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"RyanAngJY"},"content":"        if (!Url.isValidUrl(this.url)) {"},{"lineNumber":183,"author":{"gitID":"RyanAngJY"},"content":"            throw new IllegalValueException(Url.MESSAGE_URL_CONSTRAINTS);"},{"lineNumber":184,"author":{"gitID":"RyanAngJY"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"RyanAngJY"},"content":"        final Url url \u003d new Url(this.url);"},{"lineNumber":186,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":187,"author":{"gitID":"RyanAngJY"},"content":"        if (this.image \u003d\u003d null) {"},{"lineNumber":188,"author":{"gitID":"RyanAngJY"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Image.class.getSimpleName()));"},{"lineNumber":189,"author":{"gitID":"RyanAngJY"},"content":"        }"},{"lineNumber":190,"author":{"gitID":"RyanAngJY"},"content":"        try {"},{"lineNumber":191,"author":{"gitID":"RyanAngJY"},"content":"            if (!Image.isValidImage(this.image)) {"},{"lineNumber":192,"author":{"gitID":"RyanAngJY"},"content":"                this.image \u003d Image.NULL_IMAGE_REFERENCE;"},{"lineNumber":193,"author":{"gitID":"RyanAngJY"},"content":"            }"},{"lineNumber":194,"author":{"gitID":"RyanAngJY"},"content":"        } catch (NoInternetConnectionException e) {"},{"lineNumber":195,"author":{"gitID":"RyanAngJY"},"content":"            LogsCenter.getLogger(XmlAdaptedRecipe.class)"},{"lineNumber":196,"author":{"gitID":"RyanAngJY"},"content":"                    .warning(\"No Internet connection while trying to get Recipe object from XmlAdaptedRecipe.\");"},{"lineNumber":197,"author":{"gitID":"RyanAngJY"},"content":"        }"},{"lineNumber":198,"author":{"gitID":"RyanAngJY"},"content":"        final Image image \u003d new Image(this.image);"},{"lineNumber":199,"author":{"gitID":"RyanAngJY"},"content":"        //@@author"},{"lineNumber":200,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(recipeTags);"},{"lineNumber":202,"author":{"gitID":"RyanAngJY"},"content":"        return new Recipe(name, ingredient, instruction, cookingTime, preparationTime, calories, servings, url,"},{"lineNumber":203,"author":{"gitID":"RyanAngJY"},"content":"                image, tags);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedRecipe)) {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"        XmlAdaptedRecipe otherRecipe \u003d (XmlAdaptedRecipe) other;"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        return Objects.equals(name, otherRecipe.name)"},{"lineNumber":218,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(ingredient, otherRecipe.ingredient)"},{"lineNumber":219,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(instruction, otherRecipe.instruction)"},{"lineNumber":220,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(cookingTime, otherRecipe.cookingTime)"},{"lineNumber":221,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(preparationTime, otherRecipe.preparationTime)"},{"lineNumber":222,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(calories, otherRecipe.calories)"},{"lineNumber":223,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(servings, otherRecipe.servings)"},{"lineNumber":224,"author":{"gitID":"RyanAngJY"},"content":"                \u0026\u0026 Objects.equals(url, otherRecipe.url)"},{"lineNumber":225,"author":{"gitID":"RyanAngJY"},"content":"                \u0026\u0026 Objects.equals(image, otherRecipe.image)"},{"lineNumber":226,"author":{"gitID":"-"},"content":"                \u0026\u0026 tagged.equals(otherRecipe.tagged);"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"kokonguyen191":55,"RyanAngJY":36,"-":137}},{"path":"src/main/java/seedu/recipe/model/util/HtmlFormatter.java","lines":[{"lineNumber":1,"author":{"gitID":"RyanAngJY"},"content":"//@@author RyanAngJY"},{"lineNumber":2,"author":{"gitID":"RyanAngJY"},"content":"package seedu.recipe.model.util;"},{"lineNumber":3,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":4,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":5,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":6,"author":{"gitID":"RyanAngJY"},"content":"import java.net.URL;"},{"lineNumber":7,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":8,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.MainApp;"},{"lineNumber":9,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.model.recipe.Recipe;"},{"lineNumber":10,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":11,"author":{"gitID":"RyanAngJY"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"RyanAngJY"},"content":" * HTML formatter for Recipe class."},{"lineNumber":13,"author":{"gitID":"RyanAngJY"},"content":" */"},{"lineNumber":14,"author":{"gitID":"RyanAngJY"},"content":"public class HtmlFormatter {"},{"lineNumber":15,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":16,"author":{"gitID":"RyanAngJY"},"content":"    public static String getHtmlFormat (Recipe recipe) {"},{"lineNumber":17,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":18,"author":{"gitID":"RyanAngJY"},"content":"        URL recipeCss \u003d MainApp.class.getResource(FXML_FILE_FOLDER + \"Recipe.css\");"},{"lineNumber":19,"author":{"gitID":"RyanAngJY"},"content":"        URL bootstrapCss \u003d MainApp.class.getResource(FXML_FILE_FOLDER + \"bootstrap.css\");"},{"lineNumber":20,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":21,"author":{"gitID":"RyanAngJY"},"content":"        String name \u003d recipe.getName().toString();"},{"lineNumber":22,"author":{"gitID":"RyanAngJY"},"content":"        String cookingTime \u003d recipe.getCookingTime().toString();"},{"lineNumber":23,"author":{"gitID":"RyanAngJY"},"content":"        String preparationTime \u003d recipe.getPreparationTime().toString();"},{"lineNumber":24,"author":{"gitID":"RyanAngJY"},"content":"        String calories \u003d recipe.getCalories().toString();"},{"lineNumber":25,"author":{"gitID":"RyanAngJY"},"content":"        String servings \u003d recipe.getServings().toString();"},{"lineNumber":26,"author":{"gitID":"RyanAngJY"},"content":"        String image \u003d recipe.getImage().getUsablePath();"},{"lineNumber":27,"author":{"gitID":"RyanAngJY"},"content":"        String ingredient \u003d recipe.getIngredient().toString();"},{"lineNumber":28,"author":{"gitID":"RyanAngJY"},"content":"        String instruction \u003d recipe.getInstruction().toString();"},{"lineNumber":29,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":30,"author":{"gitID":"RyanAngJY"},"content":"        return \"\u003chtml\u003e\""},{"lineNumber":31,"author":{"gitID":"RyanAngJY"},"content":"                + \"\u003chead\u003e\""},{"lineNumber":32,"author":{"gitID":"RyanAngJY"},"content":"                + \"\u003clink rel\u003d\u0027stylesheet\u0027 type\u003d\u0027text/css\u0027 href\u003d\u0027\" + bootstrapCss.toExternalForm() + \"\u0027 /\u003e\""},{"lineNumber":33,"author":{"gitID":"RyanAngJY"},"content":"                + \"\u003clink rel\u003d\u0027stylesheet\u0027 type\u003d\u0027text/css\u0027 href\u003d\u0027\" + recipeCss.toExternalForm() + \"\u0027 /\u003e\""},{"lineNumber":34,"author":{"gitID":"RyanAngJY"},"content":"                + \"\u003c/head\u003e\""},{"lineNumber":35,"author":{"gitID":"RyanAngJY"},"content":"                + \"\u003cbody\u003e\""},{"lineNumber":36,"author":{"gitID":"RyanAngJY"},"content":"                + \"\u003cdiv class\u003d\u0027row\u0027\u003e\""},{"lineNumber":37,"author":{"gitID":"RyanAngJY"},"content":"                + \"\u003ch1 class\u003d\u0027name\u0027\u003e\" + name + \"\u003c/h1\u003e\""},{"lineNumber":38,"author":{"gitID":"RyanAngJY"},"content":"                + \"\u003cdiv class\u003d\u0027col-sm-6\u0027\u003e\""},{"lineNumber":39,"author":{"gitID":"RyanAngJY"},"content":"                + \"\u003cdiv class\u003d\u0027col-sm-3\u0027\u003e\""},{"lineNumber":40,"author":{"gitID":"RyanAngJY"},"content":"                + \"\u003ch5\u003eCooking Time:\u003c/h5\u003e\""},{"lineNumber":41,"author":{"gitID":"RyanAngJY"},"content":"                + \"\u003cp\u003e\" + cookingTime + \"\u003c/p\u003e\""},{"lineNumber":42,"author":{"gitID":"RyanAngJY"},"content":"                + \"\u003c/div\u003e\""},{"lineNumber":43,"author":{"gitID":"RyanAngJY"},"content":"                + \"\u003cdiv class\u003d\u0027col-sm-3\u0027\u003e\""},{"lineNumber":44,"author":{"gitID":"RyanAngJY"},"content":"                + \"\u003ch5\u003ePreparation Time:\u003c/h5\u003e\""},{"lineNumber":45,"author":{"gitID":"RyanAngJY"},"content":"                + \"\u003cp\u003e\" + preparationTime + \"\u003c/p\u003e\""},{"lineNumber":46,"author":{"gitID":"RyanAngJY"},"content":"                + \"\u003c/div\u003e\""},{"lineNumber":47,"author":{"gitID":"RyanAngJY"},"content":"                + \"\u003cdiv class\u003d\u0027col-sm-3\u0027\u003e\""},{"lineNumber":48,"author":{"gitID":"RyanAngJY"},"content":"                + \"\u003ch5\u003eCalories:\u003c/h5\u003e\""},{"lineNumber":49,"author":{"gitID":"RyanAngJY"},"content":"                + \"\u003cp\u003e\" + calories + \"\u003c/p\u003e\""},{"lineNumber":50,"author":{"gitID":"RyanAngJY"},"content":"                + \"\u003c/div\u003e\""},{"lineNumber":51,"author":{"gitID":"RyanAngJY"},"content":"                + \"\u003cdiv class\u003d\u0027col-sm-3\u0027\u003e\""},{"lineNumber":52,"author":{"gitID":"RyanAngJY"},"content":"                + \"\u003ch5\u003eServings:\u003c/h5\u003e\""},{"lineNumber":53,"author":{"gitID":"RyanAngJY"},"content":"                + \"\u003cp\u003e\" + servings + \"\u003c/p\u003e\""},{"lineNumber":54,"author":{"gitID":"RyanAngJY"},"content":"                + \"\u003c/div\u003e\""},{"lineNumber":55,"author":{"gitID":"RyanAngJY"},"content":"                + \"\u003c/div\u003e\""},{"lineNumber":56,"author":{"gitID":"RyanAngJY"},"content":"                + \"\u003cdiv class\u003d\u0027col-sm-6\u0027\u003e\""},{"lineNumber":57,"author":{"gitID":"RyanAngJY"},"content":"                + \"\u003cimg src\u003d\u0027\" + image + \"\u0027 /\u003e\""},{"lineNumber":58,"author":{"gitID":"RyanAngJY"},"content":"                + \"\u003c/div\u003e\""},{"lineNumber":59,"author":{"gitID":"RyanAngJY"},"content":"                + \"\u003cdiv class\u003d\u0027col-sm-12\u0027\u003e\""},{"lineNumber":60,"author":{"gitID":"RyanAngJY"},"content":"                + \"\u003cdiv class\u003d\u0027col-sm-12\u0027\u003e\""},{"lineNumber":61,"author":{"gitID":"RyanAngJY"},"content":"                + \"\u003ch5\u003eIngredients:\u003c/h5\u003e\""},{"lineNumber":62,"author":{"gitID":"RyanAngJY"},"content":"                + \"\u003cp\u003e\" + ingredient + \"\u003c/p\u003e\""},{"lineNumber":63,"author":{"gitID":"RyanAngJY"},"content":"                + \"\u003c/div\u003e\""},{"lineNumber":64,"author":{"gitID":"RyanAngJY"},"content":"                + \"\u003cdiv class\u003d\u0027col-sm-12\u0027\u003e\""},{"lineNumber":65,"author":{"gitID":"RyanAngJY"},"content":"                + \"\u003ch5\u003eInstructions:\u003c/h5\u003e\""},{"lineNumber":66,"author":{"gitID":"RyanAngJY"},"content":"                + \"\u003cp\u003e\" + instruction + \"\u003c/p\u003e\""},{"lineNumber":67,"author":{"gitID":"RyanAngJY"},"content":"                + \"\u003c/div\u003e\""},{"lineNumber":68,"author":{"gitID":"RyanAngJY"},"content":"                + \"\u003c/div\u003e\""},{"lineNumber":69,"author":{"gitID":"RyanAngJY"},"content":"                + \"\u003c/div\u003e\""},{"lineNumber":70,"author":{"gitID":"RyanAngJY"},"content":"                + \"\u003c/body\u003e\""},{"lineNumber":71,"author":{"gitID":"RyanAngJY"},"content":"                + \"\u003c/html\u003e\";"},{"lineNumber":72,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"RyanAngJY"},"content":"}"},{"lineNumber":74,"author":{"gitID":"RyanAngJY"},"content":"//@@author"}],"authorContributionMap":{"RyanAngJY":74}},{"path":"src/main/java/seedu/recipe/model/file/Filename.java","lines":[{"lineNumber":1,"author":{"gitID":"nicholasangcx"},"content":"//@@author nicholasangcx"},{"lineNumber":2,"author":{"gitID":"nicholasangcx"},"content":"package seedu.recipe.model.file;"},{"lineNumber":3,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":4,"author":{"gitID":"nicholasangcx"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"nicholasangcx"},"content":"import static seedu.recipe.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":7,"author":{"gitID":"nicholasangcx"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"nicholasangcx"},"content":" * Represents a Filename used to upload to Dropbox"},{"lineNumber":9,"author":{"gitID":"nicholasangcx"},"content":" * Guarantees: immutable; filename is valid as declared in {@link #isValidFilename(String)}"},{"lineNumber":10,"author":{"gitID":"nicholasangcx"},"content":" */"},{"lineNumber":11,"author":{"gitID":"nicholasangcx"},"content":"public class Filename {"},{"lineNumber":12,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":13,"author":{"gitID":"nicholasangcx"},"content":"    public static final String MESSAGE_FILENAME_CONSTRAINTS \u003d \"Filenames should not contain any\""},{"lineNumber":14,"author":{"gitID":"nicholasangcx"},"content":"            + \" incompatible characters\";"},{"lineNumber":15,"author":{"gitID":"nicholasangcx"},"content":"    private static final String FILENAME_VALIDATION_REGEX \u003d \"[^\\\\Q\u003c\u003e:/|.?\\\"\\\\*\\\\E\\\\s]+\";"},{"lineNumber":16,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":17,"author":{"gitID":"nicholasangcx"},"content":"    public final String filename;"},{"lineNumber":18,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":19,"author":{"gitID":"nicholasangcx"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"nicholasangcx"},"content":"     * Constructs a {@code Filename}"},{"lineNumber":21,"author":{"gitID":"nicholasangcx"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"nicholasangcx"},"content":"     * @param filename a valid filename"},{"lineNumber":23,"author":{"gitID":"nicholasangcx"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"nicholasangcx"},"content":"    public Filename(String filename) {"},{"lineNumber":25,"author":{"gitID":"nicholasangcx"},"content":"        requireNonNull(filename);"},{"lineNumber":26,"author":{"gitID":"nicholasangcx"},"content":"        checkArgument(isValidFilename(filename), MESSAGE_FILENAME_CONSTRAINTS);"},{"lineNumber":27,"author":{"gitID":"nicholasangcx"},"content":"        this.filename \u003d filename;"},{"lineNumber":28,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":30,"author":{"gitID":"nicholasangcx"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"nicholasangcx"},"content":"     * Returns true if a given string is a valid filename."},{"lineNumber":32,"author":{"gitID":"nicholasangcx"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"nicholasangcx"},"content":"    public static boolean isValidFilename(String test) {"},{"lineNumber":34,"author":{"gitID":"nicholasangcx"},"content":"        return test.matches(FILENAME_VALIDATION_REGEX);"},{"lineNumber":35,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":37,"author":{"gitID":"nicholasangcx"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"nicholasangcx"},"content":"    public boolean equals(Object other) {"},{"lineNumber":39,"author":{"gitID":"nicholasangcx"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":40,"author":{"gitID":"nicholasangcx"},"content":"                || (other instanceof Filename // instanceof handles nulls"},{"lineNumber":41,"author":{"gitID":"nicholasangcx"},"content":"                \u0026\u0026 this.filename.equals(((Filename) other).filename)); // state check"},{"lineNumber":42,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":44,"author":{"gitID":"nicholasangcx"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"nicholasangcx"},"content":"    public int hashCode() {"},{"lineNumber":46,"author":{"gitID":"nicholasangcx"},"content":"        return filename.hashCode();"},{"lineNumber":47,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"nicholasangcx"},"content":"}"},{"lineNumber":49,"author":{"gitID":"nicholasangcx"},"content":"//@@author"}],"authorContributionMap":{"nicholasangcx":49}},{"path":"src/main/java/seedu/recipe/model/recipe/IngredientContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"nicholasangcx"},"content":"//@@author nicholasangcx"},{"lineNumber":2,"author":{"gitID":"nicholasangcx"},"content":"package seedu.recipe.model.recipe;"},{"lineNumber":3,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":4,"author":{"gitID":"nicholasangcx"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"nicholasangcx"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":7,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.commons.util.StringUtil;"},{"lineNumber":8,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":9,"author":{"gitID":"nicholasangcx"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"nicholasangcx"},"content":" * Tests that a {@code Recipe}\u0027s {@code Ingredient} matches all of the keywords given."},{"lineNumber":11,"author":{"gitID":"nicholasangcx"},"content":" */"},{"lineNumber":12,"author":{"gitID":"nicholasangcx"},"content":"public class IngredientContainsKeywordsPredicate implements Predicate\u003cRecipe\u003e {"},{"lineNumber":13,"author":{"gitID":"nicholasangcx"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":14,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":15,"author":{"gitID":"nicholasangcx"},"content":"    public IngredientContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":16,"author":{"gitID":"nicholasangcx"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":17,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":19,"author":{"gitID":"nicholasangcx"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"nicholasangcx"},"content":"    public boolean test(Recipe recipe) {"},{"lineNumber":21,"author":{"gitID":"nicholasangcx"},"content":"        int matches \u003d 0;"},{"lineNumber":22,"author":{"gitID":"nicholasangcx"},"content":"        String ingredients \u003d recipe.getIngredient().toString().replaceAll(\",\", \" \");"},{"lineNumber":23,"author":{"gitID":"nicholasangcx"},"content":"        for (String keyword : keywords) {"},{"lineNumber":24,"author":{"gitID":"nicholasangcx"},"content":"            if (StringUtil.containsWordIgnoreCase(ingredients, keyword)) {"},{"lineNumber":25,"author":{"gitID":"nicholasangcx"},"content":"                matches++;"},{"lineNumber":26,"author":{"gitID":"nicholasangcx"},"content":"            }"},{"lineNumber":27,"author":{"gitID":"nicholasangcx"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"nicholasangcx"},"content":"        return matches \u003d\u003d keywords.size();"},{"lineNumber":29,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":31,"author":{"gitID":"nicholasangcx"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"nicholasangcx"},"content":"    public boolean equals(Object other) {"},{"lineNumber":33,"author":{"gitID":"nicholasangcx"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":34,"author":{"gitID":"nicholasangcx"},"content":"                || (other instanceof IngredientContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":35,"author":{"gitID":"nicholasangcx"},"content":"                \u0026\u0026 this.keywords.equals(((IngredientContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":36,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"nicholasangcx"},"content":"}"},{"lineNumber":38,"author":{"gitID":"nicholasangcx"},"content":"//@@author"}],"authorContributionMap":{"nicholasangcx":38}},{"path":"src/main/java/seedu/recipe/model/recipe/GroupName.java","lines":[{"lineNumber":1,"author":{"gitID":"hoangduong1607"},"content":"//@@author hoangduong1607"},{"lineNumber":2,"author":{"gitID":"hoangduong1607"},"content":"package seedu.recipe.model.recipe;"},{"lineNumber":3,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":4,"author":{"gitID":"hoangduong1607"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"hoangduong1607"},"content":" * Represents a recipe group\u0027s name in the recipe book."},{"lineNumber":6,"author":{"gitID":"hoangduong1607"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":7,"author":{"gitID":"hoangduong1607"},"content":" */"},{"lineNumber":8,"author":{"gitID":"hoangduong1607"},"content":"public class GroupName extends Name {"},{"lineNumber":9,"author":{"gitID":"hoangduong1607"},"content":"    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"},{"lineNumber":10,"author":{"gitID":"hoangduong1607"},"content":"            \"Recipe group names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":11,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":12,"author":{"gitID":"hoangduong1607"},"content":"    /**"},{"lineNumber":13,"author":{"gitID":"hoangduong1607"},"content":"     * Constructs a {@code Name}."},{"lineNumber":14,"author":{"gitID":"hoangduong1607"},"content":"     *"},{"lineNumber":15,"author":{"gitID":"hoangduong1607"},"content":"     * @param name A valid name."},{"lineNumber":16,"author":{"gitID":"hoangduong1607"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"hoangduong1607"},"content":"    public GroupName(String name) {"},{"lineNumber":18,"author":{"gitID":"hoangduong1607"},"content":"        super(name);"},{"lineNumber":19,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"hoangduong1607"},"content":"}"}],"authorContributionMap":{"hoangduong1607":20}},{"path":"src/main/java/seedu/recipe/model/recipe/Ingredient.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.model.recipe;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.recipe.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a Recipe\u0027s ingredient in the recipe book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidIngredient(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Ingredient {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String NULL_INGREDIENT_REFERENCE \u003d \"-\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INGREDIENT_CONSTRAINTS \u003d \"Recipe ingredients should be a list of \""},{"lineNumber":14,"author":{"gitID":"-"},"content":"            + \"ingredients, delimited by commas.\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static  final String INGREDIENT_VALIDATION_REGEX \u003d \"^(([a-zA-Z0-9]|[^\\\\x00-\\\\x7F]|-)+,?\\\\s*)+$\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Constructs an {@code Ingredient}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @param ingredient A valid ingredient recipe."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public Ingredient(String ingredient) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        requireNonNull(ingredient);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        checkArgument(isValidIngredient(ingredient), MESSAGE_INGREDIENT_CONSTRAINTS);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.value \u003d ingredient;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"RyanAngJY"},"content":"     * Returns true if a given string is a valid recipe ingredient."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static boolean isValidIngredient(String test) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        return test.equals(NULL_INGREDIENT_REFERENCE) || test.matches(INGREDIENT_VALIDATION_REGEX);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                || (other instanceof Ingredient // instanceof handles nulls"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Ingredient) other).value)); // state check"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":1,"-":53}},{"path":"src/main/java/seedu/recipe/model/recipe/Image.java","lines":[{"lineNumber":1,"author":{"gitID":"RyanAngJY"},"content":"//@@author RyanAngJY"},{"lineNumber":2,"author":{"gitID":"RyanAngJY"},"content":"package seedu.recipe.model.recipe;"},{"lineNumber":3,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":4,"author":{"gitID":"RyanAngJY"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":7,"author":{"gitID":"RyanAngJY"},"content":"import java.io.File;"},{"lineNumber":8,"author":{"gitID":"RyanAngJY"},"content":"import java.net.URL;"},{"lineNumber":9,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":10,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.MainApp;"},{"lineNumber":11,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.commons.exceptions.NoInternetConnectionException;"},{"lineNumber":12,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"RyanAngJY"},"content":"import seedu.recipe.storage.ImageDownloader;"},{"lineNumber":14,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":15,"author":{"gitID":"RyanAngJY"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"RyanAngJY"},"content":" * Represents a Recipe\u0027s image in the address book."},{"lineNumber":17,"author":{"gitID":"RyanAngJY"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidImage(String)}"},{"lineNumber":18,"author":{"gitID":"RyanAngJY"},"content":" */"},{"lineNumber":19,"author":{"gitID":"RyanAngJY"},"content":"public class Image {"},{"lineNumber":20,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":21,"author":{"gitID":"RyanAngJY"},"content":"    public static final String NULL_IMAGE_REFERENCE \u003d \"-\";"},{"lineNumber":22,"author":{"gitID":"RyanAngJY"},"content":"    public static final String FILE_PREFIX \u003d \"file:\";"},{"lineNumber":23,"author":{"gitID":"RyanAngJY"},"content":"    public static final String IMAGE_STORAGE_FOLDER \u003d \"data/images/\";"},{"lineNumber":24,"author":{"gitID":"RyanAngJY"},"content":"    public static final String MESSAGE_IMAGE_CONSTRAINTS \u003d \"Image path should be valid,\""},{"lineNumber":25,"author":{"gitID":"RyanAngJY"},"content":"            + \" file should be a valid image file\";"},{"lineNumber":26,"author":{"gitID":"RyanAngJY"},"content":"    public static final URL VALID_IMAGE \u003d MainApp.class.getResource(\"/images/clock.png\");"},{"lineNumber":27,"author":{"gitID":"RyanAngJY"},"content":"    public static final String VALID_IMAGE_PATH \u003d VALID_IMAGE.toExternalForm().substring(5);"},{"lineNumber":28,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":29,"author":{"gitID":"RyanAngJY"},"content":"    private String value;"},{"lineNumber":30,"author":{"gitID":"RyanAngJY"},"content":"    private String imageName;"},{"lineNumber":31,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":32,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"RyanAngJY"},"content":"     * Constructs a {@code Image}."},{"lineNumber":34,"author":{"gitID":"RyanAngJY"},"content":"     *"},{"lineNumber":35,"author":{"gitID":"RyanAngJY"},"content":"     * @param imagePath A valid file path."},{"lineNumber":36,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"RyanAngJY"},"content":"    public Image(String imagePath) {"},{"lineNumber":38,"author":{"gitID":"RyanAngJY"},"content":"        requireNonNull(imagePath);"},{"lineNumber":39,"author":{"gitID":"kokonguyen191"},"content":"        //@@author kokonguyen191"},{"lineNumber":40,"author":{"gitID":"kokonguyen191"},"content":"        try {"},{"lineNumber":41,"author":{"gitID":"kokonguyen191"},"content":"            checkArgument(isValidImage(imagePath), MESSAGE_IMAGE_CONSTRAINTS);"},{"lineNumber":42,"author":{"gitID":"kokonguyen191"},"content":"            if (ImageDownloader.isValidImageUrl(imagePath)) {"},{"lineNumber":43,"author":{"gitID":"kokonguyen191"},"content":"                imagePath \u003d ImageDownloader.downloadImage(imagePath);"},{"lineNumber":44,"author":{"gitID":"kokonguyen191"},"content":"            }"},{"lineNumber":45,"author":{"gitID":"kokonguyen191"},"content":"        } catch (NoInternetConnectionException e) {"},{"lineNumber":46,"author":{"gitID":"kokonguyen191"},"content":"            imagePath \u003d NULL_IMAGE_REFERENCE;"},{"lineNumber":47,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"kokonguyen191"},"content":"        //@@author"},{"lineNumber":49,"author":{"gitID":"RyanAngJY"},"content":"        this.value \u003d imagePath;"},{"lineNumber":50,"author":{"gitID":"RyanAngJY"},"content":"        setImageName();"},{"lineNumber":51,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":53,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"RyanAngJY"},"content":"     * Sets the name of the image file"},{"lineNumber":55,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"RyanAngJY"},"content":"    public void setImageName() {"},{"lineNumber":57,"author":{"gitID":"RyanAngJY"},"content":"        if (this.value.equals(NULL_IMAGE_REFERENCE)) {"},{"lineNumber":58,"author":{"gitID":"RyanAngJY"},"content":"            imageName \u003d NULL_IMAGE_REFERENCE;"},{"lineNumber":59,"author":{"gitID":"RyanAngJY"},"content":"        } else {"},{"lineNumber":60,"author":{"gitID":"RyanAngJY"},"content":"            this.imageName \u003d new File(this.value).getName();"},{"lineNumber":61,"author":{"gitID":"RyanAngJY"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":64,"author":{"gitID":"RyanAngJY"},"content":"    public String getImageName() {"},{"lineNumber":65,"author":{"gitID":"RyanAngJY"},"content":"        return imageName;"},{"lineNumber":66,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":68,"author":{"gitID":"kokonguyen191"},"content":"    //@@author kokonguyen191"},{"lineNumber":69,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":70,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"kokonguyen191"},"content":"     * Returns true if a given string is a valid file path, or no file path has been assigned"},{"lineNumber":72,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"kokonguyen191"},"content":"    public static boolean isValidImage(String testImageInput) throws NoInternetConnectionException {"},{"lineNumber":74,"author":{"gitID":"kokonguyen191"},"content":"        if (testImageInput.equals(NULL_IMAGE_REFERENCE)) {"},{"lineNumber":75,"author":{"gitID":"kokonguyen191"},"content":"            return true;"},{"lineNumber":76,"author":{"gitID":"kokonguyen191"},"content":"        } else {"},{"lineNumber":77,"author":{"gitID":"kokonguyen191"},"content":"            boolean isValidImageStringInput \u003d isValidImageStringInput(testImageInput);"},{"lineNumber":78,"author":{"gitID":"kokonguyen191"},"content":"            boolean isValidImagePath \u003d FileUtil.isImageFile(testImageInput);"},{"lineNumber":79,"author":{"gitID":"kokonguyen191"},"content":"            boolean isValidImageUrl \u003d ImageDownloader.isValidImageUrl(testImageInput);"},{"lineNumber":80,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":81,"author":{"gitID":"kokonguyen191"},"content":"            boolean isValidImage \u003d isValidImageStringInput \u0026\u0026 (isValidImagePath || isValidImageUrl);"},{"lineNumber":82,"author":{"gitID":"kokonguyen191"},"content":"            return isValidImage;"},{"lineNumber":83,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":86,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"kokonguyen191"},"content":"     * Returns true if the input is a valid input syntax-wise"},{"lineNumber":88,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"kokonguyen191"},"content":"    private static boolean isValidImageStringInput(String testString) {"},{"lineNumber":90,"author":{"gitID":"kokonguyen191"},"content":"        String trimmedTestImagePath \u003d testString.trim();"},{"lineNumber":91,"author":{"gitID":"kokonguyen191"},"content":"        if (trimmedTestImagePath.equals(\"\")) {"},{"lineNumber":92,"author":{"gitID":"kokonguyen191"},"content":"            return false;"},{"lineNumber":93,"author":{"gitID":"kokonguyen191"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"kokonguyen191"},"content":"        return true;"},{"lineNumber":95,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":97,"author":{"gitID":"RyanAngJY"},"content":"    //@@author RyanAngJY"},{"lineNumber":98,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":99,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"RyanAngJY"},"content":"     * Sets image path to follow internal image storage folder"},{"lineNumber":101,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"RyanAngJY"},"content":"    public void setImageToInternalReference() {"},{"lineNumber":103,"author":{"gitID":"RyanAngJY"},"content":"        if (!imageName.equals(NULL_IMAGE_REFERENCE)) {"},{"lineNumber":104,"author":{"gitID":"RyanAngJY"},"content":"            this.value \u003d IMAGE_STORAGE_FOLDER + imageName;"},{"lineNumber":105,"author":{"gitID":"RyanAngJY"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":108,"author":{"gitID":"RyanAngJY"},"content":"    public String getUsablePath() {"},{"lineNumber":109,"author":{"gitID":"RyanAngJY"},"content":"        File imagePath \u003d new File(this.value);"},{"lineNumber":110,"author":{"gitID":"RyanAngJY"},"content":"        return FILE_PREFIX + imagePath.getAbsolutePath();"},{"lineNumber":111,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":113,"author":{"gitID":"RyanAngJY"},"content":"    @Override"},{"lineNumber":114,"author":{"gitID":"RyanAngJY"},"content":"    public String toString() {"},{"lineNumber":115,"author":{"gitID":"RyanAngJY"},"content":"        return value;"},{"lineNumber":116,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":118,"author":{"gitID":"RyanAngJY"},"content":"    @Override"},{"lineNumber":119,"author":{"gitID":"RyanAngJY"},"content":"    public boolean equals(Object other) {"},{"lineNumber":120,"author":{"gitID":"RyanAngJY"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":121,"author":{"gitID":"RyanAngJY"},"content":"                || (other instanceof Image // instanceof handles nulls"},{"lineNumber":122,"author":{"gitID":"RyanAngJY"},"content":"                \u0026\u0026 this.value.equals(((Image) other).value)); // state check"},{"lineNumber":123,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":125,"author":{"gitID":"RyanAngJY"},"content":"    @Override"},{"lineNumber":126,"author":{"gitID":"RyanAngJY"},"content":"    public int hashCode() {"},{"lineNumber":127,"author":{"gitID":"RyanAngJY"},"content":"        return value.hashCode();"},{"lineNumber":128,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"RyanAngJY"},"content":"}"},{"lineNumber":130,"author":{"gitID":"RyanAngJY"},"content":"//@@author"}],"authorContributionMap":{"kokonguyen191":39,"RyanAngJY":91}},{"path":"src/main/java/seedu/recipe/model/recipe/Servings.java","lines":[{"lineNumber":1,"author":{"gitID":"kokonguyen191"},"content":"//@@author kokonguyen191"},{"lineNumber":2,"author":{"gitID":"kokonguyen191"},"content":"package seedu.recipe.model.recipe;"},{"lineNumber":3,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":4,"author":{"gitID":"kokonguyen191"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":7,"author":{"gitID":"kokonguyen191"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"kokonguyen191"},"content":" * Represents a Recipe\u0027s number of servings in the Recipe Book."},{"lineNumber":9,"author":{"gitID":"kokonguyen191"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidServings(String)}"},{"lineNumber":10,"author":{"gitID":"kokonguyen191"},"content":" */"},{"lineNumber":11,"author":{"gitID":"kokonguyen191"},"content":"public class Servings {"},{"lineNumber":12,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":13,"author":{"gitID":"kokonguyen191"},"content":"    public static final String NULL_SERVINGS_REFERENCE \u003d \"-\";"},{"lineNumber":14,"author":{"gitID":"kokonguyen191"},"content":"    public static final String MESSAGE_SERVINGS_CONSTRAINTS \u003d \"The number of servings must a positive integer.\";"},{"lineNumber":15,"author":{"gitID":"kokonguyen191"},"content":"    public static final String SERVINGS_VALIDATION_REGEX \u003d \"[\\\\d]+\";"},{"lineNumber":16,"author":{"gitID":"kokonguyen191"},"content":"    public final String value;"},{"lineNumber":17,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":18,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"kokonguyen191"},"content":"     * Constructs a {@code Servings} object."},{"lineNumber":20,"author":{"gitID":"kokonguyen191"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"kokonguyen191"},"content":"     * @param servings A valid number of servings."},{"lineNumber":22,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"kokonguyen191"},"content":"    public Servings(String servings) {"},{"lineNumber":24,"author":{"gitID":"kokonguyen191"},"content":"        requireNonNull(servings);"},{"lineNumber":25,"author":{"gitID":"kokonguyen191"},"content":"        checkArgument(isValidServings(servings), MESSAGE_SERVINGS_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitID":"kokonguyen191"},"content":"        this.value \u003d servings;"},{"lineNumber":27,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":29,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"kokonguyen191"},"content":"     * Returns true if a given string is a valid number of servings."},{"lineNumber":31,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"kokonguyen191"},"content":"    public static boolean isValidServings(String test) {"},{"lineNumber":33,"author":{"gitID":"kokonguyen191"},"content":"        return test.equals(NULL_SERVINGS_REFERENCE) || test.matches(SERVINGS_VALIDATION_REGEX);"},{"lineNumber":34,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":36,"author":{"gitID":"kokonguyen191"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"kokonguyen191"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitID":"kokonguyen191"},"content":"        return value;"},{"lineNumber":39,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":41,"author":{"gitID":"kokonguyen191"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"kokonguyen191"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitID":"kokonguyen191"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitID":"kokonguyen191"},"content":"                || (other instanceof Servings // instanceof handles nulls"},{"lineNumber":45,"author":{"gitID":"kokonguyen191"},"content":"                \u0026\u0026 this.value.equals(((Servings) other).value)); // state check"},{"lineNumber":46,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":48,"author":{"gitID":"kokonguyen191"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"kokonguyen191"},"content":"    public int hashCode() {"},{"lineNumber":50,"author":{"gitID":"kokonguyen191"},"content":"        return value.hashCode();"},{"lineNumber":51,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":53,"author":{"gitID":"kokonguyen191"},"content":"}"}],"authorContributionMap":{"kokonguyen191":53}},{"path":"src/main/java/seedu/recipe/model/recipe/PreparationTime.java","lines":[{"lineNumber":1,"author":{"gitID":"kokonguyen191"},"content":"//@@author kokonguyen191"},{"lineNumber":2,"author":{"gitID":"kokonguyen191"},"content":"package seedu.recipe.model.recipe;"},{"lineNumber":3,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":4,"author":{"gitID":"kokonguyen191"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":7,"author":{"gitID":"kokonguyen191"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"kokonguyen191"},"content":" * Represents a Recipe\u0027s preparation time in the Recipe Book."},{"lineNumber":9,"author":{"gitID":"kokonguyen191"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPreparationTime(String)}"},{"lineNumber":10,"author":{"gitID":"kokonguyen191"},"content":" */"},{"lineNumber":11,"author":{"gitID":"kokonguyen191"},"content":"public class PreparationTime {"},{"lineNumber":12,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":13,"author":{"gitID":"kokonguyen191"},"content":"    public static final String NULL_PREPARATION_TIME_REFERENCE \u003d \"-\";"},{"lineNumber":14,"author":{"gitID":"kokonguyen191"},"content":"    public static final String MESSAGE_PREPARATION_TIME_CONSTRAINTS \u003d"},{"lineNumber":15,"author":{"gitID":"kokonguyen191"},"content":"            \"Preparation time can be in any of these format: 1h20m, 80m, 1 hour 20 minutes, 1 h 20 min, 80.\";"},{"lineNumber":16,"author":{"gitID":"kokonguyen191"},"content":"    public static final String PREPARATION_TIME_VALIDATION_REGEX \u003d"},{"lineNumber":17,"author":{"gitID":"kokonguyen191"},"content":"            \"([\\\\d]+[ ]{0,1}(minute[s]{0,1}|min[s]{0,1}|m|hour[s]{0,1}|h){0,1}[ ]{0,1}){1,2}\";"},{"lineNumber":18,"author":{"gitID":"kokonguyen191"},"content":"    public final String value;"},{"lineNumber":19,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":20,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"kokonguyen191"},"content":"     * Constructs a {@code PreparationTime}."},{"lineNumber":22,"author":{"gitID":"kokonguyen191"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"kokonguyen191"},"content":"     * @param preparationTime A valid preparation time."},{"lineNumber":24,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"kokonguyen191"},"content":"    public PreparationTime(String preparationTime) {"},{"lineNumber":26,"author":{"gitID":"kokonguyen191"},"content":"        requireNonNull(preparationTime);"},{"lineNumber":27,"author":{"gitID":"kokonguyen191"},"content":"        checkArgument(isValidPreparationTime(preparationTime), MESSAGE_PREPARATION_TIME_CONSTRAINTS);"},{"lineNumber":28,"author":{"gitID":"kokonguyen191"},"content":"        this.value \u003d preparationTime;"},{"lineNumber":29,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":31,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"kokonguyen191"},"content":"     * Returns true if a given string is a valid recipe preparation time."},{"lineNumber":33,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"kokonguyen191"},"content":"    public static boolean isValidPreparationTime(String test) {"},{"lineNumber":35,"author":{"gitID":"kokonguyen191"},"content":"        return test.equals(NULL_PREPARATION_TIME_REFERENCE) || test.matches(PREPARATION_TIME_VALIDATION_REGEX);"},{"lineNumber":36,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":38,"author":{"gitID":"kokonguyen191"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"kokonguyen191"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitID":"kokonguyen191"},"content":"        return value;"},{"lineNumber":41,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":43,"author":{"gitID":"kokonguyen191"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"kokonguyen191"},"content":"    public boolean equals(Object other) {"},{"lineNumber":45,"author":{"gitID":"kokonguyen191"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":46,"author":{"gitID":"kokonguyen191"},"content":"                || (other instanceof PreparationTime // instanceof handles nulls"},{"lineNumber":47,"author":{"gitID":"kokonguyen191"},"content":"                \u0026\u0026 this.value.equals(((PreparationTime) other).value)); // state check"},{"lineNumber":48,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":50,"author":{"gitID":"kokonguyen191"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"kokonguyen191"},"content":"    public int hashCode() {"},{"lineNumber":52,"author":{"gitID":"kokonguyen191"},"content":"        return value.hashCode();"},{"lineNumber":53,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":55,"author":{"gitID":"kokonguyen191"},"content":"}"}],"authorContributionMap":{"kokonguyen191":55}},{"path":"src/main/java/seedu/recipe/model/recipe/Recipe.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.model.recipe;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.recipe.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"hoangduong1607"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.recipe.model.tag.Tag;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.recipe.model.tag.UniqueTagList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Represents a Recipe in the recipe book."},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class Recipe {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"RyanAngJY"},"content":"    public static final String LINE_BREAK \u003d \"\\n\\n\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String NEW_LINE \u003d \"\\n\";"},{"lineNumber":21,"author":{"gitID":"RyanAngJY"},"content":"    public static final String NAME_HEADER \u003d \"Name:\\n\";"},{"lineNumber":22,"author":{"gitID":"RyanAngJY"},"content":"    public static final String INGREDIENTS_HEADER \u003d \"Ingredients:\\n\";"},{"lineNumber":23,"author":{"gitID":"RyanAngJY"},"content":"    public static final String INSTRUCTIONS_HEADER \u003d \"Instructions:\\n\";"},{"lineNumber":24,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Ingredient ingredient;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Instruction instruction;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final CookingTime cookingTime;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final PreparationTime preparationTime;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final Calories calories;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final Servings servings;"},{"lineNumber":32,"author":{"gitID":"RyanAngJY"},"content":"    private final Url url;"},{"lineNumber":33,"author":{"gitID":"RyanAngJY"},"content":"    private final Image image;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":35,"author":{"gitID":"hoangduong1607"},"content":"    private final Set\u003cGroupName\u003e groupNames;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public Recipe(Name name, Ingredient ingredient, Instruction instruction,"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                  CookingTime cookingTime, PreparationTime preparationTime,"},{"lineNumber":42,"author":{"gitID":"RyanAngJY"},"content":"                  Calories calories, Servings servings, Url url, Image image, Set\u003cTag\u003e tags) {"},{"lineNumber":43,"author":{"gitID":"RyanAngJY"},"content":"        requireAllNonNull(name, preparationTime, ingredient, instruction, url, image, tags);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.ingredient \u003d ingredient;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        this.instruction \u003d instruction;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        this.cookingTime \u003d cookingTime;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        this.preparationTime \u003d preparationTime;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        this.calories \u003d calories;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        this.servings \u003d servings;"},{"lineNumber":51,"author":{"gitID":"RyanAngJY"},"content":"        this.url \u003d url;"},{"lineNumber":52,"author":{"gitID":"RyanAngJY"},"content":"        this.image \u003d image;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":55,"author":{"gitID":"hoangduong1607"},"content":"        this.groupNames \u003d new HashSet\u003c\u003e();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public Ingredient getIngredient() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return ingredient;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public Instruction getInstruction() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return instruction;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public CookingTime getCookingTime() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return cookingTime;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public PreparationTime getPreparationTime() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return preparationTime;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public Calories getCalories() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return calories;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public Servings getServings() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return servings;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"RyanAngJY"},"content":"    public Url getUrl() {"},{"lineNumber":87,"author":{"gitID":"RyanAngJY"},"content":"        return url;"},{"lineNumber":88,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":90,"author":{"gitID":"RyanAngJY"},"content":"    public Image getImage() {"},{"lineNumber":91,"author":{"gitID":"RyanAngJY"},"content":"        return image;"},{"lineNumber":92,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":94,"author":{"gitID":"RyanAngJY"},"content":"    public boolean isNullImage() {"},{"lineNumber":95,"author":{"gitID":"RyanAngJY"},"content":"        return image.toString().equals(Image.NULL_IMAGE_REFERENCE);"},{"lineNumber":96,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"hoangduong1607"},"content":"    //@author hoangduong1607"},{"lineNumber":107,"author":{"gitID":"hoangduong1607"},"content":"    public Set\u003cGroupName\u003e getGroupNames() {"},{"lineNumber":108,"author":{"gitID":"hoangduong1607"},"content":"        return Collections.unmodifiableSet(groupNames);"},{"lineNumber":109,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":111,"author":{"gitID":"hoangduong1607"},"content":"    public void addNewGroup(GroupName groupName) {"},{"lineNumber":112,"author":{"gitID":"hoangduong1607"},"content":"        groupNames.add(groupName);"},{"lineNumber":113,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":115,"author":{"gitID":"RyanAngJY"},"content":"    //@@author RyanAngJY"},{"lineNumber":116,"author":{"gitID":"RyanAngJY"},"content":"    public String getTextFormattedRecipe() {"},{"lineNumber":117,"author":{"gitID":"RyanAngJY"},"content":"        return NAME_HEADER + getName() + LINE_BREAK"},{"lineNumber":118,"author":{"gitID":"RyanAngJY"},"content":"                + INGREDIENTS_HEADER + getIngredient() + LINE_BREAK"},{"lineNumber":119,"author":{"gitID":"RyanAngJY"},"content":"                + INSTRUCTIONS_HEADER + getInstruction() + LINE_BREAK;"},{"lineNumber":120,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"RyanAngJY"},"content":"    //@@author"},{"lineNumber":122,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        if (!(other instanceof Recipe)) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        Recipe otherRecipe \u003d (Recipe) other;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        return otherRecipe.getName().equals(this.getName())"},{"lineNumber":135,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherRecipe.getIngredient().equals(this.getIngredient())"},{"lineNumber":136,"author":{"gitID":"RyanAngJY"},"content":"                \u0026\u0026 otherRecipe.getInstruction().equals(this.getInstruction())"},{"lineNumber":137,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherRecipe.getCookingTime().equals(this.getCookingTime())"},{"lineNumber":138,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherRecipe.getPreparationTime().equals(this.getPreparationTime())"},{"lineNumber":139,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherRecipe.getCalories().equals(this.getCalories())"},{"lineNumber":140,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherRecipe.getServings().equals(this.getServings())"},{"lineNumber":141,"author":{"gitID":"RyanAngJY"},"content":"                \u0026\u0026 otherRecipe.getUrl().equals(this.getUrl())"},{"lineNumber":142,"author":{"gitID":"RyanAngJY"},"content":"                \u0026\u0026 otherRecipe.getImage().getImageName().equals(this.getImage().getImageName())"},{"lineNumber":143,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherRecipe.getTextFormattedRecipe().equals(this.getTextFormattedRecipe());"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":149,"author":{"gitID":"RyanAngJY"},"content":"        return Objects.hash(name, preparationTime, ingredient, instruction, url, image, tags);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        builder.append(NEW_LINE)"},{"lineNumber":156,"author":{"gitID":"-"},"content":"                .append(getName())"},{"lineNumber":157,"author":{"gitID":"-"},"content":"                .append(LINE_BREAK)"},{"lineNumber":158,"author":{"gitID":"-"},"content":"                .append(\"Preparation Time: \")"},{"lineNumber":159,"author":{"gitID":"-"},"content":"                .append(getPreparationTime())"},{"lineNumber":160,"author":{"gitID":"-"},"content":"                .append(LINE_BREAK)"},{"lineNumber":161,"author":{"gitID":"-"},"content":"                .append(\"Cooking Time: \")"},{"lineNumber":162,"author":{"gitID":"-"},"content":"                .append(getCookingTime())"},{"lineNumber":163,"author":{"gitID":"-"},"content":"                .append(LINE_BREAK)"},{"lineNumber":164,"author":{"gitID":"-"},"content":"                .append(\"Ingredient: \")"},{"lineNumber":165,"author":{"gitID":"-"},"content":"                .append(NEW_LINE)"},{"lineNumber":166,"author":{"gitID":"-"},"content":"                .append(getIngredient())"},{"lineNumber":167,"author":{"gitID":"-"},"content":"                .append(LINE_BREAK)"},{"lineNumber":168,"author":{"gitID":"-"},"content":"                .append(\"Instruction: \")"},{"lineNumber":169,"author":{"gitID":"-"},"content":"                .append(NEW_LINE)"},{"lineNumber":170,"author":{"gitID":"-"},"content":"                .append(getInstruction())"},{"lineNumber":171,"author":{"gitID":"-"},"content":"                .append(LINE_BREAK)"},{"lineNumber":172,"author":{"gitID":"RyanAngJY"},"content":"                .append(\"Url: \")"},{"lineNumber":173,"author":{"gitID":"-"},"content":"                .append(NEW_LINE)"},{"lineNumber":174,"author":{"gitID":"RyanAngJY"},"content":"                .append(getUrl())"},{"lineNumber":175,"author":{"gitID":"-"},"content":"                .append(LINE_BREAK)"},{"lineNumber":176,"author":{"gitID":"RyanAngJY"},"content":"                .append(\"Image: \")"},{"lineNumber":177,"author":{"gitID":"-"},"content":"                .append(NEW_LINE)"},{"lineNumber":178,"author":{"gitID":"RyanAngJY"},"content":"                .append(getImage())"},{"lineNumber":179,"author":{"gitID":"-"},"content":"                .append(LINE_BREAK)"},{"lineNumber":180,"author":{"gitID":"-"},"content":"                .append(\"Tags: \");"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":39,"hoangduong1607":12,"-":134}},{"path":"src/main/java/seedu/recipe/model/recipe/Url.java","lines":[{"lineNumber":1,"author":{"gitID":"RyanAngJY"},"content":"//@@author RyanAngJY"},{"lineNumber":2,"author":{"gitID":"RyanAngJY"},"content":"package seedu.recipe.model.recipe;"},{"lineNumber":3,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":4,"author":{"gitID":"RyanAngJY"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"RyanAngJY"},"content":"import static seedu.recipe.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":7,"author":{"gitID":"RyanAngJY"},"content":"import java.net.URL;"},{"lineNumber":8,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":9,"author":{"gitID":"RyanAngJY"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"RyanAngJY"},"content":" * Represents a Recipe\u0027s URL in the address book."},{"lineNumber":11,"author":{"gitID":"RyanAngJY"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidUrl(String)}"},{"lineNumber":12,"author":{"gitID":"RyanAngJY"},"content":" */"},{"lineNumber":13,"author":{"gitID":"RyanAngJY"},"content":"public class Url {"},{"lineNumber":14,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":15,"author":{"gitID":"RyanAngJY"},"content":"    public static final String NULL_URL_REFERENCE \u003d \"-\";"},{"lineNumber":16,"author":{"gitID":"RyanAngJY"},"content":"    public static final String MESSAGE_URL_CONSTRAINTS \u003d \"URL should start with a http:// or https://\";"},{"lineNumber":17,"author":{"gitID":"RyanAngJY"},"content":"    public final String value;"},{"lineNumber":18,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":19,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"RyanAngJY"},"content":"     * Constructs a {@code Url}."},{"lineNumber":21,"author":{"gitID":"RyanAngJY"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"RyanAngJY"},"content":"     * @param url A valid Url."},{"lineNumber":23,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"RyanAngJY"},"content":"    public Url(String url) {"},{"lineNumber":25,"author":{"gitID":"RyanAngJY"},"content":"        requireNonNull(url);"},{"lineNumber":26,"author":{"gitID":"RyanAngJY"},"content":"        checkArgument(isValidUrl(url), MESSAGE_URL_CONSTRAINTS);"},{"lineNumber":27,"author":{"gitID":"RyanAngJY"},"content":"        this.value \u003d url;"},{"lineNumber":28,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":30,"author":{"gitID":"RyanAngJY"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"RyanAngJY"},"content":"     *  Returns true if a given string is a valid web url, or no url has been assigned"},{"lineNumber":32,"author":{"gitID":"RyanAngJY"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"RyanAngJY"},"content":"    public static boolean isValidUrl(String testUrl) {"},{"lineNumber":34,"author":{"gitID":"RyanAngJY"},"content":"        if (testUrl.equals(NULL_URL_REFERENCE)) {"},{"lineNumber":35,"author":{"gitID":"RyanAngJY"},"content":"            return true;"},{"lineNumber":36,"author":{"gitID":"RyanAngJY"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"RyanAngJY"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"RyanAngJY"},"content":"            URL url \u003d new URL(testUrl);"},{"lineNumber":39,"author":{"gitID":"RyanAngJY"},"content":"            url.toURI();"},{"lineNumber":40,"author":{"gitID":"RyanAngJY"},"content":"            return true;"},{"lineNumber":41,"author":{"gitID":"RyanAngJY"},"content":"        } catch (Exception e) {"},{"lineNumber":42,"author":{"gitID":"RyanAngJY"},"content":"            return false;"},{"lineNumber":43,"author":{"gitID":"RyanAngJY"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":46,"author":{"gitID":"RyanAngJY"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"RyanAngJY"},"content":"    public String toString() {"},{"lineNumber":48,"author":{"gitID":"RyanAngJY"},"content":"        return value;"},{"lineNumber":49,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":51,"author":{"gitID":"RyanAngJY"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"RyanAngJY"},"content":"    public boolean equals(Object other) {"},{"lineNumber":53,"author":{"gitID":"RyanAngJY"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":54,"author":{"gitID":"RyanAngJY"},"content":"                || (other instanceof Url // instanceof handles nulls"},{"lineNumber":55,"author":{"gitID":"RyanAngJY"},"content":"                \u0026\u0026 this.value.equals(((Url) other).value)); // state check"},{"lineNumber":56,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"RyanAngJY"},"content":""},{"lineNumber":58,"author":{"gitID":"RyanAngJY"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"RyanAngJY"},"content":"    public int hashCode() {"},{"lineNumber":60,"author":{"gitID":"RyanAngJY"},"content":"        return value.hashCode();"},{"lineNumber":61,"author":{"gitID":"RyanAngJY"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"RyanAngJY"},"content":"}"},{"lineNumber":63,"author":{"gitID":"RyanAngJY"},"content":"//@@author"}],"authorContributionMap":{"RyanAngJY":63}},{"path":"src/main/java/seedu/recipe/model/recipe/GroupPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"hoangduong1607"},"content":"//@@author hoangduong1607"},{"lineNumber":2,"author":{"gitID":"hoangduong1607"},"content":"package seedu.recipe.model.recipe;"},{"lineNumber":3,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":4,"author":{"gitID":"hoangduong1607"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":6,"author":{"gitID":"hoangduong1607"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"hoangduong1607"},"content":" * Tests that a given {@code groupName} matches any of {@code Recipe}\u0027s {@code groupNames}."},{"lineNumber":8,"author":{"gitID":"hoangduong1607"},"content":" */"},{"lineNumber":9,"author":{"gitID":"hoangduong1607"},"content":"public class GroupPredicate implements Predicate\u003cRecipe\u003e {"},{"lineNumber":10,"author":{"gitID":"hoangduong1607"},"content":"    private final GroupName groupName;"},{"lineNumber":11,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":12,"author":{"gitID":"hoangduong1607"},"content":"    public GroupPredicate(GroupName groupName) {"},{"lineNumber":13,"author":{"gitID":"hoangduong1607"},"content":"        this.groupName \u003d groupName;"},{"lineNumber":14,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"hoangduong1607"},"content":""},{"lineNumber":16,"author":{"gitID":"hoangduong1607"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"hoangduong1607"},"content":"    public boolean test(Recipe recipe) {"},{"lineNumber":18,"author":{"gitID":"hoangduong1607"},"content":"        return recipe.getGroupNames().stream().anyMatch(other -\u003e other.equals(groupName));"},{"lineNumber":19,"author":{"gitID":"hoangduong1607"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"hoangduong1607"},"content":"}"}],"authorContributionMap":{"hoangduong1607":20}},{"path":"src/main/java/seedu/recipe/model/recipe/Calories.java","lines":[{"lineNumber":1,"author":{"gitID":"kokonguyen191"},"content":"//@@author kokonguyen191"},{"lineNumber":2,"author":{"gitID":"kokonguyen191"},"content":"package seedu.recipe.model.recipe;"},{"lineNumber":3,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":4,"author":{"gitID":"kokonguyen191"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":7,"author":{"gitID":"kokonguyen191"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"kokonguyen191"},"content":" * Represents a Recipe\u0027s number of calories in the Recipe Book."},{"lineNumber":9,"author":{"gitID":"kokonguyen191"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidCalories(String)}"},{"lineNumber":10,"author":{"gitID":"kokonguyen191"},"content":" */"},{"lineNumber":11,"author":{"gitID":"kokonguyen191"},"content":"public class Calories {"},{"lineNumber":12,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":13,"author":{"gitID":"kokonguyen191"},"content":"    public static final String NULL_CALORIES_REFERENCE \u003d \"-\";"},{"lineNumber":14,"author":{"gitID":"kokonguyen191"},"content":"    public static final String MESSAGE_CALORIES_CONSTRAINTS \u003d \"The number of calories must a positive integer.\";"},{"lineNumber":15,"author":{"gitID":"kokonguyen191"},"content":"    public static final String CALORIES_VALIDATION_REGEX \u003d \"[\\\\d]+\";"},{"lineNumber":16,"author":{"gitID":"kokonguyen191"},"content":"    public final String value;"},{"lineNumber":17,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":18,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"kokonguyen191"},"content":"     * Constructs a {@code Calories} object."},{"lineNumber":20,"author":{"gitID":"kokonguyen191"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"kokonguyen191"},"content":"     * @param calories A valid number of calories."},{"lineNumber":22,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"kokonguyen191"},"content":"    public Calories(String calories) {"},{"lineNumber":24,"author":{"gitID":"kokonguyen191"},"content":"        requireNonNull(calories);"},{"lineNumber":25,"author":{"gitID":"kokonguyen191"},"content":"        checkArgument(isValidCalories(calories), MESSAGE_CALORIES_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitID":"kokonguyen191"},"content":"        this.value \u003d calories;"},{"lineNumber":27,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":29,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"kokonguyen191"},"content":"     * Returns true if a given string is a valid number of calories."},{"lineNumber":31,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"kokonguyen191"},"content":"    public static boolean isValidCalories(String test) {"},{"lineNumber":33,"author":{"gitID":"kokonguyen191"},"content":"        return test.equals(NULL_CALORIES_REFERENCE) || test.matches(CALORIES_VALIDATION_REGEX);"},{"lineNumber":34,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":36,"author":{"gitID":"kokonguyen191"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"kokonguyen191"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitID":"kokonguyen191"},"content":"        return value;"},{"lineNumber":39,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":41,"author":{"gitID":"kokonguyen191"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"kokonguyen191"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitID":"kokonguyen191"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitID":"kokonguyen191"},"content":"                || (other instanceof Calories // instanceof handles nulls"},{"lineNumber":45,"author":{"gitID":"kokonguyen191"},"content":"                \u0026\u0026 this.value.equals(((Calories) other).value)); // state check"},{"lineNumber":46,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":48,"author":{"gitID":"kokonguyen191"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"kokonguyen191"},"content":"    public int hashCode() {"},{"lineNumber":50,"author":{"gitID":"kokonguyen191"},"content":"        return value.hashCode();"},{"lineNumber":51,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":53,"author":{"gitID":"kokonguyen191"},"content":"}"}],"authorContributionMap":{"kokonguyen191":53}},{"path":"src/main/java/seedu/recipe/model/recipe/CookingTime.java","lines":[{"lineNumber":1,"author":{"gitID":"kokonguyen191"},"content":"//@@author kokonguyen191"},{"lineNumber":2,"author":{"gitID":"kokonguyen191"},"content":"package seedu.recipe.model.recipe;"},{"lineNumber":3,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":4,"author":{"gitID":"kokonguyen191"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"kokonguyen191"},"content":"import static seedu.recipe.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":7,"author":{"gitID":"kokonguyen191"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"kokonguyen191"},"content":" * Represents a Recipe\u0027s cooking time in the Recipe Book."},{"lineNumber":9,"author":{"gitID":"kokonguyen191"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidCookingTime(String)}"},{"lineNumber":10,"author":{"gitID":"kokonguyen191"},"content":" */"},{"lineNumber":11,"author":{"gitID":"kokonguyen191"},"content":"public class CookingTime {"},{"lineNumber":12,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":13,"author":{"gitID":"kokonguyen191"},"content":"    public static final String NULL_COOKING_TIME_REFERENCE \u003d \"-\";"},{"lineNumber":14,"author":{"gitID":"kokonguyen191"},"content":"    public static final String MESSAGE_COOKING_TIME_CONSTRAINTS \u003d"},{"lineNumber":15,"author":{"gitID":"kokonguyen191"},"content":"            \"Cooking time can be in any of these format: 1h10m, 70m, 1 hour 10 minutes, 1 h 10 min, 70.\";"},{"lineNumber":16,"author":{"gitID":"kokonguyen191"},"content":"    public static final String COOKING_TIME_VALIDATION_REGEX \u003d"},{"lineNumber":17,"author":{"gitID":"kokonguyen191"},"content":"            \"([\\\\d]+[ ]{0,1}(minute[s]{0,1}|min[s]{0,1}|m|hour[s]{0,1}|h){0,1}[ ]{0,1}){1,2}\";"},{"lineNumber":18,"author":{"gitID":"kokonguyen191"},"content":"    public final String value;"},{"lineNumber":19,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":20,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"kokonguyen191"},"content":"     * Constructs a {@code CookingTime}."},{"lineNumber":22,"author":{"gitID":"kokonguyen191"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"kokonguyen191"},"content":"     * @param cookingTime A valid cooking time."},{"lineNumber":24,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"kokonguyen191"},"content":"    public CookingTime(String cookingTime) {"},{"lineNumber":26,"author":{"gitID":"kokonguyen191"},"content":"        requireNonNull(cookingTime);"},{"lineNumber":27,"author":{"gitID":"kokonguyen191"},"content":"        checkArgument(isValidCookingTime(cookingTime), MESSAGE_COOKING_TIME_CONSTRAINTS);"},{"lineNumber":28,"author":{"gitID":"kokonguyen191"},"content":"        this.value \u003d cookingTime;"},{"lineNumber":29,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":31,"author":{"gitID":"kokonguyen191"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"kokonguyen191"},"content":"     * Returns true if a given string is a valid recipe cooking time."},{"lineNumber":33,"author":{"gitID":"kokonguyen191"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"kokonguyen191"},"content":"    public static boolean isValidCookingTime(String test) {"},{"lineNumber":35,"author":{"gitID":"kokonguyen191"},"content":"        return test.equals(NULL_COOKING_TIME_REFERENCE) || test.matches(COOKING_TIME_VALIDATION_REGEX);"},{"lineNumber":36,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":38,"author":{"gitID":"kokonguyen191"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"kokonguyen191"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitID":"kokonguyen191"},"content":"        return value;"},{"lineNumber":41,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":43,"author":{"gitID":"kokonguyen191"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"kokonguyen191"},"content":"    public boolean equals(Object other) {"},{"lineNumber":45,"author":{"gitID":"kokonguyen191"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":46,"author":{"gitID":"kokonguyen191"},"content":"                || (other instanceof CookingTime // instanceof handles nulls"},{"lineNumber":47,"author":{"gitID":"kokonguyen191"},"content":"                \u0026\u0026 this.value.equals(((CookingTime) other).value)); // state check"},{"lineNumber":48,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":50,"author":{"gitID":"kokonguyen191"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"kokonguyen191"},"content":"    public int hashCode() {"},{"lineNumber":52,"author":{"gitID":"kokonguyen191"},"content":"        return value.hashCode();"},{"lineNumber":53,"author":{"gitID":"kokonguyen191"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"kokonguyen191"},"content":""},{"lineNumber":55,"author":{"gitID":"kokonguyen191"},"content":"}"}],"authorContributionMap":{"kokonguyen191":55}},{"path":"src/main/java/seedu/recipe/model/tag/TagContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"nicholasangcx"},"content":"//@@author nicholasangcx"},{"lineNumber":2,"author":{"gitID":"nicholasangcx"},"content":"package seedu.recipe.model.tag;"},{"lineNumber":3,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":4,"author":{"gitID":"nicholasangcx"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"nicholasangcx"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":7,"author":{"gitID":"nicholasangcx"},"content":"import seedu.recipe.model.recipe.Recipe;"},{"lineNumber":8,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":9,"author":{"gitID":"nicholasangcx"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"nicholasangcx"},"content":" * Tests that a {@code Recipe}\u0027s {@code Tags} matches any of the keywords given."},{"lineNumber":11,"author":{"gitID":"nicholasangcx"},"content":" */"},{"lineNumber":12,"author":{"gitID":"nicholasangcx"},"content":"public class TagContainsKeywordsPredicate implements Predicate\u003cRecipe\u003e {"},{"lineNumber":13,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":14,"author":{"gitID":"nicholasangcx"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":15,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":16,"author":{"gitID":"nicholasangcx"},"content":"    public TagContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":17,"author":{"gitID":"nicholasangcx"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":18,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":20,"author":{"gitID":"nicholasangcx"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"nicholasangcx"},"content":"    public boolean test(Recipe recipe) {"},{"lineNumber":22,"author":{"gitID":"nicholasangcx"},"content":"        return keywords.stream()"},{"lineNumber":23,"author":{"gitID":"nicholasangcx"},"content":"                    .anyMatch(keyword -\u003e recipe.getTags().stream()"},{"lineNumber":24,"author":{"gitID":"nicholasangcx"},"content":"                        .anyMatch(tag -\u003e tag.tagName.equals(keyword)));"},{"lineNumber":25,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":27,"author":{"gitID":"nicholasangcx"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"nicholasangcx"},"content":"    public boolean equals(Object other) {"},{"lineNumber":29,"author":{"gitID":"nicholasangcx"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":30,"author":{"gitID":"nicholasangcx"},"content":"                || (other instanceof TagContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":31,"author":{"gitID":"nicholasangcx"},"content":"                \u0026\u0026 this.keywords.equals(((TagContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":32,"author":{"gitID":"nicholasangcx"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"nicholasangcx"},"content":""},{"lineNumber":34,"author":{"gitID":"nicholasangcx"},"content":"}"},{"lineNumber":35,"author":{"gitID":"nicholasangcx"},"content":"//@@author"}],"authorContributionMap":{"nicholasangcx":35}},{"path":"src/main/java/seedu/recipe/model/RecipeBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.recipe.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.Recipe;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.UniqueRecipeList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.exceptions.DuplicateRecipeException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.recipe.model.recipe.exceptions.RecipeNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.recipe.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.recipe.model.tag.UniqueTagList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Wraps all data at the recipe-book level"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class RecipeBook implements ReadOnlyRecipeBook {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final UniqueRecipeList recipes;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        recipes \u003d new UniqueRecipeList();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public RecipeBook() {}"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Creates an RecipeBook using the Recipes and Tags in the {@code toBeCopied}"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public RecipeBook(ReadOnlyRecipeBook toBeCopied) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void setRecipes(List\u003cRecipe\u003e recipes) throws DuplicateRecipeException {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        this.recipes.setRecipes(recipes);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code RecipeBook} with {@code newData}."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyRecipeBook newData) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        List\u003cRecipe\u003e syncedRecipeList \u003d newData.getRecipeList().stream()"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            setRecipes(syncedRecipeList);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        } catch (DuplicateRecipeException e) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"RecipeBooks should not have duplicate recipes\");"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    //// recipe-level operations"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Adds a recipe to the recipe book."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Also checks the new recipe\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the recipe to point to those in {@link #tags}."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * @throws DuplicateRecipeException if an equivalent recipe already exists."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void addRecipe(Recipe p) throws DuplicateRecipeException {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Recipe recipe \u003d syncWithMasterTagList(p);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any recipe"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // in the recipe list."},{"lineNumber":93,"author":{"gitID":"-"},"content":"        recipes.add(recipe);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Replaces the given recipe {@code target} in the list with {@code editedRecipe}."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * {@code RecipeBook}\u0027s tag list will be updated with the tags of {@code editedRecipe}."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * @throws DuplicateRecipeException if updating the recipe\u0027s details causes the recipe to be equivalent to"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     *      another existing recipe in the list."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * @throws RecipeNotFoundException if {@code target} could not be found in the list."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Recipe)"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void updateRecipe(Recipe target, Recipe editedRecipe)"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            throws DuplicateRecipeException, RecipeNotFoundException {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        requireNonNull(editedRecipe);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Recipe syncedEditedRecipe \u003d syncWithMasterTagList(editedRecipe);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any recipe"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // in the recipe list."},{"lineNumber":114,"author":{"gitID":"-"},"content":"        recipes.setRecipe(target, syncedEditedRecipe);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     *  Updates the master tag list to include tags in {@code recipe} that are not in the list."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     *  @return a copy of this {@code recipe} such that every tag in this recipe points to a Tag object in the master"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    private Recipe syncWithMasterTagList(Recipe recipe) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        final UniqueTagList recipeTags \u003d new UniqueTagList(recipe.getTags());"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        tags.mergeFrom(recipeTags);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // used for checking recipe tag references"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // Rebuild the list of recipe tags to point to the relevant tags in the master tag list."},{"lineNumber":132,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        recipeTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        return new Recipe(recipe.getName(), recipe.getIngredient(), recipe.getInstruction(), recipe.getCookingTime(),"},{"lineNumber":135,"author":{"gitID":"-"},"content":"                recipe.getPreparationTime(), recipe.getCalories(), recipe.getServings(), recipe.getUrl(),"},{"lineNumber":136,"author":{"gitID":"RyanAngJY"},"content":"                recipe.getImage(), correctTagReferences);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code RecipeBook}."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * @throws RecipeNotFoundException if the {@code key} is not in this {@code RecipeBook}."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public boolean removeRecipe(Recipe key) throws RecipeNotFoundException {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        if (recipes.remove(key)) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            throw new RecipeNotFoundException();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        return recipes.asObservableList().size() + \" recipes, \" + tags.asObservableList().size() +  \" tags\";"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    public ObservableList\u003cRecipe\u003e getRecipeList() {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        return recipes.asObservableList();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":178,"author":{"gitID":"-"},"content":"                || (other instanceof RecipeBook // instanceof handles nulls"},{"lineNumber":179,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.recipes.equals(((RecipeBook) other).recipes)"},{"lineNumber":180,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((RecipeBook) other).tags));"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        return Objects.hash(recipes, tags);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"RyanAngJY":1,"-":187}}]
